00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow2size+8
00000000                            lswifi: equ lsrow2size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l PalToCRAM,	ErrorTrap, vBlankRoutine, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2949 444B 2032 3030+  Date:		dc.b '(C)IDK 2001.SEP '
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000326 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
0000032C 2011                       		move.l	(a1),d0
0000032E 7200                       		moveq	#0,d1
00000330                            
00000330                            loc_32C:
00000330 D258                       		add.w	(a0)+,d1
00000332 B088                       		cmp.l	a0,d0
00000334 64FA                       		bcc.s	loc_32C
00000336 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
0000033C B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033E 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
00000342 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000346 7E00                       		moveq	#0,d7
00000348 3C3C 007F                  		move.w	#$7F,d6
0000034C                            
0000034C                            loc_348:
0000034C 2CC7                       		move.l	d7,(a6)+
0000034E 51CE FFFC                  		dbf	d6,loc_348
00000352 1039 00A1 0001             		move.b	($A10001).l,d0
00000358 0200 00C0                  		andi.b	#$C0,d0
0000035C 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
00000360 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000368                            
00000368                            GameInit:
00000368 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036E 7E00                       		moveq	#0,d7
00000370 3C3C 3F7F                  		move.w	#$3F7F,d6
00000374                            
00000374                            GameClrRAM:
00000374 2CC7                       		move.l	d7,(a6)+
00000376 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
0000037A                            
0000037A 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000380 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
00000388                            
00000388 6100 0000                  		bsr.w	VDPSetupGame
0000038C 6100 0000                  		bsr.w	SoundDriverLoad
00000390 6100 0000                  		bsr.w	JoypadInit
00000394 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
0000039A                            
0000039A                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
0000039A                            
0000039A                            MainGameLoop:
0000039A 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000039E 0240 003C                  		andi.w	#$3C,d0
000003A2 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003A6 60F2                       		bra.s	MainGameLoop
000003A8                            ; ===========================================================================
000003A8                            ; ---------------------------------------------------------------------------
000003A8                            ; Main game mode array
000003A8                            ; ---------------------------------------------------------------------------
000003A8                            
000003A8                            GameModeArray:
000003A8 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003AC                            ; ===========================================================================
000003AC 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003B0                            ; ===========================================================================
000003B0 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003B4                            ; ===========================================================================
000003B4 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003B8                            ; ===========================================================================
000003B8 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003BC                            ; ===========================================================================
000003BC 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003C0                            ; ===========================================================================
000003C0 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003C4                            ; ===========================================================================
000003C4 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003C8                            ; ===========================================================================
000003C8 4EF9 0000 0000             		jmp	Minecraft	; Minecraft ($20)	
000003CE                            ; ===========================================================================
000003CE                            
000003CE                            CheckSumError:
000003CE 6100 0000                  		bsr.w	VDPSetupGame
000003D2 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003DC 7E3F                       		moveq	#$3F,d7
000003DE                            
000003DE                            CheckSum_Red:
000003DE 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003E6 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003EA                            
000003EA                            CheckSum_Loop:
000003EA 60FE                       		bra.s	CheckSum_Loop
000003EC                            ; ===========================================================================
000003EC                            
000003EC                            BusError:
000003EC 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003F2 6000                       		bra.s	loc_43A
000003F4                            ; ===========================================================================
000003F4                            
000003F4                            AddressError:
000003F4 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003FA 6000                       		bra.s	loc_43A
000003FC                            ; ===========================================================================
000003FC                            
000003FC                            IllegalInstr:
000003FC 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
00000402 54AF 0002                  		addq.l	#2,2(sp)
00000406 6000                       		bra.s	loc_462
00000408                            ; ===========================================================================
00000408                            
00000408                            ZeroDivide:
00000408 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
0000040E 6000                       		bra.s	loc_462
00000410                            ; ===========================================================================
00000410                            
00000410                            ChkInstr:
00000410 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000416 6000                       		bra.s	loc_462
00000418                            ; ===========================================================================
00000418                            
00000418                            TrapvInstr:
00000418 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
0000041E 6000                       		bra.s	loc_462
00000420                            ; ===========================================================================
00000420                            
00000420                            PrivilegeViol:
00000420 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000426 6000                       		bra.s	loc_462
00000428                            ; ===========================================================================
00000428                            
00000428                            Trace:
00000428 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
0000042E 6000                       		bra.s	loc_462
00000430                            ; ===========================================================================
00000430                            
00000430                            Line1010Emu:
00000430 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000436 54AF 0002                  		addq.l	#2,2(sp)
0000043A 6000                       		bra.s	loc_462
0000043C                            ; ===========================================================================
0000043C                            
0000043C                            Line1111Emu:
0000043C 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
00000442 54AF 0002                  		addq.l	#2,2(sp)
00000446 6000                       		bra.s	loc_462
00000448                            ; ===========================================================================
00000448                            
00000448                            ErrorExcept:
00000448 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
0000044E 6000                       		bra.s	loc_462
00000450                            ; ===========================================================================
00000450                            
00000450                            loc_43A:
00000450 46FC 2700                  		move	#$2700,sr
00000454 544F                       		addq.w	#2,sp
00000456 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
0000045A 544F                       		addq.w	#2,sp
0000045C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000462 6100 0000                  		bsr.w	ShowErrorMsg
00000466 202F 0002                  		move.l	2(sp),d0
0000046A 6100 0000                  		bsr.w	sub_5BA
0000046E 2038 FC40                  		move.l	($FFFFFC40).w,d0
00000472 6100 0000                  		bsr.w	sub_5BA
00000476 6000                       		bra.s	loc_478
00000478                            ; ===========================================================================
00000478                            
00000478                            loc_462:
00000478 46FC 2700                  		move	#$2700,sr
0000047C 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
00000482 6100 0000                  		bsr.w	ShowErrorMsg
00000486 202F 0002                  		move.l	2(sp),d0
0000048A 6100 0000                  		bsr.w	sub_5BA
0000048E                            
0000048E                            loc_478:
0000048E 6100 0000                  		bsr.w	ErrorWaitForC
00000492 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000498 46FC 2300                  		move	#$2300,sr
0000049C 4E73                       		rte	
0000049E                            
0000049E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000049E                            
0000049E                            
0000049E                            ShowErrorMsg:				; XREF: loc_43A; loc_462
0000049E 4DF9 00C0 0000             		lea	($C00000).l,a6
000004A4 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004AE 41F9 0000 0000             		lea	(Art_Text).l,a0
000004B4 323C 027F                  		move.w	#$27F,d1
000004B8                            
000004B8                            Error_LoadGfx:
000004B8 3C98                       		move.w	(a0)+,(a6)
000004BA 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004BE 7000                       		moveq	#0,d0		; clear	d0
000004C0 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004C4 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004C8 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004CC 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004D6 7212                       		moveq	#$12,d1		; number of characters
000004D8                            
000004D8                            Error_LoopChars:
000004D8 7000                       		moveq	#0,d0
000004DA 1018                       		move.b	(a0)+,d0
000004DC 0640 0790                  		addi.w	#$790,d0
000004E0 3C80                       		move.w	d0,(a6)
000004E2 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004E6 4E75                       		rts	
000004E8                            ; End of function ShowErrorMsg
000004E8                            
000004E8                            ; ===========================================================================
000004E8 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004EC 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004F0 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004F4 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004F8 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004FC 0000                       		dc.w asc_5A6-ErrorText
000004FE 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
00000511 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
00000524 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000537 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
0000054A 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
0000055D 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
00000570 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
00000583 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000596 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005A9 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005BC 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005D0 00                         		even
000005D0                            
000005D0                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005D0                            
000005D0                            
000005D0                            sub_5BA:				; XREF: loc_43A; loc_462
000005D0 3CBC 07CA                  		move.w	#$7CA,(a6)
000005D4 7407                       		moveq	#7,d2
000005D6                            
000005D6                            loc_5C0:
000005D6 E998                       		rol.l	#4,d0
000005D8 6100                       		bsr.s	sub_5CA
000005DA 51CA FFFA                  		dbf	d2,loc_5C0
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5BA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            sub_5CA:				; XREF: sub_5BA
000005E0 3200                       		move.w	d0,d1
000005E2 0241 000F                  		andi.w	#$F,d1
000005E6 0C41 000A                  		cmpi.w	#$A,d1
000005EA 6500                       		bcs.s	loc_5D8
000005EC 5E41                       		addq.w	#7,d1
000005EE                            
000005EE                            loc_5D8:
000005EE 0641 07C0                  		addi.w	#$7C0,d1
000005F2 3C81                       		move.w	d1,(a6)
000005F4 4E75                       		rts	
000005F6                            ; End of function sub_5CA
000005F6                            
000005F6                            
000005F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005F6                            
000005F6                            
000005F6                            ErrorWaitForC:				; XREF: loc_478
000005F6 6100 0000                  		bsr.w	ReadJoypads
000005FA 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
00000600 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
00000604 4E75                       		rts	
00000606                            ; End of function ErrorWaitForC
00000606                            
00000606                            ; ===========================================================================
00000606                            
00000606                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D46                            Art_Text_end:		even
00000D46                            
00000D46                            ; ===========================================================================
00000D46                            ;VBlank
00000D46                            loc_B10:				; XREF: Vectors
00000D46 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000D4A 4A38 F62A                  		tst.b	($FFFFF62A).w
00000D4E 6700                       		beq.s	loc_B88
00000D50 3039 00C0 0004             		move.w	($C00004).l,d0
00000D56 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000D60 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000D68 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000D6E 6700                       		beq.s	loc_B42
00000D70 303C 0700                  		move.w	#$700,d0
00000D74                            
00000D74                            loc_B3E:
00000D74 51C8 FFFE                  		dbf	d0,loc_B3E
00000D78                            
00000D78                            loc_B42:
00000D78 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000D7C 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000D82 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000D88 0240 003E                  		andi.w	#$3E,d0
00000D8C 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000D90 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000D94                            
00000D94                            loc_B5E:				; XREF: loc_B88
00000D94 4EB9 0000 0000             		jsr	sub_71B4C
00000D9A                            
00000D9A                            loc_B64:				; XREF: loc_D50
00000D9A 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000D9E 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000DA2 4E73                       		rte	
00000DA4                            ; ===========================================================================
00000DA4 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000DA8 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000DAC 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000DB0 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000DB4 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000DB8 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000DBC 0000                       		dc.w loc_E72-off_B6E
00000DBE                            ; ===========================================================================
00000DBE                            
00000DBE                            loc_B88:				; XREF: loc_B10; off_B6E
00000DBE 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000DC4 6700                       		beq.s	loc_B9A
00000DC6 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000DCC 6600 FFC6                  		bne.w	loc_B5E
00000DD0                            
00000DD0                            loc_B9A:
00000DD0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000DD6 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000DDA 3039 00C0 0004             		move.w	($C00004).l,d0
00000DE0 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000DE6 6700                       		beq.s	loc_BBA
00000DE8 303C 0700                  		move.w	#$700,d0
00000DEC                            
00000DEC                            loc_BB6:
00000DEC 51C8 FFFE                  		dbf	d0,loc_BB6
00000DF0                            
00000DF0                            loc_BBA:
00000DF0 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000DF6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000DFE                            
00000DFE                            loc_BC8:
00000DFE 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000E06 66F6                       		bne.s	loc_BC8
00000E08 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E0C 6600                       		bne.s	loc_BFE
00000E0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E14 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E1A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000E20 3ABC 977F                  		move.w	#$977F,(a5)
00000E24 3ABC C000                  		move.w	#$C000,(a5)
00000E28 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E32 6000                       		bra.s	loc_C22
00000E34                            ; ===========================================================================
00000E34                            
00000E34                            loc_BFE:				; XREF: loc_BC8
00000E34 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E3A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E40 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000E46 3ABC 977F                  		move.w	#$977F,(a5)
00000E4A 3ABC C000                  		move.w	#$C000,(a5)
00000E4E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000E54 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E58                            
00000E58                            loc_C22:				; XREF: loc_BC8
00000E58 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000E5C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E64 6000 FF2E                  		bra.w	loc_B5E
00000E68                            ; ===========================================================================
00000E68                            
00000E68                            loc_C32:				; XREF: off_B6E
00000E68 6100 0000                  		bsr.w	sub_106E
00000E6C                            
00000E6C                            loc_C36:				; XREF: off_B6E
00000E6C 4A78 F614                  		tst.w	($FFFFF614).w
00000E70 6700 0000                  		beq.w	locret_C42
00000E74 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E78                            
00000E78                            locret_C42:
00000E78 4E75                       		rts	
00000E7A                            ; ===========================================================================
00000E7A                            
00000E7A                            loc_C44:				; XREF: off_B6E
00000E7A 6100 0000                  		bsr.w	sub_106E
00000E7E 6100 0000                  		bsr.w	sub_6886
00000E82 6100 0000                  		bsr.w	sub_1642
00000E86 4A78 F614                  		tst.w	($FFFFF614).w
00000E8A 6700 0000                  		beq.w	locret_C5C
00000E8E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E92                            
00000E92                            locret_C5C:
00000E92 4E75                       		rts	
00000E94                            ; ===========================================================================
00000E94                            
00000E94                            loc_C5E:				; XREF: off_B6E
00000E94 6100 0000                  		bsr.w	sub_106E
00000E98 4E75                       		rts	
00000E9A                            ; ===========================================================================
00000E9A                            
00000E9A                            loc_C64:				; XREF: off_B6E
00000E9A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000EA0 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000EA4                            
00000EA4                            loc_C6E:				; XREF: off_B6E
00000EA4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000EAC                            
00000EAC                            loc_C76:
00000EAC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000EB4 66F6                       		bne.s	loc_C76		; if not, branch
00000EB6 6100 0000                  		bsr.w	ReadJoypads
00000EBA 4A38 F64E                  		tst.b	($FFFFF64E).w
00000EBE 6600                       		bne.s	loc_CB0
00000EC0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EC6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000ECC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000ED2 3ABC 977F                  		move.w	#$977F,(a5)
00000ED6 3ABC C000                  		move.w	#$C000,(a5)
00000EDA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EE0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EE4 6000                       		bra.s	loc_CD4
00000EE6                            ; ===========================================================================
00000EE6                            
00000EE6                            loc_CB0:				; XREF: loc_C76
00000EE6 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EEC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EF2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EF8 3ABC 977F                  		move.w	#$977F,(a5)
00000EFC 3ABC C000                  		move.w	#$C000,(a5)
00000F00 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000F06 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F0A                            
00000F0A                            loc_CD4:				; XREF: loc_C76
00000F0A 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000F0E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F14 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000F1A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000F20 3ABC 977F                  		move.w	#$977F,(a5)
00000F24 3ABC 7C00                  		move.w	#$7C00,(a5)
00000F28 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F2E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F32 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F38 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F3E 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F44 3ABC 977F                  		move.w	#$977F,(a5)
00000F48 3ABC 7800                  		move.w	#$7800,(a5)
00000F4C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F52 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F56 4A38 F767                  		tst.b	($FFFFF767).w
00000F5A 6700                       		beq.s	loc_D50
00000F5C 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F62 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F68 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F6E 3ABC 977F                  		move.w	#$977F,(a5)
00000F72 3ABC 7000                  		move.w	#$7000,(a5)
00000F76 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F7C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F80 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F86                            
00000F86                            loc_D50:
00000F86 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000F8E 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F94 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F9A 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000FA0 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000FA6 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000FAC 6400                       		bcc.s	Demo_Time
00000FAE 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000FB4 588F                       		addq.l	#4,sp
00000FB6 6000 FDE2                  		bra.w	loc_B64
00000FBA                            
00000FBA                            ; ---------------------------------------------------------------------------
00000FBA                            ; Subroutine to	run a demo for an amount of time
00000FBA                            ; ---------------------------------------------------------------------------
00000FBA                            
00000FBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000FBA                            
00000FBA                            
00000FBA                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000FBA 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000FBE 4EB9 0000 0000             		jsr	AniArt_Load
00000FC4 4EB9 0000 0000             		jsr	HudUpdate
00000FCA 6100 0000                  		bsr.w	sub_165E
00000FCE 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000FD2 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000FD6 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000FDA                            
00000FDA                            Demo_TimeEnd:
00000FDA 4E75                       		rts	
00000FDC                            ; End of function Demo_Time
00000FDC                            
00000FDC                            ; ===========================================================================
00000FDC                            
00000FDC                            loc_DA6:				; XREF: off_B6E
00000FDC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FE4                            
00000FE4                            loc_DAE:
00000FE4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FEC 66F6                       		bne.s	loc_DAE		; if not, branch
00000FEE 6100 0000                  		bsr.w	ReadJoypads
00000FF2 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FF8 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FFE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001004 3ABC 977F                  		move.w	#$977F,(a5)
00001008 3ABC C000                  		move.w	#$C000,(a5)
0000100C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001012 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001016 4BF9 00C0 0004             		lea	($C00004).l,a5
0000101C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001022 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001028 3ABC 977F                  		move.w	#$977F,(a5)
0000102C 3ABC 7800                  		move.w	#$7800,(a5)
00001030 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001036 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000103A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001040 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001046 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000104C 3ABC 977F                  		move.w	#$977F,(a5)
00001050 3ABC 7C00                  		move.w	#$7C00,(a5)
00001054 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000105A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00001066 6100 0000                  		bsr.w	PalCycle_SS
0000106A 4A38 F767                  		tst.b	($FFFFF767).w
0000106E 6700                       		beq.s	loc_E64
00001070 4BF9 00C0 0004             		lea	($C00004).l,a5
00001076 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000107C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001082 3ABC 977F                  		move.w	#$977F,(a5)
00001086 3ABC 7000                  		move.w	#$7000,(a5)
0000108A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001090 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001094 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000109A                            
0000109A                            loc_E64:
0000109A 4A78 F614                  		tst.w	($FFFFF614).w
0000109E 6700 0000                  		beq.w	locret_E70
000010A2 5378 F614                  		subq.w	#1,($FFFFF614).w
000010A6                            
000010A6                            locret_E70:
000010A6 4E75                       		rts	
000010A8                            ; ===========================================================================
000010A8                            
000010A8                            loc_E72:				; XREF: off_B6E
000010A8 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000010B0                            
000010B0                            loc_E7A:
000010B0 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000010B8 66F6                       		bne.s	loc_E7A		; if not, branch
000010BA 6100 0000                  		bsr.w	ReadJoypads
000010BE 4A38 F64E                  		tst.b	($FFFFF64E).w
000010C2 6600                       		bne.s	loc_EB4
000010C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010CA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010D0 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000010D6 3ABC 977F                  		move.w	#$977F,(a5)
000010DA 3ABC C000                  		move.w	#$C000,(a5)
000010DE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010E4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010E8 6000                       		bra.s	loc_ED8
000010EA                            ; ===========================================================================
000010EA                            
000010EA                            loc_EB4:				; XREF: loc_E7A
000010EA 4BF9 00C0 0004             		lea	($C00004).l,a5
000010F0 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010F6 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010FC 3ABC 977F                  		move.w	#$977F,(a5)
00001100 3ABC C000                  		move.w	#$C000,(a5)
00001104 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000110A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000110E                            
0000110E                            loc_ED8:				; XREF: loc_E7A
0000110E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001112 4BF9 00C0 0004             		lea	($C00004).l,a5
00001118 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000111E 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001124                            
00001124                            loc_EEE:
00001124 3ABC 977F                  		move.w	#$977F,(a5)
00001128 3ABC 7C00                  		move.w	#$7C00,(a5)
0000112C 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001132 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001136 4BF9 00C0 0004             		lea	($C00004).l,a5
0000113C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001142 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001148 3ABC 977F                  		move.w	#$977F,(a5)
0000114C 3ABC 7800                  		move.w	#$7800,(a5)
00001150 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001156 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000115A 4A38 F767                  		tst.b	($FFFFF767).w
0000115E 6700                       		beq.s	loc_F54
00001160 4BF9 00C0 0004             		lea	($C00004).l,a5
00001166 2ABC 9401 9370             		move.l	#$94019370,(a5)
0000116C 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001172 3ABC 977F                  		move.w	#$977F,(a5)
00001176 3ABC 7000                  		move.w	#$7000,(a5)
0000117A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001180 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001184 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000118A                            
0000118A                            loc_F54:
0000118A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001192 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00001198 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
0000119E 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000011A4 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000011AA 6100 0000                  		bsr.w	LoadTilesAsYouMove
000011AE 4EB9 0000 0000             		jsr	AniArt_Load
000011B4 4EB9 0000 0000             		jsr	HudUpdate
000011BA 6100 0000                  		bsr.w	sub_1642
000011BE 4E75                       		rts	
000011C0                            ; ===========================================================================
000011C0                            
000011C0                            loc_F8A:				; XREF: off_B6E
000011C0 6100 0000                  		bsr.w	sub_106E
000011C4 5238 F628                  		addq.b	#1,($FFFFF628).w
000011C8 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000011CE 4E75                       		rts	
000011D0                            ; ===========================================================================
000011D0                            
000011D0                            loc_F9A:				; XREF: off_B6E
000011D0 6100 0000                  		bsr.w	sub_106E
000011D4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000011D8 6000 0000                  		bra.w	sub_1642
000011DC                            ; ===========================================================================
000011DC                            
000011DC                            loc_FA6:				; XREF: off_B6E
000011DC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011E4                            
000011E4                            loc_FAE:
000011E4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000011EC 66F6                       		bne.s	loc_FAE		; if not, branch
000011EE 6100 0000                  		bsr.w	ReadJoypads
000011F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000011F8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000011FE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001204 3ABC 977F                  		move.w	#$977F,(a5)
00001208 3ABC C000                  		move.w	#$C000,(a5)
0000120C 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001212 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001216 4BF9 00C0 0004             		lea	($C00004).l,a5
0000121C 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001222 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001228 3ABC 977F                  		move.w	#$977F,(a5)
0000122C 3ABC 7800                  		move.w	#$7800,(a5)
00001230 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001236 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000123A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001240 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001246 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000124C 3ABC 977F                  		move.w	#$977F,(a5)
00001250 3ABC 7C00                  		move.w	#$7C00,(a5)
00001254 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000125A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000125E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001266 4A38 F767                  		tst.b	($FFFFF767).w
0000126A 6700                       		beq.s	loc_1060
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001278 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000127E 3ABC 977F                  		move.w	#$977F,(a5)
00001282 3ABC 7000                  		move.w	#$7000,(a5)
00001286 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000128C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001290 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001296                            
00001296                            loc_1060:
00001296 4A78 F614                  		tst.w	($FFFFF614).w
0000129A 6700 0000                  		beq.w	locret_106C
0000129E 5378 F614                  		subq.w	#1,($FFFFF614).w
000012A2                            
000012A2                            locret_106C:
000012A2 4E75                       		rts	
000012A4                            
000012A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012A4                            
000012A4                            
000012A4                            sub_106E:				; XREF: loc_C32; et al
000012A4 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000012AC                            
000012AC                            loc_1076:
000012AC 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
000012B4 66F6                       		bne.s	loc_1076	; if not, branch
000012B6 6100 0000                  		bsr.w	ReadJoypads
000012BA 4A38 F64E                  		tst.b	($FFFFF64E).w
000012BE 6600                       		bne.s	loc_10B0
000012C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000012C6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012CC 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000012D2 3ABC 977F                  		move.w	#$977F,(a5)
000012D6 3ABC C000                  		move.w	#$C000,(a5)
000012DA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000012E0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000012E4 6000                       		bra.s	loc_10D4
000012E6                            ; ===========================================================================
000012E6                            
000012E6                            loc_10B0:				; XREF: sub_106E
000012E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000012EC 2ABC 9400 9340             		move.l	#$94009340,(a5)
000012F2 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000012F8 3ABC 977F                  		move.w	#$977F,(a5)
000012FC 3ABC C000                  		move.w	#$C000,(a5)
00001300 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001306 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000130A                            
0000130A                            loc_10D4:				; XREF: sub_106E
0000130A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001310 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001316 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000131C 3ABC 977F                  		move.w	#$977F,(a5)
00001320 3ABC 7800                  		move.w	#$7800,(a5)
00001324 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000132A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000132E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001334 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000133A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001340 3ABC 977F                  		move.w	#$977F,(a5)
00001344 3ABC 7C00                  		move.w	#$7C00,(a5)
00001348 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000134E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001352 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000135A 4E75                       		rts	
0000135C                            ; End of function sub_106E
0000135C                            
0000135C                            ; ---------------------------------------------------------------------------
0000135C                            ; Subroutine to	move pallets from the RAM to CRAM
0000135C                            ; ---------------------------------------------------------------------------
0000135C                            
0000135C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000135C                            
0000135C                            
0000135C                            PalToCRAM:
0000135C 46FC 2700                  		move	#$2700,sr
00001360 4A78 F644                  		tst.w	($FFFFF644).w
00001364 6700                       		beq.s	locret_119C
00001366 31FC 0000 F644             		move.w	#0,($FFFFF644).w
0000136C 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001370 43F9 00C0 0000             		lea	($C00000).l,a1
00001376 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
0000137A 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001382 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001384 2298                       		move.l	(a0)+,(a1)
00001386 2298                       		move.l	(a0)+,(a1)
00001388 2298                       		move.l	(a0)+,(a1)
0000138A 2298                       		move.l	(a0)+,(a1)
0000138C 2298                       		move.l	(a0)+,(a1)
0000138E 2298                       		move.l	(a0)+,(a1)
00001390 2298                       		move.l	(a0)+,(a1)
00001392 2298                       		move.l	(a0)+,(a1)
00001394 2298                       		move.l	(a0)+,(a1)
00001396 2298                       		move.l	(a0)+,(a1)
00001398 2298                       		move.l	(a0)+,(a1)
0000139A 2298                       		move.l	(a0)+,(a1)
0000139C 2298                       		move.l	(a0)+,(a1)
0000139E 2298                       		move.l	(a0)+,(a1)
000013A0 2298                       		move.l	(a0)+,(a1)
000013A2 2298                       		move.l	(a0)+,(a1)
000013A4 2298                       		move.l	(a0)+,(a1)
000013A6 2298                       		move.l	(a0)+,(a1)
000013A8 2298                       		move.l	(a0)+,(a1)
000013AA 2298                       		move.l	(a0)+,(a1)
000013AC 2298                       		move.l	(a0)+,(a1)
000013AE 2298                       		move.l	(a0)+,(a1)
000013B0 2298                       		move.l	(a0)+,(a1)
000013B2 2298                       		move.l	(a0)+,(a1)
000013B4 2298                       		move.l	(a0)+,(a1)
000013B6 2298                       		move.l	(a0)+,(a1)
000013B8 2298                       		move.l	(a0)+,(a1)
000013BA 2298                       		move.l	(a0)+,(a1)
000013BC 2298                       		move.l	(a0)+,(a1)
000013BE 2298                       		move.l	(a0)+,(a1)
000013C0 2298                       		move.l	(a0)+,(a1)
000013C2 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
000013C8 4CDF 0300                  		movem.l	(sp)+,a0-a1
000013CC 4A38 F64F                  		tst.b	($FFFFF64F).w
000013D0 6600                       		bne.s	loc_119E
000013D2                            
000013D2                            locret_119C:
000013D2 4E73                       		rte	
000013D4                            ; ===========================================================================
000013D4                            
000013D4                            loc_119E:				; XREF: PalToCRAM
000013D4 4238 F64F                  		clr.b	($FFFFF64F).w
000013D8 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000013DC 6100 FBDC                  		bsr.w	Demo_Time
000013E0 4EB9 0000 0000             		jsr	sub_71B4C
000013E6 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000013EA 4E73                       		rte	
000013EC                            ; End of function PalToCRAM
000013EC                            
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            ; Subroutine to	initialise joypads
000013EC                            ; ---------------------------------------------------------------------------
000013EC                            
000013EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013EC                            
000013EC                            
000013EC                            JoypadInit:				; XREF: GameClrRAM
000013EC 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000013F4                            
000013F4                            Joypad_WaitZ80:
000013F4 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000013FC 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000013FE 7040                       		moveq	#$40,d0
00001400 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001406 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
0000140C 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001412 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0000141A 4E75                       		rts	
0000141C                            ; End of function JoypadInit
0000141C                            
0000141C                            ; ---------------------------------------------------------------------------
0000141C                            ; Subroutine to	read joypad input, and send it to the RAM
0000141C                            ; ---------------------------------------------------------------------------
0000141C                            
0000141C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000141C                            
0000141C                            
0000141C                            ReadJoypads:
0000141C 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001420 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001426 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001428 5449                       		addq.w	#2,a1		; do the second	joypad
0000142A                            
0000142A                            Joypad_Read:
0000142A 12BC 0000                  		move.b	#0,(a1)
0000142E 4E71                       		nop	
00001430 4E71                       		nop	
00001432 1011                       		move.b	(a1),d0
00001434 E508                       		lsl.b	#2,d0
00001436 0200 00C0                  		andi.b	#$C0,d0
0000143A 12BC 0040                  		move.b	#$40,(a1)
0000143E 4E71                       		nop	
00001440 4E71                       		nop	
00001442 1211                       		move.b	(a1),d1
00001444 0201 003F                  		andi.b	#$3F,d1
00001448 8001                       		or.b	d1,d0
0000144A 4600                       		not.b	d0
0000144C 1210                       		move.b	(a0),d1
0000144E B101                       		eor.b	d0,d1
00001450 10C0                       		move.b	d0,(a0)+
00001452 C200                       		and.b	d0,d1
00001454 10C1                       		move.b	d1,(a0)+
00001456 4E75                       		rts	
00001458                            ; End of function ReadJoypads
00001458                            
00001458                            
00001458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001458                            
00001458                            
00001458                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001458 41F9 00C0 0004             		lea	($C00004).l,a0
0000145E 43F9 00C0 0000             		lea	($C00000).l,a1
00001464 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
0000146A 7E12                       		moveq	#$12,d7
0000146C                            
0000146C                            VDP_Loop:
0000146C 309A                       		move.w	(a2)+,(a0)
0000146E 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001472                            
00001472 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001478 31C0 F60C                  		move.w	d0,($FFFFF60C).w
0000147C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001482 7000                       		moveq	#0,d0
00001484 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
0000148E 3E3C 003F                  		move.w	#$3F,d7
00001492                            
00001492                            VDP_ClrCRAM:
00001492 3280                       		move.w	d0,(a1)
00001494 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001498                            
00001498 42B8 F616                  		clr.l	($FFFFF616).w
0000149C 42B8 F61A                  		clr.l	($FFFFF61A).w
000014A0 2F01                       		move.l	d1,-(sp)
000014A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000014A8 3ABC 8F01                  		move.w	#$8F01,(a5)
000014AC 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
000014B2 3ABC 9780                  		move.w	#$9780,(a5)
000014B6 2ABC 4000 0080             		move.l	#$40000080,(a5)
000014BC 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
000014C4                            
000014C4                            loc_128E:
000014C4 3215                       		move.w	(a5),d1
000014C6 0801 0001                  		btst	#1,d1
000014CA 66F8                       		bne.s	loc_128E
000014CC                            
000014CC 3ABC 8F02                  		move.w	#$8F02,(a5)
000014D0 221F                       		move.l	(sp)+,d1
000014D2 4E75                       		rts	
000014D4                            ; End of function VDPSetupGame
000014D4                            
000014D4                            ; ===========================================================================
000014D4 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000014DC 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000014E4 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000014EC 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000014F4 9001 9100 9200             		dc.w $9001, $9100, $9200
000014FA                            
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            ; Subroutine to	clear the screen
000014FA                            ; ---------------------------------------------------------------------------
000014FA                            
000014FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014FA                            
000014FA                            
000014FA                            ClearScreen:
000014FA 4BF9 00C0 0004             		lea	($C00004).l,a5
00001500 3ABC 8F01                  		move.w	#$8F01,(a5)
00001504 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
0000150A 3ABC 9780                  		move.w	#$9780,(a5)
0000150E 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001514 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000151C                            
0000151C                            loc_12E6:
0000151C 3215                       		move.w	(a5),d1
0000151E 0801 0001                  		btst	#1,d1
00001522 66F8                       		bne.s	loc_12E6
00001524                            
00001524 3ABC 8F02                  		move.w	#$8F02,(a5)
00001528 4BF9 00C0 0004             		lea	($C00004).l,a5
0000152E 3ABC 8F01                  		move.w	#$8F01,(a5)
00001532 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001538 3ABC 9780                  		move.w	#$9780,(a5)
0000153C 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001542 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
0000154A                            
0000154A                            loc_1314:
0000154A 3215                       		move.w	(a5),d1
0000154C 0801 0001                  		btst	#1,d1
00001550 66F8                       		bne.s	loc_1314
00001552                            
00001552 3ABC 8F02                  		move.w	#$8F02,(a5)
00001556 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
0000155E 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001566 43F8 F800                  		lea	($FFFFF800).w,a1
0000156A 7000                       		moveq	#0,d0
0000156C 323C 009F                  		move.w	#$9F,d1
00001570                            
00001570                            loc_133A:
00001570 22C0                       		move.l	d0,(a1)+
00001572 51C9 FFFC                  		dbf	d1,loc_133A
00001576                            
00001576 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000157A 7000                       		moveq	#0,d0
0000157C 323C 00FF                  		move.w	#$FF,d1
00001580                            
00001580                            loc_134A:
00001580 22C0                       		move.l	d0,(a1)+
00001582 51C9 FFFC                  		dbf	d1,loc_134A
00001586 4E75                       		rts	
00001588                            ; End of function ClearScreen
00001588                            
00001588                            ; ---------------------------------------------------------------------------
00001588                            ; Subroutine to	load the sound driver
00001588                            ; ---------------------------------------------------------------------------
00001588                            
00001588                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001588                            
00001588                            
00001588                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001588 4E71                       		nop	
0000158A 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001592 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000159A 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
000015A0 43F9 00A0 0000             		lea	($A00000).l,a1
000015A6 6100 0000                  		bsr.w	KosDec		; decompress
000015AA 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
000015B2 4E71                       		nop	
000015B4 4E71                       		nop	
000015B6 4E71                       		nop	
000015B8 4E71                       		nop	
000015BA 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
000015C2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000015CA 4E75                       		rts	
000015CC                            ; End of function SoundDriverLoad
000015CC                            
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            ; Subroutine to	play a sound or	music track
000015CC                            ; ---------------------------------------------------------------------------
000015CC                            
000015CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015CC                            
000015CC                            
000015CC                            PlaySound:
000015CC 11C0 F00A                  		move.b	d0,($FFFFF00A).w
000015D0 4E75                       		rts	
000015D2                            ; End of function PlaySound
000015D2                            
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            ; Subroutine to	play a special sound/music (E0-E4)
000015D2                            ;
000015D2                            ; E0 - Fade out
000015D2                            ; E1 - Sega
000015D2                            ; E2 - Speed up
000015D2                            ; E3 - Normal speed
000015D2                            ; E4 - Stop
000015D2                            ; ---------------------------------------------------------------------------
000015D2                            
000015D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015D2                            
000015D2                            
000015D2                            PlaySound_Special:
000015D2 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000015D6 4E75                       		rts	
000015D8                            ; End of function PlaySound_Special
000015D8                            
000015D8                            ; ===========================================================================
000015D8                            ; ---------------------------------------------------------------------------
000015D8                            ; Unused sound/music subroutine
000015D8                            ; ---------------------------------------------------------------------------
000015D8                            
000015D8                            PlaySound_Unk:
000015D8 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000015DC 4E75                       		rts	
000015DE                            
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            ; Subroutine to	pause the game
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            
000015DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DE                            
000015DE                            
000015DE                            PauseGame:				; XREF: Level_MainLoop; et al
000015DE 4E71                       		nop	
000015E0 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000015E4 6700                       		beq.s	Unpause		; if not, branch
000015E6 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000015EA 6600                       		bne.s	loc_13BE	; if yes, branch
000015EC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000015F2 6700                       		beq.s	Pause_DoNothing	; if not, branch
000015F4                            
000015F4                            loc_13BE:
000015F4 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000015FA 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001600                            
00001600                            loc_13CA:
00001600 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001606 6100 0000                  		bsr.w	DelayProgram
0000160A 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
0000160E 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001610 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001616 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001618 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
0000161E 4E71                       		nop	
00001620 6000                       		bra.s	loc_1404
00001622                            ; ===========================================================================
00001622                            
00001622                            Pause_ChkBC:				; XREF: PauseGame
00001622 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001628 6600                       		bne.s	Pause_SlowMo	; if yes, branch
0000162A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001630 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001632                            
00001632                            Pause_ChkStart:				; XREF: PauseGame
00001632 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001638 67C6                       		beq.s	loc_13CA	; if not, branch
0000163A                            
0000163A                            loc_1404:				; XREF: PauseGame
0000163A 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001640                            
00001640                            Unpause:				; XREF: PauseGame
00001640 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001646                            
00001646                            Pause_DoNothing:			; XREF: PauseGame
00001646 4E75                       		rts	
00001648                            ; ===========================================================================
00001648                            
00001648                            Pause_SlowMo:				; XREF: PauseGame
00001648 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
0000164E 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001654 4E75                       		rts	
00001656                            ; End of function PauseGame
00001656                            
00001656                            ; ---------------------------------------------------------------------------
00001656                            ; Subroutine to	display	patterns via the VDP
00001656                            ; ---------------------------------------------------------------------------
00001656                            
00001656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001656                            
00001656                            
00001656                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001656 4DF9 00C0 0000             		lea	($C00000).l,a6
0000165C 283C 0080 0000             		move.l	#$800000,d4
00001662                            
00001662                            loc_142C:
00001662 2D40 0004                  		move.l	d0,4(a6)
00001666 3601                       		move.w	d1,d3
00001668                            
00001668                            loc_1432:
00001668 3C99                       		move.w	(a1)+,(a6)
0000166A 51CB FFFC                  		dbf	d3,loc_1432
0000166E D084                       		add.l	d4,d0
00001670 51CA FFF0                  		dbf	d2,loc_142C
00001674 4E75                       		rts	
00001676                            ; End of function ShowVDPGraphics
00001676                            
00001676                            ; ---------------------------------------------------------------------------
00001676                            ; Nemesis decompression	algorithm
00001676                            ; ---------------------------------------------------------------------------
00001676                            
00001676                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001676                            
00001676                            
00001676                            NemDec:
00001676 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000167A 47F9 0000 0000             		lea	(loc_1502).l,a3
00001680 49F9 00C0 0000             		lea	($C00000).l,a4
00001686 6000                       		bra.s	loc_145C
00001688                            ; ===========================================================================
00001688 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
0000168C 47F9 0000 0000             		lea	(loc_1518).l,a3
00001692                            
00001692                            loc_145C:				; XREF: NemDec
00001692 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001696 3418                       		move.w	(a0)+,d2
00001698 E34A                       		lsl.w	#1,d2
0000169A 6400                       		bcc.s	loc_146A
0000169C D6FC 000A                  		adda.w	#$A,a3
000016A0                            
000016A0                            loc_146A:
000016A0 E54A                       		lsl.w	#2,d2
000016A2 3A42                       		movea.w	d2,a5
000016A4 7608                       		moveq	#8,d3
000016A6 7400                       		moveq	#0,d2
000016A8 7800                       		moveq	#0,d4
000016AA 6100 0000                  		bsr.w	NemDec4
000016AE 1A18                       		move.b	(a0)+,d5
000016B0 E145                       		asl.w	#8,d5
000016B2 1A18                       		move.b	(a0)+,d5
000016B4 3C3C 0010                  		move.w	#$10,d6
000016B8 6100                       		bsr.s	NemDec2
000016BA 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
000016BE 4E75                       		rts	
000016C0                            ; End of function NemDec
000016C0                            
000016C0                            
000016C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016C0                            
000016C0                            
000016C0                            NemDec2:				; XREF: NemDec
000016C0 3E06                       		move.w	d6,d7
000016C2 5147                       		subq.w	#8,d7
000016C4 3205                       		move.w	d5,d1
000016C6 EE69                       		lsr.w	d7,d1
000016C8 0C01 00FC                  		cmpi.b	#-4,d1
000016CC 6400                       		bcc.s	loc_14D6
000016CE 0241 00FF                  		andi.w	#$FF,d1
000016D2 D241                       		add.w	d1,d1
000016D4 1031 1000                  		move.b	(a1,d1.w),d0
000016D8 4880                       		ext.w	d0
000016DA 9C40                       		sub.w	d0,d6
000016DC 0C46 0009                  		cmpi.w	#9,d6
000016E0 6400                       		bcc.s	loc_14B2
000016E2 5046                       		addq.w	#8,d6
000016E4 E145                       		asl.w	#8,d5
000016E6 1A18                       		move.b	(a0)+,d5
000016E8                            
000016E8                            loc_14B2:
000016E8 1231 1001                  		move.b	1(a1,d1.w),d1
000016EC 3001                       		move.w	d1,d0
000016EE 0241 000F                  		andi.w	#$F,d1
000016F2 0240 00F0                  		andi.w	#$F0,d0
000016F6                            
000016F6                            loc_14C0:				; XREF: NemDec3
000016F6 E848                       		lsr.w	#4,d0
000016F8                            
000016F8                            loc_14C2:				; XREF: NemDec3
000016F8 E98C                       		lsl.l	#4,d4
000016FA 8801                       		or.b	d1,d4
000016FC 5343                       		subq.w	#1,d3
000016FE 6600                       		bne.s	loc_14D0
00001700 4ED3                       		jmp	(a3)
00001702                            ; End of function NemDec2
00001702                            
00001702                            
00001702                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001702                            
00001702                            
00001702                            NemDec3:				; XREF: loc_1502
00001702 7800                       		moveq	#0,d4
00001704 7608                       		moveq	#8,d3
00001706                            
00001706                            loc_14D0:				; XREF: NemDec2
00001706 51C8 FFF0                  		dbf	d0,loc_14C2
0000170A 60B4                       		bra.s	NemDec2
0000170C                            ; ===========================================================================
0000170C                            
0000170C                            loc_14D6:				; XREF: NemDec2
0000170C 5D46                       		subq.w	#6,d6
0000170E 0C46 0009                  		cmpi.w	#9,d6
00001712 6400                       		bcc.s	loc_14E4
00001714 5046                       		addq.w	#8,d6
00001716 E145                       		asl.w	#8,d5
00001718 1A18                       		move.b	(a0)+,d5
0000171A                            
0000171A                            loc_14E4:				; XREF: NemDec3
0000171A 5F46                       		subq.w	#7,d6
0000171C 3205                       		move.w	d5,d1
0000171E EC69                       		lsr.w	d6,d1
00001720 3001                       		move.w	d1,d0
00001722 0241 000F                  		andi.w	#$F,d1
00001726 0240 0070                  		andi.w	#$70,d0
0000172A 0C46 0009                  		cmpi.w	#9,d6
0000172E 64C6                       		bcc.s	loc_14C0
00001730 5046                       		addq.w	#8,d6
00001732 E145                       		asl.w	#8,d5
00001734 1A18                       		move.b	(a0)+,d5
00001736 60BE                       		bra.s	loc_14C0
00001738                            ; End of function NemDec3
00001738                            
00001738                            ; ===========================================================================
00001738                            
00001738                            loc_1502:				; XREF: NemDec
00001738 2884                       		move.l	d4,(a4)
0000173A 534D                       		subq.w	#1,a5
0000173C 380D                       		move.w	a5,d4
0000173E 66C2                       		bne.s	NemDec3
00001740 4E75                       		rts	
00001742                            ; ===========================================================================
00001742 B982                       		eor.l	d4,d2
00001744 2882                       		move.l	d2,(a4)
00001746 534D                       		subq.w	#1,a5
00001748 380D                       		move.w	a5,d4
0000174A 66B6                       		bne.s	NemDec3
0000174C 4E75                       		rts	
0000174E                            ; ===========================================================================
0000174E                            
0000174E                            loc_1518:				; XREF: NemDec
0000174E 28C4                       		move.l	d4,(a4)+
00001750 534D                       		subq.w	#1,a5
00001752 380D                       		move.w	a5,d4
00001754 66AC                       		bne.s	NemDec3
00001756 4E75                       		rts	
00001758                            ; ===========================================================================
00001758 B982                       		eor.l	d4,d2
0000175A 28C2                       		move.l	d2,(a4)+
0000175C 534D                       		subq.w	#1,a5
0000175E 380D                       		move.w	a5,d4
00001760 66A0                       		bne.s	NemDec3
00001762 4E75                       		rts	
00001764                            
00001764                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001764                            
00001764                            
00001764                            NemDec4:				; XREF: NemDec
00001764 1018                       		move.b	(a0)+,d0
00001766                            
00001766                            loc_1530:
00001766 0C00 00FF                  		cmpi.b	#-1,d0
0000176A 6600                       		bne.s	loc_1538
0000176C 4E75                       		rts	
0000176E                            ; ===========================================================================
0000176E                            
0000176E                            loc_1538:				; XREF: NemDec4
0000176E 3E00                       		move.w	d0,d7
00001770                            
00001770                            loc_153A:
00001770 1018                       		move.b	(a0)+,d0
00001772 0C00 0080                  		cmpi.b	#$80,d0
00001776 64EE                       		bcc.s	loc_1530
00001778 1200                       		move.b	d0,d1
0000177A 0247 000F                  		andi.w	#$F,d7
0000177E 0241 0070                  		andi.w	#$70,d1
00001782 8E41                       		or.w	d1,d7
00001784 0240 000F                  		andi.w	#$F,d0
00001788 1200                       		move.b	d0,d1
0000178A E149                       		lsl.w	#8,d1
0000178C 8E41                       		or.w	d1,d7
0000178E 7208                       		moveq	#8,d1
00001790 9240                       		sub.w	d0,d1
00001792 6600                       		bne.s	loc_1568
00001794 1018                       		move.b	(a0)+,d0
00001796 D040                       		add.w	d0,d0
00001798 3387 0000                  		move.w	d7,(a1,d0.w)
0000179C 60D2                       		bra.s	loc_153A
0000179E                            ; ===========================================================================
0000179E                            
0000179E                            loc_1568:				; XREF: NemDec4
0000179E 1018                       		move.b	(a0)+,d0
000017A0 E368                       		lsl.w	d1,d0
000017A2 D040                       		add.w	d0,d0
000017A4 7A01                       		moveq	#1,d5
000017A6 E36D                       		lsl.w	d1,d5
000017A8 5345                       		subq.w	#1,d5
000017AA                            
000017AA                            loc_1574:
000017AA 3387 0000                  		move.w	d7,(a1,d0.w)
000017AE 5440                       		addq.w	#2,d0
000017B0 51CD FFF8                  		dbf	d5,loc_1574
000017B4 60BA                       		bra.s	loc_153A
000017B6                            ; End of function NemDec4
000017B6                            
000017B6                            ; ---------------------------------------------------------------------------
000017B6                            ; Subroutine to	load pattern load cues
000017B6                            ; ---------------------------------------------------------------------------
000017B6                            
000017B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017B6                            
000017B6                            
000017B6                            LoadPLC:
000017B6 48E7 0060                  		movem.l	a1-a2,-(sp)
000017BA 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017C0 D040                       		add.w	d0,d0
000017C2 3031 0000                  		move.w	(a1,d0.w),d0
000017C6 43F1 0000                  		lea	(a1,d0.w),a1
000017CA 45F8 F680                  		lea	($FFFFF680).w,a2
000017CE                            
000017CE                            loc_1598:
000017CE 4A92                       		tst.l	(a2)
000017D0 6700                       		beq.s	loc_15A0
000017D2 5C4A                       		addq.w	#6,a2
000017D4 60F8                       		bra.s	loc_1598
000017D6                            ; ===========================================================================
000017D6                            
000017D6                            loc_15A0:				; XREF: LoadPLC
000017D6 3019                       		move.w	(a1)+,d0
000017D8 6B00                       		bmi.s	loc_15AC
000017DA                            
000017DA                            loc_15A4:
000017DA 24D9                       		move.l	(a1)+,(a2)+
000017DC 34D9                       		move.w	(a1)+,(a2)+
000017DE 51C8 FFFA                  		dbf	d0,loc_15A4
000017E2                            
000017E2                            loc_15AC:
000017E2 4CDF 0600                  		movem.l	(sp)+,a1-a2
000017E6 4E75                       		rts	
000017E8                            ; End of function LoadPLC
000017E8                            
000017E8                            
000017E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000017E8                            
000017E8                            
000017E8                            LoadPLC2:
000017E8 48E7 0060                  		movem.l	a1-a2,-(sp)
000017EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000017F2 D040                       		add.w	d0,d0
000017F4 3031 0000                  		move.w	(a1,d0.w),d0
000017F8 43F1 0000                  		lea	(a1,d0.w),a1
000017FC 6100                       		bsr.s	ClearPLC
000017FE 45F8 F680                  		lea	($FFFFF680).w,a2
00001802 3019                       		move.w	(a1)+,d0
00001804 6B00                       		bmi.s	loc_15D8
00001806                            
00001806                            loc_15D0:
00001806 24D9                       		move.l	(a1)+,(a2)+
00001808 34D9                       		move.w	(a1)+,(a2)+
0000180A 51C8 FFFA                  		dbf	d0,loc_15D0
0000180E                            
0000180E                            loc_15D8:
0000180E 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001812 4E75                       		rts	
00001814                            ; End of function LoadPLC2
00001814                            
00001814                            ; ---------------------------------------------------------------------------
00001814                            ; Subroutine to	clear the pattern load cues
00001814                            ; ---------------------------------------------------------------------------
00001814                            
00001814                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001814                            
00001814                            
00001814                            ClearPLC:				; XREF: LoadPLC2
00001814 45F8 F680                  		lea	($FFFFF680).w,a2
00001818 701F                       		moveq	#$1F,d0
0000181A                            
0000181A                            ClearPLC_Loop:
0000181A 429A                       		clr.l	(a2)+
0000181C 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001820 4E75                       		rts	
00001822                            ; End of function ClearPLC
00001822                            
00001822                            ; ---------------------------------------------------------------------------
00001822                            ; Subroutine to	use graphics listed in a pattern load cue
00001822                            ; ---------------------------------------------------------------------------
00001822                            
00001822                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001822                            
00001822                            
00001822                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001822 4AB8 F680                  		tst.l	($FFFFF680).w
00001826 6700                       		beq.s	locret_1640
00001828 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000182C 6600                       		bne.s	locret_1640
0000182E 2078 F680                  		movea.l	($FFFFF680).w,a0
00001832 47F9 0000 1738             		lea	(loc_1502).l,a3
00001838 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000183C 3418                       		move.w	(a0)+,d2
0000183E 6A00                       		bpl.s	loc_160E
00001840 D6FC 000A                  		adda.w	#$A,a3
00001844                            
00001844                            loc_160E:
00001844 0242 7FFF                  		andi.w	#$7FFF,d2
00001848 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
0000184C 6100 FF16                  		bsr.w	NemDec4
00001850 1A18                       		move.b	(a0)+,d5
00001852 E145                       		asl.w	#8,d5
00001854 1A18                       		move.b	(a0)+,d5
00001856 7C10                       		moveq	#$10,d6
00001858 7000                       		moveq	#0,d0
0000185A 21C8 F680                  		move.l	a0,($FFFFF680).w
0000185E 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001862 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001866 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
0000186A 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
0000186E 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001872 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001876                            
00001876                            locret_1640:
00001876 4E75                       		rts	
00001878                            ; End of function RunPLC_RAM
00001878                            
00001878                            
00001878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001878                            
00001878                            
00001878                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001878 4A78 F6F8                  		tst.w	($FFFFF6F8).w
0000187C 6700 0000                  		beq.w	locret_16DA
00001880 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001886 7000                       		moveq	#0,d0
00001888 3038 F684                  		move.w	($FFFFF684).w,d0
0000188C 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001892 6000                       		bra.s	loc_1676
00001894                            ; End of function sub_1642
00001894                            
00001894                            
00001894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001894                            
00001894                            
00001894                            sub_165E:				; XREF: Demo_Time
00001894 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001898 6700                       		beq.s	locret_16DA
0000189A 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
000018A0 7000                       		moveq	#0,d0
000018A2 3038 F684                  		move.w	($FFFFF684).w,d0
000018A6 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
000018AC                            
000018AC                            loc_1676:				; XREF: sub_1642
000018AC 49F9 00C0 0004             		lea	($C00004).l,a4
000018B2 E588                       		lsl.l	#2,d0
000018B4 E448                       		lsr.w	#2,d0
000018B6 0040 4000                  		ori.w	#$4000,d0
000018BA 4840                       		swap	d0
000018BC 2880                       		move.l	d0,(a4)
000018BE 594C                       		subq.w	#4,a4
000018C0 2078 F680                  		movea.l	($FFFFF680).w,a0
000018C4 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
000018C8 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
000018CC 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
000018D0 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
000018D4 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000018D8 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000018DC 43F8 AA00                  		lea	($FFFFAA00).w,a1
000018E0                            
000018E0                            loc_16AA:				; XREF: sub_165E
000018E0 3A7C 0008                  		movea.w	#8,a5
000018E4 6100 FE1C                  		bsr.w	NemDec3
000018E8 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000018EC 6700                       		beq.s	loc_16DC
000018EE 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000018F2 66EC                       		bne.s	loc_16AA
000018F4 21C8 F680                  		move.l	a0,($FFFFF680).w
000018F8 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000018FC 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001900 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001904 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001908 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000190C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001910                            
00001910                            locret_16DA:				; XREF: sub_1642
00001910 4E75                       		rts	
00001912                            ; ===========================================================================
00001912                            
00001912                            loc_16DC:				; XREF: sub_165E
00001912 41F8 F680                  		lea	($FFFFF680).w,a0
00001916 7015                       		moveq	#$15,d0
00001918                            
00001918                            loc_16E2:				; XREF: sub_165E
00001918 20E8 0006                  		move.l	6(a0),(a0)+
0000191C 51C8 FFFA                  		dbf	d0,loc_16E2
00001920 4E75                       		rts	
00001922                            ; End of function sub_165E
00001922                            
00001922                            ; ---------------------------------------------------------------------------
00001922                            ; Subroutine to	execute	the pattern load cue
00001922                            ; ---------------------------------------------------------------------------
00001922                            
00001922                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001922                            
00001922                            
00001922                            RunPLC_ROM:
00001922 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001928 D040                       		add.w	d0,d0
0000192A 3031 0000                  		move.w	(a1,d0.w),d0
0000192E 43F1 0000                  		lea	(a1,d0.w),a1
00001932 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001934                            
00001934                            RunPLC_Loop:
00001934 2059                       		movea.l	(a1)+,a0	; get art pointer
00001936 7000                       		moveq	#0,d0
00001938 3019                       		move.w	(a1)+,d0	; get VRAM address
0000193A E588                       		lsl.l	#2,d0		; divide address by $20
0000193C E448                       		lsr.w	#2,d0
0000193E 0040 4000                  		ori.w	#$4000,d0
00001942 4840                       		swap	d0
00001944 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
0000194A 6100 FD2A                  		bsr.w	NemDec		; decompress
0000194E 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001952 4E75                       		rts	
00001954                            ; End of function RunPLC_ROM
00001954                            
00001954                            ; ---------------------------------------------------------------------------
00001954                            ; Enigma decompression algorithm
00001954                            ; ---------------------------------------------------------------------------
00001954                            
00001954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001954                            
00001954                            
00001954                            EniDec:
00001954 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001958 3640                       		movea.w	d0,a3
0000195A 1018                       		move.b	(a0)+,d0
0000195C 4880                       		ext.w	d0
0000195E 3A40                       		movea.w	d0,a5
00001960 1818                       		move.b	(a0)+,d4
00001962 E70C                       		lsl.b	#3,d4
00001964 3458                       		movea.w	(a0)+,a2
00001966 D4CB                       		adda.w	a3,a2
00001968 3858                       		movea.w	(a0)+,a4
0000196A D8CB                       		adda.w	a3,a4
0000196C 1A18                       		move.b	(a0)+,d5
0000196E E145                       		asl.w	#8,d5
00001970 1A18                       		move.b	(a0)+,d5
00001972 7C10                       		moveq	#$10,d6
00001974                            
00001974                            loc_173E:				; XREF: loc_1768
00001974 7007                       		moveq	#7,d0
00001976 3E06                       		move.w	d6,d7
00001978 9E40                       		sub.w	d0,d7
0000197A 3205                       		move.w	d5,d1
0000197C EE69                       		lsr.w	d7,d1
0000197E 0241 007F                  		andi.w	#$7F,d1
00001982 3401                       		move.w	d1,d2
00001984 0C41 0040                  		cmpi.w	#$40,d1
00001988 6400                       		bcc.s	loc_1758
0000198A 7006                       		moveq	#6,d0
0000198C E24A                       		lsr.w	#1,d2
0000198E                            
0000198E                            loc_1758:
0000198E 6100 0000                  		bsr.w	sub_188C
00001992 0242 000F                  		andi.w	#$F,d2
00001996 E849                       		lsr.w	#4,d1
00001998 D241                       		add.w	d1,d1
0000199A 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
0000199E                            ; End of function EniDec
0000199E                            
0000199E                            ; ===========================================================================
0000199E                            
0000199E                            loc_1768:				; XREF: loc_17B4
0000199E 32CA                       		move.w	a2,(a1)+
000019A0 524A                       		addq.w	#1,a2
000019A2 51CA FFFA                  		dbf	d2,loc_1768
000019A6 60CC                       		bra.s	loc_173E
000019A8                            ; ===========================================================================
000019A8                            
000019A8                            loc_1772:				; XREF: loc_17B4
000019A8 32CC                       		move.w	a4,(a1)+
000019AA 51CA FFFC                  		dbf	d2,loc_1772
000019AE 60C4                       		bra.s	loc_173E
000019B0                            ; ===========================================================================
000019B0                            
000019B0                            loc_177A:				; XREF: loc_17B4
000019B0 6100 0000                  		bsr.w	loc_17DC
000019B4                            
000019B4                            loc_177E:
000019B4 32C1                       		move.w	d1,(a1)+
000019B6 51CA FFFC                  		dbf	d2,loc_177E
000019BA 60B8                       		bra.s	loc_173E
000019BC                            ; ===========================================================================
000019BC                            
000019BC                            loc_1786:				; XREF: loc_17B4
000019BC 6100 0000                  		bsr.w	loc_17DC
000019C0                            
000019C0                            loc_178A:
000019C0 32C1                       		move.w	d1,(a1)+
000019C2 5241                       		addq.w	#1,d1
000019C4 51CA FFFA                  		dbf	d2,loc_178A
000019C8 60AA                       		bra.s	loc_173E
000019CA                            ; ===========================================================================
000019CA                            
000019CA                            loc_1794:				; XREF: loc_17B4
000019CA 6100 0000                  		bsr.w	loc_17DC
000019CE                            
000019CE                            loc_1798:
000019CE 32C1                       		move.w	d1,(a1)+
000019D0 5341                       		subq.w	#1,d1
000019D2 51CA FFFA                  		dbf	d2,loc_1798
000019D6 609C                       		bra.s	loc_173E
000019D8                            ; ===========================================================================
000019D8                            
000019D8                            loc_17A2:				; XREF: loc_17B4
000019D8 0C42 000F                  		cmpi.w	#$F,d2
000019DC 6700                       		beq.s	loc_17C4
000019DE                            
000019DE                            loc_17A8:
000019DE 6100 0000                  		bsr.w	loc_17DC
000019E2 32C1                       		move.w	d1,(a1)+
000019E4 51CA FFF8                  		dbf	d2,loc_17A8
000019E8 608A                       		bra.s	loc_173E
000019EA                            ; ===========================================================================
000019EA                            
000019EA                            loc_17B4:				; XREF: EniDec
000019EA 60B2                       		bra.s	loc_1768
000019EC                            ; ===========================================================================
000019EC 60B0                       		bra.s	loc_1768
000019EE                            ; ===========================================================================
000019EE 60B8                       		bra.s	loc_1772
000019F0                            ; ===========================================================================
000019F0 60B6                       		bra.s	loc_1772
000019F2                            ; ===========================================================================
000019F2 60BC                       		bra.s	loc_177A
000019F4                            ; ===========================================================================
000019F4 60C6                       		bra.s	loc_1786
000019F6                            ; ===========================================================================
000019F6 60D2                       		bra.s	loc_1794
000019F8                            ; ===========================================================================
000019F8 60DE                       		bra.s	loc_17A2
000019FA                            ; ===========================================================================
000019FA                            
000019FA                            loc_17C4:				; XREF: loc_17A2
000019FA 5348                       		subq.w	#1,a0
000019FC 0C46 0010                  		cmpi.w	#$10,d6
00001A00 6600                       		bne.s	loc_17CE
00001A02 5348                       		subq.w	#1,a0
00001A04                            
00001A04                            loc_17CE:
00001A04 3008                       		move.w	a0,d0
00001A06 E248                       		lsr.w	#1,d0
00001A08 6400                       		bcc.s	loc_17D6
00001A0A 5248                       		addq.w	#1,a0
00001A0C                            
00001A0C                            loc_17D6:
00001A0C 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
00001A10 4E75                       		rts	
00001A12                            ; ===========================================================================
00001A12                            
00001A12                            loc_17DC:				; XREF: loc_17A2
00001A12 360B                       		move.w	a3,d3
00001A14 1204                       		move.b	d4,d1
00001A16 D201                       		add.b	d1,d1
00001A18 6400                       		bcc.s	loc_17EE
00001A1A 5346                       		subq.w	#1,d6
00001A1C 0D05                       		btst	d6,d5
00001A1E 6700                       		beq.s	loc_17EE
00001A20 0043 8000                  		ori.w	#-$8000,d3
00001A24                            
00001A24                            loc_17EE:
00001A24 D201                       		add.b	d1,d1
00001A26 6400                       		bcc.s	loc_17FC
00001A28 5346                       		subq.w	#1,d6
00001A2A 0D05                       		btst	d6,d5
00001A2C 6700                       		beq.s	loc_17FC
00001A2E 0643 4000                  		addi.w	#$4000,d3
00001A32                            
00001A32                            loc_17FC:
00001A32 D201                       		add.b	d1,d1
00001A34 6400                       		bcc.s	loc_180A
00001A36 5346                       		subq.w	#1,d6
00001A38 0D05                       		btst	d6,d5
00001A3A 6700                       		beq.s	loc_180A
00001A3C 0643 2000                  		addi.w	#$2000,d3
00001A40                            
00001A40                            loc_180A:
00001A40 D201                       		add.b	d1,d1
00001A42 6400                       		bcc.s	loc_1818
00001A44 5346                       		subq.w	#1,d6
00001A46 0D05                       		btst	d6,d5
00001A48 6700                       		beq.s	loc_1818
00001A4A 0043 1000                  		ori.w	#$1000,d3
00001A4E                            
00001A4E                            loc_1818:
00001A4E D201                       		add.b	d1,d1
00001A50 6400                       		bcc.s	loc_1826
00001A52 5346                       		subq.w	#1,d6
00001A54 0D05                       		btst	d6,d5
00001A56 6700                       		beq.s	loc_1826
00001A58 0043 0800                  		ori.w	#$800,d3
00001A5C                            
00001A5C                            loc_1826:
00001A5C 3205                       		move.w	d5,d1
00001A5E 3E06                       		move.w	d6,d7
00001A60 9E4D                       		sub.w	a5,d7
00001A62 6400                       		bcc.s	loc_1856
00001A64 3C07                       		move.w	d7,d6
00001A66 0646 0010                  		addi.w	#$10,d6
00001A6A 4447                       		neg.w	d7
00001A6C EF69                       		lsl.w	d7,d1
00001A6E 1A10                       		move.b	(a0),d5
00001A70 EF3D                       		rol.b	d7,d5
00001A72 DE47                       		add.w	d7,d7
00001A74 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001A78 D245                       		add.w	d5,d1
00001A7A                            
00001A7A                            loc_1844:				; XREF: loc_1868
00001A7A 300D                       		move.w	a5,d0
00001A7C D040                       		add.w	d0,d0
00001A7E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A82 D243                       		add.w	d3,d1
00001A84 1A18                       		move.b	(a0)+,d5
00001A86 E14D                       		lsl.w	#8,d5
00001A88 1A18                       		move.b	(a0)+,d5
00001A8A 4E75                       		rts	
00001A8C                            ; ===========================================================================
00001A8C                            
00001A8C                            loc_1856:				; XREF: loc_1826
00001A8C 6700                       		beq.s	loc_1868
00001A8E EE69                       		lsr.w	d7,d1
00001A90 300D                       		move.w	a5,d0
00001A92 D040                       		add.w	d0,d0
00001A94 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001A98 D243                       		add.w	d3,d1
00001A9A 300D                       		move.w	a5,d0
00001A9C 6000                       		bra.s	sub_188C
00001A9E                            ; ===========================================================================
00001A9E                            
00001A9E                            loc_1868:				; XREF: loc_1856
00001A9E 7C10                       		moveq	#$10,d6
00001AA0                            
00001AA0                            loc_186A:
00001AA0 60D8                       		bra.s	loc_1844
00001AA2                            ; ===========================================================================
00001AA2 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001AB8 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00001AC2                            
00001AC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC2                            
00001AC2                            
00001AC2                            sub_188C:				; XREF: EniDec
00001AC2 9C40                       		sub.w	d0,d6
00001AC4 0C46 0009                  		cmpi.w	#9,d6
00001AC8 6400                       		bcc.s	locret_189A
00001ACA 5046                       		addq.w	#8,d6
00001ACC E145                       		asl.w	#8,d5
00001ACE 1A18                       		move.b	(a0)+,d5
00001AD0                            
00001AD0                            locret_189A:
00001AD0 4E75                       		rts	
00001AD2                            ; End of function sub_188C
00001AD2                            
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            ; Kosinski decompression algorithm
00001AD2                            ; ---------------------------------------------------------------------------
00001AD2                            
00001AD2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AD2                            
00001AD2                            
00001AD2                            KosDec:
00001AD2                            
00001AD2 =FFFFFFFE                  var_2		= -2
00001AD2 =FFFFFFFF                  var_1		= -1
00001AD2                            
00001AD2 558F                       		subq.l	#2,sp
00001AD4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AD8 1E98                       		move.b	(a0)+,(sp)
00001ADA 3A17                       		move.w	(sp),d5
00001ADC 780F                       		moveq	#$F,d4
00001ADE                            
00001ADE                            loc_18A8:
00001ADE E24D                       		lsr.w	#1,d5
00001AE0 40C6                       		move	sr,d6
00001AE2 51CC 0000                  		dbf	d4,loc_18BA
00001AE6 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001AEA 1E98                       		move.b	(a0)+,(sp)
00001AEC 3A17                       		move.w	(sp),d5
00001AEE 780F                       		moveq	#$F,d4
00001AF0                            
00001AF0                            loc_18BA:
00001AF0 44C6                       		move	d6,ccr
00001AF2 6400                       		bcc.s	loc_18C2
00001AF4 12D8                       		move.b	(a0)+,(a1)+
00001AF6 60E6                       		bra.s	loc_18A8
00001AF8                            ; ===========================================================================
00001AF8                            
00001AF8                            loc_18C2:				; XREF: KosDec
00001AF8 7600                       		moveq	#0,d3
00001AFA E24D                       		lsr.w	#1,d5
00001AFC 40C6                       		move	sr,d6
00001AFE 51CC 0000                  		dbf	d4,loc_18D6
00001B02 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B06 1E98                       		move.b	(a0)+,(sp)
00001B08 3A17                       		move.w	(sp),d5
00001B0A 780F                       		moveq	#$F,d4
00001B0C                            
00001B0C                            loc_18D6:
00001B0C 44C6                       		move	d6,ccr
00001B0E 6500                       		bcs.s	loc_1906
00001B10 E24D                       		lsr.w	#1,d5
00001B12 51CC 0000                  		dbf	d4,loc_18EA
00001B16 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B1A 1E98                       		move.b	(a0)+,(sp)
00001B1C 3A17                       		move.w	(sp),d5
00001B1E 780F                       		moveq	#$F,d4
00001B20                            
00001B20                            loc_18EA:
00001B20 E353                       		roxl.w	#1,d3
00001B22 E24D                       		lsr.w	#1,d5
00001B24 51CC 0000                  		dbf	d4,loc_18FC
00001B28 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
00001B2C 1E98                       		move.b	(a0)+,(sp)
00001B2E 3A17                       		move.w	(sp),d5
00001B30 780F                       		moveq	#$F,d4
00001B32                            
00001B32                            loc_18FC:
00001B32 E353                       		roxl.w	#1,d3
00001B34 5243                       		addq.w	#1,d3
00001B36 74FF                       		moveq	#-1,d2
00001B38 1418                       		move.b	(a0)+,d2
00001B3A 6000                       		bra.s	loc_191C
00001B3C                            ; ===========================================================================
00001B3C                            
00001B3C                            loc_1906:				; XREF: loc_18C2
00001B3C 1018                       		move.b	(a0)+,d0
00001B3E 1218                       		move.b	(a0)+,d1
00001B40 74FF                       		moveq	#-1,d2
00001B42 1401                       		move.b	d1,d2
00001B44 EB4A                       		lsl.w	#5,d2
00001B46 1400                       		move.b	d0,d2
00001B48 0241 0007                  		andi.w	#7,d1
00001B4C 6700                       		beq.s	loc_1928
00001B4E 1601                       		move.b	d1,d3
00001B50 5243                       		addq.w	#1,d3
00001B52                            
00001B52                            loc_191C:
00001B52 1031 2000                  		move.b	(a1,d2.w),d0
00001B56 12C0                       		move.b	d0,(a1)+
00001B58 51CB FFF8                  		dbf	d3,loc_191C
00001B5C 6080                       		bra.s	loc_18A8
00001B5E                            ; ===========================================================================
00001B5E                            
00001B5E                            loc_1928:				; XREF: loc_1906
00001B5E 1218                       		move.b	(a0)+,d1
00001B60 6700                       		beq.s	loc_1938
00001B62 0C01 0001                  		cmpi.b	#1,d1
00001B66 6700 FF76                  		beq.w	loc_18A8
00001B6A 1601                       		move.b	d1,d3
00001B6C 60E4                       		bra.s	loc_191C
00001B6E                            ; ===========================================================================
00001B6E                            
00001B6E                            loc_1938:				; XREF: loc_1928
00001B6E 548F                       		addq.l	#2,sp
00001B70 4E75                       		rts	
00001B72                            ; End of function KosDec
00001B72                            
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            ; Pallet cycling routine loading subroutine
00001B72                            ; ---------------------------------------------------------------------------
00001B72                            
00001B72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B72                            
00001B72                            
00001B72                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00001B72 7400                       		moveq	#0,d2
00001B74 7000                       		moveq	#0,d0
00001B76 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001B7A D040                       		add.w	d0,d0		; multiply by 2
00001B7C 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00001B80 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
00001B84                            ; End of function PalCycle_Load
00001B84                            
00001B84                            ; ===========================================================================
00001B84                            ; ---------------------------------------------------------------------------
00001B84                            ; Pallet cycling routines
00001B84                            ; ---------------------------------------------------------------------------
00001B84 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001B86 0000                       		dc.w PalCycle_LZ-PalCycle
00001B88 0000                       		dc.w PalCycle_MZ-PalCycle
00001B8A 0000                       		dc.w PalCycle_SLZ-PalCycle
00001B8C 0000                       		dc.w PalCycle_SYZ-PalCycle
00001B8E 0000                       		dc.w PalCycle_SBZ-PalCycle
00001B90 0000                       		dc.w PalCycle_GHZ-PalCycle
00001B92                            
00001B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B92                            
00001B92                            
00001B92                            PalCycle_Title:				; XREF: TitleScreen
00001B92 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001B98 6000                       		bra.s	loc_196A
00001B9A                            ; ===========================================================================
00001B9A                            
00001B9A                            PalCycle_GHZ:				; XREF: PalCycle
00001B9A 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
00001BA0                            
00001BA0                            loc_196A:				; XREF: PalCycle_Title
00001BA0 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BA4 6A00                       		bpl.s	locret_1990
00001BA6 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001BAC 3038 F632                  		move.w	($FFFFF632).w,d0
00001BB0 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BB4 0240 0003                  		andi.w	#3,d0
00001BB8 E748                       		lsl.w	#3,d0
00001BBA 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001BBE 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BC2 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001BC6                            
00001BC6                            locret_1990:
00001BC6 4E75                       		rts	
00001BC8                            ; End of function PalCycle_Title
00001BC8                            
00001BC8                            
00001BC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001BC8                            
00001BC8                            
00001BC8                            PalCycle_LZ:				; XREF: PalCycle
00001BC8 5378 F634                  		subq.w	#1,($FFFFF634).w
00001BCC 6A00                       		bpl.s	loc_19D8
00001BCE 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00001BD4 3038 F632                  		move.w	($FFFFF632).w,d0
00001BD8 5278 F632                  		addq.w	#1,($FFFFF632).w
00001BDC 0240 0003                  		andi.w	#3,d0
00001BE0 E748                       		lsl.w	#3,d0
00001BE2 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00001BE8 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
00001BEE 6600                       		bne.s	loc_19C0
00001BF0 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
00001BF6                            
00001BF6                            loc_19C0:
00001BF6 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001BFA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001BFE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C02 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
00001C06 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C0A 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001C0E                            
00001C0E                            loc_19D8:
00001C0E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00001C12 0240 0007                  		andi.w	#7,d0
00001C16 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
00001C1A 6700                       		beq.s	locret_1A3A
00001C1C 7201                       		moveq	#1,d1
00001C1E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001C22 6700                       		beq.s	loc_19F0
00001C24 4441                       		neg.w	d1
00001C26                            
00001C26                            loc_19F0:
00001C26 3038 F650                  		move.w	($FFFFF650).w,d0
00001C2A 0240 0003                  		andi.w	#3,d0
00001C2E D041                       		add.w	d1,d0
00001C30 0C40 0003                  		cmpi.w	#3,d0
00001C34 6500                       		bcs.s	loc_1A0A
00001C36 3200                       		move.w	d0,d1
00001C38 7000                       		moveq	#0,d0
00001C3A 4A41                       		tst.w	d1
00001C3C 6A00                       		bpl.s	loc_1A0A
00001C3E 7002                       		moveq	#2,d0
00001C40                            
00001C40                            loc_1A0A:
00001C40 31C0 F650                  		move.w	d0,($FFFFF650).w
00001C44 D040                       		add.w	d0,d0
00001C46 3200                       		move.w	d0,d1
00001C48 D040                       		add.w	d0,d0
00001C4A D041                       		add.w	d1,d0
00001C4C 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001C52 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001C56 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C5A 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C5E 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001C64 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001C68 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001C6C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001C70                            
00001C70                            locret_1A3A:
00001C70 4E75                       		rts	
00001C72                            ; End of function PalCycle_LZ
00001C72                            
00001C72                            ; ===========================================================================
00001C72 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001C7A                            ; ===========================================================================
00001C7A                            
00001C7A                            PalCycle_MZ:				; XREF: PalCycle
00001C7A 4E75                       		rts	
00001C7C                            
00001C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C7C                            
00001C7C                            
00001C7C                            PalCycle_SLZ:				; XREF: PalCycle
00001C7C 4E75                       		rts	
00001C7E                            ; End of function PalCycle_SLZ
00001C7E                            
00001C7E                            
00001C7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C7E                            
00001C7E                            
00001C7E                            PalCycle_SYZ:				; XREF: PalCycle
00001C7E 5378 F634                  		subq.w	#1,($FFFFF634).w
00001C82 6A00                       		bpl.s	locret_1AC6
00001C84 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001C8A 3038 F632                  		move.w	($FFFFF632).w,d0
00001C8E 5278 F632                  		addq.w	#1,($FFFFF632).w
00001C92 0240 0003                  		andi.w	#3,d0
00001C96 E548                       		lsl.w	#2,d0
00001C98 3200                       		move.w	d0,d1
00001C9A D040                       		add.w	d0,d0
00001C9C 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001CA2 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001CA6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001CAA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001CAE 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001CB4 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001CB8 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001CBC 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001CC2                            
00001CC2                            locret_1AC6:
00001CC2 4E75                       		rts	
00001CC4                            ; End of function PalCycle_SYZ
00001CC4                            
00001CC4                            
00001CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CC4                            
00001CC4                            
00001CC4                            PalCycle_SBZ:				; XREF: PalCycle
00001CC4 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001CCA 4A38 FE11                  		tst.b	($FFFFFE11).w
00001CCE 6700                       		beq.s	loc_1ADA
00001CD0 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001CD6                            
00001CD6                            loc_1ADA:
00001CD6 43F8 F650                  		lea	($FFFFF650).w,a1
00001CDA 321A                       		move.w	(a2)+,d1
00001CDC                            
00001CDC                            loc_1AE0:
00001CDC 5311                       		subq.b	#1,(a1)
00001CDE 6B00                       		bmi.s	loc_1AEA
00001CE0 5489                       		addq.l	#2,a1
00001CE2 5C8A                       		addq.l	#6,a2
00001CE4 6000                       		bra.s	loc_1B06
00001CE6                            ; ===========================================================================
00001CE6                            
00001CE6                            loc_1AEA:				; XREF: PalCycle_SBZ
00001CE6 12DA                       		move.b	(a2)+,(a1)+
00001CE8 1011                       		move.b	(a1),d0
00001CEA 5200                       		addq.b	#1,d0
00001CEC B01A                       		cmp.b	(a2)+,d0
00001CEE 6500                       		bcs.s	loc_1AF6
00001CF0 7000                       		moveq	#0,d0
00001CF2                            
00001CF2                            loc_1AF6:
00001CF2 12C0                       		move.b	d0,(a1)+
00001CF4 0240 000F                  		andi.w	#$F,d0
00001CF8 D040                       		add.w	d0,d0
00001CFA 305A                       		movea.w	(a2)+,a0
00001CFC 365A                       		movea.w	(a2)+,a3
00001CFE 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001D02                            
00001D02                            loc_1B06:				; XREF: PalCycle_SBZ
00001D02 51C9 FFD8                  		dbf	d1,loc_1AE0
00001D06 5378 F634                  		subq.w	#1,($FFFFF634).w
00001D0A 6A00                       		bpl.s	locret_1B64
00001D0C 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001D12 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001D18 4A38 FE11                  		tst.b	($FFFFFE11).w
00001D1C 6700                       		beq.s	loc_1B2E
00001D1E 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001D24 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001D2A                            
00001D2A                            loc_1B2E:
00001D2A 72FF                       		moveq	#-1,d1
00001D2C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001D30 6700                       		beq.s	loc_1B38
00001D32 4441                       		neg.w	d1
00001D34                            
00001D34                            loc_1B38:
00001D34 3038 F632                  		move.w	($FFFFF632).w,d0
00001D38 0240 0003                  		andi.w	#3,d0
00001D3C D041                       		add.w	d1,d0
00001D3E 0C40 0003                  		cmpi.w	#3,d0
00001D42 6500                       		bcs.s	loc_1B52
00001D44 3200                       		move.w	d0,d1
00001D46 7000                       		moveq	#0,d0
00001D48 4A41                       		tst.w	d1
00001D4A 6A00                       		bpl.s	loc_1B52
00001D4C 7002                       		moveq	#2,d0
00001D4E                            
00001D4E                            loc_1B52:
00001D4E 31C0 F632                  		move.w	d0,($FFFFF632).w
00001D52 D040                       		add.w	d0,d0
00001D54 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001D58 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001D5C 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001D60                            
00001D60                            locret_1B64:
00001D60 4E75                       		rts	
00001D62                            ; End of function PalCycle_SBZ
00001D62                            
00001D62                            ; ===========================================================================
00001D62                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001D82                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001DA2                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001DC2                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001DD4                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001DE6                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001E4E                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001E72                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001E92                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001EA2                            
00001EA2                            Pal_SBZCycList:
00001EA2                            	include "_inc\SBZ pallet script 1.asm"
00001EA2                            ; ---------------------------------------------------------------------------
00001EA2                            ; Scrap Brain Zone 1 pallet cycling script
00001EA2                            ; ---------------------------------------------------------------------------
00001EA2 0008                       	dc.w 8			; number of entries - 1
00001EA4 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001EA6 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001EA8 FB50                       	dc.w $FB50		; RAM address
00001EAA 0D08                       	dc.b $D, 8
00001EAC 0000                       	dc.w Pal_SBZCyc2
00001EAE FB52                       	dc.w $FB52
00001EB0 0E08                       	dc.b $E, 8
00001EB2 0000                       	dc.w Pal_SBZCyc3
00001EB4 FB6E                       	dc.w $FB6E
00001EB6 0B08                       	dc.b $B, 8
00001EB8 0000                       	dc.w Pal_SBZCyc5
00001EBA FB70                       	dc.w $FB70
00001EBC 0708                       	dc.b 7,	8
00001EBE 0000                       	dc.w Pal_SBZCyc6
00001EC0 FB72                       	dc.w $FB72
00001EC2 1C10                       	dc.b $1C, $10
00001EC4 0000                       	dc.w Pal_SBZCyc7
00001EC6 FB7E                       	dc.w $FB7E
00001EC8 0303                       	dc.b 3,	3
00001ECA 0000                       	dc.w Pal_SBZCyc8
00001ECC FB78                       	dc.w $FB78
00001ECE 0303                       	dc.b 3,	3
00001ED0 0000                       	dc.w Pal_SBZCyc8+2
00001ED2 FB7A                       	dc.w $FB7A
00001ED4 0303                       	dc.b 3,	3
00001ED6 0000                       	dc.w Pal_SBZCyc8+4
00001ED8 FB7C                       	dc.w $FB7C
00001EDA                            	even
00001EDA                            	even
00001EDA                            
00001EDA                            Pal_SBZCycList2:
00001EDA                            	include "_inc\SBZ pallet script 2.asm"
00001EDA                            ; ---------------------------------------------------------------------------
00001EDA                            ; Scrap Brain Zone 2 pallet cycling script
00001EDA                            ; ---------------------------------------------------------------------------
00001EDA 0006                       	dc.w 6
00001EDC 0708                       	dc.b 7,	8
00001EDE 0000                       	dc.w Pal_SBZCyc1
00001EE0 FB50                       	dc.w $FB50
00001EE2 0D08                       	dc.b $D, 8
00001EE4 0000                       	dc.w Pal_SBZCyc2
00001EE6 FB52                       	dc.w $FB52
00001EE8 0908                       	dc.b 9,	8
00001EEA 0000                       	dc.w Pal_SBZCyc9
00001EEC FB70                       	dc.w $FB70
00001EEE 0708                       	dc.b 7,	8
00001EF0 0000                       	dc.w Pal_SBZCyc6
00001EF2 FB72                       	dc.w $FB72
00001EF4 0303                       	dc.b 3,	3
00001EF6 0000                       	dc.w Pal_SBZCyc8
00001EF8 FB78                       	dc.w $FB78
00001EFA 0303                       	dc.b 3,	3
00001EFC 0000                       	dc.w Pal_SBZCyc8+2
00001EFE FB7A                       	dc.w $FB7A
00001F00 0303                       	dc.b 3,	3
00001F02 0000                       	dc.w Pal_SBZCyc8+4
00001F04 FB7C                       	dc.w $FB7C
00001F06                            	even
00001F06                            	even
00001F06                            
00001F06                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001F16                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001F26                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001F36                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001F42                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001F52                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001F62                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001F82                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001F8C                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001F9C                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001FA8                            ; ---------------------------------------------------------------------------
00001FA8                            ; Subroutine to	fade out and fade in
00001FA8                            ; ---------------------------------------------------------------------------
00001FA8                            
00001FA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FA8                            
00001FA8                            
00001FA8                            Pal_FadeTo:
00001FA8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001FAE                            
00001FAE                            Pal_FadeTo2:
00001FAE 7000                       		moveq	#0,d0
00001FB0 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FB4 1038 F626                  		move.b	($FFFFF626).w,d0
00001FB8 D0C0                       		adda.w	d0,a0
00001FBA 7200                       		moveq	#0,d1
00001FBC 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC0                            
00001FC0                            Pal_ToBlack:
00001FC0 30C1                       		move.w	d1,(a0)+
00001FC2 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001FC6                            
00001FC6 383C 0015                  		move.w	#$15,d4
00001FCA                            
00001FCA                            loc_1DCE:
00001FCA 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001FD0 6100 0000                  		bsr.w	DelayProgram
00001FD4 6100                       		bsr.s	Pal_FadeIn
00001FD6 6100 F84A                  		bsr.w	RunPLC_RAM
00001FDA 51CC FFEE                  		dbf	d4,loc_1DCE
00001FDE 4E75                       		rts	
00001FE0                            ; End of function Pal_FadeTo
00001FE0                            
00001FE0                            ; ---------------------------------------------------------------------------
00001FE0                            ; Pallet fade-in subroutine
00001FE0                            ; ---------------------------------------------------------------------------
00001FE0                            
00001FE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FE0                            
00001FE0                            
00001FE0                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001FE0 7000                       		moveq	#0,d0
00001FE2 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FE6 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001FEA 1038 F626                  		move.b	($FFFFF626).w,d0
00001FEE D0C0                       		adda.w	d0,a0
00001FF0 D2C0                       		adda.w	d0,a1
00001FF2 1038 F627                  		move.b	($FFFFF627).w,d0
00001FF6                            
00001FF6                            loc_1DFA:
00001FF6 6100                       		bsr.s	Pal_AddColor
00001FF8 51C8 FFFC                  		dbf	d0,loc_1DFA
00001FFC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002002 6600                       		bne.s	locret_1E24
00002004 7000                       		moveq	#0,d0
00002006 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000200A 43F8 FA00                  		lea	($FFFFFA00).w,a1
0000200E 1038 F626                  		move.b	($FFFFF626).w,d0
00002012 D0C0                       		adda.w	d0,a0
00002014 D2C0                       		adda.w	d0,a1
00002016 1038 F627                  		move.b	($FFFFF627).w,d0
0000201A                            
0000201A                            loc_1E1E:
0000201A 6100                       		bsr.s	Pal_AddColor
0000201C 51C8 FFFC                  		dbf	d0,loc_1E1E
00002020                            
00002020                            locret_1E24:
00002020 4E75                       		rts	
00002022                            ; End of function Pal_FadeIn
00002022                            
00002022                            
00002022                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002022                            
00002022                            
00002022                            Pal_AddColor:				; XREF: Pal_FadeIn
00002022 3419                       		move.w	(a1)+,d2
00002024 3610                       		move.w	(a0),d3
00002026 B642                       		cmp.w	d2,d3
00002028 6700                       		beq.s	loc_1E4E
0000202A 3203                       		move.w	d3,d1
0000202C 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00002030 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00002032 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00002034 30C1                       		move.w	d1,(a0)+	; update pallet
00002036 4E75                       		rts	
00002038                            ; ===========================================================================
00002038                            
00002038                            Pal_AddGreen:				; XREF: Pal_AddColor
00002038 3203                       		move.w	d3,d1
0000203A 0641 0020                  		addi.w	#$20,d1		; increase green value
0000203E B242                       		cmp.w	d2,d1
00002040 6200                       		bhi.s	Pal_AddRed
00002042 30C1                       		move.w	d1,(a0)+	; update pallet
00002044 4E75                       		rts	
00002046                            ; ===========================================================================
00002046                            
00002046                            Pal_AddRed:				; XREF: Pal_AddGreen
00002046 5458                       		addq.w	#2,(a0)+	; increase red value
00002048 4E75                       		rts	
0000204A                            ; ===========================================================================
0000204A                            
0000204A                            loc_1E4E:				; XREF: Pal_AddColor
0000204A 5448                       		addq.w	#2,a0
0000204C 4E75                       		rts	
0000204E                            ; End of function Pal_AddColor
0000204E                            
0000204E                            
0000204E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000204E                            
0000204E                            
0000204E                            Pal_FadeFrom:
0000204E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002054 383C 0015                  		move.w	#$15,d4
00002058                            
00002058                            loc_1E5C:
00002058 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000205E 6100 0000                  		bsr.w	DelayProgram
00002062 6100                       		bsr.s	Pal_FadeOut
00002064 6100 F7BC                  		bsr.w	RunPLC_RAM
00002068 51CC FFEE                  		dbf	d4,loc_1E5C
0000206C 4E75                       		rts	
0000206E                            ; End of function Pal_FadeFrom
0000206E                            
0000206E                            ; ---------------------------------------------------------------------------
0000206E                            ; Pallet fade-out subroutine
0000206E                            ; ---------------------------------------------------------------------------
0000206E                            
0000206E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000206E                            
0000206E                            
0000206E                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000206E 7000                       		moveq	#0,d0
00002070 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002074 1038 F626                  		move.b	($FFFFF626).w,d0
00002078 D0C0                       		adda.w	d0,a0
0000207A 1038 F627                  		move.b	($FFFFF627).w,d0
0000207E                            
0000207E                            loc_1E82:
0000207E 6100                       		bsr.s	Pal_DecColor
00002080 51C8 FFFC                  		dbf	d0,loc_1E82
00002084                            
00002084 7000                       		moveq	#0,d0
00002086 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000208A 1038 F626                  		move.b	($FFFFF626).w,d0
0000208E D0C0                       		adda.w	d0,a0
00002090 1038 F627                  		move.b	($FFFFF627).w,d0
00002094                            
00002094                            loc_1E98:
00002094 6100                       		bsr.s	Pal_DecColor
00002096 51C8 FFFC                  		dbf	d0,loc_1E98
0000209A 4E75                       		rts	
0000209C                            ; End of function Pal_FadeOut
0000209C                            
0000209C                            
0000209C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000209C                            
0000209C                            
0000209C                            Pal_DecColor:				; XREF: Pal_FadeOut
0000209C 3410                       		move.w	(a0),d2
0000209E 6700                       		beq.s	loc_1ECC
000020A0 3202                       		move.w	d2,d1
000020A2 0241 000E                  		andi.w	#$E,d1
000020A6 6700                       		beq.s	Pal_DecGreen
000020A8 5558                       		subq.w	#2,(a0)+	; decrease red value
000020AA 4E75                       		rts	
000020AC                            ; ===========================================================================
000020AC                            
000020AC                            Pal_DecGreen:				; XREF: Pal_DecColor
000020AC 3202                       		move.w	d2,d1
000020AE 0241 00E0                  		andi.w	#$E0,d1
000020B2 6700                       		beq.s	Pal_DecBlue
000020B4 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
000020B8 4E75                       		rts	
000020BA                            ; ===========================================================================
000020BA                            
000020BA                            Pal_DecBlue:				; XREF: Pal_DecGreen
000020BA 3202                       		move.w	d2,d1
000020BC 0241 0E00                  		andi.w	#$E00,d1
000020C0 6700                       		beq.s	loc_1ECC
000020C2 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
000020C6 4E75                       		rts	
000020C8                            ; ===========================================================================
000020C8                            
000020C8                            loc_1ECC:				; XREF: Pal_DecColor
000020C8 5448                       		addq.w	#2,a0
000020CA 4E75                       		rts	
000020CC                            ; End of function Pal_DecColor
000020CC                            
000020CC                            ; ---------------------------------------------------------------------------
000020CC                            ; Subroutine to	fill the pallet	with white (special stage)
000020CC                            ; ---------------------------------------------------------------------------
000020CC                            
000020CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020CC                            
000020CC                            
000020CC                            Pal_MakeWhite:				; XREF: SpecialStage
000020CC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000020D2 7000                       		moveq	#0,d0
000020D4 41F8 FB00                  		lea	($FFFFFB00).w,a0
000020D8 1038 F626                  		move.b	($FFFFF626).w,d0
000020DC D0C0                       		adda.w	d0,a0
000020DE 323C 0EEE                  		move.w	#$EEE,d1
000020E2 1038 F627                  		move.b	($FFFFF627).w,d0
000020E6                            
000020E6                            PalWhite_Loop:
000020E6 30C1                       		move.w	d1,(a0)+
000020E8 51C8 FFFC                  		dbf	d0,PalWhite_Loop
000020EC 383C 0015                  		move.w	#$15,d4
000020F0                            
000020F0                            loc_1EF4:
000020F0 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000020F6 6100 0000                  		bsr.w	DelayProgram
000020FA 6100                       		bsr.s	Pal_WhiteToBlack
000020FC 6100 F724                  		bsr.w	RunPLC_RAM
00002100 51CC FFEE                  		dbf	d4,loc_1EF4
00002104 4E75                       		rts	
00002106                            ; End of function Pal_MakeWhite
00002106                            
00002106                            
00002106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002106                            
00002106                            
00002106                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00002106 7000                       		moveq	#0,d0
00002108 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000210C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002110 1038 F626                  		move.b	($FFFFF626).w,d0
00002114 D0C0                       		adda.w	d0,a0
00002116 D2C0                       		adda.w	d0,a1
00002118 1038 F627                  		move.b	($FFFFF627).w,d0
0000211C                            
0000211C                            loc_1F20:
0000211C 6100                       		bsr.s	Pal_DecColor2
0000211E 51C8 FFFC                  		dbf	d0,loc_1F20
00002122                            
00002122 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00002128 6600                       		bne.s	locret_1F4A
0000212A 7000                       		moveq	#0,d0
0000212C 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002130 43F8 FA00                  		lea	($FFFFFA00).w,a1
00002134 1038 F626                  		move.b	($FFFFF626).w,d0
00002138 D0C0                       		adda.w	d0,a0
0000213A D2C0                       		adda.w	d0,a1
0000213C 1038 F627                  		move.b	($FFFFF627).w,d0
00002140                            
00002140                            loc_1F44:
00002140 6100                       		bsr.s	Pal_DecColor2
00002142 51C8 FFFC                  		dbf	d0,loc_1F44
00002146                            
00002146                            locret_1F4A:
00002146 4E75                       		rts	
00002148                            ; End of function Pal_WhiteToBlack
00002148                            
00002148                            
00002148                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002148                            
00002148                            
00002148                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00002148 3419                       		move.w	(a1)+,d2
0000214A 3610                       		move.w	(a0),d3
0000214C B642                       		cmp.w	d2,d3
0000214E 6700                       		beq.s	loc_1F78
00002150 3203                       		move.w	d3,d1
00002152 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002156 6500                       		bcs.s	loc_1F64
00002158 B242                       		cmp.w	d2,d1
0000215A 6500                       		bcs.s	loc_1F64
0000215C 30C1                       		move.w	d1,(a0)+
0000215E 4E75                       		rts	
00002160                            ; ===========================================================================
00002160                            
00002160                            loc_1F64:				; XREF: Pal_DecColor2
00002160 3203                       		move.w	d3,d1
00002162 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002166 6500                       		bcs.s	loc_1F74
00002168 B242                       		cmp.w	d2,d1
0000216A 6500                       		bcs.s	loc_1F74
0000216C 30C1                       		move.w	d1,(a0)+
0000216E 4E75                       		rts	
00002170                            ; ===========================================================================
00002170                            
00002170                            loc_1F74:				; XREF: loc_1F64
00002170 5558                       		subq.w	#2,(a0)+	; decrease red value
00002172 4E75                       		rts	
00002174                            ; ===========================================================================
00002174                            
00002174                            loc_1F78:				; XREF: Pal_DecColor2
00002174 5448                       		addq.w	#2,a0
00002176 4E75                       		rts	
00002178                            ; End of function Pal_DecColor2
00002178                            
00002178                            ; ---------------------------------------------------------------------------
00002178                            ; Subroutine to	make a white flash when	you enter a special stage
00002178                            ; ---------------------------------------------------------------------------
00002178                            
00002178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002178                            
00002178                            
00002178                            Pal_MakeFlash:				; XREF: SpecialStage
00002178 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000217E 383C 0015                  		move.w	#$15,d4
00002182                            
00002182                            loc_1F86:
00002182 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002188 6100 0000                  		bsr.w	DelayProgram
0000218C 6100                       		bsr.s	Pal_ToWhite
0000218E 6100 F692                  		bsr.w	RunPLC_RAM
00002192 51CC FFEE                  		dbf	d4,loc_1F86
00002196 4E75                       		rts	
00002198                            ; End of function Pal_MakeFlash
00002198                            
00002198                            
00002198                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002198                            
00002198                            
00002198                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002198 7000                       		moveq	#0,d0
0000219A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000219E 1038 F626                  		move.b	($FFFFF626).w,d0
000021A2 D0C0                       		adda.w	d0,a0
000021A4 1038 F627                  		move.b	($FFFFF627).w,d0
000021A8                            
000021A8                            loc_1FAC:
000021A8 6100                       		bsr.s	Pal_AddColor2
000021AA 51C8 FFFC                  		dbf	d0,loc_1FAC
000021AE 7000                       		moveq	#0,d0
000021B0 41F8 FA80                  		lea	($FFFFFA80).w,a0
000021B4 1038 F626                  		move.b	($FFFFF626).w,d0
000021B8 D0C0                       		adda.w	d0,a0
000021BA 1038 F627                  		move.b	($FFFFF627).w,d0
000021BE                            
000021BE                            loc_1FC2:
000021BE 6100                       		bsr.s	Pal_AddColor2
000021C0 51C8 FFFC                  		dbf	d0,loc_1FC2
000021C4 4E75                       		rts	
000021C6                            ; End of function Pal_ToWhite
000021C6                            
000021C6                            
000021C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000021C6                            
000021C6                            
000021C6                            Pal_AddColor2:				; XREF: Pal_ToWhite
000021C6 3410                       		move.w	(a0),d2
000021C8 0C42 0EEE                  		cmpi.w	#$EEE,d2
000021CC 6700                       		beq.s	loc_2006
000021CE 3202                       		move.w	d2,d1
000021D0 0241 000E                  		andi.w	#$E,d1
000021D4 0C41 000E                  		cmpi.w	#$E,d1
000021D8 6700                       		beq.s	loc_1FE2
000021DA 5458                       		addq.w	#2,(a0)+	; increase red value
000021DC 4E75                       		rts	
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1FE2:				; XREF: Pal_AddColor2
000021DE 3202                       		move.w	d2,d1
000021E0 0241 00E0                  		andi.w	#$E0,d1
000021E4 0C41 00E0                  		cmpi.w	#$E0,d1
000021E8 6700                       		beq.s	loc_1FF4
000021EA 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
000021EE 4E75                       		rts	
000021F0                            ; ===========================================================================
000021F0                            
000021F0                            loc_1FF4:				; XREF: loc_1FE2
000021F0 3202                       		move.w	d2,d1
000021F2 0241 0E00                  		andi.w	#$E00,d1
000021F6 0C41 0E00                  		cmpi.w	#$E00,d1
000021FA 6700                       		beq.s	loc_2006
000021FC 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002200 4E75                       		rts	
00002202                            ; ===========================================================================
00002202                            
00002202                            loc_2006:				; XREF: Pal_AddColor2
00002202 5448                       		addq.w	#2,a0
00002204 4E75                       		rts	
00002206                            ; End of function Pal_AddColor2
00002206                            
00002206                            ; ---------------------------------------------------------------------------
00002206                            ; Pallet cycling routine - Sega	logo
00002206                            ; ---------------------------------------------------------------------------
00002206                            
00002206                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002206                            
00002206                            
00002206                            PalCycle_Sega:				; XREF: SegaScreen
00002206 4A38 F635                  		tst.b	($FFFFF635).w
0000220A 6600                       		bne.s	loc_206A
0000220C 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002210 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
00002216 7205                       		moveq	#5,d1
00002218 3038 F632                  		move.w	($FFFFF632).w,d0
0000221C                            
0000221C                            loc_2020:
0000221C 6A00                       		bpl.s	loc_202A
0000221E 5448                       		addq.w	#2,a0
00002220 5341                       		subq.w	#1,d1
00002222 5440                       		addq.w	#2,d0
00002224 60F6                       		bra.s	loc_2020
00002226                            ; ===========================================================================
00002226                            
00002226                            loc_202A:				; XREF: PalCycle_Sega
00002226 3400                       		move.w	d0,d2
00002228 0242 001E                  		andi.w	#$1E,d2
0000222C 6600                       		bne.s	loc_2034
0000222E 5440                       		addq.w	#2,d0
00002230                            
00002230                            loc_2034:
00002230 0C40 0060                  		cmpi.w	#$60,d0
00002234 6400                       		bcc.s	loc_203E
00002236 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000223A                            
0000223A                            loc_203E:
0000223A 5440                       		addq.w	#2,d0
0000223C 51C9 FFE8                  		dbf	d1,loc_202A
00002240 3038 F632                  		move.w	($FFFFF632).w,d0
00002244 5440                       		addq.w	#2,d0
00002246 3400                       		move.w	d0,d2
00002248 0242 001E                  		andi.w	#$1E,d2
0000224C 6600                       		bne.s	loc_2054
0000224E 5440                       		addq.w	#2,d0
00002250                            
00002250                            loc_2054:
00002250 0C40 0064                  		cmpi.w	#$64,d0
00002254 6D00                       		blt.s	loc_2062
00002256 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000225C 70F4                       		moveq	#-$C,d0
0000225E                            
0000225E                            loc_2062:
0000225E 31C0 F632                  		move.w	d0,($FFFFF632).w
00002262 7001                       		moveq	#1,d0
00002264 4E75                       		rts	
00002266                            ; ===========================================================================
00002266                            
00002266                            loc_206A:				; XREF: loc_202A
00002266 5338 F634                  		subq.b	#1,($FFFFF634).w
0000226A 6A00                       		bpl.s	loc_20BC
0000226C 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002272 3038 F632                  		move.w	($FFFFF632).w,d0
00002276 0640 000C                  		addi.w	#$C,d0
0000227A 0C40 0030                  		cmpi.w	#$30,d0
0000227E 6500                       		bcs.s	loc_2088
00002280 7000                       		moveq	#0,d0
00002282 4E75                       		rts	
00002284                            ; ===========================================================================
00002284                            
00002284                            loc_2088:				; XREF: loc_206A
00002284 31C0 F632                  		move.w	d0,($FFFFF632).w
00002288 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000228E 41F0 0000                  		lea	(a0,d0.w),a0
00002292 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002296 22D8                       		move.l	(a0)+,(a1)+
00002298 22D8                       		move.l	(a0)+,(a1)+
0000229A 3298                       		move.w	(a0)+,(a1)
0000229C 43F8 FB20                  		lea	($FFFFFB20).w,a1
000022A0 7000                       		moveq	#0,d0
000022A2 722C                       		moveq	#$2C,d1
000022A4                            
000022A4                            loc_20A8:
000022A4 3400                       		move.w	d0,d2
000022A6 0242 001E                  		andi.w	#$1E,d2
000022AA 6600                       		bne.s	loc_20B2
000022AC 5440                       		addq.w	#2,d0
000022AE                            
000022AE                            loc_20B2:
000022AE 3390 0000                  		move.w	(a0),(a1,d0.w)
000022B2 5440                       		addq.w	#2,d0
000022B4 51C9 FFEE                  		dbf	d1,loc_20A8
000022B8                            
000022B8                            loc_20BC:
000022B8 7001                       		moveq	#1,d0
000022BA 4E75                       		rts	
000022BC                            ; End of function PalCycle_Sega
000022BC                            
000022BC                            ; ===========================================================================
000022BC                            
000022BC                            Pal_Sega1:	incbin	pallet\sega1.bin
000022C8                            Pal_Sega2:	incbin	pallet\sega2.bin
000022F8                            
000022F8                            ; ---------------------------------------------------------------------------
000022F8                            ; Subroutines to load pallets
000022F8                            ; ---------------------------------------------------------------------------
000022F8                            
000022F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000022F8                            
000022F8                            
000022F8                            PalLoad1:
000022F8 43F9 0000 0000             		lea	(PalPointers).l,a1
000022FE E748                       		lsl.w	#3,d0
00002300 D2C0                       		adda.w	d0,a1
00002302 2459                       		movea.l	(a1)+,a2
00002304 3659                       		movea.w	(a1)+,a3
00002306 D6FC 0080                  		adda.w	#$80,a3
0000230A 3E19                       		move.w	(a1)+,d7
0000230C                            
0000230C                            loc_2110:
0000230C 26DA                       		move.l	(a2)+,(a3)+
0000230E 51CF FFFC                  		dbf	d7,loc_2110
00002312 4E75                       		rts	
00002314                            ; End of function PalLoad1
00002314                            
00002314                            
00002314                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002314                            
00002314                            
00002314                            PalLoad2:
00002314 43F9 0000 0000             		lea	(PalPointers).l,a1
0000231A E748                       		lsl.w	#3,d0
0000231C D2C0                       		adda.w	d0,a1
0000231E 2459                       		movea.l	(a1)+,a2
00002320 3659                       		movea.w	(a1)+,a3
00002322 3E19                       		move.w	(a1)+,d7
00002324                            
00002324                            loc_2128:
00002324 26DA                       		move.l	(a2)+,(a3)+
00002326 51CF FFFC                  		dbf	d7,loc_2128
0000232A 4E75                       		rts	
0000232C                            ; End of function PalLoad2
0000232C                            
0000232C                            ; ---------------------------------------------------------------------------
0000232C                            ; Underwater pallet loading subroutine
0000232C                            ; ---------------------------------------------------------------------------
0000232C                            
0000232C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000232C                            
0000232C                            
0000232C                            PalLoad3_Water:
0000232C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002332 E748                       		lsl.w	#3,d0
00002334 D2C0                       		adda.w	d0,a1
00002336 2459                       		movea.l	(a1)+,a2
00002338 3659                       		movea.w	(a1)+,a3
0000233A 96FC 0080                  		suba.w	#$80,a3
0000233E 3E19                       		move.w	(a1)+,d7
00002340                            
00002340                            loc_2144:
00002340 26DA                       		move.l	(a2)+,(a3)+
00002342 51CF FFFC                  		dbf	d7,loc_2144
00002346 4E75                       		rts	
00002348                            ; End of function PalLoad3_Water
00002348                            
00002348                            
00002348                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002348                            
00002348                            
00002348                            PalLoad4_Water:
00002348 43F9 0000 0000             		lea	(PalPointers).l,a1
0000234E E748                       		lsl.w	#3,d0
00002350 D2C0                       		adda.w	d0,a1
00002352 2459                       		movea.l	(a1)+,a2
00002354 3659                       		movea.w	(a1)+,a3
00002356 96FC 0100                  		suba.w	#$100,a3
0000235A 3E19                       		move.w	(a1)+,d7
0000235C                            
0000235C                            loc_2160:
0000235C 26DA                       		move.l	(a2)+,(a3)+
0000235E 51CF FFFC                  		dbf	d7,loc_2160
00002362 4E75                       		rts	
00002364                            ; End of function PalLoad4_Water
00002364                            
00002364                            ; ===========================================================================
00002364                            ; ---------------------------------------------------------------------------
00002364                            ; Pallet pointers
00002364                            ; ---------------------------------------------------------------------------
00002364                            PalPointers:
00002364                            	include "_inc\Pallet pointers.asm"
00002364                            ; ---------------------------------------------------------------------------
00002364                            ; Pallet pointers
00002364                            ; ---------------------------------------------------------------------------
00002364 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002368 FB00                       	dc.w $FB00		; RAM address
0000236A 001F                       	dc.w $1F		; (pallet length / 2) - 1
0000236C 0000 0000                  	dc.l Pal_Title
00002370 FB00                       	dc.w $FB00
00002372 001F                       	dc.w $1F
00002374 0000 0000                  	dc.l Pal_LevelSel
00002378 FB00                       	dc.w $FB00
0000237A 001F                       	dc.w $1F
0000237C 0000 0000                  	dc.l Pal_Sonic
00002380 FB00                       	dc.w $FB00
00002382 0007                       	dc.w 7
00002384 0000 0000                  	dc.l Pal_GHZ
00002388 FB20                       	dc.w $FB20
0000238A 0017                       	dc.w $17
0000238C 0000 0000                  	dc.l Pal_LZ
00002390 FB20                       	dc.w $FB20
00002392 0017                       	dc.w $17
00002394 0000 0000                  	dc.l Pal_MZ
00002398 FB20                       	dc.w $FB20
0000239A 0017                       	dc.w $17
0000239C 0000 0000                  	dc.l Pal_SLZ
000023A0 FB20                       	dc.w $FB20
000023A2 0017                       	dc.w $17
000023A4 0000 0000                  	dc.l Pal_SYZ
000023A8 FB20                       	dc.w $FB20
000023AA 0017                       	dc.w $17
000023AC 0000 0000                  	dc.l Pal_SBZ1
000023B0 FB20                       	dc.w $FB20
000023B2 0017                       	dc.w $17
000023B4 0000 0000                  	dc.l Pal_Special
000023B8 FB00                       	dc.w $FB00
000023BA 001F                       	dc.w $1F
000023BC 0000 0000                  	dc.l Pal_LZWater
000023C0 FB00                       	dc.w $FB00
000023C2 001F                       	dc.w $1F
000023C4 0000 0000                  	dc.l Pal_SBZ3
000023C8 FB20                       	dc.w $FB20
000023CA 0017                       	dc.w $17
000023CC 0000 0000                  	dc.l Pal_SBZ3Water
000023D0 FB00                       	dc.w $FB00
000023D2 001F                       	dc.w $1F
000023D4 0000 0000                  	dc.l Pal_SBZ2
000023D8 FB20                       	dc.w $FB20
000023DA 0017                       	dc.w $17
000023DC 0000 0000                  	dc.l Pal_LZSonWater
000023E0 FB00                       	dc.w $FB00
000023E2 0007                       	dc.w 7
000023E4 0000 0000                  	dc.l Pal_SBZ3SonWat
000023E8 FB00                       	dc.w $FB00
000023EA 0007                       	dc.w 7
000023EC 0000 0000                  	dc.l Pal_SpeResult
000023F0 FB00                       	dc.w $FB00
000023F2 001F                       	dc.w $1F
000023F4 0000 0000                  	dc.l Pal_SpeContinue
000023F8 FB00                       	dc.w $FB00
000023FA 000F                       	dc.w $F
000023FC 0000 0000                  	dc.l Pal_Ending
00002400 FB00                       	dc.w $FB00
00002402 001F                       	dc.w $1F
00002404 0000 0000                  	dc.l Pal_Idiot
00002408 FB20                       	dc.w $FB20
0000240A 0007                       	dc.w 7
0000240C 0000 0000                  	dc.l Pal_Gronic
00002410 FB00                       	dc.w $FB00
00002412 0007                       	dc.w 7
00002414 0000 0000                  	dc.l Pal_LZGroWater
00002418 FB00                       	dc.w $FB00
0000241A 0007                       	dc.w 7
0000241C 0000 0000                  	dc.l Pal_SBZ3GroWat
00002420 FB00                       	dc.w $FB00
00002422 0007                       	dc.w 7
00002424 0000 0000                  	dc.l Pal_Anakama
00002428 FB00                       	dc.w $FB00
0000242A 0007                       	dc.w 7
0000242A 0007                       	dc.w 7
0000242C                            
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            ; Pallet data
0000242C                            ; ---------------------------------------------------------------------------
0000242C                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
000024AC                            Pal_Title:	incbin	pallet\title.bin
0000252C                            Pal_LevelSel:	incbin	pallet\levelsel.bin
000025AC                            Pal_Sonic:	incbin	pallet\sonic.bin
000025CC                            Pal_GHZ:	incbin	pallet\ghz.bin
0000262C                            Pal_LZ:		incbin	pallet\lz.bin
0000268C                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
0000270C                            Pal_MZ:		incbin	pallet\mz.bin
0000276C                            Pal_SLZ:	incbin	pallet\slz.bin
000027CC                            Pal_SYZ:	incbin	pallet\syz.bin
0000282C                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
0000288C                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000028EC                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
0000296C                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000029CC                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002A4C                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002A6C                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002A8C                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00002B0C                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002B4C                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
00002BCC                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00002BEC                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00002C0C                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C2C                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00002C4C                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
00002CCC                            
00002CCC                            ; ---------------------------------------------------------------------------
00002CCC                            ; Subroutine to	delay the program by ($FFFFF62A) frames
00002CCC                            ; ---------------------------------------------------------------------------
00002CCC                            
00002CCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CCC                            
00002CCC                            
00002CCC                            DelayProgram:				; XREF: PauseGame
00002CCC 46FC 2300                  		move	#$2300,sr
00002CD0                            
00002CD0                            loc_29AC:
00002CD0 4A38 F62A                  		tst.b	($FFFFF62A).w
00002CD4 66FA                       		bne.s	loc_29AC
00002CD6 4E75                       		rts	
00002CD8                            ; End of function DelayProgram
00002CD8                            
00002CD8                            ; ---------------------------------------------------------------------------
00002CD8                            ; Subroutine to	generate a pseudo-random number	in d0
00002CD8                            ; ---------------------------------------------------------------------------
00002CD8                            
00002CD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CD8                            
00002CD8                            
00002CD8                            RandomNumber:
00002CD8 2238 F636                  		move.l	($FFFFF636).w,d1
00002CDC 6600                       		bne.s	loc_29C0
00002CDE 223C 2A6D 365A             		move.l	#$2A6D365A,d1
00002CE4                            
00002CE4                            loc_29C0:
00002CE4 2001                       		move.l	d1,d0
00002CE6 E581                       		asl.l	#2,d1
00002CE8 D280                       		add.l	d0,d1
00002CEA E781                       		asl.l	#3,d1
00002CEC D280                       		add.l	d0,d1
00002CEE 3001                       		move.w	d1,d0
00002CF0 4841                       		swap	d1
00002CF2 D041                       		add.w	d1,d0
00002CF4 3200                       		move.w	d0,d1
00002CF6 4841                       		swap	d1
00002CF8 21C1 F636                  		move.l	d1,($FFFFF636).w
00002CFC 4E75                       		rts	
00002CFE                            ; End of function RandomNumber
00002CFE                            
00002CFE                            
00002CFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CFE                            
00002CFE                            
00002CFE                            CalcSine:				; XREF: SS_BGAnimate; et al
00002CFE 0240 00FF                  		andi.w	#$FF,d0
00002D02 D040                       		add.w	d0,d0
00002D04 0640 0080                  		addi.w	#$80,d0
00002D08 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00002D0C 0440 0080                  		subi.w	#$80,d0
00002D10 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
00002D14 4E75                       		rts	
00002D16                            ; End of function CalcSine
00002D16                            
00002D16                            ; ===========================================================================
00002D16                            
00002D16                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002F96                            
00002F96                            ; ===========================================================================
00002F96 48E7 6000                  		movem.l	d1-d2,-(sp)
00002F9A 3200                       		move.w	d0,d1
00002F9C 4841                       		swap	d1
00002F9E 7000                       		moveq	#0,d0
00002FA0 3200                       		move.w	d0,d1
00002FA2 7407                       		moveq	#7,d2
00002FA4                            
00002FA4                            loc_2C80:
00002FA4 E599                       		rol.l	#2,d1
00002FA6 D040                       		add.w	d0,d0
00002FA8 5240                       		addq.w	#1,d0
00002FAA 9240                       		sub.w	d0,d1
00002FAC 6400                       		bcc.s	loc_2C9A
00002FAE D240                       		add.w	d0,d1
00002FB0 5340                       		subq.w	#1,d0
00002FB2 51CA FFF0                  		dbf	d2,loc_2C80
00002FB6 E248                       		lsr.w	#1,d0
00002FB8 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FBC 4E75                       		rts	
00002FBE                            ; ===========================================================================
00002FBE                            
00002FBE                            loc_2C9A:
00002FBE 5240                       		addq.w	#1,d0
00002FC0 51CA FFE2                  		dbf	d2,loc_2C80
00002FC4 E248                       		lsr.w	#1,d0
00002FC6 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002FCA 4E75                       		rts	
00002FCC                            
00002FCC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002FCC                            
00002FCC                            
00002FCC                            CalcAngle:
00002FCC 48E7 1800                  		movem.l	d3-d4,-(sp)
00002FD0 7600                       		moveq	#0,d3
00002FD2 7800                       		moveq	#0,d4
00002FD4 3601                       		move.w	d1,d3
00002FD6 3802                       		move.w	d2,d4
00002FD8 8843                       		or.w	d3,d4
00002FDA 6700                       		beq.s	loc_2D04
00002FDC 3802                       		move.w	d2,d4
00002FDE 4A43                       		tst.w	d3
00002FE0 6A00 0000                  		bpl.w	loc_2CC2
00002FE4 4443                       		neg.w	d3
00002FE6                            
00002FE6                            loc_2CC2:
00002FE6 4A44                       		tst.w	d4
00002FE8 6A00 0000                  		bpl.w	loc_2CCA
00002FEC 4444                       		neg.w	d4
00002FEE                            
00002FEE                            loc_2CCA:
00002FEE B843                       		cmp.w	d3,d4
00002FF0 6400 0000                  		bcc.w	loc_2CDC
00002FF4 E18C                       		lsl.l	#8,d4
00002FF6 88C3                       		divu.w	d3,d4
00002FF8 7000                       		moveq	#0,d0
00002FFA 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002FFE 6000                       		bra.s	loc_2CE6
00003000                            ; ===========================================================================
00003000                            
00003000                            loc_2CDC:				; XREF: CalcAngle
00003000 E18B                       		lsl.l	#8,d3
00003002 86C4                       		divu.w	d4,d3
00003004 7040                       		moveq	#$40,d0
00003006 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
0000300A                            
0000300A                            loc_2CE6:
0000300A 4A41                       		tst.w	d1
0000300C 6A00 0000                  		bpl.w	loc_2CF2
00003010 4440                       		neg.w	d0
00003012 0640 0080                  		addi.w	#$80,d0
00003016                            
00003016                            loc_2CF2:
00003016 4A42                       		tst.w	d2
00003018 6A00 0000                  		bpl.w	loc_2CFE
0000301C 4440                       		neg.w	d0
0000301E 0640 0100                  		addi.w	#$100,d0
00003022                            
00003022                            loc_2CFE:
00003022 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003026 4E75                       		rts	
00003028                            ; ===========================================================================
00003028                            
00003028                            loc_2D04:				; XREF: CalcAngle
00003028 303C 0040                  		move.w	#$40,d0
0000302C 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003030 4E75                       		rts	
00003032                            ; End of function CalcAngle
00003032                            
00003032                            ; ===========================================================================
00003032                            
00003032                            Angle_Data:	incbin	misc\angles.bin
00003134                            
00003134                            ; ===========================================================================
00003134                            
00003134                            ; ---------------------------------------------------------------------------
00003134                            ; Sega screen
00003134                            ; ---------------------------------------------------------------------------
00003134                            
00003134                            SegaScreen:				; XREF: GameModeArray
00003134 103C 00E4                  		move.b	#$E4,d0
00003138 6100 E498                  		bsr.w	PlaySound_Special ; stop music
0000313C 6100 E6D6                  		bsr.w	ClearPLC
00003140 6100 EF0C                  		bsr.w	Pal_FadeFrom
00003144 4DF9 00C0 0004             		lea	($C00004).l,a6
0000314A 3CBC 8004                  		move.w	#$8004,(a6)
0000314E 3CBC 8230                  		move.w	#$8230,(a6)
00003152 3CBC 8407                  		move.w	#$8407,(a6)
00003156 3CBC 8700                  		move.w	#$8700,(a6)
0000315A 3CBC 8B00                  		move.w	#$8B00,(a6)
0000315E 4238 F64E                  		clr.b	($FFFFF64E).w
00003162 46FC 2700                  		move	#$2700,sr
00003166 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000316A 0200 00BF                  		andi.b	#$BF,d0
0000316E 33C0 00C0 0004             		move.w	d0,($C00004).l
00003174 6100 E384                  		bsr.w	ClearScreen
00003178 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003182 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00003188 6100 E4EC                  		bsr.w	NemDec
0000318C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003192 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00003198 303C 0000                  		move.w	#0,d0
0000319C 6100 E7B6                  		bsr.w	EniDec
000031A0 43F9 00FF 0000             		lea	($FF0000).l,a1
000031A6 203C 6510 0003             		move.l	#$65100003,d0
000031AC 7217                       		moveq	#$17,d1
000031AE 7407                       		moveq	#7,d2
000031B0 6100 E4A4                  		bsr.w	ShowVDPGraphics
000031B4 43F9 00FF 0180             		lea	($FF0180).l,a1
000031BA 203C 4000 0003             		move.l	#$40000003,d0
000031C0 7227                       		moveq	#$27,d1
000031C2 741B                       		moveq	#$1B,d2
000031C4 6100 E490                  		bsr.w	ShowVDPGraphics
000031C8 7000                       		moveq	#0,d0
000031CA 6100 F148                  		bsr.w	PalLoad2	; load Sega logo pallet
000031CE 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000031D4 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000031DA 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000031E0 31FC 0000 F660             		move.w	#0,($FFFFF660).w
000031E6 3038 F60C                  		move.w	($FFFFF60C).w,d0
000031EA 0000 0040                  		ori.b	#$40,d0
000031EE 33C0 00C0 0004             		move.w	d0,($C00004).l
000031F4                            
000031F4                            Sega_WaitPallet:
000031F4 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
000031FA 6100 FAD0                  		bsr.w	DelayProgram
000031FE 6100 F006                  		bsr.w	PalCycle_Sega
00003202 66F0                       		bne.s	Sega_WaitPallet
00003204                            
00003204 103C 00E1                  		move.b	#$E1,d0
00003208 6100 E3C8                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
0000320C 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00003212 6100 FAB8                  		bsr.w	DelayProgram
00003216 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
0000321C                            
0000321C                            Sega_WaitEnd:
0000321C 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003222 6100 FAA8                  		bsr.w	DelayProgram
00003226 4A78 F614                  		tst.w	($FFFFF614).w
0000322A 6700                       		beq.s	Sega_GotoTitle
0000322C 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003232 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003234                            
00003234                            Sega_GotoTitle:
00003234 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
0000323A 4E75                       		rts	
0000323C                            ; ===========================================================================
0000323C                            
0000323C                            ; ---------------------------------------------------------------------------
0000323C                            ; Title	screen
0000323C                            ; ---------------------------------------------------------------------------
0000323C                            
0000323C                            TitleScreen:				; XREF: GameModeArray
0000323C 103C 00E4                  		move.b	#$E4,d0
00003240 6100 E390                  		bsr.w	PlaySound_Special ; stop music
00003244 6100 EE08                  		bsr.w	Pal_FadeFrom
00003248 6100 E5CA                  		bsr.w	ClearPLC
0000324C 46FC 2700                  		move	#$2700,sr
00003250 6100 E336                  		bsr.w	SoundDriverLoad
00003254 4DF9 00C0 0004             		lea	($C00004).l,a6
0000325A 3CBC 8004                  		move.w	#$8004,(a6)
0000325E 3CBC 8230                  		move.w	#$8230,(a6)
00003262 3CBC 8407                  		move.w	#$8407,(a6)
00003266 3CBC 9001                  		move.w	#$9001,(a6)
0000326A 3CBC 9200                  		move.w	#$9200,(a6)
0000326E 3CBC 8B03                  		move.w	#$8B03,(a6)
00003272 3CBC 8720                  		move.w	#$8720,(a6)
00003276 4238 F64E                  		clr.b	($FFFFF64E).w
0000327A 6100 E27E                  		bsr.w	ClearScreen
0000327E 43F8 D000                  		lea	($FFFFD000).w,a1
00003282 7000                       		moveq	#0,d0
00003284 323C 07FF                  		move.w	#$7FF,d1
00003288                            
00003288                            Title_ClrObjRam:
00003288 22C0                       		move.l	d0,(a1)+
0000328A 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
0000328E                            
0000328E                            ; gomer
0000328E 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003298 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
0000329E 6100 E3D6                  		bsr.w	NemDec
000032A2 7003                       		moveq	#3,d0		; load Sonic's pallet
000032A4 6100 F052                  		bsr.w	PalLoad1
000032A8                            
000032A8 43F9 00FF 0000             		lea	($FF0000).l,a1
000032AE 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000032B4 303C 0000                  		move.w	#0,d0
000032B8 6100 E69A                  		bsr.w	EniDec
000032BC                            ; help how the fuck can i do this IT SHOWS NOTHING
000032BC 43F9 00FF 0000             		lea	($FF0000).l,a1
000032C2 203C 4000 0003             		move.l	#$40000003,d0
000032C8 7227                       		moveq	#$27,d1
000032CA 741B                       		moveq	#$1B,d2
000032CC 6100 E388                  		bsr.w	ShowVDPGraphics
000032D0                            
000032D0                            
000032D0 43F9 00FF 0000             		lea	($FF0000).l,a1
000032D6 203C 6000 0003             		move.l	#$60000003,d0
000032DC 7227                       		moveq	#$27,d1
000032DE 741B                       		moveq	#$1B,d2
000032E0                            
000032E0 6100 ECC6                  		bsr.w	Pal_FadeTo
000032E4 6100 ED68                  		bsr.w	Pal_FadeFrom
000032E8                            
000032E8                            
000032E8 6100 E210                  		bsr.w	ClearScreen
000032EC 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000032F6 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
000032FC 6100 E378                  		bsr.w	NemDec
00003300 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
0000330A 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003310 6100 E364                  		bsr.w	NemDec
00003314 43F9 00FF 0000             		lea	($FF0000).l,a1
0000331A 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003320 303C 0000                  		move.w	#0,d0
00003324 6100 E62E                  		bsr.w	EniDec
00003328 43F9 00FF 0000             		lea	($FF0000).l,a1
0000332E 203C 4000 0003             		move.l	#$40000003,d0
00003334 7227                       		moveq	#$27,d1
00003336 741B                       		moveq	#$1B,d2
00003338 6100 E31C                  		bsr.w	ShowVDPGraphics
0000333C 6100 ED10                  		bsr.w	Pal_FadeFrom
00003340 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003344 7000                       		moveq	#0,d0
00003346 323C 001F                  		move.w	#$1F,d1
0000334A                            
0000334A                            
0000334A                            Title_ClrPallet:
0000334A 22C0                       		move.l	d0,(a1)+
0000334C 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003350                            
00003350 7003                       		moveq	#3,d0		; load Sonic's pallet
00003352 6100 EFA4                  		bsr.w	PalLoad1
00003356 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
0000335C 4EB9 0000 0000             		jsr	ObjectsLoad
00003362 4EB9 0000 0000             		jsr	BuildSprites
00003368 6100 EC3E                  		bsr.w	Pal_FadeTo
0000336C 46FC 2700                  		move	#$2700,sr
00003370 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
0000337A 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003380 6100 E2F4                  		bsr.w	NemDec
00003384 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
0000338E 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003394 6100 E2E0                  		bsr.w	NemDec
00003398 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
000033A2 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
000033A8 6100 E2CC                  		bsr.w	NemDec
000033AC 4DF9 00C0 0000             		lea	($C00000).l,a6
000033B2 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
000033BA 4BF9 0000 0606             		lea	(Art_Text).l,a5
000033C0 323C 0BC4                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
000033C4                            
000033C4                            Title_LoadText:
000033C4 2C9D                       		move.l	(a5)+,(a6)
000033C6 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
000033CA                            
000033CA 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
000033D0 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
000033D6 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
000033DC 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
000033E2 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
000033E8 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
000033EE 6100 0000                  		bsr.w	LevelSizeLoad
000033F2 6100 0000                  		bsr.w	DeformBgLayer
000033F6                            
000033F6 43F8 B000                  		lea	($FFFFB000).w,a1
000033FA 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003400 303C 0000                  		move.w	#0,d0
00003404 6100 E54E                  		bsr.w	EniDec
00003408 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
0000340E 43F9 00FF 0000             		lea	($FF0000).l,a1
00003414 6100 E6BC                  		bsr.w	KosDec
00003418 6100 0000                  		bsr.w	LevelLayoutLoad
0000341C                            
0000341C 46FC 2700                  		move	#$2700,sr
00003420 6100 E0D8                  		bsr.w	ClearScreen
00003424 4BF9 00C0 0004             		lea	($C00004).l,a5
0000342A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003430 47F8 F708                  		lea	($FFFFF708).w,a3
00003434 49F8 A440                  		lea	($FFFFA440).w,a4
00003438 343C 6000                  		move.w	#$6000,d2
0000343C 6100 0000                  		bsr.w	LoadTilesFromStart2
00003440 43F9 00FF 0000             		lea	($FF0000).l,a1
00003446 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
0000344C 303C 0000                  		move.w	#0,d0
00003450 6100 E502                  		bsr.w	EniDec
00003454 43F9 00FF 0000             		lea	($FF0000).l,a1
0000345A 203C 4206 0003             		move.l	#$42060003,d0
00003460 7221                       		moveq	#$21,d1
00003462 7415                       		moveq	#$15,d2
00003464 6100 E1F0                  		bsr.w	ShowVDPGraphics
00003468 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003472 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003478 6100 E1FC                  		bsr.w	NemDec
0000347C 7001                       		moveq	#1,d0		; load title screen pallet
0000347E 6100 EE78                  		bsr.w	PalLoad1
00003482 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003486 6100 E14A                  		bsr.w	PlaySound_Special
0000348A 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003490 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003496 43F8 D080                  		lea	($FFFFD080).w,a1
0000349A 7000                       		moveq	#0,d0
0000349C 323C 000F                  		move.w	#$F,d1
000034A0                            
000034A0                            Title_ClrObjRam2:
000034A0 22C0                       		move.l	d0,(a1)+
000034A2 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
000034A6                            
000034A6 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
000034AC 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
000034B2 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
000034B8 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000034BE 11FC 000F D100             		move.b	#$F,($FFFFD100).w
000034C4 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
000034CA 4EB9 0000 0000             		jsr	ObjectsLoad
000034D0 6100 0000                  		bsr.w	DeformBgLayer
000034D4 4EB9 0000 0000             		jsr	BuildSprites
000034DA 7000                       		moveq	#0,d0
000034DC 6100 E30A                  		bsr.w	LoadPLC2
000034E0 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000034E6 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
000034EC 3038 F60C                  		move.w	($FFFFF60C).w,d0
000034F0 0000 0040                  		ori.b	#$40,d0
000034F4 33C0 00C0 0004             		move.w	d0,($C00004).l
000034FA 6100 EAAC                  		bsr.w	Pal_FadeTo
000034FE                            
000034FE                            loc_317C:
000034FE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003504 6100 F7C6                  		bsr.w	DelayProgram
00003508 4EB9 0000 0000             		jsr	ObjectsLoad
0000350E 6100 0000                  		bsr.w	DeformBgLayer
00003512 4EB9 0000 0000             		jsr	BuildSprites
00003518 6100 E678                  		bsr.w	PalCycle_Title
0000351C 6100 E304                  		bsr.w	RunPLC_RAM
00003520 3038 D008                  		move.w	($FFFFD008).w,d0
00003524 5440                       		addq.w	#2,d0
00003526 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
0000352A 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
0000352E 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003530 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003536 4E75                       		rts	
00003538                            ; ===========================================================================
00003538                            
00003538                            Title_ChkRegion:
00003538 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
0000353C 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
0000353E 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003544 6000                       		bra.s	Title_EnterCheat
00003546                            ; ===========================================================================
00003546                            
00003546                            Title_RegionJ:				; XREF: Title_ChkRegion
00003546 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
0000354C                            
0000354C                            Title_EnterCheat:			; XREF: Title_ChkRegion
0000354C 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003550 D0C0                       		adda.w	d0,a0
00003552 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003556 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
0000355A B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
0000355C 6600                       		bne.s	loc_3210	; if not, branch
0000355E 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003562 4A00                       		tst.b	d0
00003564 6600                       		bne.s	Title_CountC
00003566 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
0000356A 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
0000356E E249                       		lsr.w	#1,d1
00003570 0241 0003                  		andi.w	#3,d1
00003574 6700                       		beq.s	Title_PlayRing
00003576 4A38 FFF8                  		tst.b	($FFFFFFF8).w
0000357A 6A00                       		bpl.s	Title_PlayRing
0000357C 7201                       		moveq	#1,d1
0000357E 1181 1001                  		move.b	d1,1(a0,d1.w)
00003582                            
00003582                            Title_PlayRing:
00003582 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003588 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000358C 6100 E044                  		bsr.w	PlaySound_Special
00003590 6000                       		bra.s	Title_CountC
00003592                            ; ===========================================================================
00003592                            
00003592                            loc_3210:				; XREF: Title_EnterCheat
00003592 4A00                       		tst.b	d0
00003594 6700                       		beq.s	Title_CountC
00003596 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000359C 6700                       		beq.s	Title_CountC
0000359E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
000035A4                            
000035A4                            Title_CountC:
000035A4 1038 F605                  		move.b	($FFFFF605).w,d0
000035A8 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
000035AC 6700                       		beq.s	loc_3230	; if not, branch
000035AE 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
000035B2                            
000035B2                            loc_3230:
000035B2 4A78 F614                  		tst.w	($FFFFF614).w
000035B6 6700 0000                  		beq.w	Demo
000035BA                            		; (temporary until we have an actual options screen)
000035BA 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
000035C0 6700                       		beq.s	@notc
000035C2                            
000035C2 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
000035C6 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
000035CC 6D00                       		blt.s	@notoverflow
000035CE 11FC 0000 FFE8             		move.b	#0,(v_character).w
000035D4                            	@notoverflow:
000035D4 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
000035D8 6100 DFF8                  		bsr.w	PlaySound_Special
000035DC                            	@notc:
000035DC 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
000035E2 6700 FF1A                  		beq.w	loc_317C	; if not, branch
000035E6                            
000035E6                            Title_ChkLevSel:
000035E6 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
000035EA 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035EE 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
000035F4 6700 0000                  		beq.w	PlayLevel	; if not, play level
000035F8                            		
000035F8                            		
000035F8 7002                       		moveq	#2,d0
000035FA 6100 ED18                  		bsr.w	PalLoad2	; load level select pallet
000035FE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003602 7000                       		moveq	#0,d0
00003604 323C 00DF                  		move.w	#$DF,d1
00003608                            
00003608                            Title_ClrScroll:
00003608 22C0                       		move.l	d0,(a1)+
0000360A 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000360E                            
0000360E 21C0 F616                  		move.l	d0,($FFFFF616).w
00003612 46FC 2700                  		move	#$2700,sr
00003616 4DF9 00C0 0000             		lea	($C00000).l,a6
0000361C 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003626 323C 03FF                  		move.w	#$3FF,d1
0000362A                            
0000362A                            Title_ClrVram:
0000362A 2C80                       		move.l	d0,(a6)
0000362C 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003630                            
00003630 6100 0000                  		bsr.w	LevSelTextLoad
00003634                            		
00003634                            		; sound test fix
00003634 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003638 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
0000363E                            		
0000363E 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003642 0C46 0014                  		cmpi.w	#$14,d6
00003646 6700                       		beq.s	@issndtst
00003648 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
0000364C                            	@issndtst:
0000364C 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003650 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003654                            		
00003654 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003658 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003660                            		
00003660 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003666 6700                       		beq.s	@issndtst2
00003668                            		
00003668 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
0000366E 6100 0000                  		bsr.w	CStringSlop
00003672 6000                       		bra.s	LevelSelect
00003674                            	@issndtst2:
00003674 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000367A 6100 0000                  		bsr.w	CStringSlop
0000367E                            ; ---------------------------------------------------------------------------
0000367E                            ; Level	Select
0000367E                            ; ---------------------------------------------------------------------------
0000367E                            LevelSelect:
0000367E 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003684 6100 F646                  		bsr.w	DelayProgram
00003688 6100 0000                  		bsr.w	LevSelControls
0000368C 6100 E194                  		bsr.w	RunPLC_RAM
00003690 4AB8 F680                  		tst.l	($FFFFF680).w
00003694 66E8                       		bne.s	LevelSelect
00003696 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
0000369C 67E0                       		beq.s	LevelSelect	; if not, branch
0000369E 3038 FF82                  		move.w	($FFFFFF82).w,d0
000036A2 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
000036A6 6600                       		bne.s	@dont	; if not, dont blow this place up
000036A8                            			
000036A8 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
000036AE 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000036B4 6100 F616                  		bsr.w	DelayProgram
000036B8                            	@dont:
000036B8 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
000036BC 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000036BE                            		
000036BE 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
000036C4 67B8                       		beq.s	LevelSelect	; if not, branch
000036C6                            		
000036C6 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
000036CC 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
000036CE                            		
000036CE 1038 FF84                  		move.b	($FFFFFF84).w,d0
000036D2 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
000036D6                            		
000036D6 4EB9 0000 0000             		jsr		ShowNow_Playing
000036DC 60A0                       		bra.s	LevelSelect
000036DE                            ; ===========================================================================
000036DE                            
000036DE                            LevSel_SEGA:				; XREF: LevelSelect
000036DE 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
000036E4 4E75                       		rts	
000036E6                            ; ===========================================================================
000036E6                            
000036E6                            LevSel_Ending:				; XREF: LevelSelect
000036E6 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000036EC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000036F2 4E75                       		rts	
000036F4                            ; ===========================================================================
000036F4                            
000036F4                            LevSel_Credits:				; XREF: LevelSelect
000036F4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000036FA 103C 0091                  		move.b	#$91,d0
000036FE 6100 DED2                  		bsr.w	PlaySound_Special ; play credits music
00003702 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003708 4E75                       		rts	
0000370A                            ; ===========================================================================
0000370A                            
0000370A                            LevSel_Level_SS:			; XREF: LevelSelect
0000370A D040                       		add.w	d0,d0
0000370C 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003710 6B00 FF6C                  		bmi.w	LevelSelect
00003714 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003718 6600                       		bne.s	LevSel_Level	; if not, branch
0000371A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003720 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003724 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000372A 7000                       		moveq	#0,d0
0000372C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003730 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003734 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003738 4E75                       		rts	
0000373A                            ; ===========================================================================
0000373A                            
0000373A                            LevSel_Level:				; XREF: LevSel_Level_SS
0000373A 0240 3FFF                  		andi.w	#$3FFF,d0
0000373E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003742                            
00003742                            PlayLevel:				; XREF: ROM:00003246j ...
00003742 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003748 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
0000374E 7000                       		moveq	#0,d0
00003750 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003754 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003758 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000375C 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003760 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003764 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003768 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000376C 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003770 103C 00E0                  		move.b	#$E0,d0
00003774 6100 DE5C                  		bsr.w	PlaySound_Special ; fade out music
00003778 4E75                       		rts	
0000377A                            ; ===========================================================================
0000377A                            ; ---------------------------------------------------------------------------
0000377A                            ; Level	select - level pointers
0000377A                            ; ---------------------------------------------------------------------------
0000377A                            LSelectPointers:
0000377A                            		incbin	misc\ls_point.bin
000037A4                            		even
000037A4                            ; ---------------------------------------------------------------------------
000037A4                            ; Level	select codes
000037A4                            ; ---------------------------------------------------------------------------
000037A4                            LevelSelectCode_J:
000037A4                            		incbin	misc\ls_jcode.bin
000037AA                            		even
000037AA                            
000037AA                            LevelSelectCode_US:
000037AA                            		incbin	misc\ls_ucode.bin
000037B0                            		even
000037B0                            ; ===========================================================================
000037B0                            
000037B0                            ; ---------------------------------------------------------------------------
000037B0                            ; Demo mode
000037B0                            ; ---------------------------------------------------------------------------
000037B0                            
000037B0                            Demo:					; XREF: TitleScreen
000037B0 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000037B6                            
000037B6                            loc_33B6:				; XREF: loc_33E4
000037B6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000037BC 6100 F50E                  		bsr.w	DelayProgram
000037C0 6100 0000                  		bsr.w	DeformBgLayer
000037C4 6100 E3AC                  		bsr.w	PalCycle_Load
000037C8 6100 E058                  		bsr.w	RunPLC_RAM
000037CC 3038 D008                  		move.w	($FFFFD008).w,d0
000037D0 5440                       		addq.w	#2,d0
000037D2 31C0 D008                  		move.w	d0,($FFFFD008).w
000037D6 0C40 1C00                  		cmpi.w	#$1C00,d0
000037DA 6500                       		bcs.s	loc_33E4
000037DC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000037E2 4E75                       		rts	
000037E4                            ; ===========================================================================
000037E4                            
000037E4                            loc_33E4:				; XREF: Demo
000037E4 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000037EA 6600 FDFA                  		bne.w	Title_ChkLevSel	; if yes, branch
000037EE 4A78 F614                  		tst.w	($FFFFF614).w
000037F2 6600 FFC2                  		bne.w	loc_33B6
000037F6 103C 00E0                  		move.b	#$E0,d0
000037FA 6100 DDD6                  		bsr.w	PlaySound_Special ; fade out music
000037FE 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003802 0240 0007                  		andi.w	#7,d0
00003806 D040                       		add.w	d0,d0
00003808 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000380C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003810 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003814 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000381A 6500                       		bcs.s	loc_3422	; if yes, branch
0000381C 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003822                            
00003822                            loc_3422:
00003822 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003828 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000382E 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003832 6600                       		bne.s	Demo_Level	; if not, branch
00003834 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000383A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000383E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003842                            
00003842                            Demo_Level:
00003842 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003848 7000                       		moveq	#0,d0
0000384A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000384E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003852 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003856 4E75                       		rts	
00003858                            ; ===========================================================================
00003858                            ; ---------------------------------------------------------------------------
00003858                            ; Levels used in demos
00003858                            ; ---------------------------------------------------------------------------
00003858                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003860                            		even
00003860                            
00003860                            ; ---------------------------------------------------------------------------
00003860                            ; Subroutine to	change what you're selecting in the level select
00003860                            ; ---------------------------------------------------------------------------
00003860                            
00003860                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003860                            
00003860                            
00003860                            LevSelControls:				; XREF: LevelSelect
00003860 1238 F605                  		move.b	($FFFFF605).w,d1
00003864 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003868 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000386A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000386E 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
00003872                            
00003872                            LevSel_UpDown:
00003872 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003878 1238 F604                  		move.b	($FFFFF604).w,d1
0000387C 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003880 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
00003884 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003888 0801 0000                  		btst	#0,d1		; is up	pressed?
0000388C 6700                       		beq.s	LevSel_Down	; if not, branch
0000388E 5346                       		subq.w	#1,d6		; move up 1 selection
00003890 6400                       		bcc.s	LevSel_Down
00003892 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003894                            
00003894                            LevSel_Down:
00003894 0801 0001                  		btst	#1,d1		; is down pressed?
00003898 6700                       		beq.s	LevSel_Refresh	; if not, branch
0000389A 5246                       		addq.w	#1,d6		; move down 1 selection
0000389C 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038A0 6500                       		bcs.s	LevSel_Refresh
000038A2 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
000038A4 6000                       		bra.s	LevSel_Refresh
000038A6                            		
000038A6                            LevSel_LR:
000038A6 0801 0002                  		btst	#2,d1		; is left pressed?
000038AA 6700                       		beq.s	LevSel_Right	; if not, branch
000038AC 0446 0000                  		sub.w	#lsrow2size,d6
000038B0 64E2                       		bcc.s	LevSel_Down
000038B2 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
000038B6                            LevSel_Right:
000038B6 0801 0003                  		btst	#3,d1		; is right pressed?
000038BA 6700                       		beq.s	LevSel_Refresh	; if not, branch
000038BC 0646 0000                  		add.w	#lsrow1size,d6
000038C0 0C46 0000                  		cmpi.w	#lsselectable+1,d6
000038C4 6500                       		bcs.s	LevSel_Refresh
000038C6 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
000038CA                            ; ===========================================================================
000038CA                            LevSel_Refresh:
000038CA                            		
000038CA 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000038CE 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000038D2                            		
000038D2 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000038D8 6600                       		bne.s	@exitsndtest
000038DA                            		
000038DA 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
000038DE 43F9 0000 0000             		lea	(Controls_Normal).l,a1
000038E4 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
000038EC 6100 0000                  		bsr.w	CStringSlop
000038F0                            	@exitsndtest:
000038F0                            	
000038F0 363C C65F                  		move.w	#$C680-$21,d3
000038F4 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
000038F8 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
000038FC                            		
000038FC 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00003902 6600                       		bne.s	@entersndtest
00003904                            		
00003904 363C C65F                  		move.w	#$C680-$21,d3
00003908 43F9 0000 0000             		lea	(Controls_SND).l,a1
0000390E 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003916 6100 0000                  		bsr.w	CStringSlop
0000391A                            	@entersndtest:
0000391A 4E75                       		rts	
0000391C                            		
0000391C                            LevSel_SndTest:				; XREF: LevSelControls
0000391C 1238 F605                  		move.b	($FFFFF605).w,d1
00003920 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00003924 6700                       		beq.s	LevSel_NoMove	; if not, branch
00003926 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
0000392C 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
00003930                            		
00003930 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003934 0801 0002                  		btst	#2,d1		; is left pressed?
00003938 6700                       		beq.s	SndTest_Right	; if not, branch
0000393A 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
0000393C                            		; no need the fact it's a byte does the trick
0000393C                            
0000393C                            SndTest_Right:
0000393C 0801 0003                  		btst	#3,d1		; is right pressed?
00003940 6700                       		beq.s	SndTest_A	; if not, branch
00003942 5200                       		addq.b	#1,d0		; add 1	to sound test
00003944                            		; same here
00003944                            		
00003944                            SndTest_A:
00003944 0801 0006                  		btst	#6,d1		; is A pressed?
00003948 6700                       		beq.s	SndTest_B	; if not, branch
0000394A 5100                       		subq.b	#8,d0		; subtract $10 to sound test
0000394C 5100                       		subq.b	#8,d0
0000394E                            		
0000394E                            SndTest_B:
0000394E 0801 0004                  		btst	#4,d1		; is B pressed?
00003952 6700                       		beq.s	SndTest_Refresh	; if not, branch
00003954 5000                       		addq.b	#8,d0		; add $10 to sound test
00003956 5000                       		addq.b	#8,d0
00003958                            
00003958                            SndTest_Refresh:
00003958 363C C65F                  		move.w	#$C680-$21,d3
0000395C 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
00003960 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00003964                            
00003964                            LevSel_NoMove:
00003964 4E75                       		rts	
00003966                            ; End of function LevSelControls
00003966                            
00003966                            ; ---------------------------------------------------------------------------
00003966                            ; Subroutine to load level select text
00003966                            ; ---------------------------------------------------------------------------
00003966                            
00003966                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003966                            
00003966                            LevSelTextLoad_loop:
00003966 2D44 0004                  		move.l	d4,4(a6)
0000396A 6100 0000                  		bsr.w	LevSel_ChgLine
0000396E 0684 0080 0000             		addi.l	#$800000,d4
00003974 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
00003978 4E75                       		rts
0000397A                            LevSelTextLoad:				; XREF: TitleScreen
0000397A 43F9 0000 0000             		lea	(LevelMenuText).l,a1
00003980 4DF9 00C0 0000             		lea	($C00000).l,a6
00003986 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
0000398A 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
00003990                            		
00003990 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
00003994 61D0                       		bsr.s	LevSelTextLoad_loop
00003996                            		
00003996                            		
00003996 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
0000399C 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000039A0 61C4                       		bsr.s	LevSelTextLoad_loop
000039A2 363C C65F                  		move.w	#$C680-$21,d3
000039A6                            		
000039A6                            LevSelHighlightCode:
000039A6 4DF9 00C0 0000             		lea	($C00000).l,a6
000039AC 7000                       		moveq	#0,d0
000039AE 3038 FF82                  		move.w	($FFFFFF82).w,d0
000039B2 3200                       		move.w	d0,d1
000039B4 283C 6086 0003             		move.l	#lsscrpos,d4
000039BA                            		
000039BA 0C40 0000                  		cmpi.w	#lsrow1size,d0
000039BE 6D00                       		blt.s	@notsecond
000039C0                            		
000039C0 0440 0000                  		sub.w	#lsrow1size,d0
000039C4 0684 0024 0000             		addi.l	#lsoff,d4
000039CA                            	@notsecond:
000039CA EF48                       		lsl.w	#7,d0
000039CC 4840                       		swap	d0
000039CE D880                       		add.l	d0,d4
000039D0 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000039D6 E749                       		lsl.w	#3,d1
000039D8 D241                       		add.w	d1,d1
000039DA D2C1                       		adda.w	d1,a1
000039DC 2D44 0004                  		move.l	d4,4(a6)
000039E0 6100 0000                  		bsr.w	LevSel_ChgLine
000039E4 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
000039EA 6700                       		beq.s	LevSelSndTest
000039EC 4E75                       		rts
000039EE                            
000039EE                            LevSelSndTest:
000039EE 0643 0030                  		add.w	#$30,d3
000039F2 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
000039FC 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003A00 1400                       		move.b	d0,d2
00003A02 E808                       		lsr.b	#4,d0
00003A04 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A08 1002                       		move.b	d2,d0
00003A0A 6100 0000                  		bsr.w	LevSel_ChgSnd
00003A0E 4E75                       		rts	
00003A10                            ; End of function LevSelTextLoad
00003A10                            
00003A10                            
00003A10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A10                            
00003A10                            
00003A10                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003A10 0240 000F                  		andi.w	#$F,d0
00003A14 0C00 000A                  		cmpi.b	#$A,d0
00003A18 6500                       		bcs.s	loc_3580
00003A1A 5E00                       		addi.b	#7,d0
00003A1C                            
00003A1C                            loc_3580:
00003A1C D043                       		add.w	d3,d0
00003A1E 3C80                       		move.w	d0,(a6)
00003A20 4E75                       		rts	
00003A22                            ; End of function LevSel_ChgSnd
00003A22                            
00003A22                            
00003A22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003A22                            
00003A22                            
00003A22                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003A22 740F                       		moveq	#$10-1,d2		; number of characters per line
00003A24                            
00003A24                            @loop:
00003A24 7000                       		moveq	#0,d0
00003A26 1019                       		move.b	(a1)+,d0
00003A28 0C00 0020                  		cmpi.b	#$20,d0
00003A2C 6E00                       		bgt.s	@draw
00003A2E 3CBC 0000                  		move.w	#0,(a6)
00003A32 51CA FFF0                  		dbf	d2,@loop
00003A36 4E75                       		rts	
00003A38                            ; ===========================================================================
00003A38                            
00003A38                            @draw:				; XREF: LevSel_ChgLine
00003A38 D043                       		add.w	d3,d0
00003A3A 3C80                       		move.w	d0,(a6)
00003A3C 51CA FFE6                  		dbf	d2,@loop
00003A40 4E75                       		rts	
00003A42                            ; End of function LevSel_ChgLine
00003A42                            		
00003A42                            CStringSlop_draw:
00003A42 D043                       		add.w	d3,d0
00003A44 3C80                       		move.w	d0,(a6)
00003A46                            CStringSlop:				; XREF: LevSelTextLoad
00003A46 7000                       		moveq	#0,d0
00003A48 1019                       		move.b	(a1)+,d0
00003A4A 0C00 0020                  		cmpi.b	#$20,d0
00003A4E 6EF2                       		bgt.s	CStringSlop_draw
00003A50                            		
00003A50 0C00 0001                  		cmpi.b	#1,d0
00003A54 6700                       		beq.s	@InsertSpaces
00003A56 6500                       		blo.s	@end
00003A58                            		
00003A58 3CBC 0000                  		move.w	#0,(a6)
00003A5C 60E8                       		bra.s	CStringSlop
00003A5E                            	@end:
00003A5E 4E75                       		rts
00003A60                            	@InsertSpaces:
00003A60 7000                       		moveq	#0,d0
00003A62 1019                       		move.b	(a1)+,d0
00003A64                            		
00003A64                            	@insert:
00003A64 3CBC 0000                  		move.w	#0,(a6)
00003A68 51C8 FFFA                  		dbf.w	d0,@insert
00003A6C 60D8                       		bra.s	CStringSlop
00003A6E                            ; End of function LevSel_ChgLine
00003A6E                            
00003A6E                            ; ===========================================================================
00003A6E                            ; ---------------------------------------------------------------------------
00003A6E                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00003A6E                            ; ---------------------------------------------------------------------------
00003A6E                            LevelMenuText:	
00003A6E 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
00003A7E 2020 2020 2020 2020 2020+          dc.b    "               2"
00003A8E 2020 2020 2020 2020 2020+          dc.b    "               3"
00003A9E 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
00003AAE 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
00003ABE 2020 2020 2020 2020 2020+          dc.b    "               3"
00003ACE 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00003ADE 2020 2020 2020 2020 2020+          dc.b    "               2"
00003AEE 2020 2020 2020 2020 2020+          dc.b    "               3"
00003AFE 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00003B0E 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B1E 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B2E                            LMTSecondRow:
00003B2E 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00003B3E 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
00003B4E 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B5E 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
00003B6E 2020 2020 2020 2020 2020+          dc.b    "               2"
00003B7E 2020 2020 2020 2020 2020+          dc.b    "               3"
00003B8E 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
00003B9E 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00003BAE 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00003BBE 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00003BCE 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00003BDE                            LMTSelectableEnd:
00003BDE 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00003BEE                            LMTEnd:
00003BEE                            
00003BEE                            Now_Playing:
00003BEE 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00003BFE                            		even
00003BFE                            NP_Track:
00003BFE 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00003C06                            		even
00003C06                            NP_SFX:
00003C06 534F 554E 4420 2400        		dc.b	"SOUND $",0
00003C0E                            		even
00003C0E                            
00003C0E                            ShowNow_Playing:
00003C0E 1C00                       		move.b	d0,d6
00003C10 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003C14 43FA FFD8                  		lea	Now_Playing(pc),a1
00003C18 4DF9 00C0 0000             		lea		($C00000).l,a6
00003C1E 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00003C26 6100 FE1E                  		bsr.w	CStringSlop
00003C2A                            		
00003C2A 43FA FFD2                  		lea	NP_Track(pc),a1
00003C2E 0C06 00A0                  		cmpi.b	#$A0,d6
00003C32 6D00                       		blt.s	@track
00003C34                            		
00003C34 43FA FFD0                  		lea	NP_SFX(pc),a1
00003C38                            	@track:
00003C38 6100 FE0C                  		bsr.w	CStringSlop
00003C3C                            		
00003C3C 0643 0030                  		add.w	#$30,d3
00003C40 1006                       		move.b	d6,d0
00003C42 1400                       		move.b	d0,d2
00003C44 E808                       		lsr.b	#4,d0
00003C46 6100 FDC8                  		bsr.w	LevSel_ChgSnd
00003C4A 1002                       		move.b	d2,d0
00003C4C 6100 FDC2                  		bsr.w	LevSel_ChgSnd
00003C50 4E75                       		rts	
00003C52                            
00003C52                            ; 1 is insert spaces btw
00003C52                            Controls_Normal:
00003C52 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
00003C5E                            		even		
00003C5E                            Controls_SND:
00003C5E 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
00003C84 00                         		even
00003C84                            ; ---------------------------------------------------------------------------
00003C84                            ; Music	playlist
00003C84                            ; ---------------------------------------------------------------------------
00003C84                            MusicList1:	incbin	misc\muslist1.bin
00003C8C                            		even
00003C8C                            MusicList2:	incbin	misc\muslist2.bin
00003C92                            		even
00003C92                            MusicList3:	incbin	misc\muslist3.bin
00003C98                            		even
00003C98                            MusicList4:	incbin	misc\muslist4.bin
00003C9E                            		even
00003C9E                            ; ===========================================================================
00003C9E                            
00003C9E                            ; ---------------------------------------------------------------------------
00003C9E                            ; Level
00003C9E                            ; ---------------------------------------------------------------------------
00003C9E                            
00003C9E                            Level:					; XREF: GameModeArray
00003C9E 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
00003CA4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CA8 6B00                       		bmi.s	loc_37B6
00003CAA 103C 00E0                  		move.b	#$E0,d0
00003CAE 6100 D922                  		bsr.w	PlaySound_Special ; fade out music
00003CB2                            
00003CB2                            loc_37B6:
00003CB2 6100 DB60                  		bsr.w	ClearPLC
00003CB6 6100 E396                  		bsr.w	Pal_FadeFrom
00003CBA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003CBE 6B00                       		bmi.s	Level_ClrRam
00003CC0 46FC 2700                  		move	#$2700,sr
00003CC4 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00003CCE 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00003CD4 6100 D9A0                  		bsr.w	NemDec
00003CD8 46FC 2300                  		move	#$2300,sr
00003CDC 7000                       		moveq	#0,d0
00003CDE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003CE2 E948                       		lsl.w	#4,d0
00003CE4 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00003CEA 45F2 0000                  		lea	(a2,d0.w),a2
00003CEE 7000                       		moveq	#0,d0
00003CF0 1012                       		move.b	(a2),d0
00003CF2 6700                       		beq.s	loc_37FC
00003CF4 6100 DAC0                  		bsr.w	LoadPLC		; load level patterns
00003CF8                            
00003CF8                            loc_37FC:
00003CF8 7001                       		moveq	#1,d0
00003CFA 6100 DABA                  		bsr.w	LoadPLC		; load standard	patterns
00003CFE                            
00003CFE                            Level_ClrRam:
00003CFE 43F8 D000                  		lea	($FFFFD000).w,a1
00003D02 7000                       		moveq	#0,d0
00003D04 323C 07FF                  		move.w	#$7FF,d1
00003D08                            
00003D08                            Level_ClrObjRam:
00003D08 22C0                       		move.l	d0,(a1)+
00003D0A 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003D0E                            
00003D0E 43F8 F628                  		lea	($FFFFF628).w,a1
00003D12 7000                       		moveq	#0,d0
00003D14 323C 0015                  		move.w	#$15,d1
00003D18                            
00003D18                            Level_ClrVars:
00003D18 22C0                       		move.l	d0,(a1)+
00003D1A 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003D1E                            
00003D1E 43F8 F700                  		lea	($FFFFF700).w,a1
00003D22 7000                       		moveq	#0,d0
00003D24 323C 003F                  		move.w	#$3F,d1
00003D28                            
00003D28                            Level_ClrVars2:
00003D28 22C0                       		move.l	d0,(a1)+
00003D2A 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003D2E                            
00003D2E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003D32 7000                       		moveq	#0,d0
00003D34 323C 0047                  		move.w	#$47,d1
00003D38                            
00003D38                            Level_ClrVars3:
00003D38 22C0                       		move.l	d0,(a1)+
00003D3A 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003D3E                            
00003D3E 46FC 2700                  		move	#$2700,sr
00003D42 6100 D7B6                  		bsr.w	ClearScreen
00003D46 4DF9 00C0 0004             		lea	($C00004).l,a6
00003D4C 3CBC 8B03                  		move.w	#$8B03,(a6)
00003D50 3CBC 8230                  		move.w	#$8230,(a6)
00003D54 3CBC 8407                  		move.w	#$8407,(a6)
00003D58 3CBC 857C                  		move.w	#$857C,(a6)
00003D5C 3CBC 9001                  		move.w	#$9001,(a6)
00003D60 3CBC 8004                  		move.w	#$8004,(a6)
00003D64 3CBC 8720                  		move.w	#$8720,(a6)
00003D68 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003D6E 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003D72 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003D78 6600                       		bne.s	Level_LoadPal	; if not, branch
00003D7A 3CBC 8014                  		move.w	#$8014,(a6)
00003D7E 7000                       		moveq	#0,d0
00003D80 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003D84 D040                       		add.w	d0,d0
00003D86 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00003D8C 3031 0000                  		move.w	(a1,d0.w),d0
00003D90 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003D94 31C0 F648                  		move.w	d0,($FFFFF648).w
00003D98 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00003D9C 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00003DA0 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
00003DA4 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
00003DAA 6000 0000                  		bra.w	Level_LoadPal
00003DAE                            Player_Palette:
00003DAE                            		; normal, lz, sbz, blank
00003DAE 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
00003DB6                            		
00003DB6 0015 0016 0017 0000        		dc.w	21,22,23,0 ; Pal_Gronic 
00003DBE 0018 0016 0017 0000        		dc.w	24,22,23,0 ; Pal_Anakama 
00003DC6                            		; add more player palettes
00003DC6                            Level_LoadPal:
00003DC6 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00003DCC 46FC 2300                  		move	#$2300,sr
00003DD0                            
00003DD0 7200                       		moveq	#0,d1
00003DD2 1238 FFE8                  		move.b	(v_character),d1
00003DD6 D241                       		add.w	d1,d1
00003DD8 D241                       		add.w	d1,d1
00003DDA D241                       		add.w	d1,d1
00003DDC 303B 10D0                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
00003DE0                            		
00003DE0 6100 E532                  		bsr.w	PalLoad2	; load Sonic's pallet line
00003DE4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003DEA 6600                       		bne.s	Level_GetBgm	; if not, branch
00003DEC 303B 10C2                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
00003DF0 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
00003DF6 6600                       		bne.s	Level_WaterPal	; if not, branch
00003DF8 303B 10B8                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
00003DFC                            
00003DFC                            Level_WaterPal:
00003DFC 6100 E52E                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
00003E00 4A38 FE30                  		tst.b	($FFFFFE30).w
00003E04 6700                       		beq.s	Level_GetBgm
00003E06 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00003E0C                            
00003E0C                            ; NineKode begins here - How to play different songs on different acts
00003E0C                             
00003E0C                            Level_GetBgm:
00003E0C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003E10 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00003E14 7000                       		moveq	#0,d0
00003E16 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003E1A                             
00003E1A 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00003E20 6600                       		bne.s	Level_GetBgm2	; if not, branch
00003E22 43F9 0000 3C84             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00003E28 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E2A                             
00003E2A                            Level_GetBgm2:
00003E2A 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00003E30 6600                       		bne.s	Level_GetBgm3	; if not, branch
00003E32 43F9 0000 3C8C             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00003E38 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E3A                             
00003E3A                            Level_GetBgm3:
00003E3A 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00003E40 6600                       		bne.s	Level_GetBgm4	; if not, branch
00003E42 43F9 0000 3C92             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00003E48 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00003E4A                             
00003E4A                            Level_GetBgm4:
00003E4A 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00003E50 6600                       		bne.s	Level_PlayBgm	; if not, branch
00003E52 43F9 0000 3C98             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00003E58                             
00003E58                            Level_PlayBgm:
00003E58 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
00003E5C 6100 D76E                  		bsr.w	PlaySound	; play music
00003E60 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003E66                             
00003E66                            ; NineKode ends here
00003E66                            
00003E66                            Level_TtlCard:
00003E66 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00003E6C 6100 EE5E                  		bsr.w	DelayProgram
00003E70 4EB9 0000 0000             		jsr	ObjectsLoad
00003E76 4EB9 0000 0000             		jsr	BuildSprites
00003E7C 6100 D9A4                  		bsr.w	RunPLC_RAM
00003E80 3038 D108                  		move.w	($FFFFD108).w,d0
00003E84 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003E88 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003E8A 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
00003E8E 66D6                       		bne.s	Level_TtlCard	; if yes, branch
00003E90 4EB9 0000 0000             		jsr	Hud_Base
00003E96                            
00003E96                            loc_3946:
00003E96 7003                       		moveq	#3,d0
00003E98 6100 E45E                  		bsr.w	PalLoad1	; load Sonic's pallet line
00003E9C 6100 0000                  		bsr.w	LevelSizeLoad
00003EA0 6100 0000                  		bsr.w	DeformBgLayer
00003EA4 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003EAA 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
00003EAE 6100 0000                  		bsr.w	LoadTilesFromStart
00003EB2 4EB9 0000 0000             		jsr	FloorLog_Unk
00003EB8 6100 0000                  		bsr.w	ColIndexLoad
00003EBC 6100 0000                  		bsr.w	LZWaterEffects
00003EC0 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003EC6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003ECA 6B00                       		bmi.s	Level_ChkDebug
00003ECC 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003ED2                            
00003ED2                            Level_ChkDebug:
00003ED2 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003ED6 6700                       		beq.s	Level_ChkWater	; if not, branch
00003ED8 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00003EDE 6700                       		beq.s	Level_ChkWater	; if not, branch
00003EE0 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003EE6                            
00003EE6                            Level_ChkWater:
00003EE6 31FC 0000 F602             		move.w	#0,($FFFFF602).w
00003EEC 31FC 0000 F604             		move.w	#0,($FFFFF604).w
00003EF2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00003EF8 6600                       		bne.s	Level_LoadObj	; if not, branch
00003EFA 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
00003F00 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00003F06 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
00003F0C 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00003F12                            
00003F12                            Level_LoadObj:
00003F12 4EB9 0000 0000             		jsr	ObjPosLoad
00003F18 4EB9 0000 0000             		jsr	ObjectsLoad
00003F1E 4EB9 0000 0000             		jsr	BuildSprites
00003F24 7000                       		moveq	#0,d0
00003F26 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00003F2A 6600                       		bne.s	loc_39E8	; if yes, branch
00003F2C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003F30 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003F34 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00003F38                            
00003F38                            loc_39E8:
00003F38 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
00003F3C 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
00003F40 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00003F44 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00003F48                            		; move.b	d0,($FFFFFE2F).w
00003F48 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
00003F4E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003F52 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003F56 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003F5A 6100 0000                  		bsr.w	OscillateNumInit
00003F5E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003F64 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003F6A 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003F70 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003F76 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003F7C 7000                       		moveq	#0,d0
00003F7E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003F82 E548                       		lsl.w	#2,d0
00003F84 2271 0000                  		movea.l	(a1,d0.w),a1
00003F88 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003F8C 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003F8E 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003F94 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003F98 5340                       		subq.w	#1,d0
00003F9A E548                       		lsl.w	#2,d0
00003F9C 2271 0000                  		movea.l	(a1,d0.w),a1
00003FA0                            
00003FA0                            Level_Demo:
00003FA0 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003FA6 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003FAA 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003FB0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003FB4 6A00                       		bpl.s	Level_ChkWaterPal
00003FB6 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003FBC 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003FC2 6600                       		bne.s	Level_ChkWaterPal
00003FC4 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003FCA                            
00003FCA                            Level_ChkWaterPal:
00003FCA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003FD0 6600                       		bne.s	Level_Delay	; if not, branch
00003FD2 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003FD4 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003FDA 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003FDC 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003FDE                            
00003FDE                            Level_WaterPal2:
00003FDE 6100 E368                  		bsr.w	PalLoad4_Water
00003FE2                            
00003FE2                            Level_Delay:
00003FE2 323C 0003                  		move.w	#3,d1
00003FE6                            
00003FE6                            Level_DelayLoop:
00003FE6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003FEC 6100 ECDE                  		bsr.w	DelayProgram
00003FF0 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003FF4                            
00003FF4 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003FFA 6100 DFB2                  		bsr.w	Pal_FadeTo2
00003FFE 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004002 6B00                       		bmi.s	Level_ClrCardArt
00004004 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00004008 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000400C 5838 D124                  		addq.b	#4,($FFFFD124).w
00004010 5838 D164                  		addq.b	#4,($FFFFD164).w
00004014 6000                       		bra.s	Level_StartGame
00004016                            ; ===========================================================================
00004016                            
00004016                            Level_ClrCardArt:
00004016 7002                       		moveq	#2,d0
00004018 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load explosion patterns
0000401E 7000                       		moveq	#0,d0
00004020 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004024 0640 0015                  		addi.w	#$15,d0
00004028 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
0000402E                            
0000402E                            Level_StartGame:
0000402E 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004034                            
00004034                            ; ---------------------------------------------------------------------------
00004034                            ; Main level loop (when	all title card and loading sequences are finished)
00004034                            ; ---------------------------------------------------------------------------
00004034                            
00004034                            Level_MainLoop:
00004034 6100 D5A8                  		bsr.w	PauseGame
00004038 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
0000403E 6100 EC8C                  		bsr.w	DelayProgram
00004042 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004046 6100 0000                  		bsr.w	MoveSonicInDemo
0000404A 6100 0000                  		bsr.w	LZWaterEffects
0000404E 4EB9 0000 0000             		jsr	ObjectsLoad
00004054 4A78 FE08                  		tst.w	($FFFFFE08).w
00004058 6600                       		bne.s	loc_3B10
0000405A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004060 6400                       		bcc.s	loc_3B14
00004062                            
00004062                            loc_3B10:
00004062 6100 0000                  		bsr.w	DeformBgLayer
00004066                            
00004066                            loc_3B14:
00004066 4EB9 0000 0000             		jsr	BuildSprites
0000406C 4EB9 0000 0000             		jsr	ObjPosLoad
00004072 6100 DAFE                  		bsr.w	PalCycle_Load
00004076 6100 D7AA                  		bsr.w	RunPLC_RAM
0000407A 6100 0000                  		bsr.w	OscillateNumDo
0000407E 6100 0000                  		bsr.w	ChangeRingFrame
00004082 6100 0000                  		bsr.w	SignpostArtLoad
00004086 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000408C 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
0000408E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004092 6600 FC0A                  		bne.w	Level		; if yes, branch
00004096 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000409C 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000040A0 4E75                       		rts	
000040A2                            ; ===========================================================================
000040A2                            
000040A2                            Level_ChkDemo:				; XREF: Level_MainLoop
000040A2 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000040A6 6600                       		bne.s	Level_EndDemo	; if yes, branch
000040A8 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000040AC 6700                       		beq.s	Level_EndDemo	; if not, branch
000040AE 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000040B4 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000040B8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000040BE 4E75                       		rts	
000040C0                            ; ===========================================================================
000040C0                            
000040C0                            Level_EndDemo:				; XREF: Level_ChkDemo
000040C0 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000040C6 6600                       		bne.s	loc_3B88	; if not, branch
000040C8 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000040CE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000040D2 6A00                       		bpl.s	loc_3B88	; if yes, branch
000040D4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000040DA                            
000040DA                            loc_3B88:
000040DA 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000040E0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000040E6 4278 F794                  		clr.w	($FFFFF794).w
000040EA                            
000040EA                            loc_3B98:
000040EA 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000040F0 6100 EBDA                  		bsr.w	DelayProgram
000040F4 6100 0000                  		bsr.w	MoveSonicInDemo
000040F8 4EB9 0000 0000             		jsr	ObjectsLoad
000040FE 4EB9 0000 0000             		jsr	BuildSprites
00004104 4EB9 0000 0000             		jsr	ObjPosLoad
0000410A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000410E 6A00                       		bpl.s	loc_3BC8
00004110 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004116 6100 DF56                  		bsr.w	Pal_FadeOut
0000411A                            
0000411A                            loc_3BC8:
0000411A 4A78 F614                  		tst.w	($FFFFF614).w
0000411E 66CA                       		bne.s	loc_3B98
00004120 4E75                       		rts	
00004122                            ; ===========================================================================
00004122                            ; ---------------------------------------------------------------------------
00004122                            ; Subroutine to	do special water effects in Labyrinth Zone
00004122                            ; ---------------------------------------------------------------------------
00004122                            
00004122                            LZWaterEffects:				; XREF: Level
00004122 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00004128 6600                       		bne.s	locret_3C28	; if not, branch
0000412A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004130 6400                       		bcc.s	LZMoveWater
00004132 6100 0000                  		bsr.w	LZWindTunnels
00004136 6100 0000                  		bsr.w	LZWaterSlides
0000413A 6100 0000                  		bsr.w	LZDynamicWater
0000413E                            
0000413E                            LZMoveWater:
0000413E 4238 F64E                  		clr.b	($FFFFF64E).w
00004142 7000                       		moveq	#0,d0
00004144 1038 FE60                  		move.b	($FFFFFE60).w,d0
00004148 E248                       		lsr.w	#1,d0
0000414A D078 F648                  		add.w	($FFFFF648).w,d0
0000414E 31C0 F646                  		move.w	d0,($FFFFF646).w
00004152 3038 F646                  		move.w	($FFFFF646).w,d0
00004156 9078 F704                  		sub.w	($FFFFF704).w,d0
0000415A 6400                       		bcc.s	loc_3C1A
0000415C 4A40                       		tst.w	d0
0000415E 6A00                       		bpl.s	loc_3C1A
00004160 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004166 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000416C                            
0000416C                            loc_3C1A:
0000416C 0C40 00DF                  		cmpi.w	#$DF,d0
00004170 6500                       		bcs.s	loc_3C24
00004172 303C 00DF                  		move.w	#$DF,d0
00004176                            
00004176                            loc_3C24:
00004176 11C0 F625                  		move.b	d0,($FFFFF625).w
0000417A                            
0000417A                            locret_3C28:
0000417A 4E75                       		rts	
0000417C                            ; ===========================================================================
0000417C                            ; ---------------------------------------------------------------------------
0000417C                            ; Labyrinth default water heights
0000417C                            ; ---------------------------------------------------------------------------
0000417C                            WaterHeight:	incbin	misc\lz_heigh.bin
00004184                            		even
00004184                            ; ===========================================================================
00004184                            
00004184                            ; ---------------------------------------------------------------------------
00004184                            ; Labyrinth dynamic water routines
00004184                            ; ---------------------------------------------------------------------------
00004184                            
00004184                            LZDynamicWater:				; XREF: LZWaterEffects
00004184 7000                       		moveq	#0,d0
00004186 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000418A D040                       		add.w	d0,d0
0000418C 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004190 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004194 7200                       		moveq	#0,d1
00004196 1238 F64C                  		move.b	($FFFFF64C).w,d1
0000419A 3038 F64A                  		move.w	($FFFFF64A).w,d0
0000419E 9078 F648                  		sub.w	($FFFFF648).w,d0
000041A2 6700                       		beq.s	locret_3C5A
000041A4 6400                       		bcc.s	loc_3C56
000041A6 4441                       		neg.w	d1
000041A8                            
000041A8                            loc_3C56:
000041A8 D378 F648                  		add.w	d1,($FFFFF648).w
000041AC                            
000041AC                            locret_3C5A:
000041AC 4E75                       		rts	
000041AE                            ; ===========================================================================
000041AE 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000041B0 0000                       		dc.w DynWater_LZ2-DynWater_Index
000041B2 0000                       		dc.w DynWater_LZ3-DynWater_Index
000041B4 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000041B6                            ; ===========================================================================
000041B6                            
000041B6                            DynWater_LZ1:				; XREF: DynWater_Index
000041B6 3038 F700                  		move.w	($FFFFF700).w,d0
000041BA 1438 F64D                  		move.b	($FFFFF64D).w,d2
000041BE 6600                       		bne.s	loc_3CD0
000041C0 323C 00B8                  		move.w	#$B8,d1
000041C4 0C40 0600                  		cmpi.w	#$600,d0
000041C8 6500                       		bcs.s	loc_3CB4
000041CA 323C 0108                  		move.w	#$108,d1
000041CE 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000041D4 6500                       		bcs.s	loc_3CBA
000041D6 0C40 0C00                  		cmpi.w	#$C00,d0
000041DA 6500                       		bcs.s	loc_3CB4
000041DC 323C 0318                  		move.w	#$318,d1
000041E0 0C40 1080                  		cmpi.w	#$1080,d0
000041E4 6500                       		bcs.s	loc_3CB4
000041E6 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000041EC 323C 05C8                  		move.w	#$5C8,d1
000041F0 0C40 1380                  		cmpi.w	#$1380,d0
000041F4 6500                       		bcs.s	loc_3CB4
000041F6 323C 03A8                  		move.w	#$3A8,d1
000041FA B278 F648                  		cmp.w	($FFFFF648).w,d1
000041FE 6600                       		bne.s	loc_3CB4
00004200 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004206                            
00004206                            loc_3CB4:
00004206 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000420A 4E75                       		rts	
0000420C                            ; ===========================================================================
0000420C                            
0000420C                            loc_3CBA:				; XREF: DynWater_LZ1
0000420C 0C40 0C80                  		cmpi.w	#$C80,d0
00004210 65F4                       		bcs.s	loc_3CB4
00004212 323C 00E8                  		move.w	#$E8,d1
00004216 0C40 1500                  		cmpi.w	#$1500,d0
0000421A 65EA                       		bcs.s	loc_3CB4
0000421C 323C 0108                  		move.w	#$108,d1
00004220 60E4                       		bra.s	loc_3CB4
00004222                            ; ===========================================================================
00004222                            
00004222                            loc_3CD0:				; XREF: DynWater_LZ1
00004222 5302                       		subq.b	#1,d2
00004224 6600                       		bne.s	locret_3CF4
00004226 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
0000422C 6400                       		bcc.s	locret_3CF4
0000422E 323C 03A8                  		move.w	#$3A8,d1
00004232 0C40 1300                  		cmpi.w	#$1300,d0
00004236 6500                       		bcs.s	loc_3CF0
00004238 323C 0108                  		move.w	#$108,d1
0000423C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004242                            
00004242                            loc_3CF0:
00004242 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004246                            
00004246                            locret_3CF4:
00004246 4E75                       		rts	
00004248                            ; ===========================================================================
00004248                            
00004248                            DynWater_LZ2:				; XREF: DynWater_Index
00004248 3038 F700                  		move.w	($FFFFF700).w,d0
0000424C 323C 0328                  		move.w	#$328,d1
00004250 0C40 0500                  		cmpi.w	#$500,d0
00004254 6500                       		bcs.s	loc_3D12
00004256 323C 03C8                  		move.w	#$3C8,d1
0000425A 0C40 0B00                  		cmpi.w	#$B00,d0
0000425E 6500                       		bcs.s	loc_3D12
00004260 323C 0428                  		move.w	#$428,d1
00004264                            
00004264                            loc_3D12:
00004264 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004268 4E75                       		rts	
0000426A                            ; ===========================================================================
0000426A                            
0000426A                            DynWater_LZ3:				; XREF: DynWater_Index
0000426A 3038 F700                  		move.w	($FFFFF700).w,d0
0000426E 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004272 6600                       		bne.s	loc_3D5E
00004274 323C 0500                  		move.w	#$500,d1
00004278 0C40 0600                  		cmpi.w	#$600,d0
0000427C 6500                       		bcs.s	loc_3D54
0000427E 0C40 1B00                  		cmpi.w	#$1B00,d0
00004282 6500                       		bcs.s	loc_3D54
00004284 323C 0850                  		move.w	#$850,d1
00004288                            
00004288                            loc_3D54:
00004288 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000428C 31C1 F648                  		move.w	d1,($FFFFF648).w
00004290 4E75                       		rts	
00004292                            ; ===========================================================================
00004292                            
00004292                            loc_3D5E:				; XREF: DynWater_LZ3
00004292 5302                       		subq.b	#1,d2
00004294 6600                       		bne.s	loc_3DA8
00004296 323C 04C8                  		move.w	#$4C8,d1
0000429A 0C40 0770                  		cmpi.w	#$770,d0
0000429E 6500                       		bcs.s	loc_3DA2
000042A0 323C 0308                  		move.w	#$308,d1
000042A4 0C40 1400                  		cmpi.w	#$1400,d0
000042A8 6500                       		bcs.s	loc_3DA2
000042AA 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
000042B0 6700                       		beq.s	loc_3D8E
000042B2 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
000042B8 6400                       		bcc.s	loc_3D8E
000042BA 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
000042C0 6400                       		bcc.s	loc_3DA2
000042C2                            
000042C2                            loc_3D8E:
000042C2 323C 0508                  		move.w	#$508,d1
000042C6 31C1 F648                  		move.w	d1,($FFFFF648).w
000042CA 0C40 1770                  		cmpi.w	#$1770,d0
000042CE 6500                       		bcs.s	loc_3DA2
000042D0 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
000042D6                            
000042D6                            loc_3DA2:
000042D6 31C1 F64A                  		move.w	d1,($FFFFF64A).w
000042DA 4E75                       		rts	
000042DC                            ; ===========================================================================
000042DC                            
000042DC                            loc_3DA8:
000042DC 5302                       		subq.b	#1,d2
000042DE 6600                       		bne.s	loc_3DD2
000042E0 323C 0508                  		move.w	#$508,d1
000042E4 0C40 1860                  		cmpi.w	#$1860,d0
000042E8 6500                       		bcs.s	loc_3DCC
000042EA 323C 0188                  		move.w	#$188,d1
000042EE 0C40 1AF0                  		cmpi.w	#$1AF0,d0
000042F2 6400                       		bcc.s	loc_3DC6
000042F4 B278 F648                  		cmp.w	($FFFFF648).w,d1
000042F8 6600                       		bne.s	loc_3DCC
000042FA                            
000042FA                            loc_3DC6:
000042FA 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004300                            
00004300                            loc_3DCC:
00004300 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004304 4E75                       		rts	
00004306                            ; ===========================================================================
00004306                            
00004306                            loc_3DD2:
00004306 5302                       		subq.b	#1,d2
00004308 6600                       		bne.s	loc_3E0E
0000430A 323C 0188                  		move.w	#$188,d1
0000430E 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004312 6500                       		bcs.s	loc_3E04
00004314 323C 0900                  		move.w	#$900,d1
00004318 0C40 1BC0                  		cmpi.w	#$1BC0,d0
0000431C 6500                       		bcs.s	loc_3E04
0000431E 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004324 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
0000432A 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004330 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004336 4E75                       		rts	
00004338                            ; ===========================================================================
00004338                            
00004338                            loc_3E04:
00004338 31C1 F64A                  		move.w	d1,($FFFFF64A).w
0000433C 31C1 F648                  		move.w	d1,($FFFFF648).w
00004340 4E75                       		rts	
00004342                            ; ===========================================================================
00004342                            
00004342                            loc_3E0E:
00004342 0C40 1E00                  		cmpi.w	#$1E00,d0
00004346 6500                       		bcs.s	locret_3E1A
00004348 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
0000434E                            
0000434E                            locret_3E1A:
0000434E 4E75                       		rts	
00004350                            ; ===========================================================================
00004350                            
00004350                            DynWater_SBZ3:				; XREF: DynWater_Index
00004350 323C 0228                  		move.w	#$228,d1
00004354 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
0000435A 6500                       		bcs.s	loc_3E2C
0000435C 323C 04C8                  		move.w	#$4C8,d1
00004360                            
00004360                            loc_3E2C:
00004360 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004364 4E75                       		rts
00004366                            
00004366                            ; ---------------------------------------------------------------------------
00004366                            ; Labyrinth Zone "wind tunnels"	subroutine
00004366                            ; ---------------------------------------------------------------------------
00004366                            
00004366                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004366                            
00004366                            
00004366                            LZWindTunnels:				; XREF: LZWaterEffects
00004366 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000436A 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
0000436E 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004374 7000                       		moveq	#0,d0
00004376 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000437A E748                       		lsl.w	#3,d0
0000437C D4C0                       		adda.w	d0,a2
0000437E 7200                       		moveq	#0,d1
00004380 4A38 FE11                  		tst.b	($FFFFFE11).w
00004384 6600                       		bne.s	loc_3E56
00004386 7201                       		moveq	#1,d1
00004388 514A                       		subq.w	#8,a2
0000438A                            
0000438A                            loc_3E56:
0000438A 43F8 D000                  		lea	($FFFFD000).w,a1
0000438E                            
0000438E                            LZWind_Loop:
0000438E 3029 0008                  		move.w	8(a1),d0
00004392 B052                       		cmp.w	(a2),d0
00004394 6500 0000                  		bcs.w	loc_3EF4
00004398 B06A 0004                  		cmp.w	4(a2),d0
0000439C 6400 0000                  		bcc.w	loc_3EF4
000043A0 3429 000C                  		move.w	$C(a1),d2
000043A4 B46A 0002                  		cmp.w	2(a2),d2
000043A8 6500                       		bcs.s	loc_3EF4
000043AA B46A 0006                  		cmp.w	6(a2),d2
000043AE 6400                       		bcc.s	loc_3EF4
000043B0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000043B4 0200 003F                  		andi.b	#$3F,d0
000043B8 6600                       		bne.s	loc_3E90
000043BA 303C 00D0                  		move.w	#$D0,d0
000043BE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rushing water sound
000043C4                            
000043C4                            loc_3E90:
000043C4 4A38 F7C9                  		tst.b	($FFFFF7C9).w
000043C8 6600 0000                  		bne.w	locret_3F0A
000043CC 0C29 0004 0024             		cmpi.b	#4,$24(a1)
000043D2 6400                       		bcc.s	loc_3F06
000043D4 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
000043DA 0440 0080                  		subi.w	#$80,d0
000043DE B052                       		cmp.w	(a2),d0
000043E0 6400                       		bcc.s	LZWind_Move
000043E2 7002                       		moveq	#2,d0
000043E4 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
000043EA 6600                       		bne.s	loc_3EBA
000043EC 4440                       		neg.w	d0
000043EE                            
000043EE                            loc_3EBA:
000043EE D169 000C                  		add.w	d0,$C(a1)
000043F2                            
000043F2                            LZWind_Move:
000043F2 5869 0008                  		addq.w	#4,8(a1)
000043F6 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
000043FC 337C 0000 0012             		move.w	#0,$12(a1)
00004402 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004408 08E9 0001 0022             		bset	#1,$22(a1)
0000440E 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004414 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004416 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0000441A                            
0000441A                            LZWind_MoveDown:
0000441A 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004420 6700                       		beq.s	locret_3EF2	; if not, branch
00004422 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004426                            
00004426                            locret_3EF2:
00004426 4E75                       		rts	
00004428                            ; ===========================================================================
00004428                            
00004428                            loc_3EF4:				; XREF: LZWindTunnels
00004428 504A                       		addq.w	#8,a2
0000442A 51C9 FF62                  		dbf	d1,LZWind_Loop
0000442E 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004432 6700                       		beq.s	locret_3F0A
00004434 137C 0000 001C             		move.b	#0,$1C(a1)
0000443A                            
0000443A                            loc_3F06:
0000443A 4238 F7C7                  		clr.b	($FFFFF7C7).w
0000443E                            
0000443E                            locret_3F0A:
0000443E 4E75                       		rts	
00004440                            ; End of function LZWindTunnels
00004440                            
00004440                            ; ===========================================================================
00004440 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004448 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
0000445A 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004468                            					; XREF: LZWindTunnels
00004468                            		even
00004468                            
00004468                            ; ---------------------------------------------------------------------------
00004468                            ; Labyrinth Zone water slide subroutine
00004468                            ; ---------------------------------------------------------------------------
00004468                            
00004468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004468                            
00004468                            
00004468                            LZWaterSlides:				; XREF: LZWaterEffects
00004468 43F8 D000                  		lea	($FFFFD000).w,a1
0000446C 0829 0001 0022             		btst	#1,$22(a1)
00004472 6600                       		bne.s	loc_3F6A
00004474 3029 000C                  		move.w	$C(a1),d0
00004478 E248                       		lsr.w	#1,d0
0000447A 0240 0380                  		andi.w	#$380,d0
0000447E 1229 0008                  		move.b	8(a1),d1
00004482 0241 007F                  		andi.w	#$7F,d1
00004486 D041                       		add.w	d1,d0
00004488 45F8 A400                  		lea	($FFFFA400).w,a2
0000448C 1032 0000                  		move.b	(a2,d0.w),d0
00004490 45FA 0000                  		lea	byte_3FCF(pc),a2
00004494 7206                       		moveq	#6,d1
00004496                            
00004496                            loc_3F62:
00004496 B022                       		cmp.b	-(a2),d0
00004498 57C9 FFFC                  		dbeq	d1,loc_3F62
0000449C 6700                       		beq.s	LZSlide_Move
0000449E                            
0000449E                            loc_3F6A:
0000449E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000044A2 6700                       		beq.s	locret_3F7A
000044A4 337C 0005 003E             		move.w	#5,$3E(a1)
000044AA 4238 F7CA                  		clr.b	($FFFFF7CA).w
000044AE                            
000044AE                            locret_3F7A:
000044AE 4E75                       		rts	
000044B0                            ; ===========================================================================
000044B0                            
000044B0                            LZSlide_Move:				; XREF: LZWaterSlides
000044B0 0C41 0003                  		cmpi.w	#3,d1
000044B4 6400                       		bcc.s	loc_3F84
000044B6 4E71                       		nop	
000044B8                            
000044B8                            loc_3F84:
000044B8 08A9 0000 0022             		bclr	#0,$22(a1)
000044BE 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
000044C2 1340 0014                  		move.b	d0,$14(a1)
000044C6 6A00                       		bpl.s	loc_3F9A
000044C8 08E9 0000 0022             		bset	#0,$22(a1)
000044CE                            
000044CE                            loc_3F9A:
000044CE 4229 0015                  		clr.b	$15(a1)
000044D2 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
000044D8 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
000044DE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000044E2 0200 001F                  		andi.b	#$1F,d0
000044E6 6600                       		bne.s	locret_3FBE
000044E8 303C 00D0                  		move.w	#$D0,d0
000044EC 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play water sound
000044F2                            
000044F2                            locret_3FBE:
000044F2 4E75                       		rts	
000044F4                            ; End of function LZWaterSlides
000044F4                            
000044F4                            ; ===========================================================================
000044F4 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004503 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004504                            		even
00004504                            
00004504                            ; ---------------------------------------------------------------------------
00004504                            ; Subroutine to	move Sonic in demo mode
00004504                            ; ---------------------------------------------------------------------------
00004504                            
00004504                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004504                            
00004504                            
00004504                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004504 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004508 6600                       		bne.s	MoveDemo_On	; if yes, branch
0000450A 4E75                       		rts	
0000450C                            ; ===========================================================================
0000450C                            
0000450C                            ; This is an unused subroutine for recording a demo
0000450C                            
0000450C                            MoveDemo_Record:
0000450C 43F9 0008 0000             		lea	($80000).l,a1
00004512 3038 F790                  		move.w	($FFFFF790).w,d0
00004516 D2C0                       		adda.w	d0,a1
00004518 1038 F604                  		move.b	($FFFFF604).w,d0
0000451C B011                       		cmp.b	(a1),d0
0000451E 6600                       		bne.s	loc_3FFA
00004520 5229 0001                  		addq.b	#1,1(a1)
00004524 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
0000452A 6700                       		beq.s	loc_3FFA
0000452C 4E75                       		rts	
0000452E                            ; ===========================================================================
0000452E                            
0000452E                            loc_3FFA:				; XREF: MoveDemo_Record
0000452E 1340 0002                  		move.b	d0,2(a1)
00004532 137C 0000 0003             		move.b	#0,3(a1)
00004538 5478 F790                  		addq.w	#2,($FFFFF790).w
0000453C 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004542 4E75                       		rts	
00004544                            ; ===========================================================================
00004544                            
00004544                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004544 4A38 F604                  		tst.b	($FFFFF604).w
00004548 6A00                       		bpl.s	loc_4022
0000454A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000454E 6B00                       		bmi.s	loc_4022
00004550 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004556                            
00004556                            loc_4022:
00004556 43F9 0000 0000             		lea	(Demo_Index).l,a1
0000455C 7000                       		moveq	#0,d0
0000455E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004562 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004568 6600                       		bne.s	loc_4038
0000456A 7006                       		moveq	#6,d0
0000456C                            
0000456C                            loc_4038:
0000456C E548                       		lsl.w	#2,d0
0000456E 2271 0000                  		movea.l	(a1,d0.w),a1
00004572 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004576 6A00                       		bpl.s	loc_4056
00004578 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000457E 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004582 5340                       		subq.w	#1,d0
00004584 E548                       		lsl.w	#2,d0
00004586 2271 0000                  		movea.l	(a1,d0.w),a1
0000458A                            
0000458A                            loc_4056:
0000458A 3038 F790                  		move.w	($FFFFF790).w,d0
0000458E D2C0                       		adda.w	d0,a1
00004590 1011                       		move.b	(a1),d0
00004592 41F8 F604                  		lea	($FFFFF604).w,a0
00004596 1200                       		move.b	d0,d1
00004598 1410                       		move.b	(a0),d2
0000459A B500                       		eor.b	d2,d0
0000459C 10C1                       		move.b	d1,(a0)+
0000459E C001                       		and.b	d1,d0
000045A0 10C0                       		move.b	d0,(a0)+
000045A2 5338 F792                  		subq.b	#1,($FFFFF792).w
000045A6 6400                       		bcc.s	locret_407E
000045A8 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
000045AE 5478 F790                  		addq.w	#2,($FFFFF790).w
000045B2                            
000045B2                            locret_407E:
000045B2 4E75                       		rts	
000045B4                            ; End of function MoveSonicInDemo
000045B4                            
000045B4                            ; ===========================================================================
000045B4                            ; ---------------------------------------------------------------------------
000045B4                            ; Demo sequence	pointers
000045B4                            ; ---------------------------------------------------------------------------
000045B4                            Demo_Index:
000045B4                            	include "_inc\Demo pointers for intro.asm"
000045B4                            ; ---------------------------------------------------------------------------
000045B4                            ; Demo sequence	pointers
000045B4                            ; ---------------------------------------------------------------------------
000045B4 0000 0000                  	dc.l Demo_GHZ
000045B8 0000 0000                  	dc.l Demo_GHZ
000045BC 0000 0000                  	dc.l Demo_MZ
000045C0 0000 0000                  	dc.l Demo_MZ
000045C4 0000 0000                  	dc.l Demo_SYZ
000045C8 0000 0000                  	dc.l Demo_SYZ
000045CC 0000 0000                  	dc.l Demo_SS
000045D0 0000 0000                  	dc.l Demo_SS
000045D0 0000 0000                  	dc.l Demo_SS
000045D4                            
000045D4                            Demo_EndIndex:
000045D4                            	include "_inc\Demo pointers for ending.asm"
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            ; Demo (ending) sequence pointers
000045D4                            ; ---------------------------------------------------------------------------
000045D4 0000 0000                  	dc.l Demo_EndGHZ1
000045D8 0000 0000                  	dc.l Demo_EndMZ
000045DC 0000 0000                  	dc.l Demo_EndSYZ
000045E0 0000 0000                  	dc.l Demo_EndLZ
000045E4 0000 0000                  	dc.l Demo_EndSLZ
000045E8 0000 0000                  	dc.l Demo_EndSBZ1
000045EC 0000 0000                  	dc.l Demo_EndSBZ2
000045F0 0000 0000                  	dc.l Demo_EndGHZ2
000045F0 0000 0000                  	dc.l Demo_EndGHZ2
000045F4                            
000045F4 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004604 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004614 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004624                            		even
00004624                            
00004624                            ; ---------------------------------------------------------------------------
00004624                            ; Collision index loading subroutine
00004624                            ; ---------------------------------------------------------------------------
00004624                            
00004624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004624                            
00004624                            
00004624                            ColIndexLoad:				; XREF: Level
00004624 7000                       		moveq	#0,d0
00004626 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000462A E548                       		lsl.w	#2,d0
0000462C 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004632 4E75                       		rts	
00004634                            ; End of function ColIndexLoad
00004634                            
00004634                            ; ===========================================================================
00004634                            ; ---------------------------------------------------------------------------
00004634                            ; Collision index pointers
00004634                            ; ---------------------------------------------------------------------------
00004634                            ColPointers:
00004634                            	include "_inc\Collision index pointers.asm"
00004634                            ; ---------------------------------------------------------------------------
00004634                            ; Collision index pointers
00004634                            ; ---------------------------------------------------------------------------
00004634 0000 0000                  	dc.l Col_GHZ
00004638 0000 0000                  	dc.l Col_LZ
0000463C 0000 0000                  	dc.l Col_MZ
00004640 0000 0000                  	dc.l Col_SLZ
00004644 0000 0000                  	dc.l Col_SYZ
00004648 0000 0000                  	dc.l Col_SBZ
00004648 0000 0000                  	dc.l Col_SBZ
0000464C                            
0000464C                            ; ---------------------------------------------------------------------------
0000464C                            ; Oscillating number subroutine
0000464C                            ; ---------------------------------------------------------------------------
0000464C                            
0000464C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000464C                            
0000464C                            
0000464C                            OscillateNumInit:			; XREF: Level
0000464C 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004650 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004656 7220                       		moveq	#$20,d1
00004658                            
00004658                            Osc_Loop:
00004658 32DA                       		move.w	(a2)+,(a1)+
0000465A 51C9 FFFC                  		dbf	d1,Osc_Loop
0000465E 4E75                       		rts	
00004660                            ; End of function OscillateNumInit
00004660                            
00004660                            ; ===========================================================================
00004660 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004664 0000 0080                  		dc.w 0,	$80
00004668 0000 0080                  		dc.w 0,	$80
0000466C 0000 0080                  		dc.w 0,	$80
00004670 0000 0080                  		dc.w 0,	$80
00004674 0000 0080                  		dc.w 0,	$80
00004678 0000 0080                  		dc.w 0,	$80
0000467C 0000 0080                  		dc.w 0,	$80
00004680 0000 0080                  		dc.w 0,	$80
00004684 0000 50F0                  		dc.w 0,	$50F0
00004688 011E 2080                  		dc.w $11E, $2080
0000468C 00B4 3080                  		dc.w $B4, $3080
00004690 010E 5080                  		dc.w $10E, $5080
00004694 01C2 7080                  		dc.w $1C2, $7080
00004698 0276 0080                  		dc.w $276, $80
0000469C 0000 0080                  		dc.w 0,	$80
000046A0 0000                       		dc.w 0
000046A2                            		even
000046A2                            
000046A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000046A2                            
000046A2                            
000046A2                            OscillateNumDo:				; XREF: Level
000046A2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000046A8 6400                       		bcc.s	locret_41C4
000046AA 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
000046AE 45F9 0000 0000             		lea	(Osc_Data2).l,a2
000046B4 3619                       		move.w	(a1)+,d3
000046B6 720F                       		moveq	#$F,d1
000046B8                            
000046B8                            loc_4184:
000046B8 341A                       		move.w	(a2)+,d2
000046BA 381A                       		move.w	(a2)+,d4
000046BC 0303                       		btst	d1,d3
000046BE 6600                       		bne.s	loc_41A4
000046C0 3029 0002                  		move.w	2(a1),d0
000046C4 D042                       		add.w	d2,d0
000046C6 3340 0002                  		move.w	d0,2(a1)
000046CA D151                       		add.w	d0,0(a1)
000046CC B811                       		cmp.b	0(a1),d4
000046CE 6200                       		bhi.s	loc_41BA
000046D0 03C3                       		bset	d1,d3
000046D2 6000                       		bra.s	loc_41BA
000046D4                            ; ===========================================================================
000046D4                            
000046D4                            loc_41A4:				; XREF: OscillateNumDo
000046D4 3029 0002                  		move.w	2(a1),d0
000046D8 9042                       		sub.w	d2,d0
000046DA 3340 0002                  		move.w	d0,2(a1)
000046DE D151                       		add.w	d0,0(a1)
000046E0 B811                       		cmp.b	0(a1),d4
000046E2 6300                       		bls.s	loc_41BA
000046E4 0383                       		bclr	d1,d3
000046E6                            
000046E6                            loc_41BA:
000046E6 5849                       		addq.w	#4,a1
000046E8 51C9 FFCE                  		dbf	d1,loc_4184
000046EC 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000046F0                            
000046F0                            locret_41C4:
000046F0 4E75                       		rts	
000046F2                            ; End of function OscillateNumDo
000046F2                            
000046F2                            ; ===========================================================================
000046F2 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000046F6 0002 0018                  		dc.w 2,	$18
000046FA 0002 0020                  		dc.w 2,	$20
000046FE 0002 0030                  		dc.w 2,	$30
00004702 0004 0020                  		dc.w 4,	$20
00004706 0008 0008                  		dc.w 8,	8
0000470A 0008 0040                  		dc.w 8,	$40
0000470E 0004 0040                  		dc.w 4,	$40
00004712 0002 0050                  		dc.w 2,	$50
00004716 0002 0050                  		dc.w 2,	$50
0000471A 0002 0020                  		dc.w 2,	$20
0000471E 0003 0030                  		dc.w 3,	$30
00004722 0005 0050                  		dc.w 5,	$50
00004726 0007 0070                  		dc.w 7,	$70
0000472A 0002 0010                  		dc.w 2,	$10
0000472E 0002 0010                  		dc.w 2,	$10
00004732                            		even
00004732                            
00004732                            ; ---------------------------------------------------------------------------
00004732                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004732                            ; ---------------------------------------------------------------------------
00004732                            
00004732                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004732                            
00004732                            
00004732                            ChangeRingFrame:			; XREF: Level
00004732 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004736 6A00                       		bpl.s	loc_421C
00004738 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000473E 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004742 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004748                            
00004748                            loc_421C:
00004748 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0000474C 6A00                       		bpl.s	loc_4232
0000474E 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004754 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004758 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000475E                            
0000475E                            loc_4232:
0000475E 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004762 6A00                       		bpl.s	loc_4250
00004764 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0000476A 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000476E 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004774 6500                       		bcs.s	loc_4250
00004776 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
0000477C                            
0000477C                            loc_4250:
0000477C 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004780 6700                       		beq.s	locret_4272
00004782 7000                       		moveq	#0,d0
00004784 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004788 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
0000478C 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004790 EF58                       		rol.w	#7,d0
00004792 0240 0003                  		andi.w	#3,d0
00004796 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
0000479A 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000479E                            
0000479E                            locret_4272:
0000479E 4E75                       		rts	
000047A0                            ; End of function ChangeRingFrame
000047A0                            
000047A0                            ; ---------------------------------------------------------------------------
000047A0                            ; End-of-act signpost pattern loading subroutine
000047A0                            ; ---------------------------------------------------------------------------
000047A0                            
000047A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000047A0                            
000047A0                            
000047A0                            SignpostArtLoad:			; XREF: Level
000047A0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000047A4 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
000047A8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
000047AE 6700                       		beq.s	Signpost_Exit	; if yes, branch
000047B0 3038 F700                  		move.w	($FFFFF700).w,d0
000047B4 3238 F72A                  		move.w	($FFFFF72A).w,d1
000047B8 0441 0100                  		subi.w	#$100,d1
000047BC B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
000047BE 6D00                       		blt.s	Signpost_Exit	; if not, branch
000047C0 4A38 FE1E                  		tst.b	($FFFFFE1E).w
000047C4 6700                       		beq.s	Signpost_Exit
000047C6 B278 F728                  		cmp.w	($FFFFF728).w,d1
000047CA 6700                       		beq.s	Signpost_Exit
000047CC 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
000047D0 7012                       		moveq	#$12,d0
000047D2 6000 D014                  		bra.w	LoadPLC2	; load signpost	patterns
000047D6                            ; ===========================================================================
000047D6                            
000047D6                            Signpost_Exit:
000047D6 4E75                       		rts	
000047D8                            ; End of function SignpostArtLoad
000047D8                            
000047D8                            ; ===========================================================================
000047D8                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004858                            Demo_MZ:	incbin	demodata\i_mz.bin
00004988                            Demo_SYZ:	incbin	demodata\i_syz.bin
00004A08                            Demo_SS:	incbin	demodata\i_ss.bin
00004B08                            ; ===========================================================================
00004B08                            
00004B08                            ; ---------------------------------------------------------------------------
00004B08                            ; Special Stage
00004B08                            ; ---------------------------------------------------------------------------
00004B08                            
00004B08                            SpecialStage:				; XREF: GameModeArray
00004B08 303C 00CA                  		move.w	#$CA,d0
00004B0C 6100 CAC4                  		bsr.w	PlaySound_Special ; play special stage entry sound
00004B10 6100 D666                  		bsr.w	Pal_MakeFlash
00004B14 46FC 2700                  		move	#$2700,sr
00004B18 4DF9 00C0 0004             		lea	($C00004).l,a6
00004B1E 3CBC 8B03                  		move.w	#$8B03,(a6)
00004B22 3CBC 8004                  		move.w	#$8004,(a6)
00004B26 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00004B2C 3CBC 9011                  		move.w	#$9011,(a6)
00004B30 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004B34 0200 00BF                  		andi.b	#$BF,d0
00004B38 33C0 00C0 0004             		move.w	d0,($C00004).l
00004B3E 6100 C9BA                  		bsr.w	ClearScreen
00004B42 46FC 2300                  		move	#$2300,sr
00004B46 4BF9 00C0 0004             		lea	($C00004).l,a5
00004B4C 3ABC 8F01                  		move.w	#$8F01,(a5)
00004B50 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004B56 3ABC 9780                  		move.w	#$9780,(a5)
00004B5A 2ABC 5000 0081             		move.l	#$50000081,(a5)
00004B60 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004B68                            
00004B68                            loc_463C:
00004B68 3215                       		move.w	(a5),d1
00004B6A 0801 0001                  		btst	#1,d1
00004B6E 66F8                       		bne.s	loc_463C
00004B70 3ABC 8F02                  		move.w	#$8F02,(a5)
00004B74 6100 0000                  		bsr.w	SS_BGLoad
00004B78 7014                       		moveq	#$14,d0
00004B7A 6100 CDA6                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004B7E 43F8 D000                  		lea	($FFFFD000).w,a1
00004B82 7000                       		moveq	#0,d0
00004B84 323C 07FF                  		move.w	#$7FF,d1
00004B88                            
00004B88                            SS_ClrObjRam:
00004B88 22C0                       		move.l	d0,(a1)+
00004B8A 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004B8E                            
00004B8E 43F8 F700                  		lea	($FFFFF700).w,a1
00004B92 7000                       		moveq	#0,d0
00004B94 323C 003F                  		move.w	#$3F,d1
00004B98                            
00004B98                            SS_ClrRam:
00004B98 22C0                       		move.l	d0,(a1)+
00004B9A 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004B9E                            
00004B9E 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004BA2 7000                       		moveq	#0,d0
00004BA4 323C 0027                  		move.w	#$27,d1
00004BA8                            
00004BA8                            SS_ClrRam2:
00004BA8 22C0                       		move.l	d0,(a1)+
00004BAA 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004BAE                            
00004BAE 43F8 AA00                  		lea	($FFFFAA00).w,a1
00004BB2 7000                       		moveq	#0,d0
00004BB4 323C 007F                  		move.w	#$7F,d1
00004BB8                            
00004BB8                            SS_ClrNemRam:
00004BB8 22C0                       		move.l	d0,(a1)+
00004BBA 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004BBE                            
00004BBE 4238 F64E                  		clr.b	($FFFFF64E).w
00004BC2 4278 FE02                  		clr.w	($FFFFFE02).w
00004BC6 700A                       		moveq	#$A,d0
00004BC8 6100 D72E                  		bsr.w	PalLoad1	; load special stage pallet
00004BCC 4EB9 0000 0000             		jsr	SS_Load
00004BD2 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
00004BDA 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
00004BE2 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
00004BE8 6100 0000                  		bsr.w	PalCycle_SS
00004BEC 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
00004BF0 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
00004BF6 303C 0089                  		move.w	#$89,d0
00004BFA 6100 C9D0                  		bsr.w	PlaySound	; play special stage BG	music
00004BFE 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004C04 43F9 0000 45B4             		lea	(Demo_Index).l,a1
00004C0A 7006                       		moveq	#6,d0
00004C0C E548                       		lsl.w	#2,d0
00004C0E 2271 0000                  		movea.l	(a1,d0.w),a1
00004C12 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00004C18 5338 F792                  		subq.b	#1,($FFFFF792).w
00004C1C 4278 FE20                  		clr.w	($FFFFFE20).w
00004C20 4238 FE1B                  		clr.b	($FFFFFE1B).w
00004C24 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00004C2A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00004C30 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004C34 6700                       		beq.s	SS_NoDebug	; if not, branch
00004C36 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004C3C 6700                       		beq.s	SS_NoDebug	; if not, branch
00004C3E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004C44                            
00004C44                            SS_NoDebug:
00004C44 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004C48 0000 0040                  		ori.b	#$40,d0
00004C4C 33C0 00C0 0004             		move.w	d0,($C00004).l
00004C52 6100 D478                  		bsr.w	Pal_MakeWhite
00004C56                            
00004C56                            ; ---------------------------------------------------------------------------
00004C56                            ; Main Special Stage loop
00004C56                            ; ---------------------------------------------------------------------------
00004C56                            
00004C56                            SS_MainLoop:
00004C56 6100 C986                  		bsr.w	PauseGame
00004C5A 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
00004C60 6100 E06A                  		bsr.w	DelayProgram
00004C64 6100 F89E                  		bsr.w	MoveSonicInDemo
00004C68 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004C6E 4EB9 0000 0000             		jsr	ObjectsLoad
00004C74 4EB9 0000 0000             		jsr	BuildSprites
00004C7A 4EB9 0000 0000             		jsr	SS_ShowLayout
00004C80 6100 0000                  		bsr.w	SS_BGAnimate
00004C84 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004C88 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004C8A 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004C8E 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00004C92                            
00004C92                            SS_ChkEnd:
00004C92 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004C98 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004C9C                            
00004C9C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004CA0 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004CA4 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004CAA 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
00004CB0 6500                       		bcs.s	SS_End		; if not, branch
00004CB2 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004CB6                            
00004CB6                            SS_End:
00004CB6 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004CBC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00004CC2 4278 F794                  		clr.w	($FFFFF794).w
00004CC6                            
00004CC6                            SS_EndLoop:
00004CC6 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004CCC 6100 DFFE                  		bsr.w	DelayProgram
00004CD0 6100 F832                  		bsr.w	MoveSonicInDemo
00004CD4 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004CDA 4EB9 0000 0000             		jsr	ObjectsLoad
00004CE0 4EB9 0000 0000             		jsr	BuildSprites
00004CE6 4EB9 0000 0000             		jsr	SS_ShowLayout
00004CEC 6100 0000                  		bsr.w	SS_BGAnimate
00004CF0 5378 F794                  		subq.w	#1,($FFFFF794).w
00004CF4 6A00                       		bpl.s	loc_47D4
00004CF6 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004CFC 6100 D49A                  		bsr.w	Pal_ToWhite
00004D00                            
00004D00                            loc_47D4:
00004D00 4A78 F614                  		tst.w	($FFFFF614).w
00004D04 66C0                       		bne.s	SS_EndLoop
00004D06                            
00004D06 46FC 2700                  		move	#$2700,sr
00004D0A 4DF9 00C0 0004             		lea	($C00004).l,a6
00004D10 3CBC 8230                  		move.w	#$8230,(a6)
00004D14 3CBC 8407                  		move.w	#$8407,(a6)
00004D18 3CBC 9001                  		move.w	#$9001,(a6)
00004D1C 6100 C7DC                  		bsr.w	ClearScreen
00004D20 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D2A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D30 6100 C944                  		bsr.w	NemDec
00004D34 4EB9 0000 0000             		jsr	Hud_Base
00004D3A 46FC 2300                  		move	#$2300,sr
00004D3E 7011                       		moveq	#$11,d0
00004D40 6100 D5D2                  		bsr.w	PalLoad2	; load results screen pallet
00004D44 7000                       		moveq	#0,d0
00004D46 6100 CAA0                  		bsr.w	LoadPLC2
00004D4A 701B                       		moveq	#$1B,d0
00004D4C 6100 CA68                  		bsr.w	LoadPLC		; load results screen patterns
00004D50 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004D56 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004D5C 3038 FE20                  		move.w	($FFFFFE20).w,d0
00004D60 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004D64 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004D68 303C 008E                  		move.w	#$8E,d0
00004D6C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play end-of-level music
00004D72 43F8 D000                  		lea	($FFFFD000).w,a1
00004D76 7000                       		moveq	#0,d0
00004D78 323C 07FF                  		move.w	#$7FF,d1
00004D7C                            
00004D7C                            SS_EndClrObjRam:
00004D7C 22C0                       		move.l	d0,(a1)+
00004D7E 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00004D82                            
00004D82 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004D88                            
00004D88                            SS_NormalExit:
00004D88 6100 C854                  		bsr.w	PauseGame
00004D8C 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00004D92 6100 DF38                  		bsr.w	DelayProgram
00004D96 4EB9 0000 0000             		jsr	ObjectsLoad
00004D9C 4EB9 0000 0000             		jsr	BuildSprites
00004DA2 6100 CA7E                  		bsr.w	RunPLC_RAM
00004DA6 4A78 FE02                  		tst.w	($FFFFFE02).w
00004DAA 67DC                       		beq.s	SS_NormalExit
00004DAC 4AB8 F680                  		tst.l	($FFFFF680).w
00004DB0 66D6                       		bne.s	SS_NormalExit
00004DB2 303C 00CA                  		move.w	#$CA,d0
00004DB6 6100 C81A                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004DBA 6100 D3BC                  		bsr.w	Pal_MakeFlash
00004DBE 4E75                       		rts	
00004DC0                            ; ===========================================================================
00004DC0                            
00004DC0                            SS_ToSegaScreen:
00004DC0 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004DC6 4E75                       		rts
00004DC8                            
00004DC8                            ; ---------------------------------------------------------------------------
00004DC8                            ; Special stage	background loading subroutine
00004DC8                            ; ---------------------------------------------------------------------------
00004DC8                            
00004DC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004DC8                            
00004DC8                            
00004DC8                            SS_BGLoad:				; XREF: SpecialStage
00004DC8 43F9 00FF 0000             		lea	($FF0000).l,a1
00004DCE 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
00004DD4 303C 4051                  		move.w	#$4051,d0
00004DD8 6100 CB7A                  		bsr.w	EniDec
00004DDC 263C 5000 0001             		move.l	#$50000001,d3
00004DE2 45F9 00FF 0080             		lea	($FF0080).l,a2
00004DE8 7E06                       		moveq	#6,d7
00004DEA                            
00004DEA                            loc_48BE:
00004DEA 2003                       		move.l	d3,d0
00004DEC 7C03                       		moveq	#3,d6
00004DEE 7800                       		moveq	#0,d4
00004DF0 0C47 0003                  		cmpi.w	#3,d7
00004DF4 6400                       		bcc.s	loc_48CC
00004DF6 7801                       		moveq	#1,d4
00004DF8                            
00004DF8                            loc_48CC:
00004DF8 7A07                       		moveq	#7,d5
00004DFA                            
00004DFA                            loc_48CE:
00004DFA 224A                       		movea.l	a2,a1
00004DFC 0A04 0001                  		eori.b	#1,d4
00004E00 6600                       		bne.s	loc_48E2
00004E02 0C47 0006                  		cmpi.w	#6,d7
00004E06 6600                       		bne.s	loc_48F2
00004E08 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E0E                            
00004E0E                            loc_48E2:
00004E0E 48E7 F800                  		movem.l	d0-d4,-(sp)
00004E12 7207                       		moveq	#7,d1
00004E14 7407                       		moveq	#7,d2
00004E16 6100 C83E                  		bsr.w	ShowVDPGraphics
00004E1A 4CDF 001F                  		movem.l	(sp)+,d0-d4
00004E1E                            
00004E1E                            loc_48F2:
00004E1E 0680 0010 0000             		addi.l	#$100000,d0
00004E24 51CD FFD4                  		dbf	d5,loc_48CE
00004E28 0680 0380 0000             		addi.l	#$3800000,d0
00004E2E 0A04 0001                  		eori.b	#1,d4
00004E32 51CE FFC4                  		dbf	d6,loc_48CC
00004E36 0683 1000 0000             		addi.l	#$10000000,d3
00004E3C 6A00                       		bpl.s	loc_491C
00004E3E 4843                       		swap	d3
00004E40 0683 0000 C000             		addi.l	#$C000,d3
00004E46 4843                       		swap	d3
00004E48                            
00004E48                            loc_491C:
00004E48 D4FC 0080                  		adda.w	#$80,a2
00004E4C 51CF FF9C                  		dbf	d7,loc_48BE
00004E50 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E56 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004E5C 303C 4000                  		move.w	#$4000,d0
00004E60 6100 CAF2                  		bsr.w	EniDec
00004E64 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E6A 203C 4000 0003             		move.l	#$40000003,d0
00004E70 723F                       		moveq	#$3F,d1
00004E72 741F                       		moveq	#$1F,d2
00004E74 6100 C7E0                  		bsr.w	ShowVDPGraphics
00004E78 43F9 00FF 0000             		lea	($FF0000).l,a1
00004E7E 203C 5000 0003             		move.l	#$50000003,d0
00004E84 723F                       		moveq	#$3F,d1
00004E86 743F                       		moveq	#$3F,d2
00004E88 6100 C7CC                  		bsr.w	ShowVDPGraphics
00004E8C 4E75                       		rts	
00004E8E                            ; End of function SS_BGLoad
00004E8E                            
00004E8E                            ; ---------------------------------------------------------------------------
00004E8E                            ; Pallet cycling routine - special stage
00004E8E                            ; ---------------------------------------------------------------------------
00004E8E                            
00004E8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E8E                            
00004E8E                            
00004E8E                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004E8E 4A78 F63A                  		tst.w	($FFFFF63A).w
00004E92 6600                       		bne.s	locret_49E6
00004E94 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004E98 6A00                       		bpl.s	locret_49E6
00004E9A 4DF9 00C0 0004             		lea	($C00004).l,a6
00004EA0 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004EA4 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004EA8 0240 001F                  		andi.w	#$1F,d0
00004EAC E548                       		lsl.w	#2,d0
00004EAE 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004EB4 D0C0                       		adda.w	d0,a0
00004EB6 1018                       		move.b	(a0)+,d0
00004EB8 6A00                       		bpl.s	loc_4992
00004EBA 303C 01FF                  		move.w	#$1FF,d0
00004EBE                            
00004EBE                            loc_4992:
00004EBE 31C0 F79C                  		move.w	d0,($FFFFF79C).w
00004EC2 7000                       		moveq	#0,d0
00004EC4 1018                       		move.b	(a0)+,d0
00004EC6 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004ECA 43F9 0000 0000             		lea	(byte_4ABC).l,a1
00004ED0 43F1 0000                  		lea	(a1,d0.w),a1
00004ED4 303C 8200                  		move.w	#-$7E00,d0
00004ED8 1019                       		move.b	(a1)+,d0
00004EDA 3C80                       		move.w	d0,(a6)
00004EDC 11D1 F616                  		move.b	(a1),($FFFFF616).w
00004EE0 303C 8400                  		move.w	#-$7C00,d0
00004EE4 1018                       		move.b	(a0)+,d0
00004EE6 3C80                       		move.w	d0,(a6)
00004EE8 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00004EF2 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00004EFA 7000                       		moveq	#0,d0
00004EFC 1018                       		move.b	(a0)+,d0
00004EFE 6B00                       		bmi.s	loc_49E8
00004F00 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
00004F06 D2C0                       		adda.w	d0,a1
00004F08 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00004F0C 24D9                       		move.l	(a1)+,(a2)+
00004F0E 24D9                       		move.l	(a1)+,(a2)+
00004F10 24D9                       		move.l	(a1)+,(a2)+
00004F12                            
00004F12                            locret_49E6:
00004F12 4E75                       		rts	
00004F14                            ; ===========================================================================
00004F14                            
00004F14                            loc_49E8:				; XREF: PalCycle_SS
00004F14 3238 F79E                  		move.w	($FFFFF79E).w,d1
00004F18 0C40 008A                  		cmpi.w	#$8A,d0
00004F1C 6500                       		bcs.s	loc_49F4
00004F1E 5241                       		addq.w	#1,d1
00004F20                            
00004F20                            loc_49F4:
00004F20 C2FC 002A                  		mulu.w	#$2A,d1
00004F24 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
00004F2A D2C1                       		adda.w	d1,a1
00004F2C 0240 007F                  		andi.w	#$7F,d0
00004F30 0880 0000                  		bclr	#0,d0
00004F34 6700                       		beq.s	loc_4A18
00004F36 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004F3A 24D1                       		move.l	(a1),(a2)+
00004F3C 24E9 0004                  		move.l	4(a1),(a2)+
00004F40 24E9 0008                  		move.l	8(a1),(a2)+
00004F44                            
00004F44                            loc_4A18:
00004F44 D2FC 000C                  		adda.w	#$C,a1
00004F48 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004F4C 0C40 000A                  		cmpi.w	#$A,d0
00004F50 6500                       		bcs.s	loc_4A2E
00004F52 0440 000A                  		subi.w	#$A,d0
00004F56 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004F5A                            
00004F5A                            loc_4A2E:
00004F5A 3200                       		move.w	d0,d1
00004F5C D040                       		add.w	d0,d0
00004F5E D041                       		add.w	d1,d0
00004F60 D2C0                       		adda.w	d0,a1
00004F62 24D9                       		move.l	(a1)+,(a2)+
00004F64 34D9                       		move.w	(a1)+,(a2)+
00004F66 4E75                       		rts	
00004F68                            ; End of function PalCycle_SS
00004F68                            
00004F68                            ; ===========================================================================
00004F68 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004F78                            					; XREF: PalCycle_SS
00004F78 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004F88 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004F98 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004FA8 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004FB8 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004FC8 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004FD8 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004FE8                            		even
00004FE8 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004FF6                            					; XREF: PalCycle_SS
00004FF6                            		even
00004FF6                            
00004FF6                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
0000503E                            		even
0000503E                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005110                            		even
00005110                            
00005110                            ; ---------------------------------------------------------------------------
00005110                            ; Subroutine to	make the special stage background animated
00005110                            ; ---------------------------------------------------------------------------
00005110                            
00005110                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005110                            
00005110                            
00005110                            SS_BGAnimate:				; XREF: SpecialStage
00005110 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005114 6600                       		bne.s	loc_4BF6
00005116 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
0000511C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005122                            
00005122                            loc_4BF6:
00005122 0C40 0008                  		cmpi.w	#8,d0
00005126 6400                       		bcc.s	loc_4C4E
00005128 0C40 0006                  		cmpi.w	#6,d0
0000512C 6600                       		bne.s	loc_4C10
0000512E 5278 F718                  		addq.w	#1,($FFFFF718).w
00005132 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00005136 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000513C                            
0000513C                            loc_4C10:
0000513C 7000                       		moveq	#0,d0
0000513E 3038 F708                  		move.w	($FFFFF708).w,d0
00005142 4440                       		neg.w	d0
00005144 4840                       		swap	d0
00005146 43F9 0000 0000             		lea	(byte_4CCC).l,a1
0000514C 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005150 7609                       		moveq	#9,d3
00005152                            
00005152                            loc_4C26:
00005152 302B 0002                  		move.w	2(a3),d0
00005156 6100 DBA6                  		bsr.w	CalcSine
0000515A 7400                       		moveq	#0,d2
0000515C 1419                       		move.b	(a1)+,d2
0000515E C1C2                       		muls.w	d2,d0
00005160 E080                       		asr.l	#8,d0
00005162 36C0                       		move.w	d0,(a3)+
00005164 1419                       		move.b	(a1)+,d2
00005166 4882                       		ext.w	d2
00005168 D55B                       		add.w	d2,(a3)+
0000516A 51CB FFE6                  		dbf	d3,loc_4C26
0000516E 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005172 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00005178 6000                       		bra.s	loc_4C7E
0000517A                            ; ===========================================================================
0000517A                            
0000517A                            loc_4C4E:				; XREF: SS_BGAnimate
0000517A 0C40 000C                  		cmpi.w	#$C,d0
0000517E 6600                       		bne.s	loc_4C74
00005180 5378 F718                  		subq.w	#1,($FFFFF718).w
00005184 47F8 AB00                  		lea	($FFFFAB00).w,a3
00005188 243C 0001 8000             		move.l	#$18000,d2
0000518E 7206                       		moveq	#6,d1
00005190                            
00005190                            loc_4C64:
00005190 2013                       		move.l	(a3),d0
00005192 9082                       		sub.l	d2,d0
00005194 26C0                       		move.l	d0,(a3)+
00005196 0482 0000 2000             		subi.l	#$2000,d2
0000519C 51C9 FFF2                  		dbf	d1,loc_4C64
000051A0                            
000051A0                            loc_4C74:
000051A0 47F8 AB00                  		lea	($FFFFAB00).w,a3
000051A4 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000051AA                            
000051AA                            loc_4C7E:
000051AA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000051AE 3038 F718                  		move.w	($FFFFF718).w,d0
000051B2 4440                       		neg.w	d0
000051B4 4840                       		swap	d0
000051B6 7600                       		moveq	#0,d3
000051B8 161A                       		move.b	(a2)+,d3
000051BA 3438 F70C                  		move.w	($FFFFF70C).w,d2
000051BE 4442                       		neg.w	d2
000051C0 0242 00FF                  		andi.w	#$FF,d2
000051C4 E54A                       		lsl.w	#2,d2
000051C6                            
000051C6                            loc_4C9A:
000051C6 301B                       		move.w	(a3)+,d0
000051C8 544B                       		addq.w	#2,a3
000051CA 7200                       		moveq	#0,d1
000051CC 121A                       		move.b	(a2)+,d1
000051CE 5341                       		subq.w	#1,d1
000051D0                            
000051D0                            loc_4CA4:
000051D0 2380 2000                  		move.l	d0,(a1,d2.w)
000051D4 5842                       		addq.w	#4,d2
000051D6 0242 03FC                  		andi.w	#$3FC,d2
000051DA 51C9 FFF4                  		dbf	d1,loc_4CA4
000051DE 51CB FFE6                  		dbf	d3,loc_4C9A
000051E2 4E75                       		rts	
000051E4                            ; End of function SS_BGAnimate
000051E4                            
000051E4                            ; ===========================================================================
000051E4 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000051F0                            		even
000051F0 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000051F8                            		even
000051F8 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
0000520C                            		even
0000520C                            					; XREF: SS_BGAnimate
0000520C                            ; ===========================================================================
0000520C                            
0000520C                            ; ---------------------------------------------------------------------------
0000520C                            ; Continue screen
0000520C                            ; ---------------------------------------------------------------------------
0000520C                            
0000520C                            ContinueScreen:				; XREF: GameModeArray
0000520C 6100 CE40                  		bsr.w	Pal_FadeFrom
00005210 46FC 2700                  		move	#$2700,sr
00005214 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005218 0200 00BF                  		andi.b	#$BF,d0
0000521C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005222 4DF9 00C0 0004             		lea	($C00004).l,a6
00005228 3CBC 8004                  		move.w	#$8004,(a6)
0000522C 3CBC 8700                  		move.w	#$8700,(a6)
00005230 6100 C2C8                  		bsr.w	ClearScreen
00005234 43F8 D000                  		lea	($FFFFD000).w,a1
00005238 7000                       		moveq	#0,d0
0000523A 323C 07FF                  		move.w	#$7FF,d1
0000523E                            
0000523E                            Cont_ClrObjRam:
0000523E 22C0                       		move.l	d0,(a1)+
00005240 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005244                            
00005244 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000524E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005254 6100 C420                  		bsr.w	NemDec
00005258 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005262 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005268 6100 C40C                  		bsr.w	NemDec
0000526C 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005276 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
0000527C 6100 C3F8                  		bsr.w	NemDec
00005280 720A                       		moveq	#10,d1
00005282 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005288 7012                       		moveq	#$12,d0
0000528A 6100 D06C                  		bsr.w	PalLoad1	; load continue	screen pallet
0000528E 103C 0090                  		move.b	#$90,d0
00005292 6100 C338                  		bsr.w	PlaySound	; play continue	music
00005296 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
0000529C 42B8 F700                  		clr.l	($FFFFF700).w
000052A0 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
000052A8 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
000052AE 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
000052B4 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
000052BA 11FC 0003 D098             		move.b	#3,($FFFFD098).w
000052C0 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
000052C6 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
000052CC 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
000052D2 4EB9 0000 0000             		jsr	ObjectsLoad
000052D8 4EB9 0000 0000             		jsr	BuildSprites
000052DE 3038 F60C                  		move.w	($FFFFF60C).w,d0
000052E2 0000 0040                  		ori.b	#$40,d0
000052E6 33C0 00C0 0004             		move.w	d0,($C00004).l
000052EC 6100 CCBA                  		bsr.w	Pal_FadeTo
000052F0                            
000052F0                            ; ---------------------------------------------------------------------------
000052F0                            ; Continue screen main loop
000052F0                            ; ---------------------------------------------------------------------------
000052F0                            
000052F0                            Cont_MainLoop:
000052F0 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000052F6 6100 D9D4                  		bsr.w	DelayProgram
000052FA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005300 6400                       		bcc.s	loc_4DF2
00005302 46FC 2700                  		move	#$2700,sr
00005306 3238 F614                  		move.w	($FFFFF614).w,d1
0000530A 82FC 003C                  		divu.w	#$3C,d1
0000530E 0281 0000 000F             		andi.l	#$F,d1
00005314 4EB9 0000 0000             		jsr	ContScrCounter
0000531A 46FC 2300                  		move	#$2300,sr
0000531E                            
0000531E                            loc_4DF2:
0000531E 4EB9 0000 0000             		jsr	ObjectsLoad
00005324 4EB9 0000 0000             		jsr	BuildSprites
0000532A 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005330 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005332 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005338 64B6                       		bcc.s	Cont_MainLoop
0000533A 4A78 F614                  		tst.w	($FFFFF614).w
0000533E 6600 FFB0                  		bne.w	Cont_MainLoop
00005342 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005348 4E75                       		rts	
0000534A                            ; ===========================================================================
0000534A                            
0000534A                            Cont_GotoLevel:				; XREF: Cont_MainLoop
0000534A 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005350 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005356 7000                       		moveq	#0,d0
00005358 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000535C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005360 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005364 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005368 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
0000536C 4E75                       		rts	
0000536E                            ; ===========================================================================
0000536E                            
0000536E                            ; ---------------------------------------------------------------------------
0000536E                            ; Object 80 - Continue screen elements
0000536E                            ; ---------------------------------------------------------------------------
0000536E                            
0000536E                            Obj80:					; XREF: Obj_Index
0000536E 7000                       		moveq	#0,d0
00005370 1028 0024                  		move.b	$24(a0),d0
00005374 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005378 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
0000537C                            ; ===========================================================================
0000537C 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
0000537E 0000                       		dc.w Obj80_Display-Obj80_Index
00005380 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005382 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005384                            ; ===========================================================================
00005384                            
00005384                            Obj80_Main:				; XREF: Obj80_Index
00005384 5428 0024                  		addq.b	#2,$24(a0)
00005388 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005390 317C 8500 0002             		move.w	#$8500,2(a0)
00005396 117C 0000 0001             		move.b	#0,1(a0)
0000539C 117C 003C 0019             		move.b	#$3C,$19(a0)
000053A2 317C 0120 0008             		move.w	#$120,8(a0)
000053A8 317C 00C0 000A             		move.w	#$C0,$A(a0)
000053AE 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
000053B4                            
000053B4                            Obj80_Display:				; XREF: Obj80_Index
000053B4 4EF9 0000 0000             		jmp	DisplaySprite
000053BA                            ; ===========================================================================
000053BA                            Obj80_MiniSonicPos:
000053BA 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
000053CC 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
000053D8                            ; ===========================================================================
000053D8                            
000053D8                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
000053D8 2248                       		movea.l	a0,a1
000053DA 45F9 0000 53BA             		lea	(Obj80_MiniSonicPos).l,a2
000053E0 7200                       		moveq	#0,d1
000053E2 1238 FE18                  		move.b	($FFFFFE18).w,d1
000053E6 5501                       		subq.b	#2,d1
000053E8 6400                       		bcc.s	loc_4EC4
000053EA 4EF9 0000 0000             		jmp	DeleteObject
000053F0                            ; ===========================================================================
000053F0                            
000053F0                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
000053F0 7601                       		moveq	#1,d3
000053F2 0C01 000E                  		cmpi.b	#$E,d1
000053F6 6500                       		bcs.s	loc_4ED0
000053F8 7600                       		moveq	#0,d3
000053FA 720E                       		moveq	#$E,d1
000053FC                            
000053FC                            loc_4ED0:
000053FC 1401                       		move.b	d1,d2
000053FE 0202 0001                  		andi.b	#1,d2
00005402                            
00005402                            Obj80_MiniSonLoop:
00005402 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005406 335A 0008                  		move.w	(a2)+,8(a1)
0000540A 4A02                       		tst.b	d2
0000540C 6700                       		beq.s	loc_4EEA
0000540E 0469 000A 0008             		subi.w	#$A,8(a1)
00005414                            
00005414                            loc_4EEA:
00005414 337C 00D0 000A             		move.w	#$D0,$A(a1)
0000541A 137C 0006 001A             		move.b	#6,$1A(a1)
00005420 137C 0006 0024             		move.b	#6,$24(a1)
00005426 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
0000542E 337C 8551 0002             		move.w	#$8551,2(a1)
00005434 137C 0000 0001             		move.b	#0,1(a1)
0000543A 43E9 0040                  		lea	$40(a1),a1
0000543E 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005442 43E9 FFC0                  		lea	-$40(a1),a1
00005446 1343 0028                  		move.b	d3,$28(a1)
0000544A                            
0000544A                            Obj80_ChkType:				; XREF: Obj80_Index
0000544A 4A28 0028                  		tst.b	$28(a0)
0000544E 6700                       		beq.s	loc_4F40
00005450 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005456 6500                       		bcs.s	loc_4F40
00005458 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000545C 0200 0001                  		andi.b	#1,d0
00005460 6600                       		bne.s	loc_4F40
00005462 4A78 D010                  		tst.w	($FFFFD010).w
00005466 6600                       		bne.s	Obj80_Delete
00005468 4E75                       		rts	
0000546A                            ; ===========================================================================
0000546A                            
0000546A                            loc_4F40:				; XREF: Obj80_ChkType
0000546A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000546E 0200 000F                  		andi.b	#$F,d0
00005472 6600                       		bne.s	Obj80_Display2
00005474 0868 0000 001A             		bchg	#0,$1A(a0)
0000547A                            
0000547A                            Obj80_Display2:
0000547A 4EF9 0000 0000             		jmp	DisplaySprite
00005480                            ; ===========================================================================
00005480                            
00005480                            Obj80_Delete:				; XREF: Obj80_ChkType
00005480 4EF9 0000 0000             		jmp	DeleteObject
00005486                            ; ===========================================================================
00005486                            
00005486                            ; ---------------------------------------------------------------------------
00005486                            ; Object 81 - Sonic on the continue screen
00005486                            ; ---------------------------------------------------------------------------
00005486                            
00005486                            Obj81:					; XREF: Obj_Index
00005486 7000                       		moveq	#0,d0
00005488 1028 0024                  		move.b	$24(a0),d0
0000548C 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005490 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005494 4EF9 0000 0000             		jmp	DisplaySprite
0000549A                            ; ===========================================================================
0000549A 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
0000549C 0000                       		dc.w Obj81_ChkLand-Obj81_Index
0000549E 0000                       		dc.w Obj81_Animate-Obj81_Index
000054A0 0000                       		dc.w Obj81_Run-Obj81_Index
000054A2                            ; ===========================================================================
000054A2                            
000054A2                            Obj81_Main:				; XREF: Obj81_Index
000054A2 5428 0024                  		addq.b	#2,$24(a0)
000054A6 317C 00A0 0008             		move.w	#$A0,8(a0)
000054AC 317C 00C0 000C             		move.w	#$C0,$C(a0)
000054B2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
000054BA 317C 0780 0002             		move.w	#$780,2(a0)
000054C0 117C 0004 0001             		move.b	#4,1(a0)
000054C6 117C 0002 0018             		move.b	#2,$18(a0)
000054CC 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
000054D2 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
000054D8                            
000054D8                            Obj81_ChkLand:				; XREF: Obj81_Index
000054D8 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
000054DE 6600                       		bne.s	Obj81_ShowFall	; if not, branch
000054E0 5428 0024                  		addq.b	#2,$24(a0)
000054E4 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
000054E8 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
000054F0 317C 8500 0002             		move.w	#$8500,2(a0)
000054F6 117C 0000 001C             		move.b	#0,$1C(a0)
000054FC 6000                       		bra.s	Obj81_Animate
000054FE                            ; ===========================================================================
000054FE                            
000054FE                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
000054FE 4EB9 0000 0000             		jsr	SpeedToPos
00005504 4EB9 0000 0000             		jsr	Sonic_Animate
0000550A 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005510                            ; ===========================================================================
00005510                            
00005510                            Obj81_Animate:				; XREF: Obj81_Index
00005510 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005514 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005516 43F9 0000 0000             		lea	(Ani_obj81).l,a1
0000551C 4EF9 0000 0000             		jmp	AnimateSprite
00005522                            ; ===========================================================================
00005522                            
00005522                            Obj81_GetUp:				; XREF: Obj81_Animate
00005522 5428 0024                  		addq.b	#2,$24(a0)
00005526 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0000552E 317C 0780 0002             		move.w	#$780,2(a0)
00005534 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
0000553A 4268 0014                  		clr.w	$14(a0)
0000553E 5168 000C                  		subq.w	#8,$C(a0)
00005542 103C 00E0                  		move.b	#$E0,d0
00005546 6100 C08A                  		bsr.w	PlaySound_Special ; fade out music
0000554A                            
0000554A                            Obj81_Run:				; XREF: Obj81_Index
0000554A 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005550 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005552 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005558 6000                       		bra.s	Obj81_ShowRun
0000555A                            ; ===========================================================================
0000555A                            
0000555A                            Obj81_AddSpeed:				; XREF: Obj81_Run
0000555A 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005560                            
00005560                            Obj81_ShowRun:				; XREF: Obj81_Run
00005560 4EB9 0000 0000             		jsr	SpeedToPos
00005566 4EB9 0000 0000             		jsr	Sonic_Animate
0000556C 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005572                            ; ===========================================================================
00005572                            Ani_obj81:
00005572                            	include "_anim\obj81.asm"
00005572                            ; ---------------------------------------------------------------------------
00005572                            ; Animation script - Sonic on the continue screen
00005572                            ; ---------------------------------------------------------------------------
00005572 0000                       		dc.w byte_504A-Ani_obj81
00005574 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005580 00                         		even
00005580 00                         		even
00005580                            
00005580                            ; ---------------------------------------------------------------------------
00005580                            ; Sprite mappings - Continue screen
00005580                            ; ---------------------------------------------------------------------------
00005580                            Map_obj80:
00005580                            	include "_maps\obj80.asm"
00005580                            ; ---------------------------------------------------------------------------
00005580                            ; Sprite mappings - Continue screen
00005580                            ; ---------------------------------------------------------------------------
00005580 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005584 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005588 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
0000558C 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005590 0B                         byte_5066:	dc.b $B
00005591 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005596 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
0000559B F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
000055A0 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
000055A5 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
000055AA F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
000055AF F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
000055B4 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
000055B9 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
000055BE 3805 2021 08               		dc.b $38, 5, $20, $21, 8
000055C3 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
000055C8 03                         byte_509E:	dc.b 3
000055C9 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
000055CE F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055D3 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055D8 03                         byte_50AE:	dc.b 3
000055D9 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000055DE F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055E3 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055E8 03                         byte_50BE:	dc.b 3
000055E9 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000055EE F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000055F3 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000055F8 02                         byte_50CE:	dc.b 2
000055F9 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000055FE 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005603 01                         byte_50D9:	dc.b 1
00005604 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005609 01                         byte_50DF:	dc.b 1
0000560A 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005610 00                         		even
00005610 00                         		even
00005610                            
00005610                            ; ===========================================================================
00005610                            ; ---------------------------------------------------------------------------
00005610                            ; Ending sequence in Green Hill	Zone
00005610                            ; ---------------------------------------------------------------------------
00005610                            
00005610                            EndingSequence:				; XREF: GameModeArray
00005610 103C 00E4                  		move.b	#$E4,d0
00005614 6100 BFBC                  		bsr.w	PlaySound_Special ; stop music
00005618 6100 CA34                  		bsr.w	Pal_FadeFrom
0000561C 43F8 D000                  		lea	($FFFFD000).w,a1
00005620 7000                       		moveq	#0,d0
00005622 323C 07FF                  		move.w	#$7FF,d1
00005626                            
00005626                            End_ClrObjRam:
00005626 22C0                       		move.l	d0,(a1)+
00005628 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
0000562C                            
0000562C 43F8 F628                  		lea	($FFFFF628).w,a1
00005630 7000                       		moveq	#0,d0
00005632 323C 0015                  		move.w	#$15,d1
00005636                            
00005636                            End_ClrRam:
00005636 22C0                       		move.l	d0,(a1)+
00005638 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
0000563C                            
0000563C 43F8 F700                  		lea	($FFFFF700).w,a1
00005640 7000                       		moveq	#0,d0
00005642 323C 003F                  		move.w	#$3F,d1
00005646                            
00005646                            End_ClrRam2:
00005646 22C0                       		move.l	d0,(a1)+
00005648 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
0000564C                            
0000564C 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005650 7000                       		moveq	#0,d0
00005652 323C 0047                  		move.w	#$47,d1
00005656                            
00005656                            End_ClrRam3:
00005656 22C0                       		move.l	d0,(a1)+
00005658 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
0000565C                            
0000565C 46FC 2700                  		move	#$2700,sr
00005660 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005664 0200 00BF                  		andi.b	#$BF,d0
00005668 33C0 00C0 0004             		move.w	d0,($C00004).l
0000566E 6100 BE8A                  		bsr.w	ClearScreen
00005672 4DF9 00C0 0004             		lea	($C00004).l,a6
00005678 3CBC 8B03                  		move.w	#$8B03,(a6)
0000567C 3CBC 8230                  		move.w	#$8230,(a6)
00005680 3CBC 8407                  		move.w	#$8407,(a6)
00005684 3CBC 857C                  		move.w	#$857C,(a6)
00005688 3CBC 9001                  		move.w	#$9001,(a6)
0000568C 3CBC 8004                  		move.w	#$8004,(a6)
00005690 3CBC 8720                  		move.w	#$8720,(a6)
00005694 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000569A 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000569E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000056A4 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
000056AA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
000056B0 6700                       		beq.s	End_LoadData	; if yes, branch
000056B2 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
000056B8                            
000056B8                            End_LoadData:
000056B8 701C                       		moveq	#$1C,d0
000056BA 6100 C266                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
000056BE 4EB9 0000 0000             		jsr	Hud_Base
000056C4 6100 0000                  		bsr.w	LevelSizeLoad
000056C8 6100 0000                  		bsr.w	DeformBgLayer
000056CC 08F8 0002 F754             		bset	#2,($FFFFF754).w
000056D2 6100 0000                  		bsr.w	MainLoadBlockLoad
000056D6 6100 0000                  		bsr.w	LoadTilesFromStart
000056DA 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000056E2 46FC 2300                  		move	#$2300,sr
000056E6 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000056EC 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000056F0 6100 C3E0                  		bsr.w	KosDec
000056F4 7003                       		moveq	#3,d0
000056F6 6100 CC00                  		bsr.w	PalLoad1	; load Sonic's pallet
000056FA 303C 008B                  		move.w	#$8B,d0
000056FE 6100 BECC                  		bsr.w	PlaySound	; play ending sequence music
00005702 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005708 6700                       		beq.s	End_LoadSonic	; if not, branch
0000570A 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005710                            
00005710                            End_LoadSonic:
00005710 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005716 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
0000571C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005722 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005728 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
0000572E 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005734 4EB9 0000 0000             		jsr	ObjPosLoad
0000573A 4EB9 0000 0000             		jsr	ObjectsLoad
00005740 4EB9 0000 0000             		jsr	BuildSprites
00005746 7000                       		moveq	#0,d0
00005748 31C0 FE20                  		move.w	d0,($FFFFFE20).w
0000574C 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005750 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005754 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005758 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
0000575C 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005760 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005764 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005768 31C0 FE02                  		move.w	d0,($FFFFFE02).w
0000576C 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005770 6100 EEDA                  		bsr.w	OscillateNumInit
00005774 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
0000577A 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005780 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005786 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000578C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005792 6100 D538                  		bsr.w	DelayProgram
00005796 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000579A 0000 0040                  		ori.b	#$40,d0
0000579E 33C0 00C0 0004             		move.w	d0,($C00004).l
000057A4 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000057AA 6100 C7FC                  		bsr.w	Pal_FadeTo
000057AE                            
000057AE                            ; ---------------------------------------------------------------------------
000057AE                            ; Main ending sequence loop
000057AE                            ; ---------------------------------------------------------------------------
000057AE                            
000057AE                            End_MainLoop:
000057AE 6100 BE2E                  		bsr.w	PauseGame
000057B2 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000057B8 6100 D512                  		bsr.w	DelayProgram
000057BC 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000057C0 6100 0000                  		bsr.w	End_MoveSonic
000057C4 4EB9 0000 0000             		jsr	ObjectsLoad
000057CA 6100 0000                  		bsr.w	DeformBgLayer
000057CE 4EB9 0000 0000             		jsr	BuildSprites
000057D4 4EB9 0000 0000             		jsr	ObjPosLoad
000057DA 6100 C396                  		bsr.w	PalCycle_Load
000057DE 6100 EEC2                  		bsr.w	OscillateNumDo
000057E2 6100 EF4E                  		bsr.w	ChangeRingFrame
000057E6 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000057EC 6700                       		beq.s	loc_52DA	; if yes, branch
000057EE 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000057F4 103C 0091                  		move.b	#$91,d0
000057F8 6100 BDD8                  		bsr.w	PlaySound_Special ; play credits music
000057FC 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00005802 4E75                       		rts	
00005804                            ; ===========================================================================
00005804                            
00005804                            loc_52DA:
00005804 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00005808 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
0000580C                            
0000580C 4278 FE02                  		clr.w	($FFFFFE02).w
00005810 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005816 4278 F794                  		clr.w	($FFFFF794).w
0000581A                            
0000581A                            End_AllEmlds:				; XREF: loc_5334
0000581A 6100 BDC2                  		bsr.w	PauseGame
0000581E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005824 6100 D4A6                  		bsr.w	DelayProgram
00005828 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000582C 6100 0000                  		bsr.w	End_MoveSonic
00005830 4EB9 0000 0000             		jsr	ObjectsLoad
00005836 6100 0000                  		bsr.w	DeformBgLayer
0000583A 4EB9 0000 0000             		jsr	BuildSprites
00005840 4EB9 0000 0000             		jsr	ObjPosLoad
00005846 6100 EE5A                  		bsr.w	OscillateNumDo
0000584A 6100 EEE6                  		bsr.w	ChangeRingFrame
0000584E 5378 F794                  		subq.w	#1,($FFFFF794).w
00005852 6A00                       		bpl.s	loc_5334
00005854 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000585A 6100 C93C                  		bsr.w	Pal_ToWhite
0000585E                            
0000585E                            loc_5334:
0000585E 4A78 FE02                  		tst.w	($FFFFFE02).w
00005862 6700 FFB6                  		beq.w	End_AllEmlds
00005866 4278 FE02                  		clr.w	($FFFFFE02).w
0000586A 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00005870 4BF9 00C0 0004             		lea	($C00004).l,a5
00005876 4DF9 00C0 0000             		lea	($C00000).l,a6
0000587C 47F8 F700                  		lea	($FFFFF700).w,a3
00005880 49F8 A400                  		lea	($FFFFA400).w,a4
00005884 343C 4000                  		move.w	#$4000,d2
00005888 6100 0000                  		bsr.w	LoadTilesFromStart2
0000588C 7013                       		moveq	#$13,d0
0000588E 6100 CA68                  		bsr.w	PalLoad1	; load ending pallet
00005892 6100 C838                  		bsr.w	Pal_MakeWhite
00005896 6000 FF16                  		bra.w	End_MainLoop
0000589A                            
0000589A                            ; ---------------------------------------------------------------------------
0000589A                            ; Subroutine controlling Sonic on the ending sequence
0000589A                            ; ---------------------------------------------------------------------------
0000589A                            
0000589A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000589A                            
0000589A                            
0000589A                            End_MoveSonic:				; XREF: End_MainLoop
0000589A 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000589E 6600                       		bne.s	End_MoveSonic2
000058A0 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000058A6 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000058A8 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058AC 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000058B2 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000058B8 4E75                       		rts	
000058BA                            ; ===========================================================================
000058BA                            
000058BA                            End_MoveSonic2:				; XREF: End_MoveSonic
000058BA 5500                       		subq.b	#2,d0
000058BC 6600                       		bne.s	End_MoveSonic3
000058BE 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000058C4 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000058C6 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058CA 7000                       		moveq	#0,d0
000058CC 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000058D0 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000058D4 31C0 D014                  		move.w	d0,($FFFFD014).w
000058D8 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000058DE 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000058E4 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000058EA 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000058F0 4E75                       		rts	
000058F2                            ; ===========================================================================
000058F2                            
000058F2                            End_MoveSonic3:				; XREF: End_MoveSonic
000058F2 5500                       		subq.b	#2,d0
000058F4 6600                       		bne.s	End_MoveSonExit
000058F6 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000058FA 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00005900 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
00005906 4278 D024                  		clr.w	($FFFFD024).w
0000590A                            
0000590A                            End_MoveSonExit:
0000590A 4E75                       		rts	
0000590C                            ; End of function End_MoveSonic
0000590C                            
0000590C                            ; ===========================================================================
0000590C                            ; ---------------------------------------------------------------------------
0000590C                            ; Object 87 - Sonic on ending sequence
0000590C                            ; ---------------------------------------------------------------------------
0000590C                            
0000590C                            Obj87:					; XREF: Obj_Index
0000590C 7000                       		moveq	#0,d0
0000590E 1028 0025                  		move.b	$25(a0),d0
00005912 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
00005916 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000591A 4EF9 0000 0000             		jmp	DisplaySprite
00005920                            ; ===========================================================================
00005920 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00005924 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
00005928 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
0000592C 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00005930 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005934                            ; ===========================================================================
00005934                            
00005934                            Obj87_Main:				; XREF: Obj87_Index
00005934 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000593A 6700                       		beq.s	Obj87_Main2	; if yes, branch
0000593C 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00005942 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005948 4E75                       		rts	
0000594A                            ; ===========================================================================
0000594A                            
0000594A                            Obj87_Main2:				; XREF: Obj87_Main
0000594A 5428 0025                  		addq.b	#2,$25(a0)
0000594E 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005956 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000595C 117C 0004 0001             		move.b	#4,1(a0)
00005962 4228 0022                  		clr.b	$22(a0)
00005966 117C 0002 0018             		move.b	#2,$18(a0)
0000596C 117C 0000 001A             		move.b	#0,$1A(a0)
00005972 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005978                            
00005978                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005978 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000597C 6600                       		bne.s	Obj87_Wait
0000597E 5428 0025                  		addq.b	#2,$25(a0)
00005982 317C 0001 001C             		move.w	#1,$1C(a0)
00005988 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000598E                            
0000598E                            Obj87_Wait:
0000598E 4E75                       		rts	
00005990                            ; ===========================================================================
00005990                            
00005990                            Obj87_LookUp:				; XREF: Obj87_Index
00005990 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005998 6600                       		bne.s	locret_5480
0000599A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000059A0 317C 005A 0030             		move.w	#$5A,$30(a0)
000059A6 5428 0025                  		addq.b	#2,$25(a0)
000059AA                            
000059AA                            locret_5480:
000059AA 4E75                       		rts	
000059AC                            ; ===========================================================================
000059AC                            
000059AC                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000059AC 5368 0030                  		subq.w	#1,$30(a0)
000059B0 6600                       		bne.s	Obj87_Wait2
000059B2 43F8 D400                  		lea	($FFFFD400).w,a1
000059B6 323C 00FF                  		move.w	#$FF,d1
000059BA                            
000059BA                            Obj87_ClrLoop:
000059BA 4299                       		clr.l	(a1)+
000059BC 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000059C0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000059C6 5428 0025                  		addq.b	#2,$25(a0)
000059CA 117C 0001 001C             		move.b	#1,$1C(a0)
000059D0 317C 003C 0030             		move.w	#$3C,$30(a0)
000059D6                            
000059D6                            Obj87_Wait2:
000059D6 4E75                       		rts	
000059D8                            ; ===========================================================================
000059D8                            
000059D8                            Obj87_MakeLogo:				; XREF: Obj87_Index
000059D8 5368 0030                  		subq.w	#1,$30(a0)
000059DC 6600                       		bne.s	Obj87_Wait3
000059DE 5428 0025                  		addq.b	#2,$25(a0)
000059E2 317C 00B4 0030             		move.w	#$B4,$30(a0)
000059E8 117C 0002 001C             		move.b	#2,$1C(a0)
000059EE 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000059F4                            
000059F4                            Obj87_Wait3:
000059F4 4E75                       		rts	
000059F6                            ; ===========================================================================
000059F6                            
000059F6                            Obj87_Animate:				; XREF: Obj87_Index
000059F6 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000059FC 4EF9 0000 0000             		jmp	AnimateSprite
00005A02                            ; ===========================================================================
00005A02                            
00005A02                            Obj87_Leap:				; XREF: Obj87_Index
00005A02 5368 0030                  		subq.w	#1,$30(a0)
00005A06 6600                       		bne.s	Obj87_Wait4
00005A08 5428 0025                  		addq.b	#2,$25(a0)
00005A0C 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005A14 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A1A 117C 0004 0001             		move.b	#4,1(a0)
00005A20 4228 0022                  		clr.b	$22(a0)
00005A24 117C 0002 0018             		move.b	#2,$18(a0)
00005A2A 117C 0005 001A             		move.b	#5,$1A(a0)
00005A30 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005A36 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005A3C 60B8                       		bra.s	Obj87_Animate
00005A3E                            ; ===========================================================================
00005A3E                            
00005A3E                            Obj87_Wait4:				; XREF: Obj87_Leap
00005A3E 4E75                       		rts	
00005A40                            ; ===========================================================================
00005A40                            Ani_obj87:
00005A40                            	include "_anim\obj87.asm"
00005A40                            ; ---------------------------------------------------------------------------
00005A40                            ; Animation script - Sonic on the ending sequence
00005A40                            ; ---------------------------------------------------------------------------
00005A40 0000                       		dc.w byte_551C-Ani_obj87
00005A42 0000                       		dc.w byte_552A-Ani_obj87
00005A44 0000                       		dc.w byte_5534-Ani_obj87
00005A46 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005A54 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005A5E 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005A66                            		even
00005A66                            		even
00005A66                            
00005A66                            ; ===========================================================================
00005A66                            ; ---------------------------------------------------------------------------
00005A66                            ; Object 88 - chaos emeralds on	the ending sequence
00005A66                            ; ---------------------------------------------------------------------------
00005A66                            
00005A66                            Obj88:					; XREF: Obj_Index
00005A66 7000                       		moveq	#0,d0
00005A68 1028 0024                  		move.b	$24(a0),d0
00005A6C 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00005A70 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005A74 4EF9 0000 0000             		jmp	DisplaySprite
00005A7A                            ; ===========================================================================
00005A7A 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005A7C 0000                       		dc.w Obj88_Move-Obj88_Index
00005A7E                            ; ===========================================================================
00005A7E                            
00005A7E                            Obj88_Main:				; XREF: Obj88_Index
00005A7E 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005A84 6700                       		beq.s	Obj88_Main2
00005A86 588F                       		addq.l	#4,sp
00005A88 4E75                       		rts	
00005A8A                            ; ===========================================================================
00005A8A                            
00005A8A                            Obj88_Main2:				; XREF: Obj88_Main
00005A8A 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00005A90 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005A96 2248                       		movea.l	a0,a1
00005A98 7600                       		moveq	#0,d3
00005A9A 7401                       		moveq	#1,d2
00005A9C 7205                       		moveq	#5,d1
00005A9E                            
00005A9E                            Obj88_MainLoop:
00005A9E 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
00005AA2 5429 0024                  		addq.b	#2,$24(a1)
00005AA6 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005AAE 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005AB4 137C 0004 0001             		move.b	#4,1(a1)
00005ABA 137C 0001 0018             		move.b	#1,$18(a1)
00005AC0 3368 0008 0038             		move.w	8(a0),$38(a1)
00005AC6 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005ACC 1342 001C                  		move.b	d2,$1C(a1)
00005AD0 1342 001A                  		move.b	d2,$1A(a1)
00005AD4 5202                       		addq.b	#1,d2
00005AD6 1343 0026                  		move.b	d3,$26(a1)
00005ADA 0603 002A                  		addi.b	#$2A,d3
00005ADE 43E9 0040                  		lea	$40(a1),a1
00005AE2 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
00005AE6                            
00005AE6                            Obj88_Move:				; XREF: Obj88_Index
00005AE6 3028 003E                  		move.w	$3E(a0),d0
00005AEA D168 0026                  		add.w	d0,$26(a0)
00005AEE 1028 0026                  		move.b	$26(a0),d0
00005AF2 4EB9 0000 2CFE             		jsr	(CalcSine).l
00005AF8 7800                       		moveq	#0,d4
00005AFA 1828 003C                  		move.b	$3C(a0),d4
00005AFE C3C4                       		muls.w	d4,d1
00005B00 E081                       		asr.l	#8,d1
00005B02 C1C4                       		muls.w	d4,d0
00005B04 E080                       		asr.l	#8,d0
00005B06 D268 0038                  		add.w	$38(a0),d1
00005B0A D068 003A                  		add.w	$3A(a0),d0
00005B0E 3141 0008                  		move.w	d1,8(a0)
00005B12 3140 000C                  		move.w	d0,$C(a0)
00005B16 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00005B1C 6700                       		beq.s	loc_55FA
00005B1E 0668 0020 003C             		addi.w	#$20,$3C(a0)
00005B24                            
00005B24                            loc_55FA:
00005B24 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
00005B2A 6700                       		beq.s	loc_5608
00005B2C 0668 0020 003E             		addi.w	#$20,$3E(a0)
00005B32                            
00005B32                            loc_5608:
00005B32 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005B38 6700                       		beq.s	locret_5614
00005B3A 5368 003A                  		subq.w	#1,$3A(a0)
00005B3E                            
00005B3E                            locret_5614:
00005B3E 4E75                       		rts	
00005B40                            ; ===========================================================================
00005B40                            ; ---------------------------------------------------------------------------
00005B40                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00005B40                            ; ---------------------------------------------------------------------------
00005B40                            
00005B40                            Obj89:					; XREF: Obj_Index
00005B40 7000                       		moveq	#0,d0
00005B42 1028 0024                  		move.b	$24(a0),d0
00005B46 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005B4A 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005B4E                            ; ===========================================================================
00005B4E 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00005B50 0000                       		dc.w Obj89_Move-Obj89_Index
00005B52 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005B54                            ; ===========================================================================
00005B54                            
00005B54                            Obj89_Main:				; XREF: Obj89_Index
00005B54 5428 0024                  		addq.b	#2,$24(a0)
00005B58 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005B5E 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005B64 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005B6C 317C 05C5 0002             		move.w	#$5C5,2(a0)
00005B72 117C 0000 0001             		move.b	#0,1(a0)
00005B78 117C 0000 0018             		move.b	#0,$18(a0)
00005B7E                            
00005B7E                            Obj89_Move:				; XREF: Obj89_Index
00005B7E 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005B84 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005B86 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005B8C 4EB9 0000 0000             		jsr	DisplaySprite
00005B92                            ; ===========================================================================
00005B92                            
00005B92                            Obj89_Delay:				; XREF: Obj89_Move
00005B92 5428 0024                  		addq.b	#2,$24(a0)
00005B96 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005B9C                            
00005B9C                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005B9C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005BA0 6A00                       		bpl.s	Obj89_Display
00005BA2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005BA8                            
00005BA8                            Obj89_Display:
00005BA8 4EB9 0000 0000             		jsr	DisplaySprite
00005BAE                            ; ===========================================================================
00005BAE                            ; ---------------------------------------------------------------------------
00005BAE                            ; Sprite mappings - Sonic on the ending	sequence
00005BAE                            ; ---------------------------------------------------------------------------
00005BAE                            Map_obj87:
00005BAE                            	include "_maps\obj87.asm"
00005BAE                            ; ---------------------------------------------------------------------------
00005BAE                            ; Sprite mappings - Sonic on the ending	sequence
00005BAE                            ; ---------------------------------------------------------------------------
00005BAE 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005BB2 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005BB6 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005BBA 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005BBE 02                         byte_5690:	dc.b 2
00005BBF EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005BC4 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005BC9 03                         byte_569B:	dc.b 3
00005BCA FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005BCF EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
00005BD4 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005BD9 02                         byte_56AB:	dc.b 2
00005BDA EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
00005BDF FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
00005BE4 02                         byte_56B6:	dc.b 2
00005BE5 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
00005BEA FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
00005BEF 02                         byte_56C1:	dc.b 2
00005BF0 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
00005BF5 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
00005BFA 03                         byte_56CC:	dc.b 3
00005BFB EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00005C00 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00005C05 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
00005C0A 07                         byte_56DC:	dc.b 7
00005C0B B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00005C10 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00005C15 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
00005C1A CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00005C1F DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00005C24 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
00005C29 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00005C2E 18                         byte_5700:	dc.b $18
00005C2F 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005C34 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005C39 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005C3E 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005C43 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005C48 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005C4D 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005C52 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005C57 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005C5C B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005C61 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005C66 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005C6B C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005C70 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005C75 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005C7A D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005C7F D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005C84 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005C89 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005C8E E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005C93 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005C98 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005C9D F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005CA2 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005CA8 00                         		even
00005CA8 00                         		even
00005CA8                            
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8                            ; Sprite mappings - chaos emeralds on the ending sequence
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8                            Map_obj88:
00005CA8                            	include "_maps\obj88.asm"
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8                            ; Sprite mappings - chaos emeralds on the ending sequence
00005CA8                            ; ---------------------------------------------------------------------------
00005CA8 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005CAC 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005CB0 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005CB4 0000                       		dc.w byte_57AC-Map_obj88
00005CB6 01                         byte_5788:	dc.b 1
00005CB7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005CBC 01                         byte_578E:	dc.b 1
00005CBD F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005CC2 01                         byte_5794:	dc.b 1
00005CC3 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005CC8 01                         byte_579A:	dc.b 1
00005CC9 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005CCE 01                         byte_57A0:	dc.b 1
00005CCF F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
00005CD4 01                         byte_57A6:	dc.b 1
00005CD5 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
00005CDA 01                         byte_57AC:	dc.b 1
00005CDB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00005CE0                            		even
00005CE0                            		even
00005CE0                            
00005CE0                            ; ---------------------------------------------------------------------------
00005CE0                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005CE0                            ; ---------------------------------------------------------------------------
00005CE0                            Map_obj89:
00005CE0                            	include "_maps\obj89.asm"
00005CE0                            ; ---------------------------------------------------------------------------
00005CE0                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
00005CE0                            ; ---------------------------------------------------------------------------
00005CE0 0000                       		dc.w byte_57B4-Map_obj89
00005CE2 03                         byte_57B4:	dc.b 3
00005CE3 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
00005CE8 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00005CED F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
00005CF2                            		even
00005CF2                            		even
00005CF2                            
00005CF2                            ; ===========================================================================
00005CF2                            ; ---------------------------------------------------------------------------
00005CF2                            ; Credits ending sequence
00005CF2                            ; ---------------------------------------------------------------------------
00005CF2                            
00005CF2                            Credits:				; XREF: GameModeArray
00005CF2 6100 BB20                  		bsr.w	ClearPLC
00005CF6 6100 C356                  		bsr.w	Pal_FadeFrom
00005CFA 4DF9 00C0 0004             		lea	($C00004).l,a6
00005D00 3CBC 8004                  		move.w	#$8004,(a6)
00005D04 3CBC 8230                  		move.w	#$8230,(a6)
00005D08 3CBC 8407                  		move.w	#$8407,(a6)
00005D0C 3CBC 9001                  		move.w	#$9001,(a6)
00005D10 3CBC 9200                  		move.w	#$9200,(a6)
00005D14 3CBC 8B03                  		move.w	#$8B03,(a6)
00005D18 3CBC 8720                  		move.w	#$8720,(a6)
00005D1C 4238 F64E                  		clr.b	($FFFFF64E).w
00005D20 6100 B7D8                  		bsr.w	ClearScreen
00005D24 43F8 D000                  		lea	($FFFFD000).w,a1
00005D28 7000                       		moveq	#0,d0
00005D2A 323C 07FF                  		move.w	#$7FF,d1
00005D2E                            
00005D2E                            Cred_ClrObjRam:
00005D2E 22C0                       		move.l	d0,(a1)+
00005D30 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005D34                            
00005D34 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005D3E 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005D44 6100 B930                  		bsr.w	NemDec
00005D48 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005D4C 7000                       		moveq	#0,d0
00005D4E 323C 001F                  		move.w	#$1F,d1
00005D52                            
00005D52                            Cred_ClrPallet:
00005D52 22C0                       		move.l	d0,(a1)+
00005D54 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005D58                            
00005D58 7003                       		moveq	#3,d0
00005D5A 6100 C59C                  		bsr.w	PalLoad1	; load Sonic's pallet
00005D5E 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005D64 4EB9 0000 0000             		jsr	ObjectsLoad
00005D6A 4EB9 0000 0000             		jsr	BuildSprites
00005D70 6100 0000                  		bsr.w	EndingDemoLoad
00005D74 7000                       		moveq	#0,d0
00005D76 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005D7A E948                       		lsl.w	#4,d0
00005D7C 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005D82 45F2 0000                  		lea	(a2,d0.w),a2
00005D86 7000                       		moveq	#0,d0
00005D88 1012                       		move.b	(a2),d0
00005D8A 6700                       		beq.s	loc_5862
00005D8C 6100 BA28                  		bsr.w	LoadPLC		; load level patterns
00005D90                            
00005D90                            loc_5862:
00005D90 7001                       		moveq	#1,d0
00005D92 6100 BA22                  		bsr.w	LoadPLC		; load standard	level patterns
00005D96 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005D9C 6100 C20A                  		bsr.w	Pal_FadeTo
00005DA0                            
00005DA0                            Cred_WaitLoop:
00005DA0 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005DA6 6100 CF24                  		bsr.w	DelayProgram
00005DAA 6100 BA76                  		bsr.w	RunPLC_RAM
00005DAE 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005DB2 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005DB4 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005DB8 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005DBA 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005DC0 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005DC4 4E75                       		rts	
00005DC6                            
00005DC6                            ; ---------------------------------------------------------------------------
00005DC6                            ; Ending sequence demo loading subroutine
00005DC6                            ; ---------------------------------------------------------------------------
00005DC6                            
00005DC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005DC6                            
00005DC6                            
00005DC6                            EndingDemoLoad:				; XREF: Credits
00005DC6 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005DCA 0240 000F                  		andi.w	#$F,d0
00005DCE D040                       		add.w	d0,d0
00005DD0 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
00005DD4 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
00005DD8 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
00005DDC 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
00005DE2 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
00005DE4 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
00005DEA 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
00005DF0 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005DF6 7000                       		moveq	#0,d0
00005DF8 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005DFC 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005E00 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005E04 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
00005E08 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00005E0E 6600                       		bne.s	EndDemo_Exit	; if not, branch
00005E10 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
00005E16 45F8 FE30                  		lea	($FFFFFE30).w,a2
00005E1A 303C 0008                  		move.w	#8,d0
00005E1E                            
00005E1E                            EndDemo_LampLoad:
00005E1E 24D9                       		move.l	(a1)+,(a2)+
00005E20 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00005E24                            
00005E24                            EndDemo_Exit:
00005E24 4E75                       		rts	
00005E26                            ; End of function EndingDemoLoad
00005E26                            
00005E26                            ; ===========================================================================
00005E26                            ; ---------------------------------------------------------------------------
00005E26                            ; Levels used in the end sequence demos
00005E26                            ; ---------------------------------------------------------------------------
00005E26                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005E36                            
00005E36                            ; ---------------------------------------------------------------------------
00005E36                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005E36                            ; ---------------------------------------------------------------------------
00005E36                            EndDemo_LampVar:
00005E36 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005E38 0A00 062C 000D             		dc.w $A00, $62C, $D
00005E3E 0000 0000                  		dc.l 0
00005E42 0000                       		dc.b 0,	0
00005E44 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005E58 0101                       		dc.b 1,	1
00005E5A                            ; ===========================================================================
00005E5A                            ; ---------------------------------------------------------------------------
00005E5A                            ; "TRY AGAIN" and "END"	screens
00005E5A                            ; ---------------------------------------------------------------------------
00005E5A                            
00005E5A                            TryAgainEnd:				; XREF: Credits
00005E5A 6100 B9B8                  		bsr.w	ClearPLC
00005E5E 6100 C1EE                  		bsr.w	Pal_FadeFrom
00005E62 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E68 3CBC 8004                  		move.w	#$8004,(a6)
00005E6C 3CBC 8230                  		move.w	#$8230,(a6)
00005E70 3CBC 8407                  		move.w	#$8407,(a6)
00005E74 3CBC 9001                  		move.w	#$9001,(a6)
00005E78 3CBC 9200                  		move.w	#$9200,(a6)
00005E7C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E80 3CBC 8720                  		move.w	#$8720,(a6)
00005E84 4238 F64E                  		clr.b	($FFFFF64E).w
00005E88 6100 B670                  		bsr.w	ClearScreen
00005E8C 43F8 D000                  		lea	($FFFFD000).w,a1
00005E90 7000                       		moveq	#0,d0
00005E92 323C 07FF                  		move.w	#$7FF,d1
00005E96                            
00005E96                            TryAg_ClrObjRam:
00005E96 22C0                       		move.l	d0,(a1)+
00005E98 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005E9C                            
00005E9C 701D                       		moveq	#$1D,d0
00005E9E 6100 BA82                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005EA2 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005EA6 7000                       		moveq	#0,d0
00005EA8 323C 001F                  		move.w	#$1F,d1
00005EAC                            
00005EAC                            TryAg_ClrPallet:
00005EAC 22C0                       		move.l	d0,(a1)+
00005EAE 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005EB2                            
00005EB2 7013                       		moveq	#$13,d0
00005EB4 6100 C442                  		bsr.w	PalLoad1	; load ending pallet
00005EB8 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005EBC 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005EC2 4EB9 0000 0000             		jsr	ObjectsLoad
00005EC8 4EB9 0000 0000             		jsr	BuildSprites
00005ECE 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
00005ED4 6100 C0D2                  		bsr.w	Pal_FadeTo
00005ED8                            
00005ED8                            ; ---------------------------------------------------------------------------
00005ED8                            ; "TRY AGAIN" and "END"	screen main loop
00005ED8                            ; ---------------------------------------------------------------------------
00005ED8                            TryAg_MainLoop:
00005ED8 6100 B704                  		bsr.w	PauseGame
00005EDC 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005EE2 6100 CDE8                  		bsr.w	DelayProgram
00005EE6 4EB9 0000 0000             		jsr	ObjectsLoad
00005EEC 4EB9 0000 0000             		jsr	BuildSprites
00005EF2 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00005EF8 6600                       		bne.s	TryAg_Exit	; if yes, branch
00005EFA 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00005EFE 6700                       		beq.s	TryAg_Exit	; if yes, branch
00005F00 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
00005F06 67D0                       		beq.s	TryAg_MainLoop
00005F08                            
00005F08                            TryAg_Exit:
00005F08 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005F0E 4E75                       		rts	
00005F10                            
00005F10                            ; ===========================================================================
00005F10                            ; ---------------------------------------------------------------------------
00005F10                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00005F10                            ; ---------------------------------------------------------------------------
00005F10                            
00005F10                            Obj8B:					; XREF: Obj_Index
00005F10 7000                       		moveq	#0,d0
00005F12 1028 0024                  		move.b	$24(a0),d0
00005F16 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
00005F1A 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00005F1E 4EF9 0000 0000             		jmp	DisplaySprite
00005F24                            ; ===========================================================================
00005F24 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
00005F26 0000                       		dc.w Obj8B_Animate-Obj8B_Index
00005F28 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
00005F2A 0000                       		dc.w loc_5A8E-Obj8B_Index
00005F2C                            ; ===========================================================================
00005F2C                            
00005F2C                            Obj8B_Main:				; XREF: Obj8B_Index
00005F2C 5428 0024                  		addq.b	#2,$24(a0)
00005F30 317C 0120 0008             		move.w	#$120,8(a0)
00005F36 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005F3C 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005F44 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005F4A 117C 0000 0001             		move.b	#0,1(a0)
00005F50 117C 0002 0018             		move.b	#2,$18(a0)
00005F56 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005F5C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005F62 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005F64 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005F6A 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005F70 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005F76 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005F7C                            
00005F7C                            Obj8B_Animate:				; XREF: Obj8B_Index
00005F7C 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005F82 4EF9 0000 0000             		jmp	AnimateSprite
00005F88                            ; ===========================================================================
00005F88                            
00005F88                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005F88 5428 0024                  		addq.b	#2,$24(a0)
00005F8C 7002                       		moveq	#2,d0
00005F8E 0828 0000 001C             		btst	#0,$1C(a0)
00005F94 6700                       		beq.s	loc_5A6A
00005F96 4440                       		neg.w	d0
00005F98                            
00005F98                            loc_5A6A:
00005F98 43F8 D800                  		lea	($FFFFD800).w,a1
00005F9C 7205                       		moveq	#5,d1
00005F9E                            
00005F9E                            loc_5A70:
00005F9E 1340 003E                  		move.b	d0,$3E(a1)
00005FA2 3400                       		move.w	d0,d2
00005FA4 E742                       		asl.w	#3,d2
00005FA6 D529 0026                  		add.b	d2,$26(a1)
00005FAA 43E9 0040                  		lea	$40(a1),a1
00005FAE 51C9 FFEE                  		dbf	d1,loc_5A70
00005FB2 5228 001A                  		addq.b	#1,$1A(a0)
00005FB6 317C 0070 0030             		move.w	#112,$30(a0)
00005FBC                            
00005FBC                            loc_5A8E:				; XREF: Obj8B_Index
00005FBC 5368 0030                  		subq.w	#1,$30(a0)
00005FC0 6A00                       		bpl.s	locret_5AA0
00005FC2 0868 0000 001C             		bchg	#0,$1C(a0)
00005FC8 117C 0002 0024             		move.b	#2,$24(a0)
00005FCE                            
00005FCE                            locret_5AA0:
00005FCE 4E75                       		rts	
00005FD0                            ; ===========================================================================
00005FD0                            Ani_obj8B:
00005FD0                            	include "_anim\obj8B.asm"
00005FD0                            ; ---------------------------------------------------------------------------
00005FD0                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005FD0                            ; ---------------------------------------------------------------------------
00005FD0 0000                       		dc.w byte_5AA8-Ani_obj8B
00005FD2 0000                       		dc.w byte_5AAC-Ani_obj8B
00005FD4 0000                       		dc.w byte_5AB0-Ani_obj8B
00005FD6 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005FDA 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005FDE 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005FF0                            		even
00005FF0                            		even
00005FF0                            
00005FF0                            ; ===========================================================================
00005FF0                            ; ---------------------------------------------------------------------------
00005FF0                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005FF0                            ; ---------------------------------------------------------------------------
00005FF0                            
00005FF0                            Obj8C:					; XREF: Obj_Index
00005FF0 7000                       		moveq	#0,d0
00005FF2 1028 0024                  		move.b	$24(a0),d0
00005FF6 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005FFA 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005FFE 4EF9 0000 0000             		jmp	DisplaySprite
00006004                            ; ===========================================================================
00006004 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00006006 0000                       		dc.w Obj8C_Move-Obj8C_Index
00006008                            ; ===========================================================================
00006008                            
00006008                            Obj8C_Main:				; XREF: Obj8C_Index
00006008 2248                       		movea.l	a0,a1
0000600A 7400                       		moveq	#0,d2
0000600C 7600                       		moveq	#0,d3
0000600E 7205                       		moveq	#5,d1
00006010 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006014                            
00006014                            Obj8C_MakeEms:				; XREF: loc_5B42
00006014 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00006018 5429 0024                  		addq.b	#2,$24(a1)
0000601C 237C 0000 5CA8 0004        		move.l	#Map_obj88,4(a1)
00006024 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000602A 137C 0000 0001             		move.b	#0,1(a1)
00006030 137C 0001 0018             		move.b	#1,$18(a1)
00006036 337C 0104 0008             		move.w	#$104,8(a1)
0000603C 337C 0120 0038             		move.w	#$120,$38(a1)
00006042 337C 00EC 000A             		move.w	#$EC,$A(a1)
00006048 3369 000A 003A             		move.w	$A(a1),$3A(a1)
0000604E 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006054 47F8 FE58                  		lea	($FFFFFE58).w,a3
00006058                            
00006058                            Obj8C_ChkEms:
00006058 7000                       		moveq	#0,d0
0000605A 1038 FE57                  		move.b	($FFFFFE57).w,d0
0000605E 5340                       		subq.w	#1,d0
00006060 6500                       		bcs.s	loc_5B42
00006062                            
00006062                            Obj8C_ChkEmLoop:
00006062 B433 0000                  		cmp.b	(a3,d0.w),d2
00006066 6600                       		bne.s	loc_5B3E
00006068 5202                       		addq.b	#1,d2
0000606A 60EC                       		bra.s	Obj8C_ChkEms
0000606C                            ; ===========================================================================
0000606C                            
0000606C                            loc_5B3E:
0000606C 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006070                            
00006070                            loc_5B42:
00006070 1342 001A                  		move.b	d2,$1A(a1)
00006074 5229 001A                  		addq.b	#1,$1A(a1)
00006078 5202                       		addq.b	#1,d2
0000607A 137C 0080 0026             		move.b	#$80,$26(a1)
00006080 1343 001E                  		move.b	d3,$1E(a1)
00006084 1343 001F                  		move.b	d3,$1F(a1)
00006088 0643 000A                  		addi.w	#$A,d3
0000608C 43E9 0040                  		lea	$40(a1),a1
00006090 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00006094                            
00006094                            Obj8C_Move:				; XREF: Obj8C_Index
00006094 4A68 003E                  		tst.w	$3E(a0)
00006098 6700                       		beq.s	locret_5BBA
0000609A 4A28 001E                  		tst.b	$1E(a0)
0000609E 6700                       		beq.s	loc_5B78
000060A0 5328 001E                  		subq.b	#1,$1E(a0)
000060A4 6600                       		bne.s	loc_5B80
000060A6                            
000060A6                            loc_5B78:
000060A6 3028 003E                  		move.w	$3E(a0),d0
000060AA D168 0026                  		add.w	d0,$26(a0)
000060AE                            
000060AE                            loc_5B80:
000060AE 1028 0026                  		move.b	$26(a0),d0
000060B2 6700                       		beq.s	loc_5B8C
000060B4 0C00 0080                  		cmpi.b	#$80,d0
000060B8 6600                       		bne.s	loc_5B96
000060BA                            
000060BA                            loc_5B8C:
000060BA 4268 003E                  		clr.w	$3E(a0)
000060BE 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000060C4                            
000060C4                            loc_5B96:
000060C4 4EB9 0000 2CFE             		jsr	(CalcSine).l
000060CA 7800                       		moveq	#0,d4
000060CC 1828 003C                  		move.b	$3C(a0),d4
000060D0 C3C4                       		muls.w	d4,d1
000060D2 E081                       		asr.l	#8,d1
000060D4 C1C4                       		muls.w	d4,d0
000060D6 E080                       		asr.l	#8,d0
000060D8 D268 0038                  		add.w	$38(a0),d1
000060DC D068 003A                  		add.w	$3A(a0),d0
000060E0 3141 0008                  		move.w	d1,8(a0)
000060E4 3140 000A                  		move.w	d0,$A(a0)
000060E8                            
000060E8                            locret_5BBA:
000060E8 4E75                       		rts	
000060EA                            ; ===========================================================================
000060EA                            ; ---------------------------------------------------------------------------
000060EA                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000060EA                            ; ---------------------------------------------------------------------------
000060EA                            Map_obj8B:
000060EA                            	include "_maps\obj8B.asm"
000060EA                            ; ---------------------------------------------------------------------------
000060EA                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000060EA                            ; ---------------------------------------------------------------------------
000060EA 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000060EE 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000060F2 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000060F6 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000060FA 08                         byte_5BCC:	dc.b 8
000060FB E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006100 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006105 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000610A F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
0000610F 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006114 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00006119 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000611E 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006123 08                         byte_5BF5:	dc.b 8
00006124 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00006129 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
0000612E E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006133 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00006138 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000613D 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006142 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006147 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000614C 08                         byte_5C1E:	dc.b 8
0000614D E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006152 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00006157 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
0000615C F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006161 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006166 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000616B 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006170 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006175 08                         byte_5C47:	dc.b 8
00006176 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000617B F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006180 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006185 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000618A 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
0000618F 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006194 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006199 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
0000619E 0C                         byte_5C70:	dc.b $C
0000619F ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000061A4 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000061A9 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000061AE 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000061B3 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000061B8 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000061BD 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000061C2 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000061C7 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000061CC 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000061D1 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000061D6 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000061DB 0A                         byte_5CAD:	dc.b $A
000061DC D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000061E1 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000061E6 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000061EB D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000061F0 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000061F5 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000061FA 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
000061FF 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006204 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006209 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
0000620E 0A                         byte_5CE0:	dc.b $A
0000620F C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006214 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006219 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
0000621E C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006223 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006228 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
0000622D 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006232 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006237 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
0000623C 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006241 0C                         byte_5D13:	dc.b $C
00006242 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006247 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
0000624C 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006251 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006256 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
0000625B FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006260 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006265 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
0000626A 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
0000626F 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006274 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006279 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
0000627E                            		even
0000627E                            		even
0000627E                            
0000627E                            ; ---------------------------------------------------------------------------
0000627E                            ; Ending sequence demos
0000627E                            ; ---------------------------------------------------------------------------
0000627E                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
000062AC                            		even
000062AC                            Demo_EndMZ:	incbin	demodata\e_mz.bin
000062EC                            		even
000062EC                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
0000631C                            		even
0000631C                            Demo_EndLZ:	incbin	demodata\e_lz.bin
0000634C                            		even
0000634C                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
0000636C                            		even
0000636C                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
0000638C                            		even
0000638C                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
000063BC                            		even
000063BC                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
000063EC                            		even
000063EC                            
000063EC                            ; ---------------------------------------------------------------------------
000063EC                            ; Subroutine to	load level boundaries and start	locations
000063EC                            ; ---------------------------------------------------------------------------
000063EC                            
000063EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063EC                            
000063EC                            
000063EC                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
000063EC 7000                       		moveq	#0,d0
000063EE 11C0 F740                  		move.b	d0,($FFFFF740).w
000063F2 11C0 F741                  		move.b	d0,($FFFFF741).w
000063F6 11C0 F746                  		move.b	d0,($FFFFF746).w
000063FA 11C0 F748                  		move.b	d0,($FFFFF748).w
000063FE 11C0 F742                  		move.b	d0,($FFFFF742).w
00006402 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006406 ED08                       		lsl.b	#6,d0
00006408 E848                       		lsr.w	#4,d0
0000640A 3200                       		move.w	d0,d1
0000640C D040                       		add.w	d0,d0
0000640E D041                       		add.w	d1,d0
00006410 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006414 3018                       		move.w	(a0)+,d0
00006416 31C0 F730                  		move.w	d0,($FFFFF730).w
0000641A 2018                       		move.l	(a0)+,d0
0000641C 21C0 F728                  		move.l	d0,($FFFFF728).w
00006420 21C0 F720                  		move.l	d0,($FFFFF720).w
00006424 2018                       		move.l	(a0)+,d0
00006426 21C0 F72C                  		move.l	d0,($FFFFF72C).w
0000642A 21C0 F724                  		move.l	d0,($FFFFF724).w
0000642E 3038 F728                  		move.w	($FFFFF728).w,d0
00006432 0640 0240                  		addi.w	#$240,d0
00006436 31C0 F732                  		move.w	d0,($FFFFF732).w
0000643A 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006440 3018                       		move.w	(a0)+,d0
00006442 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006446 6000 0000                  		bra.w	LevSz_ChkLamp
0000644A                            ; ===========================================================================
0000644A                            ; ---------------------------------------------------------------------------
0000644A                            ; Level size array and ending start location array
0000644A                            ; ---------------------------------------------------------------------------
0000644A                            LevelSizeArray:        ; GHZ
0000644A 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006456 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006462 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
0000646E 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
0000647A                                    ; LZ
0000647A 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00006486 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00006492 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
0000649E 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
000064AA                                    ; MZ
000064AA 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
000064B6 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
000064C2 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
000064CE 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
000064DA                                    ; SLZ
000064DA 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
000064E6 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
000064F2 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
000064FE 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000650A                                    ; SYZ
0000650A 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006516 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006522 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
0000652E 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
0000653A                                    ; SBZ
0000653A 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006546 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006552 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
0000655E 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
0000656A                                    ; Ending
0000656A 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006576 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006582 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
0000658E 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
0000659A                                    even
0000659A                            EndingStLocArray:
0000659A                            		incbin	misc\sloc_end.bin
000065BA                            		even
000065BA                            
000065BA                            ; ===========================================================================
000065BA                            
000065BA                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
000065BA 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
000065BE 6700                       		beq.s	LevSz_StartLoc	; if not, branch
000065C0 4EB9 0000 0000             		jsr	Obj79_LoadInfo
000065C6 3238 D008                  		move.w	($FFFFD008).w,d1
000065CA 3038 D00C                  		move.w	($FFFFD00C).w,d0
000065CE 6000                       		bra.s	loc_60D0
000065D0                            ; ===========================================================================
000065D0                            
000065D0                            LevSz_StartLoc:				; XREF: LevelSizeLoad
000065D0 3038 FE10                  		move.w	($FFFFFE10).w,d0
000065D4 ED08                       		lsl.b	#6,d0
000065D6 E848                       		lsr.w	#4,d0
000065D8 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000065DC 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000065E0 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000065E2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000065E6 5340                       		subq.w	#1,d0
000065E8 E548                       		lsl.w	#2,d0
000065EA 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000065EE                            
000065EE                            LevSz_SonicPos:
000065EE 7200                       		moveq	#0,d1
000065F0 3219                       		move.w	(a1)+,d1
000065F2 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000065F6 7000                       		moveq	#0,d0
000065F8 3011                       		move.w	(a1),d0
000065FA 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000065FE                            
000065FE                            loc_60D0:				; XREF: LevSz_ChkLamp
000065FE 0441 00A0                  		subi.w	#$A0,d1
00006602 6400                       		bcc.s	loc_60D8
00006604 7200                       		moveq	#0,d1
00006606                            
00006606                            loc_60D8:
00006606 3438 F72A                  		move.w	($FFFFF72A).w,d2
0000660A B242                       		cmp.w	d2,d1
0000660C 6500                       		bcs.s	loc_60E2
0000660E 3202                       		move.w	d2,d1
00006610                            
00006610                            loc_60E2:
00006610 31C1 F700                  		move.w	d1,($FFFFF700).w
00006614 0440 0060                  		subi.w	#$60,d0
00006618 6400                       		bcc.s	loc_60EE
0000661A 7000                       		moveq	#0,d0
0000661C                            
0000661C                            loc_60EE:
0000661C B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006620 6D00                       		blt.s	loc_60F8
00006622 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006626                            
00006626                            loc_60F8:
00006626 31C0 F704                  		move.w	d0,($FFFFF704).w
0000662A 6100 0000                  		bsr.w	BgScrollSpeed
0000662E 7000                       		moveq	#0,d0
00006630 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006634 E508                       		lsl.b	#2,d0
00006636 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
0000663C 6000 0000                  		bra.w	LevSz_Unk
00006640                            ; ===========================================================================
00006640                            ; ---------------------------------------------------------------------------
00006640                            ; Sonic	start location array
00006640                            ; ---------------------------------------------------------------------------
00006640                            StartLocArray:	incbin	misc\sloc_lev.bin
000066B0                            		even
000066B0                            
000066B0                            ; ---------------------------------------------------------------------------
000066B0                            ; Which	256x256	tiles contain loops or roll-tunnels
000066B0                            ; ---------------------------------------------------------------------------
000066B0                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
000066B0                            ; loop,	loop, tunnel, tunnel
000066B0                            ; ---------------------------------------------------------------------------
000066B0                            LoopTileNums:	incbin	misc\loopnums.bin
000066CC                            		even
000066CC                            
000066CC                            ; ===========================================================================
000066CC                            
000066CC                            LevSz_Unk:				; XREF: LevelSizeLoad
000066CC 7000                       		moveq	#0,d0
000066CE 1038 FE10                  		move.b	($FFFFFE10).w,d0
000066D2 E748                       		lsl.w	#3,d0
000066D4 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000066D8 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000066DC 24D9                       		move.l	(a1)+,(a2)+
000066DE 24D9                       		move.l	(a1)+,(a2)+
000066E0 4E75                       		rts	
000066E2                            ; End of function LevelSizeLoad
000066E2                            
000066E2                            ; ===========================================================================
000066E2 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000066EA 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066F2 0800 0100 0100 0000        		dc.l $8000100, $1000000
000066FA 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006702 0800 0100 0100 0000        		dc.l $8000100, $1000000
0000670A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006712 0070 0100 0100 0100        		dc.l $700100, $1000100
0000671A                            
0000671A                            ; ---------------------------------------------------------------------------
0000671A                            ; Subroutine to	set scroll speed of some backgrounds
0000671A                            ; ---------------------------------------------------------------------------
0000671A                            
0000671A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000671A                            
0000671A                            
0000671A                            BgScrollSpeed:				; XREF: LevelSizeLoad
0000671A 4A38 FE30                  		tst.b	($FFFFFE30).w
0000671E 6600                       		bne.s	loc_6206
00006720 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006724 31C0 F714                  		move.w	d0,($FFFFF714).w
00006728 31C1 F708                  		move.w	d1,($FFFFF708).w
0000672C 31C1 F710                  		move.w	d1,($FFFFF710).w
00006730 31C1 F718                  		move.w	d1,($FFFFF718).w
00006734                            
00006734                            loc_6206:
00006734 7400                       		moveq	#0,d2
00006736 1438 FE10                  		move.b	($FFFFFE10).w,d2
0000673A D442                       		add.w	d2,d2
0000673C 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006740 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006744                            ; End of function BgScrollSpeed
00006744                            
00006744                            ; ===========================================================================
00006744 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006748 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
0000674C 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006750 0000                       		dc.w BgScroll_End-BgScroll_Index
00006752                            ; ===========================================================================
00006752                            
00006752                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006752 6000 0000                  		bra.w	Deform_GHZ
00006756                            ; ===========================================================================
00006756                            
00006756                            BgScroll_LZ:				; XREF: BgScroll_Index
00006756 E280                       		asr.l	#1,d0
00006758 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000675C 4E75                       		rts	
0000675E                            ; ===========================================================================
0000675E                            
0000675E                            BgScroll_MZ:				; XREF: BgScroll_Index
0000675E 4E75                       		rts	
00006760                            ; ===========================================================================
00006760                            
00006760                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006760 E280                       		asr.l	#1,d0
00006762 0640 00C0                  		addi.w	#$C0,d0
00006766 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000676A 4E75                       		rts	
0000676C                            ; ===========================================================================
0000676C                            
0000676C                            BgScroll_SYZ:				; XREF: BgScroll_Index
0000676C E980                       		asl.l	#4,d0
0000676E 2400                       		move.l	d0,d2
00006770 E380                       		asl.l	#1,d0
00006772 D082                       		add.l	d2,d0
00006774 E080                       		asr.l	#8,d0
00006776 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000677A 31C0 F714                  		move.w	d0,($FFFFF714).w
0000677E 4E75                       		rts	
00006780                            ; ===========================================================================
00006780                            
00006780                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006780 E980                       		asl.l	#4,d0
00006782 E380                       		asl.l	#1,d0
00006784 E080                       		asr.l	#8,d0
00006786 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000678A 4E75                       		rts	
0000678C                            ; ===========================================================================
0000678C                            
0000678C                            BgScroll_End:				; XREF: BgScroll_Index
0000678C 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006792 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006798 4E75                       		rts	
0000679A                            ; ===========================================================================
0000679A 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
000067A0 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
000067A6 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
000067AC 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
000067B2 4E75                       		rts
000067B4                            
000067B4                            ; ---------------------------------------------------------------------------
000067B4                            ; Background layer deformation subroutines
000067B4                            ; ---------------------------------------------------------------------------
000067B4                            
000067B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067B4                            
000067B4                            
000067B4                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
000067B4 4A38 F744                  		tst.b	($FFFFF744).w
000067B8 6700                       		beq.s	loc_628E
000067BA 4E75                       		rts	
000067BC                            ; ===========================================================================
000067BC                            
000067BC                            loc_628E:
000067BC 4278 F754                  		clr.w	($FFFFF754).w
000067C0 4278 F756                  		clr.w	($FFFFF756).w
000067C4 4278 F758                  		clr.w	($FFFFF758).w
000067C8 4278 F75A                  		clr.w	($FFFFF75A).w
000067CC 6100 0000                  		bsr.w	ScrollHoriz
000067D0 6100 0000                  		bsr.w	ScrollVertical
000067D4 6100 0000                  		bsr.w	DynScrResizeLoad
000067D8 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000067DE 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000067E4 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000067EA 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000067F0 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000067F6 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000067FC 7000                       		moveq	#0,d0
000067FE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006802 D040                       		add.w	d0,d0
00006804 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00006808 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000680C                            ; End of function DeformBgLayer
0000680C                            
0000680C                            ; ===========================================================================
0000680C                            ; ---------------------------------------------------------------------------
0000680C                            ; Offset index for background layer deformation	code
0000680C                            ; ---------------------------------------------------------------------------
0000680C 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
00006810 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00006814 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00006818 0000                       		dc.w Deform_GHZ-Deform_Index
0000681A                            ; ---------------------------------------------------------------------------
0000681A                            ; Green	Hill Zone background layer deformation code
0000681A                            ; ---------------------------------------------------------------------------
0000681A                            
0000681A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000681A                            
0000681A                            
0000681A                            Deform_GHZ:				; XREF: Deform_Index
0000681A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000681E 48C4                       		ext.l	d4
00006820 EB84                       		asl.l	#5,d4
00006822 2204                       		move.l	d4,d1
00006824 E384                       		asl.l	#1,d4
00006826 D881                       		add.l	d1,d4
00006828 7A00                       		moveq	#0,d5
0000682A 6100 0000                  		bsr.w	ScrollBlock1
0000682E 6100 0000                  		bsr.w	ScrollBlock4
00006832 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006836 3038 F704                  		move.w	($FFFFF704).w,d0
0000683A 0240 07FF                  		andi.w	#$7FF,d0
0000683E EA48                       		lsr.w	#5,d0
00006840 4440                       		neg.w	d0
00006842 0640 0026                  		addi.w	#$26,d0
00006846 31C0 F714                  		move.w	d0,($FFFFF714).w
0000684A 3800                       		move.w	d0,d4
0000684C 6100 0000                  		bsr.w	ScrollBlock3
00006850 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006856 323C 006F                  		move.w	#$6F,d1
0000685A 9244                       		sub.w	d4,d1
0000685C 3038 F700                  		move.w	($FFFFF700).w,d0
00006860 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006866 6600                       		bne.s	loc_633C
00006868 7000                       		moveq	#0,d0
0000686A                            
0000686A                            loc_633C:
0000686A 4440                       		neg.w	d0
0000686C 4840                       		swap	d0
0000686E 3038 F708                  		move.w	($FFFFF708).w,d0
00006872 4440                       		neg.w	d0
00006874                            
00006874                            loc_6346:
00006874 22C0                       		move.l	d0,(a1)+
00006876 51C9 FFFC                  		dbf	d1,loc_6346
0000687A 323C 0027                  		move.w	#$27,d1
0000687E 3038 F710                  		move.w	($FFFFF710).w,d0
00006882 4440                       		neg.w	d0
00006884                            
00006884                            loc_6356:
00006884 22C0                       		move.l	d0,(a1)+
00006886 51C9 FFFC                  		dbf	d1,loc_6356
0000688A 3038 F710                  		move.w	($FFFFF710).w,d0
0000688E 0640 0000                  		addi.w	#0,d0
00006892 3438 F700                  		move.w	($FFFFF700).w,d2
00006896 0642 FE00                  		addi.w	#-$200,d2
0000689A 9440                       		sub.w	d0,d2
0000689C 48C2                       		ext.l	d2
0000689E E182                       		asl.l	#8,d2
000068A0 85FC 0068                  		divs.w	#$68,d2
000068A4 48C2                       		ext.l	d2
000068A6 E182                       		asl.l	#8,d2
000068A8 7600                       		moveq	#0,d3
000068AA 3600                       		move.w	d0,d3
000068AC 323C 0047                  		move.w	#$47,d1
000068B0 D244                       		add.w	d4,d1
000068B2                            
000068B2                            loc_6384:
000068B2 3003                       		move.w	d3,d0
000068B4 4440                       		neg.w	d0
000068B6 22C0                       		move.l	d0,(a1)+
000068B8 4843                       		swap	d3
000068BA D682                       		add.l	d2,d3
000068BC 4843                       		swap	d3
000068BE 51C9 FFF2                  		dbf	d1,loc_6384
000068C2 4E75                       		rts	
000068C4                            ; End of function Deform_GHZ
000068C4                            
000068C4                            ; ---------------------------------------------------------------------------
000068C4                            ; Labyrinth Zone background layer deformation code
000068C4                            ; ---------------------------------------------------------------------------
000068C4                            
000068C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068C4                            
000068C4                            
000068C4                            Deform_LZ:				; XREF: Deform_Index
000068C4 3838 F73A                  		move.w	($FFFFF73A).w,d4
000068C8 48C4                       		ext.l	d4
000068CA EF84                       		asl.l	#7,d4
000068CC 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000068D0 48C5                       		ext.l	d5
000068D2 EF85                       		asl.l	#7,d5
000068D4 6100 0000                  		bsr.w	ScrollBlock1
000068D8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000068DE 43F8 CC00                  		lea	($FFFFCC00).w,a1
000068E2 323C 00DF                  		move.w	#$DF,d1
000068E6 3038 F700                  		move.w	($FFFFF700).w,d0
000068EA 4440                       		neg.w	d0
000068EC 4840                       		swap	d0
000068EE 3038 F708                  		move.w	($FFFFF708).w,d0
000068F2 4440                       		neg.w	d0
000068F4                            
000068F4                            loc_63C6:
000068F4 22C0                       		move.l	d0,(a1)+
000068F6 51C9 FFFC                  		dbf	d1,loc_63C6
000068FA 3038 F646                  		move.w	($FFFFF646).w,d0
000068FE 9078 F704                  		sub.w	($FFFFF704).w,d0
00006902 4E75                       		rts	
00006904                            ; End of function Deform_LZ
00006904                            
00006904                            ; ---------------------------------------------------------------------------
00006904                            ; Marble Zone background layer deformation code
00006904                            ; ---------------------------------------------------------------------------
00006904                            
00006904                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006904                            
00006904                            
00006904                            Deform_MZ:				; XREF: Deform_Index
00006904 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006908 48C4                       		ext.l	d4
0000690A ED84                       		asl.l	#6,d4
0000690C 2204                       		move.l	d4,d1
0000690E E384                       		asl.l	#1,d4
00006910 D881                       		add.l	d1,d4
00006912 7A00                       		moveq	#0,d5
00006914 6100 0000                  		bsr.w	ScrollBlock1
00006918 303C 0200                  		move.w	#$200,d0
0000691C 3238 F704                  		move.w	($FFFFF704).w,d1
00006920 0441 01C8                  		subi.w	#$1C8,d1
00006924 6500                       		bcs.s	loc_6402
00006926 3401                       		move.w	d1,d2
00006928 D241                       		add.w	d1,d1
0000692A D242                       		add.w	d2,d1
0000692C E441                       		asr.w	#2,d1
0000692E D041                       		add.w	d1,d0
00006930                            
00006930                            loc_6402:
00006930 31C0 F714                  		move.w	d0,($FFFFF714).w
00006934 6100 0000                  		bsr.w	ScrollBlock3
00006938 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000693E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006942 323C 00DF                  		move.w	#$DF,d1
00006946 3038 F700                  		move.w	($FFFFF700).w,d0
0000694A 4440                       		neg.w	d0
0000694C 4840                       		swap	d0
0000694E 3038 F708                  		move.w	($FFFFF708).w,d0
00006952 4440                       		neg.w	d0
00006954                            
00006954                            loc_6426:
00006954 22C0                       		move.l	d0,(a1)+
00006956 51C9 FFFC                  		dbf	d1,loc_6426
0000695A 4E75                       		rts	
0000695C                            ; End of function Deform_MZ
0000695C                            
0000695C                            ; ---------------------------------------------------------------------------
0000695C                            ; Star Light Zone background layer deformation code
0000695C                            ; ---------------------------------------------------------------------------
0000695C                            
0000695C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000695C                            
0000695C                            
0000695C                            Deform_SLZ:				; XREF: Deform_Index
0000695C 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006960 48C4                       		ext.l	d4
00006962 EB84                       		asl.l	#5,d4
00006964 2204                       		move.l	d4,d1
00006966 E384                       		asl.l	#1,d4
00006968 D881                       		add.l	d1,d4
0000696A 7A00                       		moveq	#0,d5
0000696C 6100 0000                  		bsr.w	ScrollBlock1
00006970 6100 0000                  		bsr.w	ScrollBlock3
00006974 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006978                            	;	move.w	($FFFFF704).w,d0
00006978                            	;	andi.w	#$7FF,d0
00006978 EA48                       		lsr.w	#5,d0
0000697A 4440                       		neg.w	d0
0000697C 0640 0026                  		addi.w	#$26,d0
00006980 31C0 F714                  		move.w	d0,($FFFFF714).w
00006984 3800                       		move.w	d0,d4
00006986                            	;	bsr.w	ScrollBlock3
00006986 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
0000698C 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
00006990                            
00006990 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006994 4440                       		neg.w	d0			; negate (positive to negative)
00006996 4840                       		swap	d0			; send to the left side of d0
00006998 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000699C 45F8 A800                  		lea	($FFFFA800).w,a2
000069A0 069A 0000 5000             		addi.l	#$5000,(a2)+
000069A6 069A 0000 C000             		addi.l	#$C000,(a2)+
000069AC 3038 A800                  		move.w	($FFFFA800).w,d0
000069B0 4440                       		neg.w	d0			; negate (positive to negative)
000069B2 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
000069B4 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069B8                            slz_DeformLoop_1:
000069B8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069BA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
000069BE                            
000069BE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069C2 4440                       		neg.w	d0			; negate (positive to negative)
000069C4 4840                       		swap	d0			; send to the left side of d0
000069C6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069CA 45F8 A800                  		lea	($FFFFA800).w,a2
000069CE 069A 0000 5000             		addi.l	#$5000,(a2)+
000069D4 069A 0000 C000             		addi.l	#$C000,(a2)+
000069DA 3038 A800                  		move.w	($FFFFA800).w,d0
000069DE 4440                       		neg.w	d0			; negate (positive to negative)
000069E0 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000069E2 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000069E6                            slz_DeformLoop_2:
000069E6 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000069E8 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000069EC                            
000069EC 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000069F0 4440                       		neg.w	d0			; negate (positive to negative)
000069F2 4840                       		swap	d0			; send to the left side of d0
000069F4 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000069F8 45F8 A800                  		lea	($FFFFA800).w,a2
000069FC 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A02 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A08 3038 A800                  		move.w	($FFFFA800).w,d0
00006A0C 4440                       		neg.w	d0			; negate (positive to negative)
00006A0E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A10 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A14                            slz_DeformLoop_3:
00006A14 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A16 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
00006A1A                            
00006A1A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A1E 4440                       		neg.w	d0			; negate (positive to negative)
00006A20 4840                       		swap	d0			; send to the left side of d0
00006A22 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A26 45F8 A800                  		lea	($FFFFA800).w,a2
00006A2A 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A30 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A36 3038 A800                  		move.w	($FFFFA800).w,d0
00006A3A 4440                       		neg.w	d0			; negate (positive to negative)
00006A3C E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006A3E 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A42                            slz_DeformLoop_4:
00006A42 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A44 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006A48                            
00006A48 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A4C 4440                       		neg.w	d0			; negate (positive to negative)
00006A4E 4840                       		swap	d0			; send to the left side of d0
00006A50 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A54 45F8 A800                  		lea	($FFFFA800).w,a2
00006A58 069A 0000 5000             		addi.l	#$5000,(a2)+
00006A5E 069A 0000 C000             		addi.l	#$C000,(a2)+
00006A64 3038 A800                  		move.w	($FFFFA800).w,d0
00006A68 4440                       		neg.w	d0			; negate (positive to negative)
00006A6A E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006A6C 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A70                            slz_DeformLoop_5:
00006A70 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A72 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006A76                            
00006A76 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A7A 4440                       		neg.w	d0			; negate (positive to negative)
00006A7C 4840                       		swap	d0			; send to the left side of d0
00006A7E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A82 4440                       		neg.w	d0			; negate (positive to negative)
00006A84 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006A86 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006A8A                            slz_DeformLoop_6:
00006A8A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006A8C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
00006A90                            
00006A90 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006A94 4440                       		neg.w	d0			; negate (positive to negative)
00006A96 4840                       		swap	d0			; send to the left side of d0
00006A98 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006A9C 4440                       		neg.w	d0			; negate (positive to negative)
00006A9E EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00006AA0 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AA4                            slz_DeformLoop_7:
00006AA4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AA6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006AAA                            
00006AAA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AAE 4440                       		neg.w	d0			; negate (positive to negative)
00006AB0 4840                       		swap	d0			; send to the left side of d0
00006AB2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AB6 4440                       		neg.w	d0			; negate (positive to negative)
00006AB8 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006ABA 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006ABE                            slz_DeformLoop_8:
00006ABE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AC0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006AC4                            
00006AC4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AC8 4440                       		neg.w	d0			; negate (positive to negative)
00006ACA 4840                       		swap	d0			; send to the left side of d0
00006ACC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AD0 4440                       		neg.w	d0			; negate (positive to negative)
00006AD2 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006AD4 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AD8                            slz_DeformLoop_9:
00006AD8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006ADA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
00006ADE                            
00006ADE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AE2 4440                       		neg.w	d0			; negate (positive to negative)
00006AE4 4840                       		swap	d0			; send to the left side of d0
00006AE6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006AEA 4440                       		neg.w	d0			; negate (positive to negative)
00006AEC E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006AEE 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006AF2                            slz_DeformLoop_10:
00006AF2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006AF4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00006AF8                            
00006AF8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006AFC 4440                       		neg.w	d0			; negate (positive to negative)
00006AFE 4840                       		swap	d0			; send to the left side of d0
00006B00 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B04 4440                       		neg.w	d0			; negate (positive to negative)
00006B06 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00006B08 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B0C                            slz_DeformLoop_11:
00006B0C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B0E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00006B12                            
00006B12 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B16 4440                       		neg.w	d0			; negate (positive to negative)
00006B18 4840                       		swap	d0			; send to the left side of d0
00006B1A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B1E 4440                       		neg.w	d0			; negate (positive to negative)
00006B20 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00006B22 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B26                            slz_DeformLoop_12:
00006B26 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B28 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
00006B2C                            
00006B2C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006B30 4440                       		neg.w	d0			; negate (positive to negative)
00006B32 4840                       		swap	d0			; send to the left side of d0
00006B34 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006B38 4440                       		neg.w	d0			; negate (positive to negative)
00006B3A E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006B3C 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006B40                            slz_DeformLoop_13:
00006B40 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006B42 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006B46 4E75                       		rts	
00006B48                            ; End of function Deform_SLZ
00006B48 4E75                       		rts	
00006B4A                            ; End of function Deform_SLZ_2
00006B4A                            
00006B4A                            ; ---------------------------------------------------------------------------
00006B4A                            ; Spring Yard Zone background layer deformation	code
00006B4A                            ; ---------------------------------------------------------------------------
00006B4A                            
00006B4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B4A                            
00006B4A                            
00006B4A                            Deform_SYZ:				; XREF: Deform_Index
00006B4A 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B4E 48C4                       		ext.l	d4
00006B50 ED84                       		asl.l	#6,d4
00006B52 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B56 48C5                       		ext.l	d5
00006B58 E985                       		asl.l	#4,d5
00006B5A 2205                       		move.l	d5,d1
00006B5C E385                       		asl.l	#1,d5
00006B5E DA81                       		add.l	d1,d5
00006B60 6100 0000                  		bsr.w	ScrollBlock1
00006B64 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006B6A 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006B6E 323C 00DF                  		move.w	#$DF,d1
00006B72 3038 F700                  		move.w	($FFFFF700).w,d0
00006B76 4440                       		neg.w	d0
00006B78 4840                       		swap	d0
00006B7A 3038 F708                  		move.w	($FFFFF708).w,d0
00006B7E 4440                       		neg.w	d0
00006B80                            
00006B80                            loc_653C:
00006B80 22C0                       		move.l	d0,(a1)+
00006B82 51C9 FFFC                  		dbf	d1,loc_653C
00006B86 4E75                       		rts	
00006B88                            ; End of function Deform_SYZ
00006B88                            
00006B88                            ; ---------------------------------------------------------------------------
00006B88                            ; Scrap	Brain Zone background layer deformation	code
00006B88                            ; ---------------------------------------------------------------------------
00006B88                            
00006B88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B88                            
00006B88                            
00006B88                            Deform_SBZ:				; XREF: Deform_Index
00006B88 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006B8C 48C4                       		ext.l	d4
00006B8E ED84                       		asl.l	#6,d4
00006B90 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006B94 48C5                       		ext.l	d5
00006B96 E985                       		asl.l	#4,d5
00006B98 E385                       		asl.l	#1,d5
00006B9A 6100 0000                  		bsr.w	ScrollBlock1
00006B9E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006BA4 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006BA8 323C 00DF                  		move.w	#$DF,d1
00006BAC 3038 F700                  		move.w	($FFFFF700).w,d0
00006BB0 4440                       		neg.w	d0
00006BB2 4840                       		swap	d0
00006BB4 3038 F708                  		move.w	($FFFFF708).w,d0
00006BB8 4440                       		neg.w	d0
00006BBA                            
00006BBA                            loc_6576:
00006BBA 22C0                       		move.l	d0,(a1)+
00006BBC 51C9 FFFC                  		dbf	d1,loc_6576
00006BC0 4E75                       		rts	
00006BC2                            ; End of function Deform_SBZ
00006BC2                            
00006BC2                            ; ---------------------------------------------------------------------------
00006BC2                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006BC2                            ; ---------------------------------------------------------------------------
00006BC2                            
00006BC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BC2                            
00006BC2                            
00006BC2                            ScrollHoriz:				; XREF: DeformBgLayer
00006BC2 3838 F700                  		move.w	($FFFFF700).w,d4
00006BC6 6100                       		bsr.s	ScrollHoriz2
00006BC8 3038 F700                  		move.w	($FFFFF700).w,d0
00006BCC 0240 0010                  		andi.w	#$10,d0
00006BD0 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006BD4 B300                       		eor.b	d1,d0
00006BD6 6600                       		bne.s	locret_65B0
00006BD8 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00006BDE 3038 F700                  		move.w	($FFFFF700).w,d0
00006BE2 9044                       		sub.w	d4,d0
00006BE4 6A00                       		bpl.s	loc_65AA
00006BE6 08F8 0002 F754             		bset	#2,($FFFFF754).w
00006BEC 4E75                       		rts	
00006BEE                            ; ===========================================================================
00006BEE                            
00006BEE                            loc_65AA:
00006BEE 08F8 0003 F754             		bset	#3,($FFFFF754).w
00006BF4                            
00006BF4                            locret_65B0:
00006BF4 4E75                       		rts	
00006BF6                            ; End of function ScrollHoriz
00006BF6                            
00006BF6                            
00006BF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BF6                            
00006BF6                            
00006BF6                            ScrollHoriz2:				; XREF: ScrollHoriz
00006BF6 3038 D008                  		move.w	($FFFFD008).w,d0
00006BFA 9078 F700                  		sub.w	($FFFFF700).w,d0
00006BFE 0440 0090                  		subi.w	#$90,d0
00006C02 6500                       		bcs.s	loc_65F6
00006C04 0440 0010                  		subi.w	#$10,d0
00006C08 6400                       		bcc.s	loc_65CC
00006C0A 4278 F73A                  		clr.w	($FFFFF73A).w
00006C0E 4E75                       		rts	
00006C10                            ; ===========================================================================
00006C10                            
00006C10                            loc_65CC:
00006C10 0C40 0010                  		cmpi.w	#$10,d0
00006C14 6500                       		bcs.s	loc_65D6
00006C16 303C 0010                  		move.w	#$10,d0
00006C1A                            
00006C1A                            loc_65D6:
00006C1A D078 F700                  		add.w	($FFFFF700).w,d0
00006C1E B078 F72A                  		cmp.w	($FFFFF72A).w,d0
00006C22 6D00                       		blt.s	loc_65E4
00006C24 3038 F72A                  		move.w	($FFFFF72A).w,d0
00006C28                            
00006C28                            loc_65E4:
00006C28 3200                       		move.w	d0,d1
00006C2A 9278 F700                  		sub.w	($FFFFF700).w,d1
00006C2E E141                       		asl.w	#8,d1
00006C30 31C0 F700                  		move.w	d0,($FFFFF700).w
00006C34 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006C38 4E75                       		rts	
00006C3A                            ; ===========================================================================
00006C3A                            
00006C3A                            loc_65F6:				; XREF: ScrollHoriz2
00006C3A D078 F700                  		add.w	($FFFFF700).w,d0
00006C3E B078 F728                  		cmp.w	($FFFFF728).w,d0
00006C42 6EE4                       		bgt.s	loc_65E4
00006C44 3038 F728                  		move.w	($FFFFF728).w,d0
00006C48 60DE                       		bra.s	loc_65E4
00006C4A                            ; End of function ScrollHoriz2
00006C4A                            
00006C4A                            ; ===========================================================================
00006C4A 4A40                       		tst.w	d0
00006C4C 6A00                       		bpl.s	loc_6610
00006C4E 303C FFFE                  		move.w	#-2,d0
00006C52 60E6                       		bra.s	loc_65F6
00006C54                            ; ===========================================================================
00006C54                            
00006C54                            loc_6610:
00006C54 303C 0002                  		move.w	#2,d0
00006C58 60B6                       		bra.s	loc_65CC
00006C5A                            
00006C5A                            ; ---------------------------------------------------------------------------
00006C5A                            ; Subroutine to	scroll the level vertically as Sonic moves
00006C5A                            ; ---------------------------------------------------------------------------
00006C5A                            
00006C5A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C5A                            
00006C5A                            
00006C5A                            ScrollVertical:				; XREF: DeformBgLayer
00006C5A 7200                       		moveq	#0,d1
00006C5C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006C60 9078 F704                  		sub.w	($FFFFF704).w,d0
00006C64 0838 0002 D022             		btst	#2,($FFFFD022).w
00006C6A 6700                       		beq.s	loc_662A
00006C6C 5B40                       		subq.w	#5,d0
00006C6E                            
00006C6E                            loc_662A:
00006C6E 0838 0001 D022             		btst	#1,($FFFFD022).w
00006C74 6700                       		beq.s	loc_664A
00006C76 0640 0020                  		addi.w	#$20,d0
00006C7A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C7E 6500                       		bcs.s	loc_6696
00006C80 0440 0040                  		subi.w	#$40,d0
00006C84 6400                       		bcc.s	loc_6696
00006C86 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C8A 6600                       		bne.s	loc_66A8
00006C8C 6000                       		bra.s	loc_6656
00006C8E                            ; ===========================================================================
00006C8E                            
00006C8E                            loc_664A:
00006C8E 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006C92 6600                       		bne.s	loc_665C
00006C94 4A38 F75C                  		tst.b	($FFFFF75C).w
00006C98 6600                       		bne.s	loc_66A8
00006C9A                            
00006C9A                            loc_6656:
00006C9A 4278 F73C                  		clr.w	($FFFFF73C).w
00006C9E 4E75                       		rts	
00006CA0                            ; ===========================================================================
00006CA0                            
00006CA0                            loc_665C:
00006CA0 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006CA6 6600                       		bne.s	loc_6684
00006CA8 3238 D014                  		move.w	($FFFFD014).w,d1
00006CAC 6A00                       		bpl.s	loc_666C
00006CAE 4441                       		neg.w	d1
00006CB0                            
00006CB0                            loc_666C:
00006CB0 0C41 0800                  		cmpi.w	#$800,d1
00006CB4 6400                       		bcc.s	loc_6696
00006CB6 323C 0600                  		move.w	#$600,d1
00006CBA 0C40 0006                  		cmpi.w	#6,d0
00006CBE 6E00                       		bgt.s	loc_66F6
00006CC0 0C40 FFFA                  		cmpi.w	#-6,d0
00006CC4 6D00                       		blt.s	loc_66C0
00006CC6 6000                       		bra.s	loc_66AE
00006CC8                            ; ===========================================================================
00006CC8                            
00006CC8                            loc_6684:
00006CC8 323C 0200                  		move.w	#$200,d1
00006CCC 0C40 0002                  		cmpi.w	#2,d0
00006CD0 6E00                       		bgt.s	loc_66F6
00006CD2 0C40 FFFE                  		cmpi.w	#-2,d0
00006CD6 6D00                       		blt.s	loc_66C0
00006CD8 6000                       		bra.s	loc_66AE
00006CDA                            ; ===========================================================================
00006CDA                            
00006CDA                            loc_6696:
00006CDA 323C 1000                  		move.w	#$1000,d1
00006CDE 0C40 0010                  		cmpi.w	#$10,d0
00006CE2 6E00                       		bgt.s	loc_66F6
00006CE4 0C40 FFF0                  		cmpi.w	#-$10,d0
00006CE8 6D00                       		blt.s	loc_66C0
00006CEA 6000                       		bra.s	loc_66AE
00006CEC                            ; ===========================================================================
00006CEC                            
00006CEC                            loc_66A8:
00006CEC 7000                       		moveq	#0,d0
00006CEE 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00006CF2                            
00006CF2                            loc_66AE:
00006CF2 7200                       		moveq	#0,d1
00006CF4 3200                       		move.w	d0,d1
00006CF6 D278 F704                  		add.w	($FFFFF704).w,d1
00006CFA 4A40                       		tst.w	d0
00006CFC 6A00 0000                  		bpl.w	loc_6700
00006D00 6000 0000                  		bra.w	loc_66CC
00006D04                            ; ===========================================================================
00006D04                            
00006D04                            loc_66C0:
00006D04 4441                       		neg.w	d1
00006D06 48C1                       		ext.l	d1
00006D08 E181                       		asl.l	#8,d1
00006D0A D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D0E 4841                       		swap	d1
00006D10                            
00006D10                            loc_66CC:
00006D10 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
00006D14 6E00                       		bgt.s	loc_6724
00006D16 0C41 FF00                  		cmpi.w	#-$100,d1
00006D1A 6E00                       		bgt.s	loc_66F0
00006D1C 0241 07FF                  		andi.w	#$7FF,d1
00006D20 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D26 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
00006D2C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D32 6000                       		bra.s	loc_6724
00006D34                            ; ===========================================================================
00006D34                            
00006D34                            loc_66F0:
00006D34 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006D38 6000                       		bra.s	loc_6724
00006D3A                            ; ===========================================================================
00006D3A                            
00006D3A                            loc_66F6:
00006D3A 48C1                       		ext.l	d1
00006D3C E181                       		asl.l	#8,d1
00006D3E D2B8 F704                  		add.l	($FFFFF704).w,d1
00006D42 4841                       		swap	d1
00006D44                            
00006D44                            loc_6700:
00006D44 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006D48 6D00                       		blt.s	loc_6724
00006D4A 0441 0800                  		subi.w	#$800,d1
00006D4E 6500                       		bcs.s	loc_6720
00006D50 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006D56 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006D5C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006D62 6000                       		bra.s	loc_6724
00006D64                            ; ===========================================================================
00006D64                            
00006D64                            loc_6720:
00006D64 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006D68                            
00006D68                            loc_6724:
00006D68 3838 F704                  		move.w	($FFFFF704).w,d4
00006D6C 4841                       		swap	d1
00006D6E 2601                       		move.l	d1,d3
00006D70 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006D74 E09B                       		ror.l	#8,d3
00006D76 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006D7A 21C1 F704                  		move.l	d1,($FFFFF704).w
00006D7E 3038 F704                  		move.w	($FFFFF704).w,d0
00006D82 0240 0010                  		andi.w	#$10,d0
00006D86 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006D8A B300                       		eor.b	d1,d0
00006D8C 6600                       		bne.s	locret_6766
00006D8E 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006D94 3038 F704                  		move.w	($FFFFF704).w,d0
00006D98 9044                       		sub.w	d4,d0
00006D9A 6A00                       		bpl.s	loc_6760
00006D9C 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006DA2 4E75                       		rts	
00006DA4                            ; ===========================================================================
00006DA4                            
00006DA4                            loc_6760:
00006DA4 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006DAA                            
00006DAA                            locret_6766:
00006DAA 4E75                       		rts	
00006DAC                            ; End of function ScrollVertical
00006DAC                            
00006DAC                            
00006DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DAC                            
00006DAC                            
00006DAC                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006DAC 2438 F708                  		move.l	($FFFFF708).w,d2
00006DB0 2002                       		move.l	d2,d0
00006DB2 D084                       		add.l	d4,d0
00006DB4 21C0 F708                  		move.l	d0,($FFFFF708).w
00006DB8 2200                       		move.l	d0,d1
00006DBA 4841                       		swap	d1
00006DBC 0241 0010                  		andi.w	#$10,d1
00006DC0 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006DC4 B701                       		eor.b	d3,d1
00006DC6 6600                       		bne.s	loc_679C
00006DC8 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00006DCE 9082                       		sub.l	d2,d0
00006DD0 6A00                       		bpl.s	loc_6796
00006DD2 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006DD8 6000                       		bra.s	loc_679C
00006DDA                            ; ===========================================================================
00006DDA                            
00006DDA                            loc_6796:
00006DDA 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006DE0                            
00006DE0                            loc_679C:
00006DE0 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006DE4 2003                       		move.l	d3,d0
00006DE6 D085                       		add.l	d5,d0
00006DE8 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006DEC 2200                       		move.l	d0,d1
00006DEE 4841                       		swap	d1
00006DF0 0241 0010                  		andi.w	#$10,d1
00006DF4 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006DF8 B501                       		eor.b	d2,d1
00006DFA 6600                       		bne.s	locret_67D0
00006DFC 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E02 9083                       		sub.l	d3,d0
00006E04 6A00                       		bpl.s	loc_67CA
00006E06 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E0C 4E75                       		rts	
00006E0E                            ; ===========================================================================
00006E0E                            
00006E0E                            loc_67CA:
00006E0E 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E14                            
00006E14                            locret_67D0:
00006E14 4E75                       		rts	
00006E16                            ; End of function ScrollBlock1
00006E16                            
00006E16                            
00006E16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E16                            
00006E16                            
00006E16                            ScrollBlock2:				; XREF: Deform_SLZ
00006E16 2438 F708                  		move.l	($FFFFF708).w,d2
00006E1A 2002                       		move.l	d2,d0
00006E1C D084                       		add.l	d4,d0
00006E1E 21C0 F708                  		move.l	d0,($FFFFF708).w
00006E22 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006E26 2003                       		move.l	d3,d0
00006E28 D085                       		add.l	d5,d0
00006E2A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
00006E2E 2200                       		move.l	d0,d1
00006E30 4841                       		swap	d1
00006E32 0241 0010                  		andi.w	#$10,d1
00006E36 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E3A B501                       		eor.b	d2,d1
00006E3C 6600                       		bne.s	locret_6812
00006E3E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E44 9083                       		sub.l	d3,d0
00006E46 6A00                       		bpl.s	loc_680C
00006E48 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E4E 4E75                       		rts	
00006E50                            ; ===========================================================================
00006E50                            
00006E50                            loc_680C:
00006E50 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E56                            
00006E56                            locret_6812:
00006E56 4E75                       		rts	
00006E58                            ; End of function ScrollBlock2
00006E58                            
00006E58                            
00006E58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E58                            
00006E58                            
00006E58                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006E58 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006E5C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006E60 3200                       		move.w	d0,d1
00006E62 0241 0010                  		andi.w	#$10,d1
00006E66 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006E6A B501                       		eor.b	d2,d1
00006E6C 6600                       		bne.s	locret_6842
00006E6E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006E74 9043                       		sub.w	d3,d0
00006E76 6A00                       		bpl.s	loc_683C
00006E78 08F8 0000 F756             		bset	#0,($FFFFF756).w
00006E7E 4E75                       		rts	
00006E80                            ; ===========================================================================
00006E80                            
00006E80                            loc_683C:
00006E80 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006E86                            
00006E86                            locret_6842:
00006E86 4E75                       		rts	
00006E88                            ; End of function ScrollBlock3
00006E88                            
00006E88                            
00006E88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E88                            
00006E88                            
00006E88                            ScrollBlock4:				; XREF: Deform_GHZ
00006E88 3438 F710                  		move.w	($FFFFF710).w,d2
00006E8C 3638 F714                  		move.w	($FFFFF714).w,d3
00006E90 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006E94 48C0                       		ext.l	d0
00006E96 EF80                       		asl.l	#7,d0
00006E98 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006E9C 3038 F710                  		move.w	($FFFFF710).w,d0
00006EA0 0240 0010                  		andi.w	#$10,d0
00006EA4 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006EA8 B300                       		eor.b	d1,d0
00006EAA 6600                       		bne.s	locret_6884
00006EAC 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006EB2 3038 F710                  		move.w	($FFFFF710).w,d0
00006EB6 9042                       		sub.w	d2,d0
00006EB8 6A00                       		bpl.s	loc_687E
00006EBA 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006EC0 6000                       		bra.s	locret_6884
00006EC2                            ; ===========================================================================
00006EC2                            
00006EC2                            loc_687E:
00006EC2 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006EC8                            
00006EC8                            locret_6884:
00006EC8 4E75                       		rts	
00006ECA                            ; End of function ScrollBlock4
00006ECA                            
00006ECA                            
00006ECA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ECA                            
00006ECA                            
00006ECA                            sub_6886:				; XREF: loc_C44
00006ECA 4BF9 00C0 0004             		lea	($C00004).l,a5
00006ED0 4DF9 00C0 0000             		lea	($C00000).l,a6
00006ED6 45F8 F756                  		lea	($FFFFF756).w,a2
00006EDA 47F8 F708                  		lea	($FFFFF708).w,a3
00006EDE 49F8 A440                  		lea	($FFFFA440).w,a4
00006EE2 343C 6000                  		move.w	#$6000,d2
00006EE6 6100 0000                  		bsr.w	sub_6954
00006EEA 45F8 F758                  		lea	($FFFFF758).w,a2
00006EEE 47F8 F710                  		lea	($FFFFF710).w,a3
00006EF2 6000 0000                  		bra.w	sub_69F4
00006EF6                            ; End of function sub_6886
00006EF6                            
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            ; Subroutine to	display	correct	tiles as you move
00006EF6                            ; ---------------------------------------------------------------------------
00006EF6                            
00006EF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006EF6                            
00006EF6                            
00006EF6                            LoadTilesAsYouMove:			; XREF: Demo_Time
00006EF6 4BF9 00C0 0004             		lea	($C00004).l,a5
00006EFC 4DF9 00C0 0000             		lea	($C00000).l,a6
00006F02 45F8 FF32                  		lea	($FFFFFF32).w,a2
00006F06 47F8 FF18                  		lea	($FFFFFF18).w,a3
00006F0A 49F8 A440                  		lea	($FFFFA440).w,a4
00006F0E 343C 6000                  		move.w	#$6000,d2
00006F12 6100 0000                  		bsr.w	sub_6954
00006F16 45F8 FF34                  		lea	($FFFFFF34).w,a2
00006F1A 47F8 FF20                  		lea	($FFFFFF20).w,a3
00006F1E 6100 0000                  		bsr.w	sub_69F4
00006F22 45F8 FF30                  		lea	($FFFFFF30).w,a2
00006F26 47F8 FF10                  		lea	($FFFFFF10).w,a3
00006F2A 49F8 A400                  		lea	($FFFFA400).w,a4
00006F2E 343C 4000                  		move.w	#$4000,d2
00006F32 4A12                       		tst.b	(a2)
00006F34 6700                       		beq.s	locret_6952
00006F36 0892 0000                  		bclr	#0,(a2)
00006F3A 6700                       		beq.s	loc_6908
00006F3C 78F0                       		moveq	#-$10,d4
00006F3E 7AF0                       		moveq	#-$10,d5
00006F40 6100 0000                  		bsr.w	sub_6C20
00006F44 78F0                       		moveq	#-$10,d4
00006F46 7AF0                       		moveq	#-$10,d5
00006F48 6100 0000                  		bsr.w	sub_6AD8
00006F4C                            
00006F4C                            loc_6908:
00006F4C 0892 0001                  		bclr	#1,(a2)
00006F50 6700                       		beq.s	loc_6922
00006F52 383C 00E0                  		move.w	#$E0,d4
00006F56 7AF0                       		moveq	#-$10,d5
00006F58 6100 0000                  		bsr.w	sub_6C20
00006F5C 383C 00E0                  		move.w	#$E0,d4
00006F60 7AF0                       		moveq	#-$10,d5
00006F62 6100 0000                  		bsr.w	sub_6AD8
00006F66                            
00006F66                            loc_6922:
00006F66 0892 0002                  		bclr	#2,(a2)
00006F6A 6700                       		beq.s	loc_6938
00006F6C 78F0                       		moveq	#-$10,d4
00006F6E 7AF0                       		moveq	#-$10,d5
00006F70 6100 0000                  		bsr.w	sub_6C20
00006F74 78F0                       		moveq	#-$10,d4
00006F76 7AF0                       		moveq	#-$10,d5
00006F78 6100 0000                  		bsr.w	sub_6B04
00006F7C                            
00006F7C                            loc_6938:
00006F7C 0892 0003                  		bclr	#3,(a2)
00006F80 6700                       		beq.s	locret_6952
00006F82 78F0                       		moveq	#-$10,d4
00006F84 3A3C 0140                  		move.w	#$140,d5
00006F88 6100 0000                  		bsr.w	sub_6C20
00006F8C 78F0                       		moveq	#-$10,d4
00006F8E 3A3C 0140                  		move.w	#$140,d5
00006F92 6100 0000                  		bsr.w	sub_6B04
00006F96                            
00006F96                            locret_6952:
00006F96 4E75                       		rts	
00006F98                            ; End of function LoadTilesAsYouMove
00006F98                            
00006F98                            
00006F98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F98                            
00006F98                            
00006F98                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006F98 4A12                       		tst.b	(a2)
00006F9A 6700 0000                  		beq.w	locret_69F2
00006F9E 0892 0000                  		bclr	#0,(a2)
00006FA2 6700                       		beq.s	loc_6972
00006FA4 78F0                       		moveq	#-$10,d4
00006FA6 7AF0                       		moveq	#-$10,d5
00006FA8 6100 0000                  		bsr.w	sub_6C20
00006FAC 78F0                       		moveq	#-$10,d4
00006FAE 7AF0                       		moveq	#-$10,d5
00006FB0 7C1F                       		moveq	#$1F,d6
00006FB2 6100 0000                  		bsr.w	sub_6ADA
00006FB6                            
00006FB6                            loc_6972:
00006FB6 0892 0001                  		bclr	#1,(a2)
00006FBA 6700                       		beq.s	loc_698E
00006FBC 383C 00E0                  		move.w	#$E0,d4
00006FC0 7AF0                       		moveq	#-$10,d5
00006FC2 6100 0000                  		bsr.w	sub_6C20
00006FC6 383C 00E0                  		move.w	#$E0,d4
00006FCA 7AF0                       		moveq	#-$10,d5
00006FCC 7C1F                       		moveq	#$1F,d6
00006FCE 6100 0000                  		bsr.w	sub_6ADA
00006FD2                            
00006FD2                            loc_698E:
00006FD2 0892 0002                  		bclr	#2,(a2)
00006FD6 6700                       		beq.s	loc_69BE
00006FD8 78F0                       		moveq	#-$10,d4
00006FDA 7AF0                       		moveq	#-$10,d5
00006FDC 6100 0000                  		bsr.w	sub_6C20
00006FE0 78F0                       		moveq	#-$10,d4
00006FE2 7AF0                       		moveq	#-$10,d5
00006FE4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006FE8 322B 0004                  		move.w	4(a3),d1
00006FEC 0241 FFF0                  		andi.w	#-$10,d1
00006FF0 9C41                       		sub.w	d1,d6
00006FF2 6D00                       		blt.s	loc_69BE
00006FF4 E84E                       		lsr.w	#4,d6
00006FF6 0C46 000F                  		cmpi.w	#$F,d6
00006FFA 6500                       		bcs.s	loc_69BA
00006FFC 7C0F                       		moveq	#$F,d6
00006FFE                            
00006FFE                            loc_69BA:
00006FFE 6100 0000                  		bsr.w	sub_6B06
00007002                            
00007002                            loc_69BE:
00007002 0892 0003                  		bclr	#3,(a2)
00007006 6700                       		beq.s	locret_69F2
00007008 78F0                       		moveq	#-$10,d4
0000700A 3A3C 0140                  		move.w	#$140,d5
0000700E 6100 0000                  		bsr.w	sub_6C20
00007012 78F0                       		moveq	#-$10,d4
00007014 3A3C 0140                  		move.w	#$140,d5
00007018 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000701C 322B 0004                  		move.w	4(a3),d1
00007020 0241 FFF0                  		andi.w	#-$10,d1
00007024 9C41                       		sub.w	d1,d6
00007026 6D00                       		blt.s	locret_69F2
00007028 E84E                       		lsr.w	#4,d6
0000702A 0C46 000F                  		cmpi.w	#$F,d6
0000702E 6500                       		bcs.s	loc_69EE
00007030 7C0F                       		moveq	#$F,d6
00007032                            
00007032                            loc_69EE:
00007032 6100 0000                  		bsr.w	sub_6B06
00007036                            
00007036                            locret_69F2:
00007036 4E75                       		rts	
00007038                            ; End of function sub_6954
00007038                            
00007038                            
00007038                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007038                            
00007038                            
00007038                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00007038 4A12                       		tst.b	(a2)
0000703A 6700 0000                  		beq.w	locret_6A80
0000703E 0892 0002                  		bclr	#2,(a2)
00007042 6700                       		beq.s	loc_6A3E
00007044 0C53 0010                  		cmpi.w	#$10,(a3)
00007048 6500                       		bcs.s	loc_6A3E
0000704A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000704E 322B 0004                  		move.w	4(a3),d1
00007052 0241 FFF0                  		andi.w	#-$10,d1
00007056 9841                       		sub.w	d1,d4
00007058 3F04                       		move.w	d4,-(sp)
0000705A 7AF0                       		moveq	#-$10,d5
0000705C 6100 0000                  		bsr.w	sub_6C20
00007060 381F                       		move.w	(sp)+,d4
00007062 7AF0                       		moveq	#-$10,d5
00007064 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00007068 322B 0004                  		move.w	4(a3),d1
0000706C 0241 FFF0                  		andi.w	#-$10,d1
00007070 9C41                       		sub.w	d1,d6
00007072 6D00                       		blt.s	loc_6A3E
00007074 E84E                       		lsr.w	#4,d6
00007076 0446 000E                  		subi.w	#$E,d6
0000707A 6400                       		bcc.s	loc_6A3E
0000707C 4446                       		neg.w	d6
0000707E 6100 0000                  		bsr.w	sub_6B06
00007082                            
00007082                            loc_6A3E:
00007082 0892 0003                  		bclr	#3,(a2)
00007086 6700                       		beq.s	locret_6A80
00007088 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000708C 322B 0004                  		move.w	4(a3),d1
00007090 0241 FFF0                  		andi.w	#-$10,d1
00007094 9841                       		sub.w	d1,d4
00007096 3F04                       		move.w	d4,-(sp)
00007098 3A3C 0140                  		move.w	#$140,d5
0000709C 6100 0000                  		bsr.w	sub_6C20
000070A0 381F                       		move.w	(sp)+,d4
000070A2 3A3C 0140                  		move.w	#$140,d5
000070A6 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000070AA 322B 0004                  		move.w	4(a3),d1
000070AE 0241 FFF0                  		andi.w	#-$10,d1
000070B2 9C41                       		sub.w	d1,d6
000070B4 6D00                       		blt.s	locret_6A80
000070B6 E84E                       		lsr.w	#4,d6
000070B8 0446 000E                  		subi.w	#$E,d6
000070BC 6400                       		bcc.s	locret_6A80
000070BE 4446                       		neg.w	d6
000070C0 6100 0000                  		bsr.w	sub_6B06
000070C4                            
000070C4                            locret_6A80:
000070C4 4E75                       		rts	
000070C6                            ; End of function sub_69F4
000070C6                            
000070C6                            ; ===========================================================================
000070C6 4A12                       		tst.b	(a2)
000070C8 6700                       		beq.s	locret_6AD6
000070CA 0892 0002                  		bclr	#2,(a2)
000070CE 6700                       		beq.s	loc_6AAC
000070D0 383C 00D0                  		move.w	#$D0,d4
000070D4 322B 0004                  		move.w	4(a3),d1
000070D8 0241 FFF0                  		andi.w	#-$10,d1
000070DC 9841                       		sub.w	d1,d4
000070DE 3F04                       		move.w	d4,-(sp)
000070E0 7AF0                       		moveq	#-$10,d5
000070E2 6100 0000                  		bsr.w	sub_6C3C
000070E6 381F                       		move.w	(sp)+,d4
000070E8 7AF0                       		moveq	#-$10,d5
000070EA 7C02                       		moveq	#2,d6
000070EC 6100 0000                  		bsr.w	sub_6B06
000070F0                            
000070F0                            loc_6AAC:
000070F0 0892 0003                  		bclr	#3,(a2)
000070F4 6700                       		beq.s	locret_6AD6
000070F6 383C 00D0                  		move.w	#$D0,d4
000070FA 322B 0004                  		move.w	4(a3),d1
000070FE 0241 FFF0                  		andi.w	#-$10,d1
00007102 9841                       		sub.w	d1,d4
00007104 3F04                       		move.w	d4,-(sp)
00007106 3A3C 0140                  		move.w	#$140,d5
0000710A 6100 0000                  		bsr.w	sub_6C3C
0000710E 381F                       		move.w	(sp)+,d4
00007110 3A3C 0140                  		move.w	#$140,d5
00007114 7C02                       		moveq	#2,d6
00007116 6100 0000                  		bsr.w	sub_6B06
0000711A                            
0000711A                            locret_6AD6:
0000711A 4E75                       		rts	
0000711C                            
0000711C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000711C                            
0000711C                            
0000711C                            sub_6AD8:				; XREF: LoadTilesAsYouMove
0000711C 7C15                       		moveq	#$15,d6
0000711E                            ; End of function sub_6AD8
0000711E                            
0000711E                            
0000711E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000711E                            
0000711E                            
0000711E                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
0000711E 2E3C 0080 0000             		move.l	#$800000,d7
00007124 2200                       		move.l	d0,d1
00007126                            
00007126                            loc_6AE2:
00007126 48E7 0C00                  		movem.l	d4-d5,-(sp)
0000712A 6100 0000                  		bsr.w	sub_6BD6
0000712E 2001                       		move.l	d1,d0
00007130 6100 0000                  		bsr.w	sub_6B32
00007134 5801                       		addq.b	#4,d1
00007136 0201 007F                  		andi.b	#$7F,d1
0000713A 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000713E 0645 0010                  		addi.w	#$10,d5
00007142 51CE FFE2                  		dbf	d6,loc_6AE2
00007146 4E75                       		rts	
00007148                            ; End of function sub_6ADA
00007148                            
00007148                            
00007148                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007148                            
00007148                            
00007148                            sub_6B04:				; XREF: LoadTilesAsYouMove
00007148 7C0F                       		moveq	#$F,d6
0000714A                            ; End of function sub_6B04
0000714A                            
0000714A                            
0000714A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000714A                            
0000714A                            
0000714A                            sub_6B06:				; XREF: sub_6954
0000714A 2E3C 0080 0000             		move.l	#$800000,d7
00007150 2200                       		move.l	d0,d1
00007152                            
00007152                            loc_6B0E:
00007152 48E7 0C00                  		movem.l	d4-d5,-(sp)
00007156 6100 0000                  		bsr.w	sub_6BD6
0000715A 2001                       		move.l	d1,d0
0000715C 6100 0000                  		bsr.w	sub_6B32
00007160 0641 0100                  		addi.w	#$100,d1
00007164 0241 0FFF                  		andi.w	#$FFF,d1
00007168 4CDF 0030                  		movem.l	(sp)+,d4-d5
0000716C 0644 0010                  		addi.w	#$10,d4
00007170 51CE FFE0                  		dbf	d6,loc_6B0E
00007174 4E75                       		rts	
00007176                            ; End of function sub_6B06
00007176                            
00007176                            
00007176                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007176                            
00007176                            
00007176                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007176 8042                       		or.w	d2,d0
00007178 4840                       		swap	d0
0000717A 0810 0004                  		btst	#4,(a0)
0000717E 6600                       		bne.s	loc_6B6E
00007180 0810 0003                  		btst	#3,(a0)
00007184 6600                       		bne.s	loc_6B4E
00007186 2A80                       		move.l	d0,(a5)
00007188 2C99                       		move.l	(a1)+,(a6)
0000718A D087                       		add.l	d7,d0
0000718C 2A80                       		move.l	d0,(a5)
0000718E 2C99                       		move.l	(a1)+,(a6)
00007190 4E75                       		rts	
00007192                            ; ===========================================================================
00007192                            
00007192                            loc_6B4E:
00007192 2A80                       		move.l	d0,(a5)
00007194 2819                       		move.l	(a1)+,d4
00007196 0A84 0800 0800             		eori.l	#$8000800,d4
0000719C 4844                       		swap	d4
0000719E 2C84                       		move.l	d4,(a6)
000071A0 D087                       		add.l	d7,d0
000071A2 2A80                       		move.l	d0,(a5)
000071A4 2819                       		move.l	(a1)+,d4
000071A6 0A84 0800 0800             		eori.l	#$8000800,d4
000071AC 4844                       		swap	d4
000071AE 2C84                       		move.l	d4,(a6)
000071B0 4E75                       		rts	
000071B2                            ; ===========================================================================
000071B2                            
000071B2                            loc_6B6E:
000071B2 0810 0003                  		btst	#3,(a0)
000071B6 6600                       		bne.s	loc_6B90
000071B8 2A80                       		move.l	d0,(a5)
000071BA 2A19                       		move.l	(a1)+,d5
000071BC 2819                       		move.l	(a1)+,d4
000071BE 0A84 1000 1000             		eori.l	#$10001000,d4
000071C4 2C84                       		move.l	d4,(a6)
000071C6 D087                       		add.l	d7,d0
000071C8 2A80                       		move.l	d0,(a5)
000071CA 0A85 1000 1000             		eori.l	#$10001000,d5
000071D0 2C85                       		move.l	d5,(a6)
000071D2 4E75                       		rts	
000071D4                            ; ===========================================================================
000071D4                            
000071D4                            loc_6B90:
000071D4 2A80                       		move.l	d0,(a5)
000071D6 2A19                       		move.l	(a1)+,d5
000071D8 2819                       		move.l	(a1)+,d4
000071DA 0A84 1800 1800             		eori.l	#$18001800,d4
000071E0 4844                       		swap	d4
000071E2 2C84                       		move.l	d4,(a6)
000071E4 D087                       		add.l	d7,d0
000071E6 2A80                       		move.l	d0,(a5)
000071E8 0A85 1800 1800             		eori.l	#$18001800,d5
000071EE 4845                       		swap	d5
000071F0 2C85                       		move.l	d5,(a6)
000071F2 4E75                       		rts	
000071F4                            ; End of function sub_6B32
000071F4                            
000071F4                            ; ===========================================================================
000071F4 4E75                       		rts	
000071F6                            ; ===========================================================================
000071F6 2A80                       		move.l	d0,(a5)
000071F8 3A3C 2000                  		move.w	#$2000,d5
000071FC 3819                       		move.w	(a1)+,d4
000071FE D845                       		add.w	d5,d4
00007200 3C84                       		move.w	d4,(a6)
00007202 3819                       		move.w	(a1)+,d4
00007204 D845                       		add.w	d5,d4
00007206 3C84                       		move.w	d4,(a6)
00007208 D087                       		add.l	d7,d0
0000720A 2A80                       		move.l	d0,(a5)
0000720C 3819                       		move.w	(a1)+,d4
0000720E D845                       		add.w	d5,d4
00007210 3C84                       		move.w	d4,(a6)
00007212 3819                       		move.w	(a1)+,d4
00007214 D845                       		add.w	d5,d4
00007216 3C84                       		move.w	d4,(a6)
00007218 4E75                       		rts	
0000721A                            
0000721A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000721A                            
0000721A                            
0000721A                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
0000721A 43F8 B000                  		lea	($FFFFB000).w,a1
0000721E D86B 0004                  		add.w	4(a3),d4
00007222 DA53                       		add.w	(a3),d5
00007224 3604                       		move.w	d4,d3
00007226 E24B                       		lsr.w	#1,d3
00007228 0243 0380                  		andi.w	#$380,d3
0000722C E64D                       		lsr.w	#3,d5
0000722E 3005                       		move.w	d5,d0
00007230 EA48                       		lsr.w	#5,d0
00007232 0240 007F                  		andi.w	#$7F,d0
00007236 D043                       		add.w	d3,d0
00007238 76FF                       		moveq	#-1,d3
0000723A 1634 0000                  		move.b	(a4,d0.w),d3
0000723E 6700                       		beq.s	locret_6C1E
00007240 5303                       		subq.b	#1,d3
00007242 0243 007F                  		andi.w	#$7F,d3
00007246 EE5B                       		ror.w	#7,d3
00007248 D844                       		add.w	d4,d4
0000724A 0244 01E0                  		andi.w	#$1E0,d4
0000724E 0245 001E                  		andi.w	#$1E,d5
00007252 D644                       		add.w	d4,d3
00007254 D645                       		add.w	d5,d3
00007256 2043                       		movea.l	d3,a0
00007258 3610                       		move.w	(a0),d3
0000725A 0243 03FF                  		andi.w	#$3FF,d3
0000725E E74B                       		lsl.w	#3,d3
00007260 D2C3                       		adda.w	d3,a1
00007262                            
00007262                            locret_6C1E:
00007262 4E75                       		rts	
00007264                            ; End of function sub_6BD6
00007264                            
00007264                            
00007264                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007264                            
00007264                            
00007264                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007264 D86B 0004                  		add.w	4(a3),d4
00007268 DA53                       		add.w	(a3),d5
0000726A 0244 00F0                  		andi.w	#$F0,d4
0000726E 0245 01F0                  		andi.w	#$1F0,d5
00007272 E94C                       		lsl.w	#4,d4
00007274 E44D                       		lsr.w	#2,d5
00007276 D845                       		add.w	d5,d4
00007278 7003                       		moveq	#3,d0
0000727A 4840                       		swap	d0
0000727C 3004                       		move.w	d4,d0
0000727E 4E75                       		rts	
00007280                            ; End of function sub_6C20
00007280                            
00007280                            
00007280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007280                            ; not used
00007280                            
00007280                            
00007280                            sub_6C3C:
00007280 D86B 0004                  		add.w	4(a3),d4
00007284 DA53                       		add.w	(a3),d5
00007286 0244 00F0                  		andi.w	#$F0,d4
0000728A 0245 01F0                  		andi.w	#$1F0,d5
0000728E E94C                       		lsl.w	#4,d4
00007290 E44D                       		lsr.w	#2,d5
00007292 D845                       		add.w	d5,d4
00007294 7002                       		moveq	#2,d0
00007296 4840                       		swap	d0
00007298 3004                       		move.w	d4,d0
0000729A 4E75                       		rts	
0000729C                            ; End of function sub_6C3C
0000729C                            
0000729C                            ; ---------------------------------------------------------------------------
0000729C                            ; Subroutine to	load tiles as soon as the level	appears
0000729C                            ; ---------------------------------------------------------------------------
0000729C                            
0000729C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000729C                            
0000729C                            
0000729C                            LoadTilesFromStart:			; XREF: Level; EndingSequence
0000729C 4BF9 00C0 0004             		lea	($C00004).l,a5
000072A2 4DF9 00C0 0000             		lea	($C00000).l,a6
000072A8 47F8 F700                  		lea	($FFFFF700).w,a3
000072AC 49F8 A400                  		lea	($FFFFA400).w,a4
000072B0 343C 4000                  		move.w	#$4000,d2
000072B4 6100                       		bsr.s	LoadTilesFromStart2
000072B6 47F8 F708                  		lea	($FFFFF708).w,a3
000072BA 49F8 A440                  		lea	($FFFFA440).w,a4
000072BE 343C 6000                  		move.w	#$6000,d2
000072C2                            ; End of function LoadTilesFromStart
000072C2                            
000072C2                            
000072C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072C2                            
000072C2                            
000072C2                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
000072C2 78F0                       		moveq	#-$10,d4
000072C4 7C0F                       		moveq	#$F,d6
000072C6                            
000072C6                            loc_6C82:
000072C6 48E7 0E00                  		movem.l	d4-d6,-(sp)
000072CA 7A00                       		moveq	#0,d5
000072CC 3204                       		move.w	d4,d1
000072CE 6100 FF94                  		bsr.w	sub_6C20
000072D2 3801                       		move.w	d1,d4
000072D4 7A00                       		moveq	#0,d5
000072D6 7C1F                       		moveq	#$1F,d6
000072D8 6100 FE44                  		bsr.w	sub_6ADA
000072DC 4CDF 0070                  		movem.l	(sp)+,d4-d6
000072E0 0644 0010                  		addi.w	#$10,d4
000072E4 51CE FFE0                  		dbf	d6,loc_6C82
000072E8 4E75                       		rts	
000072EA                            ; End of function LoadTilesFromStart2
000072EA                            
000072EA                            ; ---------------------------------------------------------------------------
000072EA                            ; Main Load Block loading subroutine
000072EA                            ; ---------------------------------------------------------------------------
000072EA                            
000072EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000072EA                            
000072EA                            
000072EA                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
000072EA 7000                       		moveq	#0,d0
000072EC 1038 FE10                  		move.b	($FFFFFE10).w,d0
000072F0 E948                       		lsl.w	#4,d0
000072F2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000072F8 45F2 0000                  		lea	(a2,d0.w),a2
000072FC 2F0A                       		move.l	a2,-(sp)
000072FE 588A                       		addq.l	#4,a2
00007300 205A                       		movea.l	(a2)+,a0
00007302 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007306 303C 0000                  		move.w	#0,d0
0000730A 6100 A648                  		bsr.w	EniDec
0000730E 205A                       		movea.l	(a2)+,a0
00007310 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007316 6100 A7BA                  		bsr.w	KosDec
0000731A 6100 0000                  		bsr.w	LevelLayoutLoad
0000731E 301A                       		move.w	(a2)+,d0
00007320 3012                       		move.w	(a2),d0
00007322 0240 00FF                  		andi.w	#$FF,d0
00007326 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
0000732C 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
0000732E 700C                       		moveq	#$C,d0		; use SB3 pallet
00007330                            
00007330                            MLB_ChkSBZPal:
00007330 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007336 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007338 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
0000733E 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007340                            
00007340                            MLB_UsePal0E:
00007340 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007342                            
00007342                            MLB_NormalPal:
00007342 6100 AFB4                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007346 245F                       		movea.l	(sp)+,a2
00007348 584A                       		addq.w	#4,a2
0000734A 7000                       		moveq	#0,d0
0000734C 1012                       		move.b	(a2),d0
0000734E 6700                       		beq.s	locret_6D10
00007350 6100 A464                  		bsr.w	LoadPLC		; load pattern load cues
00007354                            
00007354                            locret_6D10:
00007354 4E75                       		rts	
00007356                            ; End of function MainLoadBlockLoad
00007356                            
00007356                            ; ---------------------------------------------------------------------------
00007356                            ; Level	layout loading subroutine
00007356                            ; ---------------------------------------------------------------------------
00007356                            
00007356                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007356                            
00007356                            
00007356                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007356 47F8 A400                  		lea	($FFFFA400).w,a3
0000735A 323C 01FF                  		move.w	#$1FF,d1
0000735E 7000                       		moveq	#0,d0
00007360                            
00007360                            LevLoad_ClrRam:
00007360 26C0                       		move.l	d0,(a3)+
00007362 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007366                            
00007366 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
0000736A 7200                       		moveq	#0,d1
0000736C 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007370 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007374 7202                       		moveq	#2,d1
00007376                            ; End of function LevelLayoutLoad
00007376                            
00007376                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007376                            
00007376                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007376                            
00007376                            
00007376                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007376 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000737A ED08                       		lsl.b	#6,d0
0000737C EA48                       		lsr.w	#5,d0
0000737E 3400                       		move.w	d0,d2
00007380 D040                       		add.w	d0,d0
00007382 D042                       		add.w	d2,d0
00007384 D041                       		add.w	d1,d0
00007386 43F9 0000 0000             		lea	(Level_Index).l,a1
0000738C 3031 0000                  		move.w	(a1,d0.w),d0
00007390 43F1 0000                  		lea	(a1,d0.w),a1
00007394 7200                       		moveq	#0,d1
00007396 3401                       		move.w	d1,d2
00007398 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
0000739A 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
0000739C                            
0000739C                            LevLoad_NumRows:
0000739C 3001                       		move.w	d1,d0
0000739E 204B                       		movea.l	a3,a0
000073A0                            
000073A0                            LevLoad_Row:
000073A0 10D9                       		move.b	(a1)+,(a0)+
000073A2 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
000073A6 47EB 0080                  		lea	$80(a3),a3	; do next row
000073AA 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
000073AE 4E75                       		rts	
000073B0                            ; End of function LevelLayoutLoad2
000073B0                            
000073B0                            ; ---------------------------------------------------------------------------
000073B0                            ; Dynamic screen resize	loading	subroutine
000073B0                            ; ---------------------------------------------------------------------------
000073B0                            
000073B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073B0                            
000073B0                            
000073B0                            DynScrResizeLoad:			; XREF: DeformBgLayer
000073B0 7000                       		moveq	#0,d0
000073B2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000073B6 D040                       		add.w	d0,d0
000073B8 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
000073BC 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
000073C0 7202                       		moveq	#2,d1
000073C2 3038 F726                  		move.w	($FFFFF726).w,d0
000073C6 9078 F72E                  		sub.w	($FFFFF72E).w,d0
000073CA 6700                       		beq.s	locret_6DAA
000073CC 6400                       		bcc.s	loc_6DAC
000073CE 4441                       		neg.w	d1
000073D0 3038 F704                  		move.w	($FFFFF704).w,d0
000073D4 B078 F726                  		cmp.w	($FFFFF726).w,d0
000073D8 6300                       		bls.s	loc_6DA0
000073DA 31C0 F72E                  		move.w	d0,($FFFFF72E).w
000073DE 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
000073E4                            
000073E4                            loc_6DA0:
000073E4 D378 F72E                  		add.w	d1,($FFFFF72E).w
000073E8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
000073EE                            
000073EE                            locret_6DAA:
000073EE 4E75                       		rts	
000073F0                            ; ===========================================================================
000073F0                            
000073F0                            loc_6DAC:				; XREF: DynScrResizeLoad
000073F0 3038 F704                  		move.w	($FFFFF704).w,d0
000073F4 5040                       		addq.w	#8,d0
000073F6 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000073FA 6500                       		bcs.s	loc_6DC4
000073FC 0838 0001 D022             		btst	#1,($FFFFD022).w
00007402 6700                       		beq.s	loc_6DC4
00007404 D241                       		add.w	d1,d1
00007406 D241                       		add.w	d1,d1
00007408                            
00007408                            loc_6DC4:
00007408 D378 F72E                  		add.w	d1,($FFFFF72E).w
0000740C 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007412 4E75                       		rts	
00007414                            ; End of function DynScrResizeLoad
00007414                            
00007414                            ; ===========================================================================
00007414                            ; ---------------------------------------------------------------------------
00007414                            ; Offset index for dynamic screen resizing
00007414                            ; ---------------------------------------------------------------------------
00007414 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007418 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
0000741C 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007420 0000                       		dc.w Resize_Ending-Resize_Index
00007422                            ; ===========================================================================
00007422                            ; ---------------------------------------------------------------------------
00007422                            ; Green	Hill Zone dynamic screen resizing
00007422                            ; ---------------------------------------------------------------------------
00007422                            
00007422                            Resize_GHZ:				; XREF: Resize_Index
00007422 7000                       		moveq	#0,d0
00007424 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007428 D040                       		add.w	d0,d0
0000742A 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
0000742E 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007432                            ; ===========================================================================
00007432 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007434 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007436 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007438                            ; ===========================================================================
00007438                            
00007438                            Resize_GHZ1:
00007438 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
0000743E 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007444 6500                       		bcs.s	locret_6E08	; if not, branch
00007446 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
0000744C                            
0000744C                            locret_6E08:
0000744C 4E75                       		rts	
0000744E                            ; ===========================================================================
0000744E                            
0000744E                            Resize_GHZ2:
0000744E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007454 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
0000745A 6500                       		bcs.s	locret_6E3A
0000745C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007462 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007468 6500                       		bcs.s	locret_6E3A
0000746A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007470 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00007476 6500                       		bcs.s	locret_6E3A
00007478 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000747E                            
0000747E                            locret_6E3A:
0000747E 4E75                       		rts	
00007480                            ; ===========================================================================
00007480                            
00007480                            Resize_GHZ3:
00007480 7000                       		moveq	#0,d0
00007482 1038 F742                  		move.b	($FFFFF742).w,d0
00007486 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
0000748A 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
0000748E                            ; ===========================================================================
0000748E 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007490 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007492 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007494                            ; ===========================================================================
00007494                            
00007494                            Resize_GHZ3main:
00007494 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
0000749A 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
000074A0 6500                       		bcs.s	locret_6E96
000074A2 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
000074A8 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000074AE 6500                       		bcs.s	locret_6E96
000074B0 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
000074B6 6500                       		bcs.s	loc_6E98
000074B8 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
000074BE 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
000074C4 6400                       		bcc.s	loc_6E8E
000074C6 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
000074CC 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
000074D2                            
000074D2                            loc_6E8E:
000074D2 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000074D8 6400                       		bcc.s	loc_6E98
000074DA                            
000074DA                            locret_6E96:
000074DA 4E75                       		rts	
000074DC                            ; ===========================================================================
000074DC                            
000074DC                            loc_6E98:
000074DC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
000074E2 5438 F742                  		addq.b	#2,($FFFFF742).w
000074E6 4E75                       		rts	
000074E8                            ; ===========================================================================
000074E8                            
000074E8                            Resize_GHZ3boss:
000074E8 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
000074EE 6400                       		bcc.s	loc_6EB0
000074F0 5538 F742                  		subq.b	#2,($FFFFF742).w
000074F4                            
000074F4                            loc_6EB0:
000074F4 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
000074FA 6500                       		bcs.s	locret_6EE8
000074FC 6100 0000                  		bsr.w	SingleObjLoad
00007500 6600                       		bne.s	loc_6ED0
00007502 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007506 337C 2A60 0008             		move.w	#$2A60,8(a1)
0000750C 337C 0280 000C             		move.w	#$280,$C(a1)
00007512                            
00007512                            loc_6ED0:
00007512 303C 008C                  		move.w	#$8C,d0
00007516 6100 A0B4                  		bsr.w	PlaySound	; play boss music
0000751A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007520 5438 F742                  		addq.b	#2,($FFFFF742).w
00007524 7011                       		moveq	#$11,d0
00007526 6000 A28E                  		bra.w	LoadPLC		; load boss patterns
0000752A                            ; ===========================================================================
0000752A                            
0000752A                            locret_6EE8:
0000752A 4E75                       		rts	
0000752C                            ; ===========================================================================
0000752C                            
0000752C                            Resize_GHZ3end:
0000752C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007532 4E75                       		rts	
00007534                            ; ===========================================================================
00007534                            ; ---------------------------------------------------------------------------
00007534                            ; Labyrinth Zone dynamic screen	resizing
00007534                            ; ---------------------------------------------------------------------------
00007534                            
00007534                            Resize_LZ:				; XREF: Resize_Index
00007534 7000                       		moveq	#0,d0
00007536 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000753A D040                       		add.w	d0,d0
0000753C 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007540 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007544                            ; ===========================================================================
00007544 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007546 0000                       		dc.w Resize_LZ12-Resize_LZx
00007548 0000                       		dc.w Resize_LZ3-Resize_LZx
0000754A 0000                       		dc.w Resize_SBZ3-Resize_LZx
0000754C                            ; ===========================================================================
0000754C                            
0000754C                            Resize_LZ12:
0000754C 4E75                       		rts	
0000754E                            ; ===========================================================================
0000754E                            
0000754E                            Resize_LZ3:
0000754E 7000                       		moveq	#0,d0
00007550 1038 F742                  		move.b	($FFFFF742).w,d0
00007554 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007558 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
0000755C                            ; ===========================================================================
0000755C                            off_6E4A2:	
0000755C 0000                       		dc.w Resize_LZ3boss-off_6E4A2
0000755E 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007560                            ; ===========================================================================
00007560                            Resize_LZ3boss:
00007560 4A38 F742                  		tst.b	($FFFFF742).w
00007564 6600                       		bne.s	locret_6F62
00007566 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
0000756C 6500                       		bcs.s	locret_6F62
0000756E 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007574 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
0000757A                            
0000757A 6100 0000                  		bsr.w	SingleObjLoad
0000757E 6600                       		bne.s	loc_6F4A
00007580 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007584 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
0000758A 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007590                            loc_6F4A:
00007590 303C 008C                  		move.w	#$8C,d0
00007594 6100 A036                  		bsr.w	PlaySound	; play boss music
00007598 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000759E 5438 F742                  		addq.b	#2,($FFFFF742).w
000075A2 7020                       		moveq	#$20,d0
000075A4 6000 A210                  		bra.w	LoadPLC		; load boss patterns
000075A8                            ; ===========================================================================
000075A8                            
000075A8                            locret_6F62:
000075A8 4E75                       		rts	
000075AA                            ; ===========================================================================
000075AA                            
000075AA                            Resize_LZ3end:
000075AA 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000075B0 4E75                       		rts	
000075B2                            ; ===========================================================================
000075B2                            
000075B2                            Resize_SBZ3:
000075B2 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000075B8 6500                       		bcs.s	locret_6F8C
000075BA 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
000075C0 6400                       		bcc.s	locret_6F8C	; if not, branch
000075C2 4238 FE30                  		clr.b	($FFFFFE30).w
000075C6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
000075CC 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
000075D2 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
000075D8                            
000075D8                            locret_6F8C:
000075D8 4E75                       		rts	
000075DA                            ; ===========================================================================
000075DA                            ; ---------------------------------------------------------------------------
000075DA                            ; Marble Zone dynamic screen resizing
000075DA                            ; ---------------------------------------------------------------------------
000075DA                            
000075DA                            Resize_MZ:				; XREF: Resize_Index
000075DA 7000                       		moveq	#0,d0
000075DC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000075E0 D040                       		add.w	d0,d0
000075E2 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000075E6 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000075EA                            ; ===========================================================================
000075EA 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000075EC 0000                       		dc.w Resize_MZ2-Resize_MZx
000075EE 0000                       		dc.w Resize_MZ3-Resize_MZx
000075F0                            ; ===========================================================================
000075F0                            
000075F0                            Resize_MZ1:
000075F0 7000                       		moveq	#0,d0
000075F2 1038 F742                  		move.b	($FFFFF742).w,d0
000075F6 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000075FA 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000075FE                            ; ===========================================================================
000075FE 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007600 0000                       		dc.w loc_6FEA-off_6FB2
00007602 0000                       		dc.w loc_702E-off_6FB2
00007604 0000                       		dc.w loc_7050-off_6FB2
00007606                            ; ===========================================================================
00007606                            
00007606                            loc_6FBA:
00007606 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
0000760C 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007612 6500                       		bcs.s	locret_6FE8
00007614 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
0000761A 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007620 6500                       		bcs.s	locret_6FE8
00007622 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007628 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000762E 6500                       		bcs.s	locret_6FE8
00007630 5438 F742                  		addq.b	#2,($FFFFF742).w
00007634                            
00007634                            locret_6FE8:
00007634 4E75                       		rts	
00007636                            ; ===========================================================================
00007636                            
00007636                            loc_6FEA:
00007636 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
0000763C 6400                       		bcc.s	loc_6FF8
0000763E 5538 F742                  		subq.b	#2,($FFFFF742).w
00007642 4E75                       		rts	
00007644                            ; ===========================================================================
00007644                            
00007644                            loc_6FF8:
00007644 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000764A 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007650 6400                       		bcc.s	locret_702C
00007652 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007658 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000765E 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007664 6400                       		bcc.s	locret_702C
00007666 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000766C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007672 6500                       		bcs.s	locret_702C
00007674 5438 F742                  		addq.b	#2,($FFFFF742).w
00007678                            
00007678                            locret_702C:
00007678 4E75                       		rts	
0000767A                            ; ===========================================================================
0000767A                            
0000767A                            loc_702E:
0000767A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007680 6400                       		bcc.s	loc_703C
00007682 5538 F742                  		subq.b	#2,($FFFFF742).w
00007686 4E75                       		rts	
00007688                            ; ===========================================================================
00007688                            
00007688                            loc_703C:
00007688 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000768E 6500                       		bcs.s	locret_704E
00007690 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007696 5438 F742                  		addq.b	#2,($FFFFF742).w
0000769A                            
0000769A                            locret_704E:
0000769A 4E75                       		rts	
0000769C                            ; ===========================================================================
0000769C                            
0000769C                            loc_7050:
0000769C 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
000076A2 6500                       		bcs.s	locret_7072
000076A4 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
000076AA 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
000076B0 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
000076B6 6500                       		bcs.s	locret_7072
000076B8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076BE                            
000076BE                            locret_7072:
000076BE 4E75                       		rts	
000076C0                            ; ===========================================================================
000076C0                            
000076C0                            Resize_MZ2:
000076C0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000076C6 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
000076CC 6500                       		bcs.s	locret_7088
000076CE 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
000076D4                            
000076D4                            locret_7088:
000076D4 4E75                       		rts	
000076D6                            ; ===========================================================================
000076D6                            
000076D6                            Resize_MZ3:
000076D6 7000                       		moveq	#0,d0
000076D8 1038 F742                  		move.b	($FFFFF742).w,d0
000076DC 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000076E0 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000076E4                            ; ===========================================================================
000076E4 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000076E6 0000                       		dc.w Resize_MZ3end-off_7098
000076E8                            ; ===========================================================================
000076E8                            
000076E8                            Resize_MZ3boss:
000076E8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000076EE 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000076F4 6500                       		bcs.s	locret_70E8
000076F6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000076FC 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007702 6500                       		bcs.s	locret_70E8
00007704 6100 0000                  		bsr.w	SingleObjLoad
00007708 6600                       		bne.s	loc_70D0
0000770A 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
0000770E 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007714 337C 022C 000C             		move.w	#$22C,$C(a1)
0000771A                            
0000771A                            loc_70D0:
0000771A 303C 008C                  		move.w	#$8C,d0
0000771E 6100 9EAC                  		bsr.w	PlaySound	; play boss music
00007722 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007728 5438 F742                  		addq.b	#2,($FFFFF742).w
0000772C 7011                       		moveq	#$11,d0
0000772E 6000 A086                  		bra.w	LoadPLC		; load boss patterns
00007732                            ; ===========================================================================
00007732                            
00007732                            locret_70E8:
00007732 4E75                       		rts	
00007734                            ; ===========================================================================
00007734                            
00007734                            Resize_MZ3end:
00007734 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000773A 4E75                       		rts	
0000773C                            ; ===========================================================================
0000773C                            ; ---------------------------------------------------------------------------
0000773C                            ; Star Light Zone dynamic screen resizing
0000773C                            ; ---------------------------------------------------------------------------
0000773C                            
0000773C                            Resize_SLZ:				; XREF: Resize_Index
0000773C 7000                       		moveq	#0,d0
0000773E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007742 D040                       		add.w	d0,d0
00007744 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007748 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000774C                            ; ===========================================================================
0000774C 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
0000774E 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00007750 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007752                            ; ===========================================================================
00007752                            
00007752                            Resize_SLZ1:
00007752 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
00007758 4E75                       		rts	
0000775A                            
0000775A                            Resize_SLZ2:
0000775A 4E75                       		rts	
0000775C                            ; ===========================================================================
0000775C                            
0000775C                            Resize_SLZ3:
0000775C 7000                       		moveq	#0,d0
0000775E 1038 F742                  		move.b	($FFFFF742).w,d0
00007762 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007766 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000776A                            ; ===========================================================================
0000776A 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000776C 0000                       		dc.w Resize_SLZ3boss-off_7118
0000776E 0000                       		dc.w Resize_SLZ3end-off_7118
00007770                            ; ===========================================================================
00007770                            
00007770                            Resize_SLZ3main:
00007770 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007776 6500                       		bcs.s	locret_7130
00007778 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000777E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007782                            
00007782                            locret_7130:
00007782 4E75                       		rts	
00007784                            ; ===========================================================================
00007784                            
00007784                            Resize_SLZ3boss:
00007784 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000778A 6500                       		bcs.s	locret_715C
0000778C 6100 0000                  		bsr.w	SingleObjLoad
00007790 6600                       		bne.s	loc_7144
00007792 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007796                            
00007796                            loc_7144:
00007796 303C 008C                  		move.w	#$8C,d0
0000779A 6100 9E30                  		bsr.w	PlaySound	; play boss music
0000779E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000077A4 5438 F742                  		addq.b	#2,($FFFFF742).w
000077A8 7011                       		moveq	#$11,d0
000077AA 6000 A00A                  		bra.w	LoadPLC		; load boss patterns
000077AE                            ; ===========================================================================
000077AE                            
000077AE                            locret_715C:
000077AE 4E75                       		rts	
000077B0                            ; ===========================================================================
000077B0                            
000077B0                            Resize_SLZ3end:
000077B0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000077B6 4E75                       		rts
000077B8 4E75                       		rts
000077BA                            ; ===========================================================================
000077BA                            ; ---------------------------------------------------------------------------
000077BA                            ; Spring Yard Zone dynamic screen resizing
000077BA                            ; ---------------------------------------------------------------------------
000077BA                            
000077BA                            Resize_SYZ:				; XREF: Resize_Index
000077BA 7000                       		moveq	#0,d0
000077BC 1038 FE11                  		move.b	($FFFFFE11).w,d0
000077C0 D040                       		add.w	d0,d0
000077C2 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
000077C6 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
000077CA                            ; ===========================================================================
000077CA 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
000077CC 0000                       		dc.w Resize_SYZ2-Resize_SYZx
000077CE 0000                       		dc.w Resize_SYZ3-Resize_SYZx
000077D0                            ; ===========================================================================
000077D0                            
000077D0                            Resize_SYZ1:
000077D0 4E75                       		rts	
000077D2                            ; ===========================================================================
000077D2                            
000077D2                            Resize_SYZ2:
000077D2 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077D8 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
000077DE 6500                       		bcs.s	locret_71A2
000077E0 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
000077E6 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000077EC 6500                       		bcs.s	locret_71A2
000077EE 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000077F4                            
000077F4                            locret_71A2:
000077F4 4E75                       		rts	
000077F6                            ; ===========================================================================
000077F6                            
000077F6                            Resize_SYZ3:
000077F6 7000                       		moveq	#0,d0
000077F8 1038 F742                  		move.b	($FFFFF742).w,d0
000077FC 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
00007800 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
00007804                            ; ===========================================================================
00007804 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
00007806 0000                       		dc.w Resize_SYZ3boss-off_71B2
00007808 0000                       		dc.w Resize_SYZ3end-off_71B2
0000780A                            ; ===========================================================================
0000780A                            
0000780A                            Resize_SYZ3main:
0000780A 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
00007810 6500                       		bcs.s	locret_71CE
00007812 6100 0000                  		bsr.w	SingleObjLoad
00007816 6600                       		bne.s	locret_71CE
00007818 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
0000781C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007820                            
00007820                            locret_71CE:
00007820 4E75                       		rts	
00007822                            ; ===========================================================================
00007822                            
00007822                            Resize_SYZ3boss:
00007822 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
00007828 6500                       		bcs.s	locret_7200
0000782A 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
00007830 6100 0000                  		bsr.w	SingleObjLoad
00007834 6600                       		bne.s	loc_71EC
00007836 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
0000783A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000783E                            
0000783E                            loc_71EC:
0000783E 303C 008C                  		move.w	#$8C,d0
00007842 6100 9D88                  		bsr.w	PlaySound	; play boss music
00007846 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000784C 7011                       		moveq	#$11,d0
0000784E 6000 9F66                  		bra.w	LoadPLC		; load boss patterns
00007852                            ; ===========================================================================
00007852                            
00007852                            locret_7200:
00007852 4E75                       		rts	
00007854                            ; ===========================================================================
00007854                            
00007854                            Resize_SYZ3end:
00007854 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000785A 4E75                       		rts	
0000785C                            ; ===========================================================================
0000785C                            ; ---------------------------------------------------------------------------
0000785C                            ; Scrap	Brain Zone dynamic screen resizing
0000785C                            ; ---------------------------------------------------------------------------
0000785C                            
0000785C                            Resize_SBZ:				; XREF: Resize_Index
0000785C 7000                       		moveq	#0,d0
0000785E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007862 D040                       		add.w	d0,d0
00007864 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007868 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000786C                            ; ===========================================================================
0000786C 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000786E 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007870 0000                       		dc.w Resize_FZ-Resize_SBZx
00007872                            ; ===========================================================================
00007872                            
00007872                            Resize_SBZ1:
00007872 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007878 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000787E 6500                       		bcs.s	locret_7242
00007880 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007886 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000788C 6500                       		bcs.s	locret_7242
0000788E 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007894                            
00007894                            locret_7242:
00007894 4E75                       		rts	
00007896                            ; ===========================================================================
00007896                            
00007896                            Resize_SBZ2:
00007896 7000                       		moveq	#0,d0
00007898 1038 F742                  		move.b	($FFFFF742).w,d0
0000789C 303B 0000                  		move.w	off_7252(pc,d0.w),d0
000078A0 4EFB 0000                  		jmp	off_7252(pc,d0.w)
000078A4                            ; ===========================================================================
000078A4 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
000078A6 0000                       		dc.w Resize_SBZ2boss-off_7252
000078A8 0000                       		dc.w Resize_SBZ2boss2-off_7252
000078AA 0000                       		dc.w Resize_SBZ2end-off_7252
000078AC                            ; ===========================================================================
000078AC                            
000078AC                            Resize_SBZ2main:
000078AC 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
000078B2 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
000078B8 6500                       		bcs.s	locret_727A
000078BA 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
000078C0 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
000078C6 6500                       		bcs.s	locret_727A
000078C8 5438 F742                  		addq.b	#2,($FFFFF742).w
000078CC                            
000078CC                            locret_727A:
000078CC 4E75                       		rts	
000078CE                            ; ===========================================================================
000078CE                            
000078CE                            Resize_SBZ2boss:
000078CE 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
000078D4 6500                       		bcs.s	locret_7298
000078D6 6100 0000                  		bsr.w	SingleObjLoad
000078DA 6600                       		bne.s	locret_7298
000078DC 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
000078E0 5438 F742                  		addq.b	#2,($FFFFF742).w
000078E4 701E                       		moveq	#$1E,d0
000078E6 6000 9ECE                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000078EA                            ; ===========================================================================
000078EA                            
000078EA                            locret_7298:
000078EA 4E75                       		rts	
000078EC                            ; ===========================================================================
000078EC                            
000078EC                            Resize_SBZ2boss2:
000078EC 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000078F2 6500                       		bcs.s	loc_72B6
000078F4 6100 0000                  		bsr.w	SingleObjLoad
000078F8 6600                       		bne.s	loc_72B0
000078FA 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000078FE 5438 F742                  		addq.b	#2,($FFFFF742).w
00007902                            
00007902                            loc_72B0:
00007902 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007908                            
00007908                            loc_72B6:
00007908 6000                       		bra.s	loc_72C2
0000790A                            ; ===========================================================================
0000790A                            
0000790A                            Resize_SBZ2end:
0000790A 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
00007910 6500                       		bcs.s	loc_72C2
00007912 4E75                       		rts	
00007914                            ; ===========================================================================
00007914                            
00007914                            loc_72C2:
00007914 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000791A 4E75                       		rts	
0000791C                            ; ===========================================================================
0000791C                            
0000791C                            Resize_FZ:
0000791C 7000                       		moveq	#0,d0
0000791E 1038 F742                  		move.b	($FFFFF742).w,d0
00007922 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
00007926 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
0000792A                            ; ===========================================================================
0000792A 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
0000792E 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
00007932 0000                       		dc.w Resize_FZend2-off_72D8
00007934                            ; ===========================================================================
00007934                            
00007934                            Resize_FZmain:
00007934 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
0000793A 6500                       		bcs.s	loc_72F4
0000793C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007940 701F                       		moveq	#$1F,d0
00007942 6100 9E72                  		bsr.w	LoadPLC		; load FZ boss patterns
00007946                            
00007946                            loc_72F4:
00007946 60CC                       		bra.s	loc_72C2
00007948                            ; ===========================================================================
00007948                            
00007948                            Resize_FZboss:
00007948 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
0000794E 6500                       		bcs.s	loc_7312
00007950 6100 0000                  		bsr.w	SingleObjLoad
00007954 6600                       		bne.s	loc_7312
00007956 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000795A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000795E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007964                            
00007964                            loc_7312:
00007964 60AE                       		bra.s	loc_72C2
00007966                            ; ===========================================================================
00007966                            
00007966                            Resize_FZend:
00007966 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000796C 6500                       		bcs.s	loc_7320
0000796E 5438 F742                  		addq.b	#2,($FFFFF742).w
00007972                            
00007972                            loc_7320:
00007972 60A0                       		bra.s	loc_72C2
00007974                            ; ===========================================================================
00007974                            
00007974                            locret_7322:
00007974 4E75                       		rts	
00007976                            ; ===========================================================================
00007976                            
00007976                            Resize_FZend2:
00007976 609C                       		bra.s	loc_72C2
00007978                            ; ===========================================================================
00007978                            ; ---------------------------------------------------------------------------
00007978                            ; Ending sequence dynamic screen resizing (empty)
00007978                            ; ---------------------------------------------------------------------------
00007978                            
00007978                            Resize_Ending:				; XREF: Resize_Index
00007978 4E75                       		rts	
0000797A                            ; ===========================================================================
0000797A                            ; ---------------------------------------------------------------------------
0000797A                            ; Object 11 - GHZ bridge
0000797A                            ; ---------------------------------------------------------------------------
0000797A                            
0000797A                            Obj11:					; XREF: Obj_Index
0000797A 7000                       		moveq	#0,d0
0000797C 1028 0024                  		move.b	$24(a0),d0
00007980 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007984 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007988                            ; ===========================================================================
00007988 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000798C 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007990 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007994                            ; ===========================================================================
00007994                            
00007994                            Obj11_Main:				; XREF: Obj11_Index
00007994 5428 0024                  		addq.b	#2,$24(a0)
00007998 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
000079A0 317C 438E 0002             		move.w	#$438E,2(a0)
000079A6 117C 0004 0001             		move.b	#4,1(a0)
000079AC 117C 0003 0018             		move.b	#3,$18(a0)
000079B2 117C 0080 0019             		move.b	#$80,$19(a0)
000079B8 3428 000C                  		move.w	$C(a0),d2
000079BC 3628 0008                  		move.w	8(a0),d3
000079C0 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
000079C2 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
000079C6 7200                       		moveq	#0,d1
000079C8 1212                       		move.b	(a2),d1		; copy a2 to d1
000079CA 14FC 0000                  		move.b	#0,(a2)+
000079CE 3001                       		move.w	d1,d0
000079D0 E248                       		lsr.w	#1,d0
000079D2 E948                       		lsl.w	#4,d0
000079D4 9640                       		sub.w	d0,d3
000079D6 5501                       		subq.b	#2,d1
000079D8 6500                       		bcs.s	Obj11_Action
000079DA                            
000079DA                            Obj11_MakeBdg:
000079DA 6100 0000                  		bsr.w	SingleObjLoad
000079DE 6600                       		bne.s	Obj11_Action
000079E0 5228 0028                  		addq.b	#1,$28(a0)
000079E4 B668 0008                  		cmp.w	8(a0),d3
000079E8 6600                       		bne.s	loc_73B8
000079EA 0643 0010                  		addi.w	#$10,d3
000079EE 3142 000C                  		move.w	d2,$C(a0)
000079F2 3142 003C                  		move.w	d2,$3C(a0)
000079F6 3A08                       		move.w	a0,d5
000079F8 0445 D000                  		subi.w	#-$3000,d5
000079FC EC4D                       		lsr.w	#6,d5
000079FE 0245 007F                  		andi.w	#$7F,d5
00007A02 14C5                       		move.b	d5,(a2)+
00007A04 5228 0028                  		addq.b	#1,$28(a0)
00007A08                            
00007A08                            loc_73B8:				; XREF: ROM:00007398j
00007A08 3A09                       		move.w	a1,d5
00007A0A 0445 D000                  		subi.w	#-$3000,d5
00007A0E EC4D                       		lsr.w	#6,d5
00007A10 0245 007F                  		andi.w	#$7F,d5
00007A14 14C5                       		move.b	d5,(a2)+
00007A16 137C 000A 0024             		move.b	#$A,$24(a1)
00007A1C 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
00007A1E 3342 000C                  		move.w	d2,$C(a1)
00007A22 3342 003C                  		move.w	d2,$3C(a1)
00007A26 3343 0008                  		move.w	d3,8(a1)
00007A2A 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
00007A32 337C 438E 0002             		move.w	#$438E,2(a1)
00007A38 137C 0004 0001             		move.b	#4,1(a1)
00007A3E 137C 0003 0018             		move.b	#3,$18(a1)
00007A44 137C 0008 0019             		move.b	#8,$19(a1)
00007A4A 0643 0010                  		addi.w	#$10,d3
00007A4E 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00007A52                            
00007A52                            Obj11_Action:				; XREF: Obj11_Index
00007A52 6100                       		bsr.s	Obj11_Solid
00007A54 4A28 003E                  		tst.b	$3E(a0)
00007A58 6700                       		beq.s	Obj11_Display
00007A5A 5928 003E                  		subq.b	#4,$3E(a0)
00007A5E 6100 0000                  		bsr.w	Obj11_Bend
00007A62                            
00007A62                            Obj11_Display:
00007A62 6100 0000                  		bsr.w	DisplaySprite
00007A66 6000 0000                  		bra.w	Obj11_ChkDel
00007A6A                            
00007A6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A6A                            
00007A6A                            
00007A6A                            Obj11_Solid:				; XREF: Obj11_Action
00007A6A 7200                       		moveq	#0,d1
00007A6C 1228 0028                  		move.b	$28(a0),d1
00007A70 E749                       		lsl.w	#3,d1
00007A72 3401                       		move.w	d1,d2
00007A74 5041                       		addq.w	#8,d1
00007A76 D442                       		add.w	d2,d2
00007A78 43F8 D000                  		lea	($FFFFD000).w,a1
00007A7C 4A69 0012                  		tst.w	$12(a1)
00007A80 6B00 0000                  		bmi.w	locret_751E
00007A84 3029 0008                  		move.w	8(a1),d0
00007A88 9068 0008                  		sub.w	8(a0),d0
00007A8C D041                       		add.w	d1,d0
00007A8E 6B00 0000                  		bmi.w	locret_751E
00007A92 B042                       		cmp.w	d2,d0
00007A94 6400 0000                  		bcc.w	locret_751E
00007A98 6000                       		bra.s	Platform2
00007A9A                            ; End of function Obj11_Solid
00007A9A                            
00007A9A                            ; ---------------------------------------------------------------------------
00007A9A                            ; Platform subroutine
00007A9A                            ; ---------------------------------------------------------------------------
00007A9A                            
00007A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A9A                            
00007A9A                            
00007A9A                            PlatformObject:
00007A9A 43F8 D000                  		lea	($FFFFD000).w,a1
00007A9E 4A69 0012                  		tst.w	$12(a1)
00007AA2 6B00 0000                  		bmi.w	locret_751E
00007AA6 3029 0008                  		move.w	8(a1),d0
00007AAA 9068 0008                  		sub.w	8(a0),d0
00007AAE D041                       		add.w	d1,d0
00007AB0 6B00 0000                  		bmi.w	locret_751E
00007AB4 D241                       		add.w	d1,d1
00007AB6 B041                       		cmp.w	d1,d0
00007AB8 6400 0000                  		bcc.w	locret_751E
00007ABC                            
00007ABC                            Platform2:
00007ABC 3028 000C                  		move.w	$C(a0),d0
00007AC0 5140                       		subq.w	#8,d0
00007AC2                            
00007AC2                            Platform3:
00007AC2 3429 000C                  		move.w	$C(a1),d2
00007AC6 1229 0016                  		move.b	$16(a1),d1
00007ACA 4881                       		ext.w	d1
00007ACC D242                       		add.w	d2,d1
00007ACE 5841                       		addq.w	#4,d1
00007AD0 9041                       		sub.w	d1,d0
00007AD2 6200 0000                  		bhi.w	locret_751E
00007AD6 0C40 FFF0                  		cmpi.w	#-$10,d0
00007ADA 6500 0000                  		bcs.w	locret_751E
00007ADE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007AE2 6B00 0000                  		bmi.w	locret_751E
00007AE6 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007AEC 6400 0000                  		bcc.w	locret_751E
00007AF0 D440                       		add.w	d0,d2
00007AF2 5642                       		addq.w	#3,d2
00007AF4 3342 000C                  		move.w	d2,$C(a1)
00007AF8 5428 0024                  		addq.b	#2,$24(a0)
00007AFC                            
00007AFC                            loc_74AE:
00007AFC 0829 0003 0022             		btst	#3,$22(a1)
00007B02 6700                       		beq.s	loc_74DC
00007B04 7000                       		moveq	#0,d0
00007B06 1029 003D                  		move.b	$3D(a1),d0
00007B0A ED48                       		lsl.w	#6,d0
00007B0C 0680 00FF D000             		addi.l	#$FFD000,d0
00007B12 2440                       		movea.l	d0,a2
00007B14 08AA 0003 0022             		bclr	#3,$22(a2)
00007B1A 422A 0025                  		clr.b	$25(a2)
00007B1E 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
00007B24 6600                       		bne.s	loc_74DC
00007B26 552A 0024                  		subq.b	#2,$24(a2)
00007B2A                            
00007B2A                            loc_74DC:
00007B2A 3008                       		move.w	a0,d0
00007B2C 0440 D000                  		subi.w	#-$3000,d0
00007B30 EC48                       		lsr.w	#6,d0
00007B32 0240 007F                  		andi.w	#$7F,d0
00007B36 1340 003D                  		move.b	d0,$3D(a1)
00007B3A 137C 0000 0026             		move.b	#0,$26(a1)
00007B40 337C 0000 0012             		move.w	#0,$12(a1)
00007B46 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007B4C 0829 0001 0022             		btst	#1,$22(a1)
00007B52 6700                       		beq.s	loc_7512
00007B54 2F08                       		move.l	a0,-(sp)
00007B56 2049                       		movea.l	a1,a0
00007B58 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007B5E 205F                       		movea.l	(sp)+,a0
00007B60                            
00007B60                            loc_7512:
00007B60 08E9 0003 0022             		bset	#3,$22(a1)
00007B66 08E8 0003 0022             		bset	#3,$22(a0)
00007B6C                            
00007B6C                            locret_751E:
00007B6C 4E75                       		rts	
00007B6E                            ; End of function PlatformObject
00007B6E                            
00007B6E                            ; ---------------------------------------------------------------------------
00007B6E                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007B6E                            ; ---------------------------------------------------------------------------
00007B6E                            
00007B6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B6E                            
00007B6E                            
00007B6E                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007B6E 43F8 D000                  		lea	($FFFFD000).w,a1
00007B72 4A69 0012                  		tst.w	$12(a1)
00007B76 6B00 FFF4                  		bmi.w	locret_751E
00007B7A 3029 0008                  		move.w	8(a1),d0
00007B7E 9068 0008                  		sub.w	8(a0),d0
00007B82 D041                       		add.w	d1,d0
00007B84 6BE6                       		bmi.s	locret_751E
00007B86 D241                       		add.w	d1,d1
00007B88 B041                       		cmp.w	d1,d0
00007B8A 64E0                       		bcc.s	locret_751E
00007B8C 0828 0000 0001             		btst	#0,1(a0)
00007B92 6700                       		beq.s	loc_754A
00007B94 4640                       		not.w	d0
00007B96 D041                       		add.w	d1,d0
00007B98                            
00007B98                            loc_754A:
00007B98 E248                       		lsr.w	#1,d0
00007B9A 7600                       		moveq	#0,d3
00007B9C 1632 0000                  		move.b	(a2,d0.w),d3
00007BA0 3028 000C                  		move.w	$C(a0),d0
00007BA4 9043                       		sub.w	d3,d0
00007BA6 6000 FF1A                  		bra.w	Platform3
00007BAA                            ; End of function SlopeObject
00007BAA                            
00007BAA                            
00007BAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BAA                            
00007BAA                            
00007BAA                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007BAA 43F8 D000                  		lea	($FFFFD000).w,a1
00007BAE 4A69 0012                  		tst.w	$12(a1)
00007BB2 6B00 FFB8                  		bmi.w	locret_751E
00007BB6 3029 0008                  		move.w	8(a1),d0
00007BBA 9068 0008                  		sub.w	8(a0),d0
00007BBE D041                       		add.w	d1,d0
00007BC0 6B00 FFAA                  		bmi.w	locret_751E
00007BC4 D241                       		add.w	d1,d1
00007BC6 B041                       		cmp.w	d1,d0
00007BC8 6400 FFA2                  		bcc.w	locret_751E
00007BCC 3028 000C                  		move.w	$C(a0),d0
00007BD0 9043                       		sub.w	d3,d0
00007BD2 6000 FEEE                  		bra.w	Platform3
00007BD6                            ; End of function Obj15_Solid
00007BD6                            
00007BD6                            ; ===========================================================================
00007BD6                            
00007BD6                            Obj11_Action2:				; XREF: Obj11_Index
00007BD6 6100                       		bsr.s	Obj11_WalkOff
00007BD8 6100 0000                  		bsr.w	DisplaySprite
00007BDC 6000 0000                  		bra.w	Obj11_ChkDel
00007BE0                            
00007BE0                            ; ---------------------------------------------------------------------------
00007BE0                            ; Subroutine allowing Sonic to walk off a bridge
00007BE0                            ; ---------------------------------------------------------------------------
00007BE0                            
00007BE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BE0                            
00007BE0                            
00007BE0                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007BE0 7200                       		moveq	#0,d1
00007BE2 1228 0028                  		move.b	$28(a0),d1
00007BE6 E749                       		lsl.w	#3,d1
00007BE8 3401                       		move.w	d1,d2
00007BEA 5041                       		addq.w	#8,d1
00007BEC 6100                       		bsr.s	ExitPlatform2
00007BEE 6400                       		bcc.s	locret_75BE
00007BF0 E848                       		lsr.w	#4,d0
00007BF2 1140 003F                  		move.b	d0,$3F(a0)
00007BF6 1028 003E                  		move.b	$3E(a0),d0
00007BFA 0C00 0040                  		cmpi.b	#$40,d0
00007BFE 6700                       		beq.s	loc_75B6
00007C00 5828 003E                  		addq.b	#4,$3E(a0)
00007C04                            
00007C04                            loc_75B6:
00007C04 6100 0000                  		bsr.w	Obj11_Bend
00007C08 6100 0000                  		bsr.w	Obj11_MoveSonic
00007C0C                            
00007C0C                            locret_75BE:
00007C0C 4E75                       		rts	
00007C0E                            ; End of function Obj11_WalkOff
00007C0E                            
00007C0E                            ; ---------------------------------------------------------------------------
00007C0E                            ; Subroutine allowing Sonic to walk or jump off	a platform
00007C0E                            ; ---------------------------------------------------------------------------
00007C0E                            
00007C0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C0E                            
00007C0E                            
00007C0E                            ExitPlatform:
00007C0E 3401                       		move.w	d1,d2
00007C10                            
00007C10                            ExitPlatform2:
00007C10 D442                       		add.w	d2,d2
00007C12 43F8 D000                  		lea	($FFFFD000).w,a1
00007C16 0829 0001 0022             		btst	#1,$22(a1)
00007C1C 6600                       		bne.s	loc_75E0
00007C1E 3029 0008                  		move.w	8(a1),d0
00007C22 9068 0008                  		sub.w	8(a0),d0
00007C26 D041                       		add.w	d1,d0
00007C28 6B00                       		bmi.s	loc_75E0
00007C2A B042                       		cmp.w	d2,d0
00007C2C 6500                       		bcs.s	locret_75F2
00007C2E                            
00007C2E                            loc_75E0:
00007C2E 08A9 0003 0022             		bclr	#3,$22(a1)
00007C34 117C 0002 0024             		move.b	#2,$24(a0)
00007C3A 08A8 0003 0022             		bclr	#3,$22(a0)
00007C40                            
00007C40                            locret_75F2:
00007C40 4E75                       		rts	
00007C42                            ; End of function ExitPlatform
00007C42                            
00007C42                            
00007C42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C42                            
00007C42                            
00007C42                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
00007C42 7000                       		moveq	#0,d0
00007C44 1028 003F                  		move.b	$3F(a0),d0
00007C48 1030 0029                  		move.b	$29(a0,d0.w),d0
00007C4C ED48                       		lsl.w	#6,d0
00007C4E 0680 00FF D000             		addi.l	#$FFD000,d0
00007C54 2440                       		movea.l	d0,a2
00007C56 43F8 D000                  		lea	($FFFFD000).w,a1
00007C5A 302A 000C                  		move.w	$C(a2),d0
00007C5E 5140                       		subq.w	#8,d0
00007C60 7200                       		moveq	#0,d1
00007C62 1229 0016                  		move.b	$16(a1),d1
00007C66 9041                       		sub.w	d1,d0
00007C68 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007C6C 4E75                       		rts	
00007C6E                            ; End of function Obj11_MoveSonic
00007C6E                            
00007C6E                            
00007C6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C6E                            
00007C6E                            
00007C6E                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007C6E 1028 003E                  		move.b	$3E(a0),d0
00007C72 6100 B08A                  		bsr.w	CalcSine
00007C76 3800                       		move.w	d0,d4
00007C78 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007C7E 7000                       		moveq	#0,d0
00007C80 1028 0028                  		move.b	$28(a0),d0
00007C84 E948                       		lsl.w	#4,d0
00007C86 7600                       		moveq	#0,d3
00007C88 1628 003F                  		move.b	$3F(a0),d3
00007C8C 3403                       		move.w	d3,d2
00007C8E D640                       		add.w	d0,d3
00007C90 7A00                       		moveq	#0,d5
00007C92 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007C98 1A35 3000                  		move.b	(a5,d3.w),d5
00007C9C 0243 000F                  		andi.w	#$F,d3
00007CA0 E94B                       		lsl.w	#4,d3
00007CA2 47F4 3000                  		lea	(a4,d3.w),a3
00007CA6 45E8 0029                  		lea	$29(a0),a2
00007CAA                            
00007CAA                            loc_765C:
00007CAA 7000                       		moveq	#0,d0
00007CAC 101A                       		move.b	(a2)+,d0
00007CAE ED48                       		lsl.w	#6,d0
00007CB0 0680 00FF D000             		addi.l	#$FFD000,d0
00007CB6 2240                       		movea.l	d0,a1
00007CB8 7000                       		moveq	#0,d0
00007CBA 101B                       		move.b	(a3)+,d0
00007CBC 5240                       		addq.w	#1,d0
00007CBE C0C5                       		mulu.w	d5,d0
00007CC0 C0C4                       		mulu.w	d4,d0
00007CC2 4840                       		swap	d0
00007CC4 D069 003C                  		add.w	$3C(a1),d0
00007CC8 3340 000C                  		move.w	d0,$C(a1)
00007CCC 51CA FFDC                  		dbf	d2,loc_765C
00007CD0 7000                       		moveq	#0,d0
00007CD2 1028 0028                  		move.b	$28(a0),d0
00007CD6 7600                       		moveq	#0,d3
00007CD8 1628 003F                  		move.b	$3F(a0),d3
00007CDC 5203                       		addq.b	#1,d3
00007CDE 9600                       		sub.b	d0,d3
00007CE0 4403                       		neg.b	d3
00007CE2 6B00                       		bmi.s	locret_76CA
00007CE4 3403                       		move.w	d3,d2
00007CE6 E94B                       		lsl.w	#4,d3
00007CE8 47F4 3000                  		lea	(a4,d3.w),a3
00007CEC D6C2                       		adda.w	d2,a3
00007CEE 5342                       		subq.w	#1,d2
00007CF0 6500                       		bcs.s	locret_76CA
00007CF2                            
00007CF2                            loc_76A4:
00007CF2 7000                       		moveq	#0,d0
00007CF4 101A                       		move.b	(a2)+,d0
00007CF6 ED48                       		lsl.w	#6,d0
00007CF8 0680 00FF D000             		addi.l	#$FFD000,d0
00007CFE 2240                       		movea.l	d0,a1
00007D00 7000                       		moveq	#0,d0
00007D02 1023                       		move.b	-(a3),d0
00007D04 5240                       		addq.w	#1,d0
00007D06 C0C5                       		mulu.w	d5,d0
00007D08 C0C4                       		mulu.w	d4,d0
00007D0A 4840                       		swap	d0
00007D0C D069 003C                  		add.w	$3C(a1),d0
00007D10 3340 000C                  		move.w	d0,$C(a1)
00007D14 51CA FFDC                  		dbf	d2,loc_76A4
00007D18                            
00007D18                            locret_76CA:
00007D18 4E75                       		rts	
00007D1A                            ; End of function Obj11_Bend
00007D1A                            
00007D1A                            ; ===========================================================================
00007D1A                            ; ---------------------------------------------------------------------------
00007D1A                            ; GHZ bridge-bending data
00007D1A                            ; (Defines how the bridge bends	when Sonic walks across	it)
00007D1A                            ; ---------------------------------------------------------------------------
00007D1A                            Obj11_BendData:	incbin	misc\ghzbend1.bin
00007E2A                            		even
00007E2A                            Obj11_BendData2:incbin	misc\ghzbend2.bin
00007F2A                            		even
00007F2A                            
00007F2A                            ; ===========================================================================
00007F2A                            
00007F2A                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
00007F2A 3028 0008                  		move.w	8(a0),d0
00007F2E 0240 FF80                  		andi.w	#$FF80,d0
00007F32 3238 F700                  		move.w	($FFFFF700).w,d1
00007F36 0441 0080                  		subi.w	#$80,d1
00007F3A 0241 FF80                  		andi.w	#$FF80,d1
00007F3E 9041                       		sub.w	d1,d0
00007F40 0C40 0280                  		cmpi.w	#$280,d0
00007F44 6200 0000                  		bhi.w	Obj11_DelAll
00007F48 4E75                       		rts	
00007F4A                            ; ===========================================================================
00007F4A                            
00007F4A                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007F4A 7400                       		moveq	#0,d2
00007F4C 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007F50 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007F52 5302                       		subq.b	#1,d2		; subtract 1
00007F54 6500                       		bcs.s	Obj11_Delete
00007F56                            
00007F56                            Obj11_DelLoop:
00007F56 7000                       		moveq	#0,d0
00007F58 101A                       		move.b	(a2)+,d0
00007F5A ED48                       		lsl.w	#6,d0
00007F5C 0680 00FF D000             		addi.l	#$FFD000,d0
00007F62 2240                       		movea.l	d0,a1
00007F64 B048                       		cmp.w	a0,d0
00007F66 6700                       		beq.s	loc_791E
00007F68 6100 0000                  		bsr.w	DeleteObject2
00007F6C                            
00007F6C                            loc_791E:
00007F6C 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007F70                            
00007F70                            Obj11_Delete:
00007F70 6100 0000                  		bsr.w	DeleteObject
00007F74 4E75                       		rts	
00007F76                            ; ===========================================================================
00007F76                            
00007F76                            Obj11_Delete2:				; XREF: Obj11_Index
00007F76 6100 0000                  		bsr.w	DeleteObject
00007F7A 4E75                       		rts	
00007F7C                            ; ===========================================================================
00007F7C                            
00007F7C                            Obj11_Display2:				; XREF: Obj11_Index
00007F7C 6100 0000                  		bsr.w	DisplaySprite
00007F80 4E75                       		rts	
00007F82                            ; ===========================================================================
00007F82                            ; ---------------------------------------------------------------------------
00007F82                            ; Sprite mappings - GHZ	bridge
00007F82                            ; ---------------------------------------------------------------------------
00007F82                            Map_obj11:
00007F82                            	include "_maps\obj11.asm"
00007F82                            ; ---------------------------------------------------------------------------
00007F82                            ; Sprite mappings - GHZ	bridge
00007F82                            ; ---------------------------------------------------------------------------
00007F82 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007F86 0000                       		dc.w byte_794B-Map_obj11
00007F88 01                         byte_793A:	dc.b 1
00007F89 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007F8E 02                         byte_7940:	dc.b 2
00007F8F F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007F94 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007F99 01                         byte_794B:	dc.b 1
00007F9A FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007FA0 00                         		even
00007FA0 00                         		even
00007FA0                            
00007FA0                            ; ===========================================================================
00007FA0                            ; ---------------------------------------------------------------------------
00007FA0                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007FA0                            ;	    - spiked ball on a chain (SBZ)
00007FA0                            ; ---------------------------------------------------------------------------
00007FA0                            
00007FA0                            Obj15:					; XREF: Obj_Index
00007FA0 7000                       		moveq	#0,d0
00007FA2 1028 0024                  		move.b	$24(a0),d0
00007FA6 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007FAA 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007FAE                            ; ===========================================================================
00007FAE 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007FB2 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007FB6 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007FBA 0000                       		dc.w Obj15_Action-Obj15_Index
00007FBC                            ; ===========================================================================
00007FBC                            
00007FBC                            Obj15_Main:				; XREF: Obj15_Index
00007FBC 5428 0024                  		addq.b	#2,$24(a0)
00007FC0 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007FC8 317C 4380 0002             		move.w	#$4380,2(a0)
00007FCE 117C 0004 0001             		move.b	#4,1(a0)
00007FD4 117C 0003 0018             		move.b	#3,$18(a0)
00007FDA 117C 0018 0019             		move.b	#$18,$19(a0)
00007FE0 117C 0008 0016             		move.b	#8,$16(a0)
00007FE6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007FEC 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007FF2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007FF8 6600                       		bne.s	Obj15_NotSLZ
00007FFA 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00008002 317C 43DC 0002             		move.w	#$43DC,2(a0)
00008008 117C 0020 0019             		move.b	#$20,$19(a0)
0000800E 117C 0010 0016             		move.b	#$10,$16(a0)
00008014 117C 0099 0020             		move.b	#$99,$20(a0)
0000801A                            
0000801A                            Obj15_NotSLZ:
0000801A 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008020 6600                       		bne.s	Obj15_SetLength
00008022 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
0000802A 317C 0391 0002             		move.w	#$391,2(a0)
00008030 117C 0018 0019             		move.b	#$18,$19(a0)
00008036 117C 0018 0016             		move.b	#$18,$16(a0)
0000803C 117C 0086 0020             		move.b	#$86,$20(a0)
00008042 117C 000C 0024             		move.b	#$C,$24(a0)
00008048                            
00008048                            Obj15_SetLength:
00008048 1810                       		move.b	0(a0),d4
0000804A 7200                       		moveq	#0,d1
0000804C 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008050 1212                       		move.b	(a2),d1		; move a2 to d1
00008052 3F01                       		move.w	d1,-(sp)
00008054 0241 000F                  		andi.w	#$F,d1
00008058 14FC 0000                  		move.b	#0,(a2)+
0000805C 3601                       		move.w	d1,d3
0000805E E94B                       		lsl.w	#4,d3
00008060 5003                       		addq.b	#8,d3
00008062 1143 003C                  		move.b	d3,$3C(a0)
00008066 5103                       		subq.b	#8,d3
00008068 4A28 001A                  		tst.b	$1A(a0)
0000806C 6700                       		beq.s	Obj15_MakeChain
0000806E 5003                       		addq.b	#8,d3
00008070 5341                       		subq.w	#1,d1
00008072                            
00008072                            Obj15_MakeChain:
00008072 6100 0000                  		bsr.w	SingleObjLoad
00008076 6600                       		bne.s	loc_7A92
00008078 5228 0028                  		addq.b	#1,$28(a0)
0000807C 3A09                       		move.w	a1,d5
0000807E 0445 D000                  		subi.w	#-$3000,d5
00008082 EC4D                       		lsr.w	#6,d5
00008084 0245 007F                  		andi.w	#$7F,d5
00008088 14C5                       		move.b	d5,(a2)+
0000808A 137C 000A 0024             		move.b	#$A,$24(a1)
00008090 1284                       		move.b	d4,0(a1)	; load swinging	object
00008092 2368 0004 0004             		move.l	4(a0),4(a1)
00008098 3368 0002 0002             		move.w	2(a0),2(a1)
0000809E 08A9 0006 0002             		bclr	#6,2(a1)
000080A4 137C 0004 0001             		move.b	#4,1(a1)
000080AA 137C 0004 0018             		move.b	#4,$18(a1)
000080B0 137C 0008 0019             		move.b	#8,$19(a1)
000080B6 137C 0001 001A             		move.b	#1,$1A(a1)
000080BC 1343 003C                  		move.b	d3,$3C(a1)
000080C0 0403 0010                  		subi.b	#$10,d3
000080C4 6400                       		bcc.s	loc_7A8E
000080C6 137C 0002 001A             		move.b	#2,$1A(a1)
000080CC 137C 0003 0018             		move.b	#3,$18(a1)
000080D2 08E9 0006 0002             		bset	#6,2(a1)
000080D8                            
000080D8                            loc_7A8E:
000080D8 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
000080DC                            
000080DC                            loc_7A92:
000080DC 3A08                       		move.w	a0,d5
000080DE 0445 D000                  		subi.w	#-$3000,d5
000080E2 EC4D                       		lsr.w	#6,d5
000080E4 0245 007F                  		andi.w	#$7F,d5
000080E8 14C5                       		move.b	d5,(a2)+
000080EA 317C 4080 0026             		move.w	#$4080,$26(a0)
000080F0 317C FE00 003E             		move.w	#-$200,$3E(a0)
000080F6 321F                       		move.w	(sp)+,d1
000080F8 0801 0004                  		btst	#4,d1		; is object type $8X ?
000080FC 6700                       		beq.s	loc_7AD4	; if not, branch
000080FE 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00008106 317C 43AA 0002             		move.w	#$43AA,2(a0)
0000810C 117C 0001 001A             		move.b	#1,$1A(a0)
00008112 117C 0002 0018             		move.b	#2,$18(a0)
00008118 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
0000811E                            
0000811E                            loc_7AD4:
0000811E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00008124 6700                       		beq.s	Obj15_Action	; if yes, branch
00008126                            
00008126                            Obj15_SetSolid:				; XREF: Obj15_Index
00008126 7200                       		moveq	#0,d1
00008128 1228 0019                  		move.b	$19(a0),d1
0000812C 7600                       		moveq	#0,d3
0000812E 1628 0016                  		move.b	$16(a0),d3
00008132 6100 FA76                  		bsr.w	Obj15_Solid
00008136                            
00008136                            Obj15_Action:				; XREF: Obj15_Index
00008136 6100 0000                  		bsr.w	Obj15_Move
0000813A 6100 0000                  		bsr.w	DisplaySprite
0000813E 6000 0000                  		bra.w	Obj15_ChkDel
00008142                            ; ===========================================================================
00008142                            
00008142                            Obj15_Action2:				; XREF: Obj15_Index
00008142 7200                       		moveq	#0,d1
00008144 1228 0019                  		move.b	$19(a0),d1
00008148 6100 FAC4                  		bsr.w	ExitPlatform
0000814C 3F28 0008                  		move.w	8(a0),-(sp)
00008150 6100 0000                  		bsr.w	Obj15_Move
00008154 341F                       		move.w	(sp)+,d2
00008156 7600                       		moveq	#0,d3
00008158 1628 0016                  		move.b	$16(a0),d3
0000815C 5203                       		addq.b	#1,d3
0000815E 6100 0000                  		bsr.w	MvSonicOnPtfm
00008162 6100 0000                  		bsr.w	DisplaySprite
00008166 6000 0000                  		bra.w	Obj15_ChkDel
0000816A                            
0000816A 4E75                       		rts
0000816C                            
0000816C                            ; ---------------------------------------------------------------------------
0000816C                            ; Subroutine to	change Sonic's position with a platform
0000816C                            ; ---------------------------------------------------------------------------
0000816C                            
0000816C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000816C                            
0000816C                            
0000816C                            MvSonicOnPtfm:
0000816C 43F8 D000                  		lea	($FFFFD000).w,a1
00008170 3028 000C                  		move.w	$C(a0),d0
00008174 9043                       		sub.w	d3,d0
00008176 6000                       		bra.s	MvSonic2
00008178                            ; End of function MvSonicOnPtfm
00008178                            
00008178                            ; ---------------------------------------------------------------------------
00008178                            ; Subroutine to	change Sonic's position with a platform
00008178                            ; ---------------------------------------------------------------------------
00008178                            
00008178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008178                            
00008178                            
00008178                            MvSonicOnPtfm2:
00008178 43F8 D000                  		lea	($FFFFD000).w,a1
0000817C 3028 000C                  		move.w	$C(a0),d0
00008180 0440 0009                  		subi.w	#9,d0
00008184                            
00008184                            MvSonic2:
00008184 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008188 6B00                       		bmi.s	locret_7B62
0000818A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008190 6400                       		bcc.s	locret_7B62
00008192 4A78 FE08                  		tst.w	($FFFFFE08).w
00008196 6600                       		bne.s	locret_7B62
00008198 7200                       		moveq	#0,d1
0000819A 1229 0016                  		move.b	$16(a1),d1
0000819E 9041                       		sub.w	d1,d0
000081A0 3340 000C                  		move.w	d0,$C(a1)
000081A4 9468 0008                  		sub.w	8(a0),d2
000081A8 9569 0008                  		sub.w	d2,8(a1)
000081AC                            
000081AC                            locret_7B62:
000081AC 4E75                       		rts	
000081AE                            ; End of function MvSonicOnPtfm2
000081AE                            
000081AE                            
000081AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081AE                            
000081AE                            
000081AE                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
000081AE 1038 FE78                  		move.b	($FFFFFE78).w,d0
000081B2 323C 0080                  		move.w	#$80,d1
000081B6 0828 0000 0022             		btst	#0,$22(a0)
000081BC 6700                       		beq.s	loc_7B78
000081BE 4440                       		neg.w	d0
000081C0 D041                       		add.w	d1,d0
000081C2                            
000081C2                            loc_7B78:
000081C2 6000                       		bra.s	Obj15_Move2
000081C4                            ; End of function Obj15_Move
000081C4                            
000081C4                            
000081C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000081C4                            
000081C4                            
000081C4                            Obj48_Move:				; XREF: Obj48_Display2
000081C4 4A28 003D                  		tst.b	$3D(a0)
000081C8 6600                       		bne.s	loc_7B9C
000081CA 3028 003E                  		move.w	$3E(a0),d0
000081CE 5040                       		addq.w	#8,d0
000081D0 3140 003E                  		move.w	d0,$3E(a0)
000081D4 D168 0026                  		add.w	d0,$26(a0)
000081D8 0C40 0200                  		cmpi.w	#$200,d0
000081DC 6600                       		bne.s	loc_7BB6
000081DE 117C 0001 003D             		move.b	#1,$3D(a0)
000081E4 6000                       		bra.s	loc_7BB6
000081E6                            ; ===========================================================================
000081E6                            
000081E6                            loc_7B9C:
000081E6 3028 003E                  		move.w	$3E(a0),d0
000081EA 5140                       		subq.w	#8,d0
000081EC 3140 003E                  		move.w	d0,$3E(a0)
000081F0 D168 0026                  		add.w	d0,$26(a0)
000081F4 0C40 FE00                  		cmpi.w	#-$200,d0
000081F8 6600                       		bne.s	loc_7BB6
000081FA 117C 0000 003D             		move.b	#0,$3D(a0)
00008200                            
00008200                            loc_7BB6:
00008200 1028 0026                  		move.b	$26(a0),d0
00008204                            ; End of function Obj48_Move
00008204                            
00008204                            
00008204                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008204                            
00008204                            
00008204                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008204 6100 AAF8                  		bsr.w	CalcSine
00008208 3428 0038                  		move.w	$38(a0),d2
0000820C 3628 003A                  		move.w	$3A(a0),d3
00008210 45E8 0028                  		lea	$28(a0),a2
00008214 7C00                       		moveq	#0,d6
00008216 1C1A                       		move.b	(a2)+,d6
00008218                            
00008218                            loc_7BCE:
00008218 7800                       		moveq	#0,d4
0000821A 181A                       		move.b	(a2)+,d4
0000821C ED4C                       		lsl.w	#6,d4
0000821E 0684 00FF D000             		addi.l	#$FFD000,d4
00008224 2244                       		movea.l	d4,a1
00008226 7800                       		moveq	#0,d4
00008228 1829 003C                  		move.b	$3C(a1),d4
0000822C 2A04                       		move.l	d4,d5
0000822E C9C0                       		muls.w	d0,d4
00008230 E084                       		asr.l	#8,d4
00008232 CBC1                       		muls.w	d1,d5
00008234 E085                       		asr.l	#8,d5
00008236 D842                       		add.w	d2,d4
00008238 DA43                       		add.w	d3,d5
0000823A 3344 000C                  		move.w	d4,$C(a1)
0000823E 3345 0008                  		move.w	d5,8(a1)
00008242 51CE FFD4                  		dbf	d6,loc_7BCE
00008246 4E75                       		rts	
00008248                            ; End of function Obj15_Move2
00008248                            
00008248                            ; ===========================================================================
00008248                            
00008248                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008248 3028 003A                  		move.w	$3A(a0),d0
0000824C 0240 FF80                  		andi.w	#$FF80,d0
00008250 3238 F700                  		move.w	($FFFFF700).w,d1
00008254 0441 0080                  		subi.w	#$80,d1
00008258 0241 FF80                  		andi.w	#$FF80,d1
0000825C 9041                       		sub.w	d1,d0
0000825E 0C40 0280                  		cmpi.w	#$280,d0
00008262 6200 0000                  		bhi.w	Obj15_DelAll
00008266 4E75                       		rts	
00008268                            ; ===========================================================================
00008268                            
00008268                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008268 7400                       		moveq	#0,d2
0000826A 45E8 0028                  		lea	$28(a0),a2
0000826E 141A                       		move.b	(a2)+,d2
00008270                            
00008270                            Obj15_DelLoop:
00008270 7000                       		moveq	#0,d0
00008272 101A                       		move.b	(a2)+,d0
00008274 ED48                       		lsl.w	#6,d0
00008276 0680 00FF D000             		addi.l	#$FFD000,d0
0000827C 2240                       		movea.l	d0,a1
0000827E 6100 0000                  		bsr.w	DeleteObject2
00008282 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008286 4E75                       		rts	
00008288                            ; ===========================================================================
00008288                            
00008288                            Obj15_Delete:				; XREF: Obj15_Index
00008288 6100 0000                  		bsr.w	DeleteObject
0000828C 4E75                       		rts	
0000828E                            ; ===========================================================================
0000828E                            
0000828E                            Obj15_Display:				; XREF: Obj15_Index
0000828E 6000 0000                  		bra.w	DisplaySprite
00008292                            ; ===========================================================================
00008292                            ; ---------------------------------------------------------------------------
00008292                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008292                            ; ---------------------------------------------------------------------------
00008292                            Map_obj15:
00008292                            	include "_maps\obj15ghz.asm"
00008292                            ; ---------------------------------------------------------------------------
00008292                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008292                            ; ---------------------------------------------------------------------------
00008292 0000                       		dc.w byte_7C4E-Map_obj15
00008294 0000                       		dc.w byte_7C59-Map_obj15
00008296 0000                       		dc.w byte_7C5F-Map_obj15
00008298 02                         byte_7C4E:	dc.b 2
00008299 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
0000829E F809 0004 00               		dc.b $F8, 9, 0,	4, 0
000082A3 01                         byte_7C59:	dc.b 1
000082A4 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000082A9 01                         byte_7C5F:	dc.b 1
000082AA F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
000082B0 00                         		even
000082B0 00                         		even
000082B0                            
000082B0                            ; ---------------------------------------------------------------------------
000082B0                            ; Sprite mappings - SLZ	swinging platforms
000082B0                            ; ---------------------------------------------------------------------------
000082B0                            Map_obj15a:
000082B0                            	include "_maps\obj15slz.asm"
000082B0                            ; ---------------------------------------------------------------------------
000082B0                            ; Sprite mappings - SLZ	swinging platforms
000082B0                            ; ---------------------------------------------------------------------------
000082B0 0000                       		dc.w byte_7C6C-Map_obj15a
000082B2 0000                       		dc.w byte_7C95-Map_obj15a
000082B4 0000                       		dc.w byte_7C9B-Map_obj15a
000082B6 08                         byte_7C6C:	dc.b 8
000082B7 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
000082BC F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
000082C1 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
000082C6 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
000082CB 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
000082D0 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
000082D5 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
000082DA 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
000082DF 01                         byte_7C95:	dc.b 1
000082E0 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
000082E5 01                         byte_7C9B:	dc.b 1
000082E6 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
000082EC 00                         		even
000082EC 00                         		even
000082EC                            
000082EC                            ; ===========================================================================
000082EC                            ; ---------------------------------------------------------------------------
000082EC                            ; Object 17 - helix of spikes on a pole	(GHZ)
000082EC                            ; ---------------------------------------------------------------------------
000082EC                            
000082EC                            Obj17:					; XREF: Obj_Index
000082EC 7000                       		moveq	#0,d0
000082EE 1028 0024                  		move.b	$24(a0),d0
000082F2 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
000082F6 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
000082FA                            ; ===========================================================================
000082FA 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
000082FC 0000                       		dc.w Obj17_Action-Obj17_Index
000082FE 0000                       		dc.w Obj17_Action-Obj17_Index
00008300 0000                       		dc.w Obj17_Delete-Obj17_Index
00008302 0000                       		dc.w Obj17_Display-Obj17_Index
00008304                            ; ===========================================================================
00008304                            
00008304                            Obj17_Main:				; XREF: Obj17_Index
00008304 5428 0024                  		addq.b	#2,$24(a0)
00008308 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008310 317C 4398 0002             		move.w	#$4398,2(a0)
00008316 117C 0007 0022             		move.b	#7,$22(a0)
0000831C 117C 0004 0001             		move.b	#4,1(a0)
00008322 117C 0003 0018             		move.b	#3,$18(a0)
00008328 117C 0008 0019             		move.b	#8,$19(a0)
0000832E 3428 000C                  		move.w	$C(a0),d2
00008332 3628 0008                  		move.w	8(a0),d3
00008336 1810                       		move.b	0(a0),d4
00008338 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
0000833C 7200                       		moveq	#0,d1
0000833E 1212                       		move.b	(a2),d1		; move a2 to d1
00008340 14FC 0000                  		move.b	#0,(a2)+
00008344 3001                       		move.w	d1,d0
00008346 E248                       		lsr.w	#1,d0
00008348 E948                       		lsl.w	#4,d0
0000834A 9640                       		sub.w	d0,d3
0000834C 5501                       		subq.b	#2,d1
0000834E 6500                       		bcs.s	Obj17_Action
00008350 7C00                       		moveq	#0,d6
00008352                            
00008352                            Obj17_MakeHelix:
00008352 6100 0000                  		bsr.w	SingleObjLoad
00008356 6600                       		bne.s	Obj17_Action
00008358 5228 0028                  		addq.b	#1,$28(a0)
0000835C 3A09                       		move.w	a1,d5
0000835E 0445 D000                  		subi.w	#$D000,d5
00008362 EC4D                       		lsr.w	#6,d5
00008364 0245 007F                  		andi.w	#$7F,d5
00008368 14C5                       		move.b	d5,(a2)+
0000836A 137C 0008 0024             		move.b	#8,$24(a1)
00008370 1284                       		move.b	d4,0(a1)
00008372 3342 000C                  		move.w	d2,$C(a1)
00008376 3343 0008                  		move.w	d3,8(a1)
0000837A 2368 0004 0004             		move.l	4(a0),4(a1)
00008380 337C 4398 0002             		move.w	#$4398,2(a1)
00008386 137C 0004 0001             		move.b	#4,1(a1)
0000838C 137C 0003 0018             		move.b	#3,$18(a1)
00008392 137C 0008 0019             		move.b	#8,$19(a1)
00008398 1346 003E                  		move.b	d6,$3E(a1)
0000839C 5206                       		addq.b	#1,d6
0000839E 0206 0007                  		andi.b	#7,d6
000083A2 0643 0010                  		addi.w	#$10,d3
000083A6 B668 0008                  		cmp.w	8(a0),d3
000083AA 6600                       		bne.s	loc_7D78
000083AC 1146 003E                  		move.b	d6,$3E(a0)
000083B0 5206                       		addq.b	#1,d6
000083B2 0206 0007                  		andi.b	#7,d6
000083B6 0643 0010                  		addi.w	#$10,d3
000083BA 5228 0028                  		addq.b	#1,$28(a0)
000083BE                            
000083BE                            loc_7D78:
000083BE 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
000083C2                            
000083C2                            Obj17_Action:				; XREF: Obj17_Index
000083C2 6100 0000                  		bsr.w	Obj17_RotateSpikes
000083C6 6100 0000                  		bsr.w	DisplaySprite
000083CA 6000 0000                  		bra.w	Obj17_ChkDel
000083CE                            
000083CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083CE                            
000083CE                            
000083CE                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
000083CE 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
000083D2 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
000083D8 D028 003E                  		add.b	$3E(a0),d0
000083DC 0200 0007                  		andi.b	#7,d0
000083E0 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
000083E4 6600                       		bne.s	locret_7DA6
000083E6 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
000083EC                            
000083EC                            locret_7DA6:
000083EC 4E75                       		rts	
000083EE                            ; End of function Obj17_RotateSpikes
000083EE                            
000083EE                            ; ===========================================================================
000083EE                            
000083EE                            Obj17_ChkDel:				; XREF: Obj17_Action
000083EE 3028 0008                  		move.w	8(a0),d0
000083F2 0240 FF80                  		andi.w	#$FF80,d0
000083F6 3238 F700                  		move.w	($FFFFF700).w,d1
000083FA 0441 0080                  		subi.w	#$80,d1
000083FE 0241 FF80                  		andi.w	#$FF80,d1
00008402 9041                       		sub.w	d1,d0
00008404 0C40 0280                  		cmpi.w	#$280,d0
00008408 6200 0000                  		bhi.w	Obj17_DelAll
0000840C 4E75                       		rts	
0000840E                            ; ===========================================================================
0000840E                            
0000840E                            Obj17_DelAll:				; XREF: Obj17_ChkDel
0000840E 7400                       		moveq	#0,d2
00008410 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008414 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008416 5502                       		subq.b	#2,d2
00008418 6500                       		bcs.s	Obj17_Delete
0000841A                            
0000841A                            Obj17_DelLoop:
0000841A 7000                       		moveq	#0,d0
0000841C 101A                       		move.b	(a2)+,d0
0000841E ED48                       		lsl.w	#6,d0
00008420 0680 00FF D000             		addi.l	#$FFD000,d0
00008426 2240                       		movea.l	d0,a1
00008428 6100 0000                  		bsr.w	DeleteObject2	; delete object
0000842C 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008430                            
00008430                            Obj17_Delete:				; XREF: Obj17_Index
00008430 6100 0000                  		bsr.w	DeleteObject
00008434 4E75                       		rts	
00008436                            ; ===========================================================================
00008436                            
00008436                            Obj17_Display:				; XREF: Obj17_Index
00008436 6100 FF96                  		bsr.w	Obj17_RotateSpikes
0000843A 6000 0000                  		bra.w	DisplaySprite
0000843E                            ; ===========================================================================
0000843E                            ; ---------------------------------------------------------------------------
0000843E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000843E                            ; ---------------------------------------------------------------------------
0000843E                            Map_obj17:
0000843E                            	include "_maps\obj17.asm"
0000843E                            ; ---------------------------------------------------------------------------
0000843E                            ; Sprite mappings - helix of spikes on a pole (GHZ)
0000843E                            ; ---------------------------------------------------------------------------
0000843E 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008442 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008446 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
0000844A 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
0000844E 01                         byte_7E08:	dc.b 1
0000844F F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008454 01                         byte_7E0E:	dc.b 1
00008455 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
0000845A 01                         byte_7E14:	dc.b 1
0000845B F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008460 01                         byte_7E1A:	dc.b 1
00008461 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008466 01                         byte_7E20:	dc.b 1
00008467 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
0000846C 01                         byte_7E26:	dc.b 1
0000846D 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008472 01                         byte_7E2C:	dc.b 1
00008473 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008478                            		even
00008478                            		even
00008478                            
00008478                            ; ===========================================================================
00008478                            ; ---------------------------------------------------------------------------
00008478                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008478                            ; ---------------------------------------------------------------------------
00008478                            
00008478                            Obj18:					; XREF: Obj_Index
00008478 7000                       		moveq	#0,d0
0000847A 1028 0024                  		move.b	$24(a0),d0
0000847E 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008482 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008486                            ; ===========================================================================
00008486 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008488 0000                       		dc.w Obj18_Solid-Obj18_Index
0000848A 0000                       		dc.w Obj18_Action2-Obj18_Index
0000848C 0000                       		dc.w Obj18_Delete-Obj18_Index
0000848E 0000                       		dc.w Obj18_Action-Obj18_Index
00008490                            ; ===========================================================================
00008490                            
00008490                            Obj18_Main:				; XREF: Obj18_Index
00008490 5428 0024                  		addq.b	#2,$24(a0)
00008494 317C 4000 0002             		move.w	#$4000,2(a0)
0000849A 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
000084A2 117C 0020 0019             		move.b	#$20,$19(a0)
000084A8 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
000084AE 6600                       		bne.s	Obj18_NotSYZ
000084B0 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
000084B8 117C 0020 0019             		move.b	#$20,$19(a0)
000084BE                            
000084BE                            Obj18_NotSYZ:
000084BE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000084C4 6600                       		bne.s	Obj18_NotSLZ
000084C6 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
000084CE 117C 0020 0019             		move.b	#$20,$19(a0)
000084D4 317C 4000 0002             		move.w	#$4000,2(a0)
000084DA 117C 0003 0028             		move.b	#3,$28(a0)
000084E0                            
000084E0                            Obj18_NotSLZ:
000084E0 117C 0004 0001             		move.b	#4,1(a0)
000084E6 117C 0004 0018             		move.b	#4,$18(a0)
000084EC 3168 000C 002C             		move.w	$C(a0),$2C(a0)
000084F2 3168 000C 0034             		move.w	$C(a0),$34(a0)
000084F8 3168 0008 0032             		move.w	8(a0),$32(a0)
000084FE 317C 0080 0026             		move.w	#$80,$26(a0)
00008504 7200                       		moveq	#0,d1
00008506 1028 0028                  		move.b	$28(a0),d0
0000850A 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
0000850E 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008510 5201                       		addq.b	#1,d1		; use frame #1
00008512 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008518                            
00008518                            Obj18_SetFrame:
00008518 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
0000851C                            
0000851C                            Obj18_Solid:				; XREF: Obj18_Index
0000851C 4A28 0038                  		tst.b	$38(a0)
00008520 6700                       		beq.s	loc_7EE0
00008522 5928 0038                  		subq.b	#4,$38(a0)
00008526                            
00008526                            loc_7EE0:
00008526 7200                       		moveq	#0,d1
00008528 1228 0019                  		move.b	$19(a0),d1
0000852C 6100 F56C                  		bsr.w	PlatformObject
00008530                            
00008530                            Obj18_Action:				; XREF: Obj18_Index
00008530 6100 0000                  		bsr.w	Obj18_Move
00008534 6100 0000                  		bsr.w	Obj18_Nudge
00008538 6100 0000                  		bsr.w	DisplaySprite
0000853C 6000 0000                  		bra.w	Obj18_ChkDel
00008540                            ; ===========================================================================
00008540                            
00008540                            Obj18_Action2:				; XREF: Obj18_Index
00008540 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008546 6700                       		beq.s	loc_7F06
00008548 5828 0038                  		addq.b	#4,$38(a0)
0000854C                            
0000854C                            loc_7F06:
0000854C 7200                       		moveq	#0,d1
0000854E 1228 0019                  		move.b	$19(a0),d1
00008552 6100 F6BA                  		bsr.w	ExitPlatform
00008556 3F28 0008                  		move.w	8(a0),-(sp)
0000855A 6100 0000                  		bsr.w	Obj18_Move
0000855E 6100 0000                  		bsr.w	Obj18_Nudge
00008562 341F                       		move.w	(sp)+,d2
00008564 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008568 6100 0000                  		bsr.w	DisplaySprite
0000856C 6000 0000                  		bra.w	Obj18_ChkDel
00008570                            
00008570 4E75                       		rts
00008572                            
00008572                            ; ---------------------------------------------------------------------------
00008572                            ; Subroutine to	move platform slightly when you	stand on it
00008572                            ; ---------------------------------------------------------------------------
00008572                            
00008572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008572                            
00008572                            
00008572                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008572 1028 0038                  		move.b	$38(a0),d0
00008576 6100 A786                  		bsr.w	CalcSine
0000857A 323C 0400                  		move.w	#$400,d1
0000857E C1C1                       		muls.w	d1,d0
00008580 4840                       		swap	d0
00008582 D068 002C                  		add.w	$2C(a0),d0
00008586 3140 000C                  		move.w	d0,$C(a0)
0000858A 4E75                       		rts	
0000858C                            ; End of function Obj18_Nudge
0000858C                            
0000858C                            ; ---------------------------------------------------------------------------
0000858C                            ; Subroutine to	move platforms
0000858C                            ; ---------------------------------------------------------------------------
0000858C                            
0000858C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000858C                            
0000858C                            
0000858C                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
0000858C 7000                       		moveq	#0,d0
0000858E 1028 0028                  		move.b	$28(a0),d0
00008592 0240 000F                  		andi.w	#$F,d0
00008596 D040                       		add.w	d0,d0
00008598 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
0000859C 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
000085A0                            ; End of function Obj18_Move
000085A0                            
000085A0                            ; ===========================================================================
000085A0 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
000085A4 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
000085A8 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
000085AC 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
000085B0 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
000085B4 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
000085B8 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
000085BA                            ; ===========================================================================
000085BA                            
000085BA                            Obj18_Type00:
000085BA 4E75                       		rts			; platform 00 doesn't move
000085BC                            ; ===========================================================================
000085BC                            
000085BC                            Obj18_Type05:
000085BC 3028 0032                  		move.w	$32(a0),d0
000085C0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085C4 4401                       		neg.b	d1		; reverse platform-motion
000085C6 0601 0040                  		addi.b	#$40,d1
000085CA 6000                       		bra.s	Obj18_01_Move
000085CC                            ; ===========================================================================
000085CC                            
000085CC                            Obj18_Type01:
000085CC 3028 0032                  		move.w	$32(a0),d0
000085D0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000085D4 0401 0040                  		subi.b	#$40,d1
000085D8                            
000085D8                            Obj18_01_Move:
000085D8 4881                       		ext.w	d1
000085DA D041                       		add.w	d1,d0
000085DC 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
000085E0 6000 0000                  		bra.w	Obj18_ChgMotion
000085E4                            ; ===========================================================================
000085E4                            
000085E4                            Obj18_Type0C:
000085E4 3028 0034                  		move.w	$34(a0),d0
000085E8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085EC 4401                       		neg.b	d1		; reverse platform-motion
000085EE 0601 0030                  		addi.b	#$30,d1
000085F2 6000                       		bra.s	Obj18_02_Move
000085F4                            ; ===========================================================================
000085F4                            
000085F4                            Obj18_Type0B:
000085F4 3028 0034                  		move.w	$34(a0),d0
000085F8 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000085FC 0401 0030                  		subi.b	#$30,d1
00008600 6000                       		bra.s	Obj18_02_Move
00008602                            ; ===========================================================================
00008602                            
00008602                            Obj18_Type06:
00008602 3028 0034                  		move.w	$34(a0),d0
00008606 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000860A 4401                       		neg.b	d1		; reverse platform-motion
0000860C 0601 0040                  		addi.b	#$40,d1
00008610 6000                       		bra.s	Obj18_02_Move
00008612                            ; ===========================================================================
00008612                            
00008612                            Obj18_Type02:
00008612 3028 0034                  		move.w	$34(a0),d0
00008616 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000861A 0401 0040                  		subi.b	#$40,d1
0000861E                            
0000861E                            Obj18_02_Move:
0000861E 4881                       		ext.w	d1
00008620 D041                       		add.w	d1,d0
00008622 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008626 6000 0000                  		bra.w	Obj18_ChgMotion
0000862A                            ; ===========================================================================
0000862A                            
0000862A                            Obj18_Type03:
0000862A 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000862E 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008630 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008636 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008638 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
0000863E                            
0000863E                            Obj18_03_NoMove:
0000863E 4E75                       		rts	
00008640                            ; ===========================================================================
00008640                            
00008640                            Obj18_03_Wait:
00008640 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008644 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008646 317C 0020 003A             		move.w	#32,$3A(a0)
0000864C 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008650 4E75                       		rts	
00008652                            ; ===========================================================================
00008652                            
00008652                            Obj18_Type04:
00008652 4A68 003A                  		tst.w	$3A(a0)
00008656 6700                       		beq.s	loc_8048
00008658 5368 003A                  		subq.w	#1,$3A(a0)
0000865C 6600                       		bne.s	loc_8048
0000865E 0828 0003 0022             		btst	#3,$22(a0)
00008664 6700                       		beq.s	loc_8042
00008666 08E9 0001 0022             		bset	#1,$22(a1)
0000866C 08A9 0003 0022             		bclr	#3,$22(a1)
00008672 137C 0002 0024             		move.b	#2,$24(a1)
00008678 08A8 0003 0022             		bclr	#3,$22(a0)
0000867E 4228 0025                  		clr.b	$25(a0)
00008682 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008688                            
00008688                            loc_8042:
00008688 117C 0008 0024             		move.b	#8,$24(a0)
0000868E                            
0000868E                            loc_8048:
0000868E 2628 002C                  		move.l	$2C(a0),d3
00008692 3028 0012                  		move.w	$12(a0),d0
00008696 48C0                       		ext.l	d0
00008698 E180                       		asl.l	#8,d0
0000869A D680                       		add.l	d0,d3
0000869C 2143 002C                  		move.l	d3,$2C(a0)
000086A0 0668 0038 0012             		addi.w	#$38,$12(a0)
000086A6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000086AA 0640 00E0                  		addi.w	#$E0,d0
000086AE B068 002C                  		cmp.w	$2C(a0),d0
000086B2 6400                       		bcc.s	locret_8074
000086B4 117C 0006 0024             		move.b	#6,$24(a0)
000086BA                            
000086BA                            locret_8074:
000086BA 4E75                       		rts	
000086BC                            ; ===========================================================================
000086BC                            
000086BC                            Obj18_Type07:
000086BC 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000086C0 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
000086C2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
000086C6 7000                       		moveq	#0,d0
000086C8 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
000086CC E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
000086CE 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
000086D2 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
000086D4 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000086DA                            
000086DA                            Obj18_07_NoMove:
000086DA 4E75                       		rts	
000086DC                            ; ===========================================================================
000086DC                            
000086DC                            Obj18_07_Wait:
000086DC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
000086E0 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
000086E2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
000086E6 4E75                       		rts	
000086E8                            ; ===========================================================================
000086E8                            
000086E8                            Obj18_Type08:
000086E8 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000086EC 3028 0034                  		move.w	$34(a0),d0
000086F0 0440 0200                  		subi.w	#$200,d0
000086F4 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000086F8 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000086FA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000086FE                            
000086FE                            Obj18_08_NoStop:
000086FE 4E75                       		rts	
00008700                            ; ===========================================================================
00008700                            
00008700                            Obj18_Type0A:
00008700 3028 0034                  		move.w	$34(a0),d0
00008704 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008708 0401 0040                  		subi.b	#$40,d1
0000870C 4881                       		ext.w	d1
0000870E E241                       		asr.w	#1,d1
00008710 D041                       		add.w	d1,d0
00008712 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008716                            
00008716                            Obj18_ChgMotion:
00008716 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
0000871C 4E75                       		rts	
0000871E                            ; ===========================================================================
0000871E                            
0000871E                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
0000871E 3028 0032                  		move.w	$32(a0),d0
00008722 0240 FF80                  		andi.w	#$FF80,d0
00008726 3238 F700                  		move.w	($FFFFF700).w,d1
0000872A 0441 0080                  		subi.w	#$80,d1
0000872E 0241 FF80                  		andi.w	#$FF80,d1
00008732 9041                       		sub.w	d1,d0
00008734 0C40 0280                  		cmpi.w	#$280,d0
00008738 6200                       		bhi.s	Obj18_Delete
0000873A 4E75                       		rts	
0000873C                            ; ===========================================================================
0000873C                            
0000873C                            Obj18_Delete:				; XREF: Obj18_Index
0000873C 6000 0000                  		bra.w	DeleteObject
00008740                            ; ===========================================================================
00008740                            ; ---------------------------------------------------------------------------
00008740                            ; Sprite mappings - unused
00008740                            ; ---------------------------------------------------------------------------
00008740                            Map_obj18x:
00008740                            	include "_maps\obj18x.asm"
00008740                            ; ---------------------------------------------------------------------------
00008740                            ; Sprite mappings - unused
00008740                            ; ---------------------------------------------------------------------------
00008740 0000                       		dc.w byte_80FE-Map_obj18x
00008742 0000                       		dc.w byte_8109-Map_obj18x
00008744 02                         byte_80FE:	dc.b 2
00008745 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
0000874A F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
0000874F 0A                         byte_8109:	dc.b $A
00008750 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00008755 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000875A 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
0000875F 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008764 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008769 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000876E 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00008773 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008778 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000877D 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00008782                            		even
00008782                            		even
00008782                            
00008782                            ; ---------------------------------------------------------------------------
00008782                            ; Sprite mappings - GHZ	platforms
00008782                            ; ---------------------------------------------------------------------------
00008782                            Map_obj18:
00008782                            	include "_maps\obj18ghz.asm"
00008782                            ; ---------------------------------------------------------------------------
00008782                            ; Sprite mappings - GHZ	platforms
00008782                            ; ---------------------------------------------------------------------------
00008782 0000                       		dc.w byte_8140-Map_obj18
00008784 0000                       		dc.w byte_8155-Map_obj18
00008786 04                         byte_8140:	dc.b 4
00008787 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000878C F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008791 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008796 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000879B 0A                         byte_8155:	dc.b $A
0000879C F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
000087A1 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
000087A6 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
000087AB 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
000087B0 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
000087B5 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
000087BA 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
000087BF 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
000087C4 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
000087C9 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
000087CE                            		even
000087CE                            		even
000087CE                            
000087CE                            ; ---------------------------------------------------------------------------
000087CE                            ; Sprite mappings - SYZ	platforms
000087CE                            ; ---------------------------------------------------------------------------
000087CE                            Map_obj18a:
000087CE                            	include "_maps\obj18syz.asm"
000087CE                            ; ---------------------------------------------------------------------------
000087CE                            ; Sprite mappings - SYZ	platforms
000087CE                            ; ---------------------------------------------------------------------------
000087CE 0000                       		dc.w byte_818A-Map_obj18a
000087D0 03                         byte_818A:	dc.b 3
000087D1 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
000087D6 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
000087DB F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
000087E0                            		even
000087E0                            		even
000087E0                            
000087E0                            ; ---------------------------------------------------------------------------
000087E0                            ; Sprite mappings - SLZ	platforms
000087E0                            ; ---------------------------------------------------------------------------
000087E0                            Map_obj18b:
000087E0                            	include "_maps\obj18slz.asm"
000087E0                            ; ---------------------------------------------------------------------------
000087E0                            ; Sprite mappings - SLZ	platforms
000087E0                            ; ---------------------------------------------------------------------------
000087E0 0000                       		dc.w byte_819C-Map_obj18b
000087E2 02                         byte_819C:	dc.b 2
000087E3 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000087E8 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000087EE 00                         		even
000087EE 00                         		even
000087EE                            
000087EE                            ; ===========================================================================
000087EE                            ; ---------------------------------------------------------------------------
000087EE                            ; Object 19 - Pearto bombs
000087EE                            ; ---------------------------------------------------------------------------
000087EE                            Obj19:					; XREF: Obj_Index
000087EE 7000                       		moveq	#0,d0
000087F0 1028 0024                  		move.b	$24(a0),d0
000087F4 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000087F8 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000087FC                            ; ---------------------------------------------------------------------------
000087FC                            
000087FC 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
00008802                            ; ---------------------------------------------------------------------------
00008802                            
00008802                            loc_7076:
00008802 5428 0024                  		addq.b	#2,$24(a0)
00008806 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
0000880E 317C 0480 0002             		move.w	#($9000/$20),2(a0)
00008814 117C 0004 0001             		move.b	#4,1(a0)
0000881A 117C 0003 0019             		move.b	#3,$19(a0)
00008820 117C 0087 0020             		move.b	#$87,$20(a0)
00008826 117C 0008 0018             		move.b	#8,$18(a0)
0000882C 317C 0018 0030             		move.w	#$18,$30(a0)
00008832                            
00008832                            loc_70A6:
00008832 0828 0007 0022             		btst	#7,$22(a0)
00008838 6600                       		bne.s	loc_70C2
0000883A 4A68 0030                  		tst.w	$30(a0)
0000883E 6600                       		bne.s	loc_70D2
00008840 4EB9 0000 0000             		jsr	ObjHitFloor
00008846 4A41                       		tst.w	d1
00008848 6A00                       		bpl.s	loc_70D6
0000884A D368 000C                  		add.w	d1,$C(a0)
0000884E                            
0000884E                            loc_70C2:
0000884E 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00008852 117C 0000 0024             		move.b	#0,$24(a0)
00008858                            ; ---------------------------------------------------------------------------
00008858                            
00008858                            loc_70D2:
00008858 5368 0030                  		subq.w	#1,$30(a0)
0000885C                            
0000885C                            loc_70D6:
0000885C 6100 0000                  		bsr.w	ObjectFall
00008860 6100 0000                  		bsr.w	DisplaySprite
00008864 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008868 0640 00E0                  		addi.w	#$E0,d0
0000886C B068 000C                  		cmp.w	$C(a0),d0
00008870 6500                       		bcs.s	loc_70EE
00008872 4E75                       		rts
00008874                            ; ---------------------------------------------------------------------------
00008874                            
00008874                            loc_70EE:
00008874 6100 0000                  		bsr.w	DeleteObject
00008878 4E75                       		rts
0000887A                            		
0000887A                            Map_obj19:
0000887A                            	include "_maps\obj19.asm"
0000887A                            Map_02b4:
0000887A 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
0000887C 01                         Map_02b4_2: 	dc.b $1
0000887D F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00008882                            	even
00008882                            	even
00008882                            ; ===========================================================================
00008882                            ; ---------------------------------------------------------------------------
00008882                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008882                            ; ---------------------------------------------------------------------------
00008882                            Map_obj48:
00008882                            	include "_maps\obj48.asm"
00008882                            ; ---------------------------------------------------------------------------
00008882                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00008882                            ; ---------------------------------------------------------------------------
00008882 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008886 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000888A 06                         byte_81B2:	dc.b 6
0000888B F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00008890 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00008895 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000889A E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0000889F 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000088A4 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000088A9 04                         byte_81D1:	dc.b 4
000088AA E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000088AF E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000088B4 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000088B9 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000088BE 04                         byte_81E6:	dc.b 4
000088BF E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000088C4 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000088C9 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000088CE 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000088D3 04                         byte_81FB:	dc.b 4
000088D4 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000088D9 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000088DE 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000088E3 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000088E8                            		even
000088E8                            		even
000088E8                            
000088E8                            ; ===========================================================================
000088E8                            ; ---------------------------------------------------------------------------
000088E8                            ; Object 1A - GHZ collapsing ledge
000088E8                            ; ---------------------------------------------------------------------------
000088E8                            
000088E8                            Obj1A:					; XREF: Obj_Index
000088E8 7000                       		moveq	#0,d0
000088EA 1028 0024                  		move.b	$24(a0),d0
000088EE 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000088F2 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000088F6                            ; ===========================================================================
000088F6 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000088FA 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000088FE 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008902                            ; ===========================================================================
00008902                            
00008902                            Obj1A_Main:				; XREF: Obj1A_Index
00008902 5428 0024                  		addq.b	#2,$24(a0)
00008906 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
0000890E 317C 4000 0002             		move.w	#$4000,2(a0)
00008914 0028 0004 0001             		ori.b	#4,1(a0)
0000891A 117C 0004 0018             		move.b	#4,$18(a0)
00008920 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008926 117C 0064 0019             		move.b	#$64,$19(a0)
0000892C 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008932 117C 0038 0016             		move.b	#$38,$16(a0)
00008938 08E8 0004 0001             		bset	#4,1(a0)
0000893E                            
0000893E                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
0000893E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008942 6700                       		beq.s	Obj1A_Slope	; if not, branch
00008944 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008948 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
0000894C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008950                            
00008950                            Obj1A_Slope:
00008950 323C 0030                  		move.w	#$30,d1
00008954 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000895A 6100 F212                  		bsr.w	SlopeObject
0000895E 6000 0000                  		bra.w	MarkObjGone
00008962                            ; ===========================================================================
00008962                            
00008962                            Obj1A_Touch:				; XREF: Obj1A_Index
00008962 4A28 0038                  		tst.b	$38(a0)
00008966 6700 0000                  		beq.w	loc_847A
0000896A 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008970 5328 0038                  		subq.b	#1,$38(a0)
00008974                            
00008974                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008974                            
00008974                            
00008974                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00008974 323C 0030                  		move.w	#$30,d1
00008978 6100 F294                  		bsr.w	ExitPlatform
0000897C 323C 0030                  		move.w	#$30,d1
00008980 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008986 3428 0008                  		move.w	8(a0),d2
0000898A 6100 0000                  		bsr.w	SlopeObject2
0000898E 6000 0000                  		bra.w	MarkObjGone
00008992                            ; End of function Obj1A_WalkOff
00008992                            
00008992                            ; ===========================================================================
00008992                            
00008992                            Obj1A_Display:				; XREF: Obj1A_Index
00008992 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008996 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
00008998 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000899C 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000089A0 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000089A4 6000 0000                  		bra.w	DisplaySprite
000089A8                            ; ===========================================================================
000089A8                            
000089A8                            loc_82D0:				; XREF: Obj1A_Display
000089A8 5328 0038                  		subq.b	#1,$38(a0)
000089AC 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000089B0 43F8 D000                  		lea	($FFFFD000).w,a1
000089B4 0829 0003 0022             		btst	#3,$22(a1)
000089BA 6700                       		beq.s	loc_82FC
000089BC 4A28 0038                  		tst.b	$38(a0)
000089C0 6600                       		bne.s	locret_8308
000089C2 08A9 0003 0022             		bclr	#3,$22(a1)
000089C8 08A9 0005 0022             		bclr	#5,$22(a1)
000089CE 137C 0001 001D             		move.b	#1,$1D(a1)
000089D4                            
000089D4                            loc_82FC:
000089D4 117C 0000 003A             		move.b	#0,$3A(a0)
000089DA 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000089E0                            
000089E0                            locret_8308:
000089E0 4E75                       		rts	
000089E2                            ; ===========================================================================
000089E2                            
000089E2                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000089E2 6100 0000                  		bsr.w	ObjectFall
000089E6 6100 0000                  		bsr.w	DisplaySprite
000089EA 4A28 0001                  		tst.b	1(a0)
000089EE 6A00                       		bpl.s	Obj1A_Delete
000089F0 4E75                       		rts	
000089F2                            ; ===========================================================================
000089F2                            
000089F2                            Obj1A_Delete:				; XREF: Obj1A_Index
000089F2 6100 0000                  		bsr.w	DeleteObject
000089F6 4E75                       		rts	
000089F8                            ; ===========================================================================
000089F8                            ; ---------------------------------------------------------------------------
000089F8                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000089F8                            ; ---------------------------------------------------------------------------
000089F8                            
000089F8                            Obj53:					; XREF: Obj_Index
000089F8 7000                       		moveq	#0,d0
000089FA 1028 0024                  		move.b	$24(a0),d0
000089FE 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008A02 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008A06                            ; ===========================================================================
00008A06 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008A0A 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008A0E 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008A12                            ; ===========================================================================
00008A12                            
00008A12                            Obj53_Main:				; XREF: Obj53_Index
00008A12 5428 0024                  		addq.b	#2,$24(a0)
00008A16 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008A1E 317C 42B8 0002             		move.w	#$42B8,2(a0)
00008A24 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008A2A 6600                       		bne.s	Obj53_NotSLZ
00008A2C 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008A32 5428 001A                  		addq.b	#2,$1A(a0)
00008A36                            
00008A36                            Obj53_NotSLZ:
00008A36 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008A3C 6600                       		bne.s	Obj53_NotSBZ
00008A3E 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
00008A44                            
00008A44                            Obj53_NotSBZ:
00008A44 0028 0004 0001             		ori.b	#4,1(a0)
00008A4A 117C 0004 0018             		move.b	#4,$18(a0)
00008A50 117C 0007 0038             		move.b	#7,$38(a0)
00008A56 117C 0044 0019             		move.b	#$44,$19(a0)
00008A5C                            
00008A5C                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008A5C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008A60 6700                       		beq.s	Obj53_Solid	; if not, branch
00008A62 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008A66 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008A6A 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008A6E                            
00008A6E                            Obj53_Solid:
00008A6E 323C 0020                  		move.w	#$20,d1
00008A72 6100 F026                  		bsr.w	PlatformObject
00008A76 4A28 0028                  		tst.b	$28(a0)
00008A7A 6A00                       		bpl.s	Obj53_MarkAsGone
00008A7C 0829 0003 0022             		btst	#3,$22(a1)
00008A82 6700                       		beq.s	Obj53_MarkAsGone
00008A84 08A8 0000 0001             		bclr	#0,1(a0)
00008A8A 3029 0008                  		move.w	8(a1),d0
00008A8E 9068 0008                  		sub.w	8(a0),d0
00008A92 6400                       		bcc.s	Obj53_MarkAsGone
00008A94 08E8 0000 0001             		bset	#0,1(a0)
00008A9A                            
00008A9A                            Obj53_MarkAsGone:
00008A9A 6000 0000                  		bra.w	MarkObjGone
00008A9E                            ; ===========================================================================
00008A9E                            
00008A9E                            Obj53_Touch:				; XREF: Obj53_Index
00008A9E 4A28 0038                  		tst.b	$38(a0)
00008AA2 6700 0000                  		beq.w	loc_8458
00008AA6 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008AAC 5328 0038                  		subq.b	#1,$38(a0)
00008AB0                            
00008AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AB0                            
00008AB0                            
00008AB0                            Obj53_WalkOff:				; XREF: Obj53_Index
00008AB0 323C 0020                  		move.w	#$20,d1
00008AB4 6100 F158                  		bsr.w	ExitPlatform
00008AB8 3428 0008                  		move.w	8(a0),d2
00008ABC 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00008AC0 6000 0000                  		bra.w	MarkObjGone
00008AC4                            ; End of function Obj53_WalkOff
00008AC4                            
00008AC4                            ; ===========================================================================
00008AC4                            
00008AC4                            Obj53_Display:				; XREF: Obj53_Index
00008AC4 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008AC8 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
00008ACA 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008ACE 6600 0000                  		bne.w	loc_8402	; if yes, branch
00008AD2 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008AD6 6000 0000                  		bra.w	DisplaySprite
00008ADA                            ; ===========================================================================
00008ADA                            
00008ADA                            loc_8402:
00008ADA 5328 0038                  		subq.b	#1,$38(a0)
00008ADE 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008AE2 43F8 D000                  		lea	($FFFFD000).w,a1
00008AE6 0829 0003 0022             		btst	#3,$22(a1)
00008AEC 6700                       		beq.s	loc_842E
00008AEE 4A28 0038                  		tst.b	$38(a0)
00008AF2 6600                       		bne.s	locret_843A
00008AF4 08A9 0003 0022             		bclr	#3,$22(a1)
00008AFA 08A9 0005 0022             		bclr	#5,$22(a1)
00008B00 137C 0001 001D             		move.b	#1,$1D(a1)
00008B06                            
00008B06                            loc_842E:
00008B06 117C 0000 003A             		move.b	#0,$3A(a0)
00008B0C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008B12                            
00008B12                            locret_843A:
00008B12 4E75                       		rts	
00008B14                            ; ===========================================================================
00008B14                            
00008B14                            Obj53_TimeZero:				; XREF: Obj53_Display
00008B14 6100 0000                  		bsr.w	ObjectFall
00008B18 6100 0000                  		bsr.w	DisplaySprite
00008B1C 4A28 0001                  		tst.b	1(a0)
00008B20 6A00                       		bpl.s	Obj53_Delete
00008B22 4E75                       		rts	
00008B24                            ; ===========================================================================
00008B24                            
00008B24                            Obj53_Delete:				; XREF: Obj53_Index
00008B24 6100 0000                  		bsr.w	DeleteObject
00008B28 4E75                       		rts	
00008B2A                            ; ===========================================================================
00008B2A                            
00008B2A                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008B2A 117C 0000 003A             		move.b	#0,$3A(a0)
00008B30                            
00008B30                            loc_8458:				; XREF: Obj53_Touch
00008B30 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008B36 0828 0000 0028             		btst	#0,$28(a0)
00008B3C 6700                       		beq.s	loc_846C
00008B3E 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
00008B44                            
00008B44                            loc_846C:
00008B44 7207                       		moveq	#7,d1
00008B46 5228 001A                  		addq.b	#1,$1A(a0)
00008B4A 6000                       		bra.s	loc_8486
00008B4C                            ; ===========================================================================
00008B4C                            
00008B4C                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008B4C 117C 0000 003A             		move.b	#0,$3A(a0)
00008B52                            
00008B52                            loc_847A:				; XREF: Obj1A_Touch
00008B52 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008B58 7218                       		moveq	#$18,d1
00008B5A 5428 001A                  		addq.b	#2,$1A(a0)
00008B5E                            
00008B5E                            loc_8486:				; XREF: Obj53_Collapse
00008B5E 7000                       		moveq	#0,d0
00008B60 1028 001A                  		move.b	$1A(a0),d0
00008B64 D040                       		add.w	d0,d0
00008B66 2668 0004                  		movea.l	4(a0),a3
00008B6A D6F3 0000                  		adda.w	(a3,d0.w),a3
00008B6E 524B                       		addq.w	#1,a3
00008B70 08E8 0005 0001             		bset	#5,1(a0)
00008B76 1810                       		move.b	0(a0),d4
00008B78 1A28 0001                  		move.b	1(a0),d5
00008B7C 2248                       		movea.l	a0,a1
00008B7E 6000                       		bra.s	loc_84B2
00008B80                            ; ===========================================================================
00008B80                            
00008B80                            loc_84AA:
00008B80 6100 0000                  		bsr.w	SingleObjLoad
00008B84 6600                       		bne.s	loc_84F2
00008B86 5A4B                       		addq.w	#5,a3
00008B88                            
00008B88                            loc_84B2:
00008B88 137C 0006 0024             		move.b	#6,$24(a1)
00008B8E 1284                       		move.b	d4,0(a1)
00008B90 234B 0004                  		move.l	a3,4(a1)
00008B94 1345 0001                  		move.b	d5,1(a1)
00008B98 3368 0008 0008             		move.w	8(a0),8(a1)
00008B9E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008BA4 3368 0002 0002             		move.w	2(a0),2(a1)
00008BAA 1368 0018 0018             		move.b	$18(a0),$18(a1)
00008BB0 1368 0019 0019             		move.b	$19(a0),$19(a1)
00008BB6 135C 0038                  		move.b	(a4)+,$38(a1)
00008BBA B3C8                       		cmpa.l	a0,a1
00008BBC 6400                       		bcc.s	loc_84EE
00008BBE 6100 0000                  		bsr.w	DisplaySprite2
00008BC2                            
00008BC2                            loc_84EE:
00008BC2 51C9 FFBC                  		dbf	d1,loc_84AA
00008BC6                            
00008BC6                            loc_84F2:
00008BC6 6100 0000                  		bsr.w	DisplaySprite
00008BCA 303C 00B9                  		move.w	#$B9,d0
00008BCE 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00008BD4                            ; ===========================================================================
00008BD4                            ; ---------------------------------------------------------------------------
00008BD4                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00008BD4                            ; ---------------------------------------------------------------------------
00008BD4 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00008BE4 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008BEE 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008BF6 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008BFE                            
00008BFE                            ; ---------------------------------------------------------------------------
00008BFE                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008BFE                            ; ---------------------------------------------------------------------------
00008BFE                            
00008BFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BFE                            
00008BFE                            
00008BFE                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008BFE 43F8 D000                  		lea	($FFFFD000).w,a1
00008C02 0829 0003 0022             		btst	#3,$22(a1)
00008C08 6700                       		beq.s	locret_856E
00008C0A 3029 0008                  		move.w	8(a1),d0
00008C0E 9068 0008                  		sub.w	8(a0),d0
00008C12 D041                       		add.w	d1,d0
00008C14 E248                       		lsr.w	#1,d0
00008C16 0828 0000 0001             		btst	#0,1(a0)
00008C1C 6700                       		beq.s	loc_854E
00008C1E 4640                       		not.w	d0
00008C20 D041                       		add.w	d1,d0
00008C22                            
00008C22                            loc_854E:
00008C22 7200                       		moveq	#0,d1
00008C24 1232 0000                  		move.b	(a2,d0.w),d1
00008C28 3028 000C                  		move.w	$C(a0),d0
00008C2C 9041                       		sub.w	d1,d0
00008C2E 7200                       		moveq	#0,d1
00008C30 1229 0016                  		move.b	$16(a1),d1
00008C34 9041                       		sub.w	d1,d0
00008C36 3340 000C                  		move.w	d0,$C(a1)
00008C3A 9468 0008                  		sub.w	8(a0),d2
00008C3E 9569 0008                  		sub.w	d2,8(a1)
00008C42                            
00008C42                            locret_856E:
00008C42 4E75                       		rts	
00008C44                            ; End of function SlopeObject2
00008C44                            
00008C44                            ; ===========================================================================
00008C44                            ; ---------------------------------------------------------------------------
00008C44                            ; Collision data for GHZ collapsing ledge
00008C44                            ; ---------------------------------------------------------------------------
00008C44                            Obj1A_SlopeData:
00008C44                            		incbin	misc\ghzledge.bin
00008C74                            		even
00008C74                            
00008C74                            ; ---------------------------------------------------------------------------
00008C74                            ; Sprite mappings - GHZ	collapsing ledge
00008C74                            ; ---------------------------------------------------------------------------
00008C74                            Map_obj1A:
00008C74                            	include "_maps\obj1A.asm"
00008C74                            ; ---------------------------------------------------------------------------
00008C74                            ; Sprite mappings - GHZ	collapsing ledge
00008C74                            ; ---------------------------------------------------------------------------
00008C74 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008C78 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008C7C 10                         byte_85A8:	dc.b $10
00008C7D C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00008C82 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008C87 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008C8C E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008C91 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008C96 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008C9B F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008CA0 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008CA5 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CAA F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008CAF 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008CB4 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008CB9 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008CBE 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008CC3 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008CC8 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008CCD 10                         byte_85F9:	dc.b $10
00008CCE C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00008CD3 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008CD8 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008CDD E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008CE2 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008CE7 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008CEC F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008CF1 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008CF6 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008CFB F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008D00 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00008D05 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D0A 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008D0F 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008D14 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008D19 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D1E 19                         byte_864A:	dc.b $19
00008D1F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
00008D24 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008D29 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008D2E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008D33 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008D38 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008D3D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008D42 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008D47 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008D4C D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008D51 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008D56 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008D5B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008D60 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008D65 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008D6A F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008D6F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008D74 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008D79 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008D7E 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008D83 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008D88 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008D8D 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008D92 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008D97 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008D9C 19                         byte_86C8:	dc.b $19
00008D9D C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00008DA2 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008DA7 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008DAC D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008DB1 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008DB6 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008DBB E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008DC0 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008DC5 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008DCA D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008DCF F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008DD4 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008DD9 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008DDE F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008DE3 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008DE8 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008DED 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008DF2 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008DF7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008DFC 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008E01 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008E06 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008E0B 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008E10 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00008E15 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008E1A                            		even
00008E1A                            		even
00008E1A                            
00008E1A                            ; ---------------------------------------------------------------------------
00008E1A                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E1A                            ; ---------------------------------------------------------------------------
00008E1A                            Map_obj53:
00008E1A                            	include "_maps\obj53.asm"
00008E1A                            ; ---------------------------------------------------------------------------
00008E1A                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008E1A                            ; ---------------------------------------------------------------------------
00008E1A 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008E1E 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008E22 04                         byte_874E:	dc.b 4
00008E23 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008E28 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008E2D F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E32 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008E37 08                         byte_8763:	dc.b 8
00008E38 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E3D F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008E42 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E47 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008E4C 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008E51 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008E56 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008E5B 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008E60 04                         byte_878C:	dc.b 4
00008E61 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008E66 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008E6B F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008E70 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00008E75 08                         byte_87A1:	dc.b 8
00008E76 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008E7B F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00008E80 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008E85 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008E8A 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008E8F 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00008E94 0805 0008 00               		dc.b 8,	5, 0, 8, 0
00008E99 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00008E9E                            		even
00008E9E                            		even
00008E9E                            
00008E9E                            ; ===========================================================================
00008E9E                            ; ---------------------------------------------------------------------------
00008E9E                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00008E9E                            ; ---------------------------------------------------------------------------
00008E9E                            
00008E9E                            Obj1C:					; XREF: Obj_Index
00008E9E 7000                       		moveq	#0,d0
00008EA0 1028 0024                  		move.b	$24(a0),d0
00008EA4 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
00008EA8 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
00008EAC                            ; ===========================================================================
00008EAC 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00008EAE 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00008EB0                            ; ===========================================================================
00008EB0                            
00008EB0                            Obj1C_Main:				; XREF: Obj1C_Index
00008EB0 5428 0024                  		addq.b	#2,$24(a0)
00008EB4 7000                       		moveq	#0,d0
00008EB6 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
00008EBA C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00008EBE 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00008EC2 2159 0004                  		move.l	(a1)+,4(a0)
00008EC6 3159 0002                  		move.w	(a1)+,2(a0)
00008ECA 0028 0004 0001             		ori.b	#4,1(a0)
00008ED0 1159 001A                  		move.b	(a1)+,$1A(a0)
00008ED4 1159 0019                  		move.b	(a1)+,$19(a0)
00008ED8 1159 0018                  		move.b	(a1)+,$18(a0)
00008EDC 1159 0020                  		move.b	(a1)+,$20(a0)
00008EE0                            
00008EE0                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008EE0 3028 0008                  		move.w	8(a0),d0
00008EE4 0240 FF80                  		andi.w	#$FF80,d0
00008EE8 3238 F700                  		move.w	($FFFFF700).w,d1
00008EEC 0441 0080                  		subi.w	#$80,d1
00008EF0 0241 FF80                  		andi.w	#$FF80,d1
00008EF4 9041                       		sub.w	d1,d0
00008EF6 0C40 0280                  		cmpi.w	#$280,d0
00008EFA 6200 0000                  		bhi.w	DeleteObject
00008EFE 6000 0000                  		bra.w	DisplaySprite
00008F02                            ; ===========================================================================
00008F02                            ; ---------------------------------------------------------------------------
00008F02                            ; Variables for	object $1C are stored in an array
00008F02                            ; ---------------------------------------------------------------------------
00008F02 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008F06 44D8                       		dc.w $44D8		; VRAM setting
00008F08 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008F0C 0000 0000                  		dc.l Map_obj1C
00008F10 44D8                       		dc.w $44D8
00008F12 0008 0200                  		dc.b 0,	8, 2, 0
00008F16 0000 0000                  		dc.l Map_obj1C
00008F1A 44D8                       		dc.w $44D8
00008F1C 0008 0200                  		dc.b 0,	8, 2, 0
00008F20 0000 7F82                  		dc.l Map_obj11
00008F24 438E                       		dc.w $438E
00008F26 0110 0100                  		dc.b 1,	$10, 1,	0
00008F2A                            ; ---------------------------------------------------------------------------
00008F2A                            ; Sprite mappings - SLZ	lava thrower
00008F2A                            ; ---------------------------------------------------------------------------
00008F2A                            Map_obj1C:
00008F2A                            	include "_maps\obj1C.asm"
00008F2A                            ; ---------------------------------------------------------------------------
00008F2A                            ; Sprite mappings - SLZ	lava thrower
00008F2A                            ; ---------------------------------------------------------------------------
00008F2A 0000                       		dc.w byte_8858-Map_obj1C
00008F2C 01                         byte_8858:	dc.b 1
00008F2D F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008F32                            		even
00008F32                            		even
00008F32                            
00008F32                            ; ===========================================================================
00008F32                            ; ---------------------------------------------------------------------------
00008F32                            ; Object 1D - switch that activates when Sonic touches it
00008F32                            ; (this	is not used anywhere in	the game)
00008F32                            ; ---------------------------------------------------------------------------
00008F32                            
00008F32                            Obj1D:					; XREF: Obj_Index
00008F32 7000                       		moveq	#0,d0
00008F34 1028 0024                  		move.b	$24(a0),d0
00008F38 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008F3C 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008F40                            ; ===========================================================================
00008F40 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008F42 0000                       		dc.w Obj1D_Action-Obj1D_Index
00008F44 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008F46                            ; ===========================================================================
00008F46                            
00008F46                            Obj1D_Main:				; XREF: Obj1D_Index
00008F46 5428 0024                  		addq.b	#2,$24(a0)
00008F4A 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008F52 317C 4000 0002             		move.w	#$4000,2(a0)
00008F58 117C 0004 0001             		move.b	#4,1(a0)
00008F5E 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00008F64 117C 0010 0019             		move.b	#$10,$19(a0)
00008F6A 117C 0005 0018             		move.b	#5,$18(a0)
00008F70                            
00008F70                            Obj1D_Action:				; XREF: Obj1D_Index
00008F70 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008F76 323C 0010                  		move.w	#$10,d1
00008F7A 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008F7E 6700                       		beq.s	Obj1D_ChkDel
00008F80 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00008F84 7001                       		moveq	#1,d0
00008F86 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008F8A                            
00008F8A                            Obj1D_ChkDel:
00008F8A 6100 0000                  		bsr.w	DisplaySprite
00008F8E 3028 0008                  		move.w	8(a0),d0
00008F92 0240 FF80                  		andi.w	#$FF80,d0
00008F96 3238 F700                  		move.w	($FFFFF700).w,d1
00008F9A 0441 0080                  		subi.w	#$80,d1
00008F9E 0241 FF80                  		andi.w	#$FF80,d1
00008FA2 9041                       		sub.w	d1,d0
00008FA4 0C40 0280                  		cmpi.w	#$280,d0
00008FA8 6200 0000                  		bhi.w	Obj1D_Delete
00008FAC 4E75                       		rts	
00008FAE                            ; ===========================================================================
00008FAE                            
00008FAE                            Obj1D_Delete:				; XREF: Obj1D_Index
00008FAE 6100 0000                  		bsr.w	DeleteObject
00008FB2 4E75                       		rts	
00008FB4                            ; ---------------------------------------------------------------------------
00008FB4                            ; Subroutine to	check if Sonic touches the object
00008FB4                            ; ---------------------------------------------------------------------------
00008FB4                            
00008FB4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008FB4                            
00008FB4                            
00008FB4                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00008FB4 43F8 D000                  		lea	($FFFFD000).w,a1
00008FB8 3029 0008                  		move.w	8(a1),d0
00008FBC 9068 0008                  		sub.w	8(a0),d0
00008FC0 D041                       		add.w	d1,d0
00008FC2 6B00                       		bmi.s	loc_8918
00008FC4 D241                       		add.w	d1,d1
00008FC6 B041                       		cmp.w	d1,d0
00008FC8 6400                       		bcc.s	loc_8918
00008FCA 3429 000C                  		move.w	$C(a1),d2
00008FCE 1229 0016                  		move.b	$16(a1),d1
00008FD2 4881                       		ext.w	d1
00008FD4 D242                       		add.w	d2,d1
00008FD6 3028 000C                  		move.w	$C(a0),d0
00008FDA 0440 0010                  		subi.w	#$10,d0
00008FDE 9041                       		sub.w	d1,d0
00008FE0 6200                       		bhi.s	loc_8918
00008FE2 0C40 FFF0                  		cmpi.w	#-$10,d0
00008FE6 6500                       		bcs.s	loc_8918
00008FE8 70FF                       		moveq	#-1,d0
00008FEA 4E75                       		rts	
00008FEC                            ; ===========================================================================
00008FEC                            
00008FEC                            loc_8918:
00008FEC 7000                       		moveq	#0,d0
00008FEE 4E75                       		rts	
00008FF0                            ; End of function Obj1D_ChkTouch
00008FF0                            
00008FF0                            ; ===========================================================================
00008FF0                            ; ---------------------------------------------------------------------------
00008FF0                            ; Sprite mappings - object 1D
00008FF0                            ; ---------------------------------------------------------------------------
00008FF0                            Map_obj1D:
00008FF0                            	include "_maps\obj1D.asm"
00008FF0                            ; ---------------------------------------------------------------------------
00008FF0                            ; Sprite mappings - object 1D
00008FF0                            ; ---------------------------------------------------------------------------
00008FF0 0000                       		dc.w byte_891E-Map_obj1D
00008FF2 04                         byte_891E:	dc.b 4
00008FF3 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008FF8 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008FFD E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00009002 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00009008 00                         		even
00009008 00                         		even
00009008                            
00009008                            ; ===========================================================================
00009008                            ; ---------------------------------------------------------------------------
00009008                            ; Object 2A - doors (SBZ)
00009008                            ; ---------------------------------------------------------------------------
00009008                            
00009008                            Obj2A:					; XREF: Obj_Index
00009008 7000                       		moveq	#0,d0
0000900A 1028 0024                  		move.b	$24(a0),d0
0000900E 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00009012 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00009016                            ; ===========================================================================
00009016 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00009018 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
0000901A                            ; ===========================================================================
0000901A                            
0000901A                            Obj2A_Main:				; XREF: Obj2A_Index
0000901A 5428 0024                  		addq.b	#2,$24(a0)
0000901E 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00009026 317C 42E8 0002             		move.w	#$42E8,2(a0)
0000902C 0028 0004 0001             		ori.b	#4,1(a0)
00009032 117C 0008 0019             		move.b	#8,$19(a0)
00009038 117C 0004 0018             		move.b	#4,$18(a0)
0000903E                            
0000903E                            Obj2A_OpenShut:				; XREF: Obj2A_Index
0000903E 323C 0040                  		move.w	#$40,d1
00009042 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00009046 3038 D008                  		move.w	($FFFFD008).w,d0
0000904A D041                       		add.w	d1,d0
0000904C B068 0008                  		cmp.w	8(a0),d0
00009050 6500                       		bcs.s	Obj2A_Animate
00009052 9041                       		sub.w	d1,d0
00009054 9041                       		sub.w	d1,d0
00009056 B068 0008                  		cmp.w	8(a0),d0
0000905A 6400                       		bcc.s	Obj2A_Animate
0000905C D041                       		add.w	d1,d0
0000905E B068 0008                  		cmp.w	8(a0),d0
00009062 6400                       		bcc.s	loc_899A
00009064 0828 0000 0022             		btst	#0,$22(a0)
0000906A 6600                       		bne.s	Obj2A_Animate
0000906C 6000                       		bra.s	Obj2A_Open
0000906E                            ; ===========================================================================
0000906E                            
0000906E                            loc_899A:				; XREF: Obj2A_OpenShut
0000906E 0828 0000 0022             		btst	#0,$22(a0)
00009074 6700                       		beq.s	Obj2A_Animate
00009076                            
00009076                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009076 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000907C                            
0000907C                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000907C 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009082 6100 0000                  		bsr.w	AnimateSprite
00009086 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000908A 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000908C 323C 0011                  		move.w	#$11,d1
00009090 343C 0020                  		move.w	#$20,d2
00009094 3602                       		move.w	d2,d3
00009096 5243                       		addq.w	#1,d3
00009098 3828 0008                  		move.w	8(a0),d4
0000909C 6100 0000                  		bsr.w	SolidObject
000090A0                            
000090A0                            Obj2A_MarkAsUsed:
000090A0 6000 0000                  		bra.w	MarkObjGone
000090A4                            ; ===========================================================================
000090A4                            Ani_obj2A:
000090A4                            	include "_anim\obj2A.asm"
000090A4                            ; ---------------------------------------------------------------------------
000090A4                            ; Animation script - doors (SBZ)
000090A4                            ; ---------------------------------------------------------------------------
000090A4 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
000090A6 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
000090A8 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000090B4 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000090C0                            		even
000090C0                            		even
000090C0                            
000090C0                            ; ---------------------------------------------------------------------------
000090C0                            ; Sprite mappings - doors (SBZ)
000090C0                            ; ---------------------------------------------------------------------------
000090C0                            Map_obj2A:
000090C0                            	include "_maps\obj2A.asm"
000090C0                            ; ---------------------------------------------------------------------------
000090C0                            ; Sprite mappings - doors (SBZ)
000090C0                            ; ---------------------------------------------------------------------------
000090C0 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000090C4 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000090C8 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000090CC 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000090D0 0000                       		dc.w byte_8A56-Map_obj2A
000090D2 02                         byte_89FE:	dc.b 2
000090D3 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000090D8 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000090DD 02                         byte_8A09:	dc.b 2
000090DE DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000090E3 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000090E8 02                         byte_8A14:	dc.b 2
000090E9 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000090EE 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000090F3 02                         byte_8A1F:	dc.b 2
000090F4 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000090F9 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000090FE 02                         byte_8A2A:	dc.b 2
000090FF D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00009104 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00009109 02                         byte_8A35:	dc.b 2
0000910A CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
0000910F 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00009114 02                         byte_8A40:	dc.b 2
00009115 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
0000911A 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
0000911F 02                         byte_8A4B:	dc.b 2
00009120 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00009125 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
0000912A 02                         byte_8A56:	dc.b 2
0000912B C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00009130 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00009136 00                         		even
00009136 00                         		even
00009136                            
00009136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009136                            
00009136                            
00009136                            Obj44_SolidWall:			; XREF: Obj44_Solid
00009136 6100 0000                  		bsr.w	Obj44_SolidWall2
0000913A 6700                       		beq.s	loc_8AA8
0000913C 6B00 0000                  		bmi.w	loc_8AC4
00009140 4A40                       		tst.w	d0
00009142 6700 0000                  		beq.w	loc_8A92
00009146 6B00                       		bmi.s	loc_8A7C
00009148 4A69 0010                  		tst.w	$10(a1)
0000914C 6B00                       		bmi.s	loc_8A92
0000914E 6000                       		bra.s	loc_8A82
00009150                            ; ===========================================================================
00009150                            
00009150                            loc_8A7C:
00009150 4A69 0010                  		tst.w	$10(a1)
00009154 6A00                       		bpl.s	loc_8A92
00009156                            
00009156                            loc_8A82:
00009156 9169 0008                  		sub.w	d0,8(a1)
0000915A 337C 0000 0014             		move.w	#0,$14(a1)
00009160 337C 0000 0010             		move.w	#0,$10(a1)
00009166                            
00009166                            loc_8A92:
00009166 0829 0001 0022             		btst	#1,$22(a1)
0000916C 6600                       		bne.s	loc_8AB6
0000916E 08E9 0005 0022             		bset	#5,$22(a1)
00009174 08E8 0005 0022             		bset	#5,$22(a0)
0000917A 4E75                       		rts	
0000917C                            ; ===========================================================================
0000917C                            
0000917C                            loc_8AA8:
0000917C 0828 0005 0022             		btst	#5,$22(a0)
00009182 6700                       		beq.s	locret_8AC2
00009184 337C 0001 001C             		move.w	#1,$1C(a1)
0000918A                            
0000918A                            loc_8AB6:
0000918A 08A8 0005 0022             		bclr	#5,$22(a0)
00009190 08A9 0005 0022             		bclr	#5,$22(a1)
00009196                            
00009196                            locret_8AC2:
00009196 4E75                       		rts	
00009198                            ; ===========================================================================
00009198                            
00009198                            loc_8AC4:
00009198 4A69 0012                  		tst.w	$12(a1)
0000919C 6A00                       		bpl.s	locret_8AD8
0000919E 4A43                       		tst.w	d3
000091A0 6A00                       		bpl.s	locret_8AD8
000091A2 9769 000C                  		sub.w	d3,$C(a1)
000091A6 337C 0000 0012             		move.w	#0,$12(a1)
000091AC                            
000091AC                            locret_8AD8:
000091AC 4E75                       		rts	
000091AE                            ; End of function Obj44_SolidWall
000091AE                            
000091AE                            
000091AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000091AE                            
000091AE                            
000091AE                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
000091AE 43F8 D000                  		lea	($FFFFD000).w,a1
000091B2 3029 0008                  		move.w	8(a1),d0
000091B6 9068 0008                  		sub.w	8(a0),d0
000091BA D041                       		add.w	d1,d0
000091BC 6B00                       		bmi.s	loc_8B48
000091BE 3601                       		move.w	d1,d3
000091C0 D643                       		add.w	d3,d3
000091C2 B043                       		cmp.w	d3,d0
000091C4 6200                       		bhi.s	loc_8B48
000091C6 1629 0016                  		move.b	$16(a1),d3
000091CA 4883                       		ext.w	d3
000091CC D443                       		add.w	d3,d2
000091CE 3629 000C                  		move.w	$C(a1),d3
000091D2 9668 000C                  		sub.w	$C(a0),d3
000091D6 D642                       		add.w	d2,d3
000091D8 6B00                       		bmi.s	loc_8B48
000091DA 3802                       		move.w	d2,d4
000091DC D844                       		add.w	d4,d4
000091DE B644                       		cmp.w	d4,d3
000091E0 6400                       		bcc.s	loc_8B48
000091E2 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000091E6 6B00                       		bmi.s	loc_8B48
000091E8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000091EE 6400                       		bcc.s	loc_8B48
000091F0 4A78 FE08                  		tst.w	($FFFFFE08).w
000091F4 6600                       		bne.s	loc_8B48
000091F6 3A00                       		move.w	d0,d5
000091F8 B240                       		cmp.w	d0,d1
000091FA 6400                       		bcc.s	loc_8B30
000091FC D241                       		add.w	d1,d1
000091FE 9041                       		sub.w	d1,d0
00009200 3A00                       		move.w	d0,d5
00009202 4445                       		neg.w	d5
00009204                            
00009204                            loc_8B30:
00009204 3203                       		move.w	d3,d1
00009206 B443                       		cmp.w	d3,d2
00009208 6400                       		bcc.s	loc_8B3C
0000920A 9644                       		sub.w	d4,d3
0000920C 3203                       		move.w	d3,d1
0000920E 4441                       		neg.w	d1
00009210                            
00009210                            loc_8B3C:
00009210 BA41                       		cmp.w	d1,d5
00009212 6200                       		bhi.s	loc_8B44
00009214 7801                       		moveq	#1,d4
00009216 4E75                       		rts	
00009218                            ; ===========================================================================
00009218                            
00009218                            loc_8B44:
00009218 78FF                       		moveq	#-1,d4
0000921A 4E75                       		rts	
0000921C                            ; ===========================================================================
0000921C                            
0000921C                            loc_8B48:
0000921C 7800                       		moveq	#0,d4
0000921E 4E75                       		rts	
00009220                            ; End of function Obj44_SolidWall2
00009220                            
00009220                            ; ===========================================================================
00009220                            ; ---------------------------------------------------------------------------
00009220                            ; Object 1E - Ball Hog enemy (SBZ)
00009220                            ; ---------------------------------------------------------------------------
00009220                            
00009220                            Obj1E:					; XREF: Obj_Index
00009220 7000                       		moveq	#0,d0
00009222 1028 0024                  		move.b	$24(a0),d0
00009226 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
0000922A 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
0000922E                            ; ===========================================================================
0000922E 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009230 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009232                            ; ===========================================================================
00009232                            
00009232                            Obj1E_Main:				; XREF: Obj1E_Index
00009232 117C 0013 0016             		move.b	#$13,$16(a0)
00009238 117C 0008 0017             		move.b	#8,$17(a0)
0000923E 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009246 317C 2302 0002             		move.w	#$2302,2(a0)
0000924C 117C 0004 0001             		move.b	#4,1(a0)
00009252 117C 0004 0018             		move.b	#4,$18(a0)
00009258 117C 0005 0020             		move.b	#5,$20(a0)
0000925E 117C 000C 0019             		move.b	#$C,$19(a0)
00009264 6100 0000                  		bsr.w	ObjectFall
00009268 4EB9 0000 0000             		jsr	ObjHitFloor
0000926E 4A41                       		tst.w	d1
00009270 6A00                       		bpl.s	locret_8BAC
00009272 D368 000C                  		add.w	d1,$C(a0)
00009276 317C 0000 0012             		move.w	#0,$12(a0)
0000927C 5428 0024                  		addq.b	#2,$24(a0)
00009280                            
00009280                            locret_8BAC:
00009280 4E75                       		rts	
00009282                            ; ===========================================================================
00009282                            
00009282                            Obj1E_Action:				; XREF: Obj1E_Index
00009282 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009288 6100 0000                  		bsr.w	AnimateSprite
0000928C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009292 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009294 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009298 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
0000929A 6000                       		bra.s	Obj1E_MarkAsGone
0000929C                            ; ===========================================================================
0000929C                            
0000929C                            Obj1E_SetBall:				; XREF: Obj1E_Action
0000929C 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
000092A0                            
000092A0                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
000092A0 6000 0000                  		bra.w	MarkObjGone
000092A4                            ; ===========================================================================
000092A4                            
000092A4                            Obj1E_MakeBall:				; XREF: Obj1E_Action
000092A4 117C 0001 0032             		move.b	#1,$32(a0)
000092AA 6100 0000                  		bsr.w	SingleObjLoad
000092AE 6600                       		bne.s	loc_8C1A
000092B0 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
000092B4 3368 0008 0008             		move.w	8(a0),8(a1)
000092BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000092C0 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
000092C6 337C 0000 0012             		move.w	#0,$12(a1)
000092CC 70FC                       		moveq	#-4,d0
000092CE 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
000092D4 6700                       		beq.s	loc_8C0A	; if not, branch
000092D6 4440                       		neg.w	d0
000092D8 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
000092DC                            
000092DC                            loc_8C0A:
000092DC D169 0008                  		add.w	d0,8(a1)
000092E0 0669 000C 000C             		addi.w	#$C,$C(a1)
000092E6 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
000092EC                            
000092EC                            loc_8C1A:
000092EC 60B2                       		bra.s	Obj1E_MarkAsGone
000092EE                            ; ===========================================================================
000092EE                            ; ---------------------------------------------------------------------------
000092EE                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
000092EE                            ; ---------------------------------------------------------------------------
000092EE                            
000092EE                            Obj20:					; XREF: Obj_Index
000092EE 7000                       		moveq	#0,d0
000092F0 1028 0024                  		move.b	$24(a0),d0
000092F4 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
000092F8 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
000092FC                            ; ===========================================================================
000092FC 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
000092FE 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009300                            ; ===========================================================================
00009300                            
00009300                            Obj20_Main:				; XREF: Obj20_Index
00009300 5428 0024                  		addq.b	#2,$24(a0)
00009304 117C 0007 0016             		move.b	#7,$16(a0)
0000930A 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009312 317C 2302 0002             		move.w	#$2302,2(a0)
00009318 117C 0004 0001             		move.b	#4,1(a0)
0000931E 117C 0003 0018             		move.b	#3,$18(a0)
00009324 117C 0087 0020             		move.b	#$87,$20(a0)
0000932A 117C 0008 0019             		move.b	#8,$19(a0)
00009330 7000                       		moveq	#0,d0
00009332 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009336 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
0000933A 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
0000933E 117C 0004 001A             		move.b	#4,$1A(a0)
00009344                            
00009344                            Obj20_Bounce:				; XREF: Obj20_Index
00009344 4EB9 0000 0000             		jsr	ObjectFall
0000934A 4A68 0012                  		tst.w	$12(a0)
0000934E 6B00                       		bmi.s	Obj20_ChkExplode
00009350 4EB9 0000 0000             		jsr	ObjHitFloor
00009356 4A41                       		tst.w	d1
00009358 6A00                       		bpl.s	Obj20_ChkExplode
0000935A D368 000C                  		add.w	d1,$C(a0)
0000935E 317C FD00 0012             		move.w	#-$300,$12(a0)
00009364 4A03                       		tst.b	d3
00009366 6700                       		beq.s	Obj20_ChkExplode
00009368 6B00                       		bmi.s	loc_8CA4
0000936A 4A68 0010                  		tst.w	$10(a0)
0000936E 6A00                       		bpl.s	Obj20_ChkExplode
00009370 4468 0010                  		neg.w	$10(a0)
00009374 6000                       		bra.s	Obj20_ChkExplode
00009376                            ; ===========================================================================
00009376                            
00009376                            loc_8CA4:				; XREF: Obj20_Bounce
00009376 4A68 0010                  		tst.w	$10(a0)
0000937A 6B00                       		bmi.s	Obj20_ChkExplode
0000937C 4468 0010                  		neg.w	$10(a0)
00009380                            
00009380                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009380 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009384 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009386 10BC 0024                  		move.b	#$24,0(a0)
0000938A 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
0000938E 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009394 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009398                            ; ===========================================================================
00009398                            
00009398                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009398 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000939C 6A00                       		bpl.s	Obj20_Display
0000939E 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
000093A4 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
000093AA                            
000093AA                            Obj20_Display:
000093AA 6100 0000                  		bsr.w	DisplaySprite
000093AE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000093B2 0640 00E0                  		addi.w	#$E0,d0
000093B6 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
000093BA 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
000093BE 4E75                       		rts	
000093C0                            ; ===========================================================================
000093C0                            ; ---------------------------------------------------------------------------
000093C0                            ; Object 24 - explosion	from a destroyed monitor
000093C0                            ; ---------------------------------------------------------------------------
000093C0                            
000093C0                            Obj24:					; XREF: Obj_Index
000093C0 7000                       		moveq	#0,d0
000093C2 1028 0024                  		move.b	$24(a0),d0
000093C6 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
000093CA 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
000093CE                            ; ===========================================================================
000093CE 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
000093D0 0000                       		dc.w Obj24_Animate-Obj24_Index
000093D2                            ; ===========================================================================
000093D2                            
000093D2                            Obj24_Main:				; XREF: Obj24_Index
000093D2 5428 0024                  		addq.b	#2,$24(a0)
000093D6 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
000093DE 317C 041C 0002             		move.w	#$41C,2(a0)
000093E4 117C 0004 0001             		move.b	#4,1(a0)
000093EA 117C 0001 0018             		move.b	#1,$18(a0)
000093F0 117C 0000 0020             		move.b	#0,$20(a0)
000093F6 117C 000C 0019             		move.b	#$C,$19(a0)
000093FC 117C 0009 001E             		move.b	#9,$1E(a0)
00009402 117C 0000 001A             		move.b	#0,$1A(a0)
00009408 303C 00A5                  		move.w	#$A5,d0
0000940C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play explosion sound
00009412                            
00009412                            Obj24_Animate:				; XREF: Obj24_Index
00009412 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009416 6A00                       		bpl.s	Obj24_Display
00009418 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
0000941E 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009422 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009428 6700 0000                  		beq.w	DeleteObject	; if yes, branch
0000942C                            
0000942C                            Obj24_Display:
0000942C 6000 0000                  		bra.w	DisplaySprite
00009430                            ; ===========================================================================
00009430                            ; ---------------------------------------------------------------------------
00009430                            ; Object 27 - explosion	from a destroyed enemy
00009430                            ; ---------------------------------------------------------------------------
00009430                            
00009430                            Obj27:					; XREF: Obj_Index
00009430 7000                       		moveq	#0,d0
00009432 1028 0024                  		move.b	$24(a0),d0
00009436 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
0000943A 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
0000943E                            ; ===========================================================================
0000943E 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009440 0000                       		dc.w Obj27_Main-Obj27_Index
00009442 0000                       		dc.w Obj27_Animate-Obj27_Index
00009444                            ; ===========================================================================
00009444                            
00009444                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009444 5428 0024                  		addq.b	#2,$24(a0)
00009448 6100 0000                  		bsr.w	SingleObjLoad
0000944C 6600                       		bne.s	Obj27_Main
0000944E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009452 3368 0008 0008             		move.w	8(a0),8(a1)
00009458 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000945E 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009464                            
00009464                            Obj27_Main:				; XREF: Obj27_Index
00009464 5428 0024                  		addq.b	#2,$24(a0)
00009468 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009470 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009476 117C 0004 0001             		move.b	#4,1(a0)
0000947C 117C 0001 0018             		move.b	#1,$18(a0)
00009482 117C 0000 0020             		move.b	#0,$20(a0)
00009488 117C 000C 0019             		move.b	#$C,$19(a0)
0000948E                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
0000948E 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009494 117C 0000 001A             		move.b	#0,$1A(a0)
0000949A 303C 00C1                  		move.w	#$C1,d0
0000949E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
000094A4                            
000094A4 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
000094AA 1028 0028                  		move.b	$28(a0),d0
000094AE 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
000094B4 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
000094BA                            
000094BA                            Obj27_Animate:				; XREF: Obj27_Index
000094BA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000094BE 6A00                       		bpl.s	Obj27_Display
000094C0                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
000094C0 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
000094C6 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
000094CA 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
000094D0 6700 0000                  		beq.w	DeleteObject	; if yes, branch
000094D4                            
000094D4                            Obj27_Display:
000094D4 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
000094DA 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
000094E0 6000 0000                  		bra.w	DisplaySprite
000094E4                            ; ===========================================================================
000094E4                            ; ---------------------------------------------------------------------------
000094E4                            Obj27_ExplosionXYSpd:
000094E4                            		; dc.w	-$350, -$300	; Left
000094E4                            		; dc.w	-$200, -$450	; Near middle (left)
000094E4                            		; dc.w	0, -$500	; Middle
000094E4                            		; dc.w	$200, -$450	; Near middle (right)
000094E4                            		; dc.w	$350, -$300	; Right
000094E4                            
000094E4 FEB0 FC00                  		dc.w	-$150, -$400	; Left
000094E8 FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
000094EC 0000 FA00                  		dc.w	0, -$600	; Middle
000094F0 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
000094F4 0150 FC00                  		dc.w	$150, -$400	; Right
000094F8                            
000094F8 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009512                            ; ---------------------------------------------------------------------------
00009512                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009512                            ; ---------------------------------------------------------------------------
00009512                            
00009512                            Obj3F:					; XREF: Obj_Index
00009512 7000                       		moveq	#0,d0
00009514 1028 0024                  		move.b	$24(a0),d0
00009518 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
0000951C 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009520                            ; ===========================================================================
00009520 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009522 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009524                            ; ===========================================================================
00009524                            
00009524                            Obj3F_Main:				; XREF: Obj3F_Index
00009524 5428 0024                  		addq.b	#2,$24(a0)
00009528 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009530 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009536 117C 0004 0001             		move.b	#4,1(a0)
0000953C 117C 0001 0018             		move.b	#1,$18(a0)
00009542 117C 0000 0020             		move.b	#0,$20(a0)
00009548 117C 000C 0019             		move.b	#$C,$19(a0)
0000954E 117C 0007 001E             		move.b	#7,$1E(a0)
00009554 117C 0000 001A             		move.b	#0,$1A(a0)
0000955A 303C 00C4                  		move.w	#$C4,d0
0000955E 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009564                            ; ===========================================================================
00009564                            Ani_obj1E:
00009564                            	include "_anim\obj1E.asm"
00009564                            ; ---------------------------------------------------------------------------
00009564                            ; Animation script - doors (SBZ)
00009564                            ; ---------------------------------------------------------------------------
00009564 0000                       		dc.w byte_8E4A-Ani_obj1E
00009566 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
0000957E 00                         		even
0000957E 00                         		even
0000957E                            
0000957E                            ; ---------------------------------------------------------------------------
0000957E                            ; Sprite mappings - Ball Hog enemy (SBZ)
0000957E                            ; ---------------------------------------------------------------------------
0000957E                            Map_obj1E:
0000957E                            	include "_maps\obj1E.asm"
0000957E                            Map_a7ad:
0000957E 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
00009580 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
00009582 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009584 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009586 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009588 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
0000958A 02                         Map_a7ad_C: 	dc.b $2
0000958B EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009590 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009595 02                         Map_a7ad_17: 	dc.b $2
00009596 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
0000959B FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
000095A0 02                         Map_a7ad_22: 	dc.b $2
000095A1 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
000095A6 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
000095AB 02                         Map_a7ad_2D: 	dc.b $2
000095AC E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
000095B1 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
000095B6 02                         Map_a7ad_38: 	dc.b $2
000095B7 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
000095BC E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
000095C1 02                         Map_a7ad_43: 	dc.b $2
000095C2 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
000095C7 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
000095CC                            	even
000095CC                            	even
000095CC                            
000095CC                            ; ---------------------------------------------------------------------------
000095CC                            ; Sprite mappings - explosion
000095CC                            ; ---------------------------------------------------------------------------
000095CC                            Map_obj24:
000095CC                            	include "_maps\obj24.asm"
000095CC                            ; ---------------------------------------------------------------------------
000095CC                            ; Sprite mappings - explosion
000095CC                            ; ---------------------------------------------------------------------------
000095CC 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
000095D0 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
000095D4 01                         byte_8EAE:	dc.b 1
000095D5 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000095DA 01                         byte_8EB4:	dc.b 1
000095DB F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
000095E0 01                         byte_8EBA:	dc.b 1
000095E1 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
000095E6 01                         byte_8EC0:	dc.b 1
000095E7 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
000095EC                            		even
000095EC                            		even
000095EC                            
000095EC                            ; ---------------------------------------------------------------------------
000095EC                            ; Sprite mappings - explosion
000095EC                            ; ---------------------------------------------------------------------------
000095EC 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
000095F0 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
000095F4 0000                       		dc.w byte_8EF7-Map_obj27
000095F6 01                         byte_8ED0:	dc.b 1
000095F7 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
000095FC 01                         byte_8ED6:	dc.b 1
000095FD F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009602 01                         byte_8EDC:	dc.b 1
00009603 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009608 04                         byte_8EE2:	dc.b 4
00009609 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
0000960E EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009613 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009618 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
0000961D 04                         byte_8EF7:	dc.b 4
0000961E EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009623 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009628 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
0000962D FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009632                            		even
00009632                            ; ---------------------------------------------------------------------------
00009632                            ; Sprite mappings - explosion from when	a boss is destroyed
00009632                            ; ---------------------------------------------------------------------------
00009632 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009634 0000                       		dc.w byte_8F16-Map_obj3F
00009636 0000                       		dc.w byte_8F1C-Map_obj3F
00009638 FFD6                       		dc.w byte_8EE2-Map_obj3F
0000963A FFEB                       		dc.w byte_8EF7-Map_obj3F
0000963C 01                         byte_8F16:	dc.b 1
0000963D F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009642 01                         byte_8F1C:	dc.b 1
00009643 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009648                            		even
00009648                            ; ===========================================================================
00009648                            ; ---------------------------------------------------------------------------
00009648                            ; Object 28 - animals
00009648                            ; ---------------------------------------------------------------------------
00009648                            
00009648                            Obj28:					; XREF: Obj_Index
00009648 7000                       		moveq	#0,d0
0000964A 1028 0024                  		move.b	$24(a0),d0
0000964E 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009652 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009656                            ; ===========================================================================
00009656 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
0000965A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000965E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009662 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009666 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
0000966A 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000966E 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009672 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009676 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
0000967A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000967E 0000                       		dc.w loc_92D6-Obj28_Index
00009680                            
00009680 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
0000968C                            
0000968C FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009690 0000 0000                  		dc.l Map_obj28
00009694 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009698 0000 0000                  		dc.l Map_obj28a		; mappings address
0000969C FE80 FD00                  		dc.w $FE80, $FD00
000096A0 0000 0000                  		dc.l Map_obj28
000096A4 FEC0 FE80                  		dc.w $FEC0, $FE80
000096A8 0000 0000                  		dc.l Map_obj28a
000096AC FE40 FD00                  		dc.w $FE40, $FD00
000096B0 0000 0000                  		dc.l Map_obj28b
000096B4 FD00 FC00                  		dc.w $FD00, $FC00
000096B8 0000 0000                  		dc.l Map_obj28a
000096BC FD80 FC80                  		dc.w $FD80, $FC80
000096C0 0000 0000                  		dc.l Map_obj28b
000096C4                            
000096C4 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000096D4 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000096E4 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000096F0                            
000096F0 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009704 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009718 0000 0000                  		dc.l Map_obj28b
0000971C                            
0000971C 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
0000972E 0565 05B3                  		dc.w $565, $5B3
00009732                            ; ===========================================================================
00009732                            
00009732                            Obj28_Ending:				; XREF: Obj28_Index
00009732 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009736 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
0000973A 7000                       		moveq	#0,d0
0000973C 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009740 D040                       		add.w	d0,d0		; multiply d0 by 2
00009742 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009746 0440 0014                  		subi.w	#$14,d0
0000974A 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009750 D040                       		add.w	d0,d0
00009752 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009758 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000975C 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009762 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009768 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000976E 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009774 117C 000C 0016             		move.b	#$C,$16(a0)
0000977A 117C 0004 0001             		move.b	#4,1(a0)
00009780 08E8 0000 0001             		bset	#0,1(a0)
00009786 117C 0006 0018             		move.b	#6,$18(a0)
0000978C 117C 0008 0019             		move.b	#8,$19(a0)
00009792 117C 0007 001E             		move.b	#7,$1E(a0)
00009798 6000 0000                  		bra.w	DisplaySprite
0000979C                            ; ===========================================================================
0000979C                            
0000979C                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000979C 5428 0024                  		addq.b	#2,$24(a0)
000097A0 6100 9536                  		bsr.w	RandomNumber
000097A4 0240 0001                  		andi.w	#1,d0
000097A8 7200                       		moveq	#0,d1
000097AA 1238 FE10                  		move.b	($FFFFFE10).w,d1
000097AE D241                       		add.w	d1,d1
000097B0 D240                       		add.w	d0,d1
000097B2 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
000097B6 1031 1000                  		move.b	(a1,d1.w),d0
000097BA 1140 0030                  		move.b	d0,$30(a0)
000097BE E748                       		lsl.w	#3,d0
000097C0 43FA FECA                  		lea	Obj28_Variables(pc),a1
000097C4 D2C0                       		adda.w	d0,a1
000097C6 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
000097CA 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
000097CE 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
000097D2 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000097D8 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000097DE 6700                       		beq.s	loc_90C0	; if yes, branch
000097E0 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000097E6                            
000097E6                            loc_90C0:
000097E6 117C 000C 0016             		move.b	#$C,$16(a0)
000097EC 117C 0004 0001             		move.b	#4,1(a0)
000097F2 08E8 0000 0001             		bset	#0,1(a0)
000097F8 117C 0006 0018             		move.b	#6,$18(a0)
000097FE 117C 0008 0019             		move.b	#8,$19(a0)
00009804 117C 0007 001E             		move.b	#7,$1E(a0)
0000980A 117C 0002 001A             		move.b	#2,$1A(a0)
00009810 317C FC00 0012             		move.w	#-$400,$12(a0)
00009816 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000981A 6600                       		bne.s	loc_911C
0000981C 6100 0000                  		bsr.w	SingleObjLoad
00009820 6600                       		bne.s	Obj28_Display
00009822 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00009826 3368 0008 0008             		move.w	8(a0),8(a1)
0000982C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009832 3028 003E                  		move.w	$3E(a0),d0
00009836 E248                       		lsr.w	#1,d0
00009838 1340 001A                  		move.b	d0,$1A(a1)
0000983C                            
0000983C                            Obj28_Display:
0000983C 6000 0000                  		bra.w	DisplaySprite
00009840                            ; ===========================================================================
00009840                            
00009840                            loc_911C:
00009840 117C 0012 0024             		move.b	#$12,$24(a0)
00009846 4268 0010                  		clr.w	$10(a0)
0000984A 6000 0000                  		bra.w	DisplaySprite
0000984E                            ; ===========================================================================
0000984E                            
0000984E                            loc_912A:				; XREF: Obj28_Index
0000984E 4A28 0001                  		tst.b	1(a0)
00009852 6A00 0000                  		bpl.w	DeleteObject
00009856 6100 0000                  		bsr.w	ObjectFall
0000985A 4A68 0012                  		tst.w	$12(a0)
0000985E 6B00                       		bmi.s	loc_9180
00009860 4EB9 0000 0000             		jsr	ObjHitFloor
00009866 4A41                       		tst.w	d1
00009868 6A00                       		bpl.s	loc_9180
0000986A D368 000C                  		add.w	d1,$C(a0)
0000986E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009874 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000987A 117C 0001 001A             		move.b	#1,$1A(a0)
00009880 1028 0030                  		move.b	$30(a0),d0
00009884 D000                       		add.b	d0,d0
00009886 5800                       		addq.b	#4,d0
00009888 1140 0024                  		move.b	d0,$24(a0)
0000988C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009890 6700                       		beq.s	loc_9180
00009892 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009898 6700                       		beq.s	loc_9180
0000989A 4468 0010                  		neg.w	$10(a0)
0000989E 0868 0000 0001             		bchg	#0,1(a0)
000098A4                            
000098A4                            loc_9180:
000098A4 6000 0000                  		bra.w	DisplaySprite
000098A8                            ; ===========================================================================
000098A8                            
000098A8                            loc_9184:				; XREF: Obj28_Index
000098A8 6100 0000                  		bsr.w	ObjectFall
000098AC 117C 0001 001A             		move.b	#1,$1A(a0)
000098B2 4A68 0012                  		tst.w	$12(a0)
000098B6 6B00                       		bmi.s	loc_91AE
000098B8 117C 0000 001A             		move.b	#0,$1A(a0)
000098BE 4EB9 0000 0000             		jsr	ObjHitFloor
000098C4 4A41                       		tst.w	d1
000098C6 6A00                       		bpl.s	loc_91AE
000098C8 D368 000C                  		add.w	d1,$C(a0)
000098CC 3168 0034 0012             		move.w	$34(a0),$12(a0)
000098D2                            
000098D2                            loc_91AE:
000098D2 4A28 0028                  		tst.b	$28(a0)
000098D6 6600                       		bne.s	loc_9224
000098D8 4A28 0001                  		tst.b	1(a0)
000098DC 6A00 0000                  		bpl.w	DeleteObject
000098E0 6000 0000                  		bra.w	DisplaySprite
000098E4                            ; ===========================================================================
000098E4                            
000098E4                            loc_91C0:				; XREF: Obj28_Index
000098E4 6100 0000                  		bsr.w	SpeedToPos
000098E8 0668 0018 0012             		addi.w	#$18,$12(a0)
000098EE 4A68 0012                  		tst.w	$12(a0)
000098F2 6B00                       		bmi.s	loc_91FC
000098F4 4EB9 0000 0000             		jsr	ObjHitFloor
000098FA 4A41                       		tst.w	d1
000098FC 6A00                       		bpl.s	loc_91FC
000098FE D368 000C                  		add.w	d1,$C(a0)
00009902 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009908 4A28 0028                  		tst.b	$28(a0)
0000990C 6700                       		beq.s	loc_91FC
0000990E 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
00009914 6700                       		beq.s	loc_91FC
00009916 4468 0010                  		neg.w	$10(a0)
0000991A 0868 0000 0001             		bchg	#0,1(a0)
00009920                            
00009920                            loc_91FC:
00009920 5328 001E                  		subq.b	#1,$1E(a0)
00009924 6A00                       		bpl.s	loc_9212
00009926 117C 0001 001E             		move.b	#1,$1E(a0)
0000992C 5228 001A                  		addq.b	#1,$1A(a0)
00009930 0228 0001 001A             		andi.b	#1,$1A(a0)
00009936                            
00009936                            loc_9212:
00009936 4A28 0028                  		tst.b	$28(a0)
0000993A 6600                       		bne.s	loc_9224
0000993C 4A28 0001                  		tst.b	1(a0)
00009940 6A00 0000                  		bpl.w	DeleteObject
00009944 6000 0000                  		bra.w	DisplaySprite
00009948                            ; ===========================================================================
00009948                            
00009948                            loc_9224:				; XREF: Obj28_Index
00009948 3028 0008                  		move.w	8(a0),d0
0000994C 9078 D008                  		sub.w	($FFFFD008).w,d0
00009950 6500                       		bcs.s	loc_923C
00009952 0440 0180                  		subi.w	#$180,d0
00009956 6A00                       		bpl.s	loc_923C
00009958 4A28 0001                  		tst.b	1(a0)
0000995C 6A00 0000                  		bpl.w	DeleteObject
00009960                            
00009960                            loc_923C:
00009960 6000 0000                  		bra.w	DisplaySprite
00009964                            ; ===========================================================================
00009964                            
00009964                            loc_9240:				; XREF: Obj28_Index
00009964 4A28 0001                  		tst.b	1(a0)
00009968 6A00 0000                  		bpl.w	DeleteObject
0000996C 5368 0036                  		subq.w	#1,$36(a0)
00009970 6600 0000                  		bne.w	loc_925C
00009974 117C 0002 0024             		move.b	#2,$24(a0)
0000997A 117C 0003 0018             		move.b	#3,$18(a0)
00009980                            
00009980                            loc_925C:
00009980 6000 0000                  		bra.w	DisplaySprite
00009984                            ; ===========================================================================
00009984                            
00009984                            loc_9260:				; XREF: Obj28_Index
00009984 6100 0000                  		bsr.w	sub_9404
00009988 6400                       		bcc.s	loc_927C
0000998A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009990 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009996 117C 000E 0024             		move.b	#$E,$24(a0)
0000999C 6000 FF46                  		bra.w	loc_91C0
000099A0                            ; ===========================================================================
000099A0                            
000099A0                            loc_927C:
000099A0 6000 FFA6                  		bra.w	loc_9224
000099A4                            ; ===========================================================================
000099A4                            
000099A4                            loc_9280:				; XREF: Obj28_Index
000099A4 6100 0000                  		bsr.w	sub_9404
000099A8 6A00                       		bpl.s	loc_92B6
000099AA 4268 0010                  		clr.w	$10(a0)
000099AE 4268 0032                  		clr.w	$32(a0)
000099B2 6100 0000                  		bsr.w	SpeedToPos
000099B6 0668 0018 0012             		addi.w	#$18,$12(a0)
000099BC 6100 0000                  		bsr.w	loc_93C4
000099C0 6100 0000                  		bsr.w	loc_93EC
000099C4 5328 001E                  		subq.b	#1,$1E(a0)
000099C8 6A00                       		bpl.s	loc_92B6
000099CA 117C 0001 001E             		move.b	#1,$1E(a0)
000099D0 5228 001A                  		addq.b	#1,$1A(a0)
000099D4 0228 0001 001A             		andi.b	#1,$1A(a0)
000099DA                            
000099DA                            loc_92B6:
000099DA 6000 FF6C                  		bra.w	loc_9224
000099DE                            ; ===========================================================================
000099DE                            
000099DE                            loc_92BA:				; XREF: Obj28_Index
000099DE 6100 0000                  		bsr.w	sub_9404
000099E2 6A00                       		bpl.s	loc_9310
000099E4 3168 0032 0010             		move.w	$32(a0),$10(a0)
000099EA 3168 0034 0012             		move.w	$34(a0),$12(a0)
000099F0 117C 0004 0024             		move.b	#4,$24(a0)
000099F6 6000 FEB0                  		bra.w	loc_9184
000099FA                            ; ===========================================================================
000099FA                            
000099FA                            loc_92D6:				; XREF: Obj28_Index
000099FA 6100 0000                  		bsr.w	ObjectFall
000099FE 117C 0001 001A             		move.b	#1,$1A(a0)
00009A04 4A68 0012                  		tst.w	$12(a0)
00009A08 6B00                       		bmi.s	loc_9310
00009A0A 117C 0000 001A             		move.b	#0,$1A(a0)
00009A10 4EB9 0000 0000             		jsr	ObjHitFloor
00009A16 4A41                       		tst.w	d1
00009A18 6A00                       		bpl.s	loc_9310
00009A1A 4628 0029                  		not.b	$29(a0)
00009A1E 6600                       		bne.s	loc_9306
00009A20 4468 0010                  		neg.w	$10(a0)
00009A24 0868 0000 0001             		bchg	#0,1(a0)
00009A2A                            
00009A2A                            loc_9306:
00009A2A D368 000C                  		add.w	d1,$C(a0)
00009A2E 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A34                            
00009A34                            loc_9310:
00009A34 6000 FF12                  		bra.w	loc_9224
00009A38                            ; ===========================================================================
00009A38                            
00009A38                            loc_9314:				; XREF: Obj28_Index
00009A38 6100 0000                  		bsr.w	sub_9404
00009A3C 6A00                       		bpl.s	loc_932E
00009A3E 4268 0010                  		clr.w	$10(a0)
00009A42 4268 0032                  		clr.w	$32(a0)
00009A46 6100 0000                  		bsr.w	ObjectFall
00009A4A 6100 0000                  		bsr.w	loc_93C4
00009A4E 6100 0000                  		bsr.w	loc_93EC
00009A52                            
00009A52                            loc_932E:
00009A52 6000 FEF4                  		bra.w	loc_9224
00009A56                            ; ===========================================================================
00009A56                            
00009A56                            loc_9332:				; XREF: Obj28_Index
00009A56 6100 0000                  		bsr.w	sub_9404
00009A5A 6A00                       		bpl.s	loc_936C
00009A5C 6100 0000                  		bsr.w	ObjectFall
00009A60 117C 0001 001A             		move.b	#1,$1A(a0)
00009A66 4A68 0012                  		tst.w	$12(a0)
00009A6A 6B00                       		bmi.s	loc_936C
00009A6C 117C 0000 001A             		move.b	#0,$1A(a0)
00009A72 4EB9 0000 0000             		jsr	ObjHitFloor
00009A78 4A41                       		tst.w	d1
00009A7A 6A00                       		bpl.s	loc_936C
00009A7C 4468 0010                  		neg.w	$10(a0)
00009A80 0868 0000 0001             		bchg	#0,1(a0)
00009A86 D368 000C                  		add.w	d1,$C(a0)
00009A8A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009A90                            
00009A90                            loc_936C:
00009A90 6000 FEB6                  		bra.w	loc_9224
00009A94                            ; ===========================================================================
00009A94                            
00009A94                            loc_9370:				; XREF: Obj28_Index
00009A94 6100 0000                  		bsr.w	sub_9404
00009A98 6A00                       		bpl.s	loc_93C0
00009A9A 6100 0000                  		bsr.w	SpeedToPos
00009A9E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009AA4 4A68 0012                  		tst.w	$12(a0)
00009AA8 6B00                       		bmi.s	loc_93AA
00009AAA 4EB9 0000 0000             		jsr	ObjHitFloor
00009AB0 4A41                       		tst.w	d1
00009AB2 6A00                       		bpl.s	loc_93AA
00009AB4 4628 0029                  		not.b	$29(a0)
00009AB8 6600                       		bne.s	loc_93A0
00009ABA 4468 0010                  		neg.w	$10(a0)
00009ABE 0868 0000 0001             		bchg	#0,1(a0)
00009AC4                            
00009AC4                            loc_93A0:
00009AC4 D368 000C                  		add.w	d1,$C(a0)
00009AC8 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009ACE                            
00009ACE                            loc_93AA:
00009ACE 5328 001E                  		subq.b	#1,$1E(a0)
00009AD2 6A00                       		bpl.s	loc_93C0
00009AD4 117C 0001 001E             		move.b	#1,$1E(a0)
00009ADA 5228 001A                  		addq.b	#1,$1A(a0)
00009ADE 0228 0001 001A             		andi.b	#1,$1A(a0)
00009AE4                            
00009AE4                            loc_93C0:
00009AE4 6000 FE62                  		bra.w	loc_9224
00009AE8                            ; ===========================================================================
00009AE8                            
00009AE8                            loc_93C4:
00009AE8 117C 0001 001A             		move.b	#1,$1A(a0)
00009AEE 4A68 0012                  		tst.w	$12(a0)
00009AF2 6B00                       		bmi.s	locret_93EA
00009AF4 117C 0000 001A             		move.b	#0,$1A(a0)
00009AFA 4EB9 0000 0000             		jsr	ObjHitFloor
00009B00 4A41                       		tst.w	d1
00009B02 6A00                       		bpl.s	locret_93EA
00009B04 D368 000C                  		add.w	d1,$C(a0)
00009B08 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009B0E                            
00009B0E                            locret_93EA:
00009B0E 4E75                       		rts	
00009B10                            ; ===========================================================================
00009B10                            
00009B10                            loc_93EC:
00009B10 08E8 0000 0001             		bset	#0,1(a0)
00009B16 3028 0008                  		move.w	8(a0),d0
00009B1A 9078 D008                  		sub.w	($FFFFD008).w,d0
00009B1E 6400                       		bcc.s	locret_9402
00009B20 08A8 0000 0001             		bclr	#0,1(a0)
00009B26                            
00009B26                            locret_9402:
00009B26 4E75                       		rts	
00009B28                            
00009B28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009B28                            
00009B28                            
00009B28                            sub_9404:
00009B28 3038 D008                  		move.w	($FFFFD008).w,d0
00009B2C 9068 0008                  		sub.w	8(a0),d0
00009B30 0440 00B8                  		subi.w	#$B8,d0
00009B34 4E75                       		rts	
00009B36                            ; End of function sub_9404
00009B36                            
00009B36                            ; ===========================================================================
00009B36                            ; ---------------------------------------------------------------------------
00009B36                            ; Object 29 - points that appear when you destroy something
00009B36                            ; ---------------------------------------------------------------------------
00009B36                            
00009B36                            Obj29:					; XREF: Obj_Index
00009B36 7000                       		moveq	#0,d0
00009B38 1028 0024                  		move.b	$24(a0),d0
00009B3C 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
00009B40 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009B44 6000 0000                  		bra.w	DisplaySprite
00009B48                            ; ===========================================================================
00009B48 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009B4A 0000                       		dc.w Obj29_Slower-Obj29_Index
00009B4C                            ; ===========================================================================
00009B4C                            
00009B4C                            Obj29_Main:				; XREF: Obj29_Index
00009B4C 5428 0024                  		addq.b	#2,$24(a0)
00009B50 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009B58 317C 2797 0002             		move.w	#$2797,2(a0)
00009B5E 117C 0004 0001             		move.b	#4,1(a0)
00009B64 117C 0001 0018             		move.b	#1,$18(a0)
00009B6A 117C 0008 0019             		move.b	#8,$19(a0)
00009B70 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009B76                            
00009B76                            Obj29_Slower:				; XREF: Obj29_Index
00009B76 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009B7A 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
00009B7E 6100 0000                  		bsr.w	SpeedToPos
00009B82 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009B88 4E75                       		rts	
00009B8A                            ; ===========================================================================
00009B8A                            ; ---------------------------------------------------------------------------
00009B8A                            ; Sprite mappings - animals
00009B8A                            ; ---------------------------------------------------------------------------
00009B8A                            Map_obj28:
00009B8A                            	include "_maps\obj28.asm"
00009B8A                            ; ---------------------------------------------------------------------------
00009B8A                            ; Sprite mappings - animals
00009B8A                            ; ---------------------------------------------------------------------------
00009B8A 0000                       		dc.w byte_9472-Map_obj28
00009B8C 0000                       		dc.w byte_9478-Map_obj28
00009B8E 0000                       		dc.w byte_946C-Map_obj28
00009B90 01                         byte_946C:	dc.b 1
00009B91 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009B96 01                         byte_9472:	dc.b 1
00009B97 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009B9C 01                         byte_9478:	dc.b 1
00009B9D F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009BA2                            		even
00009BA2                            		even
00009BA2                            
00009BA2                            Map_obj28a:
00009BA2                            	include "_maps\obj28a.asm"
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2                            ; Sprite mappings - animals
00009BA2                            ; ---------------------------------------------------------------------------
00009BA2 0000                       		dc.w byte_948A-Map_obj28a
00009BA4 0000                       		dc.w byte_9490-Map_obj28a
00009BA6 0000                       		dc.w byte_9484-Map_obj28a
00009BA8 01                         byte_9484:	dc.b 1
00009BA9 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BAE 01                         byte_948A:	dc.b 1
00009BAF FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009BB4 01                         byte_9490:	dc.b 1
00009BB5 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009BBA                            		even
00009BBA                            		even
00009BBA                            
00009BBA                            Map_obj28b:
00009BBA                            	include "_maps\obj28b.asm"
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA                            ; Sprite mappings - animals
00009BBA                            ; ---------------------------------------------------------------------------
00009BBA 0000                       		dc.w byte_94A2-Map_obj28b
00009BBC 0000                       		dc.w byte_94A8-Map_obj28b
00009BBE 0000                       		dc.w byte_949C-Map_obj28b
00009BC0 01                         byte_949C:	dc.b 1
00009BC1 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009BC6 01                         byte_94A2:	dc.b 1
00009BC7 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009BCC 01                         byte_94A8:	dc.b 1
00009BCD FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009BD2                            		even
00009BD2                            		even
00009BD2                            
00009BD2                            ; ---------------------------------------------------------------------------
00009BD2                            ; Sprite mappings - points that	appear when you	destroy	something
00009BD2                            ; ---------------------------------------------------------------------------
00009BD2                            Map_obj29:
00009BD2                            	include "_maps\obj29.asm"
00009BD2                            ; ---------------------------------------------------------------------------
00009BD2                            ; Sprite mappings - points that	appear when you	destroy	something
00009BD2                            ; ---------------------------------------------------------------------------
00009BD2 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009BD6 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
00009BDA 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
00009BDE 0000                       		dc.w byte_94E5-Map_obj29
00009BE0 01                         byte_94BC:	dc.b 1
00009BE1 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009BE6 01                         byte_94C2:	dc.b 1
00009BE7 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
00009BEC 01                         byte_94C8:	dc.b 1
00009BED FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
00009BF2 01                         byte_94CE:	dc.b 1
00009BF3 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
00009BF8 01                         byte_94D4:	dc.b 1
00009BF9 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
00009BFE 02                         byte_94DA:	dc.b 2
00009BFF FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
00009C04 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
00009C09 02                         byte_94E5:	dc.b 2
00009C0A FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
00009C0F FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
00009C14                            		even
00009C14                            		even
00009C14                            
00009C14                            ; ===========================================================================
00009C14                            ; ---------------------------------------------------------------------------
00009C14                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
00009C14                            ; ---------------------------------------------------------------------------
00009C14                            
00009C14                            Obj1F:					; XREF: Obj_Index
00009C14 7000                       		moveq	#0,d0
00009C16 1028 0024                  		move.b	$24(a0),d0
00009C1A 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
00009C1E 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
00009C22                            ; ===========================================================================
00009C22 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
00009C24 0000                       		dc.w Obj1F_Action-Obj1F_Index
00009C26 0000                       		dc.w Obj1F_Delete-Obj1F_Index
00009C28 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
00009C2A 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
00009C2C                            ; ===========================================================================
00009C2C                            
00009C2C                            Obj1F_Main:				; XREF: Obj1F_Index
00009C2C 117C 0010 0016             		move.b	#$10,$16(a0)
00009C32 117C 0008 0017             		move.b	#8,$17(a0)
00009C38 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009C40 317C 0400 0002             		move.w	#$400,2(a0)
00009C46 117C 0004 0001             		move.b	#4,1(a0)
00009C4C 117C 0003 0018             		move.b	#3,$18(a0)
00009C52 117C 0006 0020             		move.b	#6,$20(a0)
00009C58 117C 0015 0019             		move.b	#$15,$19(a0)
00009C5E 6100 0000                  		bsr.w	ObjectFall
00009C62 4EB9 0000 0000             		jsr	ObjHitFloor
00009C68 4A41                       		tst.w	d1
00009C6A 6A00                       		bpl.s	locret_955A
00009C6C D368 000C                  		add.w	d1,$C(a0)
00009C70 1143 0026                  		move.b	d3,$26(a0)
00009C74 317C 0000 0012             		move.w	#0,$12(a0)
00009C7A 5428 0024                  		addq.b	#2,$24(a0)
00009C7E                            
00009C7E                            locret_955A:
00009C7E 4E75                       		rts	
00009C80                            ; ===========================================================================
00009C80                            
00009C80                            Obj1F_Action:				; XREF: Obj1F_Index
00009C80 7000                       		moveq	#0,d0
00009C82 1028 0025                  		move.b	$25(a0),d0
00009C86 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009C8A 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
00009C8E 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009C94 6100 0000                  		bsr.w	AnimateSprite
00009C98 6000 0000                  		bra.w	MarkObjGone
00009C9C                            ; ===========================================================================
00009C9C 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
00009C9E 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009CA0                            ; ===========================================================================
00009CA0                            
00009CA0                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009CA0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009CA4 6A00                       		bpl.s	locret_95B6
00009CA6 4A28 0001                  		tst.b	1(a0)
00009CAA 6A00                       		bpl.s	Obj1F_Move
00009CAC 0868 0001 0032             		bchg	#1,$32(a0)
00009CB2 6600                       		bne.s	Obj1F_MakeFire
00009CB4                            
00009CB4                            Obj1F_Move:
00009CB4 5428 0025                  		addq.b	#2,$25(a0)
00009CB8 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
00009CBE 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009CC4 6100 0000                  		bsr.w	Obj1F_SetAni
00009CC8 5600                       		addq.b	#3,d0
00009CCA 1140 001C                  		move.b	d0,$1C(a0)
00009CCE 0868 0000 0022             		bchg	#0,$22(a0)
00009CD4 6600                       		bne.s	locret_95B6
00009CD6 4468 0010                  		neg.w	$10(a0)		; change direction
00009CDA                            
00009CDA                            locret_95B6:
00009CDA 4E75                       		rts	
00009CDC                            ; ===========================================================================
00009CDC                            
00009CDC                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
00009CDC 317C 003B 0030             		move.w	#$3B,$30(a0)
00009CE2 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009CE8 6100 0000                  		bsr.w	SingleObjLoad
00009CEC 6600                       		bne.s	Obj1F_MakeFire2
00009CEE 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
00009CF2 137C 0006 0024             		move.b	#6,$24(a1)
00009CF8 3368 0008 0008             		move.w	8(a0),8(a1)
00009CFE 0469 0010 0008             		subi.w	#$10,8(a1)
00009D04 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D0A 337C FF00 0010             		move.w	#-$100,$10(a1)
00009D10                            
00009D10                            Obj1F_MakeFire2:
00009D10 6100 0000                  		bsr.w	SingleObjLoad
00009D14 6600                       		bne.s	locret_9618
00009D16 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
00009D1A 137C 0006 0024             		move.b	#6,$24(a1)
00009D20 3368 0008 0008             		move.w	8(a0),8(a1)
00009D26 0669 0010 0008             		addi.w	#$10,8(a1)
00009D2C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D32 337C 0100 0010             		move.w	#$100,$10(a1)
00009D38                            
00009D38                            locret_9618:
00009D38 4E75                       		rts	
00009D3A                            ; ===========================================================================
00009D3A                            
00009D3A                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009D3A 5368 0030                  		subq.w	#1,$30(a0)
00009D3E 6B00                       		bmi.s	loc_966E
00009D40 6100 0000                  		bsr.w	SpeedToPos
00009D44 0868 0000 0032             		bchg	#0,$32(a0)
00009D4A 6600                       		bne.s	loc_9654
00009D4C 3628 0008                  		move.w	8(a0),d3
00009D50 0643 0010                  		addi.w	#$10,d3
00009D54 0828 0000 0022             		btst	#0,$22(a0)
00009D5A 6700                       		beq.s	loc_9640
00009D5C 0443 0020                  		subi.w	#$20,d3
00009D60                            
00009D60                            loc_9640:
00009D60 4EB9 0000 0000             		jsr	ObjHitFloor2
00009D66 0C41 FFF8                  		cmpi.w	#-8,d1
00009D6A 6D00                       		blt.s	loc_966E
00009D6C 0C41 000C                  		cmpi.w	#$C,d1
00009D70 6C00                       		bge.s	loc_966E
00009D72 4E75                       		rts	
00009D74                            ; ===========================================================================
00009D74                            
00009D74                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009D74 4EB9 0000 0000             		jsr	ObjHitFloor
00009D7A D368 000C                  		add.w	d1,$C(a0)
00009D7E 1143 0026                  		move.b	d3,$26(a0)
00009D82 6100 0000                  		bsr.w	Obj1F_SetAni
00009D86 5600                       		addq.b	#3,d0
00009D88 1140 001C                  		move.b	d0,$1C(a0)
00009D8C 4E75                       		rts	
00009D8E                            ; ===========================================================================
00009D8E                            
00009D8E                            loc_966E:				; XREF: Obj1F_WalkOnFloor
00009D8E 5528 0025                  		subq.b	#2,$25(a0)
00009D92 317C 003B 0030             		move.w	#59,$30(a0)
00009D98 317C 0000 0010             		move.w	#0,$10(a0)
00009D9E 6100 0000                  		bsr.w	Obj1F_SetAni
00009DA2 1140 001C                  		move.b	d0,$1C(a0)
00009DA6 4E75                       		rts	
00009DA8                            ; ---------------------------------------------------------------------------
00009DA8                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009DA8                            ; ---------------------------------------------------------------------------
00009DA8                            
00009DA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009DA8                            
00009DA8                            
00009DA8                            Obj1F_SetAni:				; XREF: loc_966E
00009DA8 7000                       		moveq	#0,d0
00009DAA 1628 0026                  		move.b	$26(a0),d3
00009DAE 6B00                       		bmi.s	loc_96A4
00009DB0 0C03 0006                  		cmpi.b	#6,d3
00009DB4 6500                       		bcs.s	locret_96A2
00009DB6 7001                       		moveq	#1,d0
00009DB8 0828 0000 0022             		btst	#0,$22(a0)
00009DBE 6600                       		bne.s	locret_96A2
00009DC0 7002                       		moveq	#2,d0
00009DC2                            
00009DC2                            locret_96A2:
00009DC2 4E75                       		rts	
00009DC4                            ; ===========================================================================
00009DC4                            
00009DC4                            loc_96A4:				; XREF: Obj1F_SetAni
00009DC4 0C03 00FA                  		cmpi.b	#-6,d3
00009DC8 6200                       		bhi.s	locret_96B6
00009DCA 7002                       		moveq	#2,d0
00009DCC 0828 0000 0022             		btst	#0,$22(a0)
00009DD2 6600                       		bne.s	locret_96B6
00009DD4 7001                       		moveq	#1,d0
00009DD6                            
00009DD6                            locret_96B6:
00009DD6 4E75                       		rts	
00009DD8                            ; End of function Obj1F_SetAni
00009DD8                            
00009DD8                            ; ===========================================================================
00009DD8                            
00009DD8                            Obj1F_Delete:				; XREF: Obj1F_Index
00009DD8 6100 0000                  		bsr.w	DeleteObject
00009DDC 4E75                       		rts	
00009DDE                            ; ===========================================================================
00009DDE                            ; ---------------------------------------------------------------------------
00009DDE                            ; Sub-object - missile that the	Crabmeat throws
00009DDE                            ; ---------------------------------------------------------------------------
00009DDE                            
00009DDE                            Obj1F_BallMain:				; XREF: Obj1F_Index
00009DDE 5428 0024                  		addq.b	#2,$24(a0)
00009DE2 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
00009DEA 317C 0400 0002             		move.w	#$400,2(a0)
00009DF0 117C 0004 0001             		move.b	#4,1(a0)
00009DF6 117C 0003 0018             		move.b	#3,$18(a0)
00009DFC 117C 0087 0020             		move.b	#$87,$20(a0)
00009E02 117C 0008 0019             		move.b	#8,$19(a0)
00009E08 317C FC00 0012             		move.w	#-$400,$12(a0)
00009E0E 117C 0007 001C             		move.b	#7,$1C(a0)
00009E14                            
00009E14                            Obj1F_BallMove:				; XREF: Obj1F_Index
00009E14 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009E1A 6100 0000                  		bsr.w	AnimateSprite
00009E1E 6100 0000                  		bsr.w	ObjectFall
00009E22 6100 0000                  		bsr.w	DisplaySprite
00009E26 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009E2A 0640 00E0                  		addi.w	#$E0,d0
00009E2E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009E32 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009E34 4E75                       		rts	
00009E36                            ; ===========================================================================
00009E36                            
00009E36                            Obj1F_Delete2:
00009E36 6000 0000                  		bra.w	DeleteObject
00009E3A                            ; ===========================================================================
00009E3A                            Ani_obj1F:
00009E3A                            	include "_anim\obj1F.asm"
00009E3A                            ; ---------------------------------------------------------------------------
00009E3A                            ; Animation script - Crabmeat enemy
00009E3A                            ; ---------------------------------------------------------------------------
00009E3A 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
00009E40 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009E46 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009E4A 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
00009E4E 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009E52 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009E56 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009E5C 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009E62 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009E68 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009E6C 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009E70                            		even
00009E70                            		even
00009E70                            
00009E70                            ; ---------------------------------------------------------------------------
00009E70                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009E70                            ; ---------------------------------------------------------------------------
00009E70                            Map_obj1F:
00009E70                            	include "_maps\obj1F.asm"
00009E70                            Map_1514:
00009E70 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
00009E72 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
00009E74 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
00009E76 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
00009E78 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
00009E7A 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
00009E7C 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
00009E7E 03                         Map_1514_E: 	dc.b $3
00009E7F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E84 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E89 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E8E 03                         Map_1514_1E: 	dc.b $3
00009E8F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009E94 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009E99 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009E9E 03                         Map_1514_2E: 	dc.b $3
00009E9F F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EA4 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EA9 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EAE 03                         Map_1514_3E: 	dc.b $3
00009EAF F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EB4 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EB9 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009EBE 03                         Map_1514_4E: 	dc.b $3
00009EBF F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
00009EC4 F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
00009EC9 F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
00009ECE 01                         Map_1514_5E: 	dc.b $1
00009ECF F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
00009ED4 01                         Map_1514_64: 	dc.b $1
00009ED5 F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
00009EDA                            	even
00009EDA                            	even
00009EDA                            
00009EDA                            ; ===========================================================================
00009EDA                            ; ---------------------------------------------------------------------------
00009EDA                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
00009EDA                            ; ---------------------------------------------------------------------------
00009EDA                            
00009EDA                            Obj22:					; XREF: Obj_Index
00009EDA 7000                       		moveq	#0,d0
00009EDC 1028 0024                  		move.b	$24(a0),d0
00009EE0 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
00009EE4 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
00009EE8                            ; ===========================================================================
00009EE8 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
00009EEA 0000                       		dc.w Obj22_Action-Obj22_Index
00009EEC 0000                       		dc.w Obj22_Delete-Obj22_Index
00009EEE                            ; ===========================================================================
00009EEE                            
00009EEE                            Obj22_Main:				; XREF: Obj22_Index
00009EEE 5428 0024                  		addq.b	#2,$24(a0)
00009EF2 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
00009EFA 317C 0444 0002             		move.w	#$444,2(a0)
00009F00 117C 0004 0001             		move.b	#4,1(a0)
00009F06 117C 0003 0018             		move.b	#3,$18(a0)
00009F0C 117C 0008 0020             		move.b	#8,$20(a0)
00009F12 117C 0018 0019             		move.b	#$18,$19(a0)
00009F18                            
00009F18                            Obj22_Action:				; XREF: Obj22_Index
00009F18 7000                       		moveq	#0,d0
00009F1A 1028 0025                  		move.b	$25(a0),d0
00009F1E 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009F22 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009F26 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009F2C 6100 0000                  		bsr.w	AnimateSprite
00009F30 6000 0000                  		bra.w	MarkObjGone
00009F34                            ; ===========================================================================
00009F34 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009F36 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009F38                            ; ===========================================================================
00009F38                            
00009F38                            Obj22_Move:				; XREF: Obj22_Index2
00009F38 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009F3C 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009F3E 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009F44 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009F46 5428 0025                  		addq.b	#2,$25(a0)
00009F4A 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009F50 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009F56 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009F5C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F62 6600                       		bne.s	locret_986C	; if not, branch
00009F64 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009F68                            
00009F68                            locret_986C:
00009F68 4E75                       		rts	
00009F6A                            ; ===========================================================================
00009F6A                            
00009F6A                            Obj22_Fire:				; XREF: Obj22_Move
00009F6A 6100 0000                  		bsr.w	SingleObjLoad
00009F6E 6600                       		bne.s	locret_98D0
00009F70 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009F74 3368 0008 0008             		move.w	8(a0),8(a1)
00009F7A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F80 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009F86 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009F8C 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009F92 303C 0018                  		move.w	#$18,d0
00009F96 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009F9C 6600                       		bne.s	loc_98AA	; if not, branch
00009F9E 4440                       		neg.w	d0
00009FA0 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009FA4                            
00009FA4                            loc_98AA:
00009FA4 D169 0008                  		add.w	d0,8(a1)
00009FA8 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009FAE 337C 000E 0032             		move.w	#$E,$32(a1)
00009FB4 2348 003C                  		move.l	a0,$3C(a1)
00009FB8 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009FBE 317C 003B 0032             		move.w	#$3B,$32(a0)
00009FC4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
00009FCA                            
00009FCA                            locret_98D0:
00009FCA 4E75                       		rts	
00009FCC                            ; ===========================================================================
00009FCC                            
00009FCC                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
00009FCC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009FD0 6B00                       		bmi.s	Obj22_ChgDir
00009FD2 6100 0000                  		bsr.w	SpeedToPos
00009FD6 4A28 0034                  		tst.b	$34(a0)
00009FDA 6600                       		bne.s	locret_992A
00009FDC 3038 D008                  		move.w	($FFFFD008).w,d0
00009FE0 9068 0008                  		sub.w	8(a0),d0
00009FE4 6A00                       		bpl.s	Obj22_SetNrSonic
00009FE6 4440                       		neg.w	d0
00009FE8                            
00009FE8                            Obj22_SetNrSonic:
00009FE8 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
00009FEC 6400                       		bcc.s	locret_992A	; if not, branch
00009FEE 4A28 0001                  		tst.b	1(a0)
00009FF2 6A00                       		bpl.s	locret_992A
00009FF4 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
00009FFA 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A000 6000                       		bra.s	Obj22_Stop
0000A002                            ; ===========================================================================
0000A002                            
0000A002                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A002 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A008 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A00E 317C 003B 0032             		move.w	#59,$32(a0)
0000A014                            
0000A014                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A014 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A018 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A01E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A024                            
0000A024                            locret_992A:
0000A024 4E75                       		rts	
0000A026                            ; ===========================================================================
0000A026                            
0000A026                            Obj22_Delete:				; XREF: Obj22_Index
0000A026 6100 0000                  		bsr.w	DeleteObject
0000A02A 4E75                       		rts	
0000A02C                            ; ===========================================================================
0000A02C                            ; ---------------------------------------------------------------------------
0000A02C                            ; Object 23 - missile that Buzz	Bomber throws
0000A02C                            ; ---------------------------------------------------------------------------
0000A02C                            
0000A02C                            Obj23:					; XREF: Obj_Index
0000A02C 7000                       		moveq	#0,d0
0000A02E 1028 0024                  		move.b	$24(a0),d0
0000A032 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A036 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A03A                            ; ===========================================================================
0000A03A 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A03C 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A03E 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A040 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A042 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A044                            ; ===========================================================================
0000A044                            
0000A044                            Obj23_Main:				; XREF: Obj23_Index
0000A044 5368 0032                  		subq.w	#1,$32(a0)
0000A048 6A00                       		bpl.s	Obj23_ChkCancel
0000A04A 5428 0024                  		addq.b	#2,$24(a0)
0000A04E 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A056 317C 2444 0002             		move.w	#$2444,2(a0)
0000A05C 117C 0004 0001             		move.b	#4,1(a0)
0000A062 117C 0003 0018             		move.b	#3,$18(a0)
0000A068 117C 0008 0019             		move.b	#8,$19(a0)
0000A06E 0228 0003 0022             		andi.b	#3,$22(a0)
0000A074 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A078 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A07A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A080 117C 0087 0020             		move.b	#$87,$20(a0)
0000A086 117C 0001 001C             		move.b	#1,$1C(a0)
0000A08C 6000                       		bra.s	Obj23_Animate2
0000A08E                            ; ===========================================================================
0000A08E                            
0000A08E                            Obj23_Animate:				; XREF: Obj23_Index
0000A08E 6100                       		bsr.s	Obj23_ChkCancel
0000A090 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A096 6100 0000                  		bsr.w	AnimateSprite
0000A09A 6000 0000                  		bra.w	DisplaySprite
0000A09E                            ; ---------------------------------------------------------------------------
0000A09E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A09E                            ; destroyed, and if it has, then cancel	the missile
0000A09E                            ; ---------------------------------------------------------------------------
0000A09E                            
0000A09E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A09E                            
0000A09E                            
0000A09E                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A09E 2268 003C                  		movea.l	$3C(a0),a1
0000A0A2 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A0A6 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A0A8 4E75                       		rts	
0000A0AA                            ; End of function Obj23_ChkCancel
0000A0AA                            
0000A0AA                            ; ===========================================================================
0000A0AA                            
0000A0AA                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A0AA 0828 0007 0022             		btst	#7,$22(a0)
0000A0B0 6600                       		bne.s	Obj23_Explode
0000A0B2 117C 0087 0020             		move.b	#$87,$20(a0)
0000A0B8 117C 0001 001C             		move.b	#1,$1C(a0)
0000A0BE 6100 0000                  		bsr.w	SpeedToPos
0000A0C2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A0C8 6100 0000                  		bsr.w	AnimateSprite
0000A0CC 6100 0000                  		bsr.w	DisplaySprite
0000A0D0 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A0D4 0640 00E0                  		addi.w	#$E0,d0
0000A0D8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A0DC 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A0DE 4E75                       		rts	
0000A0E0                            ; ===========================================================================
0000A0E0                            
0000A0E0                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A0E0 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A0E4 117C 0000 0024             		move.b	#0,$24(a0)
0000A0EA 6000 F2D4                  		bra.w	Obj24
0000A0EE                            ; ===========================================================================
0000A0EE                            
0000A0EE                            Obj23_Delete:				; XREF: Obj23_Index
0000A0EE 6100 0000                  		bsr.w	DeleteObject
0000A0F2 4E75                       		rts	
0000A0F4                            ; ===========================================================================
0000A0F4                            
0000A0F4                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A0F4 4A28 0001                  		tst.b	1(a0)
0000A0F8 6AF4                       		bpl.s	Obj23_Delete
0000A0FA 6100 0000                  		bsr.w	SpeedToPos
0000A0FE                            
0000A0FE                            Obj23_Animate2:				; XREF: Obj23_Main
0000A0FE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A104 6100 0000                  		bsr.w	AnimateSprite
0000A108 6100 0000                  		bsr.w	DisplaySprite
0000A10C 4E75                       		rts	
0000A10E                            ; ===========================================================================
0000A10E                            Ani_obj22:
0000A10E                            	include "_anim\obj22.asm"
0000A10E                            ; ---------------------------------------------------------------------------
0000A10E                            ; Animation script - Buzz Bomber enemy
0000A10E                            ; ---------------------------------------------------------------------------
0000A10E 0000                       		dc.w byte_9A1E-Ani_obj22
0000A110 0000                       		dc.w byte_9A22-Ani_obj22
0000A112 0000                       		dc.w byte_9A26-Ani_obj22
0000A114 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A118 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A11C 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A120                            		even
0000A120                            		even
0000A120                            
0000A120                            Ani_obj23:
0000A120                            	include "_anim\obj23.asm"
0000A120                            ; ---------------------------------------------------------------------------
0000A120                            ; Animation script - missile that Buzz Bomber throws
0000A120                            ; ---------------------------------------------------------------------------
0000A120 0000                       		dc.w byte_9A2E-Ani_obj23
0000A122 0000                       		dc.w byte_9A32-Ani_obj23
0000A124 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A128 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A12C                            		even
0000A12C                            		even
0000A12C                            
0000A12C                            ; ---------------------------------------------------------------------------
0000A12C                            ; Sprite mappings - Buzz Bomber	enemy
0000A12C                            ; ---------------------------------------------------------------------------
0000A12C                            Map_obj22:
0000A12C                            	include "_maps\obj22.asm"
0000A12C                            Map_e97a:
0000A12C 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A12E 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A130 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A132 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A134 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A136 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A138 06                         Map_e97a_C: 	dc.b $6
0000A139 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A13E F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A143 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A148 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A14D F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A152 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A157 06                         Map_e97a_2B: 	dc.b $6
0000A158 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A15D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A162 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A167 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A16C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A171 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A176 07                         Map_e97a_4A: 	dc.b $7
0000A177 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000A17C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A181 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A186 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A18B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A190 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A195 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A19A 07                         Map_e97a_6E: 	dc.b $7
0000A19B 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000A1A0 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A1A5 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A1AA 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A1AF 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000A1B4 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000A1B9 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000A1BE 06                         Map_e97a_92: 	dc.b $6
0000A1BF F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1C4 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1C9 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1CE 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1D3 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000A1D8 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000A1DD 04                         Map_e97a_B1: 	dc.b $4
0000A1DE F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000A1E3 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000A1E8 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000A1ED 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000A1F2                            	even
0000A1F2                            	even
0000A1F2                            
0000A1F2                            ; ---------------------------------------------------------------------------
0000A1F2                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1F2                            ; ---------------------------------------------------------------------------
0000A1F2                            Map_obj23:
0000A1F2                            	include "_maps\obj23.asm"
0000A1F2                            ; ---------------------------------------------------------------------------
0000A1F2                            ; Sprite mappings - missile that Buzz Bomber throws
0000A1F2                            ; ---------------------------------------------------------------------------
0000A1F2 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000A1F6 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000A1FA 01                         byte_9B0E:	dc.b 1
0000A1FB F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000A200 01                         byte_9B14:	dc.b 1
0000A201 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000A206 01                         byte_9B1A:	dc.b 1
0000A207 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000A20C 01                         byte_9B20:	dc.b 1
0000A20D F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000A212                            		even
0000A212                            		even
0000A212                            
0000A212                            ; ===========================================================================
0000A212                            ; ---------------------------------------------------------------------------
0000A212                            ; Object 25 - rings
0000A212                            ; ---------------------------------------------------------------------------
0000A212                            
0000A212                            Obj25:					; XREF: Obj_Index
0000A212 7000                       		moveq	#0,d0
0000A214 1028 0024                  		move.b	$24(a0),d0
0000A218 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000A21C 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000A220                            ; ===========================================================================
0000A220 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000A222 0000                       		dc.w Obj25_Animate-Obj25_Index
0000A224 0000                       		dc.w Obj25_Collect-Obj25_Index
0000A226 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000A228 0000                       		dc.w Obj25_Delete-Obj25_Index
0000A22A                            ; ---------------------------------------------------------------------------
0000A22A                            ; Distances between rings (format: horizontal, vertical)
0000A22A                            ; ---------------------------------------------------------------------------
0000A22A 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000A22C 1800                       		dc.b $18, 0		; horizontal normal
0000A22E 2000                       		dc.b $20, 0		; horizontal wide
0000A230 0010                       		dc.b 0,	$10		; vertical tight
0000A232 0018                       		dc.b 0,	$18		; vertical normal
0000A234 0020                       		dc.b 0,	$20		; vertical wide
0000A236 1010                       		dc.b $10, $10		; diagonal
0000A238 1818                       		dc.b $18, $18
0000A23A 2020                       		dc.b $20, $20
0000A23C F010                       		dc.b $F0, $10
0000A23E E818                       		dc.b $E8, $18
0000A240 E020                       		dc.b $E0, $20
0000A242 1008                       		dc.b $10, 8
0000A244 1810                       		dc.b $18, $10
0000A246 F008                       		dc.b $F0, 8
0000A248 E810                       		dc.b $E8, $10
0000A24A                            ; ===========================================================================
0000A24A                            
0000A24A                            Obj25_Main:				; XREF: Obj25_Index
0000A24A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A24E 7000                       		moveq	#0,d0
0000A250 1028 0023                  		move.b	$23(a0),d0
0000A254 45F2 0002                  		lea	2(a2,d0.w),a2
0000A258 1812                       		move.b	(a2),d4
0000A25A 1228 0028                  		move.b	$28(a0),d1
0000A25E 1001                       		move.b	d1,d0
0000A260 0241 0007                  		andi.w	#7,d1
0000A264 0C41 0007                  		cmpi.w	#7,d1
0000A268 6600                       		bne.s	loc_9B80
0000A26A 7206                       		moveq	#6,d1
0000A26C                            
0000A26C                            loc_9B80:
0000A26C 4841                       		swap	d1
0000A26E 323C 0000                  		move.w	#0,d1
0000A272 E808                       		lsr.b	#4,d0
0000A274 D040                       		add.w	d0,d0
0000A276 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000A27A 4885                       		ext.w	d5
0000A27C 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000A280 4886                       		ext.w	d6
0000A282 2248                       		movea.l	a0,a1
0000A284 3428 0008                  		move.w	8(a0),d2
0000A288 3628 000C                  		move.w	$C(a0),d3
0000A28C E20C                       		lsr.b	#1,d4
0000A28E 6500                       		bcs.s	loc_9C02
0000A290 0892 0007                  		bclr	#7,(a2)
0000A294 6000                       		bra.s	loc_9BBA
0000A296                            ; ===========================================================================
0000A296                            
0000A296                            Obj25_MakeRings:
0000A296 4841                       		swap	d1
0000A298 E20C                       		lsr.b	#1,d4
0000A29A 6500                       		bcs.s	loc_9C02
0000A29C 0892 0007                  		bclr	#7,(a2)
0000A2A0 6100 0000                  		bsr.w	SingleObjLoad
0000A2A4 6600                       		bne.s	loc_9C0E
0000A2A6                            
0000A2A6                            loc_9BBA:				; XREF: Obj25_Main
0000A2A6 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000A2AA 5429 0024                  		addq.b	#2,$24(a1)
0000A2AE 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000A2B2 3368 0008 0032             		move.w	8(a0),$32(a1)
0000A2B8 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000A2BC 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A2C4 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A2CA 137C 0004 0001             		move.b	#4,1(a1)
0000A2D0 137C 0002 0018             		move.b	#2,$18(a1)
0000A2D6 137C 0047 0020             		move.b	#$47,$20(a1)
0000A2DC 137C 0008 0019             		move.b	#8,$19(a1)
0000A2E2 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000A2E8 1341 0034                  		move.b	d1,$34(a1)
0000A2EC                            
0000A2EC                            loc_9C02:
0000A2EC 5241                       		addq.w	#1,d1
0000A2EE D445                       		add.w	d5,d2		; add ring spacing value to d2
0000A2F0 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000A2F2 4841                       		swap	d1
0000A2F4 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000A2F8                            
0000A2F8                            loc_9C0E:
0000A2F8 0812 0000                  		btst	#0,(a2)
0000A2FC 6600 0000                  		bne.w	DeleteObject
0000A300                            
0000A300                            Obj25_Animate:				; XREF: Obj25_Index
0000A300 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000A306 6100 0000                  		bsr.w	DisplaySprite
0000A30A 3028 0032                  		move.w	$32(a0),d0
0000A30E 0240 FF80                  		andi.w	#$FF80,d0
0000A312 3238 F700                  		move.w	($FFFFF700).w,d1
0000A316 0441 0080                  		subi.w	#$80,d1
0000A31A 0241 FF80                  		andi.w	#$FF80,d1
0000A31E 9041                       		sub.w	d1,d0
0000A320 0C40 0280                  		cmpi.w	#$280,d0
0000A324 6200                       		bhi.s	Obj25_Delete
0000A326 4E75                       		rts	
0000A328                            ; ===========================================================================
0000A328                            
0000A328                            Obj25_Collect:				; XREF: Obj25_Index
0000A328 5428 0024                  		addq.b	#2,$24(a0)
0000A32C 117C 0000 0020             		move.b	#0,$20(a0)
0000A332 117C 0001 0018             		move.b	#1,$18(a0)
0000A338 6100 0000                  		bsr.w	CollectRing
0000A33C 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A340 7000                       		moveq	#0,d0
0000A342 1028 0023                  		move.b	$23(a0),d0
0000A346 1228 0034                  		move.b	$34(a0),d1
0000A34A 03F2 0002                  		bset	d1,2(a2,d0.w)
0000A34E                            
0000A34E                            Obj25_Sparkle:				; XREF: Obj25_Index
0000A34E 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A354 6100 0000                  		bsr.w	AnimateSprite
0000A358 6000 0000                  		bra.w	DisplaySprite
0000A35C                            ; ===========================================================================
0000A35C                            
0000A35C                            Obj25_Delete:				; XREF: Obj25_Index
0000A35C 6000 0000                  		bra.w	DeleteObject
0000A360                            
0000A360                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A360                            
0000A360                            
0000A360                            CollectRing:				; XREF: Obj25_Collect
0000A360 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000A364 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000A36A 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000A36E 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000A374 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A376 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000A37C 6700                       		beq.s	loc_9CA4
0000A37E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000A384 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000A386 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000A38C 6600                       		bne.s	Obj25_PlaySnd
0000A38E                            
0000A38E                            loc_9CA4:
0000A38E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A392 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A396 303C 0088                  		move.w	#$88,d0		; play extra life music
0000A39A                            
0000A39A                            Obj25_PlaySnd:
0000A39A 4EF9 0000 15D2             		jmp	(PlaySound_Special).l
0000A3A0                            ; End of function CollectRing
0000A3A0                            
0000A3A0                            ; ===========================================================================
0000A3A0                            ; ---------------------------------------------------------------------------
0000A3A0                            ; Object 37 - rings flying out of Sonic	when he's hit
0000A3A0                            ; ---------------------------------------------------------------------------
0000A3A0                            
0000A3A0                            Obj37:					; XREF: Obj_Index
0000A3A0 7000                       		moveq	#0,d0
0000A3A2 1028 0024                  		move.b	$24(a0),d0
0000A3A6 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000A3AA 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000A3AE                            ; ===========================================================================
0000A3AE 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000A3B0 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000A3B2 0000                       		dc.w Obj37_Collect-Obj37_Index
0000A3B4 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000A3B6 0000                       		dc.w Obj37_Delete-Obj37_Index
0000A3B8                            ; ===========================================================================
0000A3B8                            
0000A3B8                            Obj37_CountRings:			; XREF: Obj37_Index
0000A3B8 2248                       		movea.l	a0,a1
0000A3BA 7A00                       		moveq	#0,d5
0000A3BC 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000A3C0 7020                       		moveq	#32,d0
0000A3C2 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000A3C4 6500                       		bcs.s	loc_9CDE	; if not, branch
0000A3C6 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000A3C8                            
0000A3C8                            loc_9CDE:
0000A3C8 5345                       		subq.w	#1,d5
0000A3CA 383C 0288                  		move.w	#$288,d4
0000A3CE 6000                       		bra.s	Obj37_MakeRings
0000A3D0                            ; ===========================================================================
0000A3D0                            
0000A3D0                            Obj37_Loop:
0000A3D0 6100 0000                  		bsr.w	SingleObjLoad
0000A3D4 6600 0000                  		bne.w	Obj37_ResetCounter
0000A3D8                            
0000A3D8                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000A3D8 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000A3DC 5429 0024                  		addq.b	#2,$24(a1)
0000A3E0 137C 0008 0016             		move.b	#8,$16(a1)
0000A3E6 137C 0008 0017             		move.b	#8,$17(a1)
0000A3EC 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3F2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3F8 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000A400 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000A406 137C 0004 0001             		move.b	#4,1(a1)
0000A40C 137C 0003 0018             		move.b	#3,$18(a1)
0000A412 137C 0047 0020             		move.b	#$47,$20(a1)
0000A418 137C 0008 0019             		move.b	#8,$19(a1)
0000A41E 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000A424 4A44                       		tst.w	d4
0000A426 6B00                       		bmi.s	loc_9D62
0000A428 3004                       		move.w	d4,d0
0000A42A 6100 88D2                  		bsr.w	CalcSine
0000A42E 3404                       		move.w	d4,d2
0000A430 E04A                       		lsr.w	#8,d2
0000A432 E560                       		asl.w	d2,d0
0000A434 E561                       		asl.w	d2,d1
0000A436 3400                       		move.w	d0,d2
0000A438 3601                       		move.w	d1,d3
0000A43A 0604 0010                  		addi.b	#$10,d4
0000A43E 6400                       		bcc.s	loc_9D62
0000A440 0444 0080                  		subi.w	#$80,d4
0000A444 6400                       		bcc.s	loc_9D62
0000A446 383C 0288                  		move.w	#$288,d4
0000A44A                            
0000A44A                            loc_9D62:
0000A44A 3342 0010                  		move.w	d2,$10(a1)
0000A44E 3343 0012                  		move.w	d3,$12(a1)
0000A452 4442                       		neg.w	d2
0000A454 4444                       		neg.w	d4
0000A456 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000A45A                            
0000A45A                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000A45A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000A460 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000A466 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000A46C 303C 00C6                  		move.w	#$C6,d0
0000A470 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000A476                            
0000A476                            Obj37_Bounce:				; XREF: Obj37_Index
0000A476 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000A47C 6100 0000                  		bsr.w	SpeedToPos
0000A480 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A486 6B00                       		bmi.s	Obj37_ChkDel
0000A488 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000A48C D007                       		add.b	d7,d0
0000A48E 0200 0003                  		andi.b	#3,d0
0000A492 6600                       		bne.s	Obj37_ChkDel
0000A494 4EB9 0000 0000             		jsr	ObjHitFloor
0000A49A 4A41                       		tst.w	d1
0000A49C 6A00                       		bpl.s	Obj37_ChkDel
0000A49E D368 000C                  		add.w	d1,$C(a0)
0000A4A2 3028 0012                  		move.w	$12(a0),d0
0000A4A6 E440                       		asr.w	#2,d0
0000A4A8 9168 0012                  		sub.w	d0,$12(a0)
0000A4AC 4468 0012                  		neg.w	$12(a0)
0000A4B0                            
0000A4B0                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000A4B0 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000A4B4 6700                       		beq.s	Obj37_Delete
0000A4B6 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A4BA 0640 00E0                  		addi.w	#$E0,d0
0000A4BE B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000A4C2 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000A4C4 6000 0000                  		bra.w	DisplaySprite
0000A4C8                            ; ===========================================================================
0000A4C8                            
0000A4C8                            Obj37_Collect:				; XREF: Obj37_Index
0000A4C8 5428 0024                  		addq.b	#2,$24(a0)
0000A4CC 117C 0000 0020             		move.b	#0,$20(a0)
0000A4D2 117C 0001 0018             		move.b	#1,$18(a0)
0000A4D8 6100 FE86                  		bsr.w	CollectRing
0000A4DC                            
0000A4DC                            Obj37_Sparkle:				; XREF: Obj37_Index
0000A4DC 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000A4E2 6100 0000                  		bsr.w	AnimateSprite
0000A4E6 6000 0000                  		bra.w	DisplaySprite
0000A4EA                            ; ===========================================================================
0000A4EA                            
0000A4EA                            Obj37_Delete:				; XREF: Obj37_Index
0000A4EA 6000 0000                  		bra.w	DeleteObject
0000A4EE                            ; ===========================================================================
0000A4EE                            ; ---------------------------------------------------------------------------
0000A4EE                            ; Object 4B - giant ring for entry to special stage
0000A4EE                            ; ---------------------------------------------------------------------------
0000A4EE                            
0000A4EE                            Obj4B:					; XREF: Obj_Index
0000A4EE 7000                       		moveq	#0,d0
0000A4F0 1028 0024                  		move.b	$24(a0),d0
0000A4F4 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000A4F8 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000A4FC                            ; ===========================================================================
0000A4FC 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000A4FE 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000A500 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000A502 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000A504                            ; ===========================================================================
0000A504                            
0000A504                            Obj4B_Main:				; XREF: Obj4B_Index
0000A504 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000A50C 317C 2400 0002             		move.w	#$2400,2(a0)
0000A512 0028 0004 0001             		ori.b	#4,1(a0)
0000A518 117C 0040 0019             		move.b	#$40,$19(a0)
0000A51E 4A28 0001                  		tst.b	1(a0)
0000A522 6A00                       		bpl.s	Obj4B_Animate
0000A524 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000A52A 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000A52E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000A534 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000A536 4E75                       		rts	
0000A538                            ; ===========================================================================
0000A538                            
0000A538                            Obj4B_Okay:				; XREF: Obj4B_Main
0000A538 5428 0024                  		addq.b	#2,$24(a0)
0000A53C 117C 0002 0018             		move.b	#2,$18(a0)
0000A542 117C 0052 0020             		move.b	#$52,$20(a0)
0000A548 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000A54E                            
0000A54E                            Obj4B_Animate:				; XREF: Obj4B_Index
0000A54E 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000A554 3028 0008                  		move.w	8(a0),d0
0000A558 0240 FF80                  		andi.w	#$FF80,d0
0000A55C 3238 F700                  		move.w	($FFFFF700).w,d1
0000A560 0441 0080                  		subi.w	#$80,d1
0000A564 0241 FF80                  		andi.w	#$FF80,d1
0000A568 9041                       		sub.w	d1,d0
0000A56A 0C40 0280                  		cmpi.w	#$280,d0
0000A56E 6200 0000                  		bhi.w	DeleteObject
0000A572 6000 0000                  		bra.w	DisplaySprite
0000A576                            ; ===========================================================================
0000A576                            
0000A576                            Obj4B_Collect:				; XREF: Obj4B_Index
0000A576 5528 0024                  		subq.b	#2,$24(a0)
0000A57A 117C 0000 0020             		move.b	#0,$20(a0)
0000A580 6100 0000                  		bsr.w	SingleObjLoad
0000A584 6600 0000                  		bne.w	Obj4B_PlaySnd
0000A588 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000A58C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A592 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A598 2348 003C                  		move.l	a0,$3C(a1)
0000A59C 3038 D008                  		move.w	($FFFFD008).w,d0
0000A5A0 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000A5A4 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000A5A6 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000A5AC                            
0000A5AC                            Obj4B_PlaySnd:
0000A5AC 303C 00C3                  		move.w	#$C3,d0
0000A5B0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000A5B6 6096                       		bra.s	Obj4B_Animate
0000A5B8                            ; ===========================================================================
0000A5B8                            
0000A5B8                            Obj4B_Delete:				; XREF: Obj4B_Index
0000A5B8 6000 0000                  		bra.w	DeleteObject
0000A5BC                            ; ===========================================================================
0000A5BC                            ; ---------------------------------------------------------------------------
0000A5BC                            ; Object 7C - flash effect when	you collect the	giant ring
0000A5BC                            ; ---------------------------------------------------------------------------
0000A5BC                            
0000A5BC                            Obj7C:					; XREF: Obj_Index
0000A5BC 7000                       		moveq	#0,d0
0000A5BE 1028 0024                  		move.b	$24(a0),d0
0000A5C2 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000A5C6 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000A5CA                            ; ===========================================================================
0000A5CA 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000A5CC 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000A5CE 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000A5D0                            ; ===========================================================================
0000A5D0                            
0000A5D0                            Obj7C_Main:				; XREF: Obj7C_Index
0000A5D0 5428 0024                  		addq.b	#2,$24(a0)
0000A5D4 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000A5DC 317C 2462 0002             		move.w	#$2462,2(a0)
0000A5E2 0028 0004 0001             		ori.b	#4,1(a0)
0000A5E8 117C 0000 0018             		move.b	#0,$18(a0)
0000A5EE 117C 0020 0019             		move.b	#$20,$19(a0)
0000A5F4 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000A5FA                            
0000A5FA                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000A5FA 6100                       		bsr.s	Obj7C_Collect
0000A5FC 3028 0008                  		move.w	8(a0),d0
0000A600 0240 FF80                  		andi.w	#$FF80,d0
0000A604 3238 F700                  		move.w	($FFFFF700).w,d1
0000A608 0441 0080                  		subi.w	#$80,d1
0000A60C 0241 FF80                  		andi.w	#$FF80,d1
0000A610 9041                       		sub.w	d1,d0
0000A612 0C40 0280                  		cmpi.w	#$280,d0
0000A616 6200 0000                  		bhi.w	DeleteObject
0000A61A 6000 0000                  		bra.w	DisplaySprite
0000A61E                            
0000A61E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A61E                            
0000A61E                            
0000A61E                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A61E 5328 001E                  		subq.b	#1,$1E(a0)
0000A622 6A00                       		bpl.s	locret_9F76
0000A624 117C 0001 001E             		move.b	#1,$1E(a0)
0000A62A 5228 001A                  		addq.b	#1,$1A(a0)
0000A62E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A634 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A636 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A63C 6600                       		bne.s	locret_9F76	; if not, branch
0000A63E 2268 003C                  		movea.l	$3C(a0),a1
0000A642 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A648 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A64E 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A654 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A658 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A65C                            
0000A65C                            locret_9F76:
0000A65C 4E75                       		rts	
0000A65E                            ; ===========================================================================
0000A65E                            
0000A65E                            Obj7C_End:				; XREF: Obj7C_Collect
0000A65E 5428 0024                  		addq.b	#2,$24(a0)
0000A662 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A668 588F                       		addq.l	#4,sp
0000A66A 4E75                       		rts	
0000A66C                            ; End of function Obj7C_Collect
0000A66C                            
0000A66C                            ; ===========================================================================
0000A66C                            
0000A66C                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A66C 6000 0000                  		bra.w	DeleteObject
0000A670                            ; ===========================================================================
0000A670                            Ani_obj25:
0000A670                            	include "_anim\obj25.asm"
0000A670                            ; ---------------------------------------------------------------------------
0000A670                            ; Animation script - ring
0000A670                            ; ---------------------------------------------------------------------------
0000A670 0000                       		dc.w byte_9F8C-Ani_obj25
0000A672 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A678                            		even
0000A678                            		even
0000A678                            
0000A678                            ; ---------------------------------------------------------------------------
0000A678                            ; Sprite mappings - rings
0000A678                            ; ---------------------------------------------------------------------------
0000A678                            Map_obj25:
0000A678                            	include "_maps\obj25.asm"
0000A678                            ; ---------------------------------------------------------------------------
0000A678                            ; Sprite mappings - rings
0000A678                            ; ---------------------------------------------------------------------------
0000A678 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A67C 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A680 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A684 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A688 01                         byte_9FA2:	dc.b 1
0000A689 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A68E 01                         byte_9FA8:	dc.b 1
0000A68F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A694 01                         byte_9FAE:	dc.b 1
0000A695 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A69A 01                         byte_9FB4:	dc.b 1
0000A69B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A6A0 01                         byte_9FBA:	dc.b 1
0000A6A1 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A6A6 01                         byte_9FC0:	dc.b 1
0000A6A7 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A6AC 01                         byte_9FC6:	dc.b 1
0000A6AD F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A6B2 01                         byte_9FCC:	dc.b 1
0000A6B3 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A6B8                            		even
0000A6B8                            		even
0000A6B8                            
0000A6B8                            ; ---------------------------------------------------------------------------
0000A6B8                            ; Sprite mappings - giant ring
0000A6B8                            ; ---------------------------------------------------------------------------
0000A6B8                            Map_obj4B:
0000A6B8                            	include "_maps\obj4B.asm"
0000A6B8                            ; ---------------------------------------------------------------------------
0000A6B8                            ; Sprite mappings - giant ring
0000A6B8                            ; ---------------------------------------------------------------------------
0000A6B8 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A6BC 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A6C0 0A                         byte_9FDA:	dc.b $A
0000A6C1 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A6C6 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A6CB E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A6D0 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A6D5 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A6DA F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A6DF 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A6E4 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A6E9 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A6EE 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A6F3 08                         byte_A00D:	dc.b 8
0000A6F4 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A6F9 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A6FE E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A703 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A708 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A70D 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A712 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A717 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A71C 04                         byte_A036:	dc.b 4
0000A71D E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A722 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A727 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A72C 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A731 08                         byte_A04B:	dc.b 8
0000A732 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A737 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A73C E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A741 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A746 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A74B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A750 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A755 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A75A                            		even
0000A75A                            		even
0000A75A                            
0000A75A                            ; ---------------------------------------------------------------------------
0000A75A                            ; Sprite mappings - flash effect when you collect the giant ring
0000A75A                            ; ---------------------------------------------------------------------------
0000A75A                            Map_obj7C:
0000A75A                            	include "_maps\obj7C.asm"
0000A75A                            ; ---------------------------------------------------------------------------
0000A75A                            ; Sprite mappings - flash effect when you collect the giant ring
0000A75A                            ; ---------------------------------------------------------------------------
0000A75A 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A75E 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A762 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A766 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A76A 02                         byte_A084:	dc.b 2
0000A76B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A770 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A775 04                         byte_A08F:	dc.b 4
0000A776 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A77B E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A780 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A785 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A78A 04                         byte_A0A4:	dc.b 4
0000A78B E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A790 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A795 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A79A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A79F 04                         byte_A0B9:	dc.b 4
0000A7A0 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A7A5 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A7AA 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A7AF 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A7B4 04                         byte_A0CE:	dc.b 4
0000A7B5 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A7BA E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A7BF 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A7C4 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A7C9 04                         byte_A0E3:	dc.b 4
0000A7CA E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A7CF E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A7D4 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A7D9 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A7DE 02                         byte_A0F8:	dc.b 2
0000A7DF E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A7E4 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A7E9 04                         byte_A103:	dc.b 4
0000A7EA E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A7EF E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A7F4 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A7F9 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A7FE                            		even
0000A7FE                            		even
0000A7FE                            
0000A7FE                            ; ===========================================================================
0000A7FE                            ; ---------------------------------------------------------------------------
0000A7FE                            ; Object 26 - monitors
0000A7FE                            ; ---------------------------------------------------------------------------
0000A7FE                            
0000A7FE                            Obj26:					; XREF: Obj_Index
0000A7FE 7000                       		moveq	#0,d0
0000A800 1028 0024                  		move.b	$24(a0),d0
0000A804 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A808 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A80C                            ; ===========================================================================
0000A80C 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A80E 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A810 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A812 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A814 0000                       		dc.w Obj26_Display-Obj26_Index
0000A816                            ; ===========================================================================
0000A816                            
0000A816                            Obj26_Main:				; XREF: Obj26_Index
0000A816 5428 0024                  		addq.b	#2,$24(a0)
0000A81A 117C 000E 0016             		move.b	#$E,$16(a0)
0000A820 117C 000E 0017             		move.b	#$E,$17(a0)
0000A826 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A82E 317C 0680 0002             		move.w	#$680,2(a0)
0000A834 117C 0004 0001             		move.b	#4,1(a0)
0000A83A 117C 0003 0018             		move.b	#3,$18(a0)
0000A840 117C 000F 0019             		move.b	#$F,$19(a0)
0000A846 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A84A 7000                       		moveq	#0,d0
0000A84C 1028 0023                  		move.b	$23(a0),d0
0000A850 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A856 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A85C 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A85E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A864 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A86A 4E75                       		rts	
0000A86C                            ; ===========================================================================
0000A86C                            
0000A86C                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A86C 117C 0046 0020             		move.b	#$46,$20(a0)
0000A872 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A878                            
0000A878                            Obj26_Solid:				; XREF: Obj26_Index
0000A878 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A87C 6700                       		beq.s	loc_A1EC	; if not, branch
0000A87E 5500                       		subq.b	#2,d0
0000A880 6600                       		bne.s	Obj26_Fall
0000A882 7200                       		moveq	#0,d1
0000A884 1228 0019                  		move.b	$19(a0),d1
0000A888 0641 000B                  		addi.w	#$B,d1
0000A88C 6100 D380                  		bsr.w	ExitPlatform
0000A890 0829 0003 0022             		btst	#3,$22(a1)
0000A896 6600 0000                  		bne.w	loc_A1BC
0000A89A 4228 0025                  		clr.b	$25(a0)
0000A89E 6000 0000                  		bra.w	Obj26_Animate
0000A8A2                            ; ===========================================================================
0000A8A2                            
0000A8A2                            loc_A1BC:				; XREF: Obj26_Solid
0000A8A2 363C 0010                  		move.w	#$10,d3
0000A8A6 3428 0008                  		move.w	8(a0),d2
0000A8AA 6100 D8C0                  		bsr.w	MvSonicOnPtfm
0000A8AE 6000 0000                  		bra.w	Obj26_Animate
0000A8B2                            ; ===========================================================================
0000A8B2                            
0000A8B2                            Obj26_Fall:				; XREF: Obj26_Solid
0000A8B2 6100 0000                  		bsr.w	ObjectFall
0000A8B6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A8BC 4A41                       		tst.w	d1
0000A8BE 6A00 0000                  		bpl.w	Obj26_Animate
0000A8C2 D368 000C                  		add.w	d1,$C(a0)
0000A8C6 4268 0012                  		clr.w	$12(a0)
0000A8CA 4228 0025                  		clr.b	$25(a0)
0000A8CE 6000 0000                  		bra.w	Obj26_Animate
0000A8D2                            ; ===========================================================================
0000A8D2                            
0000A8D2                            loc_A1EC:				; XREF: Obj26_Solid
0000A8D2 323C 001A                  		move.w	#$1A,d1
0000A8D6 343C 000F                  		move.w	#$F,d2
0000A8DA 6100 0000                  		bsr.w	Obj26_SolidSides
0000A8DE 6700 0000                  		beq.w	loc_A25C
0000A8E2 4A69 0012                  		tst.w	$12(a1)
0000A8E6 6B00                       		bmi.s	loc_A20A
0000A8E8 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A8EE 6700                       		beq.s	loc_A25C	; if yes, branch
0000A8F0                            
0000A8F0                            loc_A20A:
0000A8F0 4A41                       		tst.w	d1
0000A8F2 6A00                       		bpl.s	loc_A220
0000A8F4 9769 000C                  		sub.w	d3,$C(a1)
0000A8F8 6100 D202                  		bsr.w	loc_74AE
0000A8FC 117C 0002 0025             		move.b	#2,$25(a0)
0000A902 6000 0000                  		bra.w	Obj26_Animate
0000A906                            ; ===========================================================================
0000A906                            
0000A906                            loc_A220:
0000A906 4A40                       		tst.w	d0
0000A908 6700 0000                  		beq.w	loc_A246
0000A90C 6B00                       		bmi.s	loc_A230
0000A90E 4A69 0010                  		tst.w	$10(a1)
0000A912 6B00                       		bmi.s	loc_A246
0000A914 6000                       		bra.s	loc_A236
0000A916                            ; ===========================================================================
0000A916                            
0000A916                            loc_A230:
0000A916 4A69 0010                  		tst.w	$10(a1)
0000A91A 6A00                       		bpl.s	loc_A246
0000A91C                            
0000A91C                            loc_A236:
0000A91C 9169 0008                  		sub.w	d0,8(a1)
0000A920 337C 0000 0014             		move.w	#0,$14(a1)
0000A926 337C 0000 0010             		move.w	#0,$10(a1)
0000A92C                            
0000A92C                            loc_A246:
0000A92C 0829 0001 0022             		btst	#1,$22(a1)
0000A932 6600                       		bne.s	loc_A26A
0000A934 08E9 0005 0022             		bset	#5,$22(a1)
0000A93A 08E8 0005 0022             		bset	#5,$22(a0)
0000A940 6000                       		bra.s	Obj26_Animate
0000A942                            ; ===========================================================================
0000A942                            
0000A942                            loc_A25C:
0000A942 0828 0005 0022             		btst	#5,$22(a0)
0000A948 6700                       		beq.s	Obj26_Animate
0000A94A 337C 0001 001C             		move.w	#1,$1C(a1)
0000A950                            
0000A950                            loc_A26A:
0000A950 08A8 0005 0022             		bclr	#5,$22(a0)
0000A956 08A9 0005 0022             		bclr	#5,$22(a1)
0000A95C                            
0000A95C                            Obj26_Animate:				; XREF: Obj26_Index
0000A95C 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A962 6100 0000                  		bsr.w	AnimateSprite
0000A966                            
0000A966                            Obj26_Display:				; XREF: Obj26_Index
0000A966 6100 0000                  		bsr.w	DisplaySprite
0000A96A 3028 0008                  		move.w	8(a0),d0
0000A96E 0240 FF80                  		andi.w	#$FF80,d0
0000A972 3238 F700                  		move.w	($FFFFF700).w,d1
0000A976 0441 0080                  		subi.w	#$80,d1
0000A97A 0241 FF80                  		andi.w	#$FF80,d1
0000A97E 9041                       		sub.w	d1,d0
0000A980 0C40 0280                  		cmpi.w	#$280,d0
0000A984 6200 0000                  		bhi.w	DeleteObject
0000A988 4E75                       		rts	
0000A98A                            ; ===========================================================================
0000A98A                            
0000A98A                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A98A 5428 0024                  		addq.b	#2,$24(a0)
0000A98E 117C 0000 0020             		move.b	#0,$20(a0)
0000A994 6100 0000                  		bsr.w	SingleObjLoad
0000A998 6600                       		bne.s	Obj26_Explode
0000A99A 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A99E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9AA 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A9B0 7400                       		moveq	#0,d2	; GMZ
0000A9B2 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000A9B4                            
0000A9B4                            Obj26_Explode:
0000A9B4 6100 0000                  		bsr.w	SingleObjLoad
0000A9B8 6600                       		bne.s	Obj26_SetBroken
0000A9BA 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000A9BE 5429 0024                  		addq.b	#2,$24(a1)
0000A9C2 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000A9C6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A9CC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A9D2                            
0000A9D2                            Obj26_NextExplosion:
0000A9D2 5802                       		addq.b	#4,d2
0000A9D4 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000A9D8                            
0000A9D8                            Obj26_SetBroken:
0000A9D8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A9DC 7000                       		moveq	#0,d0
0000A9DE 1028 0023                  		move.b	$23(a0),d0
0000A9E2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A9E8 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A9EE 6000 0000                  		bra.w	DisplaySprite
0000A9F2                            ; ===========================================================================
0000A9F2                            ; ---------------------------------------------------------------------------
0000A9F2                            ; Object 2E - contents of monitors
0000A9F2                            ; ---------------------------------------------------------------------------
0000A9F2                            
0000A9F2                            Obj2E:					; XREF: Obj_Index
0000A9F2 7000                       		moveq	#0,d0
0000A9F4 1028 0024                  		move.b	$24(a0),d0
0000A9F8 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A9FC 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000AA00 6000 0000                  		bra.w	DisplaySprite
0000AA04                            ; ===========================================================================
0000AA04 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000AA06 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000AA08 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000AA0A                            ; ===========================================================================
0000AA0A                            
0000AA0A                            Obj2E_Main:				; XREF: Obj2E_Index
0000AA0A 5428 0024                  		addq.b	#2,$24(a0)
0000AA0E 317C 0680 0002             		move.w	#$680,2(a0)
0000AA14 117C 0024 0001             		move.b	#$24,1(a0)
0000AA1A 117C 0003 0018             		move.b	#3,$18(a0)
0000AA20 117C 0008 0019             		move.b	#8,$19(a0)
0000AA26 317C FD00 0012             		move.w	#-$300,$12(a0)
0000AA2C 7000                       		moveq	#0,d0
0000AA2E 1028 001C                  		move.b	$1C(a0),d0
0000AA32 5400                       		addq.b	#2,d0
0000AA34 1140 001A                  		move.b	d0,$1A(a0)
0000AA38 227C 0000 0000             		movea.l	#Map_obj26,a1
0000AA3E D000                       		add.b	d0,d0
0000AA40 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000AA44 5249                       		addq.w	#1,a1
0000AA46 2149 0004                  		move.l	a1,4(a0)
0000AA4A                            
0000AA4A                            Obj2E_Move:				; XREF: Obj2E_Index
0000AA4A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000AA4E 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000AA52 6100 0000                  		bsr.w	SpeedToPos
0000AA56 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000AA5C 4E75                       		rts	
0000AA5E                            ; ===========================================================================
0000AA5E                            
0000AA5E                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000AA5E 5428 0024                  		addq.b	#2,$24(a0)
0000AA62 317C 001D 001E             		move.w	#29,$1E(a0)
0000AA68 1028 001C                  		move.b	$1C(a0),d0
0000AA6C 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000AA70 6600                       		bne.s	Obj2E_ChkSonic
0000AA72 4E75                       		rts			; Eggman monitor does nothing
0000AA74                            ; ===========================================================================
0000AA74                            
0000AA74                            Obj2E_ChkSonic:
0000AA74 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000AA78 6600                       		bne.s	Obj2E_ChkShoes
0000AA7A                            
0000AA7A                            ExtraLife:
0000AA7A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AA7E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AA82 303C 0088                  		move.w	#$88,d0
0000AA86 4EF9 0000 15CC             		jmp	(PlaySound).l	; play extra life music
0000AA8C                            ; ===========================================================================
0000AA8C                            
0000AA8C                            Obj2E_ChkShoes:
0000AA8C 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000AA90 6600                       		bne.s	Obj2E_ChkShield
0000AA92 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000AA98 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000AA9E 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000AAA4 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000AAAA 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000AAB0 303C 00E2                  		move.w	#$E2,d0
0000AAB4 4EF9 0000 15CC             		jmp	(PlaySound).l	; Speed	up the music
0000AABA                            ; ===========================================================================
0000AABA                            
0000AABA                            Obj2E_ChkShield:
0000AABA 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000AABE 6600                       		bne.s	Obj2E_ChkInvinc
0000AAC0 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000AAC6 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000AACC 303C 00AF                  		move.w	#$AF,d0
0000AAD0 4EF9 0000 15CC             		jmp	(PlaySound).l	; play shield sound
0000AAD6                            ; ===========================================================================
0000AAD6                            
0000AAD6                            Obj2E_ChkInvinc:
0000AAD6 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000AADA 6600                       		bne.s	Obj2E_ChkRings
0000AADC 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000AAE2 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000AAE8 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000AAEE 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000AAF4 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000AAFA 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000AB00 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000AB06 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000AB0C 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000AB12 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000AB18 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000AB1C 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000AB1E 303C 0087                  		move.w	#$87,d0
0000AB22 4EF9 0000 15CC             		jmp	(PlaySound).l	; play invincibility music
0000AB28                            ; ===========================================================================
0000AB28                            
0000AB28                            Obj2E_NoMusic:
0000AB28 4E75                       		rts	
0000AB2A                            ; ===========================================================================
0000AB2A                            
0000AB2A                            Obj2E_ChkRings:
0000AB2A 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000AB2E 6600                       		bne.s	Obj2E_ChkS
0000AB30 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000AB36 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000AB3C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000AB42 6500                       		bcs.s	Obj2E_RingSound
0000AB44 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000AB4A 6700 FF2E                  		beq.w	ExtraLife
0000AB4E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000AB54 6500                       		bcs.s	Obj2E_RingSound
0000AB56 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000AB5C 6700 FF1C                  		beq.w	ExtraLife
0000AB60                            
0000AB60                            Obj2E_RingSound:
0000AB60 303C 00B5                  		move.w	#$B5,d0
0000AB64 4EF9 0000 15CC             		jmp	(PlaySound).l	; play ring sound
0000AB6A                            ; ===========================================================================
0000AB6A                            
0000AB6A                            Obj2E_ChkS:
0000AB6A 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000AB6E 6600                       		bne.s	Obj2E_ChkEnd
0000AB70                            		; nop	
0000AB70 7201                       		moveq	#1,d1
0000AB72 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000AB76                            
0000AB76                            Obj2E_ChkEnd:
0000AB76 4E75                       		rts			; 'S' and goggles monitors do nothing
0000AB78                            ; ===========================================================================
0000AB78                            
0000AB78                            Obj2E_Delete:				; XREF: Obj2E_Index
0000AB78 5368 001E                  		subq.w	#1,$1E(a0)
0000AB7C 6B00 0000                  		bmi.w	DeleteObject
0000AB80 4E75                       		rts	
0000AB82                            ; ---------------------------------------------------------------------------
0000AB82                            ; Subroutine to	make the sides of a monitor solid
0000AB82                            ; ---------------------------------------------------------------------------
0000AB82                            
0000AB82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AB82                            
0000AB82                            
0000AB82                            Obj26_SolidSides:			; XREF: loc_A1EC
0000AB82 43F8 D000                  		lea	($FFFFD000).w,a1
0000AB86 3029 0008                  		move.w	8(a1),d0
0000AB8A 9068 0008                  		sub.w	8(a0),d0
0000AB8E D041                       		add.w	d1,d0
0000AB90 6B00                       		bmi.s	loc_A4E6
0000AB92 3601                       		move.w	d1,d3
0000AB94 D643                       		add.w	d3,d3
0000AB96 B043                       		cmp.w	d3,d0
0000AB98 6200                       		bhi.s	loc_A4E6
0000AB9A 1629 0016                  		move.b	$16(a1),d3
0000AB9E 4883                       		ext.w	d3
0000ABA0 D443                       		add.w	d3,d2
0000ABA2 3629 000C                  		move.w	$C(a1),d3
0000ABA6 9668 000C                  		sub.w	$C(a0),d3
0000ABAA D642                       		add.w	d2,d3
0000ABAC 6B00                       		bmi.s	loc_A4E6
0000ABAE D442                       		add.w	d2,d2
0000ABB0 B642                       		cmp.w	d2,d3
0000ABB2 6400                       		bcc.s	loc_A4E6
0000ABB4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000ABB8 6B00                       		bmi.s	loc_A4E6
0000ABBA 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000ABC0 6400                       		bcc.s	loc_A4E6
0000ABC2 4A78 FE08                  		tst.w	($FFFFFE08).w
0000ABC6 6600                       		bne.s	loc_A4E6
0000ABC8 B240                       		cmp.w	d0,d1
0000ABCA 6400                       		bcc.s	loc_A4DC
0000ABCC D241                       		add.w	d1,d1
0000ABCE 9041                       		sub.w	d1,d0
0000ABD0                            
0000ABD0                            loc_A4DC:
0000ABD0 0C43 0010                  		cmpi.w	#$10,d3
0000ABD4 6500                       		bcs.s	loc_A4EA
0000ABD6                            
0000ABD6                            loc_A4E2:
0000ABD6 7201                       		moveq	#1,d1
0000ABD8 4E75                       		rts	
0000ABDA                            ; ===========================================================================
0000ABDA                            
0000ABDA                            loc_A4E6:
0000ABDA 7200                       		moveq	#0,d1
0000ABDC 4E75                       		rts	
0000ABDE                            ; ===========================================================================
0000ABDE                            
0000ABDE                            loc_A4EA:
0000ABDE 7200                       		moveq	#0,d1
0000ABE0 1228 0019                  		move.b	$19(a0),d1
0000ABE4 5841                       		addq.w	#4,d1
0000ABE6 3401                       		move.w	d1,d2
0000ABE8 D442                       		add.w	d2,d2
0000ABEA D269 0008                  		add.w	8(a1),d1
0000ABEE 9268 0008                  		sub.w	8(a0),d1
0000ABF2 6BE2                       		bmi.s	loc_A4E2
0000ABF4 B242                       		cmp.w	d2,d1
0000ABF6 64DE                       		bcc.s	loc_A4E2
0000ABF8 72FF                       		moveq	#-1,d1
0000ABFA 4E75                       		rts	
0000ABFC                            ; End of function Obj26_SolidSides
0000ABFC                            
0000ABFC                            ; ===========================================================================
0000ABFC                            Ani_obj26:
0000ABFC                            	include "_anim\obj26.asm"
0000ABFC                            ; ---------------------------------------------------------------------------
0000ABFC                            ; Animation script - monitors
0000ABFC                            ; ---------------------------------------------------------------------------
0000ABFC 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000AC02 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000AC08 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000AC0E 0000                       		dc.w byte_A582-Ani_obj26
0000AC10 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000AC16 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000AC22 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000AC2E 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000AC3A 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000AC46 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000AC52 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000AC5E 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000AC6A 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000AC76 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000AC7E                            		even
0000AC7E                            		even
0000AC7E                            
0000AC7E                            ; ---------------------------------------------------------------------------
0000AC7E                            ; Sprite mappings - monitors
0000AC7E                            ; ---------------------------------------------------------------------------
0000AC7E                            Map_obj26:
0000AC7E                            	include "_maps\obj26.asm"
0000AC7E                            ; ================================================================================
0000AC7E                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000AC7E                            ; ================================================================================
0000AC7E                            
0000AC7E                            DATAY1U343IF3L:
0000AC7E 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000AC82 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000AC86 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000AC8A 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000AC8E 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000AC92 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000AC96 05                         DATAY1U343IF3L_0: dc.b $5
0000AC97 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AC9C 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACA1 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACA6 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACAB 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACB0 06                         DATAY1U343IF3L_1: dc.b $6
0000ACB1 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000ACB6 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACBB 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACC0 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACC5 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACCA 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACCF 05                         DATAY1U343IF3L_2: dc.b $5
0000ACD0 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACD5 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACDA E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACDF 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACE4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ACE9 05                         DATAY1U343IF3L_3: dc.b $5
0000ACEA E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ACEF 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ACF4 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ACF9 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ACFE 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD03 06                         DATAY1U343IF3L_4: dc.b $6
0000AD04 F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000AD09 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD0E 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD13 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD18 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD1D 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD22 06                         DATAY1U343IF3L_5: dc.b $6
0000AD23 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000AD28 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD2D 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD32 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD37 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD3C 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD41 06                         DATAY1U343IF3L_6: dc.b $6
0000AD42 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000AD47 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD4C 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD51 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD56 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD5B 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD60 06                         DATAY1U343IF3L_7: dc.b $6
0000AD61 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000AD66 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD6B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD70 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD75 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD7A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD7F 06                         DATAY1U343IF3L_8: dc.b $6
0000AD80 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000AD85 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000AD8A 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000AD8F E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000AD94 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000AD99 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000AD9E 06                         DATAY1U343IF3L_9: dc.b $6
0000AD9F F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000ADA4 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ADA9 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADAE E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADB3 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADB8 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADBD 05                         DATAY1U343IF3L_A: dc.b $5
0000ADBE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000ADC3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000ADC8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000ADCD 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000ADD2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000ADD7 01                         DATAY1U343IF3L_B: dc.b $1
0000ADD8 FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000ADDE 00                         	even
0000ADDE 00                         	even
0000ADDE                            
0000ADDE                            ; ===========================================================================
0000ADDE                            ; ---------------------------------------------------------------------------
0000ADDE                            ; Object 0E - Sonic on the title screen
0000ADDE                            ; ---------------------------------------------------------------------------
0000ADDE                            
0000ADDE                            Obj0E:					; XREF: Obj_Index
0000ADDE 7000                       		moveq	#0,d0
0000ADE0 1028 0024                  		move.b	$24(a0),d0
0000ADE4 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000ADE8 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000ADEC                            ; ===========================================================================
0000ADEC 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000ADEE 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000ADF0 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000ADF2 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000ADF4                            ; ===========================================================================
0000ADF4                            
0000ADF4                            Obj0E_Main:				; XREF: Obj0E_Index
0000ADF4 5428 0024                  		addq.b	#2,$24(a0)
0000ADF8 317C 00F0 0008             		move.w	#$F0,8(a0)
0000ADFE 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000AE04 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000AE0C 317C 2300 0002             		move.w	#$2300,2(a0)
0000AE12 117C 0001 0018             		move.b	#1,$18(a0)
0000AE18 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000AE1E 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE24 6100 0000                  		bsr.w	AnimateSprite
0000AE28                            
0000AE28                            Obj0E_Delay:				; XREF: Obj0E_Index
0000AE28 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000AE2C 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000AE2E 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000AE32 6000 0000                  		bra.w	DisplaySprite
0000AE36                            ; ===========================================================================
0000AE36                            
0000AE36                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000AE36 4E75                       		rts	
0000AE38                            ; ===========================================================================
0000AE38                            
0000AE38                            Obj0E_Move:				; XREF: Obj0E_Index
0000AE38 5168 000A                  		subq.w	#8,$A(a0)
0000AE3C 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000AE42 6600                       		bne.s	Obj0E_Display
0000AE44 5428 0024                  		addq.b	#2,$24(a0)
0000AE48                            
0000AE48                            Obj0E_Display:
0000AE48 6000 0000                  		bra.w	DisplaySprite
0000AE4C                            ; ===========================================================================
0000AE4C 4E75                       		rts	
0000AE4E                            ; ===========================================================================
0000AE4E                            
0000AE4E                            Obj0E_Animate:				; XREF: Obj0E_Index
0000AE4E 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000AE54 6100 0000                  		bsr.w	AnimateSprite
0000AE58 6000 0000                  		bra.w	DisplaySprite
0000AE5C                            ; ===========================================================================
0000AE5C 4E75                       		rts	
0000AE5E                            ; ===========================================================================
0000AE5E                            ; ---------------------------------------------------------------------------
0000AE5E                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000AE5E                            ; ---------------------------------------------------------------------------
0000AE5E                            
0000AE5E                            Obj0F:					; XREF: Obj_Index
0000AE5E 7000                       		moveq	#0,d0
0000AE60 1028 0024                  		move.b	$24(a0),d0
0000AE64 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000AE68 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000AE6C 6000 0000                  		bra.w	DisplaySprite
0000AE70                            ; ===========================================================================
0000AE70 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000AE72 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000AE74 0000                       		dc.w locret_A6F8-Obj0F_Index
0000AE76                            ; ===========================================================================
0000AE76                            
0000AE76                            Obj0F_Main:				; XREF: Obj0F_Index
0000AE76 5428 0024                  		addq.b	#2,$24(a0)
0000AE7A 317C 00D0 0008             		move.w	#$D0,8(a0)
0000AE80 317C 0130 000A             		move.w	#$130,$A(a0)
0000AE86 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000AE8E 317C 0200 0002             		move.w	#$200,2(a0)
0000AE94 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000AE9A 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000AE9C 5428 0024                  		addq.b	#2,$24(a0)
0000AEA0 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000AEA6 6600                       		bne.s	locret_A6F8	; if not, branch
0000AEA8 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000AEAE 317C 0170 0008             		move.w	#$170,8(a0)
0000AEB4 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000AEBA                            
0000AEBA                            locret_A6F8:				; XREF: Obj0F_Index
0000AEBA 4E75                       		rts	
0000AEBC                            ; ===========================================================================
0000AEBC                            
0000AEBC                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000AEBC 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000AEC2 6000 0000                  		bra.w	AnimateSprite
0000AEC6                            ; ===========================================================================
0000AEC6                            Ani_obj0E:
0000AEC6                            	include "_anim\obj0E.asm"
0000AEC6                            ; ---------------------------------------------------------------------------
0000AEC6                            ; Animation script - Sonic on the title screen
0000AEC6                            ; ---------------------------------------------------------------------------
0000AEC6 0000                       		dc.w byte_A706-Ani_obj0E
0000AEC8 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000AED4                            		even
0000AED4                            		even
0000AED4                            
0000AED4                            Ani_obj0F:
0000AED4                            	include "_anim\obj0F.asm"
0000AED4                            ; ---------------------------------------------------------------------------
0000AED4                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000AED4                            ; ---------------------------------------------------------------------------
0000AED4 0000                       		dc.w byte_A714-Ani_obj0F
0000AED6 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000AEDA                            		even
0000AEDA                            		even
0000AEDA                            
0000AEDA                            ; ---------------------------------------------------------------------------
0000AEDA                            ; Subroutine to	animate	a sprite using an animation script
0000AEDA                            ; ---------------------------------------------------------------------------
0000AEDA                            
0000AEDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEDA                            
0000AEDA                            
0000AEDA                            AnimateSprite:
0000AEDA 7000                       		moveq	#0,d0
0000AEDC 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000AEE0 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000AEE4 6700                       		beq.s	Anim_Run	; if not, branch
0000AEE6 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000AEEA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AEF0 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000AEF6                            
0000AEF6                            Anim_Run:
0000AEF6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000AEFA 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000AEFC D040                       		add.w	d0,d0
0000AEFE D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000AF02 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000AF06 7200                       		moveq	#0,d1
0000AF08 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000AF0C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000AF10 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000AF12                            
0000AF12                            Anim_Next:
0000AF12 1200                       		move.b	d0,d1
0000AF14 0200 001F                  		andi.b	#$1F,d0
0000AF18 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000AF1C 1028 0022                  		move.b	$22(a0),d0
0000AF20 E719                       		rol.b	#3,d1
0000AF22 B101                       		eor.b	d0,d1
0000AF24 0201 0003                  		andi.b	#3,d1
0000AF28 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000AF2E 8328 0001                  		or.b	d1,1(a0)
0000AF32 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000AF36                            
0000AF36                            Anim_Wait:
0000AF36 4E75                       		rts	
0000AF38                            ; ===========================================================================
0000AF38                            
0000AF38                            Anim_End_FF:
0000AF38 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000AF3A 6600                       		bne.s	Anim_End_FE	; if not, branch
0000AF3C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000AF42 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000AF46 60CA                       		bra.s	Anim_Next
0000AF48                            ; ===========================================================================
0000AF48                            
0000AF48                            Anim_End_FE:
0000AF48 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000AF4A 6600                       		bne.s	Anim_End_FD	; if not, branch
0000AF4C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000AF50 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000AF54 9200                       		sub.b	d0,d1
0000AF56 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000AF5A 60B6                       		bra.s	Anim_Next
0000AF5C                            ; ===========================================================================
0000AF5C                            
0000AF5C                            Anim_End_FD:
0000AF5C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000AF5E 6600                       		bne.s	Anim_End_FC	; if not, branch
0000AF60 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000AF66                            
0000AF66                            Anim_End_FC:
0000AF66 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000AF68 6600                       		bne.s	Anim_End_FB	; if not, branch
0000AF6A 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000AF6E                            
0000AF6E                            Anim_End_FB:
0000AF6E 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000AF70 6600                       		bne.s	Anim_End_FA	; if not, branch
0000AF72 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000AF78 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000AF7C                            
0000AF7C                            Anim_End_FA:
0000AF7C 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000AF7E 6600                       		bne.s	Anim_End	; if not, branch
0000AF80 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000AF84                            
0000AF84                            Anim_End:
0000AF84 4E75                       		rts	
0000AF86                            ; End of function AnimateSprite
0000AF86                            
0000AF86                            ; ===========================================================================
0000AF86                            ; ---------------------------------------------------------------------------
0000AF86                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF86                            ; ---------------------------------------------------------------------------
0000AF86                            Map_obj0F:
0000AF86                            	include "_maps\obj0F.asm"
0000AF86                            ; ---------------------------------------------------------------------------
0000AF86                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000AF86                            ; ---------------------------------------------------------------------------
0000AF86 0000                       		dc.w byte_A7CD-Map_obj0F
0000AF88 0000                       		dc.w byte_A7CC-Map_obj0F
0000AF8A 0000                       		dc.w byte_A7EB-Map_obj0F
0000AF8C 0000                       		dc.w byte_A882-Map_obj0F
0000AF8E 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000AF8F 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000AF94 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000AF99 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000AF9E 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000AFA3 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000AFA8 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000AFAD 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000AFAE B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFB3 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFB8 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFBD B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFC2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFC7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFCC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFD1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFD6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFDB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000AFE0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFE5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFEA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFEF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFF4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFF9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000AFFE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B003 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B008 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B00D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B012 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B017 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B01C F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B021 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B026 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B02B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B030 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B035 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B03A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B03F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B044 01                         byte_A882:	dc.b 1			; "TM"
0000B045 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B04A                            		even
0000B04A                            		even
0000B04A                            
0000B04A                            ; ---------------------------------------------------------------------------
0000B04A                            ; Sprite mappings - Sonic on the title screen
0000B04A                            ; ---------------------------------------------------------------------------
0000B04A                            Map_obj0E:
0000B04A                            	include "_maps\obj0E.asm"
0000B04A                            ; ================================================================================
0000B04A                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B04A                            ; ================================================================================
0000B04A                            
0000B04A                            DATAGKI0HYDQBXP:
0000B04A 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B04E 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B052 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B056 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B05A 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B05B 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B060 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B065 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B06A 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B06F 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B074 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B079 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B07E 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B083 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B084 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B089 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B08E 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B093 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B098 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B09D 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B0A2 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B0A7 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B0AC 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B0B1 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B0B6 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B0BB 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B0BC F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B0C1 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B0C6 F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B0CB 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B0D0 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B0D5 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B0DA 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B0DF 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B0E4 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B0E9 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B0EE 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B0F3 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B0F4 FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B0F9 F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B0FE FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B103 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B108 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B10D 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B112 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B117 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B11C 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B121 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B126 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B127 F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B12C F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B131 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B136 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B13B 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B140 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B145 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000B14A 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000B14F 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000B154 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000B159 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000B15E 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000B163 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000B168 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000B16D 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000B172 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000B177 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000B178 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B17D EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B182 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B187 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B18C EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B191 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B196 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B19B EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B1A0 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B1A5 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B1AA 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B1AF 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000B1B0 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000B1B5 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000B1BA 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000B1BF EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000B1C4 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000B1C9 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000B1CE EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000B1D3 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000B1D8 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000B1DD EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000B1E2 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000B1E7 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000B1EC EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000B1F1 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000B1F6 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000B1FB 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000B1FC EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000B201 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000B206 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000B20B EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000B210 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000B215 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000B21A EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000B21F 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000B224 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000B229 EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000B22E 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000B233 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000B238 EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000B23D 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000B242 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000B248 00                         	even
0000B248 00                         	even
0000B248                            
0000B248                            ; ===========================================================================
0000B248                            ; ---------------------------------------------------------------------------
0000B248                            ; Object 2B - Chopper enemy (GHZ)
0000B248                            ; ---------------------------------------------------------------------------
0000B248                            
0000B248                            Obj2B:					; XREF: Obj_Index
0000B248 7000                       		moveq	#0,d0
0000B24A 1028 0024                  		move.b	$24(a0),d0
0000B24E 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000B252 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000B256 6000 0000                  		bra.w	MarkObjGone
0000B25A                            ; ===========================================================================
0000B25A 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000B25C 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000B25E                            ; ===========================================================================
0000B25E                            
0000B25E                            Obj2B_Main:				; XREF: Obj2B_Index
0000B25E 5428 0024                  		addq.b	#2,$24(a0)
0000B262 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000B26A 317C 047B 0002             		move.w	#$47B,2(a0)
0000B270 117C 0004 0001             		move.b	#4,1(a0)
0000B276 117C 0004 0018             		move.b	#4,$18(a0)
0000B27C 117C 0009 0020             		move.b	#9,$20(a0)
0000B282 117C 0010 0019             		move.b	#$10,$19(a0)
0000B288 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B28E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000B294                            
0000B294                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000B294 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000B29A 6100 FC3E                  		bsr.w	AnimateSprite
0000B29E 6100 0000                  		bsr.w	SpeedToPos
0000B2A2 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000B2A8 3028 0030                  		move.w	$30(a0),d0
0000B2AC B068 000C                  		cmp.w	$C(a0),d0
0000B2B0 6400                       		bcc.s	Obj2B_ChgAni
0000B2B2 3140 000C                  		move.w	d0,$C(a0)
0000B2B6 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000B2BC                            
0000B2BC                            Obj2B_ChgAni:
0000B2BC 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000B2C2 0440 00C0                  		subi.w	#$C0,d0
0000B2C6 B068 000C                  		cmp.w	$C(a0),d0
0000B2CA 6400                       		bcc.s	locret_ABB6
0000B2CC 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000B2D2 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000B2D6 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000B2D8 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000B2DE                            
0000B2DE                            locret_ABB6:
0000B2DE 4E75                       		rts	
0000B2E0                            ; ===========================================================================
0000B2E0                            Ani_obj2B:
0000B2E0                            	include "_anim\obj2B.asm"
0000B2E0                            ; ---------------------------------------------------------------------------
0000B2E0                            ; Animation script - Chopper enemy
0000B2E0                            ; ---------------------------------------------------------------------------
0000B2E0 0000                       		dc.w byte_ABBE-Ani_obj2B
0000B2E2 0000                       		dc.w byte_ABC2-Ani_obj2B
0000B2E4 0000                       		dc.w byte_ABC6-Ani_obj2B
0000B2E6 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000B2EA 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000B2EE 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000B2F2 00                         		even
0000B2F2 00                         		even
0000B2F2                            
0000B2F2                            ; ---------------------------------------------------------------------------
0000B2F2                            ; Sprite mappings - Chopper enemy (GHZ)
0000B2F2                            ; ---------------------------------------------------------------------------
0000B2F2                            Map_obj2B:
0000B2F2                            	include "_maps\obj2B.asm"
0000B2F2                            Map_1ff1:
0000B2F2 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000B2F4 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000B2F6 02                         Map_1ff1_4: 	dc.b $2
0000B2F7 E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000B2FC 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B301 02                         Map_1ff1_F: 	dc.b $2
0000B302 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000B307 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000B30C                            	even
0000B30C                            	even
0000B30C                            
0000B30C                            ; ===========================================================================
0000B30C                            ; ---------------------------------------------------------------------------
0000B30C                            ; Object 2C - Jaws enemy (LZ)
0000B30C                            ; ---------------------------------------------------------------------------
0000B30C                            
0000B30C                            Obj2C:					; XREF: Obj_Index
0000B30C 7000                       		moveq	#0,d0
0000B30E 1028 0024                  		move.b	$24(a0),d0
0000B312 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000B316 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000B31A                            ; ===========================================================================
0000B31A 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000B31C 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000B31E                            ; ===========================================================================
0000B31E                            
0000B31E                            Obj2C_Main:				; XREF: Obj2C_Index
0000B31E 5428 0024                  		addq.b	#2,$24(a0)
0000B322 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000B32A 317C 2486 0002             		move.w	#$2486,2(a0)
0000B330 0028 0004 0001             		ori.b	#4,1(a0)
0000B336 117C 000A 0020             		move.b	#$A,$20(a0)
0000B33C 117C 0004 0018             		move.b	#4,$18(a0)
0000B342 117C 0010 0019             		move.b	#$10,$19(a0)
0000B348 7000                       		moveq	#0,d0
0000B34A 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000B34E ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000B350 5340                       		subq.w	#1,d0
0000B352 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000B356 3140 0032                  		move.w	d0,$32(a0)
0000B35A 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000B360 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000B366 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000B368 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000B36C                            
0000B36C                            Obj2C_Turn:				; XREF: Obj2C_Index
0000B36C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000B370 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000B372 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000B378 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000B37C 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000B382 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000B388                            
0000B388                            Obj2C_Animate:
0000B388 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000B38E 6100 FB4A                  		bsr.w	AnimateSprite
0000B392 6100 0000                  		bsr.w	SpeedToPos
0000B396 6000 0000                  		bra.w	MarkObjGone
0000B39A                            ; ===========================================================================
0000B39A                            Ani_obj2C:
0000B39A                            	include "_anim\obj2C.asm"
0000B39A                            ; ---------------------------------------------------------------------------
0000B39A                            ; Animation script - Jaws enemy
0000B39A                            ; ---------------------------------------------------------------------------
0000B39A 0000                       		dc.w byte_AC6A-Ani_obj2C
0000B39C 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000B3A2                            		even
0000B3A2                            		even
0000B3A2                            
0000B3A2                            ; ---------------------------------------------------------------------------
0000B3A2                            ; Sprite mappings - Jaws enemy (LZ)
0000B3A2                            ; ---------------------------------------------------------------------------
0000B3A2                            Map_obj2C:
0000B3A2                            	include "_maps\obj2C.asm"
0000B3A2                            ; ---------------------------------------------------------------------------
0000B3A2                            ; Sprite mappings - Jaws enemy (LZ)
0000B3A2                            ; ---------------------------------------------------------------------------
0000B3A2 0000                       		dc.w byte_AC78-Map_obj2C
0000B3A4 0000                       		dc.w byte_AC83-Map_obj2C
0000B3A6 0000                       		dc.w byte_AC8E-Map_obj2C
0000B3A8 0000                       		dc.w byte_AC99-Map_obj2C
0000B3AA 02                         byte_AC78:	dc.b 2
0000B3AB F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3B0 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000B3B5 02                         byte_AC83:	dc.b 2
0000B3B6 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3BB F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000B3C0 02                         byte_AC8E:	dc.b 2
0000B3C1 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000B3C6 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000B3CB 02                         byte_AC99:	dc.b 2
0000B3CC F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000B3D1 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000B3D6                            		even
0000B3D6                            		even
0000B3D6                            
0000B3D6                            ; ===========================================================================
0000B3D6                            ; ---------------------------------------------------------------------------
0000B3D6                            ; Object 2D - Burrobot enemy (LZ)
0000B3D6                            ; ---------------------------------------------------------------------------
0000B3D6                            
0000B3D6                            Obj2D:					; XREF: Obj_Index
0000B3D6 7000                       		moveq	#0,d0
0000B3D8 1028 0024                  		move.b	$24(a0),d0
0000B3DC 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000B3E0 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000B3E4                            ; ===========================================================================
0000B3E4 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000B3E6 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000B3E8                            ; ===========================================================================
0000B3E8                            
0000B3E8                            Obj2D_Main:				; XREF: Obj2D_Index
0000B3E8 5428 0024                  		addq.b	#2,$24(a0)
0000B3EC 117C 0013 0016             		move.b	#$13,$16(a0)
0000B3F2 117C 0008 0017             		move.b	#8,$17(a0)
0000B3F8 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000B400 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000B406 0028 0004 0001             		ori.b	#4,1(a0)
0000B40C 117C 0004 0018             		move.b	#4,$18(a0)
0000B412 117C 0005 0020             		move.b	#5,$20(a0)
0000B418 117C 000C 0019             		move.b	#$C,$19(a0)
0000B41E 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000B422 117C 0002 001C             		move.b	#2,$1C(a0)
0000B428                            
0000B428                            Obj2D_Action:				; XREF: Obj2D_Index
0000B428 7000                       		moveq	#0,d0
0000B42A 1028 0025                  		move.b	$25(a0),d0
0000B42E 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000B432 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000B436 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000B43C 6100 FA9C                  		bsr.w	AnimateSprite
0000B440 6000 0000                  		bra.w	MarkObjGone
0000B444                            ; ===========================================================================
0000B444 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000B446 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000B448 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000B44A 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000B44C                            ; ===========================================================================
0000B44C                            
0000B44C                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000B44C 5368 0030                  		subq.w	#1,$30(a0)
0000B450 6A00                       		bpl.s	locret_AD42
0000B452 5428 0025                  		addq.b	#2,$25(a0)
0000B456 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B45C 317C 0080 0010             		move.w	#$80,$10(a0)
0000B462 117C 0001 001C             		move.b	#1,$1C(a0)
0000B468 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000B46E 6700                       		beq.s	locret_AD42
0000B470 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000B474                            
0000B474                            locret_AD42:
0000B474 4E75                       		rts	
0000B476                            ; ===========================================================================
0000B476                            
0000B476                            Obj2D_Move:				; XREF: Obj2D_Index2
0000B476 5368 0030                  		subq.w	#1,$30(a0)
0000B47A 6B00                       		bmi.s	loc_AD84
0000B47C 6100 0000                  		bsr.w	SpeedToPos
0000B480 0868 0000 0032             		bchg	#0,$32(a0)
0000B486 6600                       		bne.s	loc_AD78
0000B488 3628 0008                  		move.w	8(a0),d3
0000B48C 0643 000C                  		addi.w	#$C,d3
0000B490 0828 0000 0022             		btst	#0,$22(a0)
0000B496 6600                       		bne.s	loc_AD6A
0000B498 0443 0018                  		subi.w	#$18,d3
0000B49C                            
0000B49C                            loc_AD6A:
0000B49C 4EB9 0000 0000             		jsr	ObjHitFloor2
0000B4A2 0C41 000C                  		cmpi.w	#$C,d1
0000B4A6 6C00                       		bge.s	loc_AD84
0000B4A8 4E75                       		rts	
0000B4AA                            ; ===========================================================================
0000B4AA                            
0000B4AA                            loc_AD78:				; XREF: Obj2D_Move
0000B4AA 4EB9 0000 0000             		jsr	ObjHitFloor
0000B4B0 D368 000C                  		add.w	d1,$C(a0)
0000B4B4 4E75                       		rts	
0000B4B6                            ; ===========================================================================
0000B4B6                            
0000B4B6                            loc_AD84:				; XREF: Obj2D_Move
0000B4B6 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000B4BC 6700                       		beq.s	loc_ADA4
0000B4BE 5528 0025                  		subq.b	#2,$25(a0)
0000B4C2 317C 003B 0030             		move.w	#$3B,$30(a0)
0000B4C8 317C 0000 0010             		move.w	#0,$10(a0)
0000B4CE 117C 0000 001C             		move.b	#0,$1C(a0)
0000B4D4 4E75                       		rts	
0000B4D6                            ; ===========================================================================
0000B4D6                            
0000B4D6                            loc_ADA4:
0000B4D6 5428 0025                  		addq.b	#2,$25(a0)
0000B4DA 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B4E0 117C 0002 001C             		move.b	#2,$1C(a0)
0000B4E6 4E75                       		rts	
0000B4E8                            ; ===========================================================================
0000B4E8                            
0000B4E8                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000B4E8 6100 0000                  		bsr.w	SpeedToPos
0000B4EC 0668 0018 0012             		addi.w	#$18,$12(a0)
0000B4F2 6B00                       		bmi.s	locret_ADF0
0000B4F4 117C 0003 001C             		move.b	#3,$1C(a0)
0000B4FA 4EB9 0000 0000             		jsr	ObjHitFloor
0000B500 4A41                       		tst.w	d1
0000B502 6A00                       		bpl.s	locret_ADF0
0000B504 D368 000C                  		add.w	d1,$C(a0)
0000B508 317C 0000 0012             		move.w	#0,$12(a0)
0000B50E 117C 0001 001C             		move.b	#1,$1C(a0)
0000B514 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000B51A 5528 0025                  		subq.b	#2,$25(a0)
0000B51E 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B522                            
0000B522                            locret_ADF0:
0000B522 4E75                       		rts	
0000B524                            ; ===========================================================================
0000B524                            
0000B524                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000B524 343C 0060                  		move.w	#$60,d2
0000B528 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000B52C 6400                       		bcc.s	locret_AE20
0000B52E 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000B532 9068 000C                  		sub.w	$C(a0),d0
0000B536 6400                       		bcc.s	locret_AE20
0000B538 0C40 FF80                  		cmpi.w	#-$80,d0
0000B53C 6500                       		bcs.s	locret_AE20
0000B53E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B542 6600                       		bne.s	locret_AE20
0000B544 5528 0025                  		subq.b	#2,$25(a0)
0000B548 3141 0010                  		move.w	d1,$10(a0)
0000B54C 317C FC00 0012             		move.w	#-$400,$12(a0)
0000B552                            
0000B552                            locret_AE20:
0000B552 4E75                       		rts	
0000B554                            
0000B554                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B554                            
0000B554                            
0000B554                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000B554 323C 0080                  		move.w	#$80,d1
0000B558 08E8 0000 0022             		bset	#0,$22(a0)
0000B55E 3038 D008                  		move.w	($FFFFD008).w,d0
0000B562 9068 0008                  		sub.w	8(a0),d0
0000B566 6400                       		bcc.s	loc_AE40
0000B568 4440                       		neg.w	d0
0000B56A 4441                       		neg.w	d1
0000B56C 08A8 0000 0022             		bclr	#0,$22(a0)
0000B572                            
0000B572                            loc_AE40:
0000B572 B042                       		cmp.w	d2,d0
0000B574 4E75                       		rts	
0000B576                            ; End of function Obj2D_ChkSonic2
0000B576                            
0000B576                            ; ===========================================================================
0000B576                            Ani_obj2D:
0000B576                            	include "_anim\obj2D.asm"
0000B576                            ; ---------------------------------------------------------------------------
0000B576                            ; Animation script - Burrobot enemy but craig
0000B576                            ; ---------------------------------------------------------------------------
0000B576 0000                       		dc.w byte_AE4C-Ani_obj2D
0000B578 0000                       		dc.w byte_AE50-Ani_obj2D
0000B57A 0000                       		dc.w byte_AE54-Ani_obj2D
0000B57C 0000                       		dc.w byte_AE58-Ani_obj2D
0000B57E 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000B581 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000B585 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000B593 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000B596                            		even
0000B596                            		even
0000B596                            
0000B596                            ; ---------------------------------------------------------------------------
0000B596                            ; Sprite mappings - Burrobot enemy (LZ)
0000B596                            ; ---------------------------------------------------------------------------
0000B596                            Map_obj2D:
0000B596                            	include "_maps\obj2D.asm"
0000B596                            Map_e3a3:
0000B596 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000B598 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000B59A 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000B59C 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000B59E 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000B5A0 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000B5A2 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000B5A4 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000B5A6 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000B5A8 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000B5AA 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000B5AC 02                         Map_e3a3_16: 	dc.b $2
0000B5AD EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000B5B2 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000B5B7 02                         Map_e3a3_21: 	dc.b $2
0000B5B8 EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000B5BD 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000B5C2 02                         Map_e3a3_2C: 	dc.b $2
0000B5C3 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000B5C8 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000B5CD 02                         Map_e3a3_37: 	dc.b $2
0000B5CE EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000B5D3 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000B5D8 02                         Map_e3a3_42: 	dc.b $2
0000B5D9 EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000B5DE FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000B5E3 02                         Map_e3a3_4D: 	dc.b $2
0000B5E4 EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000B5E9 FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000B5EE 02                         Map_e3a3_58: 	dc.b $2
0000B5EF EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000B5F4 FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000B5F9 02                         Map_e3a3_63: 	dc.b $2
0000B5FA EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000B5FF FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000B604 02                         Map_e3a3_6E: 	dc.b $2
0000B605 EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000B60A FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000B60F 02                         Map_e3a3_79: 	dc.b $2
0000B610 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000B615 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000B61A 02                         Map_e3a3_84: 	dc.b $2
0000B61B EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000B620 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000B626 00                         	even
0000B626 00                         	even
0000B626                            
0000B626                            ; ===========================================================================
0000B626                            ; ---------------------------------------------------------------------------
0000B626                            ; Object 2F - large moving platforms (MZ)
0000B626                            ; ---------------------------------------------------------------------------
0000B626                            
0000B626                            Obj2F:					; XREF: Obj_Index
0000B626 7000                       		moveq	#0,d0
0000B628 1028 0024                  		move.b	$24(a0),d0
0000B62C 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000B630 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000B634                            ; ===========================================================================
0000B634 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000B636 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000B638                            
0000B638 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000B63A 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000B63C 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000B63E 0140                       		dc.b 1,	$40
0000B640 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000B642 0220                       		dc.b 2,	$20
0000B644                            ; ===========================================================================
0000B644                            
0000B644                            Obj2F_Main:				; XREF: Obj2F_Index
0000B644 5428 0024                  		addq.b	#2,$24(a0)
0000B648 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000B650 317C C000 0002             		move.w	#$C000,2(a0)
0000B656 117C 0004 0001             		move.b	#4,1(a0)
0000B65C 117C 0005 0018             		move.b	#5,$18(a0)
0000B662 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000B668 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B66E 7000                       		moveq	#0,d0
0000B670 1028 0028                  		move.b	$28(a0),d0
0000B674 E448                       		lsr.w	#2,d0
0000B676 0240 001C                  		andi.w	#$1C,d0
0000B67A 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000B67E 3019                       		move.w	(a1)+,d0
0000B680 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000B684 214A 0030                  		move.l	a2,$30(a0)
0000B688 1159 001A                  		move.b	(a1)+,$1A(a0)
0000B68C 1151 0019                  		move.b	(a1),$19(a0)
0000B690 0228 000F 0028             		andi.b	#$F,$28(a0)
0000B696 117C 0040 0016             		move.b	#$40,$16(a0)
0000B69C 08E8 0004 0001             		bset	#4,1(a0)
0000B6A2                            
0000B6A2                            Obj2F_Action:				; XREF: Obj2F_Index
0000B6A2 6100 0000                  		bsr.w	Obj2F_Types
0000B6A6 4A28 0025                  		tst.b	$25(a0)
0000B6AA 6700                       		beq.s	Obj2F_Solid
0000B6AC 7200                       		moveq	#0,d1
0000B6AE 1228 0019                  		move.b	$19(a0),d1
0000B6B2 0641 000B                  		addi.w	#$B,d1
0000B6B6 6100 C556                  		bsr.w	ExitPlatform
0000B6BA 0829 0003 0022             		btst	#3,$22(a1)
0000B6C0 6600 0000                  		bne.w	Obj2F_Slope
0000B6C4 4228 0025                  		clr.b	$25(a0)
0000B6C8 6000                       		bra.s	Obj2F_Display
0000B6CA                            ; ===========================================================================
0000B6CA                            
0000B6CA                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B6CA 7200                       		moveq	#0,d1
0000B6CC 1228 0019                  		move.b	$19(a0),d1
0000B6D0 0641 000B                  		addi.w	#$B,d1
0000B6D4 2468 0030                  		movea.l	$30(a0),a2
0000B6D8 3428 0008                  		move.w	8(a0),d2
0000B6DC 6100 D520                  		bsr.w	SlopeObject2
0000B6E0 6000                       		bra.s	Obj2F_Display
0000B6E2                            ; ===========================================================================
0000B6E2                            
0000B6E2                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B6E2 7200                       		moveq	#0,d1
0000B6E4 1228 0019                  		move.b	$19(a0),d1
0000B6E8 0641 000B                  		addi.w	#$B,d1
0000B6EC 343C 0020                  		move.w	#$20,d2
0000B6F0 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B6F6 6600                       		bne.s	loc_AF8E
0000B6F8 343C 0030                  		move.w	#$30,d2
0000B6FC                            
0000B6FC                            loc_AF8E:
0000B6FC 2468 0030                  		movea.l	$30(a0),a2
0000B700 6100 0000                  		bsr.w	SolidObject2F
0000B704                            
0000B704                            Obj2F_Display:				; XREF: Obj2F_Action
0000B704 6100 0000                  		bsr.w	DisplaySprite
0000B708 6000 0000                  		bra.w	Obj2F_ChkDel
0000B70C                            
0000B70C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B70C                            
0000B70C                            
0000B70C                            Obj2F_Types:				; XREF: Obj2F_Action
0000B70C 7000                       		moveq	#0,d0
0000B70E 1028 0028                  		move.b	$28(a0),d0
0000B712 0240 0007                  		andi.w	#7,d0
0000B716 D040                       		add.w	d0,d0
0000B718 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B71C 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B720                            ; End of function Obj2F_Types
0000B720                            
0000B720                            ; ===========================================================================
0000B720 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B722 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B724 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B726 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B728 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B72A 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B72C                            ; ===========================================================================
0000B72C                            
0000B72C                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B72C 4E75                       		rts			; type 00 platform doesn't move
0000B72E                            ; ===========================================================================
0000B72E                            
0000B72E                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B72E 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B732 323C 0020                  		move.w	#$20,d1
0000B736 6000                       		bra.s	Obj2F_Move
0000B738                            ; ===========================================================================
0000B738                            
0000B738                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B738 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B73C 323C 0030                  		move.w	#$30,d1
0000B740 6000                       		bra.s	Obj2F_Move
0000B742                            ; ===========================================================================
0000B742                            
0000B742                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B742 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B746 323C 0040                  		move.w	#$40,d1
0000B74A 6000                       		bra.s	Obj2F_Move
0000B74C                            ; ===========================================================================
0000B74C                            
0000B74C                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B74C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B750 323C 0060                  		move.w	#$60,d1
0000B754                            
0000B754                            Obj2F_Move:
0000B754 0828 0003 0028             		btst	#3,$28(a0)
0000B75A 6700                       		beq.s	loc_AFF2
0000B75C 4440                       		neg.w	d0
0000B75E D041                       		add.w	d1,d0
0000B760                            
0000B760                            loc_AFF2:
0000B760 3228 002C                  		move.w	$2C(a0),d1
0000B764 9240                       		sub.w	d0,d1
0000B766 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B76A 4E75                       		rts	
0000B76C                            ; ===========================================================================
0000B76C                            
0000B76C                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B76C 1028 0034                  		move.b	$34(a0),d0
0000B770 4A28 0025                  		tst.b	$25(a0)
0000B774 6600                       		bne.s	loc_B010
0000B776 5500                       		subq.b	#2,d0
0000B778 6400                       		bcc.s	loc_B01C
0000B77A 7000                       		moveq	#0,d0
0000B77C 6000                       		bra.s	loc_B01C
0000B77E                            ; ===========================================================================
0000B77E                            
0000B77E                            loc_B010:
0000B77E 5800                       		addq.b	#4,d0
0000B780 0C00 0040                  		cmpi.b	#$40,d0
0000B784 6500                       		bcs.s	loc_B01C
0000B786 103C 0040                  		move.b	#$40,d0
0000B78A                            
0000B78A                            loc_B01C:
0000B78A 1140 0034                  		move.b	d0,$34(a0)
0000B78E 4EB9 0000 2CFE             		jsr	(CalcSine).l
0000B794 E848                       		lsr.w	#4,d0
0000B796 3200                       		move.w	d0,d1
0000B798 D068 002C                  		add.w	$2C(a0),d0
0000B79C 3140 000C                  		move.w	d0,$C(a0)
0000B7A0 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B7A6 6600                       		bne.s	loc_B07A
0000B7A8 4A28 0035                  		tst.b	$35(a0)
0000B7AC 6600                       		bne.s	loc_B07A
0000B7AE 117C 0001 0035             		move.b	#1,$35(a0)
0000B7B4 6100 0000                  		bsr.w	SingleObjLoad2
0000B7B8 6600                       		bne.s	loc_B07A
0000B7BA 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B7BE 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7C4 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B7CA 5069 002C                  		addq.w	#8,$2C(a1)
0000B7CE 5769 002C                  		subq.w	#3,$2C(a1)
0000B7D2 0469 0040 0008             		subi.w	#$40,8(a1)
0000B7D8 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B7DE 2348 0038                  		move.l	a0,$38(a1)
0000B7E2 2448                       		movea.l	a0,a2
0000B7E4 6100                       		bsr.s	sub_B09C
0000B7E6                            
0000B7E6                            loc_B07A:
0000B7E6 7400                       		moveq	#0,d2
0000B7E8 45E8 0036                  		lea	$36(a0),a2
0000B7EC 141A                       		move.b	(a2)+,d2
0000B7EE 5302                       		subq.b	#1,d2
0000B7F0 6500                       		bcs.s	locret_B09A
0000B7F2                            
0000B7F2                            loc_B086:
0000B7F2 7000                       		moveq	#0,d0
0000B7F4 101A                       		move.b	(a2)+,d0
0000B7F6 ED48                       		lsl.w	#6,d0
0000B7F8 0640 D000                  		addi.w	#-$3000,d0
0000B7FC 3240                       		movea.w	d0,a1
0000B7FE 3341 003C                  		move.w	d1,$3C(a1)
0000B802 51CA FFEE                  		dbf	d2,loc_B086
0000B806                            
0000B806                            locret_B09A:
0000B806 4E75                       		rts	
0000B808                            
0000B808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B808                            
0000B808                            
0000B808                            sub_B09C:
0000B808 45EA 0036                  		lea	$36(a2),a2
0000B80C 7000                       		moveq	#0,d0
0000B80E 1012                       		move.b	(a2),d0
0000B810 5212                       		addq.b	#1,(a2)
0000B812 45F2 0001                  		lea	1(a2,d0.w),a2
0000B816 3009                       		move.w	a1,d0
0000B818 0440 D000                  		subi.w	#-$3000,d0
0000B81C EC48                       		lsr.w	#6,d0
0000B81E 0240 007F                  		andi.w	#$7F,d0
0000B822 1480                       		move.b	d0,(a2)
0000B824 4E75                       		rts	
0000B826                            ; End of function sub_B09C
0000B826                            
0000B826                            ; ===========================================================================
0000B826                            
0000B826                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B826 4A28 0035                  		tst.b	$35(a0)
0000B82A 6700                       		beq.s	loc_B0C6
0000B82C 4A28 0001                  		tst.b	1(a0)
0000B830 6A00                       		bpl.s	Obj2F_DelFlames
0000B832                            
0000B832                            loc_B0C6:
0000B832 3028 002A                  		move.w	$2A(a0),d0
0000B836 0240 FF80                  		andi.w	#$FF80,d0
0000B83A 3238 F700                  		move.w	($FFFFF700).w,d1
0000B83E 0441 0080                  		subi.w	#$80,d1
0000B842 0241 FF80                  		andi.w	#$FF80,d1
0000B846 9041                       		sub.w	d1,d0
0000B848 0C40 0280                  		cmpi.w	#$280,d0
0000B84C 6200 0000                  		bhi.w	DeleteObject
0000B850 4E75                       		rts	
0000B852                            ; ===========================================================================
0000B852                            
0000B852                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B852 7400                       		moveq	#0,d2
0000B854                            
0000B854                            loc_B0E8:
0000B854 45E8 0036                  		lea	$36(a0),a2
0000B858 1412                       		move.b	(a2),d2
0000B85A 421A                       		clr.b	(a2)+
0000B85C 5302                       		subq.b	#1,d2
0000B85E 6500                       		bcs.s	locret_B116
0000B860                            
0000B860                            loc_B0F4:
0000B860 7000                       		moveq	#0,d0
0000B862 1012                       		move.b	(a2),d0
0000B864 421A                       		clr.b	(a2)+
0000B866 ED48                       		lsl.w	#6,d0
0000B868 0640 D000                  		addi.w	#-$3000,d0
0000B86C 3240                       		movea.w	d0,a1
0000B86E 6100 0000                  		bsr.w	DeleteObject2
0000B872 51CA FFEC                  		dbf	d2,loc_B0F4
0000B876 117C 0000 0035             		move.b	#0,$35(a0)
0000B87C 117C 0000 0034             		move.b	#0,$34(a0)
0000B882                            
0000B882                            locret_B116:
0000B882 4E75                       		rts	
0000B884                            ; ===========================================================================
0000B884                            ; ---------------------------------------------------------------------------
0000B884                            ; Collision data for large moving platforms (MZ)
0000B884                            ; ---------------------------------------------------------------------------
0000B884                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B8D0                            		even
0000B8D0                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B8FC                            		even
0000B8FC                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B948                            		even
0000B948                            ; ===========================================================================
0000B948                            ; ---------------------------------------------------------------------------
0000B948                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B948                            ; (appears when	you walk on sinking platforms)
0000B948                            ; ---------------------------------------------------------------------------
0000B948                            
0000B948                            Obj35:					; XREF: Obj_Index
0000B948 7000                       		moveq	#0,d0
0000B94A 1028 0024                  		move.b	$24(a0),d0
0000B94E 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B952 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B956                            ; ===========================================================================
0000B956 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B958 0000                       		dc.w loc_B238-Obj35_Index
0000B95A 0000                       		dc.w Obj35_Move-Obj35_Index
0000B95C                            ; ===========================================================================
0000B95C                            
0000B95C                            Obj35_Main:				; XREF: Obj35_Index
0000B95C 5428 0024                  		addq.b	#2,$24(a0)
0000B960 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B968 317C 0345 0002             		move.w	#$345,2(a0)
0000B96E 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B974 117C 0004 0001             		move.b	#4,1(a0)
0000B97A 117C 0001 0018             		move.b	#1,$18(a0)
0000B980 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B986 117C 0008 0019             		move.b	#8,$19(a0)
0000B98C 303C 00C8                  		move.w	#$C8,d0
0000B990 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000B996 4A28 0028                  		tst.b	$28(a0)
0000B99A 6700                       		beq.s	loc_B238
0000B99C 5428 0024                  		addq.b	#2,$24(a0)
0000B9A0 6000 0000                  		bra.w	Obj35_Move
0000B9A4                            ; ===========================================================================
0000B9A4                            
0000B9A4                            loc_B238:				; XREF: Obj35_Index
0000B9A4 2268 0030                  		movea.l	$30(a0),a1
0000B9A8 3228 0008                  		move.w	8(a0),d1
0000B9AC 9268 002A                  		sub.w	$2A(a0),d1
0000B9B0 0641 000C                  		addi.w	#$C,d1
0000B9B4 3001                       		move.w	d1,d0
0000B9B6 E248                       		lsr.w	#1,d0
0000B9B8 1031 0000                  		move.b	(a1,d0.w),d0
0000B9BC 4440                       		neg.w	d0
0000B9BE D068 002C                  		add.w	$2C(a0),d0
0000B9C2 3400                       		move.w	d0,d2
0000B9C4 D068 003C                  		add.w	$3C(a0),d0
0000B9C8 3140 000C                  		move.w	d0,$C(a0)
0000B9CC 0C41 0084                  		cmpi.w	#$84,d1
0000B9D0 6400                       		bcc.s	loc_B2B0
0000B9D2 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B9DA 0C41 0080                  		cmpi.w	#$80,d1
0000B9DE 6400                       		bcc.s	loc_B2B0
0000B9E0 2028 0008                  		move.l	8(a0),d0
0000B9E4 0680 0008 0000             		addi.l	#$80000,d0
0000B9EA 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B9F0 6600                       		bne.s	loc_B2B0
0000B9F2 6100 0000                  		bsr.w	SingleObjLoad2
0000B9F6 6600                       		bne.s	loc_B2B0
0000B9F8 12BC 0035                  		move.b	#$35,0(a1)
0000B9FC 3368 0008 0008             		move.w	8(a0),8(a1)
0000BA02 3342 002C                  		move.w	d2,$2C(a1)
0000BA06 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000BA0C 137C 0001 0028             		move.b	#1,$28(a1)
0000BA12 2468 0038                  		movea.l	$38(a0),a2
0000BA16 6100 FDF0                  		bsr.w	sub_B09C
0000BA1A                            
0000BA1A                            loc_B2B0:
0000BA1A 6000                       		bra.s	Obj35_Animate
0000BA1C                            ; ===========================================================================
0000BA1C                            
0000BA1C                            Obj35_Move:				; XREF: Obj35_Index
0000BA1C 3028 002C                  		move.w	$2C(a0),d0
0000BA20 D068 003C                  		add.w	$3C(a0),d0
0000BA24 3140 000C                  		move.w	d0,$C(a0)
0000BA28                            
0000BA28                            Obj35_Animate:				; XREF: loc_B238
0000BA28 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000BA2E 6100 F4AA                  		bsr.w	AnimateSprite
0000BA32 6000 0000                  		bra.w	DisplaySprite
0000BA36                            ; ===========================================================================
0000BA36                            Ani_obj35:
0000BA36                            	include "_anim\obj35.asm"
0000BA36                            ; ---------------------------------------------------------------------------
0000BA36                            ; Animation script - fireball that sits on the	floor (MZ)
0000BA36                            ; ---------------------------------------------------------------------------
0000BA36 0000                       		dc.w byte_B2CE-Ani_obj35
0000BA38 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000BA3E                            		even
0000BA3E                            		even
0000BA3E                            
0000BA3E                            ; ---------------------------------------------------------------------------
0000BA3E                            ; Sprite mappings - large moving platforms (MZ)
0000BA3E                            ; ---------------------------------------------------------------------------
0000BA3E                            Map_obj2F:
0000BA3E                            	include "_maps\obj2F.asm"
0000BA3E                            ; ---------------------------------------------------------------------------
0000BA3E                            ; Sprite mappings - large moving platforms (MZ)
0000BA3E                            ; ---------------------------------------------------------------------------
0000BA3E 0000                       		dc.w byte_B2DA-Map_obj2F
0000BA40 0000                       		dc.w byte_B31C-Map_obj2F
0000BA42 0000                       		dc.w byte_B34F-Map_obj2F
0000BA44 0D                         byte_B2DA:	dc.b $D
0000BA45 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000BA4A F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000BA4F 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA54 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000BA59 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000BA5E F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BA63 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000BA68 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000BA6D F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000BA72 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BA77 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000BA7C D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000BA81 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000BA86 0A                         byte_B31C:	dc.b $A
0000BA87 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000BA8C F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000BA91 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000BA96 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000BA9B E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000BAA0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BAA5 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000BAAA E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000BAAF C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000BAB4 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000BAB9 06                         byte_B34F:	dc.b 6
0000BABA D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000BABF F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000BAC4 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000BAC9 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000BACE F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000BAD3 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000BAD8                            		even
0000BAD8                            		even
0000BAD8                            
0000BAD8                            ; ---------------------------------------------------------------------------
0000BAD8                            ; Sprite mappings - lava balls (MZ, SLZ)
0000BAD8                            ; ---------------------------------------------------------------------------
0000BAD8                            Map_obj14:
0000BAD8                            	include "_maps\obj14.asm"
0000BAD8                            ; --------------------------------------------------------------------------------
0000BAD8                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000BAD8                            ; --------------------------------------------------------------------------------
0000BAD8                            
0000BAD8                            SME_C6wT7:	
0000BAD8 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000BADC 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000BAE0 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000BAE4 01                         SME_C6wT7_C:	dc.b 1	
0000BAE5 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BAEA 01                         SME_C6wT7_12:	dc.b 1	
0000BAEB E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000BAF0 02                         SME_C6wT7_18:	dc.b 2	
0000BAF1 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000BAF6 E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000BAFB 01                         SME_C6wT7_23:	dc.b 1	
0000BAFC F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BB01 01                         SME_C6wT7_29:	dc.b 1	
0000BB02 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000BB07 01                         SME_C6wT7_2F:	dc.b 1	
0000BB08 F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000BB0E 00                         		even
0000BB0E 00                         		even
0000BB0E                            
0000BB0E                            ; ===========================================================================
0000BB0E                            ; ---------------------------------------------------------------------------
0000BB0E                            ; Object 30 - large green glassy blocks	(MZ)
0000BB0E                            ; ---------------------------------------------------------------------------
0000BB0E                            
0000BB0E                            Obj30:					; XREF: Obj_Index
0000BB0E 7000                       		moveq	#0,d0
0000BB10 1028 0024                  		move.b	$24(a0),d0
0000BB14 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000BB18 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000BB1C 3028 0008                  		move.w	8(a0),d0
0000BB20 0240 FF80                  		andi.w	#$FF80,d0
0000BB24 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB28 0441 0080                  		subi.w	#$80,d1
0000BB2C 0241 FF80                  		andi.w	#$FF80,d1
0000BB30 9041                       		sub.w	d1,d0
0000BB32 0C40 0280                  		cmpi.w	#$280,d0
0000BB36 6200 0000                  		bhi.w	Obj30_Delete
0000BB3A 6000 0000                  		bra.w	DisplaySprite
0000BB3E                            ; ===========================================================================
0000BB3E                            
0000BB3E                            Obj30_Delete:
0000BB3E 6000 0000                  		bra.w	DeleteObject
0000BB42                            ; ===========================================================================
0000BB42 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000BB44 0000                       		dc.w Obj30_Block012-Obj30_Index
0000BB46 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000BB48 0000                       		dc.w Obj30_Block34-Obj30_Index
0000BB4A 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000BB4C                            
0000BB4C 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000BB4F 0400 01                    		dc.b 4,	0, 1
0000BB52 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000BB55 0800 01                    		dc.b 8,	0, 1
0000BB58                            ; ===========================================================================
0000BB58                            
0000BB58                            Obj30_Main:				; XREF: Obj30_Index
0000BB58 45F9 0000 BB4C             		lea	(Obj30_Vars1).l,a2
0000BB5E 7201                       		moveq	#1,d1
0000BB60 117C 0048 0016             		move.b	#$48,$16(a0)
0000BB66 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000BB6C 6500                       		bcs.s	loc_B40C	; if yes, branch
0000BB6E 45F9 0000 BB52             		lea	(Obj30_Vars2).l,a2
0000BB74 7201                       		moveq	#1,d1
0000BB76 117C 0038 0016             		move.b	#$38,$16(a0)
0000BB7C                            
0000BB7C                            loc_B40C:
0000BB7C 2248                       		movea.l	a0,a1
0000BB7E 6000                       		bra.s	Obj30_Load	; load main object
0000BB80                            ; ===========================================================================
0000BB80                            
0000BB80                            Obj30_Loop:
0000BB80 6100 0000                  		bsr.w	SingleObjLoad2
0000BB84 6600                       		bne.s	loc_B480
0000BB86                            
0000BB86                            Obj30_Load:				; XREF: Obj30_Main
0000BB86 135A 0024                  		move.b	(a2)+,$24(a1)
0000BB8A 12BC 0030                  		move.b	#$30,0(a1)
0000BB8E 3368 0008 0008             		move.w	8(a0),8(a1)
0000BB94 101A                       		move.b	(a2)+,d0
0000BB96 4880                       		ext.w	d0
0000BB98 D068 000C                  		add.w	$C(a0),d0
0000BB9C 3340 000C                  		move.w	d0,$C(a1)
0000BBA0 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000BBA8 337C C38E 0002             		move.w	#$C38E,2(a1)
0000BBAE 137C 0004 0001             		move.b	#4,1(a1)
0000BBB4 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BBBA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BBC0 137C 0020 0019             		move.b	#$20,$19(a1)
0000BBC6 137C 0004 0018             		move.b	#4,$18(a1)
0000BBCC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BBD0 2348 003C                  		move.l	a0,$3C(a1)
0000BBD4 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000BBD8                            
0000BBD8 137C 0010 0019             		move.b	#$10,$19(a1)
0000BBDE 137C 0003 0018             		move.b	#3,$18(a1)
0000BBE4 5029 0028                  		addq.b	#8,$28(a1)
0000BBE8 0229 000F 0028             		andi.b	#$F,$28(a1)
0000BBEE                            
0000BBEE                            loc_B480:
0000BBEE 317C 0090 0032             		move.w	#$90,$32(a0)
0000BBF4 08E8 0004 0001             		bset	#4,1(a0)
0000BBFA                            
0000BBFA                            Obj30_Block012:				; XREF: Obj30_Index
0000BBFA 6100 0000                  		bsr.w	Obj30_Types
0000BBFE 323C 002B                  		move.w	#$2B,d1
0000BC02 343C 0048                  		move.w	#$48,d2
0000BC06 363C 0049                  		move.w	#$49,d3
0000BC0A 3828 0008                  		move.w	8(a0),d4
0000BC0E 6000 0000                  		bra.w	SolidObject
0000BC12                            ; ===========================================================================
0000BC12                            
0000BC12                            Obj30_Reflect012:			; XREF: Obj30_Index
0000BC12 2268 003C                  		movea.l	$3C(a0),a1
0000BC16 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC1C 6000 0000                  		bra.w	Obj30_Types
0000BC20                            ; ===========================================================================
0000BC20                            
0000BC20                            Obj30_Block34:				; XREF: Obj30_Index
0000BC20 6100 0000                  		bsr.w	Obj30_Types
0000BC24 323C 002B                  		move.w	#$2B,d1
0000BC28 343C 0038                  		move.w	#$38,d2
0000BC2C 363C 0039                  		move.w	#$39,d3
0000BC30 3828 0008                  		move.w	8(a0),d4
0000BC34 6000 0000                  		bra.w	SolidObject
0000BC38                            ; ===========================================================================
0000BC38                            
0000BC38                            Obj30_Reflect34:			; XREF: Obj30_Index
0000BC38 2268 003C                  		movea.l	$3C(a0),a1
0000BC3C 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000BC42 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000BC48 6000 0002                  		bra.w	*+4
0000BC4C                            
0000BC4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BC4C                            
0000BC4C                            
0000BC4C                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000BC4C 7000                       		moveq	#0,d0
0000BC4E 1028 0028                  		move.b	$28(a0),d0
0000BC52 0240 0007                  		andi.w	#7,d0
0000BC56 D040                       		add.w	d0,d0
0000BC58 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000BC5C 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000BC60                            ; End of function Obj30_Types
0000BC60                            
0000BC60                            ; ===========================================================================
0000BC60 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000BC62 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000BC64 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000BC66 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000BC68 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000BC6A                            ; ===========================================================================
0000BC6A                            
0000BC6A                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000BC6A 4E75                       		rts	
0000BC6C                            ; ===========================================================================
0000BC6C                            
0000BC6C                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000BC6C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC70 323C 0040                  		move.w	#$40,d1
0000BC74 6000                       		bra.s	loc_B514
0000BC76                            ; ===========================================================================
0000BC76                            
0000BC76                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000BC76 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BC7A 323C 0040                  		move.w	#$40,d1
0000BC7E 4440                       		neg.w	d0
0000BC80 D041                       		add.w	d1,d0
0000BC82                            
0000BC82                            loc_B514:				; XREF: Obj30_Type01
0000BC82 0828 0003 0028             		btst	#3,$28(a0)
0000BC88 6700                       		beq.s	loc_B526
0000BC8A 4440                       		neg.w	d0
0000BC8C D041                       		add.w	d1,d0
0000BC8E E208                       		lsr.b	#1,d0
0000BC90 0640 0020                  		addi.w	#$20,d0
0000BC94                            
0000BC94                            loc_B526:
0000BC94 6000 0000                  		bra.w	loc_B5EE
0000BC98                            ; ===========================================================================
0000BC98                            
0000BC98                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000BC98 0828 0003 0028             		btst	#3,$28(a0)
0000BC9E 6700                       		beq.s	loc_B53E
0000BCA0 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BCA4 0440 0010                  		subi.w	#$10,d0
0000BCA8 6000 0000                  		bra.w	loc_B5EE
0000BCAC                            ; ===========================================================================
0000BCAC                            
0000BCAC                            loc_B53E:
0000BCAC 0828 0003 0022             		btst	#3,$22(a0)
0000BCB2 6600                       		bne.s	loc_B54E
0000BCB4 08A8 0000 0034             		bclr	#0,$34(a0)
0000BCBA 6000                       		bra.s	loc_B582
0000BCBC                            ; ===========================================================================
0000BCBC                            
0000BCBC                            loc_B54E:
0000BCBC 4A28 0034                  		tst.b	$34(a0)
0000BCC0 6600                       		bne.s	loc_B582
0000BCC2 117C 0001 0034             		move.b	#1,$34(a0)
0000BCC8 08E8 0000 0035             		bset	#0,$35(a0)
0000BCCE 6700                       		beq.s	loc_B582
0000BCD0 08E8 0007 0034             		bset	#7,$34(a0)
0000BCD6 317C 0010 0036             		move.w	#$10,$36(a0)
0000BCDC 117C 000A 0038             		move.b	#$A,$38(a0)
0000BCE2 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000BCE8 6600                       		bne.s	loc_B582
0000BCEA 317C 0040 0036             		move.w	#$40,$36(a0)
0000BCF0                            
0000BCF0                            loc_B582:
0000BCF0 4A28 0034                  		tst.b	$34(a0)
0000BCF4 6A00                       		bpl.s	loc_B5AA
0000BCF6 4A28 0038                  		tst.b	$38(a0)
0000BCFA 6700                       		beq.s	loc_B594
0000BCFC 5328 0038                  		subq.b	#1,$38(a0)
0000BD00 6600                       		bne.s	loc_B5AA
0000BD02                            
0000BD02                            loc_B594:
0000BD02 4A68 0032                  		tst.w	$32(a0)
0000BD06 6700                       		beq.s	loc_B5A4
0000BD08 5368 0032                  		subq.w	#1,$32(a0)
0000BD0C 5368 0036                  		subq.w	#1,$36(a0)
0000BD10 6600                       		bne.s	loc_B5AA
0000BD12                            
0000BD12                            loc_B5A4:
0000BD12 08A8 0007 0034             		bclr	#7,$34(a0)
0000BD18                            
0000BD18                            loc_B5AA:
0000BD18 3028 0032                  		move.w	$32(a0),d0
0000BD1C 6000                       		bra.s	loc_B5EE
0000BD1E                            ; ===========================================================================
0000BD1E                            
0000BD1E                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000BD1E 0828 0003 0028             		btst	#3,$28(a0)
0000BD24 6700                       		beq.s	Obj30_ChkSwitch
0000BD26 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000BD2A 0440 0010                  		subi.w	#$10,d0
0000BD2E 6000                       		bra.s	loc_B5EE
0000BD30                            ; ===========================================================================
0000BD30                            
0000BD30                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000BD30 4A28 0034                  		tst.b	$34(a0)
0000BD34 6600                       		bne.s	loc_B5E0
0000BD36 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000BD3A 7000                       		moveq	#0,d0
0000BD3C 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000BD40 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000BD42 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000BD46 6700                       		beq.s	loc_B5EA	; if not, branch
0000BD48 117C 0001 0034             		move.b	#1,$34(a0)
0000BD4E                            
0000BD4E                            loc_B5E0:
0000BD4E 4A68 0032                  		tst.w	$32(a0)
0000BD52 6700                       		beq.s	loc_B5EA
0000BD54 5568 0032                  		subq.w	#2,$32(a0)
0000BD58                            
0000BD58                            loc_B5EA:
0000BD58 3028 0032                  		move.w	$32(a0),d0
0000BD5C                            
0000BD5C                            loc_B5EE:
0000BD5C 3228 0030                  		move.w	$30(a0),d1
0000BD60 9240                       		sub.w	d0,d1
0000BD62 3141 000C                  		move.w	d1,$C(a0)
0000BD66 4E75                       		rts	
0000BD68                            ; ===========================================================================
0000BD68                            ; ---------------------------------------------------------------------------
0000BD68                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD68                            ; ---------------------------------------------------------------------------
0000BD68                            Map_obj30:
0000BD68                            	include "_maps\obj30.asm"
0000BD68                            ; ---------------------------------------------------------------------------
0000BD68                            ; Sprite mappings - large green	glassy blocks (MZ)
0000BD68                            ; ---------------------------------------------------------------------------
0000BD68 0000                       		dc.w byte_B600-Map_obj30
0000BD6A 0000                       		dc.w byte_B63D-Map_obj30
0000BD6C 0000                       		dc.w byte_B648-Map_obj30
0000BD6E 0C                         byte_B600:	dc.b $C
0000BD6F B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000BD74 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000BD79 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000BD7E C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000BD83 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000BD88 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000BD8D 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000BD92 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000BD97 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000BD9C 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000BDA1 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000BDA6 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000BDAB 02                         byte_B63D:	dc.b 2
0000BDAC 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000BDB1 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000BDB6 0A                         byte_B648:	dc.b $A
0000BDB7 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000BDBC C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000BDC1 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000BDC6 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000BDCB F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000BDD0 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000BDD5 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000BDDA 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000BDDF 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000BDE4 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000BDEA 00                         		even
0000BDEA 00                         		even
0000BDEA                            
0000BDEA                            ; ===========================================================================
0000BDEA                            ; ---------------------------------------------------------------------------
0000BDEA                            ; Object 31 - stomping metal blocks on chains (MZ)
0000BDEA                            ; ---------------------------------------------------------------------------
0000BDEA                            
0000BDEA                            Obj31:					; XREF: Obj_Index
0000BDEA 7000                       		moveq	#0,d0
0000BDEC 1028 0024                  		move.b	$24(a0),d0
0000BDF0 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000BDF4 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000BDF8                            ; ===========================================================================
0000BDF8 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000BDFA 0000                       		dc.w loc_B798-Obj31_Index
0000BDFC 0000                       		dc.w loc_B7FE-Obj31_Index
0000BDFE 0000                       		dc.w Obj31_Display2-Obj31_Index
0000BE00 0000                       		dc.w loc_B7E2-Obj31_Index
0000BE02                            
0000BE02 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000BE04 0100                       		dc.b 1,	0
0000BE06                            
0000BE06 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000BE09 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000BE0C 08CC 03                    		dc.b 8,	$CC, 3
0000BE0F 06F0 02                    		dc.b 6,	$F0, 2
0000BE12                            
0000BE12 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000BE16 5000 7800                  		dc.w $5000, $7800
0000BE1A 3800 5800                  		dc.w $3800, $5800
0000BE1E B800                       		dc.w $B800
0000BE20                            ; ===========================================================================
0000BE20                            
0000BE20                            Obj31_Main:				; XREF: Obj31_Index
0000BE20 7000                       		moveq	#0,d0
0000BE22 1028 0028                  		move.b	$28(a0),d0
0000BE26 6A00                       		bpl.s	loc_B6CE
0000BE28 0240 007F                  		andi.w	#$7F,d0
0000BE2C D040                       		add.w	d0,d0
0000BE2E 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000BE32 115A 003A                  		move.b	(a2)+,$3A(a0)
0000BE36 101A                       		move.b	(a2)+,d0
0000BE38 1140 0028                  		move.b	d0,$28(a0)
0000BE3C                            
0000BE3C                            loc_B6CE:
0000BE3C 0200 000F                  		andi.b	#$F,d0
0000BE40 D040                       		add.w	d0,d0
0000BE42 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000BE46 4A40                       		tst.w	d0
0000BE48 6600                       		bne.s	loc_B6E0
0000BE4A 3142 0032                  		move.w	d2,$32(a0)
0000BE4E                            
0000BE4E                            loc_B6E0:
0000BE4E 45F9 0000 BE06             		lea	(Obj31_Var).l,a2
0000BE54 2248                       		movea.l	a0,a1
0000BE56 7203                       		moveq	#3,d1
0000BE58 6000                       		bra.s	Obj31_MakeStomper
0000BE5A                            ; ===========================================================================
0000BE5A                            
0000BE5A                            Obj31_Loop:
0000BE5A 6100 0000                  		bsr.w	SingleObjLoad2
0000BE5E 6600 0000                  		bne.w	Obj31_SetSize
0000BE62                            
0000BE62                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000BE62 135A 0024                  		move.b	(a2)+,$24(a1)
0000BE66 12BC 0031                  		move.b	#$31,0(a1)
0000BE6A 3368 0008 0008             		move.w	8(a0),8(a1)
0000BE70 101A                       		move.b	(a2)+,d0
0000BE72 4880                       		ext.w	d0
0000BE74 D068 000C                  		add.w	$C(a0),d0
0000BE78 3340 000C                  		move.w	d0,$C(a1)
0000BE7C 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000BE84 337C 0300 0002             		move.w	#$300,2(a1)
0000BE8A 137C 0004 0001             		move.b	#4,1(a1)
0000BE90 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000BE96 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BE9C 137C 0010 0019             		move.b	#$10,$19(a1)
0000BEA2 3342 0034                  		move.w	d2,$34(a1)
0000BEA6 137C 0004 0018             		move.b	#4,$18(a1)
0000BEAC 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BEB0 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000BEB6 6600                       		bne.s	loc_B76A
0000BEB8 5341                       		subq.w	#1,d1
0000BEBA 1028 0028                  		move.b	$28(a0),d0
0000BEBE 0240 00F0                  		andi.w	#$F0,d0
0000BEC2 0C40 0020                  		cmpi.w	#$20,d0
0000BEC6 679A                       		beq.s	Obj31_MakeStomper
0000BEC8 137C 0038 0019             		move.b	#$38,$19(a1)
0000BECE 137C 0090 0020             		move.b	#$90,$20(a1)
0000BED4 5241                       		addq.w	#1,d1
0000BED6                            
0000BED6                            loc_B76A:
0000BED6 2348 003C                  		move.l	a0,$3C(a1)
0000BEDA 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000BEDE                            
0000BEDE 137C 0003 0018             		move.b	#3,$18(a1)
0000BEE4                            
0000BEE4                            Obj31_SetSize:
0000BEE4 7000                       		moveq	#0,d0
0000BEE6 1028 0028                  		move.b	$28(a0),d0
0000BEEA E648                       		lsr.w	#3,d0
0000BEEC 0200 000E                  		andi.b	#$E,d0
0000BEF0 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000BEF4 115A 0019                  		move.b	(a2)+,$19(a0)
0000BEF8 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BEFC 6000                       		bra.s	loc_B798
0000BEFE                            ; ===========================================================================
0000BEFE 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000BF00 3009                       		dc.b $30, 9
0000BF02 100A                       		dc.b $10, $A
0000BF04                            ; ===========================================================================
0000BF04                            
0000BF04                            loc_B798:				; XREF: Obj31_Index
0000BF04 6100 0000                  		bsr.w	Obj31_Types
0000BF08 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000BF0E 7200                       		moveq	#0,d1
0000BF10 1228 0019                  		move.b	$19(a0),d1
0000BF14 0641 000B                  		addi.w	#$B,d1
0000BF18 343C 000C                  		move.w	#$C,d2
0000BF1C 363C 000D                  		move.w	#$D,d3
0000BF20 3828 0008                  		move.w	8(a0),d4
0000BF24 6100 0000                  		bsr.w	SolidObject
0000BF28 0828 0003 0022             		btst	#3,$22(a0)
0000BF2E 6700                       		beq.s	Obj31_Display
0000BF30 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BF36 6400                       		bcc.s	Obj31_Display
0000BF38 2448                       		movea.l	a0,a2
0000BF3A 41F8 D000                  		lea	($FFFFD000).w,a0
0000BF3E 4EB9 0000 0000             		jsr	KillSonic
0000BF44 204A                       		movea.l	a2,a0
0000BF46                            
0000BF46                            Obj31_Display:
0000BF46 6100 0000                  		bsr.w	DisplaySprite
0000BF4A 6000 0000                  		bra.w	Obj31_ChkDel
0000BF4E                            ; ===========================================================================
0000BF4E                            
0000BF4E                            loc_B7E2:				; XREF: Obj31_Index
0000BF4E 117C 0080 0016             		move.b	#$80,$16(a0)
0000BF54 08E8 0004 0001             		bset	#4,1(a0)
0000BF5A 2268 003C                  		movea.l	$3C(a0),a1
0000BF5E 1029 0032                  		move.b	$32(a1),d0
0000BF62 EA08                       		lsr.b	#5,d0
0000BF64 5600                       		addq.b	#3,d0
0000BF66 1140 001A                  		move.b	d0,$1A(a0)
0000BF6A                            
0000BF6A                            loc_B7FE:				; XREF: Obj31_Index
0000BF6A 2268 003C                  		movea.l	$3C(a0),a1
0000BF6E 7000                       		moveq	#0,d0
0000BF70 1029 0032                  		move.b	$32(a1),d0
0000BF74 D068 0030                  		add.w	$30(a0),d0
0000BF78 3140 000C                  		move.w	d0,$C(a0)
0000BF7C                            
0000BF7C                            Obj31_Display2:				; XREF: Obj31_Index
0000BF7C 6100 0000                  		bsr.w	DisplaySprite
0000BF80                            
0000BF80                            Obj31_ChkDel:				; XREF: Obj31_Display
0000BF80 3028 0008                  		move.w	8(a0),d0
0000BF84 0240 FF80                  		andi.w	#$FF80,d0
0000BF88 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF8C 0441 0080                  		subi.w	#$80,d1
0000BF90 0241 FF80                  		andi.w	#$FF80,d1
0000BF94 9041                       		sub.w	d1,d0
0000BF96 0C40 0280                  		cmpi.w	#$280,d0
0000BF9A 6200 0000                  		bhi.w	DeleteObject
0000BF9E 4E75                       		rts	
0000BFA0                            ; ===========================================================================
0000BFA0                            
0000BFA0                            Obj31_Types:				; XREF: loc_B798
0000BFA0 1028 0028                  		move.b	$28(a0),d0
0000BFA4 0240 000F                  		andi.w	#$F,d0
0000BFA8 D040                       		add.w	d0,d0
0000BFAA 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000BFAE 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000BFB2                            ; ===========================================================================
0000BFB2 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000BFB4 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFB6 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFB8 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFBA 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFBC 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000BFBE 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000BFC0                            ; ===========================================================================
0000BFC0                            
0000BFC0                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000BFC0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000BFC4 7000                       		moveq	#0,d0
0000BFC6 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000BFCA 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000BFCE 6700                       		beq.s	loc_B8A8	; if not, branch
0000BFD0 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000BFD4 6A00                       		bpl.s	loc_B872
0000BFD6 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000BFDC 6700                       		beq.s	loc_B8A0
0000BFDE                            
0000BFDE                            loc_B872:
0000BFDE 4A68 0032                  		tst.w	$32(a0)
0000BFE2 6700                       		beq.s	loc_B8A0
0000BFE4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000BFE8 0200 000F                  		andi.b	#$F,d0
0000BFEC 6600                       		bne.s	loc_B892
0000BFEE 4A28 0001                  		tst.b	1(a0)
0000BFF2 6A00                       		bpl.s	loc_B892
0000BFF4 303C 00C7                  		move.w	#$C7,d0
0000BFF8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000BFFE                            
0000BFFE                            loc_B892:
0000BFFE 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C004 6400                       		bcc.s	Obj31_Restart
0000C006 317C 0000 0032             		move.w	#0,$32(a0)
0000C00C                            
0000C00C                            loc_B8A0:
0000C00C 317C 0000 0012             		move.w	#0,$12(a0)
0000C012 6000                       		bra.s	Obj31_Restart
0000C014                            ; ===========================================================================
0000C014                            
0000C014                            loc_B8A8:				; XREF: Obj31_Type00
0000C014 3228 0034                  		move.w	$34(a0),d1
0000C018 B268 0032                  		cmp.w	$32(a0),d1
0000C01C 6700                       		beq.s	Obj31_Restart
0000C01E 3028 0012                  		move.w	$12(a0),d0
0000C022 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C028 D168 0032                  		add.w	d0,$32(a0)
0000C02C B268 0032                  		cmp.w	$32(a0),d1
0000C030 6200                       		bhi.s	Obj31_Restart
0000C032 3141 0032                  		move.w	d1,$32(a0)
0000C036 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C03C 4A28 0001                  		tst.b	1(a0)
0000C040 6A00                       		bpl.s	Obj31_Restart
0000C042 303C 00BD                  		move.w	#$BD,d0
0000C046 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C04C                            
0000C04C                            Obj31_Restart:
0000C04C 7000                       		moveq	#0,d0
0000C04E 1028 0032                  		move.b	$32(a0),d0
0000C052 D068 0030                  		add.w	$30(a0),d0
0000C056 3140 000C                  		move.w	d0,$C(a0)
0000C05A 4E75                       		rts	
0000C05C                            ; ===========================================================================
0000C05C                            
0000C05C                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C05C 4A68 0036                  		tst.w	$36(a0)
0000C060 6700                       		beq.s	loc_B938
0000C062 4A68 0038                  		tst.w	$38(a0)
0000C066 6700                       		beq.s	loc_B902
0000C068 5368 0038                  		subq.w	#1,$38(a0)
0000C06C 6000                       		bra.s	loc_B97C
0000C06E                            ; ===========================================================================
0000C06E                            
0000C06E                            loc_B902:
0000C06E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C072 0200 000F                  		andi.b	#$F,d0
0000C076 6600                       		bne.s	loc_B91C
0000C078 4A28 0001                  		tst.b	1(a0)
0000C07C 6A00                       		bpl.s	loc_B91C
0000C07E 303C 00C7                  		move.w	#$C7,d0
0000C082 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C088                            
0000C088                            loc_B91C:
0000C088 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C08E 6400                       		bcc.s	loc_B97C
0000C090 317C 0000 0032             		move.w	#0,$32(a0)
0000C096 317C 0000 0012             		move.w	#0,$12(a0)
0000C09C 317C 0000 0036             		move.w	#0,$36(a0)
0000C0A2 6000                       		bra.s	loc_B97C
0000C0A4                            ; ===========================================================================
0000C0A4                            
0000C0A4                            loc_B938:				; XREF: Obj31_Type01
0000C0A4 3228 0034                  		move.w	$34(a0),d1
0000C0A8 B268 0032                  		cmp.w	$32(a0),d1
0000C0AC 6700                       		beq.s	loc_B97C
0000C0AE 3028 0012                  		move.w	$12(a0),d0
0000C0B2 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C0B8 D168 0032                  		add.w	d0,$32(a0)
0000C0BC B268 0032                  		cmp.w	$32(a0),d1
0000C0C0 6200                       		bhi.s	loc_B97C
0000C0C2 3141 0032                  		move.w	d1,$32(a0)
0000C0C6 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C0CC 317C 0001 0036             		move.w	#1,$36(a0)
0000C0D2 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C0D8 4A28 0001                  		tst.b	1(a0)
0000C0DC 6A00                       		bpl.s	loc_B97C
0000C0DE 303C 00BD                  		move.w	#$BD,d0
0000C0E2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C0E8                            
0000C0E8                            loc_B97C:
0000C0E8 6000 FF62                  		bra.w	Obj31_Restart
0000C0EC                            ; ===========================================================================
0000C0EC                            
0000C0EC                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C0EC 3038 D008                  		move.w	($FFFFD008).w,d0
0000C0F0 9068 0008                  		sub.w	8(a0),d0
0000C0F4 6400                       		bcc.s	loc_B98C
0000C0F6 4440                       		neg.w	d0
0000C0F8                            
0000C0F8                            loc_B98C:
0000C0F8 0C40 0090                  		cmpi.w	#$90,d0
0000C0FC 6400                       		bcc.s	loc_B996
0000C0FE 5228 0028                  		addq.b	#1,$28(a0)
0000C102                            
0000C102                            loc_B996:
0000C102 6000 FF48                  		bra.w	Obj31_Restart
0000C106                            ; ===========================================================================
0000C106                            ; ---------------------------------------------------------------------------
0000C106                            ; Object 45 - spiked metal block from beta version (MZ)
0000C106                            ; ---------------------------------------------------------------------------
0000C106                            
0000C106                            Obj45:					; XREF: Obj_Index
0000C106 7000                       		moveq	#0,d0
0000C108 1028 0024                  		move.b	$24(a0),d0
0000C10C 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C110 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C114                            ; ===========================================================================
0000C114 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C116 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C118 0000                       		dc.w loc_BA8E-Obj45_Index
0000C11A 0000                       		dc.w Obj45_Display-Obj45_Index
0000C11C 0000                       		dc.w loc_BA7A-Obj45_Index
0000C11E                            
0000C11E 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C121 04E4 01                    		dc.b	4, $E4,	  1
0000C124 0834 03                    		dc.b	8, $34,	  3
0000C127 0628 02                    		dc.b	6, $28,	  2
0000C12A                            
0000C12A 3800                       word_B9BE:	dc.w $3800
0000C12C A000                       		dc.w -$6000
0000C12E 5000                       		dc.w $5000
0000C130                            ; ===========================================================================
0000C130                            
0000C130                            Obj45_Main:				; XREF: Obj45_Index
0000C130 7000                       		moveq	#0,d0
0000C132 1028 0028                  		move.b	$28(a0),d0
0000C136 D040                       		add.w	d0,d0
0000C138 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C13C 45F9 0000 C11E             		lea	(Obj45_Var).l,a2
0000C142 2248                       		movea.l	a0,a1
0000C144 7203                       		moveq	#3,d1
0000C146 6000                       		bra.s	Obj45_Load
0000C148                            ; ===========================================================================
0000C148                            
0000C148                            Obj45_Loop:
0000C148 6100 0000                  		bsr.w	SingleObjLoad2
0000C14C 6600                       		bne.s	loc_BA52
0000C14E                            
0000C14E                            Obj45_Load:				; XREF: Obj45_Main
0000C14E 135A 0024                  		move.b	(a2)+,$24(a1)
0000C152 12BC 0045                  		move.b	#$45,0(a1)
0000C156 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C15C 101A                       		move.b	(a2)+,d0
0000C15E 4880                       		ext.w	d0
0000C160 D068 0008                  		add.w	8(a0),d0
0000C164 3340 0008                  		move.w	d0,8(a1)
0000C168 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000C170 337C 0300 0002             		move.w	#$300,2(a1)
0000C176 137C 0004 0001             		move.b	#4,1(a1)
0000C17C 3369 0008 0030             		move.w	8(a1),$30(a1)
0000C182 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000C188 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C18E 137C 0020 0019             		move.b	#$20,$19(a1)
0000C194 3342 0034                  		move.w	d2,$34(a1)
0000C198 137C 0004 0018             		move.b	#4,$18(a1)
0000C19E 0C12 0001                  		cmpi.b	#1,(a2)
0000C1A2 6600                       		bne.s	loc_BA40
0000C1A4 137C 0091 0020             		move.b	#$91,$20(a1)
0000C1AA                            
0000C1AA                            loc_BA40:
0000C1AA 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C1AE 2348 003C                  		move.l	a0,$3C(a1)
0000C1B2 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000C1B6                            
0000C1B6 137C 0003 0018             		move.b	#3,$18(a1)
0000C1BC                            
0000C1BC                            loc_BA52:
0000C1BC 117C 0010 0019             		move.b	#$10,$19(a0)
0000C1C2                            
0000C1C2                            Obj45_Solid:				; XREF: Obj45_Index
0000C1C2 3F28 0008                  		move.w	8(a0),-(sp)
0000C1C6 6100 0000                  		bsr.w	Obj45_Move
0000C1CA 323C 0017                  		move.w	#$17,d1
0000C1CE 343C 0020                  		move.w	#$20,d2
0000C1D2 363C 0020                  		move.w	#$20,d3
0000C1D6 381F                       		move.w	(sp)+,d4
0000C1D8 6100 0000                  		bsr.w	SolidObject
0000C1DC 6100 0000                  		bsr.w	DisplaySprite
0000C1E0 6000 0000                  		bra.w	Obj45_ChkDel
0000C1E4                            ; ===========================================================================
0000C1E4                            
0000C1E4                            loc_BA7A:				; XREF: Obj45_Index
0000C1E4 2268 003C                  		movea.l	$3C(a0),a1
0000C1E8 1029 0032                  		move.b	$32(a1),d0
0000C1EC 0600 0010                  		addi.b	#$10,d0
0000C1F0 EA08                       		lsr.b	#5,d0
0000C1F2 5600                       		addq.b	#3,d0
0000C1F4 1140 001A                  		move.b	d0,$1A(a0)
0000C1F8                            
0000C1F8                            loc_BA8E:				; XREF: Obj45_Index
0000C1F8 2268 003C                  		movea.l	$3C(a0),a1
0000C1FC 7000                       		moveq	#0,d0
0000C1FE 1029 0032                  		move.b	$32(a1),d0
0000C202 4440                       		neg.w	d0
0000C204 D068 0030                  		add.w	$30(a0),d0
0000C208 3140 0008                  		move.w	d0,8(a0)
0000C20C                            
0000C20C                            Obj45_Display:				; XREF: Obj45_Index
0000C20C 6100 0000                  		bsr.w	DisplaySprite
0000C210                            
0000C210                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000C210 3028 003A                  		move.w	$3A(a0),d0
0000C214 0240 FF80                  		andi.w	#$FF80,d0
0000C218 3238 F700                  		move.w	($FFFFF700).w,d1
0000C21C 0441 0080                  		subi.w	#$80,d1
0000C220 0241 FF80                  		andi.w	#$FF80,d1
0000C224 9041                       		sub.w	d1,d0
0000C226 0C40 0280                  		cmpi.w	#$280,d0
0000C22A 6200 0000                  		bhi.w	DeleteObject
0000C22E 4E75                       		rts	
0000C230                            
0000C230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C230                            
0000C230                            
0000C230                            Obj45_Move:				; XREF: Obj45_Solid
0000C230 7000                       		moveq	#0,d0
0000C232 1028 0028                  		move.b	$28(a0),d0
0000C236 D040                       		add.w	d0,d0
0000C238 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000C23C 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000C240                            ; End of function Obj45_Move
0000C240                            
0000C240                            ; ===========================================================================
0000C240 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000C242 0000                       		dc.w loc_BADA-off_BAD6
0000C244                            ; ===========================================================================
0000C244                            
0000C244                            loc_BADA:				; XREF: off_BAD6
0000C244 4A68 0036                  		tst.w	$36(a0)
0000C248 6700                       		beq.s	loc_BB08
0000C24A 4A68 0038                  		tst.w	$38(a0)
0000C24E 6700                       		beq.s	loc_BAEC
0000C250 5368 0038                  		subq.w	#1,$38(a0)
0000C254 6000                       		bra.s	loc_BB3C
0000C256                            ; ===========================================================================
0000C256                            
0000C256                            loc_BAEC:
0000C256 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C25C 6400                       		bcc.s	loc_BB3C
0000C25E 317C 0000 0032             		move.w	#0,$32(a0)
0000C264 317C 0000 0010             		move.w	#0,$10(a0)
0000C26A 317C 0000 0036             		move.w	#0,$36(a0)
0000C270 6000                       		bra.s	loc_BB3C
0000C272                            ; ===========================================================================
0000C272                            
0000C272                            loc_BB08:				; XREF: loc_BADA
0000C272 3228 0034                  		move.w	$34(a0),d1
0000C276 B268 0032                  		cmp.w	$32(a0),d1
0000C27A 6700                       		beq.s	loc_BB3C
0000C27C 3028 0010                  		move.w	$10(a0),d0
0000C280 0668 0070 0010             		addi.w	#$70,$10(a0)
0000C286 D168 0032                  		add.w	d0,$32(a0)
0000C28A B268 0032                  		cmp.w	$32(a0),d1
0000C28E 6200                       		bhi.s	loc_BB3C
0000C290 3141 0032                  		move.w	d1,$32(a0)
0000C294 317C 0000 0010             		move.w	#0,$10(a0)
0000C29A 317C 0001 0036             		move.w	#1,$36(a0)
0000C2A0 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C2A6                            
0000C2A6                            loc_BB3C:
0000C2A6 7000                       		moveq	#0,d0
0000C2A8 1028 0032                  		move.b	$32(a0),d0
0000C2AC 4440                       		neg.w	d0
0000C2AE D068 0030                  		add.w	$30(a0),d0
0000C2B2 3140 0008                  		move.w	d0,8(a0)
0000C2B6 4E75                       		rts	
0000C2B8                            ; ===========================================================================
0000C2B8                            ; ---------------------------------------------------------------------------
0000C2B8                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C2B8                            ; ---------------------------------------------------------------------------
0000C2B8                            Map_obj31:
0000C2B8                            	include "_maps\obj31.asm"
0000C2B8                            ; ---------------------------------------------------------------------------
0000C2B8                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000C2B8                            ; ---------------------------------------------------------------------------
0000C2B8 0000                       		dc.w byte_BB64-Map_obj31
0000C2BA 0000                       		dc.w byte_BB7E-Map_obj31
0000C2BC 0000                       		dc.w byte_BB98-Map_obj31
0000C2BE 0000                       		dc.w byte_BB9E-Map_obj31
0000C2C0 0000                       		dc.w byte_BBA9-Map_obj31
0000C2C2 0000                       		dc.w byte_BBBE-Map_obj31
0000C2C4 0000                       		dc.w byte_BBDD-Map_obj31
0000C2C6 0000                       		dc.w byte_BC06-Map_obj31
0000C2C8 0000                       		dc.w byte_BC06-Map_obj31
0000C2CA 0000                       		dc.w byte_BC39-Map_obj31
0000C2CC 0000                       		dc.w byte_BC53-Map_obj31
0000C2CE 05                         byte_BB64:	dc.b 5
0000C2CF F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000C2D4 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000C2D9 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C2DE F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000C2E3 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000C2E8 05                         byte_BB7E:	dc.b 5
0000C2E9 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000C2EE F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000C2F3 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000C2F8 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000C2FD F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000C302 01                         byte_BB98:	dc.b 1
0000C303 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000C308 02                         byte_BB9E:	dc.b 2
0000C309 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C30E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C313 04                         byte_BBA9:	dc.b 4
0000C314 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C319 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C31E 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C323 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C328 06                         byte_BBBE:	dc.b 6
0000C329 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C32E D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C333 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C338 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C33D 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C342 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C347 08                         byte_BBDD:	dc.b 8
0000C348 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C34D B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C352 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C357 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C35C E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C361 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C366 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C36B 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C370 0A                         byte_BC06:	dc.b $A
0000C371 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000C376 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000C37B A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000C380 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000C385 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000C38A D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000C38F E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000C394 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000C399 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000C39E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000C3A3 05                         byte_BC39:	dc.b 5
0000C3A4 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000C3A9 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000C3AE F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000C3B3 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000C3B8 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000C3BD 01                         byte_BC53:	dc.b 1
0000C3BE EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000C3C4 00                         		even
0000C3C4 00                         		even
0000C3C4                            
0000C3C4                            ; ---------------------------------------------------------------------------
0000C3C4                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3C4                            ; ---------------------------------------------------------------------------
0000C3C4                            Map_obj45:
0000C3C4                            	include "_maps\obj45.asm"
0000C3C4                            ; ---------------------------------------------------------------------------
0000C3C4                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000C3C4                            ; ---------------------------------------------------------------------------
0000C3C4 0000                       		dc.w byte_BC6C-Map_obj45
0000C3C6 0000                       		dc.w byte_BC7C-Map_obj45
0000C3C8 0000                       		dc.w byte_BC8C-Map_obj45
0000C3CA 0000                       		dc.w byte_BC92-Map_obj45
0000C3CC 0000                       		dc.w byte_BC9D-Map_obj45
0000C3CE 0000                       		dc.w byte_BCB2-Map_obj45
0000C3D0 0000                       		dc.w byte_BCD1-Map_obj45
0000C3D2 0000                       		dc.w byte_BCFA-Map_obj45
0000C3D4 0000                       		dc.w byte_BCFA-Map_obj45
0000C3D6 03                         byte_BC6C:	dc.b 3
0000C3D7 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000C3DC 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000C3E1 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000C3E6 03                         byte_BC7C:	dc.b 3
0000C3E7 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000C3EC FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000C3F1 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000C3F6 01                         byte_BC8C:	dc.b 1
0000C3F7 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000C3FC 02                         byte_BC92:	dc.b 2
0000C3FD F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C402 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C407 04                         byte_BC9D:	dc.b 4
0000C408 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C40D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C412 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C417 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C41C 06                         byte_BCB2:	dc.b 6
0000C41D F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C422 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C427 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C42C F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C431 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C436 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C43B 08                         byte_BCD1:	dc.b 8
0000C43C F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C441 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C446 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C44B F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C450 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C455 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C45A F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C45F F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C464 08                         byte_BCFA:	dc.b 8
0000C465 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000C46A F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000C46F F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000C474 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000C479 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000C47E F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000C483 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000C488 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000C48D F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000C492 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000C498 00                         		even
0000C498 00                         		even
0000C498                            
0000C498                            ; ===========================================================================
0000C498                            ; ---------------------------------------------------------------------------
0000C498                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000C498                            ; ---------------------------------------------------------------------------
0000C498                            
0000C498                            Obj32:					; XREF: Obj_Index
0000C498 7000                       		moveq	#0,d0
0000C49A 1028 0024                  		move.b	$24(a0),d0
0000C49E 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000C4A2 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000C4A6                            ; ===========================================================================
0000C4A6 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000C4A8 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000C4AA                            ; ===========================================================================
0000C4AA                            
0000C4AA                            Obj32_Main:				; XREF: Obj32_Index
0000C4AA 5428 0024                  		addq.b	#2,$24(a0)
0000C4AE 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000C4B6 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000C4BC 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000C4C2 6700                       		beq.s	loc_BD60
0000C4C4 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000C4CA                            
0000C4CA                            loc_BD60:
0000C4CA 117C 0004 0001             		move.b	#4,1(a0)
0000C4D0 117C 0010 0019             		move.b	#$10,$19(a0)
0000C4D6 117C 0004 0018             		move.b	#4,$18(a0)
0000C4DC 5668 000C                  		addq.w	#3,$C(a0)
0000C4E0                            
0000C4E0                            Obj32_Pressed:				; XREF: Obj32_Index
0000C4E0 4A28 0001                  		tst.b	1(a0)
0000C4E4 6A00                       		bpl.s	Obj32_Display
0000C4E6 323C 001B                  		move.w	#$1B,d1
0000C4EA 343C 0005                  		move.w	#5,d2
0000C4EE 363C 0005                  		move.w	#5,d3
0000C4F2 3828 0008                  		move.w	8(a0),d4
0000C4F6 6100 0000                  		bsr.w	SolidObject
0000C4FA 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000C500 1028 0028                  		move.b	$28(a0),d0
0000C504 0240 000F                  		andi.w	#$F,d0
0000C508 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000C50C 47F3 0000                  		lea	(a3,d0.w),a3
0000C510 7600                       		moveq	#0,d3
0000C512 0828 0006 0028             		btst	#6,$28(a0)
0000C518 6700                       		beq.s	loc_BDB2
0000C51A 7607                       		moveq	#7,d3
0000C51C                            
0000C51C                            loc_BDB2:
0000C51C 4A28 0028                  		tst.b	$28(a0)
0000C520 6A00                       		bpl.s	loc_BDBE
0000C522 6100 0000                  		bsr.w	Obj32_MZBlock
0000C526 6600                       		bne.s	loc_BDC8
0000C528                            
0000C528                            loc_BDBE:
0000C528 4A28 0025                  		tst.b	$25(a0)
0000C52C 6600                       		bne.s	loc_BDC8
0000C52E 0793                       		bclr	d3,(a3)
0000C530 6000                       		bra.s	loc_BDDE
0000C532                            ; ===========================================================================
0000C532                            
0000C532                            loc_BDC8:
0000C532 4A13                       		tst.b	(a3)
0000C534 6600                       		bne.s	loc_BDD6
0000C536 303C 00CD                  		move.w	#$CD,d0
0000C53A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play switch sound
0000C540                            
0000C540                            loc_BDD6:
0000C540 07D3                       		bset	d3,(a3)
0000C542 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000C548                            
0000C548                            loc_BDDE:
0000C548 0828 0005 0028             		btst	#5,$28(a0)
0000C54E 6700                       		beq.s	Obj32_Display
0000C550 5328 001E                  		subq.b	#1,$1E(a0)
0000C554 6A00                       		bpl.s	Obj32_Display
0000C556 117C 0007 001E             		move.b	#7,$1E(a0)
0000C55C 0868 0001 001A             		bchg	#1,$1A(a0)
0000C562                            
0000C562                            Obj32_Display:
0000C562 6100 0000                  		bsr.w	DisplaySprite
0000C566 3028 0008                  		move.w	8(a0),d0
0000C56A 0240 FF80                  		andi.w	#$FF80,d0
0000C56E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C572 0441 0080                  		subi.w	#$80,d1
0000C576 0241 FF80                  		andi.w	#$FF80,d1
0000C57A 9041                       		sub.w	d1,d0
0000C57C 0C40 0280                  		cmpi.w	#$280,d0
0000C580 6200 0000                  		bhi.w	Obj32_Delete
0000C584 4E75                       		rts	
0000C586                            ; ===========================================================================
0000C586                            
0000C586                            Obj32_Delete:
0000C586 6100 0000                  		bsr.w	DeleteObject
0000C58A 4E75                       		rts	
0000C58C                            
0000C58C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C58C                            
0000C58C                            
0000C58C                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000C58C 3F03                       		move.w	d3,-(sp)
0000C58E 3428 0008                  		move.w	8(a0),d2
0000C592 3628 000C                  		move.w	$C(a0),d3
0000C596 0442 0010                  		subi.w	#$10,d2
0000C59A 5143                       		subq.w	#8,d3
0000C59C 383C 0020                  		move.w	#$20,d4
0000C5A0 3A3C 0010                  		move.w	#$10,d5
0000C5A4 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000C5A8 3C3C 005F                  		move.w	#$5F,d6
0000C5AC                            
0000C5AC                            Obj32_MZLoop:
0000C5AC 4A29 0001                  		tst.b	1(a1)
0000C5B0 6A00                       		bpl.s	loc_BE4E
0000C5B2 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000C5B6 6700                       		beq.s	loc_BE5E	; if yes, branch
0000C5B8                            
0000C5B8                            loc_BE4E:
0000C5B8 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000C5BC 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000C5C0                            
0000C5C0 361F                       		move.w	(sp)+,d3
0000C5C2 7000                       		moveq	#0,d0
0000C5C4                            
0000C5C4                            locret_BE5A:
0000C5C4 4E75                       		rts	
0000C5C6                            ; ===========================================================================
0000C5C6 1010                       Obj32_MZData:	dc.b $10, $10
0000C5C8                            ; ===========================================================================
0000C5C8                            
0000C5C8                            loc_BE5E:				; XREF: Obj32_MZBlock
0000C5C8 7001                       		moveq	#1,d0
0000C5CA 0240 003F                  		andi.w	#$3F,d0
0000C5CE D040                       		add.w	d0,d0
0000C5D0 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000C5D4 121A                       		move.b	(a2)+,d1
0000C5D6 4881                       		ext.w	d1
0000C5D8 3029 0008                  		move.w	8(a1),d0
0000C5DC 9041                       		sub.w	d1,d0
0000C5DE 9042                       		sub.w	d2,d0
0000C5E0 6400                       		bcc.s	loc_BE80
0000C5E2 D241                       		add.w	d1,d1
0000C5E4 D041                       		add.w	d1,d0
0000C5E6 6500                       		bcs.s	loc_BE84
0000C5E8 60CE                       		bra.s	loc_BE4E
0000C5EA                            ; ===========================================================================
0000C5EA                            
0000C5EA                            loc_BE80:
0000C5EA B044                       		cmp.w	d4,d0
0000C5EC 62CA                       		bhi.s	loc_BE4E
0000C5EE                            
0000C5EE                            loc_BE84:
0000C5EE 121A                       		move.b	(a2)+,d1
0000C5F0 4881                       		ext.w	d1
0000C5F2 3029 000C                  		move.w	$C(a1),d0
0000C5F6 9041                       		sub.w	d1,d0
0000C5F8 9043                       		sub.w	d3,d0
0000C5FA 6400                       		bcc.s	loc_BE9A
0000C5FC D241                       		add.w	d1,d1
0000C5FE D041                       		add.w	d1,d0
0000C600 6500                       		bcs.s	loc_BE9E
0000C602 60B4                       		bra.s	loc_BE4E
0000C604                            ; ===========================================================================
0000C604                            
0000C604                            loc_BE9A:
0000C604 B045                       		cmp.w	d5,d0
0000C606 62B0                       		bhi.s	loc_BE4E
0000C608                            
0000C608                            loc_BE9E:
0000C608 361F                       		move.w	(sp)+,d3
0000C60A 7001                       		moveq	#1,d0
0000C60C 4E75                       		rts	
0000C60E                            ; End of function Obj32_MZBlock
0000C60E                            
0000C60E                            ; ===========================================================================
0000C60E                            ; ---------------------------------------------------------------------------
0000C60E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C60E                            ; ---------------------------------------------------------------------------
0000C60E                            Map_obj32:
0000C60E                            	include "_maps\obj32.asm"
0000C60E                            ; ---------------------------------------------------------------------------
0000C60E                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000C60E                            ; ---------------------------------------------------------------------------
0000C60E 0000                       		dc.w byte_BEAC-Map_obj32
0000C610 0000                       		dc.w byte_BEB7-Map_obj32
0000C612 0000                       		dc.w byte_BEC2-Map_obj32
0000C614 0000                       		dc.w byte_BEB7-Map_obj32
0000C616 02                         byte_BEAC:	dc.b 2
0000C617 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000C61C F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000C621 02                         byte_BEB7:	dc.b 2
0000C622 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000C627 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000C62C 02                         byte_BEC2:	dc.b 2
0000C62D F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000C632 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000C637 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000C63C                            		even
0000C63C                            		even
0000C63C                            
0000C63C                            ; ===========================================================================
0000C63C                            ; ---------------------------------------------------------------------------
0000C63C                            ; Object 33 - pushable blocks (MZ, LZ)
0000C63C                            ; ---------------------------------------------------------------------------
0000C63C                            
0000C63C                            Obj33:					; XREF: Obj_Index
0000C63C 7000                       		moveq	#0,d0
0000C63E 1028 0024                  		move.b	$24(a0),d0
0000C642 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000C646 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000C64A                            ; ===========================================================================
0000C64A 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000C64C 0000                       		dc.w loc_BF6E-Obj33_Index
0000C64E 0000                       		dc.w loc_C02C-Obj33_Index
0000C650                            
0000C650 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000C652 4001                       		dc.b $40, 1
0000C654                            ; ===========================================================================
0000C654                            
0000C654                            Obj33_Main:				; XREF: Obj33_Index
0000C654 5428 0024                  		addq.b	#2,$24(a0)
0000C658 117C 000F 0016             		move.b	#$F,$16(a0)
0000C65E 117C 000F 0017             		move.b	#$F,$17(a0)
0000C664 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000C66C 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000C672 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000C678 6600                       		bne.s	loc_BF16
0000C67A 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000C680                            
0000C680                            loc_BF16:
0000C680 117C 0004 0001             		move.b	#4,1(a0)
0000C686 117C 0003 0018             		move.b	#3,$18(a0)
0000C68C 3168 0008 0034             		move.w	8(a0),$34(a0)
0000C692 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000C698 7000                       		moveq	#0,d0
0000C69A 1028 0028                  		move.b	$28(a0),d0
0000C69E D040                       		add.w	d0,d0
0000C6A0 0240 000E                  		andi.w	#$E,d0
0000C6A4 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C6A8 115A 0019                  		move.b	(a2)+,$19(a0)
0000C6AC 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C6B0 4A28 0028                  		tst.b	$28(a0)
0000C6B4 6700                       		beq.s	Obj33_ChkGone
0000C6B6 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C6BC                            
0000C6BC                            Obj33_ChkGone:
0000C6BC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C6C0 7000                       		moveq	#0,d0
0000C6C2 1028 0023                  		move.b	$23(a0),d0
0000C6C6 6700                       		beq.s	loc_BF6E
0000C6C8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C6CE 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C6D4 6600 0000                  		bne.w	DeleteObject
0000C6D8                            
0000C6D8                            loc_BF6E:				; XREF: Obj33_Index
0000C6D8 4A28 0032                  		tst.b	$32(a0)
0000C6DC 6600 0000                  		bne.w	loc_C046
0000C6E0 7200                       		moveq	#0,d1
0000C6E2 1228 0019                  		move.b	$19(a0),d1
0000C6E6 0641 000B                  		addi.w	#$B,d1
0000C6EA 343C 0010                  		move.w	#$10,d2
0000C6EE 363C 0011                  		move.w	#$11,d3
0000C6F2 3828 0008                  		move.w	8(a0),d4
0000C6F6 6100 0000                  		bsr.w	loc_C186
0000C6FA 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C700 6600                       		bne.s	loc_BFC6	; if not, branch
0000C702 08A8 0007 0028             		bclr	#7,$28(a0)
0000C708 3028 0008                  		move.w	8(a0),d0
0000C70C 0C40 0A20                  		cmpi.w	#$A20,d0
0000C710 6500                       		bcs.s	loc_BFC6
0000C712 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C716 6400                       		bcc.s	loc_BFC6
0000C718 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C71C 0440 001C                  		subi.w	#$1C,d0
0000C720 3140 000C                  		move.w	d0,$C(a0)
0000C724 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C72A 08E8 0007 0028             		bset	#7,$28(a0)
0000C730                            
0000C730                            loc_BFC6:
0000C730 3028 0008                  		move.w	8(a0),d0
0000C734 0240 FF80                  		andi.w	#$FF80,d0
0000C738 3238 F700                  		move.w	($FFFFF700).w,d1
0000C73C 0441 0080                  		subi.w	#$80,d1
0000C740 0241 FF80                  		andi.w	#$FF80,d1
0000C744 9041                       		sub.w	d1,d0
0000C746 0C40 0280                  		cmpi.w	#$280,d0
0000C74A 6200                       		bhi.s	loc_BFE6
0000C74C 6000 0000                  		bra.w	DisplaySprite
0000C750                            ; ===========================================================================
0000C750                            
0000C750                            loc_BFE6:
0000C750 3028 0034                  		move.w	$34(a0),d0
0000C754 0240 FF80                  		andi.w	#$FF80,d0
0000C758 3238 F700                  		move.w	($FFFFF700).w,d1
0000C75C 0441 0080                  		subi.w	#$80,d1
0000C760 0241 FF80                  		andi.w	#$FF80,d1
0000C764 9041                       		sub.w	d1,d0
0000C766 0C40 0280                  		cmpi.w	#$280,d0
0000C76A 6200                       		bhi.s	loc_C016
0000C76C 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C772 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C778 117C 0004 0024             		move.b	#4,$24(a0)
0000C77E 6000                       		bra.s	loc_C02C
0000C780                            ; ===========================================================================
0000C780                            
0000C780                            loc_C016:
0000C780 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C784 7000                       		moveq	#0,d0
0000C786 1028 0023                  		move.b	$23(a0),d0
0000C78A 6700                       		beq.s	loc_C028
0000C78C 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C792                            
0000C792                            loc_C028:
0000C792 6000 0000                  		bra.w	DeleteObject
0000C796                            ; ===========================================================================
0000C796                            
0000C796                            loc_C02C:				; XREF: Obj33_Index
0000C796 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C79A 6700                       		beq.s	locret_C044
0000C79C 117C 0002 0024             		move.b	#2,$24(a0)
0000C7A2 4228 0032                  		clr.b	$32(a0)
0000C7A6 4268 0010                  		clr.w	$10(a0)
0000C7AA 4268 0012                  		clr.w	$12(a0)
0000C7AE                            
0000C7AE                            locret_C044:
0000C7AE 4E75                       		rts	
0000C7B0                            ; ===========================================================================
0000C7B0                            
0000C7B0                            loc_C046:				; XREF: loc_BF6E
0000C7B0 3F28 0008                  		move.w	8(a0),-(sp)
0000C7B4 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C7BA 6400                       		bcc.s	loc_C056
0000C7BC 6100 0000                  		bsr.w	SpeedToPos
0000C7C0                            
0000C7C0                            loc_C056:
0000C7C0 0828 0001 0022             		btst	#1,$22(a0)
0000C7C6 6700                       		beq.s	loc_C0A0
0000C7C8 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C7CE 4EB9 0000 0000             		jsr	ObjHitFloor
0000C7D4 4A41                       		tst.w	d1
0000C7D6 6A00 0000                  		bpl.w	loc_C09E
0000C7DA D368 000C                  		add.w	d1,$C(a0)
0000C7DE 4268 0012                  		clr.w	$12(a0)
0000C7E2 08A8 0001 0022             		bclr	#1,$22(a0)
0000C7E8 3011                       		move.w	(a1),d0
0000C7EA 0240 03FF                  		andi.w	#$3FF,d0
0000C7EE 0C40 016A                  		cmpi.w	#$16A,d0
0000C7F2 6500                       		bcs.s	loc_C09E
0000C7F4 3028 0030                  		move.w	$30(a0),d0
0000C7F8 E640                       		asr.w	#3,d0
0000C7FA 3140 0010                  		move.w	d0,$10(a0)
0000C7FE 117C 0001 0032             		move.b	#1,$32(a0)
0000C804 4268 000E                  		clr.w	$E(a0)
0000C808                            
0000C808                            loc_C09E:
0000C808 6000                       		bra.s	loc_C0E6
0000C80A                            ; ===========================================================================
0000C80A                            
0000C80A                            loc_C0A0:
0000C80A 4A68 0010                  		tst.w	$10(a0)
0000C80E 6700 0000                  		beq.w	loc_C0D6
0000C812 6B00                       		bmi.s	loc_C0BC
0000C814 7600                       		moveq	#0,d3
0000C816 1628 0019                  		move.b	$19(a0),d3
0000C81A 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C820 4A41                       		tst.w	d1		; has block touched a wall?
0000C822 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C824 6000                       		bra.s	loc_C0E6
0000C826                            ; ===========================================================================
0000C826                            
0000C826                            loc_C0BC:
0000C826 7600                       		moveq	#0,d3
0000C828 1628 0019                  		move.b	$19(a0),d3
0000C82C 4643                       		not.w	d3
0000C82E 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C834 4A41                       		tst.w	d1		; has block touched a wall?
0000C836 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C838 6000                       		bra.s	loc_C0E6
0000C83A                            ; ===========================================================================
0000C83A                            
0000C83A                            Obj33_StopPush:
0000C83A 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C83E 6000                       		bra.s	loc_C0E6
0000C840                            ; ===========================================================================
0000C840                            
0000C840                            loc_C0D6:
0000C840 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C848 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C84E 6400                       		bcc.s	loc_C104
0000C850                            
0000C850                            loc_C0E6:
0000C850 7200                       		moveq	#0,d1
0000C852 1228 0019                  		move.b	$19(a0),d1
0000C856 0641 000B                  		addi.w	#$B,d1
0000C85A 343C 0010                  		move.w	#$10,d2
0000C85E 363C 0011                  		move.w	#$11,d3
0000C862 381F                       		move.w	(sp)+,d4
0000C864 6100 0000                  		bsr.w	loc_C186
0000C868 6100                       		bsr.s	Obj33_ChkLava
0000C86A 6000 FEC4                  		bra.w	loc_BFC6
0000C86E                            ; ===========================================================================
0000C86E                            
0000C86E                            loc_C104:
0000C86E 381F                       		move.w	(sp)+,d4
0000C870 43F8 D000                  		lea	($FFFFD000).w,a1
0000C874 08A9 0003 0022             		bclr	#3,$22(a1)
0000C87A 08A8 0003 0022             		bclr	#3,$22(a0)
0000C880 6000 FECE                  		bra.w	loc_BFE6
0000C884                            ; ===========================================================================
0000C884                            
0000C884                            Obj33_ChkLava:
0000C884 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C88A 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C88C 343C FFE0                  		move.w	#-$20,d2
0000C890 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C896 6700                       		beq.s	Obj33_LoadLava
0000C898 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C89E 6700                       		beq.s	Obj33_LoadLava
0000C8A0 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C8A6 6700                       		beq.s	Obj33_LoadLava
0000C8A8 4E75                       		rts	
0000C8AA                            ; ===========================================================================
0000C8AA                            
0000C8AA                            Obj33_ChkLava2:
0000C8AA 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C8B0 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C8B2 343C 0020                  		move.w	#$20,d2
0000C8B6 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C8BC 6700                       		beq.s	Obj33_LoadLava
0000C8BE 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C8C4 6700                       		beq.s	Obj33_LoadLava
0000C8C6                            
0000C8C6                            Obj33_NoLava:
0000C8C6 4E75                       		rts	
0000C8C8                            ; ===========================================================================
0000C8C8                            
0000C8C8                            Obj33_LoadLava:
0000C8C8 6100 0000                  		bsr.w	SingleObjLoad
0000C8CC 6600                       		bne.s	locret_C184
0000C8CE 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C8D2 3368 0008 0008             		move.w	8(a0),8(a1)
0000C8D8 D569 0008                  		add.w	d2,8(a1)
0000C8DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C8E2 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C8E8 2348 003C                  		move.l	a0,$3C(a1)
0000C8EC                            
0000C8EC                            locret_C184:
0000C8EC 4E75                       		rts	
0000C8EE                            ; ===========================================================================
0000C8EE                            
0000C8EE                            loc_C186:				; XREF: loc_BF6E
0000C8EE 1028 0025                  		move.b	$25(a0),d0
0000C8F2 6700 0000                  		beq.w	loc_C218
0000C8F6 5500                       		subq.b	#2,d0
0000C8F8 6600                       		bne.s	loc_C1AA
0000C8FA 6100 B312                  		bsr.w	ExitPlatform
0000C8FE 0829 0003 0022             		btst	#3,$22(a1)
0000C904 6600                       		bne.s	loc_C1A4
0000C906 4228 0025                  		clr.b	$25(a0)
0000C90A 4E75                       		rts	
0000C90C                            ; ===========================================================================
0000C90C                            
0000C90C                            loc_C1A4:
0000C90C 3404                       		move.w	d4,d2
0000C90E 6000 B85C                  		bra.w	MvSonicOnPtfm
0000C912                            ; ===========================================================================
0000C912                            
0000C912                            loc_C1AA:
0000C912 5500                       		subq.b	#2,d0
0000C914 6600                       		bne.s	loc_C1F2
0000C916 6100 0000                  		bsr.w	SpeedToPos
0000C91A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C920 4EB9 0000 0000             		jsr	ObjHitFloor
0000C926 4A41                       		tst.w	d1
0000C928 6A00 0000                  		bpl.w	locret_C1F0
0000C92C D368 000C                  		add.w	d1,$C(a0)
0000C930 4268 0012                  		clr.w	$12(a0)
0000C934 4228 0025                  		clr.b	$25(a0)
0000C938 3011                       		move.w	(a1),d0
0000C93A 0240 03FF                  		andi.w	#$3FF,d0
0000C93E 0C40 016A                  		cmpi.w	#$16A,d0
0000C942 6500                       		bcs.s	locret_C1F0
0000C944 3028 0030                  		move.w	$30(a0),d0
0000C948 E640                       		asr.w	#3,d0
0000C94A 3140 0010                  		move.w	d0,$10(a0)
0000C94E 117C 0001 0032             		move.b	#1,$32(a0)
0000C954 4268 000E                  		clr.w	$E(a0)
0000C958                            
0000C958                            locret_C1F0:
0000C958 4E75                       		rts	
0000C95A                            ; ===========================================================================
0000C95A                            
0000C95A                            loc_C1F2:
0000C95A 6100 0000                  		bsr.w	SpeedToPos
0000C95E 3028 0008                  		move.w	8(a0),d0
0000C962 0240 000C                  		andi.w	#$C,d0
0000C966 6600 0000                  		bne.w	locret_C2E4
0000C96A 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C970 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C976 4268 0010                  		clr.w	$10(a0)
0000C97A 5528 0025                  		subq.b	#2,$25(a0)
0000C97E 4E75                       		rts	
0000C980                            ; ===========================================================================
0000C980                            
0000C980                            loc_C218:
0000C980 6100 0000                  		bsr.w	loc_FAC8
0000C984 4A44                       		tst.w	d4
0000C986 6700 0000                  		beq.w	locret_C2E4
0000C98A 6B00 0000                  		bmi.w	locret_C2E4
0000C98E 4A28 0032                  		tst.b	$32(a0)
0000C992 6700                       		beq.s	loc_C230
0000C994 6000 0000                  		bra.w	locret_C2E4
0000C998                            ; ===========================================================================
0000C998                            
0000C998                            loc_C230:
0000C998 4A40                       		tst.w	d0
0000C99A 6700 0000                  		beq.w	locret_C2E4
0000C99E 6B00                       		bmi.s	loc_C268
0000C9A0 0829 0000 0022             		btst	#0,$22(a1)
0000C9A6 6600 0000                  		bne.w	locret_C2E4
0000C9AA 3F00                       		move.w	d0,-(sp)
0000C9AC 7600                       		moveq	#0,d3
0000C9AE 1628 0019                  		move.b	$19(a0),d3
0000C9B2 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C9B8 301F                       		move.w	(sp)+,d0
0000C9BA 4A41                       		tst.w	d1
0000C9BC 6B00 0000                  		bmi.w	locret_C2E4
0000C9C0 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C9C8 7001                       		moveq	#1,d0
0000C9CA 323C 0040                  		move.w	#$40,d1
0000C9CE 6000                       		bra.s	loc_C294
0000C9D0                            ; ===========================================================================
0000C9D0                            
0000C9D0                            loc_C268:
0000C9D0 0829 0000 0022             		btst	#0,$22(a1)
0000C9D6 6700                       		beq.s	locret_C2E4
0000C9D8 3F00                       		move.w	d0,-(sp)
0000C9DA 7600                       		moveq	#0,d3
0000C9DC 1628 0019                  		move.b	$19(a0),d3
0000C9E0 4643                       		not.w	d3
0000C9E2 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C9E8 301F                       		move.w	(sp)+,d0
0000C9EA 4A41                       		tst.w	d1
0000C9EC 6B00                       		bmi.s	locret_C2E4
0000C9EE 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C9F6 70FF                       		moveq	#-1,d0
0000C9F8 323C FFC0                  		move.w	#-$40,d1
0000C9FC                            
0000C9FC                            loc_C294:
0000C9FC 43F8 D000                  		lea	($FFFFD000).w,a1
0000CA00 D169 0008                  		add.w	d0,8(a1)
0000CA04 3341 0014                  		move.w	d1,$14(a1)
0000CA08 337C 0000 0010             		move.w	#0,$10(a1)
0000CA0E 3F00                       		move.w	d0,-(sp)
0000CA10 303C 00A7                  		move.w	#$A7,d0
0000CA14 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play pushing sound
0000CA1A 301F                       		move.w	(sp)+,d0
0000CA1C 4A28 0028                  		tst.b	$28(a0)
0000CA20 6B00                       		bmi.s	locret_C2E4
0000CA22 3F00                       		move.w	d0,-(sp)
0000CA24 4EB9 0000 0000             		jsr	ObjHitFloor
0000CA2A 301F                       		move.w	(sp)+,d0
0000CA2C 0C41 0004                  		cmpi.w	#4,d1
0000CA30 6F00                       		ble.s	loc_C2E0
0000CA32 317C 0400 0010             		move.w	#$400,$10(a0)
0000CA38 4A40                       		tst.w	d0
0000CA3A 6A00                       		bpl.s	loc_C2D8
0000CA3C 4468 0010                  		neg.w	$10(a0)
0000CA40                            
0000CA40                            loc_C2D8:
0000CA40 117C 0006 0025             		move.b	#6,$25(a0)
0000CA46 6000                       		bra.s	locret_C2E4
0000CA48                            ; ===========================================================================
0000CA48                            
0000CA48                            loc_C2E0:
0000CA48 D368 000C                  		add.w	d1,$C(a0)
0000CA4C                            
0000CA4C                            locret_C2E4:
0000CA4C 4E75                       		rts	
0000CA4E                            ; ===========================================================================
0000CA4E                            ; ---------------------------------------------------------------------------
0000CA4E                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA4E                            ; ---------------------------------------------------------------------------
0000CA4E                            Map_obj33:
0000CA4E                            	include "_maps\obj33.asm"
0000CA4E                            ; ---------------------------------------------------------------------------
0000CA4E                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000CA4E                            ; ---------------------------------------------------------------------------
0000CA4E 0000                       		dc.w byte_C2EA-Map_obj33
0000CA50 0000                       		dc.w byte_C2F0-Map_obj33
0000CA52 01                         byte_C2EA:	dc.b 1
0000CA53 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000CA58 04                         byte_C2F0:	dc.b 4
0000CA59 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000CA5E F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000CA63 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000CA68 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000CA6E 00                         		even
0000CA6E 00                         		even
0000CA6E                            
0000CA6E                            ; ===========================================================================
0000CA6E                            ; ---------------------------------------------------------------------------
0000CA6E                            ; Object 34 - zone title cards
0000CA6E                            ; ---------------------------------------------------------------------------
0000CA6E                            
0000CA6E                            Obj34:					; XREF: Obj_Index
0000CA6E 7000                       		moveq	#0,d0
0000CA70 1028 0024                  		move.b	$24(a0),d0
0000CA74 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000CA78 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000CA7C                            ; ===========================================================================
0000CA7C 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000CA7E 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000CA80 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA82 0000                       		dc.w Obj34_Wait-Obj34_Index
0000CA84                            ; ===========================================================================
0000CA84                            
0000CA84                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000CA84 2248                       		movea.l	a0,a1
0000CA86 7000                       		moveq	#0,d0
0000CA88 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CA8C 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000CA92 6600                       		bne.s	Obj34_CheckFZ
0000CA94 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000CA96                            
0000CA96                            Obj34_CheckFZ:
0000CA96 3400                       		move.w	d0,d2
0000CA98 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000CA9E 6600                       		bne.s	Obj34_LoadConfig
0000CAA0 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000CAA2 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000CAA4                            
0000CAA4                            Obj34_LoadConfig:
0000CAA4 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000CAAA E948                       		lsl.w	#4,d0
0000CAAC D6C0                       		adda.w	d0,a3
0000CAAE 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000CAB4 7203                       		moveq	#3,d1
0000CAB6                            
0000CAB6                            Obj34_Loop:
0000CAB6 12BC 0034                  		move.b	#$34,0(a1)
0000CABA 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000CABE 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000CAC2 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000CAC6 335A 000A                  		move.w	(a2)+,$A(a1)
0000CACA 135A 0024                  		move.b	(a2)+,$24(a1)
0000CACE 101A                       		move.b	(a2)+,d0
0000CAD0 6600                       		bne.s	Obj34_ActNumber
0000CAD2 1002                       		move.b	d2,d0
0000CAD4                            
0000CAD4                            Obj34_ActNumber:
0000CAD4 0C00 0007                  		cmpi.b	#7,d0
0000CAD8 6600                       		bne.s	Obj34_MakeSprite
0000CADA D038 FE11                  		add.b	($FFFFFE11).w,d0
0000CADE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000CAE4 6600                       		bne.s	Obj34_MakeSprite
0000CAE6 5300                       		subq.b	#1,d0
0000CAE8                            
0000CAE8                            Obj34_MakeSprite:
0000CAE8 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000CAEC 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000CAF4 337C 8580 0002             		move.w	#$8580,2(a1)
0000CAFA 137C 0078 0019             		move.b	#$78,$19(a1)
0000CB00 137C 0000 0001             		move.b	#0,1(a1)
0000CB06 137C 0000 0018             		move.b	#0,$18(a1)
0000CB0C 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000CB12 43E9 0040                  		lea	$40(a1),a1	; next object
0000CB16 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000CB1A                            
0000CB1A                            Obj34_ChkPos:				; XREF: Obj34_Index
0000CB1A 7210                       		moveq	#$10,d1		; set horizontal speed
0000CB1C 3028 0030                  		move.w	$30(a0),d0
0000CB20 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000CB24 6700                       		beq.s	loc_C3C8	; if yes, branch
0000CB26 6C00                       		bge.s	Obj34_Move
0000CB28 4441                       		neg.w	d1
0000CB2A                            
0000CB2A                            Obj34_Move:
0000CB2A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB2E                            
0000CB2E                            loc_C3C8:
0000CB2E 3028 0008                  		move.w	8(a0),d0
0000CB32 6B00                       		bmi.s	locret_C3D8
0000CB34 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB38 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000CB3A 6000 0000                  		bra.w	DisplaySprite
0000CB3E                            ; ===========================================================================
0000CB3E                            
0000CB3E                            locret_C3D8:
0000CB3E 4E75                       		rts	
0000CB40                            ; ===========================================================================
0000CB40                            
0000CB40                            Obj34_Wait:				; XREF: Obj34_Index
0000CB40 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000CB44 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000CB46 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000CB4A 6000 0000                  		bra.w	DisplaySprite
0000CB4E                            ; ===========================================================================
0000CB4E                            
0000CB4E                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000CB4E 4A28 0001                  		tst.b	1(a0)
0000CB52 6A00                       		bpl.s	Obj34_ChangeArt
0000CB54 7220                       		moveq	#$20,d1
0000CB56 3028 0032                  		move.w	$32(a0),d0
0000CB5A B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000CB5E 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000CB60 6C00                       		bge.s	Obj34_Move2
0000CB62 4441                       		neg.w	d1
0000CB64                            
0000CB64                            Obj34_Move2:
0000CB64 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CB68 3028 0008                  		move.w	8(a0),d0
0000CB6C 6B00                       		bmi.s	locret_C412
0000CB6E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CB72 6400                       		bcc.s	locret_C412	; if yes, branch
0000CB74 6000 0000                  		bra.w	DisplaySprite
0000CB78                            ; ===========================================================================
0000CB78                            
0000CB78                            locret_C412:
0000CB78 4E75                       		rts	
0000CB7A                            ; ===========================================================================
0000CB7A                            
0000CB7A                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000CB7A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CB80 6600                       		bne.s	Obj34_Delete
0000CB82 7002                       		moveq	#2,d0
0000CB84 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load explosion patterns
0000CB8A 7000                       		moveq	#0,d0
0000CB8C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CB90 0640 0015                  		addi.w	#$15,d0
0000CB94 4EB9 0000 17B6             		jsr	(LoadPLC).l	; load animal patterns
0000CB9A                            
0000CB9A                            Obj34_Delete:
0000CB9A 6000 0000                  		bra.w	DeleteObject
0000CB9E                            ; ===========================================================================
0000CB9E 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000CBA0 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000CBA2 00E4                       		dc.w $E4
0000CBA4 0206                       		dc.b 2,	6
0000CBA6 00EA                       		dc.w $EA
0000CBA8 0207                       		dc.b 2,	7
0000CBAA 00E0                       		dc.w $E0
0000CBAC 020A                       		dc.b 2,	$A
0000CBAE                            ; ---------------------------------------------------------------------------
0000CBAE                            ; Title	card configuration data
0000CBAE                            ; Format:
0000CBAE                            ; 4 bytes per item (YYYY XXXX)
0000CBAE                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000CBAE                            ; ---------------------------------------------------------------------------
0000CBAE 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000CBBE 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000CBCE 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000CBDE 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000CBEE 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000CBFE 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000CC0E 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000CC1E                            ; ===========================================================================
0000CC1E                            ; ---------------------------------------------------------------------------
0000CC1E                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000CC1E                            ; ---------------------------------------------------------------------------
0000CC1E                            
0000CC1E                            Obj39:					; XREF: Obj_Index
0000CC1E 7000                       		moveq	#0,d0
0000CC20 1028 0024                  		move.b	$24(a0),d0
0000CC24 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000CC28 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000CC2C                            ; ===========================================================================
0000CC2C 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000CC2E 0000                       		dc.w loc_C50C-Obj39_Index
0000CC30 0000                       		dc.w Obj39_Wait-Obj39_Index
0000CC32                            ; ===========================================================================
0000CC32                            
0000CC32                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000CC32 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CC36 6700                       		beq.s	Obj39_Main	; if yes, branch
0000CC38 4E75                       		rts	
0000CC3A                            ; ===========================================================================
0000CC3A                            
0000CC3A                            Obj39_Main:
0000CC3A 5428 0024                  		addq.b	#2,$24(a0)
0000CC3E 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000CC44 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000CC4A 6700                       		beq.s	loc_C4EC	; if not, branch
0000CC4C 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000CC52                            
0000CC52                            loc_C4EC:
0000CC52 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000CC58 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000CC60 317C 855E 0002             		move.w	#$855E,2(a0)
0000CC66 117C 0000 0001             		move.b	#0,1(a0)
0000CC6C 117C 0000 0018             		move.b	#0,$18(a0)
0000CC72                            
0000CC72                            loc_C50C:				; XREF: Obj39_Index
0000CC72 7210                       		moveq	#$10,d1		; set horizontal speed
0000CC74 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000CC7A 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000CC7C 6500                       		bcs.s	Obj39_Move
0000CC7E 4441                       		neg.w	d1
0000CC80                            
0000CC80                            Obj39_Move:
0000CC80 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CC84 6000 0000                  		bra.w	DisplaySprite
0000CC88                            ; ===========================================================================
0000CC88                            
0000CC88                            Obj39_SetWait:				; XREF: Obj39_Main
0000CC88 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000CC8E 5428 0024                  		addq.b	#2,$24(a0)
0000CC92 4E75                       		rts	
0000CC94                            ; ===========================================================================
0000CC94                            
0000CC94                            Obj39_Wait:				; XREF: Obj39_Index
0000CC94 1038 F605                  		move.b	($FFFFF605).w,d0
0000CC98 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000CC9C 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000CC9E 0828 0000 001A             		btst	#0,$1A(a0)
0000CCA4 6600                       		bne.s	Obj39_Display
0000CCA6 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000CCAA 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000CCAC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CCB0 6000 0000                  		bra.w	DisplaySprite
0000CCB4                            ; ===========================================================================
0000CCB4                            
0000CCB4                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000CCB4 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000CCB8 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000CCBA 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000CCC0 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000CCC4 6600                       		bne.s	Obj39_Display	; if yes, branch
0000CCC6 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000CCCC 6000                       		bra.s	Obj39_Display
0000CCCE                            ; ===========================================================================
0000CCCE                            
0000CCCE                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000CCCE 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CCD4                            
0000CCD4                            Obj39_Display:				; XREF: Obj39_ChgMode
0000CCD4 6000 0000                  		bra.w	DisplaySprite
0000CCD8                            ; ===========================================================================
0000CCD8                            ; ---------------------------------------------------------------------------
0000CCD8                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000CCD8                            ; ---------------------------------------------------------------------------
0000CCD8                            
0000CCD8                            Obj3A:					; XREF: Obj_Index
0000CCD8 7000                       		moveq	#0,d0
0000CCDA 1028 0024                  		move.b	$24(a0),d0
0000CCDE 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000CCE2 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000CCE6                            ; ===========================================================================
0000CCE6 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000CCE8 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000CCEA 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCEC 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000CCEE 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCF0 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000CCF2 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000CCF4 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000CCF6 0000                       		dc.w loc_C766-Obj3A_Index
0000CCF8                            ; ===========================================================================
0000CCF8                            
0000CCF8                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000CCF8 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CCFC 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000CCFE 4E75                       		rts	
0000CD00                            ; ===========================================================================
0000CD00                            
0000CD00                            Obj3A_Main:
0000CD00 2248                       		movea.l	a0,a1
0000CD02 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000CD08 7206                       		moveq	#6,d1
0000CD0A                            
0000CD0A                            Obj3A_Loop:
0000CD0A 12BC 003A                  		move.b	#$3A,0(a1)
0000CD0E 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000CD12 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000CD16 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CD1A 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CD1E 135A 0024                  		move.b	(a2)+,$24(a1)
0000CD22 101A                       		move.b	(a2)+,d0
0000CD24 0C00 0006                  		cmpi.b	#6,d0
0000CD28 6600                       		bne.s	loc_C5CA
0000CD2A D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000CD2E                            
0000CD2E                            loc_C5CA:
0000CD2E 1340 001A                  		move.b	d0,$1A(a1)
0000CD32 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000CD3A 337C 8580 0002             		move.w	#$8580,2(a1)
0000CD40 137C 0000 0001             		move.b	#0,1(a1)
0000CD46 43E9 0040                  		lea	$40(a1),a1
0000CD4A 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000CD4E                            
0000CD4E                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000CD4E 7210                       		moveq	#$10,d1		; set horizontal speed
0000CD50 3028 0030                  		move.w	$30(a0),d0
0000CD54 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CD58 6700                       		beq.s	loc_C61A	; if yes, branch
0000CD5A 6C00                       		bge.s	Obj3A_Move
0000CD5C 4441                       		neg.w	d1
0000CD5E                            
0000CD5E                            Obj3A_Move:
0000CD5E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CD62                            
0000CD62                            loc_C5FE:				; XREF: loc_C61A
0000CD62 3028 0008                  		move.w	8(a0),d0
0000CD66 6B00                       		bmi.s	locret_C60E
0000CD68 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CD6C 6400                       		bcc.s	locret_C60E	; if yes, branch
0000CD6E 6000 0000                  		bra.w	DisplaySprite
0000CD72                            ; ===========================================================================
0000CD72                            
0000CD72                            locret_C60E:
0000CD72 4E75                       		rts	
0000CD74                            ; ===========================================================================
0000CD74                            
0000CD74                            loc_C610:				; XREF: loc_C61A
0000CD74 117C 000E 0024             		move.b	#$E,$24(a0)
0000CD7A 6000 0000                  		bra.w	Obj3A_ChkPos2
0000CD7E                            ; ===========================================================================
0000CD7E                            
0000CD7E                            loc_C61A:				; XREF: Obj3A_ChkPos
0000CD7E 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000CD84 67EE                       		beq.s	loc_C610
0000CD86 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CD8C 66D4                       		bne.s	loc_C5FE
0000CD8E 5428 0024                  		addq.b	#2,$24(a0)
0000CD92 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CD98                            
0000CD98                            Obj3A_Wait:				; XREF: Obj3A_Index
0000CD98 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CD9C 6600                       		bne.s	Obj3A_Display
0000CD9E 5428 0024                  		addq.b	#2,$24(a0)
0000CDA2                            
0000CDA2                            Obj3A_Display:
0000CDA2 6000 0000                  		bra.w	DisplaySprite
0000CDA6                            ; ===========================================================================
0000CDA6                            
0000CDA6                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000CDA6 6100 0000                  		bsr.w	DisplaySprite
0000CDAA 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000CDB0 7000                       		moveq	#0,d0
0000CDB2 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000CDB6 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000CDB8 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDBC 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000CDC2                            
0000CDC2                            Obj3A_RingBonus:
0000CDC2 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000CDC6 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000CDC8 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000CDCC 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000CDD2                            
0000CDD2                            Obj3A_ChkBonus:
0000CDD2 4A40                       		tst.w	d0		; is there any bonus?
0000CDD4 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000CDD6 303C 00C5                  		move.w	#$C5,d0
0000CDDA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000CDE0 5428 0024                  		addq.b	#2,$24(a0)
0000CDE4 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000CDEA 6600                       		bne.s	Obj3A_SetDelay
0000CDEC 5828 0024                  		addq.b	#4,$24(a0)
0000CDF0                            
0000CDF0                            Obj3A_SetDelay:
0000CDF0 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CDF6                            
0000CDF6                            locret_C692:
0000CDF6 4E75                       		rts	
0000CDF8                            ; ===========================================================================
0000CDF8                            
0000CDF8                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000CDF8 4EB9 0000 0000             		jsr	AddPoints
0000CDFE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000CE02 0200 0003                  		andi.b	#3,d0
0000CE06 66EE                       		bne.s	locret_C692
0000CE08 303C 00CD                  		move.w	#$CD,d0
0000CE0C 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000CE12                            ; ===========================================================================
0000CE12                            
0000CE12                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000CE12 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000CE16 0240 0007                  		andi.w	#7,d0
0000CE1A E748                       		lsl.w	#3,d0
0000CE1C 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000CE20 0241 0003                  		andi.w	#3,d1
0000CE24 D241                       		add.w	d1,d1
0000CE26 D041                       		add.w	d1,d0
0000CE28 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000CE2C 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000CE30 4A40                       		tst.w	d0
0000CE32 6600                       		bne.s	Obj3A_ChkSS
0000CE34 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000CE3A 6000                       		bra.s	Obj3A_Display2
0000CE3C                            ; ===========================================================================
0000CE3C                            
0000CE3C                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000CE3C 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000CE40 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000CE44 6700                       		beq.s	loc_C6EA	; if not, branch
0000CE46 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000CE4C 6000                       		bra.s	Obj3A_Display2
0000CE4E                            ; ===========================================================================
0000CE4E                            
0000CE4E                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000CE4E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000CE54                            
0000CE54                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000CE54 6000 0000                  		bra.w	DisplaySprite
0000CE58                            ; ===========================================================================
0000CE58                            ; ---------------------------------------------------------------------------
0000CE58                            ; Level	order array
0000CE58                            ; ---------------------------------------------------------------------------
0000CE58                            LevelOrder:	incbin	misc\lvl_ord.bin
0000CE88                            		even
0000CE88                            ; ===========================================================================
0000CE88                            
0000CE88                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000CE88 7220                       		moveq	#$20,d1		; set horizontal speed
0000CE8A 3028 0032                  		move.w	$32(a0),d0
0000CE8E B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000CE92 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000CE94 6C00                       		bge.s	Obj3A_Move2
0000CE96 4441                       		neg.w	d1
0000CE98                            
0000CE98                            Obj3A_Move2:
0000CE98 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CE9C 3028 0008                  		move.w	8(a0),d0
0000CEA0 6B00                       		bmi.s	locret_C748
0000CEA2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CEA6 6400                       		bcc.s	locret_C748	; if yes, branch
0000CEA8 6000 0000                  		bra.w	DisplaySprite
0000CEAC                            ; ===========================================================================
0000CEAC                            
0000CEAC                            locret_C748:
0000CEAC 4E75                       		rts	
0000CEAE                            ; ===========================================================================
0000CEAE                            
0000CEAE                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000CEAE 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000CEB4 6600 0000                  		bne.w	DeleteObject
0000CEB8 5428 0024                  		addq.b	#2,$24(a0)
0000CEBC 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000CEC0 303C 008D                  		move.w	#$8D,d0
0000CEC4 4EF9 0000 15CC             		jmp	(PlaySound).l	; play FZ music
0000CECA                            ; ===========================================================================
0000CECA                            
0000CECA                            loc_C766:				; XREF: Obj3A_Index
0000CECA 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000CECE 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000CED4 6700 0000                  		beq.w	DeleteObject
0000CED8 4E75                       		rts	
0000CEDA                            ; ===========================================================================
0000CEDA 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000CEE0 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000CEE2 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000CEE8 0201                       		dc.b 2,	1
0000CEEA 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000CEF0 0206                       		dc.b 2,	6
0000CEF2 0520 0120 00EC             		dc.w $520, $120, $EC
0000CEF8 0202                       		dc.b 2,	2
0000CEFA 0540 0120 00FC             		dc.w $540, $120, $FC
0000CF00 0203                       		dc.b 2,	3
0000CF02 0560 0120 010C             		dc.w $560, $120, $10C
0000CF08 0204                       		dc.b 2,	4
0000CF0A 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000CF10 0205                       		dc.b 2,	5
0000CF12                            ; ===========================================================================
0000CF12                            ; ---------------------------------------------------------------------------
0000CF12                            ; Object 7E - special stage results screen
0000CF12                            ; ---------------------------------------------------------------------------
0000CF12                            
0000CF12                            Obj7E:					; XREF: Obj_Index
0000CF12 7000                       		moveq	#0,d0
0000CF14 1028 0024                  		move.b	$24(a0),d0
0000CF18 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000CF1C 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000CF20                            ; ===========================================================================
0000CF20 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000CF22 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000CF24 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF26 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000CF28 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF2A 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF2C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF2E 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000CF30 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000CF32 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000CF34 0000                       		dc.w loc_C91A-Obj7E_Index
0000CF36                            ; ===========================================================================
0000CF36                            
0000CF36                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000CF36 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000CF3A 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000CF3C 4E75                       		rts	
0000CF3E                            ; ===========================================================================
0000CF3E                            
0000CF3E                            Obj7E_Main:
0000CF3E 2248                       		movea.l	a0,a1
0000CF40 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000CF46 7203                       		moveq	#3,d1
0000CF48 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000CF4E 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000CF50 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000CF52                            
0000CF52                            Obj7E_Loop:
0000CF52 12BC 007E                  		move.b	#$7E,0(a1)
0000CF56 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000CF5A 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000CF5E 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000CF62 135A 0024                  		move.b	(a2)+,$24(a1)
0000CF66 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CF6A 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000CF72 337C 8580 0002             		move.w	#$8580,2(a1)
0000CF78 137C 0000 0001             		move.b	#0,1(a1)
0000CF7E 43E9 0040                  		lea	$40(a1),a1
0000CF82 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000CF86                            
0000CF86 7007                       		moveq	#7,d0
0000CF88 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000CF8C 6700                       		beq.s	loc_C842
0000CF8E 7000                       		moveq	#0,d0
0000CF90 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000CF94 6600                       		bne.s	loc_C842	; if not, branch
0000CF96 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000CF98 317C 0018 0008             		move.w	#$18,8(a0)
0000CF9E 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000CFA4                            
0000CFA4                            loc_C842:
0000CFA4 1140 001A                  		move.b	d0,$1A(a0)
0000CFA8                            
0000CFA8                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000CFA8 7210                       		moveq	#$10,d1		; set horizontal speed
0000CFAA 3028 0030                  		move.w	$30(a0),d0
0000CFAE B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000CFB2 6700                       		beq.s	loc_C86C	; if yes, branch
0000CFB4 6C00                       		bge.s	Obj7E_Move
0000CFB6 4441                       		neg.w	d1
0000CFB8                            
0000CFB8                            Obj7E_Move:
0000CFB8 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000CFBC                            
0000CFBC                            loc_C85A:				; XREF: loc_C86C
0000CFBC 3028 0008                  		move.w	8(a0),d0
0000CFC0 6B00                       		bmi.s	locret_C86A
0000CFC2 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000CFC6 6400                       		bcc.s	locret_C86A	; if yes, branch
0000CFC8 6000 0000                  		bra.w	DisplaySprite
0000CFCC                            ; ===========================================================================
0000CFCC                            
0000CFCC                            locret_C86A:
0000CFCC 4E75                       		rts	
0000CFCE                            ; ===========================================================================
0000CFCE                            
0000CFCE                            loc_C86C:				; XREF: Obj7E_ChkPos
0000CFCE 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000CFD4 66E6                       		bne.s	loc_C85A
0000CFD6 5428 0024                  		addq.b	#2,$24(a0)
0000CFDA 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000CFE0 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000CFE6                            
0000CFE6                            Obj7E_Wait:				; XREF: Obj7E_Index
0000CFE6 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000CFEA 6600                       		bne.s	Obj7E_Display
0000CFEC 5428 0024                  		addq.b	#2,$24(a0)
0000CFF0                            
0000CFF0                            Obj7E_Display:
0000CFF0 6000 0000                  		bra.w	DisplaySprite
0000CFF4                            ; ===========================================================================
0000CFF4                            
0000CFF4                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000CFF4 6100 0000                  		bsr.w	DisplaySprite
0000CFF8 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000CFFE 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D002 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D004 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D00A 700A                       		moveq	#10,d0		; add 10 to score
0000D00C 4EB9 0000 0000             		jsr	AddPoints
0000D012 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D016 0200 0003                  		andi.b	#3,d0
0000D01A 6600                       		bne.s	locret_C8EA
0000D01C 303C 00CD                  		move.w	#$CD,d0
0000D020 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D026                            ; ===========================================================================
0000D026                            
0000D026                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D026 303C 00C5                  		move.w	#$C5,d0
0000D02A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D030 5428 0024                  		addq.b	#2,$24(a0)
0000D034 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D03A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D040 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D042 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D048 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D04C                            
0000D04C                            locret_C8EA:
0000D04C 4E75                       		rts	
0000D04E                            ; ===========================================================================
0000D04E                            
0000D04E                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D04E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D054 6000 0000                  		bra.w	DisplaySprite
0000D058                            ; ===========================================================================
0000D058                            
0000D058                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D058 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D05E 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D064 303C 00BF                  		move.w	#$BF,d0
0000D068 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play continues music
0000D06E 5428 0024                  		addq.b	#2,$24(a0)
0000D072 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D078 6000 0000                  		bra.w	DisplaySprite
0000D07C                            ; ===========================================================================
0000D07C                            
0000D07C                            loc_C91A:				; XREF: Obj7E_Index
0000D07C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D080 0200 000F                  		andi.b	#$F,d0
0000D084 6600                       		bne.s	Obj7E_Display2
0000D086 0868 0000 001A             		bchg	#0,$1A(a0)
0000D08C                            
0000D08C                            Obj7E_Display2:
0000D08C 6000 0000                  		bra.w	DisplaySprite
0000D090                            ; ===========================================================================
0000D090 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D096 0200                       		dc.b 2,	0		; rountine number, frame number
0000D098 0320 0120 0118             		dc.w $320, $120, $118
0000D09E 0201                       		dc.b 2,	1
0000D0A0 0360 0120 0128             		dc.w $360, $120, $128
0000D0A6 0202                       		dc.b 2,	2
0000D0A8 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D0AE 0203                       		dc.b 2,	3
0000D0B0 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D0B6 0206                       		dc.b 2,	6
0000D0B8                            ; ===========================================================================
0000D0B8                            ; ---------------------------------------------------------------------------
0000D0B8                            ; Object 7F - chaos emeralds from the special stage results screen
0000D0B8                            ; ---------------------------------------------------------------------------
0000D0B8                            
0000D0B8                            Obj7F:					; XREF: Obj_Index
0000D0B8 7000                       		moveq	#0,d0
0000D0BA 1028 0024                  		move.b	$24(a0),d0
0000D0BE 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D0C2 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D0C6                            ; ===========================================================================
0000D0C6 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D0C8 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D0CA                            
0000D0CA                            ; ---------------------------------------------------------------------------
0000D0CA                            ; X-axis positions for chaos emeralds
0000D0CA                            ; ---------------------------------------------------------------------------
0000D0CA 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D0D6                            ; ===========================================================================
0000D0D6                            
0000D0D6                            Obj7F_Main:				; XREF: Obj7F_Index
0000D0D6 2248                       		movea.l	a0,a1
0000D0D8 45F9 0000 D0CA             		lea	(Obj7F_PosData).l,a2
0000D0DE 7400                       		moveq	#0,d2
0000D0E0 7200                       		moveq	#0,d1
0000D0E2 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D0E6 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D0E8 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D0EC                            
0000D0EC                            Obj7F_Loop:
0000D0EC 12BC 007F                  		move.b	#$7F,0(a1)
0000D0F0 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D0F4 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D0FA 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D0FE 1633 2000                  		move.b	(a3,d2.w),d3
0000D102 1343 001A                  		move.b	d3,$1A(a1)
0000D106 1343 001C                  		move.b	d3,$1C(a1)
0000D10A 5202                       		addq.b	#1,d2
0000D10C 5429 0024                  		addq.b	#2,$24(a1)
0000D110 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000D118 337C 8541 0002             		move.w	#$8541,2(a1)
0000D11E 137C 0000 0001             		move.b	#0,1(a1)
0000D124 43E9 0040                  		lea	$40(a1),a1	; next object
0000D128 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000D12C                            
0000D12C                            Obj7F_Flash:				; XREF: Obj7F_Index
0000D12C 1028 001A                  		move.b	$1A(a0),d0
0000D130 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000D136 0C00 0006                  		cmpi.b	#6,d0
0000D13A 6600                       		bne.s	Obj7F_Display
0000D13C 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000D142                            
0000D142                            Obj7F_Display:
0000D142 6000 0000                  		bra.w	DisplaySprite
0000D146                            ; ===========================================================================
0000D146                            ; ---------------------------------------------------------------------------
0000D146                            ; Sprite mappings - zone title cards
0000D146                            ; ---------------------------------------------------------------------------
0000D146 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000D148 0000                       		dc.w byte_CA2C-Map_obj34
0000D14A 0000                       		dc.w byte_CA5A-Map_obj34
0000D14C 0000                       		dc.w byte_CA7A-Map_obj34
0000D14E 0000                       		dc.w byte_CAA8-Map_obj34
0000D150 0000                       		dc.w byte_CADC-Map_obj34
0000D152 0000                       		dc.w byte_CB10-Map_obj34
0000D154 0000                       		dc.w byte_CB26-Map_obj34
0000D156 0000                       		dc.w byte_CB31-Map_obj34
0000D158 0000                       		dc.w byte_CB3C-Map_obj34
0000D15A 0000                       		dc.w byte_CB47-Map_obj34
0000D15C 0000                       		dc.w byte_CB8A-Map_obj34
0000D15E 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000D15F F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000D164 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000D169 F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000D16E F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000D173 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000D178 F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000D17D F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000D182 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000D187 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000D18C F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000D191 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000D196 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000D19B 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000D19C F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000D1A1 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000D1A6 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000D1AB F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000D1B0 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000D1B5 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000D1BA F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D1BF F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000D1C4 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000D1C9 F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000D1CE F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000D1D3 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000D1D8 F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000D1DD F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000D1E2 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000D1E7 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000D1EC F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000D1F1 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000D1F6 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000D1FB F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000D200 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000D205 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000D20A 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000D20B F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000D210 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000D215 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000D21A F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000D21F F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000D224 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000D225 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000D22A F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000D22F F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000D234 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000D239 F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000D23E F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000D243 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000D248 F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000D24D F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000D252 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000D257 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000D25C F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000D261 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000D266 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000D26B F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000D270 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000D275 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000D27A 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000D27B F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000D280 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000D285 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000D28A F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D28F F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000D294 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000D299 F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000D29E F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000D2A3 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000D2A8 F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000D2AD F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000D2B2 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000D2B7 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000D2BC F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000D2C1 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000D2C6 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000D2CB F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000D2D0 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000D2D5 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000D2DA F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000D2DF F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000D2E4 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000D2E5 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000D2EA F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000D2EF F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000D2F4 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000D2F9 F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000D2FE F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000D303 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000D308 04                         byte_CB10:	dc.b 4			; ZONE
0000D309 F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000D30E F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000D313 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000D318 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D31D 00                         		dc.b 0
0000D31E 02                         byte_CB26:	dc.b 2			; ACT 1
0000D31F 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D324 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000D329 02                         byte_CB31:	dc.b 2			; ACT 2
0000D32A 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D32F F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000D334 02                         byte_CB3C:	dc.b 2			; ACT 3
0000D335 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000D33A F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000D33F 0D                         byte_CB47:	dc.b $D			; Oval
0000D340 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000D345 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000D34A EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000D34F F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000D354 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000D359 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000D35E 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000D363 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000D368 EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000D36D F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000D372 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000D377 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000D37C 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000D381 00                         		dc.b 0
0000D382 05                         byte_CB8A:	dc.b 5			; FINAL
0000D383 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000D388 F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000D38D F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000D392 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000D397 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000D39C                            		even
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C                            Map_obj39:
0000D39C                            	include "_maps\obj39.asm"
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000D39C                            ; ---------------------------------------------------------------------------
0000D39C 0000                       		dc.w byte_CBAC-Map_obj39
0000D39E 0000                       		dc.w byte_CBB7-Map_obj39
0000D3A0 0000                       		dc.w byte_CBC2-Map_obj39
0000D3A2 0000                       		dc.w byte_CBCD-Map_obj39
0000D3A4 02                         byte_CBAC:	dc.b 2
0000D3A5 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000D3AA F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000D3AF 02                         byte_CBB7:	dc.b 2
0000D3B0 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000D3B5 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000D3BA 02                         byte_CBC2:	dc.b 2
0000D3BB F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000D3C0 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000D3C5 02                         byte_CBCD:	dc.b 2
0000D3C6 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000D3CB F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000D3D0                            		even
0000D3D0                            		even
0000D3D0                            
0000D3D0                            ; ---------------------------------------------------------------------------
0000D3D0                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000D3D0                            ; ---------------------------------------------------------------------------
0000D3D0 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000D3D2 0000                       		dc.w byte_CC13-Map_obj3A
0000D3D4 0000                       		dc.w byte_CC32-Map_obj3A
0000D3D6 0000                       		dc.w byte_CC51-Map_obj3A
0000D3D8 0000                       		dc.w byte_CC75-Map_obj3A
0000D3DA FF6F                       		dc.w byte_CB47-Map_obj3A
0000D3DC FF4E                       		dc.w byte_CB26-Map_obj3A
0000D3DE FF59                       		dc.w byte_CB31-Map_obj3A
0000D3E0 FF64                       		dc.w byte_CB3C-Map_obj3A
0000D3E2 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000D3E3 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000D3E8 F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000D3ED F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000D3F2 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000D3F7 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000D3FC F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000D401 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000D406 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000D40B F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000D410 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000D415 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000D41A F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000D41F F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000D424 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000D429 F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000D42E 06                         byte_CC13:	dc.b 6			; PASSED
0000D42F F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000D434 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000D439 F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000D43E F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000D443 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D448 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000D44D 06                         byte_CC32:	dc.b 6			; SCORE
0000D44E F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D453 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D458 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D45D F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D462 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D467 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D46C 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000D46D F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000D472 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D477 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D47C F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D481 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D486 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000D48B F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D490 07                         byte_CC75:	dc.b 7			; RING BONUS
0000D491 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D496 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D49B F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D4A0 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D4A5 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D4AA F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D4AF F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D4B4                            		even
0000D4B4                            ; ---------------------------------------------------------------------------
0000D4B4                            ; Sprite mappings - special stage results screen
0000D4B4                            ; ---------------------------------------------------------------------------
0000D4B4 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000D4B6 0000                       		dc.w byte_CCEE-Map_obj7E
0000D4B8 0000                       		dc.w byte_CD0D-Map_obj7E
0000D4BA FE8B                       		dc.w byte_CB47-Map_obj7E
0000D4BC 0000                       		dc.w byte_CD31-Map_obj7E
0000D4BE 0000                       		dc.w byte_CD46-Map_obj7E
0000D4C0 0000                       		dc.w byte_CD5B-Map_obj7E
0000D4C2 0000                       		dc.w byte_CD6B-Map_obj7E
0000D4C4 0000                       		dc.w byte_CDA8-Map_obj7E
0000D4C6 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000D4C7 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000D4CC F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000D4D1 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000D4D6 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000D4DB F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000D4E0 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000D4E5 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000D4EA F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000D4EF F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000D4F4 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000D4F9 F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000D4FE F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000D503 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000D508 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000D509 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000D50E F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000D513 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000D518 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000D51D F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000D522 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000D527 07                         byte_CD0D:	dc.b 7
0000D528 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000D52D F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000D532 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000D537 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000D53C FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000D541 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000D546 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000D54B 04                         byte_CD31:	dc.b 4
0000D54C F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D551 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D556 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D55B F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000D560 04                         byte_CD46:	dc.b 4
0000D561 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D566 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D56B F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D570 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000D575 03                         byte_CD5B:	dc.b 3
0000D576 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000D57B F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000D580 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000D585 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000D586 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000D58B F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000D590 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000D595 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000D59A F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000D59F F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000D5A4 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000D5A9 F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000D5AE F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000D5B3 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000D5B8 F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000D5BD F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000D5C2 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000D5C3 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000D5C8 F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000D5CD F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000D5D2 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000D5D7 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000D5DC F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000D5E1 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000D5E6 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000D5EB F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000D5F0 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000D5F5 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000D5FA F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000D5FF F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000D604 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000D609 F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000D60E                            		even
0000D60E                            ; ---------------------------------------------------------------------------
0000D60E                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D60E                            ; ---------------------------------------------------------------------------
0000D60E                            Map_obj7F:
0000D60E                            	include "_maps\obj7F.asm"
0000D60E                            ; ---------------------------------------------------------------------------
0000D60E                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000D60E                            ; ---------------------------------------------------------------------------
0000D60E 0000                       		dc.w byte_CE02-Map_obj7F
0000D610 0000                       		dc.w byte_CE08-Map_obj7F
0000D612 0000                       		dc.w byte_CE0E-Map_obj7F
0000D614 0000                       		dc.w byte_CE14-Map_obj7F
0000D616 0000                       		dc.w byte_CE1A-Map_obj7F
0000D618 0000                       		dc.w byte_CE20-Map_obj7F
0000D61A 0000                       		dc.w byte_CE26-Map_obj7F
0000D61C 01                         byte_CE02:	dc.b 1
0000D61D F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000D622 01                         byte_CE08:	dc.b 1
0000D623 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000D628 01                         byte_CE0E:	dc.b 1
0000D629 F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000D62E 01                         byte_CE14:	dc.b 1
0000D62F F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000D634 01                         byte_CE1A:	dc.b 1
0000D635 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000D63A 01                         byte_CE20:	dc.b 1
0000D63B F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000D640 00                         byte_CE26:	dc.b 0			; Blank frame
0000D642 00                         		even
0000D642 00                         		even
0000D642                            
0000D642                            ; ===========================================================================
0000D642                            ; ---------------------------------------------------------------------------
0000D642                            ; Object 36 - spikes
0000D642                            ; ---------------------------------------------------------------------------
0000D642                            
0000D642                            Obj36:					; XREF: Obj_Index
0000D642 7000                       		moveq	#0,d0
0000D644 1028 0024                  		move.b	$24(a0),d0
0000D648 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000D64C 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000D650                            ; ===========================================================================
0000D650 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000D652 0000                       		dc.w Obj36_Solid-Obj36_Index
0000D654                            
0000D654 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000D656 0110                       		dc.b 1,	$10
0000D658 0204                       		dc.b 2,	4
0000D65A 031C                       		dc.b 3,	$1C
0000D65C 0440                       		dc.b 4,	$40
0000D65E 0510                       		dc.b 5,	$10
0000D660                            ; ===========================================================================
0000D660                            
0000D660                            Obj36_Main:				; XREF: Obj36_Index
0000D660 5428 0024                  		addq.b	#2,$24(a0)
0000D664 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000D66C 317C 051B 0002             		move.w	#$51B,2(a0)
0000D672 0028 0004 0001             		ori.b	#4,1(a0)
0000D678 117C 0004 0018             		move.b	#4,$18(a0)
0000D67E 1028 0028                  		move.b	$28(a0),d0
0000D682 0228 000F 0028             		andi.b	#$F,$28(a0)
0000D688 0240 00F0                  		andi.w	#$F0,d0
0000D68C 43F9 0000 D654             		lea	(Obj36_Var).l,a1
0000D692 E648                       		lsr.w	#3,d0
0000D694 D2C0                       		adda.w	d0,a1
0000D696 1159 001A                  		move.b	(a1)+,$1A(a0)
0000D69A 1159 0019                  		move.b	(a1)+,$19(a0)
0000D69E 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D6A4 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D6AA                            
0000D6AA                            Obj36_Solid:				; XREF: Obj36_Index
0000D6AA 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D6AE 343C 0004                  		move.w	#4,d2
0000D6B2 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D6B8 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D6BA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D6C0 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D6C2 343C 0014                  		move.w	#$14,d2
0000D6C6                            
0000D6C6                            ; Spikes types $1x and $5x face	sideways
0000D6C6                            
0000D6C6                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D6C6 323C 001B                  		move.w	#$1B,d1
0000D6CA 3602                       		move.w	d2,d3
0000D6CC 5243                       		addq.w	#1,d3
0000D6CE 3828 0008                  		move.w	8(a0),d4
0000D6D2 6100 0000                  		bsr.w	SolidObject
0000D6D6 0828 0003 0022             		btst	#3,$22(a0)
0000D6DC 6600                       		bne.s	Obj36_Display
0000D6DE 0C44 0001                  		cmpi.w	#1,d4
0000D6E2 6700                       		beq.s	Obj36_Hurt
0000D6E4 6000                       		bra.s	Obj36_Display
0000D6E6                            ; ===========================================================================
0000D6E6                            
0000D6E6                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D6E6                            
0000D6E6                            Obj36_Upright:				; XREF: Obj36_Solid
0000D6E6 7200                       		moveq	#0,d1
0000D6E8 1228 0019                  		move.b	$19(a0),d1
0000D6EC 0641 000B                  		addi.w	#$B,d1
0000D6F0 343C 0010                  		move.w	#$10,d2
0000D6F4 363C 0011                  		move.w	#$11,d3
0000D6F8 3828 0008                  		move.w	8(a0),d4
0000D6FC 6100 0000                  		bsr.w	SolidObject
0000D700 0828 0003 0022             		btst	#3,$22(a0)
0000D706 6600                       		bne.s	Obj36_Hurt
0000D708 4A44                       		tst.w	d4
0000D70A 6A00                       		bpl.s	Obj36_Display
0000D70C                            
0000D70C                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D70C 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D710 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D712 2F08                       		move.l	a0,-(sp)
0000D714 2448                       		movea.l	a0,a2
0000D716 41F8 D000                  		lea	($FFFFD000).w,a0
0000D71A 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D720 6400                       		bcc.s	loc_CF20
0000D722 2628 000C                  		move.l	$C(a0),d3
0000D726 3028 0012                  		move.w	$12(a0),d0
0000D72A 48C0                       		ext.l	d0
0000D72C E180                       		asl.l	#8,d0
0000D72E 9680                       		sub.l	d0,d3
0000D730 2143 000C                  		move.l	d3,$C(a0)
0000D734 4EB9 0000 0000             		jsr	HurtSonic
0000D73A                            
0000D73A                            loc_CF20:
0000D73A 205F                       		movea.l	(sp)+,a0
0000D73C                            
0000D73C                            Obj36_Display:
0000D73C 6100 0000                  		bsr.w	DisplaySprite
0000D740 3028 0030                  		move.w	$30(a0),d0
0000D744 0240 FF80                  		andi.w	#$FF80,d0
0000D748 3238 F700                  		move.w	($FFFFF700).w,d1
0000D74C 0441 0080                  		subi.w	#$80,d1
0000D750 0241 FF80                  		andi.w	#$FF80,d1
0000D754 9041                       		sub.w	d1,d0
0000D756 0C40 0280                  		cmpi.w	#$280,d0
0000D75A 6200 0000                  		bhi.w	DeleteObject
0000D75E 4E75                       		rts	
0000D760                            ; ===========================================================================
0000D760                            
0000D760                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D760 7000                       		moveq	#0,d0
0000D762 1028 0028                  		move.b	$28(a0),d0
0000D766 D040                       		add.w	d0,d0
0000D768 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D76C 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D770                            ; ===========================================================================
0000D770 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D772 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D774 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D776                            ; ===========================================================================
0000D776                            
0000D776                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D776 4E75                       		rts			; don't move the object
0000D778                            ; ===========================================================================
0000D778                            
0000D778                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D778 6100 0000                  		bsr.w	Obj36_Wait
0000D77C 7000                       		moveq	#0,d0
0000D77E 1028 0034                  		move.b	$34(a0),d0
0000D782 D068 0032                  		add.w	$32(a0),d0
0000D786 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D78A 4E75                       		rts	
0000D78C                            ; ===========================================================================
0000D78C                            
0000D78C                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D78C 6100 0000                  		bsr.w	Obj36_Wait
0000D790 7000                       		moveq	#0,d0
0000D792 1028 0034                  		move.b	$34(a0),d0
0000D796 D068 0030                  		add.w	$30(a0),d0
0000D79A 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D79E 4E75                       		rts	
0000D7A0                            ; ===========================================================================
0000D7A0                            
0000D7A0                            Obj36_Wait:
0000D7A0 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D7A4 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D7A6 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D7AA 6600                       		bne.s	locret_CFE6
0000D7AC 4A28 0001                  		tst.b	1(a0)
0000D7B0 6A00                       		bpl.s	locret_CFE6
0000D7B2 303C 00B6                  		move.w	#$B6,d0
0000D7B6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D7BC 6000                       		bra.s	locret_CFE6
0000D7BE                            ; ===========================================================================
0000D7BE                            
0000D7BE                            loc_CFA4:
0000D7BE 4A68 0036                  		tst.w	$36(a0)
0000D7C2 6700                       		beq.s	loc_CFC6
0000D7C4 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D7CA 6400                       		bcc.s	locret_CFE6
0000D7CC 317C 0000 0034             		move.w	#0,$34(a0)
0000D7D2 317C 0000 0036             		move.w	#0,$36(a0)
0000D7D8 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D7DE 6000                       		bra.s	locret_CFE6
0000D7E0                            ; ===========================================================================
0000D7E0                            
0000D7E0                            loc_CFC6:
0000D7E0 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D7E6 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D7EC 6500                       		bcs.s	locret_CFE6
0000D7EE 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D7F4 317C 0001 0036             		move.w	#1,$36(a0)
0000D7FA 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D800                            
0000D800                            locret_CFE6:
0000D800 4E75                       		rts	
0000D802                            ; ===========================================================================
0000D802                            ; ---------------------------------------------------------------------------
0000D802                            ; Sprite mappings - spikes
0000D802                            ; ---------------------------------------------------------------------------
0000D802                            Map_obj36:
0000D802                            	include "_maps\obj36.asm"
0000D802                            Map_obj36_inner:
0000D802 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000D804 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000D806 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000D808 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000D80A 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000D80C 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000D80E 03                         Map_obj36_inner_C: 	dc.b $3
0000D80F F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000D814 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D819 F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000D81E 03                         Map_obj36_inner_1C: 	dc.b $3
0000D81F EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000D824 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D829 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000D82E 01                         Map_obj36_inner_2C: 	dc.b $1
0000D82F F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D834 03                         Map_obj36_inner_32: 	dc.b $3
0000D835 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000D83A F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000D83F F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000D844 06                         Map_obj36_inner_42: 	dc.b $6
0000D845 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000D84A F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000D84F F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000D854 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000D859 F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000D85E F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000D863 01                         Map_obj36_inner_61: 	dc.b $1
0000D864 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000D86A 00                         	even
0000D86A 00                         	even
0000D86A                            
0000D86A                            ; ===========================================================================
0000D86A                            ; ---------------------------------------------------------------------------
0000D86A                            ; Object 3B - purple rock (GHZ)
0000D86A                            ; ---------------------------------------------------------------------------
0000D86A                            
0000D86A                            Obj3B:					; XREF: Obj_Index
0000D86A 7000                       		moveq	#0,d0
0000D86C 1028 0024                  		move.b	$24(a0),d0
0000D870 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D874 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D878                            ; ===========================================================================
0000D878 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D87A 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D87C                            ; ===========================================================================
0000D87C                            
0000D87C                            Obj3B_Main:				; XREF: Obj3B_Index
0000D87C 5428 0024                  		addq.b	#2,$24(a0)
0000D880 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D888 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D88E 117C 0004 0001             		move.b	#4,1(a0)
0000D894 117C 0013 0019             		move.b	#$13,$19(a0)
0000D89A 117C 0004 0018             		move.b	#4,$18(a0)
0000D8A0                            
0000D8A0                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D8A0 323C 001B                  		move.w	#$1B,d1
0000D8A4 343C 0010                  		move.w	#$10,d2
0000D8A8 363C 0010                  		move.w	#$10,d3
0000D8AC 3828 0008                  		move.w	8(a0),d4
0000D8B0 6100 0000                  		bsr.w	SolidObject
0000D8B4 6100 0000                  		bsr.w	DisplaySprite
0000D8B8 3028 0008                  		move.w	8(a0),d0
0000D8BC 0240 FF80                  		andi.w	#$FF80,d0
0000D8C0 3238 F700                  		move.w	($FFFFF700).w,d1
0000D8C4 0441 0080                  		subi.w	#$80,d1
0000D8C8 0241 FF80                  		andi.w	#$FF80,d1
0000D8CC 9041                       		sub.w	d1,d0
0000D8CE 0C40 0280                  		cmpi.w	#$280,d0
0000D8D2 6200 0000                  		bhi.w	DeleteObject
0000D8D6 4E75                       		rts	
0000D8D8                            ; ===========================================================================
0000D8D8                            ; ---------------------------------------------------------------------------
0000D8D8                            ; Object 49 - waterfall	sound effect (GHZ)
0000D8D8                            ; ---------------------------------------------------------------------------
0000D8D8                            
0000D8D8                            Obj49:					; XREF: Obj_Index
0000D8D8 7000                       		moveq	#0,d0
0000D8DA 1028 0024                  		move.b	$24(a0),d0
0000D8DE 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D8E2 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D8E6                            ; ===========================================================================
0000D8E6 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D8E8 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D8EA                            ; ===========================================================================
0000D8EA                            
0000D8EA                            Obj49_Main:				; XREF: Obj49_Index
0000D8EA 5428 0024                  		addq.b	#2,$24(a0)
0000D8EE 117C 0004 0001             		move.b	#4,1(a0)
0000D8F4                            
0000D8F4                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D8F4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D8F8 0200 003F                  		andi.b	#$3F,d0
0000D8FC 6600                       		bne.s	Obj49_ChkDel
0000D8FE 303C 00D0                  		move.w	#$D0,d0
0000D902 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D908                            
0000D908                            Obj49_ChkDel:
0000D908 3028 0008                  		move.w	8(a0),d0
0000D90C 0240 FF80                  		andi.w	#$FF80,d0
0000D910 3238 F700                  		move.w	($FFFFF700).w,d1
0000D914 0441 0080                  		subi.w	#$80,d1
0000D918 0241 FF80                  		andi.w	#$FF80,d1
0000D91C 9041                       		sub.w	d1,d0
0000D91E 0C40 0280                  		cmpi.w	#$280,d0
0000D922 6200 0000                  		bhi.w	DeleteObject
0000D926 4E75                       		rts	
0000D928                            ; ===========================================================================
0000D928                            ; ---------------------------------------------------------------------------
0000D928                            ; Sprite mappings - purple rock	(GHZ)
0000D928                            ; ---------------------------------------------------------------------------
0000D928                            Map_obj3B:
0000D928                            	include "_maps\obj3B.asm"
0000D928                            ; ---------------------------------------------------------------------------
0000D928                            ; Sprite mappings - purple rock	(GHZ)
0000D928                            ; ---------------------------------------------------------------------------
0000D928 0000                       		dc.w byte_D110-Map_obj3B
0000D92A 02                         byte_D110:	dc.b 2
0000D92B F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D930 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D936 00                         		even
0000D936 00                         		even
0000D936                            
0000D936                            ; ===========================================================================
0000D936                            ; ---------------------------------------------------------------------------
0000D936                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D936                            ; ---------------------------------------------------------------------------
0000D936                            
0000D936                            Obj3C:					; XREF: Obj_Index
0000D936 7000                       		moveq	#0,d0
0000D938 1028 0024                  		move.b	$24(a0),d0
0000D93C 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D940 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D944 6000 0000                  		bra.w	MarkObjGone
0000D948                            ; ===========================================================================
0000D948 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D94A 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D94C 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D94E                            ; ===========================================================================
0000D94E                            
0000D94E                            Obj3C_Main:				; XREF: Obj3C_Index
0000D94E 5428 0024                  		addq.b	#2,$24(a0)
0000D952 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D95A 317C 450F 0002             		move.w	#$450F,2(a0)
0000D960 117C 0004 0001             		move.b	#4,1(a0)
0000D966 117C 0010 0019             		move.b	#$10,$19(a0)
0000D96C 117C 0004 0018             		move.b	#4,$18(a0)
0000D972 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D978                            
0000D978                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D978 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D97E 323C 001B                  		move.w	#$1B,d1
0000D982 343C 0020                  		move.w	#$20,d2
0000D986 363C 0020                  		move.w	#$20,d3
0000D98A 3828 0008                  		move.w	8(a0),d4
0000D98E 6100 0000                  		bsr.w	SolidObject
0000D992 0828 0005 0022             		btst	#5,$22(a0)
0000D998 6600                       		bne.s	Obj3C_ChkRoll
0000D99A                            
0000D99A                            locret_D180:
0000D99A 4E75                       		rts	
0000D99C                            ; ===========================================================================
0000D99C                            
0000D99C                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D99C 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D9A2 66F6                       		bne.s	locret_D180	; if not, branch
0000D9A4 3028 0030                  		move.w	$30(a0),d0
0000D9A8 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D9AA 4440                       		neg.w	d0
0000D9AC                            
0000D9AC                            Obj3C_ChkSpeed:
0000D9AC 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D9B0 65E8                       		bcs.s	locret_D180	; if not, branch
0000D9B2 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D9B8 5869 0008                  		addq.w	#4,8(a1)
0000D9BC 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D9C2 3028 0008                  		move.w	8(a0),d0
0000D9C6 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D9CA 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D9CC 5169 0008                  		subq.w	#8,8(a1)
0000D9D0 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D9D6                            
0000D9D6                            Obj3C_Smash:
0000D9D6 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D9DC 08A8 0005 0022             		bclr	#5,$22(a0)
0000D9E2 08A9 0005 0022             		bclr	#5,$22(a1)
0000D9E8 7207                       		moveq	#7,d1		; load 8 fragments
0000D9EA 343C 0070                  		move.w	#$70,d2
0000D9EE 6100                       		bsr.s	SmashObject
0000D9F0                            
0000D9F0                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D9F0 6100 0000                  		bsr.w	SpeedToPos
0000D9F4 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D9FA 6100 0000                  		bsr.w	DisplaySprite
0000D9FE 4A28 0001                  		tst.b	1(a0)
0000DA02 6A00 0000                  		bpl.w	DeleteObject
0000DA06 4E75                       		rts	
0000DA08                            
0000DA08                            ; ---------------------------------------------------------------------------
0000DA08                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000DA08                            ; ---------------------------------------------------------------------------
0000DA08                            
0000DA08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA08                            
0000DA08                            
0000DA08                            SmashObject:				; XREF: Obj3C_Smash
0000DA08 7000                       		moveq	#0,d0
0000DA0A 1028 001A                  		move.b	$1A(a0),d0
0000DA0E D040                       		add.w	d0,d0
0000DA10 2668 0004                  		movea.l	4(a0),a3
0000DA14 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000DA18 524B                       		addq.w	#1,a3
0000DA1A 08E8 0005 0001             		bset	#5,1(a0)
0000DA20 1810                       		move.b	0(a0),d4
0000DA22 1A28 0001                  		move.b	1(a0),d5
0000DA26 2248                       		movea.l	a0,a1
0000DA28 6000                       		bra.s	Smash_LoadFrag
0000DA2A                            ; ===========================================================================
0000DA2A                            
0000DA2A                            Smash_Loop:
0000DA2A 6100 0000                  		bsr.w	SingleObjLoad
0000DA2E 6600                       		bne.s	Smash_PlaySnd
0000DA30 5A4B                       		addq.w	#5,a3
0000DA32                            
0000DA32                            Smash_LoadFrag:				; XREF: SmashObject
0000DA32 137C 0004 0024             		move.b	#4,$24(a1)
0000DA38 1284                       		move.b	d4,0(a1)
0000DA3A 234B 0004                  		move.l	a3,4(a1)
0000DA3E 1345 0001                  		move.b	d5,1(a1)
0000DA42 3368 0008 0008             		move.w	8(a0),8(a1)
0000DA48 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DA4E 3368 0002 0002             		move.w	2(a0),2(a1)
0000DA54 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000DA5A 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000DA60 335C 0010                  		move.w	(a4)+,$10(a1)
0000DA64 335C 0012                  		move.w	(a4)+,$12(a1)
0000DA68 B3C8                       		cmpa.l	a0,a1
0000DA6A 6400                       		bcc.s	loc_D268
0000DA6C 2F08                       		move.l	a0,-(sp)
0000DA6E 2049                       		movea.l	a1,a0
0000DA70 6100 0000                  		bsr.w	SpeedToPos
0000DA74 D568 0012                  		add.w	d2,$12(a0)
0000DA78 205F                       		movea.l	(sp)+,a0
0000DA7A 6100 0000                  		bsr.w	DisplaySprite2
0000DA7E                            
0000DA7E                            loc_D268:
0000DA7E 51C9 FFAA                  		dbf	d1,Smash_Loop
0000DA82                            
0000DA82                            Smash_PlaySnd:
0000DA82 303C 00CB                  		move.w	#$CB,d0
0000DA86 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play smashing sound
0000DA8C                            ; End of function SmashObject
0000DA8C                            
0000DA8C                            ; ===========================================================================
0000DA8C                            ; Smashed block	fragment speeds
0000DA8C                            ;
0000DA8C 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000DA90 0600 FF00                  		dc.w $600, $FF00
0000DA94 0600 0100                  		dc.w $600, $100
0000DA98 0400 0500                  		dc.w $400, $500
0000DA9C 0600 FA00                  		dc.w $600, $FA00
0000DAA0 0800 FE00                  		dc.w $800, $FE00
0000DAA4 0800 0200                  		dc.w $800, $200
0000DAA8 0600 0600                  		dc.w $600, $600
0000DAAC                            
0000DAAC FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000DAB0 F800 FE00                  		dc.w $F800, $FE00
0000DAB4 F800 0200                  		dc.w $F800, $200
0000DAB8 FA00 0600                  		dc.w $FA00, $600
0000DABC FC00 FB00                  		dc.w $FC00, $FB00
0000DAC0 FA00 FF00                  		dc.w $FA00, $FF00
0000DAC4 FA00 0100                  		dc.w $FA00, $100
0000DAC8 FC00 0500                  		dc.w $FC00, $500
0000DACC                            ; ---------------------------------------------------------------------------
0000DACC                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DACC                            ; ---------------------------------------------------------------------------
0000DACC                            Map_obj3C:
0000DACC                            	include "_maps\obj3C.asm"
0000DACC                            ; ---------------------------------------------------------------------------
0000DACC                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000DACC                            ; ---------------------------------------------------------------------------
0000DACC 0000                       		dc.w byte_D2BC-Map_obj3C
0000DACE 0000                       		dc.w byte_D2E5-Map_obj3C
0000DAD0 0000                       		dc.w byte_D30E-Map_obj3C
0000DAD2 08                         byte_D2BC:	dc.b 8
0000DAD3 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000DAD8 F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000DADD 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000DAE2 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000DAE7 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DAEC F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DAF1 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DAF6 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DAFB 08                         byte_D2E5:	dc.b 8
0000DAFC E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB01 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB06 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB0B 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB10 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000DB15 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000DB1A 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000DB1F 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000DB24 08                         byte_D30E:	dc.b 8
0000DB25 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000DB2A F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000DB2F 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000DB34 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000DB39 E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000DB3E F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000DB43 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000DB48 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000DB4E 00                         		even
0000DB4E 00                         		even
0000DB4E                            
0000DB4E                            ; ---------------------------------------------------------------------------
0000DB4E                            ; Object code loading subroutine
0000DB4E                            ; ---------------------------------------------------------------------------
0000DB4E                            
0000DB4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DB4E                            
0000DB4E                            
0000DB4E                            ObjectsLoad:				; XREF: TitleScreen; et al
0000DB4E 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000DB52 7E7F                       		moveq	#$7F,d7
0000DB54 7000                       		moveq	#0,d0
0000DB56 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000DB5C 6400                       		bcc.s	loc_D362
0000DB5E                            
0000DB5E                            loc_D348:
0000DB5E 1010                       		move.b	(a0),d0		; load object number from RAM
0000DB60 6700                       		beq.s	loc_D358
0000DB62 D040                       		add.w	d0,d0
0000DB64 D040                       		add.w	d0,d0
0000DB66 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000DB6A 4E91                       		jsr	(a1)		; run the object's code
0000DB6C 7000                       		moveq	#0,d0
0000DB6E                            
0000DB6E                            loc_D358:
0000DB6E 41E8 0040                  		lea	$40(a0),a0	; next object
0000DB72 51CF FFEA                  		dbf	d7,loc_D348
0000DB76 4E75                       		rts	
0000DB78                            ; ===========================================================================
0000DB78                            
0000DB78                            loc_D362:
0000DB78 7E1F                       		moveq	#$1F,d7
0000DB7A 61E2                       		bsr.s	loc_D348
0000DB7C 7E5F                       		moveq	#$5F,d7
0000DB7E                            
0000DB7E                            loc_D368:
0000DB7E 7000                       		moveq	#0,d0
0000DB80 1010                       		move.b	(a0),d0
0000DB82 6700                       		beq.s	loc_D378
0000DB84 4A28 0001                  		tst.b	1(a0)
0000DB88 6A00                       		bpl.s	loc_D378
0000DB8A 6100 0000                  		bsr.w	DisplaySprite
0000DB8E                            
0000DB8E                            loc_D378:
0000DB8E 41E8 0040                  		lea	$40(a0),a0
0000DB92                            
0000DB92                            loc_D37C:
0000DB92 51CF FFEA                  		dbf	d7,loc_D368
0000DB96 4E75                       		rts	
0000DB98                            ; End of function ObjectsLoad
0000DB98                            
0000DB98                            ; ===========================================================================
0000DB98                            ; ---------------------------------------------------------------------------
0000DB98                            ; Object pointers
0000DB98                            ; ---------------------------------------------------------------------------
0000DB98                            Obj_Index:
0000DB98                            	include "_inc\Object pointers.asm"
0000DB98                            ; ---------------------------------------------------------------------------
0000DB98                            ; Object pointers
0000DB98                            ; ---------------------------------------------------------------------------
0000DB98 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000DBA8 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000DBB8 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000DBC8 0000 0000 0000 ADDE 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000DBD8 0000 797A 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000DBE8 0000 7FA0 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000DBF8 0000 87EE 0000 88E8 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000DC08 0000 8F32 0000 9220 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000DC18 0000 0000 0000 9EDA 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000DC28 0000 A212 0000 A7FE 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000DC38 0000 9B36 0000 9008 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000DC48 0000 B3D6 0000 A9F2 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000DC58 0000 BDEA 0000 C498 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000DC68 0000 B948 0000 D642 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000DC78 0000 CC1E 0000 CCD8 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000DC88 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000DC98 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000DCA8 0000 C106 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000DCB8 0000 D8D8 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000DCC8 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000DCD8 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000DCE8 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000DCF8 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000DD08 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000DD18 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000DD28 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000DD38 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000DD48 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000DD58 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000DD68 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000DD78 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000DD88 0000 0000 0000 CF12 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000DD98 0000 5486 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000DDA8 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000DDB8 0000 5B40 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDB8 0000 5B40 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000DDC8                            
0000DDC8                            ; ---------------------------------------------------------------------------
0000DDC8                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DDC8                            ; ---------------------------------------------------------------------------
0000DDC8                            
0000DDC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDC8                            
0000DDC8                            
0000DDC8                            ObjectFall:
0000DDC8 2428 0008                  		move.l	8(a0),d2
0000DDCC 2628 000C                  		move.l	$C(a0),d3
0000DDD0 3028 0010                  		move.w	$10(a0),d0
0000DDD4 48C0                       		ext.l	d0
0000DDD6 E180                       		asl.l	#8,d0
0000DDD8 D480                       		add.l	d0,d2
0000DDDA 3028 0012                  		move.w	$12(a0),d0
0000DDDE 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000DDE4 48C0                       		ext.l	d0
0000DDE6 E180                       		asl.l	#8,d0
0000DDE8 D680                       		add.l	d0,d3
0000DDEA 2142 0008                  		move.l	d2,8(a0)
0000DDEE 2143 000C                  		move.l	d3,$C(a0)
0000DDF2 4E75                       		rts	
0000DDF4                            ; End of function ObjectFall
0000DDF4                            
0000DDF4                            ; ---------------------------------------------------------------------------
0000DDF4                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000DDF4                            ; ---------------------------------------------------------------------------
0000DDF4                            
0000DDF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DDF4                            
0000DDF4                            
0000DDF4                            ObjectFallNoJump:
0000DDF4 2428 0008                  		move.l	8(a0),d2
0000DDF8 2628 000C                  		move.l	$C(a0),d3
0000DDFC 3028 0010                  		move.w	$10(a0),d0
0000DE00 48C0                       		ext.l	d0
0000DE02 E180                       		asl.l	#8,d0
0000DE04 D480                       		add.l	d0,d2
0000DE06                            ;		cmpi.b	#1,obID(a0)
0000DE06                            ;		beq.s	ObjectFallSonic
0000DE06 3028 000C                  		move.w	$C(a0),d0
0000DE0A 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000DE0E                            ;		ext.l	d0
0000DE0E                            ;		asl.l	#8,d0
0000DE0E                            ;		add.l	d0,d3
0000DE0E 2142 0008                  		move.l	d2,$8(a0)
0000DE12                            ;		move.l	d3,obY(a0)
0000DE12 4E75                       		rts	
0000DE14                            
0000DE14                            ; End of function ObjectFall
0000DE14                            
0000DE14                            JumpFallSonic:
0000DE14 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000DE1A                                    
0000DE1A E180                               asl.l    #8,d0                ; Apply X speed
0000DE1C D1A8 0008                          add.l    d0,$8(a0)
0000DE20                                    
0000DE20 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000DE24 4A41                               tst.w    d1                ; Are we falling?
0000DE26 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000DE28 4440                               neg.w    d0                ; Make Y movement go up
0000DE2A                                    
0000DE2A                            .SetYSpeed:
0000DE2A 48C0                               ext.l    d0                ; Apply Y speed
0000DE2C E180                               asl.l    #8,d0
0000DE2E D1A8 000C                          add.l    d0,$C(a0)
0000DE32 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000DE38 4E75                               rts
0000DE3A                            
0000DE3A                            ; ---------------------------------------------------------------------------
0000DE3A                            ; Subroutine translating object	speed to update	object position
0000DE3A                            ; ---------------------------------------------------------------------------
0000DE3A                            
0000DE3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE3A                            
0000DE3A                            
0000DE3A                            SpeedToPos:
0000DE3A 2428 0008                  		move.l	8(a0),d2
0000DE3E 2628 000C                  		move.l	$C(a0),d3
0000DE42 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000DE46 48C0                       		ext.l	d0
0000DE48 E180                       		asl.l	#8,d0		; multiply speed by $100
0000DE4A D480                       		add.l	d0,d2		; add to x-axis	position
0000DE4C 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000DE50 48C0                       		ext.l	d0
0000DE52 E180                       		asl.l	#8,d0		; multiply by $100
0000DE54 D680                       		add.l	d0,d3		; add to y-axis	position
0000DE56 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000DE5A 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000DE5E 4E75                       		rts	
0000DE60                            ; End of function SpeedToPos
0000DE60                            
0000DE60                            ; ---------------------------------------------------------------------------
0000DE60                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000DE60                            ; ---------------------------------------------------------------------------
0000DE60                            
0000DE60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE60                            
0000DE60                            
0000DE60                            DisplaySprite:
0000DE60 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000DE64 3028 0018                  		move.w	$18(a0),d0
0000DE68 E248                       		lsr.w	#1,d0
0000DE6A 0240 0380                  		andi.w	#$380,d0
0000DE6E D2C0                       		adda.w	d0,a1
0000DE70 0C51 007E                  		cmpi.w	#$7E,(a1)
0000DE74 6400                       		bcc.s	locret_D620
0000DE76 5451                       		addq.w	#2,(a1)
0000DE78 D2D1                       		adda.w	(a1),a1
0000DE7A 3288                       		move.w	a0,(a1)
0000DE7C                            
0000DE7C                            locret_D620:
0000DE7C 4E75                       		rts	
0000DE7E                            ; End of function DisplaySprite
0000DE7E                            
0000DE7E                            ; ---------------------------------------------------------------------------
0000DE7E                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000DE7E                            ; ---------------------------------------------------------------------------
0000DE7E                            
0000DE7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE7E                            
0000DE7E                            
0000DE7E                            DisplaySprite2:
0000DE7E 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000DE82 3029 0018                  		move.w	$18(a1),d0
0000DE86 E248                       		lsr.w	#1,d0
0000DE88 0240 0380                  		andi.w	#$380,d0
0000DE8C D4C0                       		adda.w	d0,a2
0000DE8E 0C52 007E                  		cmpi.w	#$7E,(a2)
0000DE92 6400                       		bcc.s	locret_D63E
0000DE94 5452                       		addq.w	#2,(a2)
0000DE96 D4D2                       		adda.w	(a2),a2
0000DE98 3489                       		move.w	a1,(a2)
0000DE9A                            
0000DE9A                            locret_D63E:
0000DE9A 4E75                       		rts	
0000DE9C                            ; End of function DisplaySprite2
0000DE9C                            
0000DE9C                            ; ---------------------------------------------------------------------------
0000DE9C                            ; Subroutine to	delete an object
0000DE9C                            ; ---------------------------------------------------------------------------
0000DE9C                            
0000DE9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DE9C                            
0000DE9C                            
0000DE9C                            DeleteObject:
0000DE9C 2248                       		movea.l	a0,a1
0000DE9E                            
0000DE9E                            DeleteObject2:
0000DE9E 7200                       		moveq	#0,d1
0000DEA0 700F                       		moveq	#$F,d0
0000DEA2                            
0000DEA2                            loc_D646:
0000DEA2 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000DEA4 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000DEA8 4E75                       		rts	
0000DEAA                            ; End of function DeleteObject
0000DEAA                            
0000DEAA                            ; ===========================================================================
0000DEAA 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000DEAE 00FF F700                  		dc.l $FFF700		; main screen x-position
0000DEB2 00FF F708                  		dc.l $FFF708		; background x-position	1
0000DEB6 00FF F718                  		dc.l $FFF718		; background x-position	2
0000DEBA                            ; ---------------------------------------------------------------------------
0000DEBA                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000DEBA                            ; ---------------------------------------------------------------------------
0000DEBA                            
0000DEBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DEBA                            
0000DEBA                            
0000DEBA                            BuildSprites:				; XREF: TitleScreen; et al
0000DEBA 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000DEBE 7A00                       		moveq	#0,d5
0000DEC0 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000DEC4 7E07                       		moveq	#7,d7
0000DEC6                            
0000DEC6                            loc_D66A:
0000DEC6 4A54                       		tst.w	(a4)
0000DEC8 6700 0000                  		beq.w	loc_D72E
0000DECC 7C02                       		moveq	#2,d6
0000DECE                            
0000DECE                            loc_D672:
0000DECE 3074 6000                  		movea.w	(a4,d6.w),a0
0000DED2 4A10                       		tst.b	(a0)
0000DED4 6700 0000                  		beq.w	loc_D726
0000DED8 08A8 0007 0001             		bclr	#7,1(a0)
0000DEDE 1028 0001                  		move.b	1(a0),d0
0000DEE2 1800                       		move.b	d0,d4
0000DEE4 0240 000C                  		andi.w	#$C,d0
0000DEE8 6700                       		beq.s	loc_D6DE
0000DEEA 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000DEEE 7000                       		moveq	#0,d0
0000DEF0 1028 0019                  		move.b	$19(a0),d0
0000DEF4 3628 0008                  		move.w	8(a0),d3
0000DEF8 9651                       		sub.w	(a1),d3
0000DEFA 3203                       		move.w	d3,d1
0000DEFC D240                       		add.w	d0,d1
0000DEFE 6B00 0000                  		bmi.w	loc_D726
0000DF02 3203                       		move.w	d3,d1
0000DF04 9240                       		sub.w	d0,d1
0000DF06 0C41 0140                  		cmpi.w	#$140,d1
0000DF0A 6C00                       		bge.s	loc_D726
0000DF0C 0643 0080                  		addi.w	#$80,d3
0000DF10 0804 0004                  		btst	#4,d4
0000DF14 6700                       		beq.s	loc_D6E8
0000DF16 7000                       		moveq	#0,d0
0000DF18 1028 0016                  		move.b	$16(a0),d0
0000DF1C 3428 000C                  		move.w	$C(a0),d2
0000DF20 9469 0004                  		sub.w	4(a1),d2
0000DF24 3202                       		move.w	d2,d1
0000DF26 D240                       		add.w	d0,d1
0000DF28 6B00                       		bmi.s	loc_D726
0000DF2A 3202                       		move.w	d2,d1
0000DF2C 9240                       		sub.w	d0,d1
0000DF2E 0C41 00E0                  		cmpi.w	#$E0,d1
0000DF32 6C00                       		bge.s	loc_D726
0000DF34 0642 0080                  		addi.w	#$80,d2
0000DF38 6000                       		bra.s	loc_D700
0000DF3A                            ; ===========================================================================
0000DF3A                            
0000DF3A                            loc_D6DE:
0000DF3A 3428 000A                  		move.w	$A(a0),d2
0000DF3E 3628 0008                  		move.w	8(a0),d3
0000DF42 6000                       		bra.s	loc_D700
0000DF44                            ; ===========================================================================
0000DF44                            
0000DF44                            loc_D6E8:
0000DF44 3428 000C                  		move.w	$C(a0),d2
0000DF48 9469 0004                  		sub.w	4(a1),d2
0000DF4C 0642 0080                  		addi.w	#$80,d2
0000DF50 0C42 0060                  		cmpi.w	#$60,d2
0000DF54 6500                       		bcs.s	loc_D726
0000DF56 0C42 0180                  		cmpi.w	#$180,d2
0000DF5A 6400                       		bcc.s	loc_D726
0000DF5C                            
0000DF5C                            loc_D700:
0000DF5C 2268 0004                  		movea.l	4(a0),a1
0000DF60 7200                       		moveq	#0,d1
0000DF62 0804 0005                  		btst	#5,d4
0000DF66 6600                       		bne.s	loc_D71C
0000DF68 1228 001A                  		move.b	$1A(a0),d1
0000DF6C D201                       		add.b	d1,d1
0000DF6E D2F1 1000                  		adda.w	(a1,d1.w),a1
0000DF72 1219                       		move.b	(a1)+,d1
0000DF74 5301                       		subq.b	#1,d1
0000DF76 6B00                       		bmi.s	loc_D720
0000DF78                            
0000DF78                            loc_D71C:
0000DF78 6100 0000                  		bsr.w	sub_D750
0000DF7C                            
0000DF7C                            loc_D720:
0000DF7C 08E8 0007 0001             		bset	#7,1(a0)
0000DF82                            
0000DF82                            loc_D726:
0000DF82 5446                       		addq.w	#2,d6
0000DF84 5554                       		subq.w	#2,(a4)
0000DF86 6600 FF46                  		bne.w	loc_D672
0000DF8A                            
0000DF8A                            loc_D72E:
0000DF8A 49EC 0080                  		lea	$80(a4),a4
0000DF8E 51CF FF36                  		dbf	d7,loc_D66A
0000DF92 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000DF96 0C05 0050                  		cmpi.b	#$50,d5
0000DF9A 6700                       		beq.s	loc_D748
0000DF9C 24BC 0000 0000             		move.l	#0,(a2)
0000DFA2 4E75                       		rts	
0000DFA4                            ; ===========================================================================
0000DFA4                            
0000DFA4                            loc_D748:
0000DFA4 157C 0000 FFFB             		move.b	#0,-5(a2)
0000DFAA 4E75                       		rts	
0000DFAC                            ; End of function BuildSprites
0000DFAC                            
0000DFAC                            
0000DFAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFAC                            
0000DFAC                            
0000DFAC                            sub_D750:				; XREF: BuildSprites
0000DFAC 3668 0002                  		movea.w	2(a0),a3
0000DFB0 0804 0000                  		btst	#0,d4
0000DFB4 6600                       		bne.s	loc_D796
0000DFB6 0804 0001                  		btst	#1,d4
0000DFBA 6600 0000                  		bne.w	loc_D7E4
0000DFBE                            ; End of function sub_D750
0000DFBE                            
0000DFBE                            
0000DFBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DFBE                            
0000DFBE                            
0000DFBE                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000DFBE 0C05 0050                  		cmpi.b	#$50,d5
0000DFC2 6700                       		beq.s	locret_D794
0000DFC4 1019                       		move.b	(a1)+,d0
0000DFC6 4880                       		ext.w	d0
0000DFC8 D042                       		add.w	d2,d0
0000DFCA 34C0                       		move.w	d0,(a2)+
0000DFCC 14D9                       		move.b	(a1)+,(a2)+
0000DFCE 5205                       		addq.b	#1,d5
0000DFD0 14C5                       		move.b	d5,(a2)+
0000DFD2 1019                       		move.b	(a1)+,d0
0000DFD4 E148                       		lsl.w	#8,d0
0000DFD6 1019                       		move.b	(a1)+,d0
0000DFD8 D04B                       		add.w	a3,d0
0000DFDA 34C0                       		move.w	d0,(a2)+
0000DFDC 1019                       		move.b	(a1)+,d0
0000DFDE 4880                       		ext.w	d0
0000DFE0 D043                       		add.w	d3,d0
0000DFE2 0240 01FF                  		andi.w	#$1FF,d0
0000DFE6 6600                       		bne.s	loc_D78E
0000DFE8 5240                       		addq.w	#1,d0
0000DFEA                            
0000DFEA                            loc_D78E:
0000DFEA 34C0                       		move.w	d0,(a2)+
0000DFEC 51C9 FFD0                  		dbf	d1,sub_D762
0000DFF0                            
0000DFF0                            locret_D794:
0000DFF0 4E75                       		rts	
0000DFF2                            ; End of function sub_D762
0000DFF2                            
0000DFF2                            ; ===========================================================================
0000DFF2                            
0000DFF2                            loc_D796:
0000DFF2 0804 0001                  		btst	#1,d4
0000DFF6 6600 0000                  		bne.w	loc_D82A
0000DFFA                            
0000DFFA                            loc_D79E:
0000DFFA 0C05 0050                  		cmpi.b	#$50,d5
0000DFFE 6700                       		beq.s	locret_D7E2
0000E000 1019                       		move.b	(a1)+,d0
0000E002 4880                       		ext.w	d0
0000E004 D042                       		add.w	d2,d0
0000E006 34C0                       		move.w	d0,(a2)+
0000E008 1819                       		move.b	(a1)+,d4
0000E00A 14C4                       		move.b	d4,(a2)+
0000E00C 5205                       		addq.b	#1,d5
0000E00E 14C5                       		move.b	d5,(a2)+
0000E010 1019                       		move.b	(a1)+,d0
0000E012 E148                       		lsl.w	#8,d0
0000E014 1019                       		move.b	(a1)+,d0
0000E016 D04B                       		add.w	a3,d0
0000E018 0A40 0800                  		eori.w	#$800,d0
0000E01C 34C0                       		move.w	d0,(a2)+
0000E01E 1019                       		move.b	(a1)+,d0
0000E020 4880                       		ext.w	d0
0000E022 4440                       		neg.w	d0
0000E024 D804                       		add.b	d4,d4
0000E026 0244 0018                  		andi.w	#$18,d4
0000E02A 5044                       		addq.w	#8,d4
0000E02C 9044                       		sub.w	d4,d0
0000E02E D043                       		add.w	d3,d0
0000E030 0240 01FF                  		andi.w	#$1FF,d0
0000E034 6600                       		bne.s	loc_D7DC
0000E036 5240                       		addq.w	#1,d0
0000E038                            
0000E038                            loc_D7DC:
0000E038 34C0                       		move.w	d0,(a2)+
0000E03A 51C9 FFBE                  		dbf	d1,loc_D79E
0000E03E                            
0000E03E                            locret_D7E2:
0000E03E 4E75                       		rts	
0000E040                            ; ===========================================================================
0000E040                            
0000E040                            loc_D7E4:				; XREF: sub_D750
0000E040 0C05 0050                  		cmpi.b	#$50,d5
0000E044 6700                       		beq.s	locret_D828
0000E046 1019                       		move.b	(a1)+,d0
0000E048 1811                       		move.b	(a1),d4
0000E04A 4880                       		ext.w	d0
0000E04C 4440                       		neg.w	d0
0000E04E E70C                       		lsl.b	#3,d4
0000E050 0244 0018                  		andi.w	#$18,d4
0000E054 5044                       		addq.w	#8,d4
0000E056 9044                       		sub.w	d4,d0
0000E058 D042                       		add.w	d2,d0
0000E05A 34C0                       		move.w	d0,(a2)+
0000E05C 14D9                       		move.b	(a1)+,(a2)+
0000E05E 5205                       		addq.b	#1,d5
0000E060 14C5                       		move.b	d5,(a2)+
0000E062 1019                       		move.b	(a1)+,d0
0000E064 E148                       		lsl.w	#8,d0
0000E066 1019                       		move.b	(a1)+,d0
0000E068 D04B                       		add.w	a3,d0
0000E06A 0A40 1000                  		eori.w	#$1000,d0
0000E06E 34C0                       		move.w	d0,(a2)+
0000E070 1019                       		move.b	(a1)+,d0
0000E072 4880                       		ext.w	d0
0000E074 D043                       		add.w	d3,d0
0000E076 0240 01FF                  		andi.w	#$1FF,d0
0000E07A 6600                       		bne.s	loc_D822
0000E07C 5240                       		addq.w	#1,d0
0000E07E                            
0000E07E                            loc_D822:
0000E07E 34C0                       		move.w	d0,(a2)+
0000E080 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E084                            
0000E084                            locret_D828:
0000E084 4E75                       		rts	
0000E086                            ; ===========================================================================
0000E086                            
0000E086                            loc_D82A:
0000E086 0C05 0050                  		cmpi.b	#$50,d5
0000E08A 6700                       		beq.s	locret_D87C
0000E08C 1019                       		move.b	(a1)+,d0
0000E08E 1811                       		move.b	(a1),d4
0000E090 4880                       		ext.w	d0
0000E092 4440                       		neg.w	d0
0000E094 E70C                       		lsl.b	#3,d4
0000E096 0244 0018                  		andi.w	#$18,d4
0000E09A 5044                       		addq.w	#8,d4
0000E09C 9044                       		sub.w	d4,d0
0000E09E D042                       		add.w	d2,d0
0000E0A0 34C0                       		move.w	d0,(a2)+
0000E0A2 1819                       		move.b	(a1)+,d4
0000E0A4 14C4                       		move.b	d4,(a2)+
0000E0A6 5205                       		addq.b	#1,d5
0000E0A8 14C5                       		move.b	d5,(a2)+
0000E0AA 1019                       		move.b	(a1)+,d0
0000E0AC E148                       		lsl.w	#8,d0
0000E0AE 1019                       		move.b	(a1)+,d0
0000E0B0 D04B                       		add.w	a3,d0
0000E0B2 0A40 1800                  		eori.w	#$1800,d0
0000E0B6 34C0                       		move.w	d0,(a2)+
0000E0B8 1019                       		move.b	(a1)+,d0
0000E0BA 4880                       		ext.w	d0
0000E0BC 4440                       		neg.w	d0
0000E0BE D804                       		add.b	d4,d4
0000E0C0 0244 0018                  		andi.w	#$18,d4
0000E0C4 5044                       		addq.w	#8,d4
0000E0C6 9044                       		sub.w	d4,d0
0000E0C8 D043                       		add.w	d3,d0
0000E0CA 0240 01FF                  		andi.w	#$1FF,d0
0000E0CE 6600                       		bne.s	loc_D876
0000E0D0 5240                       		addq.w	#1,d0
0000E0D2                            
0000E0D2                            loc_D876:
0000E0D2 34C0                       		move.w	d0,(a2)+
0000E0D4 51C9 FFB0                  		dbf	d1,loc_D82A
0000E0D8                            
0000E0D8                            locret_D87C:
0000E0D8 4E75                       		rts	
0000E0DA                            ; ---------------------------------------------------------------------------
0000E0DA                            ; Subroutine to	check if an object is on the screen
0000E0DA                            ; ---------------------------------------------------------------------------
0000E0DA                            
0000E0DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0DA                            
0000E0DA                            
0000E0DA                            ChkObjOnScreen:
0000E0DA 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E0DE 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E0E2 6B00                       		bmi.s	NotOnScreen
0000E0E4 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E0E8 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E0EA                            
0000E0EA 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E0EE 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E0F2 6B00                       		bmi.s	NotOnScreen
0000E0F4 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E0F8 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E0FA                            
0000E0FA 7000                       		moveq	#0,d0		; set flag to 0
0000E0FC 4E75                       		rts	
0000E0FE                            ; ===========================================================================
0000E0FE                            
0000E0FE                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E0FE 7001                       		moveq	#1,d0		; set flag to 1
0000E100 4E75                       		rts	
0000E102                            ; End of function ChkObjOnScreen
0000E102                            
0000E102                            
0000E102                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E102                            
0000E102                            
0000E102                            ChkObjOnScreen2:
0000E102 7200                       		moveq	#0,d1
0000E104 1228 0019                  		move.b	$19(a0),d1
0000E108 3028 0008                  		move.w	8(a0),d0
0000E10C 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E110 D041                       		add.w	d1,d0
0000E112 6B00                       		bmi.s	NotOnScreen2
0000E114 D241                       		add.w	d1,d1
0000E116 9041                       		sub.w	d1,d0
0000E118 0C40 0140                  		cmpi.w	#320,d0
0000E11C 6C00                       		bge.s	NotOnScreen2
0000E11E                            
0000E11E 3228 000C                  		move.w	$C(a0),d1
0000E122 9278 F704                  		sub.w	($FFFFF704).w,d1
0000E126 6B00                       		bmi.s	NotOnScreen2
0000E128 0C41 00E0                  		cmpi.w	#224,d1
0000E12C 6C00                       		bge.s	NotOnScreen2
0000E12E                            
0000E12E 7000                       		moveq	#0,d0
0000E130 4E75                       		rts	
0000E132                            ; ===========================================================================
0000E132                            
0000E132                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000E132 7001                       		moveq	#1,d0
0000E134 4E75                       		rts	
0000E136                            ; End of function ChkObjOnScreen2
0000E136                            
0000E136                            ; ---------------------------------------------------------------------------
0000E136                            ; Subroutine to	load a level's objects
0000E136                            ; ---------------------------------------------------------------------------
0000E136                            
0000E136                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E136                            
0000E136                            
0000E136                            ObjPosLoad:				; XREF: Level; et al
0000E136 7000                       		moveq	#0,d0
0000E138 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000E13C 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000E140 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000E144                            ; End of function ObjPosLoad
0000E144                            
0000E144                            ; ===========================================================================
0000E144 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000E146 0000                       		dc.w OPL_Next-OPL_Index
0000E148                            ; ===========================================================================
0000E148                            
0000E148                            OPL_Main:				; XREF: OPL_Index
0000E148 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000E14C 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000E150 ED08                       		lsl.b	#6,d0
0000E152 E848                       		lsr.w	#4,d0
0000E154 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000E15A 2248                       		movea.l	a0,a1
0000E15C D0F0 0000                  		adda.w	(a0,d0.w),a0
0000E160 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E164 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E168 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000E16C 21C9 F778                  		move.l	a1,($FFFFF778).w
0000E170 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000E174 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E178 34FC 0101                  		move.w	#$101,(a2)+
0000E17C 303C 005E                  		move.w	#$5E,d0
0000E180                            
0000E180                            OPL_ClrList:
0000E180 429A                       		clr.l	(a2)+
0000E182 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000E186                            
0000E186 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E18A 7400                       		moveq	#0,d2
0000E18C 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E190 0446 0080                  		subi.w	#$80,d6
0000E194 6400                       		bcc.s	loc_D93C
0000E196 7C00                       		moveq	#0,d6
0000E198                            
0000E198                            loc_D93C:
0000E198 0246 FF80                  		andi.w	#$FF80,d6
0000E19C 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E1A0                            
0000E1A0                            loc_D944:
0000E1A0 BC50                       		cmp.w	(a0),d6
0000E1A2 6300                       		bls.s	loc_D956
0000E1A4 4A28 0004                  		tst.b	4(a0)
0000E1A8 6A00                       		bpl.s	loc_D952
0000E1AA 1412                       		move.b	(a2),d2
0000E1AC 5212                       		addq.b	#1,(a2)
0000E1AE                            
0000E1AE                            loc_D952:
0000E1AE 5C48                       		addq.w	#6,a0
0000E1B0 60EE                       		bra.s	loc_D944
0000E1B2                            ; ===========================================================================
0000E1B2                            
0000E1B2                            loc_D956:
0000E1B2 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E1B6 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E1BA 0446 0080                  		subi.w	#$80,d6
0000E1BE 6500                       		bcs.s	loc_D976
0000E1C0                            
0000E1C0                            loc_D964:
0000E1C0 BC50                       		cmp.w	(a0),d6
0000E1C2 6300                       		bls.s	loc_D976
0000E1C4 4A28 0004                  		tst.b	4(a0)
0000E1C8 6A00                       		bpl.s	loc_D972
0000E1CA 522A 0001                  		addq.b	#1,1(a2)
0000E1CE                            
0000E1CE                            loc_D972:
0000E1CE 5C48                       		addq.w	#6,a0
0000E1D0 60EE                       		bra.s	loc_D964
0000E1D2                            ; ===========================================================================
0000E1D2                            
0000E1D2                            loc_D976:
0000E1D2 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E1D6 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000E1DC                            
0000E1DC                            OPL_Next:				; XREF: OPL_Index
0000E1DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E1E0 7400                       		moveq	#0,d2
0000E1E2 3C38 F700                  		move.w	($FFFFF700).w,d6
0000E1E6 0246 FF80                  		andi.w	#$FF80,d6
0000E1EA BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000E1EE 6700 0000                  		beq.w	locret_DA3A
0000E1F2 6C00                       		bge.s	loc_D9F6
0000E1F4 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E1F8 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E1FC 0446 0080                  		subi.w	#$80,d6
0000E200 6500                       		bcs.s	loc_D9D2
0000E202                            
0000E202                            loc_D9A6:
0000E202 BC68 FFFA                  		cmp.w	-6(a0),d6
0000E206 6C00                       		bge.s	loc_D9D2
0000E208 5D48                       		subq.w	#6,a0
0000E20A 4A28 0004                  		tst.b	4(a0)
0000E20E 6A00                       		bpl.s	loc_D9BC
0000E210 532A 0001                  		subq.b	#1,1(a2)
0000E214 142A 0001                  		move.b	1(a2),d2
0000E218                            
0000E218                            loc_D9BC:
0000E218 6100 0000                  		bsr.w	loc_DA3C
0000E21C 6600                       		bne.s	loc_D9C6
0000E21E 5D48                       		subq.w	#6,a0
0000E220 60E0                       		bra.s	loc_D9A6
0000E222                            ; ===========================================================================
0000E222                            
0000E222                            loc_D9C6:
0000E222 4A28 0004                  		tst.b	4(a0)
0000E226 6A00                       		bpl.s	loc_D9D0
0000E228 522A 0001                  		addq.b	#1,1(a2)
0000E22C                            
0000E22C                            loc_D9D0:
0000E22C 5C48                       		addq.w	#6,a0
0000E22E                            
0000E22E                            loc_D9D2:
0000E22E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E232 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E236 0646 0300                  		addi.w	#$300,d6
0000E23A                            
0000E23A                            loc_D9DE:
0000E23A BC68 FFFA                  		cmp.w	-6(a0),d6
0000E23E 6E00                       		bgt.s	loc_D9F0
0000E240 4A28 FFFE                  		tst.b	-2(a0)
0000E244 6A00                       		bpl.s	loc_D9EC
0000E246 5312                       		subq.b	#1,(a2)
0000E248                            
0000E248                            loc_D9EC:
0000E248 5D48                       		subq.w	#6,a0
0000E24A 60EE                       		bra.s	loc_D9DE
0000E24C                            ; ===========================================================================
0000E24C                            
0000E24C                            loc_D9F0:
0000E24C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E250 4E75                       		rts	
0000E252                            ; ===========================================================================
0000E252                            
0000E252                            loc_D9F6:
0000E252 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000E256 2078 F770                  		movea.l	($FFFFF770).w,a0
0000E25A 0646 0280                  		addi.w	#$280,d6
0000E25E                            
0000E25E                            loc_DA02:
0000E25E BC50                       		cmp.w	(a0),d6
0000E260 6300                       		bls.s	loc_DA16
0000E262 4A28 0004                  		tst.b	4(a0)
0000E266 6A00                       		bpl.s	loc_DA10
0000E268 1412                       		move.b	(a2),d2
0000E26A 5212                       		addq.b	#1,(a2)
0000E26C                            
0000E26C                            loc_DA10:
0000E26C 6100 0000                  		bsr.w	loc_DA3C
0000E270 67EC                       		beq.s	loc_DA02
0000E272                            
0000E272                            loc_DA16:
0000E272 21C8 F770                  		move.l	a0,($FFFFF770).w
0000E276 2078 F774                  		movea.l	($FFFFF774).w,a0
0000E27A 0446 0300                  		subi.w	#$300,d6
0000E27E 6500                       		bcs.s	loc_DA36
0000E280                            
0000E280                            loc_DA24:
0000E280 BC50                       		cmp.w	(a0),d6
0000E282 6300                       		bls.s	loc_DA36
0000E284 4A28 0004                  		tst.b	4(a0)
0000E288 6A00                       		bpl.s	loc_DA32
0000E28A 522A 0001                  		addq.b	#1,1(a2)
0000E28E                            
0000E28E                            loc_DA32:
0000E28E 5C48                       		addq.w	#6,a0
0000E290 60EE                       		bra.s	loc_DA24
0000E292                            ; ===========================================================================
0000E292                            
0000E292                            loc_DA36:
0000E292 21C8 F774                  		move.l	a0,($FFFFF774).w
0000E296                            
0000E296                            locret_DA3A:
0000E296 4E75                       		rts	
0000E298                            ; ===========================================================================
0000E298                            
0000E298                            loc_DA3C:
0000E298 4A28 0004                  		tst.b	4(a0)
0000E29C 6A00                       		bpl.s	OPL_MakeItem
0000E29E 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000E2A4 6700                       		beq.s	OPL_MakeItem
0000E2A6 5C48                       		addq.w	#6,a0
0000E2A8 7000                       		moveq	#0,d0
0000E2AA 4E75                       		rts	
0000E2AC                            ; ===========================================================================
0000E2AC                            
0000E2AC                            OPL_MakeItem:
0000E2AC 6100 0000                  		bsr.w	SingleObjLoad
0000E2B0 6600                       		bne.s	locret_DA8A
0000E2B2 3358 0008                  		move.w	(a0)+,8(a1)
0000E2B6 3018                       		move.w	(a0)+,d0
0000E2B8 3200                       		move.w	d0,d1
0000E2BA 0240 0FFF                  		andi.w	#$FFF,d0
0000E2BE 3340 000C                  		move.w	d0,$C(a1)
0000E2C2 E559                       		rol.w	#2,d1
0000E2C4 0201 0003                  		andi.b	#3,d1
0000E2C8 1341 0001                  		move.b	d1,1(a1)
0000E2CC 1341 0022                  		move.b	d1,$22(a1)
0000E2D0 1018                       		move.b	(a0)+,d0
0000E2D2 6A00                       		bpl.s	loc_DA80
0000E2D4 0200 007F                  		andi.b	#$7F,d0
0000E2D8 1342 0023                  		move.b	d2,$23(a1)
0000E2DC                            
0000E2DC                            loc_DA80:
0000E2DC 1280                       		move.b	d0,0(a1)
0000E2DE 1358 0028                  		move.b	(a0)+,$28(a1)
0000E2E2 7000                       		moveq	#0,d0
0000E2E4                            
0000E2E4                            locret_DA8A:
0000E2E4 4E75                       		rts	
0000E2E6                            ; ---------------------------------------------------------------------------
0000E2E6                            ; Single object	loading	subroutine
0000E2E6                            ; ---------------------------------------------------------------------------
0000E2E6                            
0000E2E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2E6                            
0000E2E6                            
0000E2E6                            SingleObjLoad:
0000E2E6 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000E2EA 303C 005F                  		move.w	#$5F,d0
0000E2EE                            
0000E2EE                            loc_DA94:
0000E2EE 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000E2F0 6700                       		beq.s	locret_DAA0	; if yes, branch
0000E2F2 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000E2F6 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000E2FA                            
0000E2FA                            locret_DAA0:
0000E2FA 4E75                       		rts	
0000E2FC                            ; End of function SingleObjLoad
0000E2FC                            
0000E2FC                            
0000E2FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2FC                            
0000E2FC                            
0000E2FC                            SingleObjLoad2:
0000E2FC 2248                       		movea.l	a0,a1
0000E2FE 303C F000                  		move.w	#-$1000,d0
0000E302 9048                       		sub.w	a0,d0
0000E304 EC48                       		lsr.w	#6,d0
0000E306 5340                       		subq.w	#1,d0
0000E308 6500                       		bcs.s	locret_DABC
0000E30A                            
0000E30A                            loc_DAB0:
0000E30A 4A11                       		tst.b	(a1)
0000E30C 6700                       		beq.s	locret_DABC
0000E30E 43E9 0040                  		lea	$40(a1),a1
0000E312 51C8 FFF6                  		dbf	d0,loc_DAB0
0000E316                            
0000E316                            locret_DABC:
0000E316 4E75                       		rts	
0000E318                            ; End of function SingleObjLoad2
0000E318                            
0000E318                            ; ===========================================================================
0000E318                            ; ---------------------------------------------------------------------------
0000E318                            ; Object 41 - springs
0000E318                            ; ---------------------------------------------------------------------------
0000E318                            
0000E318                            Obj41:					; XREF: Obj_Index
0000E318 7000                       		moveq	#0,d0
0000E31A 1028 0024                  		move.b	$24(a0),d0
0000E31E 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000E322 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000E326 6100 FB38                  		bsr.w	DisplaySprite
0000E32A 3028 0008                  		move.w	8(a0),d0
0000E32E 0240 FF80                  		andi.w	#$FF80,d0
0000E332 3238 F700                  		move.w	($FFFFF700).w,d1
0000E336 0441 0080                  		subi.w	#$80,d1
0000E33A 0241 FF80                  		andi.w	#$FF80,d1
0000E33E 9041                       		sub.w	d1,d0
0000E340 0C40 0280                  		cmpi.w	#$280,d0
0000E344 6200 FB56                  		bhi.w	DeleteObject
0000E348 4E75                       		rts	
0000E34A                            ; ===========================================================================
0000E34A 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000E34C 0000                       		dc.w Obj41_Up-Obj41_Index
0000E34E 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000E350 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000E352 0000                       		dc.w Obj41_LR-Obj41_Index
0000E354 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000E356 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000E358 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000E35A 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000E35C 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000E35E                            
0000E35E F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000E360 F600                       		dc.w -$A00		; power	of yellow spring
0000E362                            ; ===========================================================================
0000E362                            
0000E362                            Obj41_Main:				; XREF: Obj41_Index
0000E362 5428 0024                  		addq.b	#2,$24(a0)
0000E366 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000E36E 317C 0523 0002             		move.w	#$523,2(a0)
0000E374 0028 0004 0001             		ori.b	#4,1(a0)
0000E37A 117C 0010 0019             		move.b	#$10,$19(a0)
0000E380 117C 0004 0018             		move.b	#4,$18(a0)
0000E386 1028 0028                  		move.b	$28(a0),d0
0000E38A 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000E38E 6700                       		beq.s	loc_DB54	; if not, branch
0000E390 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000E396 117C 0001 001C             		move.b	#1,$1C(a0)
0000E39C 117C 0003 001A             		move.b	#3,$1A(a0)
0000E3A2 317C 0533 0002             		move.w	#$533,2(a0)
0000E3A8 117C 0008 0019             		move.b	#8,$19(a0)
0000E3AE                            
0000E3AE                            loc_DB54:
0000E3AE 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000E3B2 6700                       		beq.s	loc_DB66	; if not, branch
0000E3B4 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000E3BA 08E8 0001 0022             		bset	#1,$22(a0)
0000E3C0                            
0000E3C0                            loc_DB66:
0000E3C0 0800 0001                  		btst	#1,d0
0000E3C4 6700                       		beq.s	loc_DB72
0000E3C6 08E8 0005 0002             		bset	#5,2(a0)
0000E3CC                            
0000E3CC                            loc_DB72:
0000E3CC 0240 000F                  		andi.w	#$F,d0
0000E3D0 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000E3D6 4E75                       		rts	
0000E3D8                            ; ===========================================================================
0000E3D8                            
0000E3D8                            Obj41_Up:				; XREF: Obj41_Index
0000E3D8 323C 001B                  		move.w	#$1B,d1
0000E3DC 343C 0008                  		move.w	#8,d2
0000E3E0 363C 0010                  		move.w	#$10,d3
0000E3E4 3828 0008                  		move.w	8(a0),d4
0000E3E8 6100 0000                  		bsr.w	SolidObject
0000E3EC 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000E3F0 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000E3F2 4E75                       		rts	
0000E3F4                            ; ===========================================================================
0000E3F4                            
0000E3F4                            Obj41_BounceUp:				; XREF: Obj41_Up
0000E3F4 5428 0024                  		addq.b	#2,$24(a0)
0000E3F8 5069 000C                  		addq.w	#8,$C(a1)
0000E3FC 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000E402 08E9 0001 0022             		bset	#1,$22(a1)
0000E408 08A9 0003 0022             		bclr	#3,$22(a1)
0000E40E 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000E414 137C 0002 0024             		move.b	#2,$24(a1)
0000E41A 08A8 0003 0022             		bclr	#3,$22(a0)
0000E420 4228 0025                  		clr.b	$25(a0)
0000E424 303C 00CC                  		move.w	#$CC,d0
0000E428 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E42E                            
0000E42E                            Obj41_AniUp:				; XREF: Obj41_Index
0000E42E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E434 6000 CAA4                  		bra.w	AnimateSprite
0000E438                            ; ===========================================================================
0000E438                            
0000E438                            Obj41_ResetUp:				; XREF: Obj41_Index
0000E438 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E43E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000E442 4E75                       		rts	
0000E444                            ; ===========================================================================
0000E444                            
0000E444                            Obj41_LR:				; XREF: Obj41_Index
0000E444 323C 0013                  		move.w	#$13,d1
0000E448 343C 000E                  		move.w	#$E,d2
0000E44C 363C 000F                  		move.w	#$F,d3
0000E450 3828 0008                  		move.w	8(a0),d4
0000E454 6100 0000                  		bsr.w	SolidObject
0000E458 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E45E 6600                       		bne.s	loc_DC0C
0000E460 117C 0008 0024             		move.b	#8,$24(a0)
0000E466                            
0000E466                            loc_DC0C:
0000E466 0828 0005 0022             		btst	#5,$22(a0)
0000E46C 6600                       		bne.s	Obj41_BounceLR
0000E46E 4E75                       		rts	
0000E470                            ; ===========================================================================
0000E470                            
0000E470                            Obj41_BounceLR:				; XREF: Obj41_LR
0000E470 5428 0024                  		addq.b	#2,$24(a0)
0000E474 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000E47A 5069 0008                  		addq.w	#8,8(a1)
0000E47E 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000E484 6600                       		bne.s	loc_DC36	; if yes, branch
0000E486 0469 0010 0008             		subi.w	#$10,8(a1)
0000E48C 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000E490                            
0000E490                            loc_DC36:
0000E490 337C 000F 003E             		move.w	#$F,$3E(a1)
0000E496 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E49C 0869 0000 0022             		bchg	#0,$22(a1)
0000E4A2 0829 0002 0022             		btst	#2,$22(a1)
0000E4A8 6600                       		bne.s	loc_DC56
0000E4AA 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000E4B0                            
0000E4B0                            loc_DC56:
0000E4B0 08A8 0005 0022             		bclr	#5,$22(a0)
0000E4B6 08A9 0005 0022             		bclr	#5,$22(a1)
0000E4BC 303C 00CC                  		move.w	#$CC,d0
0000E4C0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E4C6                            
0000E4C6                            Obj41_AniLR:				; XREF: Obj41_Index
0000E4C6 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E4CC 6000 CA0C                  		bra.w	AnimateSprite
0000E4D0                            ; ===========================================================================
0000E4D0                            
0000E4D0                            Obj41_ResetLR:				; XREF: Obj41_Index
0000E4D0 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000E4D6 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000E4DA 4E75                       		rts	
0000E4DC                            ; ===========================================================================
0000E4DC                            
0000E4DC                            Obj41_Dwn:				; XREF: Obj41_Index
0000E4DC 323C 001B                  		move.w	#$1B,d1
0000E4E0 343C 0008                  		move.w	#8,d2
0000E4E4 363C 0010                  		move.w	#$10,d3
0000E4E8 3828 0008                  		move.w	8(a0),d4
0000E4EC 6100 0000                  		bsr.w	SolidObject
0000E4F0 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000E4F6 6600                       		bne.s	loc_DCA4
0000E4F8 117C 000E 0024             		move.b	#$E,$24(a0)
0000E4FE                            
0000E4FE                            loc_DCA4:
0000E4FE 4A28 0025                  		tst.b	$25(a0)
0000E502 6600                       		bne.s	locret_DCAE
0000E504 4A44                       		tst.w	d4
0000E506 6B00                       		bmi.s	Obj41_BounceDwn
0000E508                            
0000E508                            locret_DCAE:
0000E508 4E75                       		rts	
0000E50A                            ; ===========================================================================
0000E50A                            
0000E50A                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000E50A 5428 0024                  		addq.b	#2,$24(a0)
0000E50E 5169 000C                  		subq.w	#8,$C(a1)
0000E512 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000E518 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000E51C 08E9 0001 0022             		bset	#1,$22(a1)
0000E522 08A9 0003 0022             		bclr	#3,$22(a1)
0000E528 137C 0002 0024             		move.b	#2,$24(a1)
0000E52E 08A8 0003 0022             		bclr	#3,$22(a0)
0000E534 4228 0025                  		clr.b	$25(a0)
0000E538 303C 00CC                  		move.w	#$CC,d0
0000E53C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0000E542                            
0000E542                            Obj41_AniDwn:				; XREF: Obj41_Index
0000E542 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000E548 6000 C990                  		bra.w	AnimateSprite
0000E54C                            ; ===========================================================================
0000E54C                            
0000E54C                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000E54C 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000E552 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000E556 4E75                       		rts	
0000E558                            ; ===========================================================================
0000E558                            Ani_obj41:
0000E558                            	include "_anim\obj41.asm"
0000E558                            ; ---------------------------------------------------------------------------
0000E558                            ; Animation script - springs
0000E558                            ; ---------------------------------------------------------------------------
0000E558 0000                       		dc.w byte_DD02-Ani_obj41
0000E55A 0000                       		dc.w byte_DD0E-Ani_obj41
0000E55C 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000E568 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000E574                            		even
0000E574                            		even
0000E574                            
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            ; Sprite mappings - springs
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            Map_obj41:
0000E574                            	include "_maps\obj41.asm"
0000E574                            ; ---------------------------------------------------------------------------
0000E574                            ; Sprite mappings - springs
0000E574                            ; ---------------------------------------------------------------------------
0000E574 0000                       		dc.w byte_DD26-Map_obj41
0000E576 0000                       		dc.w byte_DD31-Map_obj41
0000E578 0000                       		dc.w byte_DD37-Map_obj41
0000E57A 0000                       		dc.w byte_DD47-Map_obj41
0000E57C 0000                       		dc.w byte_DD4D-Map_obj41
0000E57E 0000                       		dc.w byte_DD53-Map_obj41
0000E580 02                         byte_DD26:	dc.b 2
0000E581 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000E586 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000E58B 01                         byte_DD31:	dc.b 1
0000E58C 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000E591 03                         byte_DD37:	dc.b 3
0000E592 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000E597 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E59C 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000E5A1 01                         byte_DD47:	dc.b 1
0000E5A2 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000E5A7 01                         byte_DD4D:	dc.b 1
0000E5A8 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000E5AD 04                         byte_DD53:	dc.b 4
0000E5AE F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000E5B3 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000E5B8 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000E5BD 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000E5C2                            		even
0000E5C2                            		even
0000E5C2                            
0000E5C2                            ; ===========================================================================
0000E5C2                            ; ---------------------------------------------------------------------------
0000E5C2                            ; Object 42 - Newtron enemy (GHZ)
0000E5C2                            ; ---------------------------------------------------------------------------
0000E5C2                            
0000E5C2                            Obj42:					; XREF: Obj_Index
0000E5C2 7000                       		moveq	#0,d0
0000E5C4 1028 0024                  		move.b	$24(a0),d0
0000E5C8 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000E5CC 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000E5D0                            ; ===========================================================================
0000E5D0 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000E5D2 0000                       		dc.w Obj42_Action-Obj42_Index
0000E5D4 0000                       		dc.w Obj42_Delete-Obj42_Index
0000E5D6                            ; ===========================================================================
0000E5D6                            
0000E5D6                            Obj42_Main:				; XREF: Obj42_Index
0000E5D6 5428 0024                  		addq.b	#2,$24(a0)
0000E5DA 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000E5E2 317C 049B 0002             		move.w	#$49B,2(a0)
0000E5E8 117C 0004 0001             		move.b	#4,1(a0)
0000E5EE 117C 0004 0018             		move.b	#4,$18(a0)
0000E5F4 117C 0014 0019             		move.b	#$14,$19(a0)
0000E5FA 117C 0010 0016             		move.b	#$10,$16(a0)
0000E600 117C 0008 0017             		move.b	#8,$17(a0)
0000E606                            
0000E606                            Obj42_Action:				; XREF: Obj42_Index
0000E606 7000                       		moveq	#0,d0
0000E608 1028 0025                  		move.b	$25(a0),d0
0000E60C 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000E610 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000E614 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000E61A 6100 C8BE                  		bsr.w	AnimateSprite
0000E61E 6000 0000                  		bra.w	MarkObjGone
0000E622                            ; ===========================================================================
0000E622 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000E624 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000E626 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000E628 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000E62A 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000E62C                            ; ===========================================================================
0000E62C                            
0000E62C                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000E62C 08E8 0000 0022             		bset	#0,$22(a0)
0000E632 3038 D008                  		move.w	($FFFFD008).w,d0
0000E636 9068 0008                  		sub.w	8(a0),d0
0000E63A 6400                       		bcc.s	loc_DDEA
0000E63C 4440                       		neg.w	d0
0000E63E 08A8 0000 0022             		bclr	#0,$22(a0)
0000E644                            
0000E644                            loc_DDEA:
0000E644 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000E648 6400                       		bcc.s	locret_DE12	; if not, branch
0000E64A 5428 0025                  		addq.b	#2,$25(a0)
0000E64E 117C 0001 001C             		move.b	#1,$1C(a0)
0000E654 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000E658 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000E65A 317C 249B 0002             		move.w	#$249B,2(a0)
0000E660 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000E666 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000E66C                            
0000E66C                            locret_DE12:
0000E66C 4E75                       		rts	
0000E66E                            ; ===========================================================================
0000E66E                            
0000E66E                            Obj42_Type00:				; XREF: Obj42_Index2
0000E66E 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000E674 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000E676 08E8 0000 0022             		bset	#0,$22(a0)
0000E67C 3038 D008                  		move.w	($FFFFD008).w,d0
0000E680 9068 0008                  		sub.w	8(a0),d0
0000E684 6400                       		bcc.s	locret_DE32
0000E686 08A8 0000 0022             		bclr	#0,$22(a0)
0000E68C                            
0000E68C                            locret_DE32:
0000E68C 4E75                       		rts	
0000E68E                            ; ===========================================================================
0000E68E                            
0000E68E                            Obj42_Fall:				; XREF: Obj42_Type00
0000E68E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E694 6600                       		bne.s	loc_DE42
0000E696 117C 000C 0020             		move.b	#$C,$20(a0)
0000E69C                            
0000E69C                            loc_DE42:
0000E69C 6100 F72A                  		bsr.w	ObjectFall
0000E6A0 6100 0000                  		bsr.w	ObjHitFloor
0000E6A4 4A41                       		tst.w	d1		; has newtron hit the floor?
0000E6A6 6A00                       		bpl.s	locret_DE86	; if not, branch
0000E6A8 D368 000C                  		add.w	d1,$C(a0)
0000E6AC 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000E6B2 5428 0025                  		addq.b	#2,$25(a0)
0000E6B6 117C 0002 001C             		move.b	#2,$1C(a0)
0000E6BC 0828 0005 0002             		btst	#5,2(a0)
0000E6C2 6700                       		beq.s	Obj42_Move
0000E6C4 5228 001C                  		addq.b	#1,$1C(a0)
0000E6C8                            
0000E6C8                            Obj42_Move:
0000E6C8 117C 000D 0020             		move.b	#$D,$20(a0)
0000E6CE 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000E6D4 0828 0000 0022             		btst	#0,$22(a0)
0000E6DA 6600                       		bne.s	locret_DE86
0000E6DC 4468 0010                  		neg.w	$10(a0)
0000E6E0                            
0000E6E0                            locret_DE86:
0000E6E0 4E75                       		rts	
0000E6E2                            ; ===========================================================================
0000E6E2                            
0000E6E2                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000E6E2 6100 F756                  		bsr.w	SpeedToPos
0000E6E6 6100 0000                  		bsr.w	ObjHitFloor
0000E6EA 0C41 FFF8                  		cmpi.w	#-8,d1
0000E6EE 6D00                       		blt.s	loc_DEA2
0000E6F0 0C41 000C                  		cmpi.w	#$C,d1
0000E6F4 6C00                       		bge.s	loc_DEA2
0000E6F6 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E6FA 4E75                       		rts	
0000E6FC                            ; ===========================================================================
0000E6FC                            
0000E6FC                            loc_DEA2:
0000E6FC 5428 0025                  		addq.b	#2,$25(a0)
0000E700 4E75                       		rts	
0000E702                            ; ===========================================================================
0000E702                            
0000E702                            Obj42_Speed:				; XREF: Obj42_Index2
0000E702 6100 F736                  		bsr.w	SpeedToPos
0000E706 4E75                       		rts	
0000E708                            ; ===========================================================================
0000E708                            
0000E708                            Obj42_Type01:				; XREF: Obj42_Index2
0000E708 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E70E 6600                       		bne.s	Obj42_FireMissile
0000E710 117C 000C 0020             		move.b	#$C,$20(a0)
0000E716                            
0000E716                            Obj42_FireMissile:
0000E716 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E71C 6600                       		bne.s	locret_DF14
0000E71E 4A28 0032                  		tst.b	$32(a0)
0000E722 6600                       		bne.s	locret_DF14
0000E724 117C 0001 0032             		move.b	#1,$32(a0)
0000E72A 6100 FBBA                  		bsr.w	SingleObjLoad
0000E72E 6600                       		bne.s	locret_DF14
0000E730 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E734 3368 0008 0008             		move.w	8(a0),8(a1)
0000E73A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E740 5169 000C                  		subq.w	#8,$C(a1)
0000E744 337C 0200 0010             		move.w	#$200,$10(a1)
0000E74A 303C 0014                  		move.w	#$14,d0
0000E74E 0828 0000 0022             		btst	#0,$22(a0)
0000E754 6600                       		bne.s	loc_DF04
0000E756 4440                       		neg.w	d0
0000E758 4469 0010                  		neg.w	$10(a1)
0000E75C                            
0000E75C                            loc_DF04:
0000E75C D169 0008                  		add.w	d0,8(a1)
0000E760 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E766 137C 0001 0028             		move.b	#1,$28(a1)
0000E76C                            
0000E76C                            locret_DF14:
0000E76C 4E75                       		rts	
0000E76E                            ; ===========================================================================
0000E76E                            
0000E76E                            Obj42_Delete:				; XREF: Obj42_Index
0000E76E 6000 F72C                  		bra.w	DeleteObject
0000E772                            ; ===========================================================================
0000E772                            Ani_obj42:
0000E772                            	include "_anim\obj42.asm"
0000E772                            ; ---------------------------------------------------------------------------
0000E772                            ; Animation script - Newtron enemy
0000E772                            ; ---------------------------------------------------------------------------
0000E772 0000                       		dc.w byte_DF24-Ani_obj42
0000E774 0000                       		dc.w byte_DF28-Ani_obj42
0000E776 0000                       		dc.w byte_DF30-Ani_obj42
0000E778 0000                       		dc.w byte_DF34-Ani_obj42
0000E77A 0000                       		dc.w byte_DF38-Ani_obj42
0000E77C 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E780 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E788 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E78C 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E790 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E79A                            		even
0000E79A                            		even
0000E79A                            
0000E79A                            ; ---------------------------------------------------------------------------
0000E79A                            ; Sprite mappings - Newtron enemy (GHZ)
0000E79A                            ; ---------------------------------------------------------------------------
0000E79A                            Map_obj42:
0000E79A                            	include "_maps\obj42.asm"
0000E79A                            ; ---------------------------------------------------------------------------
0000E79A                            ; Sprite mappings - Newtron enemy (GHZ)
0000E79A                            ; ---------------------------------------------------------------------------
0000E79A 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E79E 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E7A2 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E7A6 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E7AA 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E7AE 0000                       		dc.w byte_DFF8-Map_obj42
0000E7B0 03                         byte_DF58:	dc.b 3
0000E7B1 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E7B6 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E7BB FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E7C0 03                         byte_DF68:	dc.b 3
0000E7C1 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E7C6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E7CB FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E7D0 03                         byte_DF78:	dc.b 3
0000E7D1 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E7D6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E7DB FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E7E0 04                         byte_DF88:	dc.b 4
0000E7E1 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E7E6 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E7EB FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E7F0 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E7F5 03                         byte_DF9D:	dc.b 3
0000E7F6 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E7FB FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E800 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E805 02                         byte_DFAD:	dc.b 2
0000E806 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E80B F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E810 03                         byte_DFB8:	dc.b 3
0000E811 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E816 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E81B FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E820 03                         byte_DFC8:	dc.b 3
0000E821 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E826 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E82B FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E830 03                         byte_DFD8:	dc.b 3
0000E831 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E836 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E83B FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E840 03                         byte_DFE8:	dc.b 3
0000E841 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E846 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E84B FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E850 00                         byte_DFF8:	dc.b 0
0000E852 00                         		even
0000E852 00                         		even
0000E852                            
0000E852                            ; ===========================================================================
0000E852                            ; ---------------------------------------------------------------------------
0000E852                            ; Object 43 - Roller enemy (SYZ)
0000E852                            ; ---------------------------------------------------------------------------
0000E852                            
0000E852                            Obj43:					; XREF: Obj_Index
0000E852 7000                       		moveq	#0,d0
0000E854 1028 0024                  		move.b	$24(a0),d0
0000E858 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E85C 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E860                            ; ===========================================================================
0000E860 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E862 0000                       		dc.w Obj43_Action-Obj43_Index
0000E864                            ; ===========================================================================
0000E864                            
0000E864                            Obj43_Main:				; XREF: Obj43_Index
0000E864 117C 000E 0016             		move.b	#$E,$16(a0)
0000E86A 117C 0008 0017             		move.b	#8,$17(a0)
0000E870 6100 F556                  		bsr.w	ObjectFall
0000E874 6100 0000                  		bsr.w	ObjHitFloor
0000E878 4A41                       		tst.w	d1
0000E87A 6A00                       		bpl.s	locret_E052
0000E87C D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E880 317C 0000 0012             		move.w	#0,$12(a0)
0000E886 5428 0024                  		addq.b	#2,$24(a0)
0000E88A 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E892 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E898 117C 0004 0001             		move.b	#4,1(a0)
0000E89E 117C 0004 0018             		move.b	#4,$18(a0)
0000E8A4 117C 0010 0019             		move.b	#$10,$19(a0)
0000E8AA                            
0000E8AA                            locret_E052:
0000E8AA 4E75                       		rts	
0000E8AC                            ; ===========================================================================
0000E8AC                            
0000E8AC                            Obj43_Action:				; XREF: Obj43_Index
0000E8AC 7000                       		moveq	#0,d0
0000E8AE 1028 0025                  		move.b	$25(a0),d0
0000E8B2 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E8B6 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E8BA 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E8C0 6100 C618                  		bsr.w	AnimateSprite
0000E8C4 3028 0008                  		move.w	8(a0),d0
0000E8C8 0240 FF80                  		andi.w	#$FF80,d0
0000E8CC 3238 F700                  		move.w	($FFFFF700).w,d1
0000E8D0 0441 0080                  		subi.w	#$80,d1
0000E8D4 0241 FF80                  		andi.w	#$FF80,d1
0000E8D8 9041                       		sub.w	d1,d0
0000E8DA 0C40 0280                  		cmpi.w	#$280,d0
0000E8DE 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E8E2 6000 F57C                  		bra.w	DisplaySprite
0000E8E6                            ; ===========================================================================
0000E8E6                            
0000E8E6                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E8E6 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E8EA 7000                       		moveq	#0,d0
0000E8EC 1028 0023                  		move.b	$23(a0),d0
0000E8F0 6700                       		beq.s	Obj43_Delete
0000E8F2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E8F8                            
0000E8F8                            Obj43_Delete:
0000E8F8 6000 F5A2                  		bra.w	DeleteObject
0000E8FC                            ; ===========================================================================
0000E8FC 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E8FE 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E900 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E902 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E904                            ; ===========================================================================
0000E904                            
0000E904                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E904 3038 D008                  		move.w	($FFFFD008).w,d0
0000E908 0440 0100                  		subi.w	#$100,d0
0000E90C 6500                       		bcs.s	loc_E0D2
0000E90E 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E912 6500                       		bcs.s	loc_E0D2
0000E914 5828 0025                  		addq.b	#4,$25(a0)
0000E918 117C 0002 001C             		move.b	#2,$1C(a0)
0000E91E 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E924 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E92A                            
0000E92A                            loc_E0D2:
0000E92A 588F                       		addq.l	#4,sp
0000E92C 4E75                       		rts	
0000E92E                            ; ===========================================================================
0000E92E                            
0000E92E                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E92E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E934 6700                       		beq.s	loc_E0F8
0000E936 5368 0030                  		subq.w	#1,$30(a0)
0000E93A 6A00                       		bpl.s	locret_E0F6
0000E93C 117C 0001 001C             		move.b	#1,$1C(a0)
0000E942 317C 0700 0010             		move.w	#$700,$10(a0)
0000E948 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E94E                            
0000E94E                            locret_E0F6:
0000E94E 4E75                       		rts	
0000E950                            ; ===========================================================================
0000E950                            
0000E950                            loc_E0F8:
0000E950 5428 0025                  		addq.b	#2,$25(a0)
0000E954 4E75                       		rts	
0000E956                            ; ===========================================================================
0000E956                            
0000E956                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E956 6100 0000                  		bsr.w	Obj43_Stop
0000E95A 6100 F4DE                  		bsr.w	SpeedToPos
0000E95E 6100 0000                  		bsr.w	ObjHitFloor
0000E962 0C41 FFF8                  		cmpi.w	#-8,d1
0000E966 6D00                       		blt.s	Obj43_Jump
0000E968 0C41 000C                  		cmpi.w	#$C,d1
0000E96C 6C00                       		bge.s	Obj43_Jump
0000E96E D368 000C                  		add.w	d1,$C(a0)
0000E972 4E75                       		rts	
0000E974                            ; ===========================================================================
0000E974                            
0000E974                            Obj43_Jump:
0000E974 5428 0025                  		addq.b	#2,$25(a0)
0000E978 08E8 0000 0032             		bset	#0,$32(a0)
0000E97E 6700                       		beq.s	locret_E12E
0000E980 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E986                            
0000E986                            locret_E12E:
0000E986 4E75                       		rts	
0000E988                            ; ===========================================================================
0000E988                            
0000E988                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E988 6100 F43E                  		bsr.w	ObjectFall
0000E98C 4A68 0012                  		tst.w	$12(a0)
0000E990 6B00                       		bmi.s	locret_E150
0000E992 6100 0000                  		bsr.w	ObjHitFloor
0000E996 4A41                       		tst.w	d1
0000E998 6A00                       		bpl.s	locret_E150
0000E99A D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E99E 5528 0025                  		subq.b	#2,$25(a0)
0000E9A2 317C 0000 0012             		move.w	#0,$12(a0)
0000E9A8                            
0000E9A8                            locret_E150:
0000E9A8 4E75                       		rts	
0000E9AA                            
0000E9AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9AA                            
0000E9AA                            
0000E9AA                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E9AA 4A28 0032                  		tst.b	$32(a0)
0000E9AE 6B00                       		bmi.s	locret_E188
0000E9B0 3038 D008                  		move.w	($FFFFD008).w,d0
0000E9B4 0440 0030                  		subi.w	#$30,d0
0000E9B8 9068 0008                  		sub.w	8(a0),d0
0000E9BC 6400                       		bcc.s	locret_E188
0000E9BE 117C 0000 001C             		move.b	#0,$1C(a0)
0000E9C4 117C 000E 0020             		move.b	#$E,$20(a0)
0000E9CA 4268 0010                  		clr.w	$10(a0)
0000E9CE 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E9D4 117C 0002 0025             		move.b	#2,$25(a0)
0000E9DA 08E8 0007 0032             		bset	#7,$32(a0)
0000E9E0                            
0000E9E0                            locret_E188:
0000E9E0 4E75                       		rts	
0000E9E2                            ; End of function Obj43_Stop
0000E9E2                            
0000E9E2                            ; ===========================================================================
0000E9E2                            Ani_obj43:
0000E9E2                            	include "_anim\obj43.asm"
0000E9E2                            ; ---------------------------------------------------------------------------
0000E9E2                            ; Animation script - Roller enemy
0000E9E2                            ; ---------------------------------------------------------------------------
0000E9E2 0000                       		dc.w byte_E190-Ani_obj43
0000E9E4 0000                       		dc.w byte_E196-Ani_obj43
0000E9E6 0000                       		dc.w byte_E19C-Ani_obj43
0000E9E8 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E9EE 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E9F4 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E9FA 00                         		even
0000E9FA 00                         		even
0000E9FA                            
0000E9FA                            ; ---------------------------------------------------------------------------
0000E9FA                            ; Sprite mappings - Roller enemy (SYZ)
0000E9FA                            ; ---------------------------------------------------------------------------
0000E9FA                            Map_obj43:
0000E9FA                            	include "_maps\obj43.asm"
0000E9FA                            Map_61da:
0000E9FA 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000E9FC 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000E9FE 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000EA00 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000EA02 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000EA04 02                         Map_61da_A: 	dc.b $2
0000EA05 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000EA0A F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000EA0F 02                         Map_61da_15: 	dc.b $2
0000EA10 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000EA15 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000EA1A 01                         Map_61da_20: 	dc.b $1
0000EA1B F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000EA20 01                         Map_61da_26: 	dc.b $1
0000EA21 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000EA26 01                         Map_61da_2C: 	dc.b $1
0000EA27 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000EA2C                            	even
0000EA2C                            	even
0000EA2C                            
0000EA2C                            ; ===========================================================================
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            ; Object 44 - walls (GHZ)
0000EA2C                            ; ---------------------------------------------------------------------------
0000EA2C                            
0000EA2C                            Obj44:					; XREF: Obj_Index
0000EA2C 7000                       		moveq	#0,d0
0000EA2E 1028 0024                  		move.b	$24(a0),d0
0000EA32 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000EA36 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000EA3A                            ; ===========================================================================
0000EA3A 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000EA3C 0000                       		dc.w Obj44_Solid-Obj44_Index
0000EA3E 0000                       		dc.w Obj44_Display-Obj44_Index
0000EA40                            ; ===========================================================================
0000EA40                            
0000EA40                            Obj44_Main:				; XREF: Obj44_Index
0000EA40 5428 0024                  		addq.b	#2,$24(a0)
0000EA44 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000EA4C 317C 434C 0002             		move.w	#$434C,2(a0)
0000EA52 0028 0004 0001             		ori.b	#4,1(a0)
0000EA58 117C 0008 0019             		move.b	#8,$19(a0)
0000EA5E 117C 0006 0018             		move.b	#6,$18(a0)
0000EA64 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000EA6A 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000EA70 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000EA72 5428 0024                  		addq.b	#2,$24(a0)
0000EA76 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000EA78                            ; ===========================================================================
0000EA78                            
0000EA78                            Obj44_Solid:				; XREF: Obj44_Index
0000EA78 323C 0013                  		move.w	#$13,d1
0000EA7C 343C 0028                  		move.w	#$28,d2
0000EA80 6100 A6B4                  		bsr.w	Obj44_SolidWall
0000EA84                            
0000EA84                            Obj44_Display:				; XREF: Obj44_Index
0000EA84 6100 F3DA                  		bsr.w	DisplaySprite
0000EA88 3028 0008                  		move.w	8(a0),d0
0000EA8C 0240 FF80                  		andi.w	#$FF80,d0
0000EA90 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA94 0441 0080                  		subi.w	#$80,d1
0000EA98 0241 FF80                  		andi.w	#$FF80,d1
0000EA9C 9041                       		sub.w	d1,d0
0000EA9E 0C40 0280                  		cmpi.w	#$280,d0
0000EAA2 6200 F3F8                  		bhi.w	DeleteObject
0000EAA6 4E75                       		rts	
0000EAA8                            ; ===========================================================================
0000EAA8                            ; ---------------------------------------------------------------------------
0000EAA8                            ; Sprite mappings - walls (GHZ)
0000EAA8                            ; ---------------------------------------------------------------------------
0000EAA8                            Map_obj44:
0000EAA8                            	include "_maps\obj44.asm"
0000EAA8                            ; ---------------------------------------------------------------------------
0000EAA8                            ; Sprite mappings - walls (GHZ)
0000EAA8                            ; ---------------------------------------------------------------------------
0000EAA8 0000                       		dc.w byte_E256-Map_obj44
0000EAAA 0000                       		dc.w byte_E26B-Map_obj44
0000EAAC 0000                       		dc.w byte_E280-Map_obj44
0000EAAE 04                         byte_E256:	dc.b 4
0000EAAF E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000EAB4 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EAB9 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EABE 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EAC3 04                         byte_E26B:	dc.b 4
0000EAC4 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000EAC9 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EACE 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000EAD3 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000EAD8 04                         byte_E280:	dc.b 4
0000EAD9 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000EADE F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000EAE3 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000EAE8 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000EAEE 00                         		even
0000EAEE 00                         		even
0000EAEE                            
0000EAEE                            ; ===========================================================================
0000EAEE                            ; ---------------------------------------------------------------------------
0000EAEE                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000EAEE                            ; ---------------------------------------------------------------------------
0000EAEE                            
0000EAEE                            Obj13:					; XREF: Obj_Index
0000EAEE 7000                       		moveq	#0,d0
0000EAF0 1028 0024                  		move.b	$24(a0),d0
0000EAF4 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000EAF8 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000EAFC 6000 0000                  		bra.w	Obj14_ChkDel
0000EB00                            ; ===========================================================================
0000EB00 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000EB02 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000EB04                            ; ---------------------------------------------------------------------------
0000EB04                            ;
0000EB04                            ; Lava ball production rates
0000EB04                            ;
0000EB04 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000EB0A                            ; ===========================================================================
0000EB0A                            
0000EB0A                            Obj13_Main:				; XREF: Obj13_Index
0000EB0A 5428 0024                  		addq.b	#2,$24(a0)
0000EB0E 1028 0028                  		move.b	$28(a0),d0
0000EB12 E848                       		lsr.w	#4,d0
0000EB14 0240 000F                  		andi.w	#$F,d0
0000EB18 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000EB1E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000EB24 0228 000F 0028             		andi.b	#$F,$28(a0)
0000EB2A                            
0000EB2A                            Obj13_MakeLava:				; XREF: Obj13_Index
0000EB2A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000EB2E 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000EB30 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000EB36 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000EB3A 6600                       		bne.s	locret_E302
0000EB3C 6100 F7A8                  		bsr.w	SingleObjLoad
0000EB40 6600                       		bne.s	locret_E302
0000EB42 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000EB46 3368 0008 0008             		move.w	8(a0),8(a1)
0000EB4C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EB52 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EB58                            
0000EB58                            locret_E302:
0000EB58 4E75                       		rts	
0000EB5A                            ; ===========================================================================
0000EB5A                            ; ---------------------------------------------------------------------------
0000EB5A                            ; Object 14 - lava balls (MZ, SLZ)
0000EB5A                            ; ---------------------------------------------------------------------------
0000EB5A                            
0000EB5A                            Obj14:					; XREF: Obj_Index
0000EB5A 7000                       		moveq	#0,d0
0000EB5C 1028 0024                  		move.b	$24(a0),d0
0000EB60 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000EB64 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000EB68 6000 F2F6                  		bra.w	DisplaySprite
0000EB6C                            ; ===========================================================================
0000EB6C 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000EB6E 0000                       		dc.w Obj14_Action-Obj14_Index
0000EB70 0000                       		dc.w Obj14_Delete-Obj14_Index
0000EB72                            
0000EB72 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000EB7C 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000EB84                            ; ===========================================================================
0000EB84                            
0000EB84                            Obj14_Main:				; XREF: Obj14_Index
0000EB84 5428 0024                  		addq.b	#2,$24(a0)
0000EB88 117C 0008 0016             		move.b	#8,$16(a0)
0000EB8E 117C 0008 0017             		move.b	#8,$17(a0)
0000EB94 217C 0000 BAD8 0004        		move.l	#Map_obj14,4(a0)
0000EB9C 317C 0345 0002             		move.w	#$345,2(a0)
0000EBA2 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000EBA8 6600                       		bne.s	loc_E35A
0000EBAA 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000EBB0                            
0000EBB0                            loc_E35A:
0000EBB0 117C 0004 0001             		move.b	#4,1(a0)
0000EBB6 117C 0003 0018             		move.b	#3,$18(a0)
0000EBBC 117C 008B 0020             		move.b	#$8B,$20(a0)
0000EBC2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EBC8 4A28 0029                  		tst.b	$29(a0)
0000EBCC 6700                       		beq.s	Obj14_SetSpeed
0000EBCE 5428 0018                  		addq.b	#2,$18(a0)
0000EBD2                            
0000EBD2                            Obj14_SetSpeed:
0000EBD2 7000                       		moveq	#0,d0
0000EBD4 1028 0028                  		move.b	$28(a0),d0
0000EBD8 D040                       		add.w	d0,d0
0000EBDA 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000EBE0 117C 0008 0019             		move.b	#8,$19(a0)
0000EBE6 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000EBEC 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000EBEE 117C 0010 0019             		move.b	#$10,$19(a0)
0000EBF4 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000EBFA 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000EC00 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000EC06                            
0000EC06                            Obj14_PlaySnd:
0000EC06 303C 00AE                  		move.w	#$AE,d0
0000EC0A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000EC10                            
0000EC10                            Obj14_Action:				; XREF: Obj14_Index
0000EC10 7000                       		moveq	#0,d0
0000EC12 1028 0028                  		move.b	$28(a0),d0
0000EC16 D040                       		add.w	d0,d0
0000EC18 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000EC1C 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000EC20 6100 F218                  		bsr.w	SpeedToPos
0000EC24 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000EC2A 6100 C2AE                  		bsr.w	AnimateSprite
0000EC2E                            
0000EC2E                            Obj14_ChkDel:				; XREF: Obj13
0000EC2E 3028 0008                  		move.w	8(a0),d0
0000EC32 0240 FF80                  		andi.w	#$FF80,d0
0000EC36 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC3A 0441 0080                  		subi.w	#$80,d1
0000EC3E 0241 FF80                  		andi.w	#$FF80,d1
0000EC42 9041                       		sub.w	d1,d0
0000EC44 0C40 0280                  		cmpi.w	#$280,d0
0000EC48 6200 F252                  		bhi.w	DeleteObject
0000EC4C 4E75                       		rts	
0000EC4E                            ; ===========================================================================
0000EC4E 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EC52 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000EC56 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000EC5A 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000EC5E 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000EC60                            ; ===========================================================================
0000EC60                            ; lavaball types 00-03 fly up and fall back down
0000EC60                            
0000EC60                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000EC60 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000EC66 3028 0030                  		move.w	$30(a0),d0
0000EC6A B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000EC6E 6400                       		bcc.s	loc_E41E	; if not, branch
0000EC70 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000EC74                            
0000EC74                            loc_E41E:
0000EC74 08A8 0001 0022             		bclr	#1,$22(a0)
0000EC7A 4A68 0012                  		tst.w	$12(a0)
0000EC7E 6A00                       		bpl.s	locret_E430
0000EC80 08E8 0001 0022             		bset	#1,$22(a0)
0000EC86                            
0000EC86                            locret_E430:
0000EC86 4E75                       		rts	
0000EC88                            ; ===========================================================================
0000EC88                            ; lavaball type	04 flies up until it hits the ceiling
0000EC88                            
0000EC88                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000EC88 08E8 0001 0022             		bset	#1,$22(a0)
0000EC8E 6100 0000                  		bsr.w	ObjHitCeiling
0000EC92 4A41                       		tst.w	d1
0000EC94 6A00                       		bpl.s	locret_E452
0000EC96 117C 0008 0028             		move.b	#8,$28(a0)
0000EC9C 117C 0001 001C             		move.b	#1,$1C(a0)
0000ECA2 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000ECA8                            
0000ECA8                            locret_E452:
0000ECA8 4E75                       		rts	
0000ECAA                            ; ===========================================================================
0000ECAA                            ; lavaball type	05 falls down until it hits the	floor
0000ECAA                            
0000ECAA                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000ECAA 08A8 0001 0022             		bclr	#1,$22(a0)
0000ECB0 6100 0000                  		bsr.w	ObjHitFloor
0000ECB4 4A41                       		tst.w	d1
0000ECB6 6A00                       		bpl.s	locret_E474
0000ECB8 117C 0008 0028             		move.b	#8,$28(a0)
0000ECBE 117C 0001 001C             		move.b	#1,$1C(a0)
0000ECC4 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000ECCA                            
0000ECCA                            locret_E474:
0000ECCA 4E75                       		rts	
0000ECCC                            ; ===========================================================================
0000ECCC                            ; lavaball types 06-07 move sideways
0000ECCC                            
0000ECCC                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000ECCC 08E8 0000 0022             		bset	#0,$22(a0)
0000ECD2 76F8                       		moveq	#-8,d3
0000ECD4 6100 0000                  		bsr.w	ObjHitWallLeft
0000ECD8 4A41                       		tst.w	d1
0000ECDA 6A00                       		bpl.s	locret_E498
0000ECDC 117C 0008 0028             		move.b	#8,$28(a0)
0000ECE2 117C 0003 001C             		move.b	#3,$1C(a0)
0000ECE8 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ECEE                            
0000ECEE                            locret_E498:
0000ECEE 4E75                       		rts	
0000ECF0                            ; ===========================================================================
0000ECF0                            
0000ECF0                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000ECF0 08A8 0000 0022             		bclr	#0,$22(a0)
0000ECF6 7608                       		moveq	#8,d3
0000ECF8 6100 0000                  		bsr.w	ObjHitWallRight
0000ECFC 4A41                       		tst.w	d1
0000ECFE 6A00                       		bpl.s	locret_E4BC
0000ED00 117C 0008 0028             		move.b	#8,$28(a0)
0000ED06 117C 0003 001C             		move.b	#3,$1C(a0)
0000ED0C 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000ED12                            
0000ED12                            locret_E4BC:
0000ED12 4E75                       		rts	
0000ED14                            ; ===========================================================================
0000ED14                            
0000ED14                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000ED14 4E75                       		rts	
0000ED16                            ; ===========================================================================
0000ED16                            
0000ED16                            Obj14_Delete:				; XREF: Obj14_Index
0000ED16 6000 F184                  		bra.w	DeleteObject
0000ED1A                            ; ===========================================================================
0000ED1A                            Ani_obj14:
0000ED1A                            	include "_anim\obj14.asm"
0000ED1A                            ; ---------------------------------------------------------------------------
0000ED1A                            ; Animation script - lava balls
0000ED1A                            ; ---------------------------------------------------------------------------
0000ED1A 0000                       		dc.w byte_E4CC-Ani_obj14
0000ED1C 0000                       		dc.w byte_E4D2-Ani_obj14
0000ED1E 0000                       		dc.w byte_E4D6-Ani_obj14
0000ED20 0000                       		dc.w byte_E4DC-Ani_obj14
0000ED22 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000ED28 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000ED2C 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000ED32 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000ED36                            		even
0000ED36                            		even
0000ED36                            
0000ED36                            ; ===========================================================================
0000ED36                            ; ---------------------------------------------------------------------------
0000ED36                            ; Object 6D - flame thrower (SBZ)
0000ED36                            ; ---------------------------------------------------------------------------
0000ED36                            
0000ED36                            Obj6D:					; XREF: Obj_Index
0000ED36 7000                       		moveq	#0,d0
0000ED38 1028 0024                  		move.b	$24(a0),d0
0000ED3C 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000ED40 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000ED44                            ; ===========================================================================
0000ED44 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000ED46 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000ED48                            ; ===========================================================================
0000ED48                            
0000ED48                            Obj6D_Main:				; XREF: Obj6D_Index
0000ED48 5428 0024                  		addq.b	#2,$24(a0)
0000ED4C 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000ED54 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000ED5A 0028 0004 0001             		ori.b	#4,1(a0)
0000ED60 117C 0001 0018             		move.b	#1,$18(a0)
0000ED66 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000ED6C 117C 000C 0019             		move.b	#$C,$19(a0)
0000ED72 1028 0028                  		move.b	$28(a0),d0
0000ED76 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000ED7A D040                       		add.w	d0,d0		; multiply by 2
0000ED7C 3140 0030                  		move.w	d0,$30(a0)
0000ED80 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000ED84 1028 0028                  		move.b	$28(a0),d0
0000ED88 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000ED8C EB48                       		lsl.w	#5,d0		; multiply by $20
0000ED8E 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000ED92 117C 000A 0036             		move.b	#$A,$36(a0)
0000ED98 0828 0001 0022             		btst	#1,$22(a0)
0000ED9E 6700                       		beq.s	Obj6D_Action
0000EDA0 117C 0002 001C             		move.b	#2,$1C(a0)
0000EDA6 117C 0015 0036             		move.b	#$15,$36(a0)
0000EDAC                            
0000EDAC                            Obj6D_Action:				; XREF: Obj6D_Index
0000EDAC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000EDB0 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000EDB2 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000EDB8 0868 0000 001C             		bchg	#0,$1C(a0)
0000EDBE 6700                       		beq.s	loc_E57A
0000EDC0 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000EDC6 303C 00B3                  		move.w	#$B3,d0
0000EDCA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000EDD0                            
0000EDD0                            loc_E57A:
0000EDD0 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000EDD6 6100 C102                  		bsr.w	AnimateSprite
0000EDDA 117C 0000 0020             		move.b	#0,$20(a0)
0000EDE0 1028 0036                  		move.b	$36(a0),d0
0000EDE4 B028 001A                  		cmp.b	$1A(a0),d0
0000EDE8 6600                       		bne.s	Obj6D_ChkDel
0000EDEA 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000EDF0                            
0000EDF0                            Obj6D_ChkDel:
0000EDF0 3028 0008                  		move.w	8(a0),d0
0000EDF4 0240 FF80                  		andi.w	#$FF80,d0
0000EDF8 3238 F700                  		move.w	($FFFFF700).w,d1
0000EDFC 0441 0080                  		subi.w	#$80,d1
0000EE00 0241 FF80                  		andi.w	#$FF80,d1
0000EE04 9041                       		sub.w	d1,d0
0000EE06 0C40 0280                  		cmpi.w	#$280,d0
0000EE0A 6200 F090                  		bhi.w	DeleteObject
0000EE0E 6000 F050                  		bra.w	DisplaySprite
0000EE12                            ; ===========================================================================
0000EE12                            Ani_obj6D:
0000EE12                            	include "_anim\obj6D.asm"
0000EE12                            ; ---------------------------------------------------------------------------
0000EE12                            ; Animation script - flamethrower (SBZ)
0000EE12                            ; ---------------------------------------------------------------------------
0000EE12 0000                       		dc.w byte_E5C4-Ani_obj6D
0000EE14 0000                       		dc.w byte_E5D2-Ani_obj6D
0000EE16 0000                       		dc.w byte_E5DC-Ani_obj6D
0000EE18 0000                       		dc.w byte_E5EA-Ani_obj6D
0000EE1A 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000EE28 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000EE32 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000EE40 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000EE4A                            		even
0000EE4A                            		even
0000EE4A                            
0000EE4A                            ; ---------------------------------------------------------------------------
0000EE4A                            ; Sprite mappings - flame thrower (SBZ)
0000EE4A                            ; ---------------------------------------------------------------------------
0000EE4A                            Map_obj6D:
0000EE4A                            	include "_maps\obj6D.asm"
0000EE4A                            ; ---------------------------------------------------------------------------
0000EE4A                            ; Sprite mappings - flame thrower (SBZ)
0000EE4A                            ; ---------------------------------------------------------------------------
0000EE4A 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000EE4E 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000EE52 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000EE56 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000EE5A 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000EE5E 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000EE62 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000EE66 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000EE6A 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000EE6E 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000EE72 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000EE76 01                         byte_E620:	dc.b 1
0000EE77 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE7C 02                         byte_E626:	dc.b 2
0000EE7D 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE82 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE87 02                         byte_E631:	dc.b 2
0000EE88 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EE8D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EE92 03                         byte_E63C:	dc.b 3
0000EE93 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EE98 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EE9D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEA2 03                         byte_E64C:	dc.b 3
0000EEA3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EEA8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EEAD 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEB2 04                         byte_E65C:	dc.b 4
0000EEB3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEB8 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEBD 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEC2 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEC7 04                         byte_E671:	dc.b 4
0000EEC8 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EECD 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EED2 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EED7 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEDC 05                         byte_E686:	dc.b 5
0000EEDD F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EEE2 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EEE7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EEEC 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EEF1 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EEF6 05                         byte_E6A0:	dc.b 5
0000EEF7 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EEFC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EF01 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF06 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF0B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF10 06                         byte_E6BA:	dc.b 6
0000EF11 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EF16 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EF1B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF20 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EF25 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF2A 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF2F 06                         byte_E6D9:	dc.b 6
0000EF30 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000EF35 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EF3A 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000EF3F 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF44 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF49 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000EF4E 01                         byte_E6F8:	dc.b 1
0000EF4F 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF54 02                         byte_E6FE:	dc.b 2
0000EF55 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF5A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF5F 02                         byte_E709:	dc.b 2
0000EF60 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF65 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF6A 03                         byte_E714:	dc.b 3
0000EF6B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF70 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF75 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF7A 03                         byte_E724:	dc.b 3
0000EF7B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EF80 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF85 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EF8A 04                         byte_E734:	dc.b 4
0000EF8B 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EF90 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EF95 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EF9A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EF9F 04                         byte_E749:	dc.b 4
0000EFA0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EFA5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFAA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFAF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFB4 05                         byte_E75E:	dc.b 5
0000EFB5 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000EFBA 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EFBF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000EFC4 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFC9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000EFCE 05                         byte_E778:	dc.b 5
0000EFCF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000EFD4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000EFD9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000EFDE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000EFE3 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000EFE8 06                         byte_E792:	dc.b 6
0000EFE9 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000EFEE F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000EFF3 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000EFF8 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000EFFD 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F002 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F007 06                         byte_E7B1:	dc.b 6
0000F008 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F00D F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F012 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F017 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F01C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F021 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F026                            		even
0000F026                            		even
0000F026                            
0000F026                            ; ===========================================================================
0000F026                            ; ---------------------------------------------------------------------------
0000F026                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F026                            ; ---------------------------------------------------------------------------
0000F026                            
0000F026                            Obj46:					; XREF: Obj_Index
0000F026 7000                       		moveq	#0,d0
0000F028 1028 0024                  		move.b	$24(a0),d0
0000F02C 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F030 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F034                            ; ===========================================================================
0000F034 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F036 0000                       		dc.w Obj46_Action-Obj46_Index
0000F038                            ; ===========================================================================
0000F038                            
0000F038                            Obj46_Main:				; XREF: Obj46_Index
0000F038 5428 0024                  		addq.b	#2,$24(a0)
0000F03C 117C 000F 0016             		move.b	#$F,$16(a0)
0000F042 117C 000F 0017             		move.b	#$F,$17(a0)
0000F048 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F050 317C 4000 0002             		move.w	#$4000,2(a0)
0000F056 117C 0004 0001             		move.b	#4,1(a0)
0000F05C 117C 0003 0018             		move.b	#3,$18(a0)
0000F062 117C 0010 0019             		move.b	#$10,$19(a0)
0000F068 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F06E 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F074                            
0000F074                            Obj46_Action:				; XREF: Obj46_Index
0000F074 4A28 0001                  		tst.b	1(a0)
0000F078 6A00                       		bpl.s	Obj46_ChkDel
0000F07A 7000                       		moveq	#0,d0
0000F07C 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F080 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F084 D040                       		add.w	d0,d0
0000F086 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F08A 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F08E 323C 001B                  		move.w	#$1B,d1
0000F092 343C 0010                  		move.w	#$10,d2
0000F096 363C 0011                  		move.w	#$11,d3
0000F09A 3828 0008                  		move.w	8(a0),d4
0000F09E 6100 0000                  		bsr.w	SolidObject
0000F0A2                            
0000F0A2                            Obj46_ChkDel:
0000F0A2 6100 EDBC                  		bsr.w	DisplaySprite
0000F0A6 3028 0008                  		move.w	8(a0),d0
0000F0AA 0240 FF80                  		andi.w	#$FF80,d0
0000F0AE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F0B2 0441 0080                  		subi.w	#$80,d1
0000F0B6 0241 FF80                  		andi.w	#$FF80,d1
0000F0BA 9041                       		sub.w	d1,d0
0000F0BC 0C40 0280                  		cmpi.w	#$280,d0
0000F0C0 6200 EDDA                  		bhi.w	DeleteObject
0000F0C4 4E75                       		rts	
0000F0C6                            ; ===========================================================================
0000F0C6 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F0C8 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F0CA 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F0CC 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F0CE 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F0D0                            ; ===========================================================================
0000F0D0                            
0000F0D0                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F0D0 4E75                       		rts	
0000F0D2                            ; ===========================================================================
0000F0D2                            
0000F0D2                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F0D2 3038 D008                  		move.w	($FFFFD008).w,d0
0000F0D6 9068 0008                  		sub.w	8(a0),d0
0000F0DA 6400                       		bcc.s	loc_E888
0000F0DC 4440                       		neg.w	d0
0000F0DE                            
0000F0DE                            loc_E888:
0000F0DE 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F0E2 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F0E4 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F0EA                            
0000F0EA                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F0EA 7000                       		moveq	#0,d0
0000F0EC 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F0F0 0828 0003 0028             		btst	#3,$28(a0)
0000F0F6 6700                       		beq.s	loc_E8A8
0000F0F8 4440                       		neg.w	d0
0000F0FA 0640 0010                  		addi.w	#$10,d0
0000F0FE                            
0000F0FE                            loc_E8A8:
0000F0FE 3228 0030                  		move.w	$30(a0),d1
0000F102 9240                       		sub.w	d0,d1
0000F104 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F108 4E75                       		rts	
0000F10A                            ; ===========================================================================
0000F10A                            
0000F10A                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F10A 6100 ED2E                  		bsr.w	SpeedToPos
0000F10E 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F114 6100 0000                  		bsr.w	ObjHitFloor
0000F118 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F11A 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000F11E D368 000C                  		add.w	d1,$C(a0)
0000F122 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000F126 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F12C 117C 0004 0028             		move.b	#4,$28(a0)
0000F132 3011                       		move.w	(a1),d0
0000F134 0240 03FF                  		andi.w	#$3FF,d0
0000F138 0C40 02E8                  		cmpi.w	#$2E8,d0
0000F13C 6400                       		bcc.s	locret_E8EE
0000F13E 117C 0000 0028             		move.b	#0,$28(a0)
0000F144                            
0000F144                            locret_E8EE:
0000F144 4E75                       		rts	
0000F146                            ; ===========================================================================
0000F146                            
0000F146                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000F146 7000                       		moveq	#0,d0
0000F148 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000F14C E648                       		lsr.w	#3,d0
0000F14E 3228 0030                  		move.w	$30(a0),d1
0000F152 9240                       		sub.w	d0,d1
0000F154 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000F158 4E75                       		rts	
0000F15A                            ; ===========================================================================
0000F15A                            ; ---------------------------------------------------------------------------
0000F15A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F15A                            ; ---------------------------------------------------------------------------
0000F15A                            Map_obj46:
0000F15A                            	include "_maps\obj46.asm"
0000F15A                            ; ---------------------------------------------------------------------------
0000F15A                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000F15A                            ; ---------------------------------------------------------------------------
0000F15A 0000                       		dc.w byte_E906-Map_obj46
0000F15C 01                         byte_E906:	dc.b 1
0000F15D F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000F162                            		even
0000F162                            		even
0000F162                            
0000F162                            ; ===========================================================================
0000F162                            ; ---------------------------------------------------------------------------
0000F162                            ; Object 12 - lamp (SYZ)
0000F162                            ; ---------------------------------------------------------------------------
0000F162                            
0000F162                            Obj12:					; XREF: Obj_Index
0000F162 7000                       		moveq	#0,d0
0000F164 1028 0024                  		move.b	$24(a0),d0
0000F168 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000F16C 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000F170                            ; ===========================================================================
0000F170 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000F172 0000                       		dc.w Obj12_Animate-Obj12_Index
0000F174                            ; ===========================================================================
0000F174                            
0000F174                            Obj12_Main:				; XREF: Obj12_Index
0000F174 5428 0024                  		addq.b	#2,$24(a0)
0000F178 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000F180 317C 0000 0002             		move.w	#0,2(a0)
0000F186 117C 0004 0001             		move.b	#4,1(a0)
0000F18C 117C 0010 0019             		move.b	#$10,$19(a0)
0000F192 117C 0006 0018             		move.b	#6,$18(a0)
0000F198                            
0000F198                            Obj12_Animate:				; XREF: Obj12_Index
0000F198 5328 001E                  		subq.b	#1,$1E(a0)
0000F19C 6A00                       		bpl.s	Obj12_ChkDel
0000F19E 117C 0007 001E             		move.b	#7,$1E(a0)
0000F1A4 5228 001A                  		addq.b	#1,$1A(a0)
0000F1A8 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000F1AE 6500                       		bcs.s	Obj12_ChkDel
0000F1B0 117C 0000 001A             		move.b	#0,$1A(a0)
0000F1B6                            
0000F1B6                            Obj12_ChkDel:
0000F1B6 3028 0008                  		move.w	8(a0),d0
0000F1BA 0240 FF80                  		andi.w	#$FF80,d0
0000F1BE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F1C2 0441 0080                  		subi.w	#$80,d1
0000F1C6 0241 FF80                  		andi.w	#$FF80,d1
0000F1CA 9041                       		sub.w	d1,d0
0000F1CC 0C40 0280                  		cmpi.w	#$280,d0
0000F1D0 6200 ECCA                  		bhi.w	DeleteObject
0000F1D4 6000 EC8A                  		bra.w	DisplaySprite
0000F1D8                            ; ===========================================================================
0000F1D8                            ; ---------------------------------------------------------------------------
0000F1D8                            ; Sprite mappings - lamp (SYZ)
0000F1D8                            ; ---------------------------------------------------------------------------
0000F1D8                            Map_obj12:
0000F1D8                            	include "_maps\obj12.asm"
0000F1D8                            ; ---------------------------------------------------------------------------
0000F1D8                            ; Sprite mappings - lamp (SYZ)
0000F1D8                            ; ---------------------------------------------------------------------------
0000F1D8 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000F1DC 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000F1E0 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000F1E4 02                         byte_E98E:	dc.b 2
0000F1E5 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000F1EA 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000F1EF 02                         byte_E999:	dc.b 2
0000F1F0 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000F1F5 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000F1FA 02                         byte_E9A4:	dc.b 2
0000F1FB F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000F200 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000F205 02                         byte_E9AF:	dc.b 2
0000F206 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000F20B 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000F210 02                         byte_E9BA:	dc.b 2
0000F211 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000F216 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000F21B 02                         byte_E9C5:	dc.b 2
0000F21C F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000F221 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000F226                            		even
0000F226                            		even
0000F226                            
0000F226                            ; ===========================================================================
0000F226                            ; ---------------------------------------------------------------------------
0000F226                            ; Object 47 - pinball bumper (SYZ)
0000F226                            ; ---------------------------------------------------------------------------
0000F226                            
0000F226                            Obj47:					; XREF: Obj_Index
0000F226 7000                       		moveq	#0,d0
0000F228 1028 0024                  		move.b	$24(a0),d0
0000F22C 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000F230 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000F234                            ; ===========================================================================
0000F234 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000F236 0000                       		dc.w Obj47_Hit-Obj47_Index
0000F238                            ; ===========================================================================
0000F238                            
0000F238                            Obj47_Main:				; XREF: Obj47_Index
0000F238 5428 0024                  		addq.b	#2,$24(a0)
0000F23C 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000F244 317C 0380 0002             		move.w	#$380,2(a0)
0000F24A 117C 0004 0001             		move.b	#4,1(a0)
0000F250 117C 0010 0019             		move.b	#$10,$19(a0)
0000F256 117C 0001 0018             		move.b	#1,$18(a0)
0000F25C 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000F262                            
0000F262                            Obj47_Hit:				; XREF: Obj47_Index
0000F262 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000F266 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000F26A 4228 0021                  		clr.b	$21(a0)
0000F26E 43F8 D000                  		lea	($FFFFD000).w,a1
0000F272 3228 0008                  		move.w	8(a0),d1
0000F276 3428 000C                  		move.w	$C(a0),d2
0000F27A 9269 0008                  		sub.w	8(a1),d1
0000F27E 9469 000C                  		sub.w	$C(a1),d2
0000F282 4EB9 0000 2FCC             		jsr	(CalcAngle).l
0000F288 4EB9 0000 2CFE             		jsr	(CalcSine).l
0000F28E C3FC F900                  		muls.w	#-$700,d1
0000F292 E081                       		asr.l	#8,d1
0000F294 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000F298 C1FC F900                  		muls.w	#-$700,d0
0000F29C E080                       		asr.l	#8,d0
0000F29E 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000F2A2 08E9 0001 0022             		bset	#1,$22(a1)
0000F2A8 08A9 0004 0022             		bclr	#4,$22(a1)
0000F2AE 08A9 0005 0022             		bclr	#5,$22(a1)
0000F2B4 4229 003C                  		clr.b	$3C(a1)
0000F2B8 117C 0001 001C             		move.b	#1,$1C(a0)
0000F2BE 303C 00B4                  		move.w	#$B4,d0
0000F2C2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play bumper sound
0000F2C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2CC 7000                       		moveq	#0,d0
0000F2CE 1028 0023                  		move.b	$23(a0),d0
0000F2D2 6700                       		beq.s	Obj47_Score
0000F2D4 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000F2DA 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000F2DC 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000F2E0                            
0000F2E0                            Obj47_Score:
0000F2E0 7001                       		moveq	#1,d0
0000F2E2 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000F2E8 6100 EFFC                  		bsr.w	SingleObjLoad
0000F2EC 6600                       		bne.s	Obj47_Display
0000F2EE 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000F2F2 3368 0008 0008             		move.w	8(a0),8(a1)
0000F2F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F2FE 137C 0004 001A             		move.b	#4,$1A(a1)
0000F304                            
0000F304                            Obj47_Display:
0000F304 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000F30A 6100 BBCE                  		bsr.w	AnimateSprite
0000F30E 3028 0008                  		move.w	8(a0),d0
0000F312 0240 FF80                  		andi.w	#$FF80,d0
0000F316 3238 F700                  		move.w	($FFFFF700).w,d1
0000F31A 0441 0080                  		subi.w	#$80,d1
0000F31E 0241 FF80                  		andi.w	#$FF80,d1
0000F322 9041                       		sub.w	d1,d0
0000F324 0C40 0280                  		cmpi.w	#$280,d0
0000F328 6200                       		bhi.s	Obj47_ChkHit
0000F32A 6000 EB34                  		bra.w	DisplaySprite
0000F32E                            ; ===========================================================================
0000F32E                            
0000F32E                            Obj47_ChkHit:				; XREF: Obj47_Display
0000F32E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F332 7000                       		moveq	#0,d0
0000F334 1028 0023                  		move.b	$23(a0),d0
0000F338 6700                       		beq.s	Obj47_Delete
0000F33A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F340                            
0000F340                            Obj47_Delete:
0000F340 6000 EB5A                  		bra.w	DeleteObject
0000F344                            ; ===========================================================================
0000F344                            Ani_obj47:
0000F344                            	include "_anim\obj47.asm"
0000F344                            ; ---------------------------------------------------------------------------
0000F344                            ; Animation script - flamethrower (SBZ)
0000F344                            ; ---------------------------------------------------------------------------
0000F344 0000                       		dc.w byte_EAF4-Ani_obj47
0000F346 0000                       		dc.w byte_EAF8-Ani_obj47
0000F348 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000F34C 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000F354                            		even
0000F354                            		even
0000F354                            
0000F354                            ; ---------------------------------------------------------------------------
0000F354                            ; Sprite mappings - pinball bumper (SYZ)
0000F354                            ; ---------------------------------------------------------------------------
0000F354                            Map_obj47:
0000F354                            	include "_maps\obj47.asm"
0000F354                            ; ---------------------------------------------------------------------------
0000F354                            ; Sprite mappings - pinball bumper (SYZ)
0000F354                            ; ---------------------------------------------------------------------------
0000F354 0000                       		dc.w byte_EB06-Map_obj47
0000F356 0000                       		dc.w byte_EB11-Map_obj47
0000F358 0000                       		dc.w byte_EB1C-Map_obj47
0000F35A 02                         byte_EB06:	dc.b 2
0000F35B F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000F360 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000F365 02                         byte_EB11:	dc.b 2
0000F366 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000F36B F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000F370 02                         byte_EB1C:	dc.b 2
0000F371 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000F376 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000F37C 00                         		even
0000F37C 00                         		even
0000F37C                            
0000F37C                            ; ===========================================================================
0000F37C                            ; ---------------------------------------------------------------------------
0000F37C                            ; Object 0D - signpost at the end of a level
0000F37C                            ; ---------------------------------------------------------------------------
0000F37C                            
0000F37C                            Obj0D:					; XREF: Obj_Index
0000F37C 7000                       		moveq	#0,d0
0000F37E 1028 0024                  		move.b	$24(a0),d0
0000F382 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000F386 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000F38A 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000F390 6100 BB48                  		bsr.w	AnimateSprite
0000F394 6100 EACA                  		bsr.w	DisplaySprite
0000F398 3028 0008                  		move.w	8(a0),d0
0000F39C 0240 FF80                  		andi.w	#$FF80,d0
0000F3A0 3238 F700                  		move.w	($FFFFF700).w,d1
0000F3A4 0441 0080                  		subi.w	#$80,d1
0000F3A8 0241 FF80                  		andi.w	#$FF80,d1
0000F3AC 9041                       		sub.w	d1,d0
0000F3AE 0C40 0280                  		cmpi.w	#$280,d0
0000F3B2 6200 EAE8                  		bhi.w	DeleteObject
0000F3B6 4E75                       		rts	
0000F3B8                            ; ===========================================================================
0000F3B8 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000F3BA 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000F3BC 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000F3BE 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000F3C0 0000                       		dc.w locret_ED1A-Obj0D_Index
0000F3C2                            ; ===========================================================================
0000F3C2                            
0000F3C2                            Obj0D_Main:				; XREF: Obj0D_Index
0000F3C2 5428 0024                  		addq.b	#2,$24(a0)
0000F3C6 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000F3CE 317C 0680 0002             		move.w	#$680,2(a0)
0000F3D4 117C 0004 0001             		move.b	#4,1(a0)
0000F3DA 117C 0018 0019             		move.b	#$18,$19(a0)
0000F3E0 117C 0004 0018             		move.b	#4,$18(a0)
0000F3E6                            
0000F3E6                            Obj0D_Touch:				; XREF: Obj0D_Index
0000F3E6 3038 D008                  		move.w	($FFFFD008).w,d0
0000F3EA 9068 0008                  		sub.w	8(a0),d0
0000F3EE 6500                       		bcs.s	locret_EBBA
0000F3F0 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000F3F4 6400                       		bcc.s	locret_EBBA	; if not, branch
0000F3F6 303C 00CF                  		move.w	#$CF,d0
0000F3FA 4EB9 0000 15CC             		jsr	(PlaySound).l	; play signpost	sound
0000F400 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F404 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000F40A 5428 0024                  		addq.b	#2,$24(a0)
0000F40E                            
0000F40E                            locret_EBBA:
0000F40E 4E75                       		rts	
0000F410                            ; ===========================================================================
0000F410                            
0000F410                            Obj0D_Spin:				; XREF: Obj0D_Index
0000F410 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000F414 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000F416 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000F41C 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000F420 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000F426 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000F428 5428 0024                  		addq.b	#2,$24(a0)
0000F42C                            
0000F42C                            Obj0D_Sparkle:
0000F42C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000F430 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000F432 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000F438 7000                       		moveq	#0,d0
0000F43A 1028 0034                  		move.b	$34(a0),d0
0000F43E 5428 0034                  		addq.b	#2,$34(a0)
0000F442 0228 000E 0034             		andi.b	#$E,$34(a0)
0000F448 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000F44C 6100 EE98                  		bsr.w	SingleObjLoad
0000F450 6600                       		bne.s	locret_EC42
0000F452 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000F456 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000F45C 101A                       		move.b	(a2)+,d0
0000F45E 4880                       		ext.w	d0
0000F460 D068 0008                  		add.w	8(a0),d0
0000F464 3340 0008                  		move.w	d0,8(a1)
0000F468 101A                       		move.b	(a2)+,d0
0000F46A 4880                       		ext.w	d0
0000F46C D068 000C                  		add.w	$C(a0),d0
0000F470 3340 000C                  		move.w	d0,$C(a1)
0000F474 237C 0000 A678 0004        		move.l	#Map_obj25,4(a1)
0000F47C 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000F482 137C 0004 0001             		move.b	#4,1(a1)
0000F488 137C 0002 0018             		move.b	#2,$18(a1)
0000F48E 137C 0008 0019             		move.b	#8,$19(a1)
0000F494                            
0000F494                            locret_EC42:
0000F494 4E75                       		rts	
0000F496                            ; ===========================================================================
0000F496 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000F498 0808                       		dc.b	8,   8
0000F49A F000                       		dc.b -$10,   0
0000F49C 18F8                       		dc.b  $18,  -8
0000F49E 00F8                       		dc.b	0,  -8
0000F4A0 1000                       		dc.b  $10,   0
0000F4A2 E808                       		dc.b -$18,   8
0000F4A4 1810                       		dc.b  $18, $10
0000F4A6                            ; ===========================================================================
0000F4A6                            
0000F4A6                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000F4A6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000F4AA 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000F4AE 0838 0001 D022             		btst	#1,($FFFFD022).w
0000F4B4 6600                       		bne.s	loc_EC70
0000F4B6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000F4BC 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000F4C2 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000F4C4 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000F4CA 6000                       		bra.s	loc_EC70
0000F4CC                            
0000F4CC                            Obj0D_MoveLeft:
0000F4CC 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000F4D2                            
0000F4D2                            loc_EC70:
0000F4D2 4A38 D000                  		tst.b	($FFFFD000).w
0000F4D6 6700                       		beq.s	loc_EC86
0000F4D8 3038 D008                  		move.w	($FFFFD008).w,d0
0000F4DC 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000F4E0 0641 0128                  		addi.w	#$128,d1
0000F4E4 B041                       		cmp.w	d1,d0
0000F4E6 6500                       		bcs.s	locret_ECEE
0000F4E8                            
0000F4E8                            loc_EC86:
0000F4E8 5428 0024                  		addq.b	#2,$24(a0)
0000F4EC                            
0000F4EC                            ; ---------------------------------------------------------------------------
0000F4EC                            ; Subroutine to	set up bonuses at the end of an	act
0000F4EC                            ; ---------------------------------------------------------------------------
0000F4EC                            
0000F4EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F4EC                            
0000F4EC                            
0000F4EC                            GotThroughAct:				; XREF: Obj3E_EndAct
0000F4EC 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000F4F0 6600                       		bne.s	locret_ECEE
0000F4F2 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000F4F8 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000F4FC 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000F500 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000F506 7010                       		moveq	#$10,d0
0000F508 4EB9 0000 17E8             		jsr	(LoadPLC2).l	; load title card patterns
0000F50E 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000F514 7000                       		moveq	#0,d0
0000F516 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000F51A C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000F51E 7200                       		moveq	#0,d1
0000F520 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000F524 D041                       		add.w	d1,d0		; add up your time
0000F526 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000F52A 7214                       		moveq	#$14,d1
0000F52C B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000F52E 6500                       		bcs.s	loc_ECD0	; if not, branch
0000F530 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000F532                            
0000F532                            loc_ECD0:
0000F532 D040                       		add.w	d0,d0
0000F534 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000F53A 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000F53E C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000F542 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000F546 303C 008E                  		move.w	#$8E,d0
0000F54A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000F550                            
0000F550                            locret_ECEE:
0000F550 4E75                       		rts	
0000F552                            ; End of function GotThroughAct
0000F552                            
0000F552                            ; ===========================================================================
0000F552 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000F566 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000F57C                            ; ===========================================================================
0000F57C                            
0000F57C                            locret_ED1A:				; XREF: Obj0D_Index
0000F57C 4E75                       		rts	
0000F57E                            ; ===========================================================================
0000F57E                            Ani_obj0D:
0000F57E                            	include "_anim\obj0D.asm"
0000F57E                            ; ---------------------------------------------------------------------------
0000F57E                            ; Animation script - signpost
0000F57E                            ; ---------------------------------------------------------------------------
0000F57E 0000                       		dc.w byte_ED24-Ani_obj0D
0000F580 0000                       		dc.w byte_ED28-Ani_obj0D
0000F582 0000                       		dc.w byte_ED2E-Ani_obj0D
0000F584 0000                       		dc.w byte_ED34-Ani_obj0D
0000F586 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000F58A 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000F590 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000F596 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000F59A 00                         		even
0000F59A 00                         		even
0000F59A                            
0000F59A                            ; ---------------------------------------------------------------------------
0000F59A                            ; Sprite mappings - signpost
0000F59A                            ; ---------------------------------------------------------------------------
0000F59A                            Map_obj0D:
0000F59A                            	include "_maps\obj0D.asm"
0000F59A                            ; ---------------------------------------------------------------------------
0000F59A                            ; Sprite mappings - signpost
0000F59A                            ; ---------------------------------------------------------------------------
0000F59A 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000F59E 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000F5A2 0000                       		dc.w byte_ED73-Map_obj0D
0000F5A4 03                         byte_ED42:	dc.b 3
0000F5A5 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000F5AA F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000F5AF 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F5B4 02                         byte_ED52:	dc.b 2
0000F5B5 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000F5BA 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F5BF 02                         byte_ED5D:	dc.b 2
0000F5C0 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000F5C5 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F5CA 02                         byte_ED68:	dc.b 2
0000F5CB F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000F5D0 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000F5D5 03                         byte_ED73:	dc.b 3
0000F5D6 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000F5DB F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000F5E0 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000F5E6 00                         		even
0000F5E6 00                         		even
0000F5E6                            
0000F5E6                            ; ===========================================================================
0000F5E6                            ; ---------------------------------------------------------------------------
0000F5E6                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000F5E6                            ; ---------------------------------------------------------------------------
0000F5E6                            
0000F5E6                            Obj4C:					; XREF: Obj_Index
0000F5E6 7000                       		moveq	#0,d0
0000F5E8 1028 0024                  		move.b	$24(a0),d0
0000F5EC 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000F5F0 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000F5F4 6000 0000                  		bra.w	Obj4D_ChkDel
0000F5F8                            ; ===========================================================================
0000F5F8 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000F5FA 0000                       		dc.w loc_EDCC-Obj4C_Index
0000F5FC 0000                       		dc.w loc_EE3E-Obj4C_Index
0000F5FE 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000F600 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000F602 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000F604                            ; ===========================================================================
0000F604                            
0000F604                            Obj4C_Main:				; XREF: Obj4C_Index
0000F604 5428 0024                  		addq.b	#2,$24(a0)
0000F608 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000F610 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000F616 117C 0004 0001             		move.b	#4,1(a0)
0000F61C 117C 0001 0018             		move.b	#1,$18(a0)
0000F622 117C 0038 0019             		move.b	#$38,$19(a0)
0000F628 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000F62E                            
0000F62E                            loc_EDCC:				; XREF: Obj4C_Index
0000F62E 5368 0032                  		subq.w	#1,$32(a0)
0000F632 6A00                       		bpl.s	locret_EDF0
0000F634 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000F63A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F63E 3228 000C                  		move.w	$C(a0),d1
0000F642 B041                       		cmp.w	d1,d0
0000F644 6400                       		bcc.s	locret_EDF0
0000F646 0441 0170                  		subi.w	#$170,d1
0000F64A B041                       		cmp.w	d1,d0
0000F64C 6500                       		bcs.s	locret_EDF0
0000F64E 5428 0024                  		addq.b	#2,$24(a0)
0000F652                            
0000F652                            locret_EDF0:
0000F652 4E75                       		rts	
0000F654                            ; ===========================================================================
0000F654                            
0000F654                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000F654 5428 0024                  		addq.b	#2,$24(a0)
0000F658 6100 ECA2                  		bsr.w	SingleObjLoad2
0000F65C 6600                       		bne.s	loc_EE18
0000F65E 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000F662 3368 0008 0008             		move.w	8(a0),8(a1)
0000F668 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F66E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F674 2348 003C                  		move.l	a0,$3C(a1)
0000F678                            
0000F678                            loc_EE18:
0000F678 117C 0001 001C             		move.b	#1,$1C(a0)
0000F67E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F682 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000F684 117C 0004 001C             		move.b	#4,$1C(a0)
0000F68A 6000                       		bra.s	Obj4C_Display
0000F68C                            ; ===========================================================================
0000F68C                            
0000F68C                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000F68C 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000F690 08E9 0001 0022             		bset	#1,$22(a1)
0000F696 337C FA80 0012             		move.w	#-$580,$12(a1)
0000F69C 6000                       		bra.s	Obj4C_Display
0000F69E                            ; ===========================================================================
0000F69E                            
0000F69E                            loc_EE3E:				; XREF: Obj4C_Index
0000F69E 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000F6A2 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000F6A4 5428 0024                  		addq.b	#2,$24(a0)
0000F6A8 4E75                       		rts	
0000F6AA                            ; ===========================================================================
0000F6AA                            
0000F6AA                            Obj4C_Display:				; XREF: Obj4C_Index
0000F6AA 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F6B0 6100 B828                  		bsr.w	AnimateSprite
0000F6B4 6100 E7AA                  		bsr.w	DisplaySprite
0000F6B8 4E75                       		rts	
0000F6BA                            ; ===========================================================================
0000F6BA                            
0000F6BA                            Obj4C_Delete:				; XREF: Obj4C_Index
0000F6BA 117C 0000 001C             		move.b	#0,$1C(a0)
0000F6C0 117C 0002 0024             		move.b	#2,$24(a0)
0000F6C6 4A28 0028                  		tst.b	$28(a0)
0000F6CA 6700 E7D0                  		beq.w	DeleteObject
0000F6CE 4E75                       		rts	
0000F6D0                            ; ===========================================================================
0000F6D0                            ; ---------------------------------------------------------------------------
0000F6D0                            ; Object 4D - lava geyser / lavafall (MZ)
0000F6D0                            ; ---------------------------------------------------------------------------
0000F6D0                            
0000F6D0                            Obj4D:					; XREF: Obj_Index
0000F6D0 7000                       		moveq	#0,d0
0000F6D2 1028 0024                  		move.b	$24(a0),d0
0000F6D6 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000F6DA 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000F6DE 6000 E780                  		bra.w	DisplaySprite
0000F6E2                            ; ===========================================================================
0000F6E2 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F6E4 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F6E6 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F6E8 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F6EA                            
0000F6EA FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F6EE                            ; ===========================================================================
0000F6EE                            
0000F6EE                            Obj4D_Main:				; XREF: Obj4D_Index
0000F6EE 5428 0024                  		addq.b	#2,$24(a0)
0000F6F2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F6F8 4A28 0028                  		tst.b	$28(a0)
0000F6FC 6700                       		beq.s	loc_EEA4
0000F6FE 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F704                            
0000F704                            loc_EEA4:
0000F704 7000                       		moveq	#0,d0
0000F706 1028 0028                  		move.b	$28(a0),d0
0000F70A D040                       		add.w	d0,d0
0000F70C 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F712 2248                       		movea.l	a0,a1
0000F714 7201                       		moveq	#1,d1
0000F716 6100                       		bsr.s	Obj4D_MakeLava
0000F718 6000                       		bra.s	loc_EF10
0000F71A                            ; ===========================================================================
0000F71A                            
0000F71A                            Obj4D_Loop:
0000F71A 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F71E 6600                       		bne.s	loc_EF0A
0000F720                            
0000F720                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F720 12BC 004D                  		move.b	#$4D,0(a1)
0000F724 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F72C 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F732 137C 0004 0001             		move.b	#4,1(a1)
0000F738 137C 0020 0019             		move.b	#$20,$19(a1)
0000F73E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F744 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F74A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F750 137C 0001 0018             		move.b	#1,$18(a1)
0000F756 137C 0005 001C             		move.b	#5,$1C(a1)
0000F75C 4A28 0028                  		tst.b	$28(a0)
0000F760 6700                       		beq.s	loc_EF0A
0000F762 137C 0002 001C             		move.b	#2,$1C(a1)
0000F768                            
0000F768                            loc_EF0A:
0000F768 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F76C 4E75                       		rts	
0000F76E                            ; ===========================================================================
0000F76E                            
0000F76E                            loc_EF10:				; XREF: Obj4D_Main
0000F76E 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F774 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F77A 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F780 137C 0093 0020             		move.b	#$93,$20(a1)
0000F786 137C 0080 0016             		move.b	#$80,$16(a1)
0000F78C 08E9 0004 0001             		bset	#4,1(a1)
0000F792 5829 0024                  		addq.b	#4,$24(a1)
0000F796 2348 003C                  		move.l	a0,$3C(a1)
0000F79A 4A28 0028                  		tst.b	$28(a0)
0000F79E 6700                       		beq.s	Obj4D_PlaySnd
0000F7A0 7200                       		moveq	#0,d1
0000F7A2 6100 FF76                  		bsr.w	Obj4D_Loop
0000F7A6 5429 0024                  		addq.b	#2,$24(a1)
0000F7AA 08E9 0004 0002             		bset	#4,2(a1)
0000F7B0 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F7B6 137C 0000 0018             		move.b	#0,$18(a1)
0000F7BC 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F7C2 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F7C8 117C 0000 0028             		move.b	#0,$28(a0)
0000F7CE                            
0000F7CE                            Obj4D_PlaySnd:
0000F7CE 303C 00C8                  		move.w	#$C8,d0
0000F7D2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flame sound
0000F7D8                            
0000F7D8                            Obj4D_Action:				; XREF: Obj4D_Index
0000F7D8 7000                       		moveq	#0,d0
0000F7DA 1028 0028                  		move.b	$28(a0),d0
0000F7DE D040                       		add.w	d0,d0
0000F7E0 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F7E4 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F7E8 6100 E650                  		bsr.w	SpeedToPos
0000F7EC 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F7F2 6100 B6E6                  		bsr.w	AnimateSprite
0000F7F6                            
0000F7F6                            Obj4D_ChkDel:				; XREF: Obj4C
0000F7F6 3028 0008                  		move.w	8(a0),d0
0000F7FA 0240 FF80                  		andi.w	#$FF80,d0
0000F7FE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F802 0441 0080                  		subi.w	#$80,d1
0000F806 0241 FF80                  		andi.w	#$FF80,d1
0000F80A 9041                       		sub.w	d1,d0
0000F80C 0C40 0280                  		cmpi.w	#$280,d0
0000F810 6200 E68A                  		bhi.w	DeleteObject
0000F814 4E75                       		rts	
0000F816                            ; ===========================================================================
0000F816 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F818 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F81A                            ; ===========================================================================
0000F81A                            
0000F81A                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F81A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F820 3028 0030                  		move.w	$30(a0),d0
0000F824 B068 000C                  		cmp.w	$C(a0),d0
0000F828 6400                       		bcc.s	locret_EFDA
0000F82A 5828 0024                  		addq.b	#4,$24(a0)
0000F82E 2268 003C                  		movea.l	$3C(a0),a1
0000F832 137C 0003 001C             		move.b	#3,$1C(a1)
0000F838                            
0000F838                            locret_EFDA:
0000F838 4E75                       		rts	
0000F83A                            ; ===========================================================================
0000F83A                            
0000F83A                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F83A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F840 3028 0030                  		move.w	$30(a0),d0
0000F844 B068 000C                  		cmp.w	$C(a0),d0
0000F848 6400                       		bcc.s	locret_EFFA
0000F84A 5828 0024                  		addq.b	#4,$24(a0)
0000F84E 2268 003C                  		movea.l	$3C(a0),a1
0000F852 137C 0001 001C             		move.b	#1,$1C(a1)
0000F858                            
0000F858                            locret_EFFA:
0000F858 4E75                       		rts	
0000F85A                            ; ===========================================================================
0000F85A                            
0000F85A                            loc_EFFC:				; XREF: Obj4D_Index
0000F85A 2268 003C                  		movea.l	$3C(a0),a1
0000F85E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F864 6700 0000                  		beq.w	Obj4D_Delete
0000F868 3029 000C                  		move.w	$C(a1),d0
0000F86C 0640 0060                  		addi.w	#$60,d0
0000F870 3140 000C                  		move.w	d0,$C(a0)
0000F874 9068 0030                  		sub.w	$30(a0),d0
0000F878 4440                       		neg.w	d0
0000F87A 7208                       		moveq	#8,d1
0000F87C 0C40 0040                  		cmpi.w	#$40,d0
0000F880 6C00                       		bge.s	loc_F026
0000F882 720B                       		moveq	#$B,d1
0000F884                            
0000F884                            loc_F026:
0000F884 0C40 0080                  		cmpi.w	#$80,d0
0000F888 6F00                       		ble.s	loc_F02E
0000F88A 720E                       		moveq	#$E,d1
0000F88C                            
0000F88C                            loc_F02E:
0000F88C 5328 001E                  		subq.b	#1,$1E(a0)
0000F890 6A00                       		bpl.s	loc_F04C
0000F892 117C 0007 001E             		move.b	#7,$1E(a0)
0000F898 5228 001B                  		addq.b	#1,$1B(a0)
0000F89C 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F8A2 6500                       		bcs.s	loc_F04C
0000F8A4 117C 0000 001B             		move.b	#0,$1B(a0)
0000F8AA                            
0000F8AA                            loc_F04C:
0000F8AA 1028 001B                  		move.b	$1B(a0),d0
0000F8AE D001                       		add.b	d1,d0
0000F8B0 1140 001A                  		move.b	d0,$1A(a0)
0000F8B4 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F8B8                            ; ===========================================================================
0000F8B8                            
0000F8B8                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F8B8 6000 E5E2                  		bra.w	DeleteObject
0000F8BC                            ; ===========================================================================
0000F8BC                            ; ---------------------------------------------------------------------------
0000F8BC                            ; Object 4E - advancing	wall of	lava (MZ)
0000F8BC                            ; ---------------------------------------------------------------------------
0000F8BC                            
0000F8BC                            Obj4E:					; XREF: Obj_Index
0000F8BC 7000                       		moveq	#0,d0
0000F8BE 1028 0024                  		move.b	$24(a0),d0
0000F8C2 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F8C6 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F8CA                            ; ===========================================================================
0000F8CA 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F8CC 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F8CE 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F8D0 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F8D2 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F8D4                            ; ===========================================================================
0000F8D4                            
0000F8D4                            Obj4E_Main:				; XREF: Obj4E_Index
0000F8D4 5828 0024                  		addq.b	#4,$24(a0)
0000F8D8 2248                       		movea.l	a0,a1
0000F8DA 7201                       		moveq	#1,d1
0000F8DC 6000                       		bra.s	Obj4E_Main2
0000F8DE                            ; ===========================================================================
0000F8DE                            
0000F8DE                            Obj4E_Loop:
0000F8DE 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F8E2 6600                       		bne.s	loc_F0C8
0000F8E4                            
0000F8E4                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F8E4 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F8E8 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F8F0 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F8F6 137C 0004 0001             		move.b	#4,1(a1)
0000F8FC 137C 0050 0019             		move.b	#$50,$19(a1)
0000F902 3368 0008 0008             		move.w	8(a0),8(a1)
0000F908 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F90E 137C 0001 0018             		move.b	#1,$18(a1)
0000F914 137C 0000 001C             		move.b	#0,$1C(a1)
0000F91A 137C 0094 0020             		move.b	#$94,$20(a1)
0000F920 2348 003C                  		move.l	a0,$3C(a1)
0000F924                            
0000F924                            loc_F0C8:
0000F924 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F928                            
0000F928 5C29 0024                  		addq.b	#6,$24(a1)
0000F92C 137C 0004 001A             		move.b	#4,$1A(a1)
0000F932                            
0000F932                            Obj4E_Action:				; XREF: Obj4E_Index
0000F932 3038 D008                  		move.w	($FFFFD008).w,d0
0000F936 9068 0008                  		sub.w	8(a0),d0
0000F93A 6400                       		bcc.s	Obj4E_ChkSonic
0000F93C 4440                       		neg.w	d0
0000F93E                            
0000F93E                            Obj4E_ChkSonic:
0000F93E 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F942 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F944 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F948 9068 000C                  		sub.w	$C(a0),d0
0000F94C 6400                       		bcc.s	loc_F0F4
0000F94E 4440                       		neg.w	d0
0000F950                            
0000F950                            loc_F0F4:
0000F950 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F954 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F956 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F95C 6000                       		bra.s	Obj4E_Solid
0000F95E                            ; ===========================================================================
0000F95E                            
0000F95E                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F95E 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F962 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F964 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F96A 5528 0024                  		subq.b	#2,$24(a0)
0000F96E                            
0000F96E                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F96E 323C 002B                  		move.w	#$2B,d1
0000F972 343C 0018                  		move.w	#$18,d2
0000F976 3602                       		move.w	d2,d3
0000F978 5243                       		addq.w	#1,d3
0000F97A 3828 0008                  		move.w	8(a0),d4
0000F97E 1028 0024                  		move.b	$24(a0),d0
0000F982 3F00                       		move.w	d0,-(sp)
0000F984 6100 0000                  		bsr.w	SolidObject
0000F988 301F                       		move.w	(sp)+,d0
0000F98A 1140 0024                  		move.b	d0,$24(a0)
0000F98E 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F994 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F996 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F99A 4228 0036                  		clr.b	$36(a0)
0000F99E                            
0000F99E                            Obj4E_Animate:
0000F99E 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F9A4 6100 B534                  		bsr.w	AnimateSprite
0000F9A8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F9AE 6400                       		bcc.s	Obj4E_ChkDel
0000F9B0 6100 E488                  		bsr.w	SpeedToPos
0000F9B4                            
0000F9B4                            Obj4E_ChkDel:
0000F9B4 6100 E4AA                  		bsr.w	DisplaySprite
0000F9B8 4A28 0036                  		tst.b	$36(a0)
0000F9BC 6600                       		bne.s	locret_F17E
0000F9BE 3028 0008                  		move.w	8(a0),d0
0000F9C2 0240 FF80                  		andi.w	#$FF80,d0
0000F9C6 3238 F700                  		move.w	($FFFFF700).w,d1
0000F9CA 0441 0080                  		subi.w	#$80,d1
0000F9CE 0241 FF80                  		andi.w	#$FF80,d1
0000F9D2 9041                       		sub.w	d1,d0
0000F9D4 0C40 0280                  		cmpi.w	#$280,d0
0000F9D8 6200                       		bhi.s	Obj4E_ChkGone
0000F9DA                            
0000F9DA                            locret_F17E:
0000F9DA 4E75                       		rts	
0000F9DC                            ; ===========================================================================
0000F9DC                            
0000F9DC                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F9DC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F9E0 7000                       		moveq	#0,d0
0000F9E2 1028 0023                  		move.b	$23(a0),d0
0000F9E6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F9EC 117C 0008 0024             		move.b	#8,$24(a0)
0000F9F2 4E75                       		rts	
0000F9F4                            ; ===========================================================================
0000F9F4                            
0000F9F4                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F9F4 2268 003C                  		movea.l	$3C(a0),a1
0000F9F8 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F9FE 6700                       		beq.s	Obj4E_Delete
0000FA00 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000FA06 0468 0080 0008             		subi.w	#$80,8(a0)
0000FA0C 6000 E452                  		bra.w	DisplaySprite
0000FA10                            ; ===========================================================================
0000FA10                            
0000FA10                            Obj4E_Delete:				; XREF: Obj4E_Index
0000FA10 6000 E48A                  		bra.w	DeleteObject
0000FA14                            ; ===========================================================================
0000FA14                            ; ---------------------------------------------------------------------------
0000FA14                            ; Object 54 - invisible	lava tag (MZ)
0000FA14                            ; ---------------------------------------------------------------------------
0000FA14                            
0000FA14                            Obj54:					; XREF: Obj_Index
0000FA14 7000                       		moveq	#0,d0
0000FA16 1028 0024                  		move.b	$24(a0),d0
0000FA1A 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000FA1E 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000FA22                            ; ===========================================================================
0000FA22 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000FA24 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000FA26                            
0000FA26 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000FA2A                            ; ===========================================================================
0000FA2A                            
0000FA2A                            Obj54_Main:				; XREF: Obj54_Index
0000FA2A 5428 0024                  		addq.b	#2,$24(a0)
0000FA2E 7000                       		moveq	#0,d0
0000FA30 1028 0028                  		move.b	$28(a0),d0
0000FA34 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000FA3A 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000FA42 117C 0084 0001             		move.b	#$84,1(a0)
0000FA48                            
0000FA48                            Obj54_ChkDel:				; XREF: Obj54_Index
0000FA48 3028 0008                  		move.w	8(a0),d0
0000FA4C 0240 FF80                  		andi.w	#$FF80,d0
0000FA50 3238 F700                  		move.w	($FFFFF700).w,d1
0000FA54 0441 0080                  		subi.w	#$80,d1
0000FA58 0241 FF80                  		andi.w	#$FF80,d1
0000FA5C 9041                       		sub.w	d1,d0
0000FA5E 6B00 E43C                  		bmi.w	DeleteObject
0000FA62 0C40 0280                  		cmpi.w	#$280,d0
0000FA66 6200 E434                  		bhi.w	DeleteObject
0000FA6A 4E75                       		rts	
0000FA6C                            ; ===========================================================================
0000FA6C                            ; ---------------------------------------------------------------------------
0000FA6C                            ; Sprite mappings - invisible lava tag (MZ)
0000FA6C                            ; ---------------------------------------------------------------------------
0000FA6C                            Map_obj54:
0000FA6C                            	include "_maps\obj54.asm"
0000FA6C                            ; ---------------------------------------------------------------------------
0000FA6C                            ; Sprite mappings - invisible lava tag (MZ)
0000FA6C                            ; ---------------------------------------------------------------------------
0000FA6C 0000                       		dc.w byte_F212-Map_obj54
0000FA6E 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000FA70 00                         		even
0000FA70 00                         		even
0000FA70                            
0000FA70                            Ani_obj4C:
0000FA70                            	include "_anim\obj4C.asm"
0000FA70                            ; ---------------------------------------------------------------------------
0000FA70                            ; Animation script - geyser of lava (MZ)
0000FA70                            ; ---------------------------------------------------------------------------
0000FA70 0000                       		dc.w byte_F220-Ani_obj4C
0000FA72 0000                       		dc.w byte_F22A-Ani_obj4C
0000FA74 0000                       		dc.w byte_F22E-Ani_obj4C
0000FA76 0000                       		dc.w byte_F232-Ani_obj4C
0000FA78 0000                       		dc.w byte_F23A-Ani_obj4C
0000FA7A 0000                       		dc.w byte_F23E-Ani_obj4C
0000FA7C 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000FA86 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000FA8A 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000FA8E 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000FA96 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000FA9A 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000FA9E                            		even
0000FA9E                            		even
0000FA9E                            
0000FA9E                            Ani_obj4E:
0000FA9E                            	include "_anim\obj4E.asm"
0000FA9E                            ; ---------------------------------------------------------------------------
0000FA9E                            ; Animation script - advancing wall of lava (MZ)
0000FA9E                            ; ---------------------------------------------------------------------------
0000FA9E 0000                       		dc.w byte_F244-Ani_obj4E
0000FAA0 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000FAA6                            		even
0000FAA6                            		even
0000FAA6                            
0000FAA6                            ; ---------------------------------------------------------------------------
0000FAA6                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FAA6                            ; ---------------------------------------------------------------------------
0000FAA6                            Map_obj4C:
0000FAA6                            	include "_maps\obj4C.asm"
0000FAA6                            ; ---------------------------------------------------------------------------
0000FAA6                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000FAA6                            ; ---------------------------------------------------------------------------
0000FAA6 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000FAAA 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000FAAE 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000FAB2 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000FAB6 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000FABA 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000FABE 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000FAC2 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000FAC6 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000FACA 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000FACE 02                         byte_F272:	dc.b 2
0000FACF EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000FAD4 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000FAD9 02                         byte_F27D:	dc.b 2
0000FADA EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000FADF EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000FAE4 04                         byte_F288:	dc.b 4
0000FAE5 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FAEA F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FAEF F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FAF4 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FAF9 04                         byte_F29D:	dc.b 4
0000FAFA EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FAFF F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FB04 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FB09 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FB0E 06                         byte_F2B2:	dc.b 6
0000FB0F EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000FB14 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000FB19 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000FB1E EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000FB23 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000FB28 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000FB2D 06                         byte_F2D1:	dc.b 6
0000FB2E EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000FB33 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000FB38 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000FB3D EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000FB42 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000FB47 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000FB4C 02                         byte_F2F0:	dc.b 2
0000FB4D E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000FB52 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000FB57 02                         byte_F2FB:	dc.b 2
0000FB58 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000FB5D E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000FB62 0A                         byte_F306:	dc.b $A
0000FB63 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FB68 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FB6D B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FB72 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FB77 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FB7C D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FB81 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FB86 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FB8B 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FB90 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FB95 0A                         byte_F339:	dc.b $A
0000FB96 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FB9B 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FBA0 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FBA5 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FBAA D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FBAF D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FBB4 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FBB9 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FBBE 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FBC3 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FBC8 0A                         byte_F36C:	dc.b $A
0000FBC9 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FBCE 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FBD3 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FBD8 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FBDD D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FBE2 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FBE7 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FBEC F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FBF1 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FBF6 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FBFB 06                         byte_F39F:	dc.b 6
0000FBFC 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FC01 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FC06 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FC0B B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FC10 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FC15 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FC1A 06                         byte_F3BE:	dc.b 6
0000FC1B 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FC20 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FC25 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FC2A B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FC2F D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FC34 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FC39 06                         byte_F3DD:	dc.b 6
0000FC3A 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FC3F 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FC44 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FC49 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FC4E D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FC53 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FC58 10                         byte_F3FC:	dc.b $10
0000FC59 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000FC5E 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000FC63 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000FC68 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000FC6D D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000FC72 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000FC77 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000FC7C F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000FC81 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000FC86 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000FC8B 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000FC90 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000FC95 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000FC9A 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000FC9F 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000FCA4 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000FCA9 10                         byte_F44D:	dc.b $10
0000FCAA 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000FCAF 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000FCB4 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000FCB9 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000FCBE D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000FCC3 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000FCC8 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000FCCD F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000FCD2 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000FCD7 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000FCDC 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000FCE1 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000FCE6 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000FCEB 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000FCF0 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000FCF5 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000FCFA 10                         byte_F49E:	dc.b $10
0000FCFB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000FD00 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000FD05 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000FD0A B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000FD0F D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000FD14 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000FD19 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000FD1E F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000FD23 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000FD28 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000FD2D 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000FD32 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000FD37 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000FD3C 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000FD41 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000FD46 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000FD4B 06                         byte_F4EF:	dc.b 6
0000FD4C E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000FD51 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000FD56 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000FD5B E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000FD60 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000FD65 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000FD6A 06                         byte_F50E:	dc.b 6
0000FD6B E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000FD70 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000FD75 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000FD7A E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000FD7F D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000FD84 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000FD89 00                         byte_F52D:	dc.b 0
0000FD8A                            		even
0000FD8A                            		even
0000FD8A                            
0000FD8A                            ; ---------------------------------------------------------------------------
0000FD8A                            ; Sprite mappings - advancing wall of lava (MZ)
0000FD8A                            ; ---------------------------------------------------------------------------
0000FD8A                            Map_obj4E:
0000FD8A                            	include "_maps\obj4E.asm"
0000FD8A                            ; ---------------------------------------------------------------------------
0000FD8A                            ; Sprite mappings - advancing wall of lava (MZ)
0000FD8A                            ; ---------------------------------------------------------------------------
0000FD8A 0000                       		dc.w byte_F538-Map_obj4E
0000FD8C 0000                       		dc.w byte_F566-Map_obj4E
0000FD8E 0000                       		dc.w byte_F594-Map_obj4E
0000FD90 0000                       		dc.w byte_F5C2-Map_obj4E
0000FD92 0000                       		dc.w byte_F5F0-Map_obj4E
0000FD94 09                         byte_F538:	dc.b 9
0000FD95 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000FD9A 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FD9F 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDA4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDA9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDAE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDB3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDB8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDBD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDC2 09                         byte_F566:	dc.b 9
0000FDC3 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FDC8 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000FDCD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FDD2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FDD7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FDDC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FDE1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FDE6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FDEB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FDF0 09                         byte_F594:	dc.b 9
0000FDF1 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000FDF6 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000FDFB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE00 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE05 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE0A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE0F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE14 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE19 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE1E 09                         byte_F5C2:	dc.b 9
0000FE1F E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000FE24 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000FE29 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE2E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE33 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE38 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE3D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE42 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE47 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE4C 08                         byte_F5F0:	dc.b 8
0000FE4D E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000FE52 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000FE57 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000FE5C 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000FE61 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000FE66 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000FE6B E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000FE70 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000FE76 00                         		even
0000FE76 00                         		even
0000FE76                            
0000FE76                            ; ===========================================================================
0000FE76                            ; ---------------------------------------------------------------------------
0000FE76                            ; Object 40 - Moto Bug enemy (GHZ)
0000FE76                            ; ---------------------------------------------------------------------------
0000FE76                            
0000FE76                            Obj40:					; XREF: Obj_Index
0000FE76 7000                       		moveq	#0,d0
0000FE78 1028 0024                  		move.b	$24(a0),d0
0000FE7C 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000FE80 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000FE84                            ; ===========================================================================
0000FE84 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000FE86 0000                       		dc.w Obj40_Action-Obj40_Index
0000FE88 0000                       		dc.w Obj40_Animate-Obj40_Index
0000FE8A 0000                       		dc.w Obj40_Delete-Obj40_Index
0000FE8C                            ; ===========================================================================
0000FE8C                            
0000FE8C                            Obj40_Main:				; XREF: Obj40_Index
0000FE8C 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000FE94 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000FE9A 117C 0004 0001             		move.b	#4,1(a0)
0000FEA0 117C 0004 0018             		move.b	#4,$18(a0)
0000FEA6 117C 0014 0019             		move.b	#$14,$19(a0)
0000FEAC 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000FEB0 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000FEB2 117C 000E 0016             		move.b	#$E,$16(a0)
0000FEB8 117C 0008 0017             		move.b	#8,$17(a0)
0000FEBE 117C 000C 0020             		move.b	#$C,$20(a0)
0000FEC4 6100 DF02                  		bsr.w	ObjectFall
0000FEC8 4EB9 0000 0000             		jsr	ObjHitFloor
0000FECE 4A41                       		tst.w	d1
0000FED0 6A00                       		bpl.s	locret_F68A
0000FED2 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FED6 317C 0000 0012             		move.w	#0,$12(a0)
0000FEDC 5428 0024                  		addq.b	#2,$24(a0)
0000FEE0 0868 0000 0022             		bchg	#0,$22(a0)
0000FEE6                            
0000FEE6                            locret_F68A:
0000FEE6 4E75                       		rts	
0000FEE8                            ; ===========================================================================
0000FEE8                            
0000FEE8                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000FEE8 5828 0024                  		addq.b	#4,$24(a0)
0000FEEC 6000 0000                  		bra.w	Obj40_Animate
0000FEF0                            ; ===========================================================================
0000FEF0                            
0000FEF0                            Obj40_Action:				; XREF: Obj40_Index
0000FEF0 7000                       		moveq	#0,d0
0000FEF2 1028 0025                  		move.b	$25(a0),d0
0000FEF6 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000FEFA 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000FEFE 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FF04 6100 AFD4                  		bsr.w	AnimateSprite
0000FF08                            
0000FF08                            ; ---------------------------------------------------------------------------
0000FF08                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000FF08                            ; ---------------------------------------------------------------------------
0000FF08                            
0000FF08                            MarkObjGone:
0000FF08 3028 0008                  		move.w	8(a0),d0
0000FF0C 0240 FF80                  		andi.w	#$FF80,d0
0000FF10 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF14 0441 0080                  		subi.w	#$80,d1
0000FF18 0241 FF80                  		andi.w	#$FF80,d1
0000FF1C 9041                       		sub.w	d1,d0
0000FF1E 0C40 0280                  		cmpi.w	#$280,d0
0000FF22 6200 0000                  		bhi.w	Mark_ChkGone
0000FF26 6000 DF38                  		bra.w	DisplaySprite
0000FF2A                            ; ===========================================================================
0000FF2A                            
0000FF2A                            Mark_ChkGone:
0000FF2A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FF2E 7000                       		moveq	#0,d0
0000FF30 1028 0023                  		move.b	$23(a0),d0
0000FF34 6700                       		beq.s	Mark_Delete
0000FF36 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FF3C                            
0000FF3C                            Mark_Delete:
0000FF3C 6000 DF5E                  		bra.w	DeleteObject
0000FF40                            
0000FF40                            ; ===========================================================================
0000FF40 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000FF42 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000FF44                            ; ===========================================================================
0000FF44                            
0000FF44                            Obj40_Move:				; XREF: Obj40_Index2
0000FF44 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FF48 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000FF4A 5428 0025                  		addq.b	#2,$25(a0)
0000FF4E 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000FF54 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF5A 0868 0000 0022             		bchg	#0,$22(a0)
0000FF60 6600                       		bne.s	locret_F70A
0000FF62 4468 0010                  		neg.w	$10(a0)		; change direction
0000FF66                            
0000FF66                            locret_F70A:
0000FF66 4E75                       		rts	
0000FF68                            ; ===========================================================================
0000FF68                            
0000FF68                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000FF68 6100 DED0                  		bsr.w	SpeedToPos
0000FF6C 4EB9 0000 0000             		jsr	ObjHitFloor
0000FF72 0C41 FFF8                  		cmpi.w	#-8,d1
0000FF76 6D00                       		blt.s	Obj40_Pause
0000FF78 0C41 000C                  		cmpi.w	#$C,d1
0000FF7C 6C00                       		bge.s	Obj40_Pause
0000FF7E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FF82 5328 0033                  		subq.b	#1,$33(a0)
0000FF86 6A00                       		bpl.s	locret_F756
0000FF88 117C 000F 0033             		move.b	#$F,$33(a0)
0000FF8E 6100 E356                  		bsr.w	SingleObjLoad
0000FF92 6600                       		bne.s	locret_F756
0000FF94 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000FF98 3368 0008 0008             		move.w	8(a0),8(a1)
0000FF9E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FFA4 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000FFAA 137C 0002 001C             		move.b	#2,$1C(a1)
0000FFB0                            
0000FFB0                            locret_F756:
0000FFB0 4E75                       		rts	
0000FFB2                            ; ===========================================================================
0000FFB2                            
0000FFB2                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000FFB2 5528 0025                  		subq.b	#2,$25(a0)
0000FFB6 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FFBC 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000FFC2 117C 0000 001C             		move.b	#0,$1C(a0)
0000FFC8 4E75                       		rts	
0000FFCA                            ; ===========================================================================
0000FFCA                            
0000FFCA                            Obj40_Animate:				; XREF: Obj40_Index
0000FFCA 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000FFD0 6100 AF08                  		bsr.w	AnimateSprite
0000FFD4 6000 DE8A                  		bra.w	DisplaySprite
0000FFD8                            ; ===========================================================================
0000FFD8                            
0000FFD8                            Obj40_Delete:				; XREF: Obj40_Index
0000FFD8 6000 DEC2                  		bra.w	DeleteObject
0000FFDC                            ; ===========================================================================
0000FFDC                            Ani_obj40:
0000FFDC                            	include "_anim\obj40.asm"
0000FFDC                            ; ---------------------------------------------------------------------------
0000FFDC                            ; Animation script - Motobug enemy
0000FFDC                            ; ---------------------------------------------------------------------------
0000FFDC 0000                       		dc.w byte_F788-Ani_obj40
0000FFDE 0000                       		dc.w byte_F78C-Ani_obj40
0000FFE0 0000                       		dc.w byte_F792-Ani_obj40
0000FFE2 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000FFE6 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000FFEC 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000FFFA                            		even
0000FFFA                            		even
0000FFFA                            
0000FFFA                            ; ---------------------------------------------------------------------------
0000FFFA                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000FFFA                            ; ---------------------------------------------------------------------------
0000FFFA                            Map_obj40:
0000FFFA                            	include "_maps\obj40.asm"
0000FFFA                            Map_cedc:
0000FFFA 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
0000FFFC 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
0000FFFE 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
00010000 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
00010002 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
00010004 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
00010006 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
00010008 04                         Map_cedc_E: 	dc.b $4
00010009 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0001000E 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
00010013 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010018 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
0001001D 04                         Map_cedc_23: 	dc.b $4
0001001E F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
00010023 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
00010028 F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0001002D 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
00010032 05                         Map_cedc_38: 	dc.b $5
00010033 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
00010038 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0001003D F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010042 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
00010047 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0001004C 01                         Map_cedc_52: 	dc.b $1
0001004D FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
00010052 01                         Map_cedc_58: 	dc.b $1
00010053 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
00010058 01                         Map_cedc_5E: 	dc.b $1
00010059 FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
0001005E 00                         Map_cedc_64: 	dc.b $0
00010060 00                         	even
00010060 00                         	even
00010060                            
00010060                            ; ===========================================================================
00010060                            ; ---------------------------------------------------------------------------
00010060                            ; Object 4F - blank
00010060                            ; ---------------------------------------------------------------------------
00010060                            
00010060                            Obj4F:					; XREF: Obj_Index
00010060 4E75                       		rts	
00010062                            
00010062                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010062                            
00010062                            
00010062                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010062 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010066 D047                       		add.w	d7,d0
00010068 0240 0003                  		andi.w	#3,d0
0001006C 6600                       		bne.s	loc_F836
0001006E 7600                       		moveq	#0,d3
00010070 1628 0019                  		move.b	$19(a0),d3
00010074 4A68 0010                  		tst.w	$10(a0)
00010078 6B00                       		bmi.s	loc_F82C
0001007A 6100 0000                  		bsr.w	ObjHitWallRight
0001007E 4A41                       		tst.w	d1
00010080 6A00                       		bpl.s	loc_F836
00010082                            
00010082                            loc_F828:
00010082 7001                       		moveq	#1,d0
00010084 4E75                       		rts	
00010086                            ; ===========================================================================
00010086                            
00010086                            loc_F82C:
00010086 4643                       		not.w	d3
00010088 6100 0000                  		bsr.w	ObjHitWallLeft
0001008C 4A41                       		tst.w	d1
0001008E 6BF2                       		bmi.s	loc_F828
00010090                            
00010090                            loc_F836:
00010090 7000                       		moveq	#0,d0
00010092 4E75                       		rts	
00010094                            ; End of function Obj50_ChkWall
00010094                            
00010094                            ; ===========================================================================
00010094                            ; ---------------------------------------------------------------------------
00010094                            ; Object 50 - Yadrin enemy (SYZ)
00010094                            ; ---------------------------------------------------------------------------
00010094                            
00010094                            Obj50:					; XREF: Obj_Index
00010094 7000                       		moveq	#0,d0
00010096 1028 0024                  		move.b	$24(a0),d0
0001009A 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0001009E 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
000100A2                            ; ===========================================================================
000100A2 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
000100A4 0000                       		dc.w Obj50_Action-Obj50_Index
000100A6                            ; ===========================================================================
000100A6                            
000100A6                            Obj50_Main:				; XREF: Obj50_Index
000100A6 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
000100AE 317C 247B 0002             		move.w	#$247B,2(a0)
000100B4 117C 0004 0001             		move.b	#4,1(a0)
000100BA 117C 0004 0018             		move.b	#4,$18(a0)
000100C0 117C 0014 0019             		move.b	#$14,$19(a0)
000100C6 117C 0011 0016             		move.b	#$11,$16(a0)
000100CC 117C 0008 0017             		move.b	#8,$17(a0)
000100D2 117C 00CC 0020             		move.b	#$CC,$20(a0)
000100D8 6100 DCEE                  		bsr.w	ObjectFall
000100DC 6100 0000                  		bsr.w	ObjHitFloor
000100E0 4A41                       		tst.w	d1
000100E2 6A00                       		bpl.s	locret_F89E
000100E4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000100E8 317C 0000 0012             		move.w	#0,$12(a0)
000100EE 5428 0024                  		addq.b	#2,$24(a0)
000100F2 0868 0000 0022             		bchg	#0,$22(a0)
000100F8                            
000100F8                            locret_F89E:
000100F8 4E75                       		rts	
000100FA                            ; ===========================================================================
000100FA                            
000100FA                            Obj50_Action:				; XREF: Obj50_Index
000100FA 7000                       		moveq	#0,d0
000100FC 1028 0025                  		move.b	$25(a0),d0
00010100 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
00010104 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
00010108 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0001010E 6100 ADCA                  		bsr.w	AnimateSprite
00010112 6000 FDF4                  		bra.w	MarkObjGone
00010116                            ; ===========================================================================
00010116 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
00010118 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0001011A                            ; ===========================================================================
0001011A                            
0001011A                            Obj50_Move:				; XREF: Obj50_Index2
0001011A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001011E 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010120 5428 0025                  		addq.b	#2,$25(a0)
00010124 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0001012A 117C 0001 001C             		move.b	#1,$1C(a0)
00010130 0868 0000 0022             		bchg	#0,$22(a0)
00010136 6600                       		bne.s	locret_F8E2
00010138 4468 0010                  		neg.w	$10(a0)		; change direction
0001013C                            
0001013C                            locret_F8E2:
0001013C 4E75                       		rts	
0001013E                            ; ===========================================================================
0001013E                            
0001013E                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0001013E 6100 DCFA                  		bsr.w	SpeedToPos
00010142 6100 0000                  		bsr.w	ObjHitFloor
00010146 0C41 FFF8                  		cmpi.w	#-8,d1
0001014A 6D00                       		blt.s	Obj50_Pause
0001014C 0C41 000C                  		cmpi.w	#$C,d1
00010150 6C00                       		bge.s	Obj50_Pause
00010152 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010156 6100 FF0A                  		bsr.w	Obj50_ChkWall
0001015A 6600                       		bne.s	Obj50_Pause
0001015C 4E75                       		rts	
0001015E                            ; ===========================================================================
0001015E                            
0001015E                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0001015E 5528 0025                  		subq.b	#2,$25(a0)
00010162 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010168 317C 0000 0010             		move.w	#0,$10(a0)
0001016E 117C 0000 001C             		move.b	#0,$1C(a0)
00010174 4E75                       		rts	
00010176                            ; ===========================================================================
00010176                            Ani_obj50:
00010176                            	include "_anim\obj50.asm"
00010176                            ; ---------------------------------------------------------------------------
00010176                            ; Animation script - Yadrin enemy
00010176                            ; ---------------------------------------------------------------------------
00010176 0000                       		dc.w byte_F920-Ani_obj50
00010178 0000                       		dc.w byte_F924-Ani_obj50
0001017A 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0001017E 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010188                            		even
00010188                            		even
00010188                            
00010188                            ; ---------------------------------------------------------------------------
00010188                            ; Sprite mappings - Yadrin enemy (SYZ)
00010188                            ; ---------------------------------------------------------------------------
00010188                            Map_obj50:
00010188                            	include "_maps\obj50.asm"
00010188                            Map_ff24:
00010188 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
0001018A 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
0001018C 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
0001018E 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010190 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010192 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010194 05                         Map_ff24_C: 	dc.b $5
00010195 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
0001019A FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
0001019F EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101A4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101A9 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000101AE 05                         Map_ff24_26: 	dc.b $5
000101AF F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
000101B4 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
000101B9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101BE F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101C3 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000101C8 05                         Map_ff24_40: 	dc.b $5
000101C9 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
000101CE 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
000101D3 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101D8 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101DD 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
000101E2 05                         Map_ff24_5A: 	dc.b $5
000101E3 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
000101E8 FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
000101ED EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
000101F2 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
000101F7 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
000101FC 05                         Map_ff24_74: 	dc.b $5
000101FD F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010202 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010207 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
0001020C F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010211 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010216 05                         Map_ff24_8E: 	dc.b $5
00010217 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
0001021C 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010221 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010226 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
0001022B 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010230                            	even
00010230                            	even
00010230                            
00010230                            ; ---------------------------------------------------------------------------
00010230                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010230                            ;
00010230                            ; variables:
00010230                            ; d1 = width
00010230                            ; d2 = height /	2 (when	jumping)
00010230                            ; d3 = height /	2 (when	walking)
00010230                            ; d4 = x-axis position
00010230                            ; ---------------------------------------------------------------------------
00010230                            
00010230                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010230                            
00010230                            
00010230                            SolidObject:
00010230 4A28 0025                  		tst.b	$25(a0)
00010234 6700 0000                  		beq.w	loc_FAC8
00010238 3401                       		move.w	d1,d2
0001023A D442                       		add.w	d2,d2
0001023C 43F8 D000                  		lea	($FFFFD000).w,a1
00010240 0829 0001 0022             		btst	#1,$22(a1)
00010246 6600                       		bne.s	loc_F9FE
00010248 3029 0008                  		move.w	8(a1),d0
0001024C 9068 0008                  		sub.w	8(a0),d0
00010250 D041                       		add.w	d1,d0
00010252 6B00                       		bmi.s	loc_F9FE
00010254 B042                       		cmp.w	d2,d0
00010256 6500                       		bcs.s	loc_FA12
00010258                            
00010258                            loc_F9FE:
00010258 08A9 0003 0022             		bclr	#3,$22(a1)
0001025E 08A8 0003 0022             		bclr	#3,$22(a0)
00010264 4228 0025                  		clr.b	$25(a0)
00010268 7800                       		moveq	#0,d4
0001026A 4E75                       		rts	
0001026C                            ; ===========================================================================
0001026C                            
0001026C                            loc_FA12:
0001026C 3404                       		move.w	d4,d2
0001026E                            		;bsr.w	MvSonicOnPtfm Causes an error in building (Come back to this)
0001026E 7800                       		moveq	#0,d4
00010270 4E75                       		rts	
00010272                            ; ===========================================================================
00010272                            
00010272                            SolidObject71:				; XREF: Obj71_Solid
00010272 4A28 0025                  		tst.b	$25(a0)
00010276 6700 0000                  		beq.w	loc_FAD0
0001027A 3401                       		move.w	d1,d2
0001027C D442                       		add.w	d2,d2
0001027E 43F8 D000                  		lea	($FFFFD000).w,a1
00010282 0829 0001 0022             		btst	#1,$22(a1)
00010288 6600                       		bne.s	loc_FA44
0001028A 3029 0008                  		move.w	8(a1),d0
0001028E 9068 0008                  		sub.w	8(a0),d0
00010292 D041                       		add.w	d1,d0
00010294 6B00                       		bmi.s	loc_FA44
00010296 B042                       		cmp.w	d2,d0
00010298 6500                       		bcs.s	loc_FA58
0001029A                            
0001029A                            loc_FA44:
0001029A 08A9 0003 0022             		bclr	#3,$22(a1)
000102A0 08A8 0003 0022             		bclr	#3,$22(a0)
000102A6 4228 0025                  		clr.b	$25(a0)
000102AA 7800                       		moveq	#0,d4
000102AC 4E75                       		rts	
000102AE                            ; ===========================================================================
000102AE                            
000102AE                            loc_FA58:
000102AE 3404                       		move.w	d4,d2
000102B0                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
000102B0 7800                       		moveq	#0,d4
000102B2 4E75                       		rts	
000102B4                            ; ===========================================================================
000102B4                            
000102B4                            SolidObject2F:				; XREF: Obj2F_Solid
000102B4 43F8 D000                  		lea	($FFFFD000).w,a1
000102B8 4A28 0001                  		tst.b	1(a0)
000102BC 6A00 0000                  		bpl.w	loc_FB92
000102C0 3029 0008                  		move.w	8(a1),d0
000102C4 9068 0008                  		sub.w	8(a0),d0
000102C8 D041                       		add.w	d1,d0
000102CA 6B00 0000                  		bmi.w	loc_FB92
000102CE 3601                       		move.w	d1,d3
000102D0 D643                       		add.w	d3,d3
000102D2 B043                       		cmp.w	d3,d0
000102D4 6200 0000                  		bhi.w	loc_FB92
000102D8 3A00                       		move.w	d0,d5
000102DA 0828 0000 0001             		btst	#0,1(a0)
000102E0 6700                       		beq.s	loc_FA94
000102E2 4645                       		not.w	d5
000102E4 DA43                       		add.w	d3,d5
000102E6                            
000102E6                            loc_FA94:
000102E6 E24D                       		lsr.w	#1,d5
000102E8 7600                       		moveq	#0,d3
000102EA 1632 5000                  		move.b	(a2,d5.w),d3
000102EE 9612                       		sub.b	(a2),d3
000102F0 3A28 000C                  		move.w	$C(a0),d5
000102F4 9A43                       		sub.w	d3,d5
000102F6 1629 0016                  		move.b	$16(a1),d3
000102FA 4883                       		ext.w	d3
000102FC D443                       		add.w	d3,d2
000102FE 3629 000C                  		move.w	$C(a1),d3
00010302 9645                       		sub.w	d5,d3
00010304 5843                       		addq.w	#4,d3
00010306 D642                       		add.w	d2,d3
00010308 6B00 0000                  		bmi.w	loc_FB92
0001030C 3802                       		move.w	d2,d4
0001030E D844                       		add.w	d4,d4
00010310 B644                       		cmp.w	d4,d3
00010312 6400 0000                  		bcc.w	loc_FB92
00010316 6000 0000                  		bra.w	loc_FB0E
0001031A                            ; ===========================================================================
0001031A                            
0001031A                            loc_FAC8:
0001031A 4A28 0001                  		tst.b	1(a0)
0001031E 6A00 0000                  		bpl.w	loc_FB92
00010322                            
00010322                            loc_FAD0:
00010322 43F8 D000                  		lea	($FFFFD000).w,a1
00010326 3029 0008                  		move.w	8(a1),d0
0001032A 9068 0008                  		sub.w	8(a0),d0
0001032E D041                       		add.w	d1,d0
00010330 6B00 0000                  		bmi.w	loc_FB92
00010334 3601                       		move.w	d1,d3
00010336 D643                       		add.w	d3,d3
00010338 B043                       		cmp.w	d3,d0
0001033A 6200 0000                  		bhi.w	loc_FB92
0001033E 1629 0016                  		move.b	$16(a1),d3
00010342 4883                       		ext.w	d3
00010344 D443                       		add.w	d3,d2
00010346 3629 000C                  		move.w	$C(a1),d3
0001034A 9668 000C                  		sub.w	$C(a0),d3
0001034E 5843                       		addq.w	#4,d3
00010350 D642                       		add.w	d2,d3
00010352 6B00 0000                  		bmi.w	loc_FB92
00010356 3802                       		move.w	d2,d4
00010358 D844                       		add.w	d4,d4
0001035A B644                       		cmp.w	d4,d3
0001035C 6400 0000                  		bcc.w	loc_FB92
00010360                            
00010360                            loc_FB0E:
00010360 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010364 6B00 0000                  		bmi.w	loc_FB92
00010368 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0001036E 6400 0000                  		bcc.w	loc_FB92
00010372 4A78 FE08                  		tst.w	($FFFFFE08).w
00010376 6600 0000                  		bne.w	loc_FBAC
0001037A 3A00                       		move.w	d0,d5
0001037C B240                       		cmp.w	d0,d1
0001037E 6400                       		bcc.s	loc_FB36
00010380 D241                       		add.w	d1,d1
00010382 9041                       		sub.w	d1,d0
00010384 3A00                       		move.w	d0,d5
00010386 4445                       		neg.w	d5
00010388                            
00010388                            loc_FB36:
00010388 3203                       		move.w	d3,d1
0001038A B443                       		cmp.w	d3,d2
0001038C 6400                       		bcc.s	loc_FB44
0001038E 5943                       		subq.w	#4,d3
00010390 9644                       		sub.w	d4,d3
00010392 3203                       		move.w	d3,d1
00010394 4441                       		neg.w	d1
00010396                            
00010396                            loc_FB44:
00010396 BA41                       		cmp.w	d1,d5
00010398 6200 0000                  		bhi.w	loc_FBB0
0001039C 0C41 0004                  		cmpi.w	#4,d1
000103A0 6300                       		bls.s	loc_FB8C
000103A2 4A40                       		tst.w	d0
000103A4 6700                       		beq.s	loc_FB70
000103A6 6B00                       		bmi.s	loc_FB5E
000103A8 4A69 0010                  		tst.w	$10(a1)
000103AC 6B00                       		bmi.s	loc_FB70
000103AE 6000                       		bra.s	loc_FB64
000103B0                            ; ===========================================================================
000103B0                            
000103B0                            loc_FB5E:
000103B0 4A69 0010                  		tst.w	$10(a1)
000103B4 6A00                       		bpl.s	loc_FB70
000103B6                            
000103B6                            loc_FB64:
000103B6 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
000103BC 337C 0000 0010             		move.w	#0,$10(a1)
000103C2                            
000103C2                            loc_FB70:
000103C2 9169 0008                  		sub.w	d0,8(a1)
000103C6 0829 0001 0022             		btst	#1,$22(a1)
000103CC 6600                       		bne.s	loc_FB8C
000103CE 08E9 0005 0022             		bset	#5,$22(a1)
000103D4 08E8 0005 0022             		bset	#5,$22(a0)
000103DA 7801                       		moveq	#1,d4
000103DC 4E75                       		rts	
000103DE                            ; ===========================================================================
000103DE                            
000103DE                            loc_FB8C:
000103DE 6100                       		bsr.s	loc_FBA0
000103E0 7801                       		moveq	#1,d4
000103E2 4E75                       		rts	
000103E4                            ; ===========================================================================
000103E4                            
000103E4                            loc_FB92:
000103E4 0828 0005 0022             		btst	#5,$22(a0)
000103EA 6700                       		beq.s	loc_FBAC
000103EC 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
000103F2                            
000103F2                            loc_FBA0:
000103F2 08A8 0005 0022             		bclr	#5,$22(a0)
000103F8 08A9 0005 0022             		bclr	#5,$22(a1)
000103FE                            
000103FE                            loc_FBAC:
000103FE 7800                       		moveq	#0,d4
00010400 4E75                       		rts	
00010402                            ; ===========================================================================
00010402                            
00010402                            loc_FBB0:
00010402 4A43                       		tst.w	d3
00010404 6B00                       		bmi.s	loc_FBBC
00010406 0C43 0010                  		cmpi.w	#$10,d3
0001040A 6500                       		bcs.s	loc_FBEE
0001040C 60D6                       		bra.s	loc_FB92
0001040E                            ; ===========================================================================
0001040E                            
0001040E                            loc_FBBC:
0001040E 4A69 0012                  		tst.w	$12(a1)
00010412 6700                       		beq.s	loc_FBD6
00010414 6A00                       		bpl.s	loc_FBD2
00010416 4A43                       		tst.w	d3
00010418 6A00                       		bpl.s	loc_FBD2
0001041A 9769 000C                  		sub.w	d3,$C(a1)
0001041E 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010424                            
00010424                            loc_FBD2:
00010424 78FF                       		moveq	#-1,d4
00010426 4E75                       		rts	
00010428                            ; ===========================================================================
00010428                            
00010428                            loc_FBD6:
00010428 0829 0001 0022             		btst	#1,$22(a1)
0001042E 66F4                       		bne.s	loc_FBD2
00010430 2F08                       		move.l	a0,-(sp)
00010432 2049                       		movea.l	a1,a0
00010434 4EB9 0000 0000             		jsr	KillSonic
0001043A 205F                       		movea.l	(sp)+,a0
0001043C 78FF                       		moveq	#-1,d4
0001043E 4E75                       		rts	
00010440                            ; ===========================================================================
00010440                            
00010440                            loc_FBEE:
00010440 5943                       		subq.w	#4,d3
00010442 7200                       		moveq	#0,d1
00010444 1228 0019                  		move.b	$19(a0),d1
00010448 3401                       		move.w	d1,d2
0001044A D442                       		add.w	d2,d2
0001044C D269 0008                  		add.w	8(a1),d1
00010450 9268 0008                  		sub.w	8(a0),d1
00010454 6B00                       		bmi.s	loc_FC28
00010456 B242                       		cmp.w	d2,d1
00010458 6400                       		bcc.s	loc_FC28
0001045A 4A69 0012                  		tst.w	$12(a1)
0001045E 6B00                       		bmi.s	loc_FC28
00010460 9769 000C                  		sub.w	d3,$C(a1)
00010464 5369 000C                  		subq.w	#1,$C(a1)
00010468 6100                       		bsr.s	sub_FC2C
0001046A 117C 0002 0025             		move.b	#2,$25(a0)
00010470 08E8 0003 0022             		bset	#3,$22(a0)
00010476 78FF                       		moveq	#-1,d4
00010478 4E75                       		rts	
0001047A                            ; ===========================================================================
0001047A                            
0001047A                            loc_FC28:
0001047A 7800                       		moveq	#0,d4
0001047C 4E75                       		rts	
0001047E                            ; End of function SolidObject
0001047E                            
0001047E                            
0001047E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001047E                            
0001047E                            
0001047E                            sub_FC2C:				; XREF: SolidObject
0001047E 0829 0003 0022             		btst	#3,$22(a1)
00010484 6700                       		beq.s	loc_FC4E
00010486 7000                       		moveq	#0,d0
00010488 1029 003D                  		move.b	$3D(a1),d0
0001048C ED48                       		lsl.w	#6,d0
0001048E 0680 00FF D000             		addi.l	#$FFD000,d0
00010494 2440                       		movea.l	d0,a2
00010496 08AA 0003 0022             		bclr	#3,$22(a2)
0001049C 422A 0025                  		clr.b	$25(a2)
000104A0                            
000104A0                            loc_FC4E:
000104A0 3008                       		move.w	a0,d0
000104A2 0440 D000                  		subi.w	#-$3000,d0
000104A6 EC48                       		lsr.w	#6,d0
000104A8 0240 007F                  		andi.w	#$7F,d0
000104AC 1340 003D                  		move.b	d0,$3D(a1)
000104B0 137C 0000 0026             		move.b	#0,$26(a1)
000104B6 337C 0000 0012             		move.w	#0,$12(a1)
000104BC 3369 0010 0014             		move.w	$10(a1),$14(a1)
000104C2 0829 0001 0022             		btst	#1,$22(a1)
000104C8 6700                       		beq.s	loc_FC84
000104CA 2F08                       		move.l	a0,-(sp)
000104CC 2049                       		movea.l	a1,a0
000104CE 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000104D4 205F                       		movea.l	(sp)+,a0
000104D6                            
000104D6                            loc_FC84:
000104D6 08E9 0003 0022             		bset	#3,$22(a1)
000104DC 08E8 0003 0022             		bset	#3,$22(a0)
000104E2 4E75                       		rts	
000104E4                            ; End of function sub_FC2C
000104E4                            
000104E4                            ; ===========================================================================
000104E4                            ; ---------------------------------------------------------------------------
000104E4                            ; Object 51 - smashable	green block (MZ)
000104E4                            ; ---------------------------------------------------------------------------
000104E4                            
000104E4                            Obj51:					; XREF: Obj_Index
000104E4 7000                       		moveq	#0,d0
000104E6 1028 0024                  		move.b	$24(a0),d0
000104EA 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
000104EE 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
000104F2 6000 FA14                  		bra.w	MarkObjGone
000104F6                            ; ===========================================================================
000104F6 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
000104F8 0000                       		dc.w Obj51_Solid-Obj51_Index
000104FA 0000                       		dc.w Obj51_Display-Obj51_Index
000104FC                            ; ===========================================================================
000104FC                            
000104FC                            Obj51_Main:				; XREF: Obj51_Index
000104FC 5428 0024                  		addq.b	#2,$24(a0)
00010500 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010508 317C 42B8 0002             		move.w	#$42B8,2(a0)
0001050E 117C 0004 0001             		move.b	#4,1(a0)
00010514 117C 0010 0019             		move.b	#$10,$19(a0)
0001051A 117C 0004 0018             		move.b	#4,$18(a0)
00010520 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010526                            
00010526                            Obj51_Solid:				; XREF: Obj51_Index
00010526 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0001052C 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010532 323C 001B                  		move.w	#$1B,d1
00010536 343C 0010                  		move.w	#$10,d2
0001053A 363C 0011                  		move.w	#$11,d3
0001053E 3828 0008                  		move.w	8(a0),d4
00010542 6100 FCEC                  		bsr.w	SolidObject
00010546 0828 0003 0022             		btst	#3,$22(a0)
0001054C 6600                       		bne.s	Obj51_Smash
0001054E                            
0001054E                            locret_FCFC:
0001054E 4E75                       		rts	
00010550                            ; ===========================================================================
00010550                            
00010550                            Obj51_Smash:				; XREF: Obj51_Solid
00010550 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010556 66F6                       		bne.s	locret_FCFC	; if not, branch
00010558 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0001055E 08E9 0002 0022             		bset	#2,$22(a1)
00010564 137C 000E 0016             		move.b	#$E,$16(a1)
0001056A 137C 0007 0017             		move.b	#7,$17(a1)
00010570 137C 0002 001C             		move.b	#2,$1C(a1)
00010576 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0001057C 08E9 0001 0022             		bset	#1,$22(a1)
00010582 08A9 0003 0022             		bclr	#3,$22(a1)
00010588 137C 0002 0024             		move.b	#2,$24(a1)
0001058E 08A8 0003 0022             		bclr	#3,$22(a0)
00010594 4228 0025                  		clr.b	$25(a0)
00010598 117C 0001 001A             		move.b	#1,$1A(a0)
0001059E 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
000105A4 7203                       		moveq	#3,d1		; set number of	fragments to 4
000105A6 343C 0038                  		move.w	#$38,d2
000105AA 6100 D45C                  		bsr.w	SmashObject
000105AE 6100 DD36                  		bsr.w	SingleObjLoad
000105B2 6600                       		bne.s	Obj51_Display
000105B4 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000105B8 3368 0008 0008             		move.w	8(a0),8(a1)
000105BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000105C4 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
000105C8 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
000105CC 0C42 0006                  		cmpi.w	#6,d2
000105D0 6500                       		bcs.s	Obj51_Bonus
000105D2 7406                       		moveq	#6,d2
000105D4                            
000105D4                            Obj51_Bonus:
000105D4 7000                       		moveq	#0,d0
000105D6 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
000105DA 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
000105E0 6500                       		bcs.s	loc_FD98	; if not, branch
000105E2 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
000105E6 740A                       		moveq	#10,d2
000105E8                            
000105E8                            loc_FD98:
000105E8 4EB9 0000 0000             		jsr	AddPoints
000105EE E24A                       		lsr.w	#1,d2
000105F0 1342 001A                  		move.b	d2,$1A(a1)
000105F4                            
000105F4                            Obj51_Display:				; XREF: Obj51_Index
000105F4 6100 D844                  		bsr.w	SpeedToPos
000105F8 0668 0038 0012             		addi.w	#$38,$12(a0)
000105FE 6100 D860                  		bsr.w	DisplaySprite
00010602 4A28 0001                  		tst.b	1(a0)
00010606 6A00 D894                  		bpl.w	DeleteObject
0001060A 4E75                       		rts	
0001060C                            ; ===========================================================================
0001060C FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010610 FF00 FF00                  		dc.w $FF00, $FF00
00010614 0200 FE00                  		dc.w $200, $FE00
00010618 0100 FF00                  		dc.w $100, $FF00
0001061C                            
0001061C 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010624                            ; ---------------------------------------------------------------------------
00010624                            ; Sprite mappings - smashable green block (MZ)
00010624                            ; ---------------------------------------------------------------------------
00010624                            Map_obj51:
00010624                            	include "_maps\obj51.asm"
00010624                            ; ---------------------------------------------------------------------------
00010624                            ; Sprite mappings - smashable green block (MZ)
00010624                            ; ---------------------------------------------------------------------------
00010624 0000                       		dc.w byte_FDD8-Map_obj51
00010626 0000                       		dc.w byte_FDE3-Map_obj51
00010628 02                         byte_FDD8:	dc.b 2
00010629 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0001062E 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010633 04                         byte_FDE3:	dc.b 4
00010634 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010639 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0001063E F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010643 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010648                            		even
00010648                            		even
00010648                            
00010648                            ; ===========================================================================
00010648                            ; ---------------------------------------------------------------------------
00010648                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010648                            ; ---------------------------------------------------------------------------
00010648                            
00010648                            Obj52:					; XREF: Obj_Index
00010648 7000                       		moveq	#0,d0
0001064A 1028 0024                  		move.b	$24(a0),d0
0001064E 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010652 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010656                            ; ===========================================================================
00010656 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010658 0000                       		dc.w Obj52_Platform-Obj52_Index
0001065A 0000                       		dc.w Obj52_StandOn-Obj52_Index
0001065C                            
0001065C 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0001065E 2001                       		dc.b $20, 1
00010660 2002                       		dc.b $20, 2
00010662 4003                       		dc.b $40, 3
00010664 3004                       		dc.b $30, 4
00010666                            ; ===========================================================================
00010666                            
00010666                            Obj52_Main:				; XREF: Obj52_Index
00010666 5428 0024                  		addq.b	#2,$24(a0)
0001066A 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010672 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010678 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001067E 6600                       		bne.s	loc_FE44
00010680 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010688 317C 43BC 0002             		move.w	#$43BC,2(a0)
0001068E 117C 0007 0016             		move.b	#7,$16(a0)
00010694                            
00010694                            loc_FE44:
00010694 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0001069A 6600                       		bne.s	loc_FE60
0001069C 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
000106A2 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
000106A8 6700                       		beq.s	loc_FE60	; if yes, branch
000106AA 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
000106B0                            
000106B0                            loc_FE60:
000106B0 117C 0004 0001             		move.b	#4,1(a0)
000106B6 7000                       		moveq	#0,d0
000106B8 1028 0028                  		move.b	$28(a0),d0
000106BC E648                       		lsr.w	#3,d0
000106BE 0240 001E                  		andi.w	#$1E,d0
000106C2 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
000106C6 115A 0019                  		move.b	(a2)+,$19(a0)
000106CA 115A 001A                  		move.b	(a2)+,$1A(a0)
000106CE 117C 0004 0018             		move.b	#4,$18(a0)
000106D4 3168 0008 0030             		move.w	8(a0),$30(a0)
000106DA 3168 000C 0032             		move.w	$C(a0),$32(a0)
000106E0 0228 000F 0028             		andi.b	#$F,$28(a0)
000106E6                            
000106E6                            Obj52_Platform:				; XREF: Obj52_Index
000106E6 6100 0000                  		bsr.w	Obj52_Move
000106EA 7200                       		moveq	#0,d1
000106EC 1228 0019                  		move.b	$19(a0),d1
000106F0 4EB9 0000 7A9A             		jsr	(PlatformObject).l
000106F6 6000                       		bra.s	Obj52_ChkDel
000106F8                            ; ===========================================================================
000106F8                            
000106F8                            Obj52_StandOn:				; XREF: Obj52_Index
000106F8 7200                       		moveq	#0,d1
000106FA 1228 0019                  		move.b	$19(a0),d1
000106FE 4EB9 0000 7C0E             		jsr	(ExitPlatform).l
00010704 3F28 0008                  		move.w	8(a0),-(sp)
00010708 6100 0000                  		bsr.w	Obj52_Move
0001070C 341F                       		move.w	(sp)+,d2
0001070E 4EB9 0000 8178             		jsr	(MvSonicOnPtfm2).l
00010714                            
00010714                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010714 3028 0030                  		move.w	$30(a0),d0
00010718 0240 FF80                  		andi.w	#$FF80,d0
0001071C 3238 F700                  		move.w	($FFFFF700).w,d1
00010720 0441 0080                  		subi.w	#$80,d1
00010724 0241 FF80                  		andi.w	#$FF80,d1
00010728 9041                       		sub.w	d1,d0
0001072A 0C40 0280                  		cmpi.w	#$280,d0
0001072E 6200 D76C                  		bhi.w	DeleteObject
00010732 6000 D72C                  		bra.w	DisplaySprite
00010736                            ; ===========================================================================
00010736                            
00010736                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
00010736 7000                       		moveq	#0,d0
00010738 1028 0028                  		move.b	$28(a0),d0
0001073C 0240 000F                  		andi.w	#$F,d0
00010740 D040                       		add.w	d0,d0
00010742 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
00010746 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0001074A                            ; ===========================================================================
0001074A 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0001074E 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010752 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
00010756 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0001075A 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0001075E 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010760                            ; ===========================================================================
00010760                            
00010760                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010760 4E75                       		rts	
00010762                            ; ===========================================================================
00010762                            
00010762                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010762 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010766 323C 0060                  		move.w	#$60,d1
0001076A 0828 0000 0022             		btst	#0,$22(a0)
00010770 6700                       		beq.s	loc_FF26
00010772 4440                       		neg.w	d0
00010774 D041                       		add.w	d1,d0
00010776                            
00010776                            loc_FF26:
00010776 3228 0030                  		move.w	$30(a0),d1
0001077A 9240                       		sub.w	d0,d1
0001077C 3141 0008                  		move.w	d1,8(a0)
00010780 4E75                       		rts	
00010782                            ; ===========================================================================
00010782                            
00010782                            Obj52_Type02:				; XREF: Obj52_TypeIndex
00010782 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00010788 6600                       		bne.s	Obj52_02_Wait
0001078A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001078E                            
0001078E                            Obj52_02_Wait:
0001078E 4E75                       		rts	
00010790                            ; ===========================================================================
00010790                            
00010790                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00010790 7600                       		moveq	#0,d3
00010792 1628 0019                  		move.b	$19(a0),d3
00010796 6100 0000                  		bsr.w	ObjHitWallRight
0001079A 4A41                       		tst.w	d1		; has the platform hit a wall?
0001079C 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0001079E 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000107A2 3168 0008 0030             		move.w	8(a0),$30(a0)
000107A8 4E75                       		rts	
000107AA                            ; ===========================================================================
000107AA                            
000107AA                            Obj52_03_End:
000107AA 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000107AE 4E75                       		rts	
000107B0                            ; ===========================================================================
000107B0                            
000107B0                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000107B0 7600                       		moveq	#0,d3
000107B2 1628 0019                  		move.b	$19(a0),d3
000107B6 6100 0000                  		bsr.w	ObjHitWallRight
000107BA 4A41                       		tst.w	d1		; has the platform hit a wall?
000107BC 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000107BE 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000107C2 3168 0008 0030             		move.w	8(a0),$30(a0)
000107C8 4E75                       		rts	
000107CA                            ; ===========================================================================
000107CA                            
000107CA                            Obj52_05_End:
000107CA 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000107CE 4E75                       		rts	
000107D0                            ; ===========================================================================
000107D0                            
000107D0                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000107D0 6100 D668                  		bsr.w	SpeedToPos
000107D4 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000107DA 6100 0000                  		bsr.w	ObjHitFloor
000107DE 4A41                       		tst.w	d1		; has platform hit the floor?
000107E0 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000107E4 D368 000C                  		add.w	d1,$C(a0)
000107E8 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000107EC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000107F0                            
000107F0                            locret_FFA0:
000107F0 4E75                       		rts	
000107F2                            ; ===========================================================================
000107F2                            
000107F2                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000107F2 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000107F6 6700                       		beq.s	Obj52_07_ChkDel
000107F8 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000107FC                            
000107FC                            Obj52_07_ChkDel:
000107FC 588F                       		addq.l	#4,sp
000107FE 3028 0030                  		move.w	$30(a0),d0
00010802 0240 FF80                  		andi.w	#$FF80,d0
00010806 3238 F700                  		move.w	($FFFFF700).w,d1
0001080A 0441 0080                  		subi.w	#$80,d1
0001080E 0241 FF80                  		andi.w	#$FF80,d1
00010812 9041                       		sub.w	d1,d0
00010814 0C40 0280                  		cmpi.w	#$280,d0
00010818 6200 D682                  		bhi.w	DeleteObject
0001081C 4E75                       		rts	
0001081E                            ; ===========================================================================
0001081E                            
0001081E                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0001081E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010822 323C 0080                  		move.w	#$80,d1
00010826 0828 0000 0022             		btst	#0,$22(a0)
0001082C 6700                       		beq.s	loc_FFE2
0001082E 4440                       		neg.w	d0
00010830 D041                       		add.w	d1,d0
00010832                            
00010832                            loc_FFE2:
00010832 3228 0032                  		move.w	$32(a0),d1
00010836 9240                       		sub.w	d0,d1
00010838 3141 000C                  		move.w	d1,$C(a0)
0001083C 4E75                       		rts	
0001083E                            ; ===========================================================================
0001083E                            
0001083E                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0001083E 7600                       		moveq	#0,d3
00010840 1628 0019                  		move.b	$19(a0),d3
00010844 D643                       		add.w	d3,d3
00010846 7208                       		moveq	#8,d1
00010848 0828 0000 0022             		btst	#0,$22(a0)
0001084E 6700                       		beq.s	loc_10004
00010850 4441                       		neg.w	d1
00010852 4443                       		neg.w	d3
00010854                            
00010854                            loc_10004:
00010854 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00010858 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0001085A 3028 0008                  		move.w	8(a0),d0
0001085E 9068 0030                  		sub.w	$30(a0),d0
00010862 B043                       		cmp.w	d3,d0
00010864 6700                       		beq.s	Obj52_0A_Wait
00010866 D368 0008                  		add.w	d1,8(a0)	; move platform
0001086A 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010870 4E75                       		rts	
00010872                            ; ===========================================================================
00010872                            
00010872                            Obj52_0A_Wait:
00010872 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
00010876 6600                       		bne.s	locret_1002E	; if time remains, branch
00010878 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0001087E                            
0001087E                            locret_1002E:
0001087E 4E75                       		rts	
00010880                            ; ===========================================================================
00010880                            
00010880                            Obj52_0A_Back:
00010880 3028 0008                  		move.w	8(a0),d0
00010884 9068 0030                  		sub.w	$30(a0),d0
00010888 6700                       		beq.s	Obj52_0A_Reset
0001088A 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0001088E 4E75                       		rts	
00010890                            ; ===========================================================================
00010890                            
00010890                            Obj52_0A_Reset:
00010890 4268 0036                  		clr.w	$36(a0)
00010894 5328 0028                  		subq.b	#1,$28(a0)
00010898 4E75                       		rts	
0001089A                            ; ===========================================================================
0001089A                            ; ---------------------------------------------------------------------------
0001089A                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001089A                            ; ---------------------------------------------------------------------------
0001089A                            Map_obj52:
0001089A                            	include "_maps\obj52mz.asm"
0001089A                            ; ---------------------------------------------------------------------------
0001089A                            ; Sprite mappings - moving blocks (MZ, SBZ)
0001089A                            ; ---------------------------------------------------------------------------
0001089A 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0001089E 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000108A2 0000                       		dc.w byte_1008F-Map_obj52
000108A4 01                         byte_10054:	dc.b 1
000108A5 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000108AA 02                         byte_1005A:	dc.b 2
000108AB F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000108B0 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000108B5 04                         byte_10065:	dc.b 4
000108B6 F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000108BB 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000108C0 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000108C5 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000108CA 04                         byte_1007A:	dc.b 4
000108CB F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000108D0 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000108D5 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000108DA F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000108DF 03                         byte_1008F:	dc.b 3
000108E0 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000108E5 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000108EA F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000108F0 00                         		even
000108F0 00                         		even
000108F0                            
000108F0                            ; ---------------------------------------------------------------------------
000108F0                            ; Sprite mappings - moving block (LZ)
000108F0                            ; ---------------------------------------------------------------------------
000108F0                            Map_obj52a:
000108F0                            	include "_maps\obj52lz.asm"
000108F0                            ; ---------------------------------------------------------------------------
000108F0                            ; Sprite mappings - moving block (LZ)
000108F0                            ; ---------------------------------------------------------------------------
000108F0 0000                       		dc.w byte_100A2-Map_obj52a
000108F2 01                         byte_100A2:	dc.b 1
000108F3 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000108F8                            		even
000108F8                            		even
000108F8                            
000108F8                            ; ===========================================================================
000108F8                            ; ---------------------------------------------------------------------------
000108F8                            ; Object 55 - Basaran enemy (MZ)
000108F8                            ; ---------------------------------------------------------------------------
000108F8                            
000108F8                            Obj55:					; XREF: Obj_Index
000108F8 7000                       		moveq	#0,d0
000108FA 1028 0024                  		move.b	$24(a0),d0
000108FE 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010902 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
00010906                            ; ===========================================================================
00010906 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
00010908 0000                       		dc.w Obj55_Action-Obj55_Index
0001090A                            ; ===========================================================================
0001090A                            
0001090A                            Obj55_Main:				; XREF: Obj55_Index
0001090A 5428 0024                  		addq.b	#2,$24(a0)
0001090E 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
00010916 317C 84B8 0002             		move.w	#$84B8,2(a0)
0001091C 117C 0004 0001             		move.b	#4,1(a0)
00010922 117C 000C 0016             		move.b	#$C,$16(a0)
00010928 117C 0002 0018             		move.b	#2,$18(a0)
0001092E 117C 000B 0020             		move.b	#$B,$20(a0)
00010934 117C 0010 0019             		move.b	#$10,$19(a0)
0001093A                            
0001093A                            Obj55_Action:				; XREF: Obj55_Index
0001093A 7000                       		moveq	#0,d0
0001093C 1028 0025                  		move.b	$25(a0),d0
00010940 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010944 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00010948 43F9 0000 0000             		lea	(Ani_obj55).l,a1
0001094E 6100 A58A                  		bsr.w	AnimateSprite
00010952 6000 F5B4                  		bra.w	MarkObjGone
00010956                            ; ===========================================================================
00010956 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00010958 0000                       		dc.w Obj55_DropFly-Obj55_Index2
0001095A 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
0001095C 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
0001095E                            ; ===========================================================================
0001095E                            
0001095E                            Obj55_ChkDrop:				; XREF: Obj55_Index2
0001095E 343C 0080                  		move.w	#$80,d2
00010962 6100 0000                  		bsr.w	Obj55_ChkSonic
00010966 6400                       		bcc.s	Obj55_NoDrop
00010968 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001096C 3140 0036                  		move.w	d0,$36(a0)
00010970 9068 000C                  		sub.w	$C(a0),d0
00010974 6500                       		bcs.s	Obj55_NoDrop
00010976 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0001097A 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
0001097C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00010980 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
00010982 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010986 D007                       		add.b	d7,d0
00010988 0200 0007                  		andi.b	#7,d0
0001098C 6600                       		bne.s	Obj55_NoDrop
0001098E 117C 0001 001C             		move.b	#1,$1C(a0)
00010994 5428 0025                  		addq.b	#2,$25(a0)
00010998                            
00010998                            Obj55_NoDrop:
00010998 4E75                       		rts	
0001099A                            ; ===========================================================================
0001099A                            
0001099A                            Obj55_DropFly:				; XREF: Obj55_Index2
0001099A 6100 D49E                  		bsr.w	SpeedToPos
0001099E 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000109A4 343C 0080                  		move.w	#$80,d2
000109A8 6100 0000                  		bsr.w	Obj55_ChkSonic
000109AC 3028 0036                  		move.w	$36(a0),d0
000109B0 9068 000C                  		sub.w	$C(a0),d0
000109B4 6500                       		bcs.s	Obj55_ChkDel
000109B6 0C40 0010                  		cmpi.w	#$10,d0
000109BA 6400                       		bcc.s	locret_10180
000109BC 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000109C0 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000109C6 117C 0002 001C             		move.b	#2,$1C(a0)
000109CC 5428 0025                  		addq.b	#2,$25(a0)
000109D0                            
000109D0                            locret_10180:
000109D0 4E75                       		rts	
000109D2                            ; ===========================================================================
000109D2                            
000109D2                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000109D2 4A28 0001                  		tst.b	1(a0)
000109D6 6A00 D4C4                  		bpl.w	DeleteObject
000109DA 4E75                       		rts	
000109DC                            ; ===========================================================================
000109DC                            
000109DC                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000109DC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000109E0 0200 000F                  		andi.b	#$F,d0
000109E4 6600                       		bne.s	loc_101A0
000109E6 303C 00C0                  		move.w	#$C0,d0
000109EA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play flapping sound
000109F0                            
000109F0                            loc_101A0:
000109F0 6100 D448                  		bsr.w	SpeedToPos
000109F4 3038 D008                  		move.w	($FFFFD008).w,d0
000109F8 9068 0008                  		sub.w	8(a0),d0
000109FC 6400                       		bcc.s	loc_101B0
000109FE 4440                       		neg.w	d0
00010A00                            
00010A00                            loc_101B0:
00010A00 0C40 0080                  		cmpi.w	#$80,d0
00010A04 6500                       		bcs.s	locret_101C6
00010A06 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010A0A D007                       		add.b	d7,d0
00010A0C 0200 0007                  		andi.b	#7,d0
00010A10 6600                       		bne.s	locret_101C6
00010A12 5428 0025                  		addq.b	#2,$25(a0)
00010A16                            
00010A16                            locret_101C6:
00010A16 4E75                       		rts	
00010A18                            ; ===========================================================================
00010A18                            
00010A18                            Obj55_FlyUp:				; XREF: Obj55_Index2
00010A18 6100 D420                  		bsr.w	SpeedToPos
00010A1C 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010A22 6100 0000                  		bsr.w	ObjHitCeiling
00010A26 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00010A28 6A00                       		bpl.s	locret_101F4	; if not, branch
00010A2A 9368 000C                  		sub.w	d1,$C(a0)
00010A2E 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010A34 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00010A38 4268 0012                  		clr.w	$12(a0)
00010A3C 4228 001C                  		clr.b	$1C(a0)
00010A40 4228 0025                  		clr.b	$25(a0)
00010A44                            
00010A44                            locret_101F4:
00010A44 4E75                       		rts	
00010A46                            ; ===========================================================================
00010A46                            
00010A46                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
00010A46 323C 0100                  		move.w	#$100,d1
00010A4A 08E8 0000 0022             		bset	#0,$22(a0)
00010A50 3038 D008                  		move.w	($FFFFD008).w,d0
00010A54 9068 0008                  		sub.w	8(a0),d0
00010A58 6400                       		bcc.s	loc_10214
00010A5A 4440                       		neg.w	d0
00010A5C 4441                       		neg.w	d1
00010A5E 08A8 0000 0022             		bclr	#0,$22(a0)
00010A64                            
00010A64                            loc_10214:
00010A64 B042                       		cmp.w	d2,d0
00010A66 4E75                       		rts	
00010A68                            ; ===========================================================================
00010A68 6100 D3D0                  		bsr.w	SpeedToPos
00010A6C 6100 D3F2                  		bsr.w	DisplaySprite
00010A70 4A28 0001                  		tst.b	1(a0)
00010A74 6A00 D426                  		bpl.w	DeleteObject
00010A78 4E75                       		rts	
00010A7A                            ; ===========================================================================
00010A7A                            Ani_obj55:
00010A7A                            	include "_anim\obj55.asm"
00010A7A                            ; ---------------------------------------------------------------------------
00010A7A                            ; Animation script - Basaran enemy
00010A7A                            ; ---------------------------------------------------------------------------
00010A7A 0000                       		dc.w byte_10230-Ani_obj55
00010A7C 0000                       		dc.w byte_10234-Ani_obj55
00010A7E 0000                       		dc.w byte_10238-Ani_obj55
00010A80 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
00010A84 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00010A88 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00010A8E                            		even
00010A8E                            		even
00010A8E                            
00010A8E                            ; ---------------------------------------------------------------------------
00010A8E                            ; Sprite mappings - Basaran enemy (MZ)
00010A8E                            ; ---------------------------------------------------------------------------
00010A8E                            Map_obj55:
00010A8E                            	include "_maps\obj55.asm"
00010A8E                            ; ---------------------------------------------------------------------------
00010A8E                            ; Sprite mappings - Basaran enemy (MZ)
00010A8E                            ; ---------------------------------------------------------------------------
00010A8E 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
00010A92 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
00010A96 01                         byte_10246:	dc.b 1
00010A97 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00010A9C 03                         byte_1024C:	dc.b 3
00010A9D F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
00010AA2 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
00010AA7 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00010AAC 04                         byte_1025C:	dc.b 4
00010AAD F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
00010AB2 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
00010AB7 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010ABC 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010AC1 04                         byte_10271:	dc.b 4
00010AC2 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
00010AC7 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010ACC 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010AD1 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
00010AD6                            		even
00010AD6                            		even
00010AD6                            
00010AD6                            ; ===========================================================================
00010AD6                            ; ---------------------------------------------------------------------------
00010AD6                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
00010AD6                            ; ---------------------------------------------------------------------------
00010AD6                            
00010AD6                            Obj56:					; XREF: Obj_Index
00010AD6 7000                       		moveq	#0,d0
00010AD8 1028 0024                  		move.b	$24(a0),d0
00010ADC 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010AE0 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010AE4                            ; ===========================================================================
00010AE4 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
00010AE6 0000                       		dc.w Obj56_Action-Obj56_Index
00010AE8                            
00010AE8 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
00010AEA 2020                       		dc.b  $20, $20
00010AEC 1020                       		dc.b  $10, $20
00010AEE 201A                       		dc.b  $20, $1A
00010AF0 1027                       		dc.b  $10, $27
00010AF2 1010                       		dc.b  $10, $10
00010AF4 0820                       		dc.b	8, $20
00010AF6 4010                       		dc.b  $40, $10
00010AF8                            ; ===========================================================================
00010AF8                            
00010AF8                            Obj56_Main:				; XREF: Obj56_Index
00010AF8 5428 0024                  		addq.b	#2,$24(a0)
00010AFC 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010B04 317C 4000 0002             		move.w	#$4000,2(a0)
00010B0A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010B10 6600                       		bne.s	loc_102C8
00010B12 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00010B18                            
00010B18                            loc_102C8:
00010B18 117C 0004 0001             		move.b	#4,1(a0)
00010B1E 117C 0003 0018             		move.b	#3,$18(a0)
00010B24 7000                       		moveq	#0,d0
00010B26 1028 0028                  		move.b	$28(a0),d0
00010B2A E648                       		lsr.w	#3,d0
00010B2C 0240 000E                  		andi.w	#$E,d0
00010B30 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010B34 115A 0019                  		move.b	(a2)+,$19(a0)
00010B38 1152 0016                  		move.b	(a2),$16(a0)
00010B3C E248                       		lsr.w	#1,d0
00010B3E 1140 001A                  		move.b	d0,$1A(a0)
00010B42 3168 0008 0034             		move.w	8(a0),$34(a0)
00010B48 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010B4E 7000                       		moveq	#0,d0
00010B50 1012                       		move.b	(a2),d0
00010B52 D040                       		add.w	d0,d0
00010B54 3140 003A                  		move.w	d0,$3A(a0)
00010B58 7000                       		moveq	#0,d0
00010B5A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010B60 6700                       		beq.s	loc_10332
00010B62 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
00010B66 0240 000F                  		andi.w	#$F,d0
00010B6A 5140                       		subq.w	#8,d0
00010B6C 6500                       		bcs.s	loc_10332
00010B6E E548                       		lsl.w	#2,d0
00010B70 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010B74 45F2 0000                  		lea	(a2,d0.w),a2
00010B78 4A52                       		tst.w	(a2)
00010B7A 6A00                       		bpl.s	loc_10332
00010B7C 0868 0000 0022             		bchg	#0,$22(a0)
00010B82                            
00010B82                            loc_10332:
00010B82 1028 0028                  		move.b	$28(a0),d0
00010B86 6A00                       		bpl.s	Obj56_Action
00010B88 0200 000F                  		andi.b	#$F,d0
00010B8C 1140 003C                  		move.b	d0,$3C(a0)
00010B90 117C 0005 0028             		move.b	#5,$28(a0)
00010B96 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00010B9C 6600                       		bne.s	Obj56_ChkGone
00010B9E 117C 000C 0028             		move.b	#$C,$28(a0)
00010BA4 317C 0080 003A             		move.w	#$80,$3A(a0)
00010BAA                            
00010BAA                            Obj56_ChkGone:
00010BAA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010BAE 7000                       		moveq	#0,d0
00010BB0 1028 0023                  		move.b	$23(a0),d0
00010BB4 6700                       		beq.s	Obj56_Action
00010BB6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010BBC 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010BC2 6700                       		beq.s	Obj56_Action
00010BC4 5228 0028                  		addq.b	#1,$28(a0)
00010BC8 4268 003A                  		clr.w	$3A(a0)
00010BCC                            
00010BCC                            Obj56_Action:				; XREF: Obj56_Index
00010BCC 3F28 0008                  		move.w	8(a0),-(sp)
00010BD0 7000                       		moveq	#0,d0
00010BD2 1028 0028                  		move.b	$28(a0),d0	; get object type
00010BD6 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00010BDA D040                       		add.w	d0,d0
00010BDC 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010BE0 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010BE4 381F                       		move.w	(sp)+,d4
00010BE6 4A28 0001                  		tst.b	1(a0)
00010BEA 6A00                       		bpl.s	Obj56_ChkDel
00010BEC 7200                       		moveq	#0,d1
00010BEE 1228 0019                  		move.b	$19(a0),d1
00010BF2 0641 000B                  		addi.w	#$B,d1
00010BF6 7400                       		moveq	#0,d2
00010BF8 1428 0016                  		move.b	$16(a0),d2
00010BFC 3602                       		move.w	d2,d3
00010BFE 5243                       		addq.w	#1,d3
00010C00 6100 F62E                  		bsr.w	SolidObject
00010C04                            
00010C04                            Obj56_ChkDel:
00010C04 3028 0034                  		move.w	$34(a0),d0
00010C08 0240 FF80                  		andi.w	#$FF80,d0
00010C0C 3238 F700                  		move.w	($FFFFF700).w,d1
00010C10 0441 0080                  		subi.w	#$80,d1
00010C14 0241 FF80                  		andi.w	#$FF80,d1
00010C18 9041                       		sub.w	d1,d0
00010C1A 0C40 0280                  		cmpi.w	#$280,d0
00010C1E 6200 D27C                  		bhi.w	DeleteObject
00010C22 6000 D23C                  		bra.w	DisplaySprite
00010C26                            ; ===========================================================================
00010C26 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00010C2A 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010C2E 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010C32 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
00010C36 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00010C3A 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010C3E 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010C42                            ; ===========================================================================
00010C42                            
00010C42                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010C42 4E75                       		rts	
00010C44                            ; ===========================================================================
00010C44                            
00010C44                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010C44 323C 0040                  		move.w	#$40,d1
00010C48 7000                       		moveq	#0,d0
00010C4A 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010C4E 6000                       		bra.s	Obj56_Move_LR
00010C50                            ; ===========================================================================
00010C50                            
00010C50                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010C50 323C 0080                  		move.w	#$80,d1
00010C54 7000                       		moveq	#0,d0
00010C56 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C5A                            
00010C5A                            Obj56_Move_LR:
00010C5A 0828 0000 0022             		btst	#0,$22(a0)
00010C60 6700                       		beq.s	loc_10416
00010C62 4440                       		neg.w	d0
00010C64 D041                       		add.w	d1,d0
00010C66                            
00010C66                            loc_10416:
00010C66 3228 0034                  		move.w	$34(a0),d1
00010C6A 9240                       		sub.w	d0,d1
00010C6C 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010C70 4E75                       		rts	
00010C72                            ; ===========================================================================
00010C72                            
00010C72                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010C72 323C 0040                  		move.w	#$40,d1
00010C76 7000                       		moveq	#0,d0
00010C78 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010C7C 6000                       		bra.s	Obj56_Move_UD
00010C7E                            ; ===========================================================================
00010C7E                            
00010C7E                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00010C7E 323C 0080                  		move.w	#$80,d1
00010C82 7000                       		moveq	#0,d0
00010C84 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010C88                            
00010C88                            Obj56_Move_UD:
00010C88 0828 0000 0022             		btst	#0,$22(a0)
00010C8E 6700                       		beq.s	loc_10444
00010C90 4440                       		neg.w	d0
00010C92 D041                       		add.w	d1,d0
00010C94                            
00010C94                            loc_10444:
00010C94 3228 0030                  		move.w	$30(a0),d1
00010C98 9240                       		sub.w	d0,d1
00010C9A 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010C9E 4E75                       		rts	
00010CA0                            ; ===========================================================================
00010CA0                            
00010CA0                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00010CA0 4A28 0038                  		tst.b	$38(a0)
00010CA4 6600                       		bne.s	loc_104A4
00010CA6 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010CAC 6600                       		bne.s	loc_1047A	; if not, branch
00010CAE 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
00010CB4 6600                       		bne.s	loc_1047A
00010CB6 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010CBA 3038 D008                  		move.w	($FFFFD008).w,d0
00010CBE B068 0008                  		cmp.w	8(a0),d0
00010CC2 6400                       		bcc.s	loc_1047A
00010CC4 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
00010CCA                            
00010CCA                            loc_1047A:
00010CCA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010CCE 7000                       		moveq	#0,d0
00010CD0 1028 003C                  		move.b	$3C(a0),d0
00010CD4 0832 0000 0000             		btst	#0,(a2,d0.w)
00010CDA 6700                       		beq.s	loc_104AE
00010CDC 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010CE2 6600                       		bne.s	loc_1049E	; if not, branch
00010CE4 0C00 0003                  		cmpi.b	#3,d0
00010CE8 6600                       		bne.s	loc_1049E
00010CEA 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010CEE                            
00010CEE                            loc_1049E:
00010CEE 117C 0001 0038             		move.b	#1,$38(a0)
00010CF4                            
00010CF4                            loc_104A4:
00010CF4 4A68 003A                  		tst.w	$3A(a0)
00010CF8 6700                       		beq.s	loc_104C8
00010CFA 5568 003A                  		subq.w	#2,$3A(a0)
00010CFE                            
00010CFE                            loc_104AE:
00010CFE 3028 003A                  		move.w	$3A(a0),d0
00010D02 0828 0000 0022             		btst	#0,$22(a0)
00010D08 6700                       		beq.s	loc_104BC
00010D0A 4440                       		neg.w	d0
00010D0C                            
00010D0C                            loc_104BC:
00010D0C 3228 0030                  		move.w	$30(a0),d1
00010D10 D240                       		add.w	d0,d1
00010D12 3141 000C                  		move.w	d1,$C(a0)
00010D16 4E75                       		rts	
00010D18                            ; ===========================================================================
00010D18                            
00010D18                            loc_104C8:
00010D18 5228 0028                  		addq.b	#1,$28(a0)
00010D1C 4228 0038                  		clr.b	$38(a0)
00010D20 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D24 7000                       		moveq	#0,d0
00010D26 1028 0023                  		move.b	$23(a0),d0
00010D2A 67D2                       		beq.s	loc_104AE
00010D2C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010D32 60CA                       		bra.s	loc_104AE
00010D34                            ; ===========================================================================
00010D34                            
00010D34                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010D34 4A28 0038                  		tst.b	$38(a0)
00010D38 6600                       		bne.s	loc_10500
00010D3A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010D3E 7000                       		moveq	#0,d0
00010D40 1028 003C                  		move.b	$3C(a0),d0
00010D44 4A32 0000                  		tst.b	(a2,d0.w)
00010D48 6A00                       		bpl.s	loc_10512
00010D4A 117C 0001 0038             		move.b	#1,$38(a0)
00010D50                            
00010D50                            loc_10500:
00010D50 7000                       		moveq	#0,d0
00010D52 1028 0016                  		move.b	$16(a0),d0
00010D56 D040                       		add.w	d0,d0
00010D58 B068 003A                  		cmp.w	$3A(a0),d0
00010D5C 6700                       		beq.s	loc_1052C
00010D5E 5468 003A                  		addq.w	#2,$3A(a0)
00010D62                            
00010D62                            loc_10512:
00010D62 3028 003A                  		move.w	$3A(a0),d0
00010D66 0828 0000 0022             		btst	#0,$22(a0)
00010D6C 6700                       		beq.s	loc_10520
00010D6E 4440                       		neg.w	d0
00010D70                            
00010D70                            loc_10520:
00010D70 3228 0030                  		move.w	$30(a0),d1
00010D74 D240                       		add.w	d0,d1
00010D76 3141 000C                  		move.w	d1,$C(a0)
00010D7A 4E75                       		rts	
00010D7C                            ; ===========================================================================
00010D7C                            
00010D7C                            loc_1052C:
00010D7C 5328 0028                  		subq.b	#1,$28(a0)
00010D80 4228 0038                  		clr.b	$38(a0)
00010D84 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010D88 7000                       		moveq	#0,d0
00010D8A 1028 0023                  		move.b	$23(a0),d0
00010D8E 67D2                       		beq.s	loc_10512
00010D90 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010D96 60CA                       		bra.s	loc_10512
00010D98                            ; ===========================================================================
00010D98                            
00010D98                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00010D98 4A28 0038                  		tst.b	$38(a0)
00010D9C 6600                       		bne.s	loc_1055E
00010D9E 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
00010DA2 6700                       		beq.s	locret_10578
00010DA4 117C 0001 0038             		move.b	#1,$38(a0)
00010DAA 4268 003A                  		clr.w	$3A(a0)
00010DAE                            
00010DAE                            loc_1055E:
00010DAE 5268 0008                  		addq.w	#1,8(a0)
00010DB2 3168 0008 0034             		move.w	8(a0),$34(a0)
00010DB8 5268 003A                  		addq.w	#1,$3A(a0)
00010DBC 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010DC2 6600                       		bne.s	locret_10578
00010DC4 4228 0028                  		clr.b	$28(a0)
00010DC8                            
00010DC8                            locret_10578:
00010DC8 4E75                       		rts	
00010DCA                            ; ===========================================================================
00010DCA                            
00010DCA                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
00010DCA 4A28 0038                  		tst.b	$38(a0)
00010DCE 6600                       		bne.s	loc_10598
00010DD0 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010DD4 7000                       		moveq	#0,d0
00010DD6 1028 003C                  		move.b	$3C(a0),d0
00010DDA 0832 0000 0000             		btst	#0,(a2,d0.w)
00010DE0 6700                       		beq.s	loc_105A2
00010DE2 117C 0001 0038             		move.b	#1,$38(a0)
00010DE8                            
00010DE8                            loc_10598:
00010DE8 4A68 003A                  		tst.w	$3A(a0)
00010DEC 6700                       		beq.s	loc_105C0
00010DEE 5568 003A                  		subq.w	#2,$3A(a0)
00010DF2                            
00010DF2                            loc_105A2:
00010DF2 3028 003A                  		move.w	$3A(a0),d0
00010DF6 0828 0000 0022             		btst	#0,$22(a0)
00010DFC 6700                       		beq.s	loc_105B4
00010DFE 4440                       		neg.w	d0
00010E00 0640 0080                  		addi.w	#$80,d0
00010E04                            
00010E04                            loc_105B4:
00010E04 3228 0034                  		move.w	$34(a0),d1
00010E08 D240                       		add.w	d0,d1
00010E0A 3141 0008                  		move.w	d1,8(a0)
00010E0E 4E75                       		rts	
00010E10                            ; ===========================================================================
00010E10                            
00010E10                            loc_105C0:
00010E10 5228 0028                  		addq.b	#1,$28(a0)
00010E14 4228 0038                  		clr.b	$38(a0)
00010E18 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E1C 7000                       		moveq	#0,d0
00010E1E 1028 0023                  		move.b	$23(a0),d0
00010E22 67CE                       		beq.s	loc_105A2
00010E24 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010E2A 60C6                       		bra.s	loc_105A2
00010E2C                            ; ===========================================================================
00010E2C                            
00010E2C                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010E2C 4A28 0038                  		tst.b	$38(a0)
00010E30 6600                       		bne.s	loc_105F8
00010E32 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010E36 7000                       		moveq	#0,d0
00010E38 1028 003C                  		move.b	$3C(a0),d0
00010E3C 4A32 0000                  		tst.b	(a2,d0.w)
00010E40 6A00                       		bpl.s	loc_10606
00010E42 117C 0001 0038             		move.b	#1,$38(a0)
00010E48                            
00010E48                            loc_105F8:
00010E48 303C 0080                  		move.w	#$80,d0
00010E4C B068 003A                  		cmp.w	$3A(a0),d0
00010E50 6700                       		beq.s	loc_10624
00010E52 5468 003A                  		addq.w	#2,$3A(a0)
00010E56                            
00010E56                            loc_10606:
00010E56 3028 003A                  		move.w	$3A(a0),d0
00010E5A 0828 0000 0022             		btst	#0,$22(a0)
00010E60 6700                       		beq.s	loc_10618
00010E62 4440                       		neg.w	d0
00010E64 0640 0080                  		addi.w	#$80,d0
00010E68                            
00010E68                            loc_10618:
00010E68 3228 0034                  		move.w	$34(a0),d1
00010E6C D240                       		add.w	d0,d1
00010E6E 3141 0008                  		move.w	d1,8(a0)
00010E72 4E75                       		rts	
00010E74                            ; ===========================================================================
00010E74                            
00010E74                            loc_10624:
00010E74 5328 0028                  		subq.b	#1,$28(a0)
00010E78 4228 0038                  		clr.b	$38(a0)
00010E7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010E80 7000                       		moveq	#0,d0
00010E82 1028 0023                  		move.b	$23(a0),d0
00010E86 67CE                       		beq.s	loc_10606
00010E88 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00010E8E 60C6                       		bra.s	loc_10606
00010E90                            ; ===========================================================================
00010E90                            
00010E90                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00010E90 323C 0010                  		move.w	#$10,d1
00010E94 7000                       		moveq	#0,d0
00010E96 1038 FE88                  		move.b	($FFFFFE88).w,d0
00010E9A E248                       		lsr.w	#1,d0
00010E9C 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00010EA0 6000                       		bra.s	Obj56_Move_Sqr
00010EA2                            ; ===========================================================================
00010EA2                            
00010EA2                            Obj56_Type09:				; XREF: Obj56_TypeIndex
00010EA2 323C 0030                  		move.w	#$30,d1
00010EA6 7000                       		moveq	#0,d0
00010EA8 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00010EAC 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00010EB0 6000                       		bra.s	Obj56_Move_Sqr
00010EB2                            ; ===========================================================================
00010EB2                            
00010EB2                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
00010EB2 323C 0050                  		move.w	#$50,d1
00010EB6 7000                       		moveq	#0,d0
00010EB8 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010EBC 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010EC0 6000                       		bra.s	Obj56_Move_Sqr
00010EC2                            ; ===========================================================================
00010EC2                            
00010EC2                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010EC2 323C 0070                  		move.w	#$70,d1
00010EC6 7000                       		moveq	#0,d0
00010EC8 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010ECC 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010ED0                            
00010ED0                            Obj56_Move_Sqr:
00010ED0 4A43                       		tst.w	d3
00010ED2 6600                       		bne.s	loc_1068E
00010ED4 5228 0022                  		addq.b	#1,$22(a0)
00010ED8 0228 0003 0022             		andi.b	#3,$22(a0)
00010EDE                            
00010EDE                            loc_1068E:
00010EDE 1428 0022                  		move.b	$22(a0),d2
00010EE2 0202 0003                  		andi.b	#3,d2
00010EE6 6600                       		bne.s	loc_106AE
00010EE8 9041                       		sub.w	d1,d0
00010EEA D068 0034                  		add.w	$34(a0),d0
00010EEE 3140 0008                  		move.w	d0,8(a0)
00010EF2 4441                       		neg.w	d1
00010EF4 D268 0030                  		add.w	$30(a0),d1
00010EF8 3141 000C                  		move.w	d1,$C(a0)
00010EFC 4E75                       		rts	
00010EFE                            ; ===========================================================================
00010EFE                            
00010EFE                            loc_106AE:
00010EFE 5302                       		subq.b	#1,d2
00010F00 6600                       		bne.s	loc_106CC
00010F02 5341                       		subq.w	#1,d1
00010F04 9041                       		sub.w	d1,d0
00010F06 4440                       		neg.w	d0
00010F08 D068 0030                  		add.w	$30(a0),d0
00010F0C 3140 000C                  		move.w	d0,$C(a0)
00010F10 5241                       		addq.w	#1,d1
00010F12 D268 0034                  		add.w	$34(a0),d1
00010F16 3141 0008                  		move.w	d1,8(a0)
00010F1A 4E75                       		rts	
00010F1C                            ; ===========================================================================
00010F1C                            
00010F1C                            loc_106CC:
00010F1C 5302                       		subq.b	#1,d2
00010F1E 6600                       		bne.s	loc_106EA
00010F20 5341                       		subq.w	#1,d1
00010F22 9041                       		sub.w	d1,d0
00010F24 4440                       		neg.w	d0
00010F26 D068 0034                  		add.w	$34(a0),d0
00010F2A 3140 0008                  		move.w	d0,8(a0)
00010F2E 5241                       		addq.w	#1,d1
00010F30 D268 0030                  		add.w	$30(a0),d1
00010F34 3141 000C                  		move.w	d1,$C(a0)
00010F38 4E75                       		rts	
00010F3A                            ; ===========================================================================
00010F3A                            
00010F3A                            loc_106EA:
00010F3A 9041                       		sub.w	d1,d0
00010F3C D068 0030                  		add.w	$30(a0),d0
00010F40 3140 000C                  		move.w	d0,$C(a0)
00010F44 4441                       		neg.w	d1
00010F46 D268 0034                  		add.w	$34(a0),d1
00010F4A 3141 0008                  		move.w	d1,8(a0)
00010F4E 4E75                       		rts	
00010F50                            ; ===========================================================================
00010F50                            ; ---------------------------------------------------------------------------
00010F50                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010F50                            ; ---------------------------------------------------------------------------
00010F50                            Map_obj56:
00010F50                            	include "_maps\obj56.asm"
00010F50                            ; ---------------------------------------------------------------------------
00010F50                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010F50                            ; ---------------------------------------------------------------------------
00010F50 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010F54 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00010F58 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010F5C 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010F60 01                         byte_10710:	dc.b 1
00010F61 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
00010F66 04                         byte_10716:	dc.b 4
00010F67 E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010F6C E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010F71 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
00010F76 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00010F7B 02                         byte_1072B:	dc.b 2
00010F7C E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00010F81 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
00010F86 04                         byte_10736:	dc.b 4
00010F87 E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00010F8C E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00010F91 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
00010F96 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00010F9B 03                         byte_1074B:	dc.b 3
00010F9C D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00010FA1 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
00010FA6 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00010FAB 01                         byte_1075B:	dc.b 1
00010FAC F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010FB1 02                         byte_10761:	dc.b 2
00010FB2 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00010FB7 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010FBC 04                         byte_1076C:	dc.b 4
00010FBD F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010FC2 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
00010FC7 F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010FCC F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010FD2 00                         		even
00010FD2 00                         		even
00010FD2                            
00010FD2                            ; ===========================================================================
00010FD2                            ; ---------------------------------------------------------------------------
00010FD2                            ; Object 57 - spiked balls (SYZ, LZ)
00010FD2                            ; ---------------------------------------------------------------------------
00010FD2                            
00010FD2                            Obj57:					; XREF: Obj_Index
00010FD2 7000                       		moveq	#0,d0
00010FD4 1028 0024                  		move.b	$24(a0),d0
00010FD8 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010FDC 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010FE0                            ; ===========================================================================
00010FE0 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010FE2 0000                       		dc.w Obj57_Move-Obj57_Index
00010FE4 0000                       		dc.w Obj57_Display-Obj57_Index
00010FE6                            ; ===========================================================================
00010FE6                            
00010FE6                            Obj57_Main:				; XREF: Obj57_Index
00010FE6 5428 0024                  		addq.b	#2,$24(a0)
00010FEA 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010FF2 317C 03BA 0002             		move.w	#$3BA,2(a0)
00010FF8 117C 0004 0001             		move.b	#4,1(a0)
00010FFE 117C 0004 0018             		move.b	#4,$18(a0)
00011004 117C 0008 0019             		move.b	#8,$19(a0)
0001100A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011010 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011016 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
0001101C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011022 6600                       		bne.s	loc_107E8
00011024 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001102A 317C 0310 0002             		move.w	#$310,2(a0)
00011030 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011038                            
00011038                            loc_107E8:
00011038 1228 0028                  		move.b	$28(a0),d1	; get object type
0001103C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011040 4881                       		ext.w	d1
00011042 E741                       		asl.w	#3,d1		; multiply by 8
00011044 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011048 1028 0022                  		move.b	$22(a0),d0
0001104C E418                       		ror.b	#2,d0
0001104E 0200 00C0                  		andi.b	#-$40,d0
00011052 1140 0026                  		move.b	d0,$26(a0)
00011056 45E8 0029                  		lea	$29(a0),a2
0001105A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001105E 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00011062 14FC 0000                  		move.b	#0,(a2)+
00011066 3601                       		move.w	d1,d3
00011068 E94B                       		lsl.w	#4,d3
0001106A 1143 003C                  		move.b	d3,$3C(a0)
0001106E 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011070 6500                       		bcs.s	loc_10894
00011072 0828 0003 0028             		btst	#3,$28(a0)
00011078 6700                       		beq.s	Obj57_MakeChain
0001107A 5341                       		subq.w	#1,d1
0001107C 6500                       		bcs.s	loc_10894
0001107E                            
0001107E                            Obj57_MakeChain:
0001107E 6100 D266                  		bsr.w	SingleObjLoad
00011082 6600                       		bne.s	loc_10894
00011084 5228 0029                  		addq.b	#1,$29(a0)
00011088 3A09                       		move.w	a1,d5
0001108A 0445 D000                  		subi.w	#-$3000,d5
0001108E EC4D                       		lsr.w	#6,d5
00011090 0245 007F                  		andi.w	#$7F,d5
00011094 14C5                       		move.b	d5,(a2)+
00011096 137C 0004 0024             		move.b	#4,$24(a1)
0001109C 1290                       		move.b	0(a0),0(a1)
0001109E 2368 0004 0004             		move.l	4(a0),4(a1)
000110A4 3368 0002 0002             		move.w	2(a0),2(a1)
000110AA 1368 0001 0001             		move.b	1(a0),1(a1)
000110B0 1368 0018 0018             		move.b	$18(a0),$18(a1)
000110B6 1368 0019 0019             		move.b	$19(a0),$19(a1)
000110BC 1368 0020 0020             		move.b	$20(a0),$20(a1)
000110C2 0403 0010                  		subi.b	#$10,d3
000110C6 1343 003C                  		move.b	d3,$3C(a1)
000110CA 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000110D0 6600                       		bne.s	loc_10890
000110D2 4A03                       		tst.b	d3
000110D4 6600                       		bne.s	loc_10890
000110D6 137C 0002 001A             		move.b	#2,$1A(a1)
000110DC                            
000110DC                            loc_10890:
000110DC 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000110E0                            
000110E0                            loc_10894:
000110E0 3A08                       		move.w	a0,d5
000110E2 0445 D000                  		subi.w	#-$3000,d5
000110E6 EC4D                       		lsr.w	#6,d5
000110E8 0245 007F                  		andi.w	#$7F,d5
000110EC 14C5                       		move.b	d5,(a2)+
000110EE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000110F4 6600                       		bne.s	Obj57_Move
000110F6 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000110FC 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00011102                            
00011102                            Obj57_Move:				; XREF: Obj57_Index
00011102 6100 0000                  		bsr.w	Obj57_MoveSub
00011106 6000 0000                  		bra.w	Obj57_ChkDel
0001110A                            ; ===========================================================================
0001110A                            
0001110A                            Obj57_MoveSub:				; XREF: Obj57_Move
0001110A 3028 003E                  		move.w	$3E(a0),d0
0001110E D168 0026                  		add.w	d0,$26(a0)
00011112 1028 0026                  		move.b	$26(a0),d0
00011116 4EB9 0000 2CFE             		jsr	(CalcSine).l
0001111C 3428 0038                  		move.w	$38(a0),d2
00011120 3628 003A                  		move.w	$3A(a0),d3
00011124 45E8 0029                  		lea	$29(a0),a2
00011128 7C00                       		moveq	#0,d6
0001112A 1C1A                       		move.b	(a2)+,d6
0001112C                            
0001112C                            Obj57_MoveLoop:
0001112C 7800                       		moveq	#0,d4
0001112E 181A                       		move.b	(a2)+,d4
00011130 ED4C                       		lsl.w	#6,d4
00011132 0684 00FF D000             		addi.l	#$FFD000,d4
00011138 2244                       		movea.l	d4,a1
0001113A 7800                       		moveq	#0,d4
0001113C 1829 003C                  		move.b	$3C(a1),d4
00011140 2A04                       		move.l	d4,d5
00011142 C9C0                       		muls.w	d0,d4
00011144 E084                       		asr.l	#8,d4
00011146 CBC1                       		muls.w	d1,d5
00011148 E085                       		asr.l	#8,d5
0001114A D842                       		add.w	d2,d4
0001114C DA43                       		add.w	d3,d5
0001114E 3344 000C                  		move.w	d4,$C(a1)
00011152 3345 0008                  		move.w	d5,8(a1)
00011156 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001115A 4E75                       		rts	
0001115C                            ; ===========================================================================
0001115C                            
0001115C                            Obj57_ChkDel:				; XREF: Obj57_Move
0001115C 3028 003A                  		move.w	$3A(a0),d0
00011160 0240 FF80                  		andi.w	#$FF80,d0
00011164 3238 F700                  		move.w	($FFFFF700).w,d1
00011168 0441 0080                  		subi.w	#$80,d1
0001116C 0241 FF80                  		andi.w	#$FF80,d1
00011170 9041                       		sub.w	d1,d0
00011172 0C40 0280                  		cmpi.w	#$280,d0
00011176 6200 0000                  		bhi.w	Obj57_Delete
0001117A 6000 CCE4                  		bra.w	DisplaySprite
0001117E                            ; ===========================================================================
0001117E                            
0001117E                            Obj57_Delete:				; XREF: Obj57_ChkDel
0001117E 7400                       		moveq	#0,d2
00011180 45E8 0029                  		lea	$29(a0),a2
00011184 141A                       		move.b	(a2)+,d2
00011186                            
00011186                            Obj57_DelLoop:
00011186 7000                       		moveq	#0,d0
00011188 101A                       		move.b	(a2)+,d0
0001118A ED48                       		lsl.w	#6,d0
0001118C 0680 00FF D000             		addi.l	#$FFD000,d0
00011192 2240                       		movea.l	d0,a1
00011194 6100 CD08                  		bsr.w	DeleteObject2
00011198 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
0001119C                            
0001119C 4E75                       		rts	
0001119E                            ; ===========================================================================
0001119E                            
0001119E                            Obj57_Display:				; XREF: Obj57_Index
0001119E 6000 CCC0                  		bra.w	DisplaySprite
000111A2                            ; ===========================================================================
000111A2                            ; ---------------------------------------------------------------------------
000111A2                            ; Sprite mappings - chain of spiked balls (SYZ)
000111A2                            ; ---------------------------------------------------------------------------
000111A2                            Map_obj57:
000111A2                            	include "_maps\obj57syz.asm"
000111A2                            ; ---------------------------------------------------------------------------
000111A2                            ; Sprite mappings - chain of spiked balls (SYZ)
000111A2                            ; ---------------------------------------------------------------------------
000111A2 0000                       		dc.w byte_10958-Map_obj57
000111A4 01                         byte_10958:	dc.b 1
000111A5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000111AA                            		even
000111AA                            		even
000111AA                            
000111AA                            ; ---------------------------------------------------------------------------
000111AA                            ; Sprite mappings - spiked ball	on a chain (LZ)
000111AA                            ; ---------------------------------------------------------------------------
000111AA                            Map_obj57a:
000111AA                            	include "_maps\obj57lz.asm"
000111AA                            ; ---------------------------------------------------------------------------
000111AA                            ; Sprite mappings - spiked ball	on a chain (LZ)
000111AA                            ; ---------------------------------------------------------------------------
000111AA 0000                       		dc.w byte_10964-Map_obj57a
000111AC 0000                       		dc.w byte_1096A-Map_obj57a
000111AE 0000                       		dc.w byte_10970-Map_obj57a
000111B0 01                         byte_10964:	dc.b 1
000111B1 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000111B6 01                         byte_1096A:	dc.b 1
000111B7 F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
000111BC 01                         byte_10970:	dc.b 1
000111BD F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
000111C2                            		even
000111C2                            		even
000111C2                            
000111C2                            ; ===========================================================================
000111C2                            ; ---------------------------------------------------------------------------
000111C2                            ; Object 58 - giant spiked balls (SYZ)
000111C2                            ; ---------------------------------------------------------------------------
000111C2                            
000111C2                            Obj58:					; XREF: Obj_Index
000111C2 7000                       		moveq	#0,d0
000111C4 1028 0024                  		move.b	$24(a0),d0
000111C8 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
000111CC 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
000111D0                            ; ===========================================================================
000111D0 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
000111D2 0000                       		dc.w Obj58_Move-Obj58_Index
000111D4                            ; ===========================================================================
000111D4                            
000111D4                            Obj58_Main:				; XREF: Obj58_Index
000111D4 5428 0024                  		addq.b	#2,$24(a0)
000111D8 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
000111E0 317C 0396 0002             		move.w	#$396,2(a0)
000111E6 117C 0004 0001             		move.b	#4,1(a0)
000111EC 117C 0004 0018             		move.b	#4,$18(a0)
000111F2 117C 0018 0019             		move.b	#$18,$19(a0)
000111F8 3168 0008 003A             		move.w	8(a0),$3A(a0)
000111FE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011204 117C 0086 0020             		move.b	#$86,$20(a0)
0001120A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001120E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011212 4881                       		ext.w	d1
00011214 E741                       		asl.w	#3,d1		; multiply by 8
00011216 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001121A 1028 0022                  		move.b	$22(a0),d0
0001121E E418                       		ror.b	#2,d0
00011220 0200 00C0                  		andi.b	#$C0,d0
00011224 1140 0026                  		move.b	d0,$26(a0)
00011228 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
0001122E                            
0001122E                            Obj58_Move:				; XREF: Obj58_Index
0001122E 7000                       		moveq	#0,d0
00011230 1028 0028                  		move.b	$28(a0),d0	; get object type
00011234 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011238 D040                       		add.w	d0,d0
0001123A 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
0001123E 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011242 3028 003A                  		move.w	$3A(a0),d0
00011246 0240 FF80                  		andi.w	#$FF80,d0
0001124A 3238 F700                  		move.w	($FFFFF700).w,d1
0001124E 0441 0080                  		subi.w	#$80,d1
00011252 0241 FF80                  		andi.w	#$FF80,d1
00011256 9041                       		sub.w	d1,d0
00011258 0C40 0280                  		cmpi.w	#$280,d0
0001125C 6200 CC3E                  		bhi.w	DeleteObject
00011260 6000 CBFE                  		bra.w	DisplaySprite
00011264                            ; ===========================================================================
00011264 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011266 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011268 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
0001126A 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
0001126C                            ; ===========================================================================
0001126C                            
0001126C                            Obj58_Type00:				; XREF: Obj58_TypeIndex
0001126C 4E75                       		rts	
0001126E                            ; ===========================================================================
0001126E                            
0001126E                            Obj58_Type01:				; XREF: Obj58_TypeIndex
0001126E 323C 0060                  		move.w	#$60,d1
00011272 7000                       		moveq	#0,d0
00011274 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011278 0828 0000 0022             		btst	#0,$22(a0)
0001127E 6700                       		beq.s	loc_10A38
00011280 4440                       		neg.w	d0
00011282 D041                       		add.w	d1,d0
00011284                            
00011284                            loc_10A38:
00011284 3228 003A                  		move.w	$3A(a0),d1
00011288 9240                       		sub.w	d0,d1
0001128A 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
0001128E 4E75                       		rts	
00011290                            ; ===========================================================================
00011290                            
00011290                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011290 323C 0060                  		move.w	#$60,d1
00011294 7000                       		moveq	#0,d0
00011296 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001129A 0828 0000 0022             		btst	#0,$22(a0)
000112A0 6700                       		beq.s	loc_10A5C
000112A2 4440                       		neg.w	d0
000112A4 0640 0080                  		addi.w	#$80,d0
000112A8                            
000112A8                            loc_10A5C:
000112A8 3228 0038                  		move.w	$38(a0),d1
000112AC 9240                       		sub.w	d0,d1
000112AE 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000112B2 4E75                       		rts	
000112B4                            ; ===========================================================================
000112B4                            
000112B4                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000112B4 3028 003E                  		move.w	$3E(a0),d0
000112B8 D168 0026                  		add.w	d0,$26(a0)
000112BC 1028 0026                  		move.b	$26(a0),d0
000112C0 4EB9 0000 2CFE             		jsr	(CalcSine).l
000112C6 3428 0038                  		move.w	$38(a0),d2
000112CA 3628 003A                  		move.w	$3A(a0),d3
000112CE 7800                       		moveq	#0,d4
000112D0 1828 003C                  		move.b	$3C(a0),d4
000112D4 2A04                       		move.l	d4,d5
000112D6 C9C0                       		muls.w	d0,d4
000112D8 E084                       		asr.l	#8,d4
000112DA CBC1                       		muls.w	d1,d5
000112DC E085                       		asr.l	#8,d5
000112DE D842                       		add.w	d2,d4
000112E0 DA43                       		add.w	d3,d5
000112E2 3144 000C                  		move.w	d4,$C(a0)
000112E6 3145 0008                  		move.w	d5,8(a0)
000112EA 4E75                       		rts	
000112EC                            ; ===========================================================================
000112EC                            ; ---------------------------------------------------------------------------
000112EC                            ; Sprite mappings - SBZ	spiked ball on a chain
000112EC                            ; ---------------------------------------------------------------------------
000112EC                            Map_obj15b:
000112EC                            	include "_maps\obj15sbz.asm"
000112EC                            ; ---------------------------------------------------------------------------
000112EC                            ; Sprite mappings - spiked ball on a chain (SBZ)
000112EC                            ; ---------------------------------------------------------------------------
000112EC 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
000112F0 0000                       		dc.w byte_10AC6-Map_obj15b
000112F2 05                         byte_10AA6:	dc.b 5
000112F3 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
000112F8 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
000112FD F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011302 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011307 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
0001130C 01                         byte_10AC0:	dc.b 1
0001130D F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011312 02                         byte_10AC6:	dc.b 2
00011313 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011318 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
0001131E 00                         		even
0001131E 00                         		even
0001131E                            
0001131E                            ; ===========================================================================
0001131E                            ; ---------------------------------------------------------------------------
0001131E                            ; Object 59 - platforms	that move when you stand on them (SLZ)
0001131E                            ; ---------------------------------------------------------------------------
0001131E                            
0001131E                            Obj59:					; XREF: Obj_Index
0001131E 7000                       		moveq	#0,d0
00011320 1028 0024                  		move.b	$24(a0),d0
00011324 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011328 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
0001132C 3028 0032                  		move.w	$32(a0),d0
00011330 0240 FF80                  		andi.w	#$FF80,d0
00011334 3238 F700                  		move.w	($FFFFF700).w,d1
00011338 0441 0080                  		subi.w	#$80,d1
0001133C 0241 FF80                  		andi.w	#$FF80,d1
00011340 9041                       		sub.w	d1,d0
00011342 0C40 0280                  		cmpi.w	#$280,d0
00011346 6200 CB54                  		bhi.w	DeleteObject
0001134A 6000 CB14                  		bra.w	DisplaySprite
0001134E                            ; ===========================================================================
0001134E 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011350 0000                       		dc.w Obj59_Platform-Obj59_Index
00011352 0000                       		dc.w Obj59_Action-Obj59_Index
00011354 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011356                            
00011356 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011358                            
00011358 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
0001135A 2001                       		dc.b $20, 1
0001135C 3401                       		dc.b $34, 1
0001135E 1003                       		dc.b $10, 3
00011360 2003                       		dc.b $20, 3
00011362 3403                       		dc.b $34, 3
00011364 1401                       		dc.b $14, 1
00011366 2401                       		dc.b $24, 1
00011368 2C01                       		dc.b $2C, 1
0001136A 1403                       		dc.b $14, 3
0001136C 2403                       		dc.b $24, 3
0001136E 2C03                       		dc.b $2C, 3
00011370 2005                       		dc.b $20, 5
00011372 2007                       		dc.b $20, 7
00011374 3009                       		dc.b $30, 9
00011376                            ; ===========================================================================
00011376                            
00011376                            Obj59_Main:				; XREF: Obj59_Index
00011376 5428 0024                  		addq.b	#2,$24(a0)
0001137A 7000                       		moveq	#0,d0
0001137C 1028 0028                  		move.b	$28(a0),d0
00011380 6A00                       		bpl.s	Obj59_Main2
00011382 5828 0024                  		addq.b	#4,$24(a0)
00011386 0240 007F                  		andi.w	#$7F,d0
0001138A C0FC 0006                  		mulu.w	#6,d0
0001138E 3140 003C                  		move.w	d0,$3C(a0)
00011392 3140 003E                  		move.w	d0,$3E(a0)
00011396 588F                       		addq.l	#4,sp
00011398 4E75                       		rts	
0001139A                            ; ===========================================================================
0001139A                            
0001139A                            Obj59_Main2:
0001139A E648                       		lsr.w	#3,d0
0001139C 0240 001E                  		andi.w	#$1E,d0
000113A0 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
000113A4 115A 0019                  		move.b	(a2)+,$19(a0)
000113A8 115A 001A                  		move.b	(a2)+,$1A(a0)
000113AC 7000                       		moveq	#0,d0
000113AE 1028 0028                  		move.b	$28(a0),d0
000113B2 D040                       		add.w	d0,d0
000113B4 0240 001E                  		andi.w	#$1E,d0
000113B8 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
000113BC 101A                       		move.b	(a2)+,d0
000113BE E548                       		lsl.w	#2,d0
000113C0 3140 003C                  		move.w	d0,$3C(a0)
000113C4 115A 0028                  		move.b	(a2)+,$28(a0)
000113C8 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
000113D0 317C 4000 0002             		move.w	#$4000,2(a0)
000113D6 117C 0004 0001             		move.b	#4,1(a0)
000113DC 117C 0004 0018             		move.b	#4,$18(a0)
000113E2 3168 0008 0032             		move.w	8(a0),$32(a0)
000113E8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000113EE                            
000113EE                            Obj59_Platform:				; XREF: Obj59_Index
000113EE 7200                       		moveq	#0,d1
000113F0 1228 0019                  		move.b	$19(a0),d1
000113F4 4EB9 0000 7A9A             		jsr	(PlatformObject).l
000113FA 6000 0000                  		bra.w	Obj59_Types
000113FE                            ; ===========================================================================
000113FE                            
000113FE                            Obj59_Action:				; XREF: Obj59_Index
000113FE 7200                       		moveq	#0,d1
00011400 1228 0019                  		move.b	$19(a0),d1
00011404 4EB9 0000 7C0E             		jsr	(ExitPlatform).l
0001140A 3F28 0008                  		move.w	8(a0),-(sp)
0001140E 6100 0000                  		bsr.w	Obj59_Types
00011412 341F                       		move.w	(sp)+,d2
00011414 4A10                       		tst.b	0(a0)
00011416 6700                       		beq.s	locret_10BD4
00011418 4EF9 0000 8178             		jmp	(MvSonicOnPtfm2).l
0001141E                            ; ===========================================================================
0001141E                            
0001141E                            locret_10BD4:
0001141E 4E75                       		rts	
00011420                            ; ===========================================================================
00011420                            
00011420                            Obj59_Types:
00011420 7000                       		moveq	#0,d0
00011422 1028 0028                  		move.b	$28(a0),d0
00011426 0240 000F                  		andi.w	#$F,d0
0001142A D040                       		add.w	d0,d0
0001142C 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011430 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011434                            ; ===========================================================================
00011434 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011438 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
0001143C 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011440 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011444 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011448                            ; ===========================================================================
00011448                            
00011448                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011448 4E75                       		rts	
0001144A                            ; ===========================================================================
0001144A                            
0001144A                            Obj59_Type01:				; XREF: Obj59_TypeIndex
0001144A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011450 6600                       		bne.s	locret_10C0C
00011452 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011456                            
00011456                            locret_10C0C:
00011456 4E75                       		rts	
00011458                            ; ===========================================================================
00011458                            
00011458                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011458 6100 0000                  		bsr.w	Obj59_Move
0001145C 3028 0034                  		move.w	$34(a0),d0
00011460 4440                       		neg.w	d0
00011462 D068 0030                  		add.w	$30(a0),d0
00011466 3140 000C                  		move.w	d0,$C(a0)
0001146A 4E75                       		rts	
0001146C                            ; ===========================================================================
0001146C                            
0001146C                            Obj59_Type04:				; XREF: Obj59_TypeIndex
0001146C 6100 0000                  		bsr.w	Obj59_Move
00011470 3028 0034                  		move.w	$34(a0),d0
00011474 D068 0030                  		add.w	$30(a0),d0
00011478 3140 000C                  		move.w	d0,$C(a0)
0001147C 4E75                       		rts	
0001147E                            ; ===========================================================================
0001147E                            
0001147E                            Obj59_Type06:				; XREF: Obj59_TypeIndex
0001147E 6100 0000                  		bsr.w	Obj59_Move
00011482 3028 0034                  		move.w	$34(a0),d0
00011486 E240                       		asr.w	#1,d0
00011488 4440                       		neg.w	d0
0001148A D068 0030                  		add.w	$30(a0),d0
0001148E 3140 000C                  		move.w	d0,$C(a0)
00011492 3028 0034                  		move.w	$34(a0),d0
00011496 D068 0032                  		add.w	$32(a0),d0
0001149A 3140 0008                  		move.w	d0,8(a0)
0001149E 4E75                       		rts	
000114A0                            ; ===========================================================================
000114A0                            
000114A0                            Obj59_Type08:				; XREF: Obj59_TypeIndex
000114A0 6100 0000                  		bsr.w	Obj59_Move
000114A4 3028 0034                  		move.w	$34(a0),d0
000114A8 E240                       		asr.w	#1,d0
000114AA D068 0030                  		add.w	$30(a0),d0
000114AE 3140 000C                  		move.w	d0,$C(a0)
000114B2 3028 0034                  		move.w	$34(a0),d0
000114B6 4440                       		neg.w	d0
000114B8 D068 0032                  		add.w	$32(a0),d0
000114BC 3140 0008                  		move.w	d0,8(a0)
000114C0 4E75                       		rts	
000114C2                            ; ===========================================================================
000114C2                            
000114C2                            Obj59_Type09:				; XREF: Obj59_TypeIndex
000114C2 6100 0000                  		bsr.w	Obj59_Move
000114C6 3028 0034                  		move.w	$34(a0),d0
000114CA 4440                       		neg.w	d0
000114CC D068 0030                  		add.w	$30(a0),d0
000114D0 3140 000C                  		move.w	d0,$C(a0)
000114D4 4A28 0028                  		tst.b	$28(a0)
000114D8 6700 0000                  		beq.w	loc_10C94
000114DC 4E75                       		rts	
000114DE                            ; ===========================================================================
000114DE                            
000114DE                            loc_10C94:
000114DE 0828 0003 0022             		btst	#3,$22(a0)
000114E4 6700                       		beq.s	Obj59_Delete
000114E6 08E9 0001 0022             		bset	#1,$22(a1)
000114EC 08A9 0003 0022             		bclr	#3,$22(a1)
000114F2 137C 0002 0024             		move.b	#2,$24(a1)
000114F8                            
000114F8                            Obj59_Delete:
000114F8 6000 C9A2                  		bra.w	DeleteObject
000114FC                            
000114FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000114FC                            
000114FC                            
000114FC                            Obj59_Move:				; XREF: Obj59_Type02; et al
000114FC 3028 0038                  		move.w	$38(a0),d0
00011500 4A28 003A                  		tst.b	$3A(a0)
00011504 6600                       		bne.s	loc_10CC8
00011506 0C40 0800                  		cmpi.w	#$800,d0
0001150A 6400                       		bcc.s	loc_10CD0
0001150C 0640 0010                  		addi.w	#$10,d0
00011510 6000                       		bra.s	loc_10CD0
00011512                            ; ===========================================================================
00011512                            
00011512                            loc_10CC8:
00011512 4A40                       		tst.w	d0
00011514 6700                       		beq.s	loc_10CD0
00011516 0440 0010                  		subi.w	#$10,d0
0001151A                            
0001151A                            loc_10CD0:
0001151A 3140 0038                  		move.w	d0,$38(a0)
0001151E 48C0                       		ext.l	d0
00011520 E180                       		asl.l	#8,d0
00011522 D0A8 0034                  		add.l	$34(a0),d0
00011526 2140 0034                  		move.l	d0,$34(a0)
0001152A 4840                       		swap	d0
0001152C 3428 003C                  		move.w	$3C(a0),d2
00011530 B042                       		cmp.w	d2,d0
00011532 6300                       		bls.s	loc_10CF0
00011534 117C 0001 003A             		move.b	#1,$3A(a0)
0001153A                            
0001153A                            loc_10CF0:
0001153A D442                       		add.w	d2,d2
0001153C B042                       		cmp.w	d2,d0
0001153E 6600                       		bne.s	locret_10CFA
00011540 4228 0028                  		clr.b	$28(a0)
00011544                            
00011544                            locret_10CFA:
00011544 4E75                       		rts	
00011546                            ; End of function Obj59_Move
00011546                            
00011546                            ; ===========================================================================
00011546                            
00011546                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011546 5368 003C                  		subq.w	#1,$3C(a0)
0001154A 6600                       		bne.s	Obj59_ChkDel
0001154C 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011552 6100 CD92                  		bsr.w	SingleObjLoad
00011556 6600                       		bne.s	Obj59_ChkDel
00011558 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
0001155C 3368 0008 0008             		move.w	8(a0),8(a1)
00011562 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011568 137C 000E 0028             		move.b	#$E,$28(a1)
0001156E                            
0001156E                            Obj59_ChkDel:
0001156E 588F                       		addq.l	#4,sp
00011570 3028 0008                  		move.w	8(a0),d0
00011574 0240 FF80                  		andi.w	#$FF80,d0
00011578 3238 F700                  		move.w	($FFFFF700).w,d1
0001157C 0441 0080                  		subi.w	#$80,d1
00011580 0241 FF80                  		andi.w	#$FF80,d1
00011584 9041                       		sub.w	d1,d0
00011586 0C40 0280                  		cmpi.w	#$280,d0
0001158A 6200 C910                  		bhi.w	DeleteObject
0001158E 4E75                       		rts	
00011590                            ; ===========================================================================
00011590                            ; ---------------------------------------------------------------------------
00011590                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011590                            ; ---------------------------------------------------------------------------
00011590                            Map_obj59:
00011590                            	include "_maps\obj59.asm"
00011590                            ; ---------------------------------------------------------------------------
00011590                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011590                            ; ---------------------------------------------------------------------------
00011590 0000                       		dc.w byte_10D4A-Map_obj59
00011592 03                         byte_10D4A:	dc.b 3
00011593 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011598 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
0001159D F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
000115A2                            		even
000115A2                            		even
000115A2                            
000115A2                            ; ===========================================================================
000115A2                            ; ---------------------------------------------------------------------------
000115A2                            ; Object 5A - platforms	moving in circles (SLZ)
000115A2                            ; ---------------------------------------------------------------------------
000115A2                            
000115A2                            Obj5A:					; XREF: Obj_Index
000115A2 7000                       		moveq	#0,d0
000115A4 1028 0024                  		move.b	$24(a0),d0
000115A8 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
000115AC 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
000115B0 3028 0032                  		move.w	$32(a0),d0
000115B4 0240 FF80                  		andi.w	#$FF80,d0
000115B8 3238 F700                  		move.w	($FFFFF700).w,d1
000115BC 0441 0080                  		subi.w	#$80,d1
000115C0 0241 FF80                  		andi.w	#$FF80,d1
000115C4 9041                       		sub.w	d1,d0
000115C6 0C40 0280                  		cmpi.w	#$280,d0
000115CA 6200 C8D0                  		bhi.w	DeleteObject
000115CE 6000 C890                  		bra.w	DisplaySprite
000115D2                            ; ===========================================================================
000115D2 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
000115D4 0000                       		dc.w Obj5A_Platform-Obj5A_Index
000115D6 0000                       		dc.w Obj5A_Action-Obj5A_Index
000115D8                            ; ===========================================================================
000115D8                            
000115D8                            Obj5A_Main:				; XREF: Obj5A_Index
000115D8 5428 0024                  		addq.b	#2,$24(a0)
000115DC 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
000115E4 317C 4000 0002             		move.w	#$4000,2(a0)
000115EA 117C 0004 0001             		move.b	#4,1(a0)
000115F0 117C 0004 0018             		move.b	#4,$18(a0)
000115F6 117C 0018 0019             		move.b	#$18,$19(a0)
000115FC 3168 0008 0032             		move.w	8(a0),$32(a0)
00011602 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011608                            
00011608                            Obj5A_Platform:				; XREF: Obj5A_Index
00011608 7200                       		moveq	#0,d1
0001160A 1228 0019                  		move.b	$19(a0),d1
0001160E 4EB9 0000 7A9A             		jsr	(PlatformObject).l
00011614 6000 0000                  		bra.w	Obj5A_Types
00011618                            ; ===========================================================================
00011618                            
00011618                            Obj5A_Action:				; XREF: Obj5A_Index
00011618 7200                       		moveq	#0,d1
0001161A 1228 0019                  		move.b	$19(a0),d1
0001161E 4EB9 0000 7C0E             		jsr	(ExitPlatform).l
00011624 3F28 0008                  		move.w	8(a0),-(sp)
00011628 6100 0000                  		bsr.w	Obj5A_Types
0001162C 341F                       		move.w	(sp)+,d2
0001162E 4EF9 0000 8178             		jmp	(MvSonicOnPtfm2).l
00011634                            ; ===========================================================================
00011634                            
00011634                            Obj5A_Types:
00011634 7000                       		moveq	#0,d0
00011636 1028 0028                  		move.b	$28(a0),d0
0001163A 0240 000C                  		andi.w	#$C,d0
0001163E E248                       		lsr.w	#1,d0
00011640 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011644 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011648                            ; ===========================================================================
00011648 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
0001164A 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
0001164C                            ; ===========================================================================
0001164C                            
0001164C                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
0001164C 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011650 0401 0050                  		subi.b	#$50,d1
00011654 4881                       		ext.w	d1
00011656 1438 FE84                  		move.b	($FFFFFE84).w,d2
0001165A 0402 0050                  		subi.b	#$50,d2
0001165E 4882                       		ext.w	d2
00011660 0828 0000 0028             		btst	#0,$28(a0)
00011666 6700                       		beq.s	loc_10E24
00011668 4441                       		neg.w	d1
0001166A 4442                       		neg.w	d2
0001166C                            
0001166C                            loc_10E24:
0001166C 0828 0001 0028             		btst	#1,$28(a0)
00011672 6700                       		beq.s	loc_10E30
00011674 4441                       		neg.w	d1
00011676 C342                       		exg	d1,d2
00011678                            
00011678                            loc_10E30:
00011678 D268 0032                  		add.w	$32(a0),d1
0001167C 3141 0008                  		move.w	d1,8(a0)
00011680 D468 0030                  		add.w	$30(a0),d2
00011684 3142 000C                  		move.w	d2,$C(a0)
00011688 4E75                       		rts	
0001168A                            ; ===========================================================================
0001168A                            
0001168A                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
0001168A 1238 FE80                  		move.b	($FFFFFE80).w,d1
0001168E 0401 0050                  		subi.b	#$50,d1
00011692 4881                       		ext.w	d1
00011694 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011698 0402 0050                  		subi.b	#$50,d2
0001169C 4882                       		ext.w	d2
0001169E 0828 0000 0028             		btst	#0,$28(a0)
000116A4 6700                       		beq.s	loc_10E62
000116A6 4441                       		neg.w	d1
000116A8 4442                       		neg.w	d2
000116AA                            
000116AA                            loc_10E62:
000116AA 0828 0001 0028             		btst	#1,$28(a0)
000116B0 6700                       		beq.s	loc_10E6E
000116B2 4441                       		neg.w	d1
000116B4 C342                       		exg	d1,d2
000116B6                            
000116B6                            loc_10E6E:
000116B6 4441                       		neg.w	d1
000116B8 D268 0032                  		add.w	$32(a0),d1
000116BC 3141 0008                  		move.w	d1,8(a0)
000116C0 D468 0030                  		add.w	$30(a0),d2
000116C4 3142 000C                  		move.w	d2,$C(a0)
000116C8 4E75                       		rts	
000116CA                            ; ===========================================================================
000116CA                            ; ---------------------------------------------------------------------------
000116CA                            ; Sprite mappings - platforms that move	in circles (SLZ)
000116CA                            ; ---------------------------------------------------------------------------
000116CA                            Map_obj5A:
000116CA                            	include "_maps\obj5A.asm"
000116CA                            ; ---------------------------------------------------------------------------
000116CA                            ; Sprite mappings - platforms that move	in circles (SLZ)
000116CA                            ; ---------------------------------------------------------------------------
000116CA 0000                       		dc.w byte_10E84-Map_obj5A
000116CC 02                         byte_10E84:	dc.b 2
000116CD F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
000116D2 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
000116D8 00                         		even
000116D8 00                         		even
000116D8                            
000116D8                            ; ===========================================================================
000116D8                            ; ---------------------------------------------------------------------------
000116D8                            ; Object 5B - blocks that form a staircase (SLZ)
000116D8                            ; ---------------------------------------------------------------------------
000116D8                            
000116D8                            Obj5B:					; XREF: Obj_Index
000116D8 7000                       		moveq	#0,d0
000116DA 1028 0024                  		move.b	$24(a0),d0
000116DE 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
000116E2 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
000116E6 3028 0030                  		move.w	$30(a0),d0
000116EA 0240 FF80                  		andi.w	#$FF80,d0
000116EE 3238 F700                  		move.w	($FFFFF700).w,d1
000116F2 0441 0080                  		subi.w	#$80,d1
000116F6 0241 FF80                  		andi.w	#$FF80,d1
000116FA 9041                       		sub.w	d1,d0
000116FC 0C40 0280                  		cmpi.w	#$280,d0
00011700 6200 C79A                  		bhi.w	DeleteObject
00011704 6000 C75A                  		bra.w	DisplaySprite
00011708                            ; ===========================================================================
00011708 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001170A 0000                       		dc.w Obj5B_Move-Obj5B_Index
0001170C 0000                       		dc.w Obj5B_Solid-Obj5B_Index
0001170E                            ; ===========================================================================
0001170E                            
0001170E                            Obj5B_Main:				; XREF: Obj5B_Index
0001170E 5428 0024                  		addq.b	#2,$24(a0)
00011712 7638                       		moveq	#$38,d3
00011714 7801                       		moveq	#1,d4
00011716 0828 0000 0022             		btst	#0,$22(a0)
0001171C 6700                       		beq.s	loc_10EDA
0001171E 763B                       		moveq	#$3B,d3
00011720 78FF                       		moveq	#-1,d4
00011722                            
00011722                            loc_10EDA:
00011722 3428 0008                  		move.w	8(a0),d2
00011726 2248                       		movea.l	a0,a1
00011728 7203                       		moveq	#3,d1
0001172A 6000                       		bra.s	Obj5B_MakeBlocks
0001172C                            ; ===========================================================================
0001172C                            
0001172C                            Obj5B_Loop:
0001172C 6100 CBCE                  		bsr.w	SingleObjLoad2
00011730 6600 0000                  		bne.w	Obj5B_Move
00011734 137C 0004 0024             		move.b	#4,$24(a1)
0001173A                            
0001173A                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001173A 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
0001173E 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00011746 337C 4000 0002             		move.w	#$4000,2(a1)
0001174C 137C 0004 0001             		move.b	#4,1(a1)
00011752 137C 0003 0018             		move.b	#3,$18(a1)
00011758 137C 0010 0019             		move.b	#$10,$19(a1)
0001175E 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011764 3342 0008                  		move.w	d2,8(a1)
00011768 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001176E 3368 0008 0030             		move.w	8(a0),$30(a1)
00011774 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001177A 0642 0020                  		addi.w	#$20,d2
0001177E 1343 0037                  		move.b	d3,$37(a1)
00011782 2348 003C                  		move.l	a0,$3C(a1)
00011786 D604                       		add.b	d4,d3
00011788 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
0001178C                            
0001178C                            Obj5B_Move:				; XREF: Obj5B_Index
0001178C 7000                       		moveq	#0,d0
0001178E 1028 0028                  		move.b	$28(a0),d0
00011792 0240 0007                  		andi.w	#7,d0
00011796 D040                       		add.w	d0,d0
00011798 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
0001179C 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000117A0                            
000117A0                            Obj5B_Solid:				; XREF: Obj5B_Index
000117A0 2468 003C                  		movea.l	$3C(a0),a2
000117A4 7000                       		moveq	#0,d0
000117A6 1028 0037                  		move.b	$37(a0),d0
000117AA 1032 0000                  		move.b	(a2,d0.w),d0
000117AE D068 0032                  		add.w	$32(a0),d0
000117B2 3140 000C                  		move.w	d0,$C(a0)
000117B6 7200                       		moveq	#0,d1
000117B8 1228 0019                  		move.b	$19(a0),d1
000117BC 0641 000B                  		addi.w	#$B,d1
000117C0 343C 0010                  		move.w	#$10,d2
000117C4 363C 0011                  		move.w	#$11,d3
000117C8 3828 0008                  		move.w	8(a0),d4
000117CC 6100 EA62                  		bsr.w	SolidObject
000117D0 4A04                       		tst.b	d4
000117D2 6A00                       		bpl.s	loc_10F92
000117D4 1544 0036                  		move.b	d4,$36(a2)
000117D8                            
000117D8                            loc_10F92:
000117D8 0828 0003 0022             		btst	#3,$22(a0)
000117DE 6700                       		beq.s	locret_10FA0
000117E0 157C 0001 0036             		move.b	#1,$36(a2)
000117E6                            
000117E6                            locret_10FA0:
000117E6 4E75                       		rts	
000117E8                            ; ===========================================================================
000117E8 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000117EA 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000117EC 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000117EE 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000117F0                            ; ===========================================================================
000117F0                            
000117F0                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000117F0 4A68 0034                  		tst.w	$34(a0)
000117F4 6600                       		bne.s	loc_10FC0
000117F6 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000117FC 6600                       		bne.s	locret_10FBE
000117FE 317C 001E 0034             		move.w	#$1E,$34(a0)
00011804                            
00011804                            locret_10FBE:
00011804 4E75                       		rts	
00011806                            ; ===========================================================================
00011806                            
00011806                            loc_10FC0:
00011806 5368 0034                  		subq.w	#1,$34(a0)
0001180A 66F8                       		bne.s	locret_10FBE
0001180C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011810 4E75                       		rts	
00011812                            ; ===========================================================================
00011812                            
00011812                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011812 4A68 0034                  		tst.w	$34(a0)
00011816 6600                       		bne.s	loc_10FE0
00011818 4A28 0036                  		tst.b	$36(a0)
0001181C 6A00                       		bpl.s	locret_10FDE
0001181E 317C 003C 0034             		move.w	#$3C,$34(a0)
00011824                            
00011824                            locret_10FDE:
00011824 4E75                       		rts	
00011826                            ; ===========================================================================
00011826                            
00011826                            loc_10FE0:
00011826 5368 0034                  		subq.w	#1,$34(a0)
0001182A 6600                       		bne.s	loc_10FEC
0001182C 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011830 4E75                       		rts	
00011832                            ; ===========================================================================
00011832                            
00011832                            loc_10FEC:
00011832 43E8 0038                  		lea	$38(a0),a1
00011836 3028 0034                  		move.w	$34(a0),d0
0001183A E408                       		lsr.b	#2,d0
0001183C 0200 0001                  		andi.b	#1,d0
00011840 12C0                       		move.b	d0,(a1)+
00011842 0A00 0001                  		eori.b	#1,d0
00011846 12C0                       		move.b	d0,(a1)+
00011848 0A00 0001                  		eori.b	#1,d0
0001184C 12C0                       		move.b	d0,(a1)+
0001184E 0A00 0001                  		eori.b	#1,d0
00011852 12C0                       		move.b	d0,(a1)+
00011854 4E75                       		rts	
00011856                            ; ===========================================================================
00011856                            
00011856                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00011856 43E8 0038                  		lea	$38(a0),a1
0001185A 0C11 0080                  		cmpi.b	#$80,(a1)
0001185E 6700                       		beq.s	locret_11038
00011860 5211                       		addq.b	#1,(a1)
00011862 7200                       		moveq	#0,d1
00011864 1219                       		move.b	(a1)+,d1
00011866 4841                       		swap	d1
00011868 E289                       		lsr.l	#1,d1
0001186A 2401                       		move.l	d1,d2
0001186C E289                       		lsr.l	#1,d1
0001186E 2601                       		move.l	d1,d3
00011870 D682                       		add.l	d2,d3
00011872 4841                       		swap	d1
00011874 4842                       		swap	d2
00011876 4843                       		swap	d3
00011878 12C3                       		move.b	d3,(a1)+
0001187A 12C2                       		move.b	d2,(a1)+
0001187C 12C1                       		move.b	d1,(a1)+
0001187E                            
0001187E                            locret_11038:
0001187E 4E75                       		rts	
00011880 4E75                       		rts	
00011882                            ; ===========================================================================
00011882                            ; ---------------------------------------------------------------------------
00011882                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011882                            ; ---------------------------------------------------------------------------
00011882                            Map_obj5B:
00011882                            	include "_maps\obj5B.asm"
00011882                            ; ---------------------------------------------------------------------------
00011882                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00011882                            ; ---------------------------------------------------------------------------
00011882 0000                       		dc.w byte_1103E-Map_obj5B
00011884 01                         byte_1103E:	dc.b 1
00011885 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
0001188A                            		even
0001188A                            		even
0001188A                            
0001188A                            ; ===========================================================================
0001188A                            ; ---------------------------------------------------------------------------
0001188A                            ; Object 5C - metal girders in foreground (SLZ)
0001188A                            ; ---------------------------------------------------------------------------
0001188A                            
0001188A                            Obj5C:					; XREF: Obj_Index
0001188A 7000                       		moveq	#0,d0
0001188C 1028 0024                  		move.b	$24(a0),d0
00011890 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00011894 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00011898                            ; ===========================================================================
00011898 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
0001189A 0000                       		dc.w Obj5C_Display-Obj5C_Index
0001189C                            ; ===========================================================================
0001189C                            
0001189C                            Obj5C_Main:				; XREF: Obj5C_Index
0001189C 5428 0024                  		addq.b	#2,$24(a0)
000118A0 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000118A8 317C 83CC 0002             		move.w	#$83CC,2(a0)
000118AE 117C 0010 0019             		move.b	#$10,$19(a0)
000118B4                            
000118B4                            Obj5C_Display:				; XREF: Obj5C_Index
000118B4 2238 F700                  		move.l	($FFFFF700).w,d1
000118B8 D281                       		add.l	d1,d1
000118BA 4841                       		swap	d1
000118BC 4441                       		neg.w	d1
000118BE 3141 0008                  		move.w	d1,8(a0)
000118C2 2238 F704                  		move.l	($FFFFF704).w,d1
000118C6 D281                       		add.l	d1,d1
000118C8 4841                       		swap	d1
000118CA 0241 003F                  		andi.w	#$3F,d1
000118CE 4441                       		neg.w	d1
000118D0 0641 0100                  		addi.w	#$100,d1
000118D4 3141 000A                  		move.w	d1,$A(a0)
000118D8 6000 C586                  		bra.w	DisplaySprite
000118DC                            ; ===========================================================================
000118DC                            ; ---------------------------------------------------------------------------
000118DC                            ; Sprite mappings - metal girders in foreground	(SLZ)
000118DC                            ; ---------------------------------------------------------------------------
000118DC                            Map_obj5C:
000118DC                            	include "_maps\obj5C.asm"
000118DC                            ; ---------------------------------------------------------------------------
000118DC                            ; Sprite mappings - metal girders in foreground	(SLZ)
000118DC                            ; ---------------------------------------------------------------------------
000118DC 0000                       		dc.w byte_11098-Map_obj5C
000118DE 09                         byte_11098:	dc.b 9
000118DF 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000118E4 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000118E9 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000118EE E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000118F3 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000118F8 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000118FD 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011902 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
00011907 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
0001190C                            		even
0001190C                            		even
0001190C                            
0001190C                            ; ===========================================================================
0001190C                            ; ---------------------------------------------------------------------------
0001190C                            ; Object 1B - water surface (LZ)
0001190C                            ; ---------------------------------------------------------------------------
0001190C                            
0001190C                            Obj1B:					; XREF: Obj_Index
0001190C 7000                       		moveq	#0,d0
0001190E 1028 0024                  		move.b	$24(a0),d0
00011912 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
00011916 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001191A                            ; ===========================================================================
0001191A 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
0001191C 0000                       		dc.w Obj1B_Action-Obj1B_Index
0001191E                            ; ===========================================================================
0001191E                            
0001191E                            Obj1B_Main:				; XREF: Obj1B_Index
0001191E 5428 0024                  		addq.b	#2,$24(a0)
00011922 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001192A 317C C300 0002             		move.w	#$C300,2(a0)
00011930 117C 0004 0001             		move.b	#4,1(a0)
00011936 117C 0080 0019             		move.b	#$80,$19(a0)
0001193C 3168 0008 0030             		move.w	8(a0),$30(a0)
00011942                            
00011942                            Obj1B_Action:				; XREF: Obj1B_Index
00011942 3238 F700                  		move.w	($FFFFF700).w,d1
00011946 0241 FFE0                  		andi.w	#$FFE0,d1
0001194A D268 0030                  		add.w	$30(a0),d1
0001194E 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011954 6700                       		beq.s	loc_11114
00011956 0641 0020                  		addi.w	#$20,d1
0001195A                            
0001195A                            loc_11114:
0001195A 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
0001195E 3238 F646                  		move.w	($FFFFF646).w,d1
00011962 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
00011966 4A28 0032                  		tst.b	$32(a0)
0001196A 6600                       		bne.s	Obj1B_Animate
0001196C 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011972 6700                       		beq.s	loc_1114A	; if not, branch
00011974 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00011978 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
0001197E 6000                       		bra.s	Obj1B_Display
00011980                            ; ===========================================================================
00011980                            
00011980                            Obj1B_Animate:				; XREF: loc_11114
00011980 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
00011984 6600                       		bne.s	Obj1B_Display	; if yes, branch
00011986 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
0001198C 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00011990                            
00011990                            loc_1114A:				; XREF: loc_11114
00011990 5328 001E                  		subq.b	#1,$1E(a0)
00011994 6A00                       		bpl.s	Obj1B_Display
00011996 117C 0007 001E             		move.b	#7,$1E(a0)
0001199C 5228 001A                  		addq.b	#1,$1A(a0)
000119A0 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000119A6 6500                       		bcs.s	Obj1B_Display
000119A8 117C 0000 001A             		move.b	#0,$1A(a0)
000119AE                            
000119AE                            Obj1B_Display:
000119AE 6000 C4B0                  		bra.w	DisplaySprite
000119B2                            ; ===========================================================================
000119B2                            ; ---------------------------------------------------------------------------
000119B2                            ; Sprite mappings - water surface (LZ)
000119B2                            ; ---------------------------------------------------------------------------
000119B2                            Map_obj1B:
000119B2                            	include "_maps\obj1B.asm"
000119B2                            ; ---------------------------------------------------------------------------
000119B2                            ; Sprite mappings - water surface (LZ)
000119B2                            ; ---------------------------------------------------------------------------
000119B2 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000119B6 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000119BA 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000119BE 03                         byte_11178:	dc.b 3
000119BF FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000119C4 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000119C9 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000119CE 03                         byte_11188:	dc.b 3
000119CF FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000119D4 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000119D9 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000119DE 03                         byte_11198:	dc.b 3
000119DF FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000119E4 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000119E9 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000119EE 06                         byte_111A8:	dc.b 6
000119EF FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000119F4 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000119F9 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000119FE FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011A03 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011A08 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011A0D 06                         byte_111C7:	dc.b 6
00011A0E FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011A13 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00011A18 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011A1D FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011A22 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011A27 FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011A2C 06                         byte_111E6:	dc.b 6
00011A2D FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011A32 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
00011A37 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011A3C FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011A41 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011A46 FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011A4C 00                         		even
00011A4C 00                         		even
00011A4C                            
00011A4C                            ; ===========================================================================
00011A4C                            ; ---------------------------------------------------------------------------
00011A4C                            ; Object 0B - pole that	breaks (LZ)
00011A4C                            ; ---------------------------------------------------------------------------
00011A4C                            
00011A4C                            Obj0B:					; XREF: Obj_Index
00011A4C 7000                       		moveq	#0,d0
00011A4E 1028 0024                  		move.b	$24(a0),d0
00011A52 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
00011A56 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00011A5A                            ; ===========================================================================
00011A5A 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011A5C 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011A5E 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011A60                            ; ===========================================================================
00011A60                            
00011A60                            Obj0B_Main:				; XREF: Obj0B_Index
00011A60 5428 0024                  		addq.b	#2,$24(a0)
00011A64 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011A6C 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011A72 117C 0004 0001             		move.b	#4,1(a0)
00011A78 117C 0008 0019             		move.b	#8,$19(a0)
00011A7E 117C 0004 0018             		move.b	#4,$18(a0)
00011A84 117C 00E1 0020             		move.b	#$E1,$20(a0)
00011A8A 7000                       		moveq	#0,d0
00011A8C 1028 0028                  		move.b	$28(a0),d0	; get object type
00011A90 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011A94 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00011A98                            
00011A98                            Obj0B_Action:				; XREF: Obj0B_Index
00011A98 4A28 0032                  		tst.b	$32(a0)
00011A9C 6700                       		beq.s	Obj0B_Grab
00011A9E 4A68 0030                  		tst.w	$30(a0)
00011AA2 6700                       		beq.s	Obj0B_MoveUp
00011AA4 5368 0030                  		subq.w	#1,$30(a0)
00011AA8 6600                       		bne.s	Obj0B_MoveUp
00011AAA 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00011AB0 6000                       		bra.s	Obj0B_Release
00011AB2                            ; ===========================================================================
00011AB2                            
00011AB2                            Obj0B_MoveUp:				; XREF: Obj0B_Action
00011AB2 43F8 D000                  		lea	($FFFFD000).w,a1
00011AB6 3028 000C                  		move.w	$C(a0),d0
00011ABA 0440 0018                  		subi.w	#$18,d0
00011ABE 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011AC4 6700                       		beq.s	Obj0B_MoveDown
00011AC6 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00011ACA B069 000C                  		cmp.w	$C(a1),d0
00011ACE 6500                       		bcs.s	Obj0B_MoveDown
00011AD0 3340 000C                  		move.w	d0,$C(a1)
00011AD4                            
00011AD4                            Obj0B_MoveDown:
00011AD4 0640 0024                  		addi.w	#$24,d0
00011AD8 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011ADE 6700                       		beq.s	Obj0B_LetGo
00011AE0 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011AE4 B069 000C                  		cmp.w	$C(a1),d0
00011AE8 6400                       		bcc.s	Obj0B_LetGo
00011AEA 3340 000C                  		move.w	d0,$C(a1)
00011AEE                            
00011AEE                            Obj0B_LetGo:
00011AEE 1038 F603                  		move.b	($FFFFF603).w,d0
00011AF2 0240 0070                  		andi.w	#$70,d0
00011AF6 6700                       		beq.s	Obj0B_Display
00011AF8                            
00011AF8                            Obj0B_Release:				; XREF: Obj0B_Action
00011AF8 4228 0020                  		clr.b	$20(a0)
00011AFC 5428 0024                  		addq.b	#2,$24(a0)
00011B00 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011B04 4238 F7C9                  		clr.b	($FFFFF7C9).w
00011B08 4228 0032                  		clr.b	$32(a0)
00011B0C 6000                       		bra.s	Obj0B_Display
00011B0E                            ; ===========================================================================
00011B0E                            
00011B0E                            Obj0B_Grab:				; XREF: Obj0B_Action
00011B0E 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011B12 6700                       		beq.s	Obj0B_Display	; if not, branch
00011B14 43F8 D000                  		lea	($FFFFD000).w,a1
00011B18 3028 0008                  		move.w	8(a0),d0
00011B1C 0640 0014                  		addi.w	#$14,d0
00011B20 B069 0008                  		cmp.w	8(a1),d0
00011B24 6400                       		bcc.s	Obj0B_Display
00011B26 4228 0021                  		clr.b	$21(a0)
00011B2A 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011B30 6400                       		bcc.s	Obj0B_Display
00011B32 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
00011B36 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00011B3A 3028 0008                  		move.w	8(a0),d0
00011B3E 0640 0014                  		addi.w	#$14,d0
00011B42 3340 0008                  		move.w	d0,8(a1)
00011B46 08A9 0000 0022             		bclr	#0,$22(a1)
00011B4C 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011B52 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00011B58 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011B5E 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011B64                            
00011B64                            Obj0B_Display:				; XREF: Obj0B_Index
00011B64 6000 E3A2                  		bra.w	MarkObjGone
00011B68                            ; ===========================================================================
00011B68                            ; ---------------------------------------------------------------------------
00011B68                            ; Sprite mappings - pole that breaks (LZ)
00011B68                            ; ---------------------------------------------------------------------------
00011B68                            Map_obj0B:
00011B68                            	include "_maps\obj0B.asm"
00011B68                            ; ---------------------------------------------------------------------------
00011B68                            ; Sprite mappings - pole that breaks (LZ)
00011B68                            ; ---------------------------------------------------------------------------
00011B68 0000                       		dc.w byte_11326-Map_obj0B
00011B6A 0000                       		dc.w byte_11331-Map_obj0B
00011B6C 02                         byte_11326:	dc.b 2			; normal pole
00011B6D E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011B72 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
00011B77 04                         byte_11331:	dc.b 4			; broken pole
00011B78 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00011B7D F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
00011B82 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
00011B87 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00011B8C                            		even
00011B8C                            		even
00011B8C                            
00011B8C                            ; ===========================================================================
00011B8C                            ; ---------------------------------------------------------------------------
00011B8C                            ; Object 0C - flapping door (LZ)
00011B8C                            ; ---------------------------------------------------------------------------
00011B8C                            
00011B8C                            Obj0C:					; XREF: Obj_Index
00011B8C 7000                       		moveq	#0,d0
00011B8E 1028 0024                  		move.b	$24(a0),d0
00011B92 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
00011B96 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00011B9A                            ; ===========================================================================
00011B9A 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00011B9C 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00011B9E                            ; ===========================================================================
00011B9E                            
00011B9E                            Obj0C_Main:				; XREF: Obj0C_Index
00011B9E 5428 0024                  		addq.b	#2,$24(a0)
00011BA2 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00011BAA 317C 4328 0002             		move.w	#$4328,2(a0)
00011BB0 0028 0004 0001             		ori.b	#4,1(a0)
00011BB6 117C 0028 0019             		move.b	#$28,$19(a0)
00011BBC 7000                       		moveq	#0,d0
00011BBE 1028 0028                  		move.b	$28(a0),d0	; get object type
00011BC2 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
00011BC6 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
00011BCA                            
00011BCA                            Obj0C_OpenClose:			; XREF: Obj0C_Index
00011BCA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011BCE 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011BD0 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
00011BD6 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011BDC 4A28 0001                  		tst.b	1(a0)
00011BE0 6A00                       		bpl.s	Obj0C_Solid
00011BE2 303C 00BB                  		move.w	#$BB,d0
00011BE6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play door sound
00011BEC                            
00011BEC                            Obj0C_Solid:
00011BEC 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011BF2 6100 92E6                  		bsr.w	AnimateSprite
00011BF6 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
00011BFA 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011BFE 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011C00 3038 D008                  		move.w	($FFFFD008).w,d0
00011C04 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
00011C08 6400                       		bcc.s	Obj0C_Display	; if yes, branch
00011C0A 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011C10 323C 0013                  		move.w	#$13,d1
00011C14 343C 0020                  		move.w	#$20,d2
00011C18 3602                       		move.w	d2,d3
00011C1A 5243                       		addq.w	#1,d3
00011C1C 3828 0008                  		move.w	8(a0),d4
00011C20 6100 E60E                  		bsr.w	SolidObject	; make the door	solid
00011C24                            
00011C24                            Obj0C_Display:
00011C24 6000 E2E2                  		bra.w	MarkObjGone
00011C28                            ; ===========================================================================
00011C28                            Ani_obj0C:
00011C28                            	include "_anim\obj0C.asm"
00011C28                            ; ---------------------------------------------------------------------------
00011C28                            ; Animation script - flapping door (LZ)
00011C28                            ; ---------------------------------------------------------------------------
00011C28 0000                       		dc.w byte_113E6-Ani_obj0C
00011C2A 0000                       		dc.w byte_113EC-Ani_obj0C
00011C2C 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011C32 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00011C38                            		even
00011C38                            		even
00011C38                            
00011C38                            ; ---------------------------------------------------------------------------
00011C38                            ; Sprite mappings - flapping door (LZ)
00011C38                            ; ---------------------------------------------------------------------------
00011C38                            Map_obj0C:
00011C38                            	include "_maps\obj0C.asm"
00011C38                            ; ---------------------------------------------------------------------------
00011C38                            ; Sprite mappings - flapping door (LZ)
00011C38                            ; ---------------------------------------------------------------------------
00011C38 0000                       		dc.w byte_113F8-Map_obj0C
00011C3A 0000                       		dc.w byte_11403-Map_obj0C
00011C3C 0000                       		dc.w byte_1140E-Map_obj0C
00011C3E 02                         byte_113F8:	dc.b 2
00011C3F E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011C44 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00011C49 02                         byte_11403:	dc.b 2
00011C4A DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011C4F 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011C54 02                         byte_1140E:	dc.b 2
00011C55 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00011C5A 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011C60 00                         		even
00011C60 00                         		even
00011C60                            
00011C60                            ; ===========================================================================
00011C60                            ; ---------------------------------------------------------------------------
00011C60                            ; Object 71 - invisible	solid blocks
00011C60                            ; ---------------------------------------------------------------------------
00011C60                            
00011C60                            Obj71:					; XREF: Obj_Index
00011C60 7000                       		moveq	#0,d0
00011C62 1028 0024                  		move.b	$24(a0),d0
00011C66 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00011C6A 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011C6E                            ; ===========================================================================
00011C6E 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011C70 0000                       		dc.w Obj71_Solid-Obj71_Index
00011C72                            ; ===========================================================================
00011C72                            
00011C72                            Obj71_Main:				; XREF: Obj71_Index
00011C72 5428 0024                  		addq.b	#2,$24(a0)
00011C76 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00011C7E 317C 8680 0002             		move.w	#$8680,2(a0)
00011C84 0028 0004 0001             		ori.b	#4,1(a0)
00011C8A 1028 0028                  		move.b	$28(a0),d0	; get object type
00011C8E 1200                       		move.b	d0,d1
00011C90 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
00011C94 0640 0010                  		addi.w	#$10,d0
00011C98 E248                       		lsr.w	#1,d0
00011C9A 1140 0019                  		move.b	d0,$19(a0)	; set object width
00011C9E 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
00011CA2 5241                       		addq.w	#1,d1
00011CA4 E749                       		lsl.w	#3,d1
00011CA6 1141 0016                  		move.b	d1,$16(a0)	; set object height
00011CAA                            
00011CAA                            Obj71_Solid:				; XREF: Obj71_Index
00011CAA 6100 C42E                  		bsr.w	ChkObjOnScreen
00011CAE 6600                       		bne.s	Obj71_ChkDel
00011CB0 7200                       		moveq	#0,d1
00011CB2 1228 0019                  		move.b	$19(a0),d1
00011CB6 0641 000B                  		addi.w	#$B,d1
00011CBA 7400                       		moveq	#0,d2
00011CBC 1428 0016                  		move.b	$16(a0),d2
00011CC0 3602                       		move.w	d2,d3
00011CC2 5243                       		addq.w	#1,d3
00011CC4 3828 0008                  		move.w	8(a0),d4
00011CC8 6100 E5A8                  		bsr.w	SolidObject71
00011CCC                            
00011CCC                            Obj71_ChkDel:
00011CCC 3028 0008                  		move.w	8(a0),d0
00011CD0 0240 FF80                  		andi.w	#$FF80,d0
00011CD4 3238 F700                  		move.w	($FFFFF700).w,d1
00011CD8 0441 0080                  		subi.w	#$80,d1
00011CDC 0241 FF80                  		andi.w	#$FF80,d1
00011CE0 9041                       		sub.w	d1,d0
00011CE2 0C40 0280                  		cmpi.w	#$280,d0
00011CE6 6200                       		bhi.s	Obj71_Delete
00011CE8 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011CEC 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011CEE 4EFA C170                  		jmp	DisplaySprite	; if yes, display the object
00011CF2                            ; ===========================================================================
00011CF2                            
00011CF2                            Obj71_NoDisplay:
00011CF2 4E75                       		rts	
00011CF4                            ; ===========================================================================
00011CF4                            
00011CF4                            Obj71_Delete:
00011CF4 4EFA C1A6                  		jmp	DeleteObject
00011CF8                            ; ===========================================================================
00011CF8                            ; ---------------------------------------------------------------------------
00011CF8                            ; Sprite mappings - invisible solid blocks
00011CF8                            ; ---------------------------------------------------------------------------
00011CF8                            Map_obj71:
00011CF8                            	include "_maps\obj71.asm"
00011CF8                            ; ---------------------------------------------------------------------------
00011CF8                            ; Sprite mappings - invisible solid blocks
00011CF8                            ; ---------------------------------------------------------------------------
00011CF8 0000                       		dc.w byte_114BC-Map_obj71
00011CFA 0000                       		dc.w byte_114D1-Map_obj71
00011CFC 0000                       		dc.w byte_114E6-Map_obj71
00011CFE 04                         byte_114BC:	dc.b 4
00011CFF F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011D04 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
00011D09 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011D0E 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011D13 04                         byte_114D1:	dc.b 4
00011D14 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00011D19 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011D1E 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011D23 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00011D28 04                         byte_114E6:	dc.b 4
00011D29 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011D2E E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011D33 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00011D38 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011D3E 00                         		even
00011D3E 00                         		even
00011D3E                            
00011D3E                            ; ===========================================================================
00011D3E                            ; ---------------------------------------------------------------------------
00011D3E                            ; Object 5D - fans (SLZ)
00011D3E                            ; ---------------------------------------------------------------------------
00011D3E                            
00011D3E                            Obj5D:					; XREF: Obj_Index
00011D3E 7000                       		moveq	#0,d0
00011D40 1028 0024                  		move.b	$24(a0),d0
00011D44 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00011D48 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011D4C                            ; ===========================================================================
00011D4C 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011D4E 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011D50                            ; ===========================================================================
00011D50                            
00011D50                            Obj5D_Main:				; XREF: Obj5D_Index
00011D50 5428 0024                  		addq.b	#2,$24(a0)
00011D54 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011D5C 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011D62 0028 0004 0001             		ori.b	#4,1(a0)
00011D68 117C 0010 0019             		move.b	#$10,$19(a0)
00011D6E 117C 0004 0018             		move.b	#4,$18(a0)
00011D74                            
00011D74                            Obj5D_Delay:				; XREF: Obj5D_Index
00011D74 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00011D7A 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00011D7C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011D80 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
00011D82 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00011D88 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00011D8E 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00011D90 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
00011D96                            
00011D96                            Obj5D_Blow:
00011D96 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00011D9A 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00011D9E 43F8 D000                  		lea	($FFFFD000).w,a1
00011DA2 3029 0008                  		move.w	8(a1),d0
00011DA6 9068 0008                  		sub.w	8(a0),d0
00011DAA 0828 0000 0022             		btst	#0,$22(a0)
00011DB0 6600                       		bne.s	Obj5D_ChkSonic
00011DB2 4440                       		neg.w	d0
00011DB4                            
00011DB4                            Obj5D_ChkSonic:
00011DB4 0640 0050                  		addi.w	#$50,d0
00011DB8 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011DBC 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011DBE 3229 000C                  		move.w	$C(a1),d1
00011DC2 0641 0060                  		addi.w	#$60,d1
00011DC6 9268 000C                  		sub.w	$C(a0),d1
00011DCA 6500                       		bcs.s	Obj5D_Animate
00011DCC 0C41 0070                  		cmpi.w	#$70,d1
00011DD0 6400                       		bcc.s	Obj5D_Animate
00011DD2 0440 0050                  		subi.w	#$50,d0
00011DD6 6400                       		bcc.s	loc_1159A
00011DD8 4640                       		not.w	d0
00011DDA D040                       		add.w	d0,d0
00011DDC                            
00011DDC                            loc_1159A:
00011DDC 0640 0060                  		addi.w	#$60,d0
00011DE0 0828 0000 0022             		btst	#0,$22(a0)
00011DE6 6600                       		bne.s	loc_115A8
00011DE8 4440                       		neg.w	d0
00011DEA                            
00011DEA                            loc_115A8:
00011DEA 4400                       		neg.b	d0
00011DEC E840                       		asr.w	#4,d0
00011DEE 0828 0000 0028             		btst	#0,$28(a0)
00011DF4 6700                       		beq.s	Obj5D_MoveSonic
00011DF6 4440                       		neg.w	d0
00011DF8                            
00011DF8                            Obj5D_MoveSonic:
00011DF8 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011DFC                            
00011DFC                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011DFC 5328 001E                  		subq.b	#1,$1E(a0)
00011E00 6A00                       		bpl.s	Obj5D_ChkDel
00011E02 117C 0000 001E             		move.b	#0,$1E(a0)
00011E08 5228 001B                  		addq.b	#1,$1B(a0)
00011E0C 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011E12 6500                       		bcs.s	loc_115D8
00011E14 117C 0000 001B             		move.b	#0,$1B(a0)
00011E1A                            
00011E1A                            loc_115D8:
00011E1A 7000                       		moveq	#0,d0
00011E1C 0828 0000 0028             		btst	#0,$28(a0)
00011E22 6700                       		beq.s	loc_115E4
00011E24 7002                       		moveq	#2,d0
00011E26                            
00011E26                            loc_115E4:
00011E26 D028 001B                  		add.b	$1B(a0),d0
00011E2A 1140 001A                  		move.b	d0,$1A(a0)
00011E2E                            
00011E2E                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011E2E 6100 C030                  		bsr.w	DisplaySprite
00011E32 3028 0008                  		move.w	8(a0),d0
00011E36 0240 FF80                  		andi.w	#$FF80,d0
00011E3A 3238 F700                  		move.w	($FFFFF700).w,d1
00011E3E 0441 0080                  		subi.w	#$80,d1
00011E42 0241 FF80                  		andi.w	#$FF80,d1
00011E46 9041                       		sub.w	d1,d0
00011E48 0C40 0280                  		cmpi.w	#$280,d0
00011E4C 6200 C04E                  		bhi.w	DeleteObject
00011E50 4E75                       		rts	
00011E52                            ; ===========================================================================
00011E52                            ; ---------------------------------------------------------------------------
00011E52                            ; Sprite mappings - fans (SLZ)
00011E52                            ; ---------------------------------------------------------------------------
00011E52                            Map_obj5D:
00011E52                            	include "_maps\obj5D.asm"
00011E52                            ; ---------------------------------------------------------------------------
00011E52                            ; Sprite mappings - fans (SLZ)
00011E52                            ; ---------------------------------------------------------------------------
00011E52 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
00011E56 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00011E5A 0000                       		dc.w byte_1161A-Map_obj5D
00011E5C 02                         byte_1161A:	dc.b 2
00011E5D F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011E62 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
00011E67 02                         byte_11625:	dc.b 2
00011E68 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011E6D 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011E72 02                         byte_11630:	dc.b 2
00011E73 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00011E78 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00011E7E 00                         		even
00011E7E 00                         		even
00011E7E                            
00011E7E                            ; ===========================================================================
00011E7E                            ; ---------------------------------------------------------------------------
00011E7E                            ; Object 5E - seesaws (SLZ)
00011E7E                            ; ---------------------------------------------------------------------------
00011E7E                            
00011E7E                            Obj5E:					; XREF: Obj_Index
00011E7E 7000                       		moveq	#0,d0
00011E80 1028 0024                  		move.b	$24(a0),d0
00011E84 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00011E88 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00011E8C 3028 0030                  		move.w	$30(a0),d0
00011E90 0240 FF80                  		andi.w	#$FF80,d0
00011E94 3238 F700                  		move.w	($FFFFF700).w,d1
00011E98 0441 0080                  		subi.w	#$80,d1
00011E9C 0241 FF80                  		andi.w	#$FF80,d1
00011EA0 9041                       		sub.w	d1,d0
00011EA2 6B00 BFF8                  		bmi.w	DeleteObject
00011EA6 0C40 0280                  		cmpi.w	#$280,d0
00011EAA 6200 BFF0                  		bhi.w	DeleteObject
00011EAE 6000 BFB0                  		bra.w	DisplaySprite
00011EB2                            ; ===========================================================================
00011EB2 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
00011EB4 0000                       		dc.w Obj5E_Slope-Obj5E_Index
00011EB6 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
00011EB8 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
00011EBA 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011EBC 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011EBE                            ; ===========================================================================
00011EBE                            
00011EBE                            Obj5E_Main:				; XREF: Obj5E_Index
00011EBE 5428 0024                  		addq.b	#2,$24(a0)
00011EC2 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
00011ECA 317C 0374 0002             		move.w	#$374,2(a0)
00011ED0 0028 0004 0001             		ori.b	#4,1(a0)
00011ED6 117C 0004 0018             		move.b	#4,$18(a0)
00011EDC 117C 0030 0019             		move.b	#$30,$19(a0)
00011EE2 3168 0008 0030             		move.w	8(a0),$30(a0)
00011EE8 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011EEC 6600                       		bne.s	loc_116D2	; if not, branch
00011EEE 6100 C40C                  		bsr.w	SingleObjLoad2
00011EF2 6600                       		bne.s	loc_116D2
00011EF4 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
00011EF8 5C29 0024                  		addq.b	#6,$24(a1)
00011EFC 3368 0008 0008             		move.w	8(a0),8(a1)
00011F02 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011F08 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011F0E 2348 003C                  		move.l	a0,$3C(a1)
00011F12                            
00011F12                            loc_116D2:
00011F12 0828 0000 0022             		btst	#0,$22(a0)
00011F18 6700                       		beq.s	loc_116E0
00011F1A 117C 0002 001A             		move.b	#2,$1A(a0)
00011F20                            
00011F20                            loc_116E0:
00011F20 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
00011F26                            
00011F26                            Obj5E_Slope:				; XREF: Obj5E_Index
00011F26 1228 003A                  		move.b	$3A(a0),d1
00011F2A 6100 0000                  		bsr.w	loc_11766
00011F2E 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011F34 0828 0000 001A             		btst	#0,$1A(a0)
00011F3A 6700                       		beq.s	loc_11702
00011F3C 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011F42                            
00011F42                            loc_11702:
00011F42 43F8 D000                  		lea	($FFFFD000).w,a1
00011F46 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011F4C 323C 0030                  		move.w	#$30,d1
00011F50 4EB9 0000 7B6E             		jsr	(SlopeObject).l
00011F56 4E75                       		rts	
00011F58                            ; ===========================================================================
00011F58                            
00011F58                            Obj5E_Slope2:				; XREF: Obj5E_Index
00011F58 6100 0000                  		bsr.w	loc_1174A
00011F5C 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011F62 0828 0000 001A             		btst	#0,$1A(a0)
00011F68 6700                       		beq.s	loc_11730
00011F6A 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011F70                            
00011F70                            loc_11730:
00011F70 323C 0030                  		move.w	#$30,d1
00011F74 4EB9 0000 7C0E             		jsr	(ExitPlatform).l
00011F7A 323C 0030                  		move.w	#$30,d1
00011F7E 3428 0008                  		move.w	8(a0),d2
00011F82 4EB9 0000 8BFE             		jsr	SlopeObject2
00011F88 4E75                       		rts	
00011F8A                            ; ===========================================================================
00011F8A                            
00011F8A                            loc_1174A:				; XREF: Obj5E_Slope2
00011F8A 7202                       		moveq	#2,d1
00011F8C 43F8 D000                  		lea	($FFFFD000).w,a1
00011F90 3028 0008                  		move.w	8(a0),d0
00011F94 9069 0008                  		sub.w	8(a1),d0
00011F98 6400                       		bcc.s	loc_1175E
00011F9A 4440                       		neg.w	d0
00011F9C 7200                       		moveq	#0,d1
00011F9E                            
00011F9E                            loc_1175E:
00011F9E 0C40 0008                  		cmpi.w	#8,d0
00011FA2 6400                       		bcc.s	loc_11766
00011FA4 7201                       		moveq	#1,d1
00011FA6                            
00011FA6                            loc_11766:
00011FA6 1028 001A                  		move.b	$1A(a0),d0
00011FAA B001                       		cmp.b	d1,d0
00011FAC 6700                       		beq.s	locret_11790
00011FAE 6400                       		bcc.s	loc_11772
00011FB0 5400                       		addq.b	#2,d0
00011FB2                            
00011FB2                            loc_11772:
00011FB2 5300                       		subq.b	#1,d0
00011FB4 1140 001A                  		move.b	d0,$1A(a0)
00011FB8 1141 003A                  		move.b	d1,$3A(a0)
00011FBC 08A8 0000 0001             		bclr	#0,1(a0)
00011FC2 0828 0001 001A             		btst	#1,$1A(a0)
00011FC8 6700                       		beq.s	locret_11790
00011FCA 08E8 0000 0001             		bset	#0,1(a0)
00011FD0                            
00011FD0                            locret_11790:
00011FD0 4E75                       		rts	
00011FD2                            ; ===========================================================================
00011FD2                            
00011FD2                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011FD2 5428 0024                  		addq.b	#2,$24(a0)
00011FD6 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011FDE 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011FE4 0028 0004 0001             		ori.b	#4,1(a0)
00011FEA 117C 0004 0018             		move.b	#4,$18(a0)
00011FF0 117C 008B 0020             		move.b	#$8B,$20(a0)
00011FF6 117C 000C 0019             		move.b	#$C,$19(a0)
00011FFC 3168 0008 0030             		move.w	8(a0),$30(a0)
00012002 0668 0028 0008             		addi.w	#$28,8(a0)
00012008 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001200E 117C 0001 001A             		move.b	#1,$1A(a0)
00012014 0828 0000 0022             		btst	#0,$22(a0)
0001201A 6700                       		beq.s	Obj5E_MoveSpike
0001201C 0468 0050 0008             		subi.w	#$50,8(a0)
00012022 117C 0002 003A             		move.b	#2,$3A(a0)
00012028                            
00012028                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012028 2268 003C                  		movea.l	$3C(a0),a1
0001202C 7000                       		moveq	#0,d0
0001202E 1028 003A                  		move.b	$3A(a0),d0
00012032 9029 003A                  		sub.b	$3A(a1),d0
00012036 6700                       		beq.s	loc_1183E
00012038 6400                       		bcc.s	loc_117FC
0001203A 4400                       		neg.b	d0
0001203C                            
0001203C                            loc_117FC:
0001203C 323C F7E8                  		move.w	#-$818,d1
00012040 343C FEEC                  		move.w	#-$114,d2
00012044 0C00 0001                  		cmpi.b	#1,d0
00012048 6700                       		beq.s	loc_11822
0001204A 323C F510                  		move.w	#-$AF0,d1
0001204E 343C FF34                  		move.w	#-$CC,d2
00012052 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012058 6D00                       		blt.s	loc_11822
0001205A 323C F200                  		move.w	#-$E00,d1
0001205E 343C FF60                  		move.w	#-$A0,d2
00012062                            
00012062                            loc_11822:
00012062 3141 0012                  		move.w	d1,$12(a0)
00012066 3142 0010                  		move.w	d2,$10(a0)
0001206A 3028 0008                  		move.w	8(a0),d0
0001206E 9068 0030                  		sub.w	$30(a0),d0
00012072 6400                       		bcc.s	loc_11838
00012074 4468 0010                  		neg.w	$10(a0)
00012078                            
00012078                            loc_11838:
00012078 5428 0024                  		addq.b	#2,$24(a0)
0001207C 6000                       		bra.s	Obj5E_SpikeFall
0001207E                            ; ===========================================================================
0001207E                            
0001207E                            loc_1183E:				; XREF: Obj5E_MoveSpike
0001207E 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00012084 7000                       		moveq	#0,d0
00012086 1029 001A                  		move.b	$1A(a1),d0
0001208A 343C 0028                  		move.w	#$28,d2
0001208E 3228 0008                  		move.w	8(a0),d1
00012092 9268 0030                  		sub.w	$30(a0),d1
00012096 6400                       		bcc.s	loc_1185C
00012098 4442                       		neg.w	d2
0001209A 5440                       		addq.w	#2,d0
0001209C                            
0001209C                            loc_1185C:
0001209C D040                       		add.w	d0,d0
0001209E 3228 0034                  		move.w	$34(a0),d1
000120A2 D272 0000                  		add.w	(a2,d0.w),d1
000120A6 3141 000C                  		move.w	d1,$C(a0)
000120AA D468 0030                  		add.w	$30(a0),d2
000120AE 3142 0008                  		move.w	d2,8(a0)
000120B2 4268 000E                  		clr.w	$E(a0)
000120B6 4268 000A                  		clr.w	$A(a0)
000120BA 4E75                       		rts	
000120BC                            ; ===========================================================================
000120BC                            
000120BC                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000120BC 4A68 0012                  		tst.w	$12(a0)
000120C0 6A00                       		bpl.s	loc_1189A
000120C2 6100 BD04                  		bsr.w	ObjectFall
000120C6 3028 0034                  		move.w	$34(a0),d0
000120CA 0440 002F                  		subi.w	#$2F,d0
000120CE B068 000C                  		cmp.w	$C(a0),d0
000120D2 6E00                       		bgt.s	locret_11898
000120D4 6100 BCF2                  		bsr.w	ObjectFall
000120D8                            
000120D8                            locret_11898:
000120D8 4E75                       		rts	
000120DA                            ; ===========================================================================
000120DA                            
000120DA                            loc_1189A:				; XREF: Obj5E_SpikeFall
000120DA 6100 BCEC                  		bsr.w	ObjectFall
000120DE 2268 003C                  		movea.l	$3C(a0),a1
000120E2 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000120E8 7000                       		moveq	#0,d0
000120EA 1029 001A                  		move.b	$1A(a1),d0
000120EE 3228 0008                  		move.w	8(a0),d1
000120F2 9268 0030                  		sub.w	$30(a0),d1
000120F6 6400                       		bcc.s	loc_118BA
000120F8 5440                       		addq.w	#2,d0
000120FA                            
000120FA                            loc_118BA:
000120FA D040                       		add.w	d0,d0
000120FC 3228 0034                  		move.w	$34(a0),d1
00012100 D272 0000                  		add.w	(a2,d0.w),d1
00012104 B268 000C                  		cmp.w	$C(a0),d1
00012108 6E00                       		bgt.s	locret_11938
0001210A 2268 003C                  		movea.l	$3C(a0),a1
0001210E 7202                       		moveq	#2,d1
00012110 4A68 0010                  		tst.w	$10(a0)
00012114 6B00                       		bmi.s	Obj5E_Spring
00012116 7200                       		moveq	#0,d1
00012118                            
00012118                            Obj5E_Spring:
00012118 1341 003A                  		move.b	d1,$3A(a1)
0001211C 1141 003A                  		move.b	d1,$3A(a0)
00012120 B229 001A                  		cmp.b	$1A(a1),d1
00012124 6700                       		beq.s	loc_1192C
00012126 08A9 0003 0022             		bclr	#3,$22(a1)
0001212C 6700                       		beq.s	loc_1192C
0001212E 4229 0025                  		clr.b	$25(a1)
00012132 137C 0002 0024             		move.b	#2,$24(a1)
00012138 45F8 D000                  		lea	($FFFFD000).w,a2
0001213C 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012142 446A 0012                  		neg.w	$12(a2)
00012146 08EA 0001 0022             		bset	#1,$22(a2)
0001214C 08AA 0003 0022             		bclr	#3,$22(a2)
00012152 422A 003C                  		clr.b	$3C(a2)
00012156 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
0001215C 157C 0002 0024             		move.b	#2,$24(a2)
00012162 303C 00CC                  		move.w	#$CC,d0
00012166 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play spring sound
0001216C                            
0001216C                            loc_1192C:
0001216C 4268 0010                  		clr.w	$10(a0)
00012170 4268 0012                  		clr.w	$12(a0)
00012174 5528 0024                  		subq.b	#2,$24(a0)
00012178                            
00012178                            locret_11938:
00012178 4E75                       		rts	
0001217A                            ; ===========================================================================
0001217A FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012184                            
00012184                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000121B4                            		even
000121B4                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
000121E4                            		even
000121E4                            ; ---------------------------------------------------------------------------
000121E4                            ; Sprite mappings - seesaws (SLZ)
000121E4                            ; ---------------------------------------------------------------------------
000121E4                            Map_obj5E:
000121E4                            	include "_maps\obj5E.asm"
000121E4                            ; ---------------------------------------------------------------------------
000121E4                            ; Sprite mappings - seesaws (SLZ)
000121E4                            ; ---------------------------------------------------------------------------
000121E4 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000121E8 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
000121EC 07                         byte_119AC:	dc.b 7
000121ED D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
000121F2 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
000121F7 E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
000121FC EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012201 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012206 F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001220B FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012210 04                         byte_119D0:	dc.b 4
00012211 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012216 E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001221B E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012220 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012226 00                         		even
00012226 00                         		even
00012226                            
00012226                            ; ---------------------------------------------------------------------------
00012226                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012226                            ; ---------------------------------------------------------------------------
00012226                            Map_obj5Ea:
00012226                            	include "_maps\obj5Eballs.asm"
00012226                            ; ---------------------------------------------------------------------------
00012226                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012226                            ; ---------------------------------------------------------------------------
00012226 0000                       		dc.w byte_119EA-Map_obj5Ea
00012228 0000                       		dc.w byte_119F0-Map_obj5Ea
0001222A 01                         byte_119EA:	dc.b 1
0001222B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012230 01                         byte_119F0:	dc.b 1
00012231 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012236                            		even
00012236                            		even
00012236                            
00012236                            ; ===========================================================================
00012236                            ; ---------------------------------------------------------------------------
00012236                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012236                            ; ---------------------------------------------------------------------------
00012236                            
00012236                            Obj5F:					; XREF: Obj_Index
00012236 7000                       		moveq	#0,d0
00012238 1028 0024                  		move.b	$24(a0),d0
0001223C 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012240 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012244                            ; ===========================================================================
00012244 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012246 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012248 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001224A 0000                       		dc.w Obj5F_End-Obj5F_Index
0001224C                            ; ===========================================================================
0001224C                            
0001224C                            Obj5F_Main:				; XREF: Obj5F_Index
0001224C 5428 0024                  		addq.b	#2,$24(a0)
00012250 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012258 317C 0400 0002             		move.w	#$400,2(a0)
0001225E 0028 0004 0001             		ori.b	#4,1(a0)
00012264 117C 0003 0018             		move.b	#3,$18(a0)
0001226A 117C 000C 0019             		move.b	#$C,$19(a0)
00012270 1028 0028                  		move.b	$28(a0),d0
00012274 6700                       		beq.s	loc_11A3C
00012276 1140 0024                  		move.b	d0,$24(a0)
0001227A 4E75                       		rts	
0001227C                            ; ===========================================================================
0001227C                            
0001227C                            loc_11A3C:
0001227C 117C 009A 0020             		move.b	#$9A,$20(a0)
00012282 0868 0000 0022             		bchg	#0,$22(a0)
00012288                            
00012288                            Obj5F_Action:				; XREF: Obj5F_Index
00012288 7000                       		moveq	#0,d0
0001228A 1028 0025                  		move.b	$25(a0),d0
0001228E 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012292 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012296 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
0001229C 6100 8C3C                  		bsr.w	AnimateSprite
000122A0 6000 DC66                  		bra.w	MarkObjGone
000122A4                            ; ===========================================================================
000122A4 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000122A6 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000122A8 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000122AA                            ; ===========================================================================
000122AA                            
000122AA                            Obj5F_Walk:				; XREF: Obj5F_Index2
000122AA 6100 0000                  		bsr.w	Obj5F_ChkSonic
000122AE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000122B2 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000122B4 5428 0025                  		addq.b	#2,$25(a0)
000122B8 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
000122BE 317C 0010 0010             		move.w	#$10,$10(a0)
000122C4 117C 0001 001C             		move.b	#1,$1C(a0)
000122CA 0868 0000 0022             		bchg	#0,$22(a0)
000122D0 6700                       		beq.s	locret_11A96
000122D2 4468 0010                  		neg.w	$10(a0)		; change direction
000122D6                            
000122D6                            locret_11A96:
000122D6 4E75                       		rts	
000122D8                            ; ===========================================================================
000122D8                            
000122D8                            Obj5F_Wait:				; XREF: Obj5F_Index2
000122D8 6100 0000                  		bsr.w	Obj5F_ChkSonic
000122DC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000122E0 6B00                       		bmi.s	loc_11AA8
000122E2 6100 BB56                  		bsr.w	SpeedToPos
000122E6 4E75                       		rts	
000122E8                            ; ===========================================================================
000122E8                            
000122E8                            loc_11AA8:
000122E8 5528 0025                  		subq.b	#2,$25(a0)
000122EC 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
000122F2 4268 0010                  		clr.w	$10(a0)		; stop walking
000122F6 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
000122FC 4E75                       		rts	
000122FE                            ; ===========================================================================
000122FE                            
000122FE                            Obj5F_Explode:				; XREF: Obj5F_Index2
000122FE 5368 0030                  		subq.w	#1,$30(a0)
00012302 6A00                       		bpl.s	locret_11AD0
00012304 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012308 117C 0000 0024             		move.b	#0,$24(a0)
0001230E                            
0001230E                            locret_11AD0:
0001230E 4E75                       		rts	
00012310                            ; ===========================================================================
00012310                            
00012310                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012310 3038 D008                  		move.w	($FFFFD008).w,d0
00012314 9068 0008                  		sub.w	8(a0),d0
00012318 6400                       		bcc.s	loc_11ADE
0001231A 4440                       		neg.w	d0
0001231C                            
0001231C                            loc_11ADE:
0001231C 0C40 0060                  		cmpi.w	#$60,d0
00012320 6400                       		bcc.s	locret_11B5E
00012322 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012326 9068 000C                  		sub.w	$C(a0),d0
0001232A 6400                       		bcc.s	Obj5F_MakeFuse
0001232C 4440                       		neg.w	d0
0001232E                            
0001232E                            Obj5F_MakeFuse:
0001232E 0C40 0060                  		cmpi.w	#$60,d0
00012332 6400                       		bcc.s	locret_11B5E
00012334 4A78 FE08                  		tst.w	($FFFFFE08).w
00012338 6600                       		bne.s	locret_11B5E
0001233A 117C 0004 0025             		move.b	#4,$25(a0)
00012340 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012346 4268 0010                  		clr.w	$10(a0)
0001234A 117C 0002 001C             		move.b	#2,$1C(a0)
00012350 6100 BFAA                  		bsr.w	SingleObjLoad2
00012354 6600                       		bne.s	locret_11B5E
00012356 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
0001235A 3368 0008 0008             		move.w	8(a0),8(a1)
00012360 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012366 3368 000C 0034             		move.w	$C(a0),$34(a1)
0001236C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012372 137C 0004 0028             		move.b	#4,$28(a1)
00012378 137C 0003 001C             		move.b	#3,$1C(a1)
0001237E 337C 0010 0012             		move.w	#$10,$12(a1)
00012384 0828 0001 0022             		btst	#1,$22(a0)
0001238A 6700                       		beq.s	loc_11B54
0001238C 4469 0012                  		neg.w	$12(a1)
00012390                            
00012390                            loc_11B54:
00012390 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012396 2348 003C                  		move.l	a0,$3C(a1)
0001239A                            
0001239A                            locret_11B5E:
0001239A 4E75                       		rts	
0001239C                            ; ===========================================================================
0001239C                            
0001239C                            Obj5F_Display:				; XREF: Obj5F_Index
0001239C 6100                       		bsr.s	loc_11B70
0001239E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000123A4 6100 8B34                  		bsr.w	AnimateSprite
000123A8 6000 DB5E                  		bra.w	MarkObjGone
000123AC                            ; ===========================================================================
000123AC                            
000123AC                            loc_11B70:
000123AC 5368 0030                  		subq.w	#1,$30(a0)
000123B0 6B00                       		bmi.s	loc_11B7C
000123B2 6100 BA86                  		bsr.w	SpeedToPos
000123B6 4E75                       		rts	
000123B8                            ; ===========================================================================
000123B8                            
000123B8                            loc_11B7C:
000123B8 4268 0030                  		clr.w	$30(a0)
000123BC 4228 0024                  		clr.b	$24(a0)
000123C0 3168 0034 000C             		move.w	$34(a0),$C(a0)
000123C6 7203                       		moveq	#3,d1
000123C8 2248                       		movea.l	a0,a1
000123CA 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
000123D0 6000                       		bra.s	Obj5F_MakeShrap
000123D2                            ; ===========================================================================
000123D2                            
000123D2                            Obj5F_Loop:
000123D2 6100 BF28                  		bsr.w	SingleObjLoad2
000123D6 6600                       		bne.s	loc_11BCE
000123D8                            
000123D8                            Obj5F_MakeShrap:			; XREF: loc_11B7C
000123D8 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
000123DC 3368 0008 0008             		move.w	8(a0),8(a1)
000123E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000123E8 137C 0006 0028             		move.b	#6,$28(a1)
000123EE 137C 0004 001C             		move.b	#4,$1C(a1)
000123F4 335A 0010                  		move.w	(a2)+,$10(a1)
000123F8 335A 0012                  		move.w	(a2)+,$12(a1)
000123FC 137C 0098 0020             		move.b	#$98,$20(a1)
00012402 08E9 0007 0001             		bset	#7,1(a1)
00012408                            
00012408                            loc_11BCE:
00012408 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
0001240C                            
0001240C 117C 0006 0024             		move.b	#6,$24(a0)
00012412                            
00012412                            Obj5F_End:				; XREF: Obj5F_Index
00012412 6100 BA26                  		bsr.w	SpeedToPos
00012416 0668 0018 0012             		addi.w	#$18,$12(a0)
0001241C 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012422 6100 8AB6                  		bsr.w	AnimateSprite
00012426 4A28 0001                  		tst.b	1(a0)
0001242A 6A00 BA70                  		bpl.w	DeleteObject
0001242E 6000 BA30                  		bra.w	DisplaySprite
00012432                            ; ===========================================================================
00012432 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012442                            
00012442                            Ani_obj5F:
00012442                            	include "_anim\obj5F.asm"
00012442                            ; ---------------------------------------------------------------------------
00012442                            ; Animation script - Bomb enemy
00012442                            ; ---------------------------------------------------------------------------
00012442 0000                       		dc.w byte_11C12-Ani_obj5F
00012444 0000                       		dc.w byte_11C16-Ani_obj5F
00012446 0000                       		dc.w byte_11C1C-Ani_obj5F
00012448 0000                       		dc.w byte_11C20-Ani_obj5F
0001244A 0000                       		dc.w byte_11C24-Ani_obj5F
0001244C 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012450 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012456 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
0001245A 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
0001245E 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012462                            		even
00012462                            		even
00012462                            
00012462                            ; ---------------------------------------------------------------------------
00012462                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012462                            ; ---------------------------------------------------------------------------
00012462                            Map_obj5F:
00012462                            	include "_maps\obj5F.asm"
00012462                            ; ---------------------------------------------------------------------------
00012462                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012462                            ; ---------------------------------------------------------------------------
00012462 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012466 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
0001246A 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
0001246E 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012472 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012476 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
0001247A 03                         byte_11C40:	dc.b 3
0001247B F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012480 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012485 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001248A 03                         byte_11C50:	dc.b 3
0001248B F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012490 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012495 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
0001249A 03                         byte_11C60:	dc.b 3
0001249B F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000124A0 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
000124A5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000124AA 03                         byte_11C70:	dc.b 3
000124AB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124B0 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
000124B5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124BA 03                         byte_11C80:	dc.b 3
000124BB F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
000124C0 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
000124C5 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
000124CA 03                         byte_11C90:	dc.b 3
000124CB F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124D0 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
000124D5 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
000124DA 02                         byte_11CA0:	dc.b 2
000124DB F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
000124E0 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000124E5 02                         byte_11CAB:	dc.b 2
000124E6 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
000124EB 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
000124F0 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
000124F1 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
000124F6 01                         byte_11CBC:	dc.b 1			; fuse
000124F7 E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
000124FC 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
000124FD FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012502 01                         byte_11CC8:	dc.b 1			; fireball
00012503 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012508                            		even
00012508                            		even
00012508                            
00012508                            ; ===========================================================================
00012508                            ; ---------------------------------------------------------------------------
00012508                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012508                            ; ---------------------------------------------------------------------------
00012508                            
00012508                            Obj60:					; XREF: Obj_Index
00012508 7000                       		moveq	#0,d0
0001250A 1028 0024                  		move.b	$24(a0),d0
0001250E 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012512 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012516                            ; ===========================================================================
00012516 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012518 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
0001251A 0000                       		dc.w Obj60_Display-Obj60_Index
0001251C 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
0001251E 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012520                            ; ===========================================================================
00012520                            
00012520                            Obj60_Main:				; XREF: Obj60_Index
00012520 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012528 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
0001252E 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012534 6700                       		beq.s	loc_11D02
00012536 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
0001253C                            
0001253C                            loc_11D02:
0001253C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012542 6600                       		bne.s	loc_11D10
00012544 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
0001254A                            
0001254A                            loc_11D10:
0001254A 0028 0004 0001             		ori.b	#4,1(a0)
00012550 117C 0004 0018             		move.b	#4,$18(a0)
00012556 117C 000B 0020             		move.b	#$B,$20(a0)
0001255C 117C 000C 0019             		move.b	#$C,$19(a0)
00012562 7400                       		moveq	#0,d2
00012564 45E8 0037                  		lea	$37(a0),a2
00012568 264A                       		movea.l	a2,a3
0001256A 524A                       		addq.w	#1,a2
0001256C 7203                       		moveq	#3,d1
0001256E                            
0001256E                            Obj60_MakeOrbs:
0001256E 6100 BD8C                  		bsr.w	SingleObjLoad2
00012572 6600                       		bne.s	loc_11D90
00012574 5213                       		addq.b	#1,(a3)
00012576 3A09                       		move.w	a1,d5
00012578 0445 D000                  		subi.w	#-$3000,d5
0001257C EC4D                       		lsr.w	#6,d5
0001257E 0245 007F                  		andi.w	#$7F,d5
00012582 14C5                       		move.b	d5,(a2)+
00012584 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012586 137C 0006 0024             		move.b	#6,$24(a1)
0001258C 2368 0004 0004             		move.l	4(a0),4(a1)
00012592 3368 0002 0002             		move.w	2(a0),2(a1)
00012598 0029 0004 0001             		ori.b	#4,1(a1)
0001259E 137C 0004 0018             		move.b	#4,$18(a1)
000125A4 137C 0008 0019             		move.b	#8,$19(a1)
000125AA 137C 0003 001A             		move.b	#3,$1A(a1)
000125B0 137C 0098 0020             		move.b	#$98,$20(a1)
000125B6 1342 0026                  		move.b	d2,$26(a1)
000125BA 0602 0040                  		addi.b	#$40,d2
000125BE 2348 003C                  		move.l	a0,$3C(a1)
000125C2 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
000125C6                            
000125C6                            loc_11D90:
000125C6 7001                       		moveq	#1,d0
000125C8 0828 0000 0022             		btst	#0,$22(a0)
000125CE 6700                       		beq.s	Obj60_Move
000125D0 4440                       		neg.w	d0
000125D2                            
000125D2                            Obj60_Move:
000125D2 1140 0036                  		move.b	d0,$36(a0)
000125D6 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
000125DC 5428 0024                  		addq.b	#2,$24(a0)
000125E0 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
000125E6 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
000125EC 6700                       		beq.s	locret_11DBC	; if not, branch
000125EE 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
000125F2                            
000125F2                            locret_11DBC:
000125F2 4E75                       		rts	
000125F4                            ; ===========================================================================
000125F4                            
000125F4                            Obj60_ChkSonic:				; XREF: Obj60_Index
000125F4 3038 D008                  		move.w	($FFFFD008).w,d0
000125F8 9068 0008                  		sub.w	8(a0),d0
000125FC 6400                       		bcc.s	loc_11DCA
000125FE 4440                       		neg.w	d0
00012600                            
00012600                            loc_11DCA:
00012600 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012604 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012606 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001260A 9068 000C                  		sub.w	$C(a0),d0
0001260E 6400                       		bcc.s	loc_11DDC
00012610 4440                       		neg.w	d0
00012612                            
00012612                            loc_11DDC:
00012612 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012616 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012618 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0001261C 6600                       		bne.s	Obj60_Animate	; if yes, branch
0001261E 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012624                            
00012624                            Obj60_Animate:
00012624 43F9 0000 0000             		lea	(Ani_obj60).l,a1
0001262A 6100 88AE                  		bsr.w	AnimateSprite
0001262E 6000 0000                  		bra.w	Obj60_ChkDel
00012632                            ; ===========================================================================
00012632                            
00012632                            Obj60_Display:				; XREF: Obj60_Index
00012632 6100 B806                  		bsr.w	SpeedToPos
00012636                            
00012636                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012636 3028 0008                  		move.w	8(a0),d0
0001263A 0240 FF80                  		andi.w	#$FF80,d0
0001263E 3238 F700                  		move.w	($FFFFF700).w,d1
00012642 0441 0080                  		subi.w	#$80,d1
00012646 0241 FF80                  		andi.w	#$FF80,d1
0001264A 9041                       		sub.w	d1,d0
0001264C 0C40 0280                  		cmpi.w	#$280,d0
00012650 6200 0000                  		bhi.w	Obj60_ChkGone
00012654 6000 B80A                  		bra.w	DisplaySprite
00012658                            ; ===========================================================================
00012658                            
00012658                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012658 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001265C 7000                       		moveq	#0,d0
0001265E 1028 0023                  		move.b	$23(a0),d0
00012662 6700                       		beq.s	loc_11E34
00012664 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001266A                            
0001266A                            loc_11E34:
0001266A 45E8 0037                  		lea	$37(a0),a2
0001266E 7400                       		moveq	#0,d2
00012670 141A                       		move.b	(a2)+,d2
00012672 5342                       		subq.w	#1,d2
00012674 6500                       		bcs.s	Obj60_Delete
00012676                            
00012676                            loc_11E40:
00012676 7000                       		moveq	#0,d0
00012678 101A                       		move.b	(a2)+,d0
0001267A ED48                       		lsl.w	#6,d0
0001267C 0680 00FF D000             		addi.l	#$FFD000,d0
00012682 2240                       		movea.l	d0,a1
00012684 6100 B818                  		bsr.w	DeleteObject2
00012688 51CA FFEC                  		dbf	d2,loc_11E40
0001268C                            
0001268C                            Obj60_Delete:
0001268C 6000 B80E                  		bra.w	DeleteObject
00012690                            ; ===========================================================================
00012690                            
00012690                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012690 2268 003C                  		movea.l	$3C(a0),a1
00012694 0C11 0060                  		cmpi.b	#$60,0(a1)
00012698 6600 B802                  		bne.w	DeleteObject
0001269C 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
000126A2 6600                       		bne.s	Obj60_Circle
000126A4 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
000126AA 6600                       		bne.s	Obj60_Circle
000126AC 5428 0024                  		addq.b	#2,$24(a0)
000126B0 5329 0037                  		subq.b	#1,$37(a1)
000126B4 6600                       		bne.s	Obj60_FireOrb
000126B6 5429 0024                  		addq.b	#2,$24(a1)
000126BA                            
000126BA                            Obj60_FireOrb:
000126BA 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
000126C0 0829 0000 0022             		btst	#0,$22(a1)
000126C6 6700                       		beq.s	Obj60_Display2
000126C8 4468 0010                  		neg.w	$10(a0)
000126CC                            
000126CC                            Obj60_Display2:
000126CC 6000 B792                  		bra.w	DisplaySprite
000126D0                            ; ===========================================================================
000126D0                            
000126D0                            Obj60_Circle:				; XREF: Obj60_MoveOrb
000126D0 1028 0026                  		move.b	$26(a0),d0
000126D4 4EB9 0000 2CFE             		jsr	(CalcSine).l
000126DA E841                       		asr.w	#4,d1
000126DC D269 0008                  		add.w	8(a1),d1
000126E0 3141 0008                  		move.w	d1,8(a0)
000126E4 E840                       		asr.w	#4,d0
000126E6 D069 000C                  		add.w	$C(a1),d0
000126EA 3140 000C                  		move.w	d0,$C(a0)
000126EE 1029 0036                  		move.b	$36(a1),d0
000126F2 D128 0026                  		add.b	d0,$26(a0)
000126F6 6000 B768                  		bra.w	DisplaySprite
000126FA                            ; ===========================================================================
000126FA                            
000126FA                            Obj60_ChkDel2:				; XREF: Obj60_Index
000126FA 6100 B73E                  		bsr.w	SpeedToPos
000126FE 4A28 0001                  		tst.b	1(a0)
00012702 6A00 B798                  		bpl.w	DeleteObject
00012706 6000 B758                  		bra.w	DisplaySprite
0001270A                            ; ===========================================================================
0001270A                            Ani_obj60:
0001270A                            	include "_anim\obj60.asm"
0001270A                            ; ---------------------------------------------------------------------------
0001270A                            ; Animation script - Orbinaut enemy
0001270A                            ; ---------------------------------------------------------------------------
0001270A 0000                       		dc.w byte_11EDA-Ani_obj60
0001270C 0000                       		dc.w byte_11EDE-Ani_obj60
0001270E 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012712 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00012718                            		even
00012718                            		even
00012718                            
00012718                            ; ---------------------------------------------------------------------------
00012718                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012718                            ; ---------------------------------------------------------------------------
00012718                            Map_obj60:
00012718                            	include "_maps\obj60.asm"
00012718                            ; ---------------------------------------------------------------------------
00012718                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00012718                            ; ---------------------------------------------------------------------------
00012718 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
0001271C 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012720 01                         byte_11EEC:	dc.b 1
00012721 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012726 01                         byte_11EF2:	dc.b 1
00012727 F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
0001272C 01                         byte_11EF8:	dc.b 1
0001272D F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012732 01                         byte_11EFE:	dc.b 1
00012733 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00012738                            		even
00012738                            		even
00012738                            
00012738                            ; ===========================================================================
00012738                            ; ---------------------------------------------------------------------------
00012738                            ; Object 16 - harpoon (LZ)
00012738                            ; ---------------------------------------------------------------------------
00012738                            
00012738                            Obj16:					; XREF: Obj_Index
00012738 7000                       		moveq	#0,d0
0001273A 1028 0024                  		move.b	$24(a0),d0
0001273E 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012742 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00012746                            ; ===========================================================================
00012746 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00012748 0000                       		dc.w Obj16_Move-Obj16_Index
0001274A 0000                       		dc.w Obj16_Wait-Obj16_Index
0001274C                            ; ===========================================================================
0001274C                            
0001274C                            Obj16_Main:				; XREF: Obj16_Index
0001274C 5428 0024                  		addq.b	#2,$24(a0)
00012750 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00012758 317C 03CC 0002             		move.w	#$3CC,2(a0)
0001275E 0028 0004 0001             		ori.b	#4,1(a0)
00012764 117C 0004 0018             		move.b	#4,$18(a0)
0001276A 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012770 117C 0014 0019             		move.b	#$14,$19(a0)
00012776 317C 003C 0030             		move.w	#60,$30(a0)
0001277C                            
0001277C                            Obj16_Move:				; XREF: Obj16_Index
0001277C 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00012782 6100 8756                  		bsr.w	AnimateSprite
00012786 7000                       		moveq	#0,d0
00012788 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
0001278C 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00012792 6000 D774                  		bra.w	MarkObjGone
00012796                            ; ===========================================================================
00012796 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
0001279C                            ; ===========================================================================
0001279C                            
0001279C                            Obj16_Wait:				; XREF: Obj16_Index
0001279C 5368 0030                  		subq.w	#1,$30(a0)
000127A0 6A00                       		bpl.s	Obj16_ChkDel
000127A2 317C 003C 0030             		move.w	#60,$30(a0)
000127A8 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000127AC 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000127B2                            
000127B2                            Obj16_ChkDel:
000127B2 6000 D754                  		bra.w	MarkObjGone
000127B6                            ; ===========================================================================
000127B6                            Ani_obj16:
000127B6                            	include "_anim\obj16.asm"
000127B6                            ; ---------------------------------------------------------------------------
000127B6                            ; Animation script - harpoon (LZ)
000127B6                            ; ---------------------------------------------------------------------------
000127B6 0000                       		dc.w byte_11F8A-Ani_obj16
000127B8 0000                       		dc.w byte_11F8E-Ani_obj16
000127BA 0000                       		dc.w byte_11F92-Ani_obj16
000127BC 0000                       		dc.w byte_11F96-Ani_obj16
000127BE 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000127C2 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000127C6 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000127CA 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000127CE                            		even
000127CE                            		even
000127CE                            
000127CE                            ; ---------------------------------------------------------------------------
000127CE                            ; Sprite mappings - harpoon (LZ)
000127CE                            ; ---------------------------------------------------------------------------
000127CE                            Map_obj16:
000127CE                            	include "_maps\obj16.asm"
000127CE                            ; ---------------------------------------------------------------------------
000127CE                            ; Sprite mappings - harpoon (LZ)
000127CE                            ; ---------------------------------------------------------------------------
000127CE 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000127D2 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000127D6 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000127DA 01                         byte_11FA6:	dc.b 1
000127DB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000127E0 01                         byte_11FAC:	dc.b 1
000127E1 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000127E6 02                         byte_11FB2:	dc.b 2
000127E7 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000127EC FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000127F1 01                         byte_11FBD:	dc.b 1
000127F2 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000127F7 01                         byte_11FC3:	dc.b 1
000127F8 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000127FD 02                         byte_11FC9:	dc.b 2
000127FE D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012803 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00012808                            		even
00012808                            		even
00012808                            
00012808                            ; ===========================================================================
00012808                            ; ---------------------------------------------------------------------------
00012808                            ; Object 61 - blocks (LZ)
00012808                            ; ---------------------------------------------------------------------------
00012808                            
00012808                            Obj61:					; XREF: Obj_Index
00012808 7000                       		moveq	#0,d0
0001280A 1028 0024                  		move.b	$24(a0),d0
0001280E 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012812 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00012816                            ; ===========================================================================
00012816 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00012818 0000                       		dc.w Obj61_Action-Obj61_Index
0001281A                            
0001281A 1010                       Obj61_Var:	dc.b $10, $10		; width, height
0001281C 200C                       		dc.b $20, $C
0001281E 1010                       		dc.b $10, $10
00012820 1010                       		dc.b $10, $10
00012822                            ; ===========================================================================
00012822                            
00012822                            Obj61_Main:				; XREF: Obj61_Index
00012822 5428 0024                  		addq.b	#2,$24(a0)
00012826 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
0001282E 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012834 117C 0004 0001             		move.b	#4,1(a0)
0001283A 117C 0003 0018             		move.b	#3,$18(a0)
00012840 7000                       		moveq	#0,d0
00012842 1028 0028                  		move.b	$28(a0),d0
00012846 E648                       		lsr.w	#3,d0
00012848 0240 000E                  		andi.w	#$E,d0
0001284C 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012850 115A 0019                  		move.b	(a2)+,$19(a0)
00012854 1152 0016                  		move.b	(a2),$16(a0)
00012858 E248                       		lsr.w	#1,d0
0001285A 1140 001A                  		move.b	d0,$1A(a0)
0001285E 3168 0008 0034             		move.w	8(a0),$34(a0)
00012864 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001286A 1028 0028                  		move.b	$28(a0),d0
0001286E 0200 000F                  		andi.b	#$F,d0
00012872 6700                       		beq.s	Obj61_Action
00012874 0C00 0007                  		cmpi.b	#7,d0
00012878 6700                       		beq.s	Obj61_Action
0001287A 117C 0001 0038             		move.b	#1,$38(a0)
00012880                            
00012880                            Obj61_Action:				; XREF: Obj61_Index
00012880 3F28 0008                  		move.w	8(a0),-(sp)
00012884 7000                       		moveq	#0,d0
00012886 1028 0028                  		move.b	$28(a0),d0
0001288A 0240 000F                  		andi.w	#$F,d0
0001288E D040                       		add.w	d0,d0
00012890 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00012894 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00012898 381F                       		move.w	(sp)+,d4
0001289A 4A28 0001                  		tst.b	1(a0)
0001289E 6A00                       		bpl.s	Obj61_ChkDel
000128A0 7200                       		moveq	#0,d1
000128A2 1228 0019                  		move.b	$19(a0),d1
000128A6 0641 000B                  		addi.w	#$B,d1
000128AA 7400                       		moveq	#0,d2
000128AC 1428 0016                  		move.b	$16(a0),d2
000128B0 3602                       		move.w	d2,d3
000128B2 5243                       		addq.w	#1,d3
000128B4 6100 D97A                  		bsr.w	SolidObject
000128B8 1144 003F                  		move.b	d4,$3F(a0)
000128BC 6100 0000                  		bsr.w	loc_12180
000128C0                            
000128C0                            Obj61_ChkDel:
000128C0 3028 0034                  		move.w	$34(a0),d0
000128C4 0240 FF80                  		andi.w	#$FF80,d0
000128C8 3238 F700                  		move.w	($FFFFF700).w,d1
000128CC 0441 0080                  		subi.w	#$80,d1
000128D0 0241 FF80                  		andi.w	#$FF80,d1
000128D4 9041                       		sub.w	d1,d0
000128D6 0C40 0280                  		cmpi.w	#$280,d0
000128DA 6200 B5C0                  		bhi.w	DeleteObject
000128DE 6000 B580                  		bra.w	DisplaySprite
000128E2                            ; ===========================================================================
000128E2 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000128E6 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000128EA 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000128EE 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000128F2                            ; ===========================================================================
000128F2                            
000128F2                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000128F2 4E75                       		rts	
000128F4                            ; ===========================================================================
000128F4                            
000128F4                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000128F4 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000128F8 6600                       		bne.s	loc_120D6	; if yes, branch
000128FA 0828 0003 0022             		btst	#3,$22(a0)
00012900 6700                       		beq.s	locret_120D4
00012902 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
00012908                            
00012908                            locret_120D4:
00012908 4E75                       		rts	
0001290A                            ; ===========================================================================
0001290A                            
0001290A                            loc_120D6:
0001290A 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
0001290E 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012910 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012914 4228 0038                  		clr.b	$38(a0)
00012918 4E75                       		rts	
0001291A                            ; ===========================================================================
0001291A                            
0001291A                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001291A 6100 B51E                  		bsr.w	SpeedToPos
0001291E 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012922 6100 0000                  		bsr.w	ObjHitFloor
00012926 4A41                       		tst.w	d1
00012928 6A00 0000                  		bpl.w	locret_12106
0001292C 5241                       		addq.w	#1,d1
0001292E D368 000C                  		add.w	d1,$C(a0)
00012932 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
00012936 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001293A                            
0001293A                            locret_12106:
0001293A 4E75                       		rts	
0001293C                            ; ===========================================================================
0001293C                            
0001293C                            Obj61_Type04:				; XREF: Obj61_TypeIndex
0001293C 6100 B4FC                  		bsr.w	SpeedToPos
00012940 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012944 6100 0000                  		bsr.w	ObjHitCeiling
00012948 4A41                       		tst.w	d1
0001294A 6A00 0000                  		bpl.w	locret_12126
0001294E 9368 000C                  		sub.w	d1,$C(a0)
00012952 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
00012956 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001295A                            
0001295A                            locret_12126:
0001295A 4E75                       		rts	
0001295C                            ; ===========================================================================
0001295C                            
0001295C                            Obj61_Type05:				; XREF: Obj61_TypeIndex
0001295C 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012962 6600                       		bne.s	locret_12138	; if not, branch
00012964 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00012968 4228 0038                  		clr.b	$38(a0)
0001296C                            
0001296C                            locret_12138:
0001296C 4E75                       		rts	
0001296E                            ; ===========================================================================
0001296E                            
0001296E                            Obj61_Type07:				; XREF: Obj61_TypeIndex
0001296E 3038 F646                  		move.w	($FFFFF646).w,d0
00012972 9068 000C                  		sub.w	$C(a0),d0
00012976 6700                       		beq.s	locret_1217E
00012978 6400                       		bcc.s	loc_12162
0001297A 0C40 FFFE                  		cmpi.w	#-2,d0
0001297E 6C00                       		bge.s	loc_1214E
00012980 70FE                       		moveq	#-2,d0
00012982                            
00012982                            loc_1214E:
00012982 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
00012986 6100 0000                  		bsr.w	ObjHitCeiling
0001298A 4A41                       		tst.w	d1
0001298C 6A00 0000                  		bpl.w	locret_12160
00012990 9368 000C                  		sub.w	d1,$C(a0)
00012994                            
00012994                            locret_12160:
00012994 4E75                       		rts	
00012996                            ; ===========================================================================
00012996                            
00012996                            loc_12162:				; XREF: Obj61_Type07
00012996 0C40 0002                  		cmpi.w	#2,d0
0001299A 6F00                       		ble.s	loc_1216A
0001299C 7002                       		moveq	#2,d0
0001299E                            
0001299E                            loc_1216A:
0001299E D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000129A2 6100 0000                  		bsr.w	ObjHitFloor
000129A6 4A41                       		tst.w	d1
000129A8 6A00 0000                  		bpl.w	locret_1217E
000129AC 5241                       		addq.w	#1,d1
000129AE D368 000C                  		add.w	d1,$C(a0)
000129B2                            
000129B2                            locret_1217E:
000129B2 4E75                       		rts	
000129B4                            ; ===========================================================================
000129B4                            
000129B4                            loc_12180:				; XREF: Obj61_Action
000129B4 4A28 0038                  		tst.b	$38(a0)
000129B8 6700                       		beq.s	locret_121C0
000129BA 0828 0003 0022             		btst	#3,$22(a0)
000129C0 6600                       		bne.s	loc_1219A
000129C2 4A28 003E                  		tst.b	$3E(a0)
000129C6 6700                       		beq.s	locret_121C0
000129C8 5928 003E                  		subq.b	#4,$3E(a0)
000129CC 6000                       		bra.s	loc_121A6
000129CE                            ; ===========================================================================
000129CE                            
000129CE                            loc_1219A:
000129CE 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000129D4 6700                       		beq.s	locret_121C0
000129D6 5828 003E                  		addq.b	#4,$3E(a0)
000129DA                            
000129DA                            loc_121A6:
000129DA 1028 003E                  		move.b	$3E(a0),d0
000129DE 4EB9 0000 2CFE             		jsr	(CalcSine).l
000129E4 323C 0400                  		move.w	#$400,d1
000129E8 C1C1                       		muls.w	d1,d0
000129EA 4840                       		swap	d0
000129EC D068 0030                  		add.w	$30(a0),d0
000129F0 3140 000C                  		move.w	d0,$C(a0)
000129F4                            
000129F4                            locret_121C0:
000129F4 4E75                       		rts	
000129F6                            ; ===========================================================================
000129F6                            ; ---------------------------------------------------------------------------
000129F6                            ; Sprite mappings - blocks (LZ)
000129F6                            ; ---------------------------------------------------------------------------
000129F6                            Map_obj61:
000129F6                            	include "_maps\obj61.asm"
000129F6                            ; ---------------------------------------------------------------------------
000129F6                            ; Sprite mappings - blocks (LZ)
000129F6                            ; ---------------------------------------------------------------------------
000129F6 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000129FA 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000129FE 01                         byte_121CA:	dc.b 1
000129FF F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012A04 02                         byte_121D0:	dc.b 2
00012A05 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
00012A0A F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012A0F 01                         byte_121DB:	dc.b 1
00012A10 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012A15 01                         byte_121E1:	dc.b 1
00012A16 F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012A1C 00                         		even
00012A1C 00                         		even
00012A1C                            
00012A1C                            ; ===========================================================================
00012A1C                            ; ---------------------------------------------------------------------------
00012A1C                            ; Object 62 - gargoyle head (LZ)
00012A1C                            ; ---------------------------------------------------------------------------
00012A1C                            
00012A1C                            Obj62:					; XREF: Obj_Index
00012A1C 7000                       		moveq	#0,d0
00012A1E 1028 0024                  		move.b	$24(a0),d0
00012A22 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
00012A26 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00012A2A 6000 D4DC                  		bra.w	MarkObjGone
00012A2E                            ; ===========================================================================
00012A2E 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012A30 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012A32 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012A34 0000                       		dc.w Obj62_AniFire-Obj62_Index
00012A36                            
00012A36 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012A3E                            ; ===========================================================================
00012A3E                            
00012A3E                            Obj62_Main:				; XREF: Obj62_Index
00012A3E 5428 0024                  		addq.b	#2,$24(a0)
00012A42 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012A4A 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012A50 0028 0004 0001             		ori.b	#4,1(a0)
00012A56 117C 0003 0018             		move.b	#3,$18(a0)
00012A5C 117C 0010 0019             		move.b	#$10,$19(a0)
00012A62 1028 0028                  		move.b	$28(a0),d0	; get object type
00012A66 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00012A6A 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012A70 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012A76 0228 000F 0028             		andi.b	#$F,$28(a0)
00012A7C                            
00012A7C                            Obj62_MakeFire:				; XREF: Obj62_Index
00012A7C 5328 001E                  		subq.b	#1,$1E(a0)
00012A80 6600                       		bne.s	Obj62_NoFire
00012A82 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00012A88 6100 B650                  		bsr.w	ChkObjOnScreen
00012A8C 6600                       		bne.s	Obj62_NoFire
00012A8E 6100 B856                  		bsr.w	SingleObjLoad
00012A92 6600                       		bne.s	Obj62_NoFire
00012A94 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00012A98 5829 0024                  		addq.b	#4,$24(a1)
00012A9C 3368 0008 0008             		move.w	8(a0),8(a1)
00012AA2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012AA8 1368 0001 0001             		move.b	1(a0),1(a1)
00012AAE 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012AB4                            
00012AB4                            Obj62_NoFire:
00012AB4 4E75                       		rts	
00012AB6                            ; ===========================================================================
00012AB6                            
00012AB6                            Obj62_FireBall:				; XREF: Obj62_Index
00012AB6 5428 0024                  		addq.b	#2,$24(a0)
00012ABA 117C 0008 0016             		move.b	#8,$16(a0)
00012AC0 117C 0008 0017             		move.b	#8,$17(a0)
00012AC6 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012ACE 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012AD4 0028 0004 0001             		ori.b	#4,1(a0)
00012ADA 117C 0004 0018             		move.b	#4,$18(a0)
00012AE0 117C 0098 0020             		move.b	#$98,$20(a0)
00012AE6 117C 0008 0019             		move.b	#8,$19(a0)
00012AEC 117C 0002 001A             		move.b	#2,$1A(a0)
00012AF2 5068 000C                  		addq.w	#8,$C(a0)
00012AF6 317C 0200 0010             		move.w	#$200,$10(a0)
00012AFC 0828 0000 0022             		btst	#0,$22(a0)
00012B02 6600                       		bne.s	Obj62_Sound
00012B04 4468 0010                  		neg.w	$10(a0)
00012B08                            
00012B08                            Obj62_Sound:
00012B08 303C 00AE                  		move.w	#$AE,d0
00012B0C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012B12                            
00012B12                            Obj62_AniFire:				; XREF: Obj62_Index
00012B12 1038 FE05                  		move.b	($FFFFFE05).w,d0
00012B16 0200 0007                  		andi.b	#7,d0
00012B1A 6600                       		bne.s	Obj62_StopFire
00012B1C 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012B22                            
00012B22                            Obj62_StopFire:
00012B22 6100 B316                  		bsr.w	SpeedToPos
00012B26 0828 0000 0022             		btst	#0,$22(a0)
00012B2C 6600                       		bne.s	Obj62_StopFire2
00012B2E 76F8                       		moveq	#-8,d3
00012B30 6100 0000                  		bsr.w	ObjHitWallLeft
00012B34 4A41                       		tst.w	d1
00012B36 6B00 B364                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00012B3A 4E75                       		rts	
00012B3C                            ; ===========================================================================
00012B3C                            
00012B3C                            Obj62_StopFire2:
00012B3C 7608                       		moveq	#8,d3
00012B3E 6100 0000                  		bsr.w	ObjHitWallRight
00012B42 4A41                       		tst.w	d1
00012B44 6B00 B356                  		bmi.w	DeleteObject
00012B48 4E75                       		rts	
00012B4A                            ; ===========================================================================
00012B4A                            ; ---------------------------------------------------------------------------
00012B4A                            ; Sprite mappings - gargoyle head (LZ)
00012B4A                            ; ---------------------------------------------------------------------------
00012B4A                            Map_obj62:
00012B4A                            	include "_maps\obj62.asm"
00012B4A                            ; ---------------------------------------------------------------------------
00012B4A                            ; Sprite mappings - gargoyle head (LZ)
00012B4A                            ; ---------------------------------------------------------------------------
00012B4A 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012B4E 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012B52 03                         byte_12320:	dc.b 3
00012B53 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00012B58 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012B5D 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012B62 01                         byte_12330:	dc.b 1
00012B63 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00012B68 01                         byte_12336:	dc.b 1
00012B69 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012B6E                            		even
00012B6E                            		even
00012B6E                            
00012B6E                            ; ===========================================================================
00012B6E                            ; ---------------------------------------------------------------------------
00012B6E                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012B6E                            ; ---------------------------------------------------------------------------
00012B6E                            
00012B6E                            Obj63:					; XREF: Obj_Index
00012B6E 7000                       		moveq	#0,d0
00012B70 1028 0024                  		move.b	$24(a0),d0
00012B74 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00012B78 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00012B7C 3028 0030                  		move.w	$30(a0),d0
00012B80 0240 FF80                  		andi.w	#$FF80,d0
00012B84 3238 F700                  		move.w	($FFFFF700).w,d1
00012B88 0441 0080                  		subi.w	#$80,d1
00012B8C 0241 FF80                  		andi.w	#$FF80,d1
00012B90 9041                       		sub.w	d1,d0
00012B92 0C40 0280                  		cmpi.w	#$280,d0
00012B96 6200                       		bhi.s	loc_1236A
00012B98                            
00012B98                            Obj63_Display:				; XREF: loc_1236A
00012B98 6000 B2C6                  		bra.w	DisplaySprite
00012B9C                            ; ===========================================================================
00012B9C                            
00012B9C                            loc_1236A:				; XREF: Obj63
00012B9C 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
00012BA2 6600                       		bne.s	loc_12378
00012BA4 0C40 FF80                  		cmpi.w	#-$80,d0
00012BA8 64EE                       		bcc.s	Obj63_Display
00012BAA                            
00012BAA                            loc_12378:
00012BAA 1028 002F                  		move.b	$2F(a0),d0
00012BAE 6A00 B2EC                  		bpl.w	DeleteObject
00012BB2 0240 007F                  		andi.w	#$7F,d0
00012BB6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012BBA 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012BC0 6000 B2DA                  		bra.w	DeleteObject
00012BC4                            ; ===========================================================================
00012BC4 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
00012BC6 0000                       		dc.w loc_124B2-Obj63_Index
00012BC8 0000                       		dc.w loc_124C2-Obj63_Index
00012BCA 0000                       		dc.w loc_124DE-Obj63_Index
00012BCC                            ; ===========================================================================
00012BCC                            
00012BCC                            Obj63_Main:				; XREF: Obj63_Index
00012BCC 1028 0028                  		move.b	$28(a0),d0
00012BD0 6B00 0000                  		bmi.w	loc_12460
00012BD4 5428 0024                  		addq.b	#2,$24(a0)
00012BD8 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012BE0 317C 43F6 0002             		move.w	#$43F6,2(a0)
00012BE6 0028 0004 0001             		ori.b	#4,1(a0)
00012BEC 117C 0010 0019             		move.b	#$10,$19(a0)
00012BF2 117C 0004 0018             		move.b	#4,$18(a0)
00012BF8 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012BFE 6600                       		bne.s	loc_123E2
00012C00 5828 0024                  		addq.b	#4,$24(a0)
00012C04 317C 03F6 0002             		move.w	#$3F6,2(a0)
00012C0A 117C 0001 0018             		move.b	#1,$18(a0)
00012C10 6000 0000                  		bra.w	loc_124DE
00012C14                            ; ===========================================================================
00012C14                            
00012C14                            loc_123E2:
00012C14 117C 0004 001A             		move.b	#4,$1A(a0)
00012C1A 7000                       		moveq	#0,d0
00012C1C 1028 0028                  		move.b	$28(a0),d0
00012C20 3200                       		move.w	d0,d1
00012C22 E648                       		lsr.w	#3,d0
00012C24 0240 001E                  		andi.w	#$1E,d0
00012C28 45FA 0000                  		lea	Obj63_Data(pc),a2
00012C2C D4F2 0000                  		adda.w	(a2,d0.w),a2
00012C30 315A 0038                  		move.w	(a2)+,$38(a0)
00012C34 315A 0030                  		move.w	(a2)+,$30(a0)
00012C38 214A 003C                  		move.l	a2,$3C(a0)
00012C3C 0241 000F                  		andi.w	#$F,d1
00012C40 E549                       		lsl.w	#2,d1
00012C42 1141 0038                  		move.b	d1,$38(a0)
00012C46 117C 0004 003A             		move.b	#4,$3A(a0)
00012C4C 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012C50 6700                       		beq.s	loc_1244C
00012C52 117C 0001 003B             		move.b	#1,$3B(a0)
00012C58 4428 003A                  		neg.b	$3A(a0)
00012C5C 7200                       		moveq	#0,d1
00012C5E 1228 0038                  		move.b	$38(a0),d1
00012C62 D228 003A                  		add.b	$3A(a0),d1
00012C66 B228 0039                  		cmp.b	$39(a0),d1
00012C6A 6500                       		bcs.s	loc_12448
00012C6C 1001                       		move.b	d1,d0
00012C6E 7200                       		moveq	#0,d1
00012C70 4A00                       		tst.b	d0
00012C72 6A00                       		bpl.s	loc_12448
00012C74 1228 0039                  		move.b	$39(a0),d1
00012C78 5901                       		subq.b	#4,d1
00012C7A                            
00012C7A                            loc_12448:
00012C7A 1141 0038                  		move.b	d1,$38(a0)
00012C7E                            
00012C7E                            loc_1244C:
00012C7E 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00012C84 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00012C8A 6100 0000                  		bsr.w	Obj63_ChangeDir
00012C8E 6000 0000                  		bra.w	loc_124B2
00012C92                            ; ===========================================================================
00012C92                            
00012C92                            loc_12460:				; XREF: Obj63_Main
00012C92 1140 002F                  		move.b	d0,$2F(a0)
00012C96 0240 007F                  		andi.w	#$7F,d0
00012C9A 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00012C9E 08F2 0000 0000             		bset	#0,(a2,d0.w)
00012CA4 6600 B1F6                  		bne.w	DeleteObject
00012CA8 D040                       		add.w	d0,d0
00012CAA 0240 001E                  		andi.w	#$1E,d0
00012CAE 0640 0070                  		addi.w	#$70,d0
00012CB2 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00012CB8 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012CBC 321A                       		move.w	(a2)+,d1
00012CBE 2248                       		movea.l	a0,a1
00012CC0 6000                       		bra.s	Obj63_MakePtfms
00012CC2                            ; ===========================================================================
00012CC2                            
00012CC2                            Obj63_Loop:
00012CC2 6100 B622                  		bsr.w	SingleObjLoad
00012CC6 6600                       		bne.s	loc_124AA
00012CC8                            
00012CC8                            Obj63_MakePtfms:			; XREF: loc_12460
00012CC8 12BC 0063                  		move.b	#$63,0(a1)
00012CCC 335A 0008                  		move.w	(a2)+,8(a1)
00012CD0 335A 000C                  		move.w	(a2)+,$C(a1)
00012CD4 301A                       		move.w	(a2)+,d0
00012CD6 1340 0028                  		move.b	d0,$28(a1)
00012CDA                            
00012CDA                            loc_124AA:
00012CDA 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012CDE                            
00012CDE 588F                       		addq.l	#4,sp
00012CE0 4E75                       		rts	
00012CE2                            ; ===========================================================================
00012CE2                            
00012CE2                            loc_124B2:				; XREF: Obj63_Index
00012CE2 7200                       		moveq	#0,d1
00012CE4 1228 0019                  		move.b	$19(a0),d1
00012CE8 4EB9 0000 7A9A             		jsr	(PlatformObject).l
00012CEE 6000 0000                  		bra.w	sub_12502
00012CF2                            ; ===========================================================================
00012CF2                            
00012CF2                            loc_124C2:				; XREF: Obj63_Index
00012CF2 7200                       		moveq	#0,d1
00012CF4 1228 0019                  		move.b	$19(a0),d1
00012CF8 4EB9 0000 7C0E             		jsr	(ExitPlatform).l
00012CFE 3F28 0008                  		move.w	8(a0),-(sp)
00012D02 6100 0000                  		bsr.w	sub_12502
00012D06 341F                       		move.w	(sp)+,d2
00012D08 4EF9 0000 8178             		jmp	(MvSonicOnPtfm2).l
00012D0E                            ; ===========================================================================
00012D0E                            
00012D0E                            loc_124DE:				; XREF: Obj63_Index
00012D0E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012D12 0240 0003                  		andi.w	#3,d0
00012D16 6600                       		bne.s	loc_124FC
00012D18 7201                       		moveq	#1,d1
00012D1A 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012D1E 6700                       		beq.s	loc_124F2
00012D20 4401                       		neg.b	d1
00012D22                            
00012D22                            loc_124F2:
00012D22 D328 001A                  		add.b	d1,$1A(a0)
00012D26 0228 0003 001A             		andi.b	#3,$1A(a0)
00012D2C                            
00012D2C                            loc_124FC:
00012D2C 588F                       		addq.l	#4,sp
00012D2E 6000 D1D8                  		bra.w	MarkObjGone
00012D32                            
00012D32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012D32                            
00012D32                            
00012D32                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012D32 4A38 F7EE                  		tst.b	($FFFFF7EE).w
00012D36 6700                       		beq.s	loc_12520
00012D38 4A28 003B                  		tst.b	$3B(a0)
00012D3C 6600                       		bne.s	loc_12520
00012D3E 117C 0001 003B             		move.b	#1,$3B(a0)
00012D44 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
00012D4A 4428 003A                  		neg.b	$3A(a0)
00012D4E 6000                       		bra.s	loc_12534
00012D50                            ; ===========================================================================
00012D50                            
00012D50                            loc_12520:
00012D50 3028 0008                  		move.w	8(a0),d0
00012D54 B068 0034                  		cmp.w	$34(a0),d0
00012D58 6600                       		bne.s	loc_1256A
00012D5A 3028 000C                  		move.w	$C(a0),d0
00012D5E B068 0036                  		cmp.w	$36(a0),d0
00012D62 6600                       		bne.s	loc_1256A
00012D64                            
00012D64                            loc_12534:
00012D64 7200                       		moveq	#0,d1
00012D66 1228 0038                  		move.b	$38(a0),d1
00012D6A D228 003A                  		add.b	$3A(a0),d1
00012D6E B228 0039                  		cmp.b	$39(a0),d1
00012D72 6500                       		bcs.s	loc_12552
00012D74 1001                       		move.b	d1,d0
00012D76 7200                       		moveq	#0,d1
00012D78 4A00                       		tst.b	d0
00012D7A 6A00                       		bpl.s	loc_12552
00012D7C 1228 0039                  		move.b	$39(a0),d1
00012D80 5901                       		subq.b	#4,d1
00012D82                            
00012D82                            loc_12552:
00012D82 1141 0038                  		move.b	d1,$38(a0)
00012D86 2268 003C                  		movea.l	$3C(a0),a1
00012D8A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00012D90 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00012D96 6100 0000                  		bsr.w	Obj63_ChangeDir
00012D9A                            
00012D9A                            loc_1256A:
00012D9A 6100 B09E                  		bsr.w	SpeedToPos
00012D9E 4E75                       		rts	
00012DA0                            ; End of function sub_12502
00012DA0                            
00012DA0                            
00012DA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012DA0                            
00012DA0                            
00012DA0                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00012DA0 7000                       		moveq	#0,d0
00012DA2 343C FF00                  		move.w	#-$100,d2
00012DA6 3028 0008                  		move.w	8(a0),d0
00012DAA 9068 0034                  		sub.w	$34(a0),d0
00012DAE 6400                       		bcc.s	loc_12584
00012DB0 4440                       		neg.w	d0
00012DB2 4442                       		neg.w	d2
00012DB4                            
00012DB4                            loc_12584:
00012DB4 7200                       		moveq	#0,d1
00012DB6 363C FF00                  		move.w	#-$100,d3
00012DBA 3228 000C                  		move.w	$C(a0),d1
00012DBE 9268 0036                  		sub.w	$36(a0),d1
00012DC2 6400                       		bcc.s	loc_12598
00012DC4 4441                       		neg.w	d1
00012DC6 4443                       		neg.w	d3
00012DC8                            
00012DC8                            loc_12598:
00012DC8 B240                       		cmp.w	d0,d1
00012DCA 6500                       		bcs.s	loc_125C2
00012DCC 3028 0008                  		move.w	8(a0),d0
00012DD0 9068 0034                  		sub.w	$34(a0),d0
00012DD4 6700                       		beq.s	loc_125AE
00012DD6 48C0                       		ext.l	d0
00012DD8 E180                       		asl.l	#8,d0
00012DDA 81C1                       		divs.w	d1,d0
00012DDC 4440                       		neg.w	d0
00012DDE                            
00012DDE                            loc_125AE:
00012DDE 3140 0010                  		move.w	d0,$10(a0)
00012DE2 3143 0012                  		move.w	d3,$12(a0)
00012DE6 4840                       		swap	d0
00012DE8 3140 000A                  		move.w	d0,$A(a0)
00012DEC 4268 000E                  		clr.w	$E(a0)
00012DF0 4E75                       		rts	
00012DF2                            ; ===========================================================================
00012DF2                            
00012DF2                            loc_125C2:				; XREF: Obj63_ChangeDir
00012DF2 3228 000C                  		move.w	$C(a0),d1
00012DF6 9268 0036                  		sub.w	$36(a0),d1
00012DFA 6700                       		beq.s	loc_125D4
00012DFC 48C1                       		ext.l	d1
00012DFE E181                       		asl.l	#8,d1
00012E00 83C0                       		divs.w	d0,d1
00012E02 4441                       		neg.w	d1
00012E04                            
00012E04                            loc_125D4:
00012E04 3141 0012                  		move.w	d1,$12(a0)
00012E08 3142 0010                  		move.w	d2,$10(a0)
00012E0C 4841                       		swap	d1
00012E0E 3141 000E                  		move.w	d1,$E(a0)
00012E12 4268 000A                  		clr.w	$A(a0)
00012E16 4E75                       		rts	
00012E18                            ; End of function Obj63_ChangeDir
00012E18                            
00012E18                            ; ===========================================================================
00012E18 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
00012E1A 0000                       		dc.w word_12610-Obj63_Data
00012E1C 0000                       		dc.w word_12628-Obj63_Data
00012E1E 0000                       		dc.w word_1263C-Obj63_Data
00012E20 0000                       		dc.w word_12650-Obj63_Data
00012E22 0000                       		dc.w word_12668-Obj63_Data
00012E24 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012E34 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012E40 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012E50 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
00012E58 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012E6C 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00012E80 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
00012E98 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00012EAC                            
00012EAC                            ; ---------------------------------------------------------------------------
00012EAC                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012EAC                            ; ---------------------------------------------------------------------------
00012EAC                            Map_obj63:
00012EAC                            	include "_maps\obj63.asm"
00012EAC                            ; ---------------------------------------------------------------------------
00012EAC                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00012EAC                            ; ---------------------------------------------------------------------------
00012EAC 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00012EB0 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00012EB4 0000                       		dc.w byte_1269E-Map_obj63
00012EB6 01                         byte_12686:	dc.b 1
00012EB7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012EBC 01                         byte_1268C:	dc.b 1
00012EBD F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012EC2 01                         byte_12692:	dc.b 1
00012EC3 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
00012EC8 01                         byte_12698:	dc.b 1
00012EC9 F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012ECE 01                         byte_1269E:	dc.b 1
00012ECF F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012ED4                            		even
00012ED4                            		even
00012ED4                            
00012ED4                            ; ===========================================================================
00012ED4                            ; ---------------------------------------------------------------------------
00012ED4                            ; Object 64 - bubbles (LZ)
00012ED4                            ; ---------------------------------------------------------------------------
00012ED4                            
00012ED4                            Obj64:					; XREF: Obj_Index
00012ED4 7000                       		moveq	#0,d0
00012ED6 1028 0024                  		move.b	$24(a0),d0
00012EDA 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012EDE 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012EE2                            ; ===========================================================================
00012EE2 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012EE4 0000                       		dc.w Obj64_Animate-Obj64_Index
00012EE6 0000                       		dc.w Obj64_ChkWater-Obj64_Index
00012EE8 0000                       		dc.w Obj64_Display2-Obj64_Index
00012EEA 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012EEC 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012EEE                            ; ===========================================================================
00012EEE                            
00012EEE                            Obj64_Main:				; XREF: Obj64_Index
00012EEE 5428 0024                  		addq.b	#2,$24(a0)
00012EF2 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
00012EFA 317C 8348 0002             		move.w	#$8348,2(a0)
00012F00 117C 0084 0001             		move.b	#$84,1(a0)
00012F06 117C 0010 0019             		move.b	#$10,$19(a0)
00012F0C 117C 0001 0018             		move.b	#1,$18(a0)
00012F12 1028 0028                  		move.b	$28(a0),d0	; get object type
00012F16 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
00012F18 5028 0024                  		addq.b	#8,$24(a0)
00012F1C 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012F20 1140 0032                  		move.b	d0,$32(a0)
00012F24 1140 0033                  		move.b	d0,$33(a0)
00012F28 117C 0006 001C             		move.b	#6,$1C(a0)
00012F2E 6000 0000                  		bra.w	Obj64_BblMaker
00012F32                            ; ===========================================================================
00012F32                            
00012F32                            Obj64_Bubble:				; XREF: Obj64_Main
00012F32 1140 001C                  		move.b	d0,$1C(a0)
00012F36 3168 0008 0030             		move.w	8(a0),$30(a0)
00012F3C 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012F42 4EB9 0000 2CD8             		jsr	(RandomNumber).l
00012F48 1140 0026                  		move.b	d0,$26(a0)
00012F4C                            
00012F4C                            Obj64_Animate:				; XREF: Obj64_Index
00012F4C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012F52 4EB9 0000 AEDA             		jsr	AnimateSprite
00012F58 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012F5E 6600                       		bne.s	Obj64_ChkWater
00012F60 117C 0001 002E             		move.b	#1,$2E(a0)
00012F66                            
00012F66                            Obj64_ChkWater:				; XREF: Obj64_Index
00012F66 3038 F646                  		move.w	($FFFFF646).w,d0
00012F6A B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012F6E 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012F70                            
00012F70                            Obj64_Burst:				; XREF: Obj64_Wobble
00012F70 117C 0006 0024             		move.b	#6,$24(a0)
00012F76 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
00012F7A 6000 0000                  		bra.w	Obj64_Display2
00012F7E                            ; ===========================================================================
00012F7E                            
00012F7E                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00012F7E 1028 0026                  		move.b	$26(a0),d0
00012F82 5228 0026                  		addq.b	#1,$26(a0)
00012F86 0240 007F                  		andi.w	#$7F,d0
00012F8A 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00012F90 1031 0000                  		move.b	(a1,d0.w),d0
00012F94 4880                       		ext.w	d0
00012F96 D068 0030                  		add.w	$30(a0),d0
00012F9A 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00012F9E 4A28 002E                  		tst.b	$2E(a0)
00012FA2 6700                       		beq.s	Obj64_Display
00012FA4 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
00012FA8 6700                       		beq.s	Obj64_Display	; if not, branch
00012FAA                            
00012FAA 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00012FAE 303C 00AD                  		move.w	#$AD,d0
00012FB2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
00012FB8 43F8 D000                  		lea	($FFFFD000).w,a1
00012FBC 4269 0010                  		clr.w	$10(a1)
00012FC0 4269 0012                  		clr.w	$12(a1)
00012FC4 4269 0014                  		clr.w	$14(a1)
00012FC8 137C 0015 001C             		move.b	#$15,$1C(a1)
00012FCE 337C 0023 003E             		move.w	#$23,$3E(a1)
00012FD4 137C 0000 003C             		move.b	#0,$3C(a1)
00012FDA 08A9 0005 0022             		bclr	#5,$22(a1)
00012FE0 08A9 0004 0022             		bclr	#4,$22(a1)
00012FE6 0829 0002 0022             		btst	#2,$22(a1)
00012FEC 6700 FF82                  		beq.w	Obj64_Burst
00012FF0 08A9 0002 0022             		bclr	#2,$22(a1)
00012FF6 137C 0013 0016             		move.b	#$13,$16(a1)
00012FFC 137C 0009 0017             		move.b	#9,$17(a1)
00013002 5B69 000C                  		subq.w	#5,$C(a1)
00013006 6000 FF68                  		bra.w	Obj64_Burst
0001300A                            ; ===========================================================================
0001300A                            
0001300A                            Obj64_Display:				; XREF: Obj64_Wobble
0001300A 6100 AE2E                  		bsr.w	SpeedToPos
0001300E 4A28 0001                  		tst.b	1(a0)
00013012 6A00                       		bpl.s	Obj64_Delete
00013014 4EFA AE4A                  		jmp	DisplaySprite
00013018                            ; ===========================================================================
00013018                            
00013018                            Obj64_Delete:
00013018 4EFA AE82                  		jmp	DeleteObject
0001301C                            ; ===========================================================================
0001301C                            
0001301C                            Obj64_Display2:				; XREF: Obj64_Index
0001301C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013022 4EB9 0000 AEDA             		jsr	AnimateSprite
00013028 4A28 0001                  		tst.b	1(a0)
0001302C 6A00                       		bpl.s	Obj64_Delete2
0001302E 4EFA AE30                  		jmp	DisplaySprite
00013032                            ; ===========================================================================
00013032                            
00013032                            Obj64_Delete2:
00013032 4EFA AE68                  		jmp	DeleteObject
00013036                            ; ===========================================================================
00013036                            
00013036                            Obj64_Delete3:				; XREF: Obj64_Index
00013036 6000 AE64                  		bra.w	DeleteObject
0001303A                            ; ===========================================================================
0001303A                            
0001303A                            Obj64_BblMaker:				; XREF: Obj64_Index
0001303A 4A68 0036                  		tst.w	$36(a0)
0001303E 6600                       		bne.s	loc_12874
00013040 3038 F646                  		move.w	($FFFFF646).w,d0
00013044 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
00013048 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001304C 4A28 0001                  		tst.b	1(a0)
00013050 6A00 0000                  		bpl.w	Obj64_ChkDel
00013054 5368 0038                  		subq.w	#1,$38(a0)
00013058 6A00 0000                  		bpl.w	loc_12914
0001305C 317C 0001 0036             		move.w	#1,$36(a0)
00013062                            
00013062                            loc_1283A:
00013062 4EB9 0000 2CD8             		jsr	(RandomNumber).l
00013068 3200                       		move.w	d0,d1
0001306A 0240 0007                  		andi.w	#7,d0
0001306E 0C40 0006                  		cmpi.w	#6,d0
00013072 64EE                       		bcc.s	loc_1283A
00013074                            
00013074 1140 0034                  		move.b	d0,$34(a0)
00013078 0241 000C                  		andi.w	#$C,d1
0001307C 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013082 D2C1                       		adda.w	d1,a1
00013084 2149 003C                  		move.l	a1,$3C(a0)
00013088 5328 0032                  		subq.b	#1,$32(a0)
0001308C 6A00                       		bpl.s	loc_12872
0001308E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013094 08E8 0007 0036             		bset	#7,$36(a0)
0001309A                            
0001309A                            loc_12872:
0001309A 6000                       		bra.s	loc_1287C
0001309C                            ; ===========================================================================
0001309C                            
0001309C                            loc_12874:				; XREF: Obj64_BblMaker
0001309C 5368 0038                  		subq.w	#1,$38(a0)
000130A0 6A00 0000                  		bpl.w	loc_12914
000130A4                            
000130A4                            loc_1287C:
000130A4 4EB9 0000 2CD8             		jsr	(RandomNumber).l
000130AA 0240 001F                  		andi.w	#$1F,d0
000130AE 3140 0038                  		move.w	d0,$38(a0)
000130B2 6100 B232                  		bsr.w	SingleObjLoad
000130B6 6600                       		bne.s	loc_128F8
000130B8 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000130BC 3368 0008 0008             		move.w	8(a0),8(a1)
000130C2 4EB9 0000 2CD8             		jsr	(RandomNumber).l
000130C8 0240 000F                  		andi.w	#$F,d0
000130CC 5140                       		subq.w	#8,d0
000130CE D169 0008                  		add.w	d0,8(a1)
000130D2 3368 000C 000C             		move.w	$C(a0),$C(a1)
000130D8 7000                       		moveq	#0,d0
000130DA 1028 0034                  		move.b	$34(a0),d0
000130DE 2468 003C                  		movea.l	$3C(a0),a2
000130E2 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000130E8 0828 0007 0036             		btst	#7,$36(a0)
000130EE 6700                       		beq.s	loc_128F8
000130F0 4EB9 0000 2CD8             		jsr	(RandomNumber).l
000130F6 0240 0003                  		andi.w	#3,d0
000130FA 6600                       		bne.s	loc_128E4
000130FC 08E8 0006 0036             		bset	#6,$36(a0)
00013102 6600                       		bne.s	loc_128F8
00013104 137C 0002 0028             		move.b	#2,$28(a1)
0001310A                            
0001310A                            loc_128E4:
0001310A 4A28 0034                  		tst.b	$34(a0)
0001310E 6600                       		bne.s	loc_128F8
00013110 08E8 0006 0036             		bset	#6,$36(a0)
00013116 6600                       		bne.s	loc_128F8
00013118 137C 0002 0028             		move.b	#2,$28(a1)
0001311E                            
0001311E                            loc_128F8:
0001311E 5328 0034                  		subq.b	#1,$34(a0)
00013122 6A00                       		bpl.s	loc_12914
00013124 4EB9 0000 2CD8             		jsr	(RandomNumber).l
0001312A 0240 007F                  		andi.w	#$7F,d0
0001312E 0640 0080                  		addi.w	#$80,d0
00013132 D168 0038                  		add.w	d0,$38(a0)
00013136 4268 0036                  		clr.w	$36(a0)
0001313A                            
0001313A                            loc_12914:
0001313A 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013140 4EB9 0000 AEDA             		jsr	AnimateSprite
00013146                            
00013146                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013146 3028 0008                  		move.w	8(a0),d0
0001314A 0240 FF80                  		andi.w	#$FF80,d0
0001314E 3238 F700                  		move.w	($FFFFF700).w,d1
00013152 0441 0080                  		subi.w	#$80,d1
00013156 0241 FF80                  		andi.w	#$FF80,d1
0001315A 9041                       		sub.w	d1,d0
0001315C 0C40 0280                  		cmpi.w	#$280,d0
00013160 6200 AD3A                  		bhi.w	DeleteObject
00013164 3038 F646                  		move.w	($FFFFF646).w,d0
00013168 B068 000C                  		cmp.w	$C(a0),d0
0001316C 6500 ACF2                  		bcs.w	DisplaySprite
00013170 4E75                       		rts	
00013172                            ; ===========================================================================
00013172                            ; bubble production sequence
00013172                            
00013172                            ; 0 = small bubble, 1 =	large bubble
00013172                            
00013172 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013184                            
00013184                            ; ===========================================================================
00013184                            
00013184                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013184 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013188 6B00                       		bmi.s	loc_12998
0001318A 43F8 D000                  		lea	($FFFFD000).w,a1
0001318E 3029 0008                  		move.w	8(a1),d0
00013192 3228 0008                  		move.w	8(a0),d1
00013196 0441 0010                  		subi.w	#$10,d1
0001319A B240                       		cmp.w	d0,d1
0001319C 6400                       		bcc.s	loc_12998
0001319E 0641 0020                  		addi.w	#$20,d1
000131A2 B240                       		cmp.w	d0,d1
000131A4 6500                       		bcs.s	loc_12998
000131A6 3029 000C                  		move.w	$C(a1),d0
000131AA 3228 000C                  		move.w	$C(a0),d1
000131AE B240                       		cmp.w	d0,d1
000131B0 6400                       		bcc.s	loc_12998
000131B2 0641 0010                  		addi.w	#$10,d1
000131B6 B240                       		cmp.w	d0,d1
000131B8 6500                       		bcs.s	loc_12998
000131BA 7001                       		moveq	#1,d0
000131BC 4E75                       		rts	
000131BE                            ; ===========================================================================
000131BE                            
000131BE                            loc_12998:
000131BE 7000                       		moveq	#0,d0
000131C0 4E75                       		rts	
000131C2                            ; ===========================================================================
000131C2                            Ani_obj64:
000131C2                            	include "_anim\obj64.asm"
000131C2                            ; ---------------------------------------------------------------------------
000131C2                            ; Animation script - bubbles (LZ)
000131C2                            ; ---------------------------------------------------------------------------
000131C2 0000                       		dc.w byte_129AA-Ani_obj64
000131C4 0000                       		dc.w byte_129B0-Ani_obj64
000131C6 0000                       		dc.w byte_129B6-Ani_obj64
000131C8 0000                       		dc.w byte_129BE-Ani_obj64
000131CA 0000                       		dc.w byte_129BE-Ani_obj64
000131CC 0000                       		dc.w byte_129C0-Ani_obj64
000131CE 0000                       		dc.w byte_129C6-Ani_obj64
000131D0 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
000131D6 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
000131DC 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
000131E4 04FC                       byte_129BE:	dc.b 4,	$FC
000131E6 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
000131EC 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
000131F2 00                         		even
000131F2 00                         		even
000131F2                            
000131F2                            ; ---------------------------------------------------------------------------
000131F2                            ; Sprite mappings - bubbles (LZ)
000131F2                            ; ---------------------------------------------------------------------------
000131F2                            Map_obj64:
000131F2                            	include "_maps\obj64.asm"
000131F2                            ; ---------------------------------------------------------------------------
000131F2                            ; Sprite mappings - bubbles (LZ)
000131F2                            ; ---------------------------------------------------------------------------
000131F2 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
000131F6 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
000131FA 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
000131FE 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013202 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013206 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
0001320A 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
0001320E 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013212 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013216 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001321A 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
0001321E 0000                       		dc.w byte_12A9C-Map_obj64
00013220 01                         byte_129FA:	dc.b 1
00013221 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013226 01                         byte_12A00:	dc.b 1
00013227 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001322C 01                         byte_12A06:	dc.b 1
0001322D FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013232 01                         byte_12A0C:	dc.b 1
00013233 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013238 01                         byte_12A12:	dc.b 1
00013239 F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
0001323E 01                         byte_12A18:	dc.b 1
0001323F F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013244 01                         byte_12A1E:	dc.b 1
00013245 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001324A 04                         byte_12A24:	dc.b 4
0001324B F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013250 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013255 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001325A 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
0001325F 04                         byte_12A39:	dc.b 4
00013260 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013265 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
0001326A 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
0001326F 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013274 01                         byte_12A4E:	dc.b 1
00013275 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
0001327A 01                         byte_12A54:	dc.b 1
0001327B F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013280 01                         byte_12A5A:	dc.b 1
00013281 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013286 01                         byte_12A60:	dc.b 1
00013287 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
0001328C 01                         byte_12A66:	dc.b 1
0001328D F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013292 01                         byte_12A6C:	dc.b 1
00013293 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013298 01                         byte_12A72:	dc.b 1
00013299 F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
0001329E 01                         byte_12A78:	dc.b 1
0001329F F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000132A4 01                         byte_12A7E:	dc.b 1
000132A5 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000132AA 01                         byte_12A84:	dc.b 1
000132AB F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000132B0 01                         byte_12A8A:	dc.b 1
000132B1 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000132B6 01                         byte_12A90:	dc.b 1
000132B7 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000132BC 01                         byte_12A96:	dc.b 1
000132BD F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
000132C2 00                         byte_12A9C:	dc.b 0
000132C4 00                         		even
000132C4 00                         		even
000132C4                            
000132C4                            ; ===========================================================================
000132C4                            ; ---------------------------------------------------------------------------
000132C4                            ; Object 65 - waterfalls (LZ)
000132C4                            ; ---------------------------------------------------------------------------
000132C4                            
000132C4                            Obj65:					; XREF: Obj_Index
000132C4 7000                       		moveq	#0,d0
000132C6 1028 0024                  		move.b	$24(a0),d0
000132CA 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
000132CE 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
000132D2                            ; ===========================================================================
000132D2 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
000132D4 0000                       		dc.w Obj65_Animate-Obj65_Index
000132D6 0000                       		dc.w Obj65_ChkDel-Obj65_Index
000132D8 0000                       		dc.w Obj65_FixHeight-Obj65_Index
000132DA 0000                       		dc.w loc_12B36-Obj65_Index
000132DC                            ; ===========================================================================
000132DC                            
000132DC                            Obj65_Main:				; XREF: Obj65_Index
000132DC 5828 0024                  		addq.b	#4,$24(a0)
000132E0 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
000132E8 317C 4259 0002             		move.w	#$4259,2(a0)
000132EE 0028 0004 0001             		ori.b	#4,1(a0)
000132F4 117C 0018 0019             		move.b	#$18,$19(a0)
000132FA 117C 0001 0018             		move.b	#1,$18(a0)
00013300 1028 0028                  		move.b	$28(a0),d0	; get object type
00013304 6A00                       		bpl.s	loc_12AE6
00013306 08E8 0007 0002             		bset	#7,2(a0)
0001330C                            
0001330C                            loc_12AE6:
0001330C 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013310 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013314 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013318 6600                       		bne.s	Obj65_ChkDel	; if not, branch
0001331A 4228 0018                  		clr.b	$18(a0)
0001331E 5528 0024                  		subq.b	#2,$24(a0)
00013322 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013328 6700                       		beq.s	loc_12B0A	; if not, branch
0001332A 117C 0006 0024             		move.b	#6,$24(a0)
00013330                            
00013330                            loc_12B0A:
00013330 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013336 6700                       		beq.s	Obj65_Animate	; if not, branch
00013338 117C 0008 0024             		move.b	#8,$24(a0)
0001333E                            
0001333E                            Obj65_Animate:				; XREF: Obj65_Index
0001333E 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013344 4EB9 0000 AEDA             		jsr	AnimateSprite
0001334A                            
0001334A                            Obj65_ChkDel:				; XREF: Obj65_Index
0001334A 6000 CBBC                  		bra.w	MarkObjGone
0001334E                            ; ===========================================================================
0001334E                            
0001334E                            Obj65_FixHeight:			; XREF: Obj65_Index
0001334E 3038 F646                  		move.w	($FFFFF646).w,d0
00013352 0440 0010                  		subi.w	#$10,d0
00013356 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
0001335A 60E2                       		bra.s	Obj65_Animate
0001335C                            ; ===========================================================================
0001335C                            
0001335C                            loc_12B36:				; XREF: Obj65_Index
0001335C 08A8 0007 0002             		bclr	#7,2(a0)
00013362 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013368 6600                       		bne.s	Obj65_Animate2
0001336A 08E8 0007 0002             		bset	#7,2(a0)
00013370                            
00013370                            Obj65_Animate2:
00013370 60CC                       		bra.s	Obj65_Animate
00013372                            ; ===========================================================================
00013372                            Ani_obj65:
00013372                            	include "_anim\obj65.asm"
00013372                            ; ---------------------------------------------------------------------------
00013372                            ; Animation script - waterfall (LZ)
00013372                            ; ---------------------------------------------------------------------------
00013372 0000                       		dc.w byte_12B4E-Ani_obj65
00013374 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
0001337A 00                         		even
0001337A 00                         		even
0001337A                            
0001337A                            ; ---------------------------------------------------------------------------
0001337A                            ; Sprite mappings - waterfalls (LZ)
0001337A                            ; ---------------------------------------------------------------------------
0001337A                            Map_obj65:
0001337A                            	include "_maps\obj65.asm"
0001337A                            ; ---------------------------------------------------------------------------
0001337A                            ; Sprite mappings - waterfalls (LZ)
0001337A                            ; ---------------------------------------------------------------------------
0001337A 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
0001337E 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013382 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013386 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
0001338A 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
0001338E 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013392 01                         byte_12B6C:	dc.b 1
00013393 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013398 02                         byte_12B72:	dc.b 2
00013399 F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
0001339E 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
000133A3 02                         byte_12B7D:	dc.b 2
000133A4 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000133A9 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000133AE 01                         byte_12B88:	dc.b 1
000133AF F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
000133B4 02                         byte_12B8E:	dc.b 2
000133B5 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
000133BA 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
000133BF 01                         byte_12B99:	dc.b 1
000133C0 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
000133C5 01                         byte_12B9F:	dc.b 1
000133C6 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
000133CB 01                         byte_12BA5:	dc.b 1
000133CC F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
000133D1 02                         byte_12BAB:	dc.b 2
000133D2 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
000133D7 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
000133DC 02                         byte_12BB6:	dc.b 2
000133DD F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
000133E2 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
000133E7 02                         byte_12BC1:	dc.b 2
000133E8 F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
000133ED F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
000133F2 02                         byte_12BCC:	dc.b 2
000133F3 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
000133F8 F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
000133FE 00                         		even
000133FE 00                         		even
000133FE                            
000133FE                            ; ===========================================================================
000133FE                            ; ---------------------------------------------------------------------------
000133FE                            ; Object 01 - Sonic
000133FE                            ; ---------------------------------------------------------------------------
000133FE                            
000133FE                            Obj01:					; XREF: Obj_Index
000133FE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013402 6700                       		beq.s	Obj01_Normal	; if not, branch
00013404 4EF9 0000 0000             		jmp	DebugMode
0001340A                            ; ===========================================================================
0001340A                            
0001340A                            Obj01_Normal:
0001340A 7000                       		moveq	#0,d0
0001340C 1028 0024                  		move.b	$24(a0),d0
00013410 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013414 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013418                            ; ===========================================================================
00013418 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
0001341A 0000                       		dc.w Obj01_Control-Obj01_Index
0001341C 0000                       		dc.w Obj01_Hurt-Obj01_Index
0001341E 0000                       		dc.w Obj01_Death-Obj01_Index
00013420 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013422                            ; ===========================================================================
00013422                            
00013422                            Player_Maps:
00013422 0000 0000                  	dc.l	Map_Sonic
00013426 0000 0000                  	dc.l	Map_Sonic ; gronic
0001342A 0000 0000                  	dc.l	Map_Sonic ; anakama
0001342E                            	; insert player mapping here
0001342E                            	
0001342E                            Obj01_Main:				; XREF: Obj01_Index
0001342E 5428 0024                  		addq.b	#2,$24(a0)
00013432 117C 0013 0016             		move.b	#$13,$16(a0)
00013438 117C 0009 0017             		move.b	#9,$17(a0)
0001343E                            		
0001343E 7000                       		moveq	#0,d0
00013440 1038 FFE8                  		move.b	(v_character),d0
00013444 E548                       		lsl.w	#2,d0
00013446 43FA FFDA                  		lea 	Player_Maps(pc),a1
0001344A 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
00013450                            		
00013450 317C 0780 0002             		move.w	#$780,2(a0)
00013456 117C 0002 0018             		move.b	#2,$18(a0)
0001345C 117C 0018 0019             		move.b	#$18,$19(a0)
00013462 117C 0004 0001             		move.b	#4,1(a0)
00013468 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
0001346E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00013474 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
0001347A                            
0001347A                            Obj01_Control:				; XREF: Obj01_Index
0001347A 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
0001347E 6700                       		beq.s	loc_12C58	; if not, branch
00013480 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013486 6700                       		beq.s	loc_12C58	; if not, branch
00013488 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
0001348E 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013492 4E75                       		rts	
00013494                            ; ===========================================================================
00013494                            
00013494                            loc_12C58:
00013494 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013498 6600                       		bne.s	loc_12C64	; if yes, branch
0001349A 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
000134A0                            
000134A0                            loc_12C64:
000134A0 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
000134A6 6600                       		bne.s	loc_12C7E	; if yes, branch
000134A8 7000                       		moveq	#0,d0
000134AA 1028 0022                  		move.b	$22(a0),d0
000134AE 0240 0006                  		andi.w	#6,d0
000134B2 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
000134B6 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
000134BA                            
000134BA                            loc_12C7E:
000134BA 6100                       		bsr.s	Sonic_Display
000134BC 6100 0000                  		bsr.w	Sonic_RecordPos
000134C0 6100 0000                  		bsr.w	Sonic_Water
000134C4 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
000134CA 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
000134D0 4A38 F7C7                  		tst.b	($FFFFF7C7).w
000134D4 6700                       		beq.s	loc_12CA6
000134D6 4A28 001C                  		tst.b	$1C(a0)
000134DA 6600                       		bne.s	loc_12CA6
000134DC 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
000134E2                            
000134E2                            loc_12CA6:
000134E2 6100 0000                  		bsr.w	Sonic_Animate
000134E6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000134EA 6B00                       		bmi.s	loc_12CB6
000134EC 4EB9 0000 0000             		jsr	TouchResponse
000134F2                            
000134F2                            loc_12CB6:
000134F2 6100 0000                  		bsr.w	Sonic_Loops
000134F6 6100 0000                  		bsr.w	LoadSonicDynPLC
000134FA 4E75                       		rts	
000134FC                            ; ===========================================================================
000134FC 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
000134FE 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013500 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013502 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013504                            ; ---------------------------------------------------------------------------
00013504                            ; Music	to play	after invincibility wears off
00013504                            ; ---------------------------------------------------------------------------
00013504                            ; ===========================================================================
00013504                            
00013504                            Sonic_Display:				; XREF: loc_12C7E
00013504 3028 0030                  		move.w	$30(a0),d0
00013508 6700                       		beq.s	Obj01_Display
0001350A 5368 0030                  		subq.w	#1,$30(a0)
0001350E E648                       		lsr.w	#3,d0
00013510 6400                       		bcc.s	Obj01_ChkInvin
00013512                            
00013512                            Obj01_Display:
00013512 4EBA A94C                  		jsr	DisplaySprite
00013516                            
00013516                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013516                             
00013516                            Obj01_ChkInvin:
00013516 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001351A 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
0001351E 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013522 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013526 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
0001352A 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
0001352E 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013532 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013536 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
0001353C 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013540 7000                       		moveq	#0,d0
00013542 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013546                             
00013546 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0001354C 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
0001354E 43F9 0000 3C84             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013554 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013556                             
00013556                            Obj01_GetBgm2:
00013556 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0001355C 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
0001355E 43F9 0000 3C8C             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013564 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013566                             
00013566                            Obj01_GetBgm3:
00013566 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0001356C 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
0001356E 43F9 0000 3C92             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013574 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013576                             
00013576                            Obj01_GetBgm4:
00013576 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0001357C 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
0001357E 43F9 0000 3C98             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013584                             
00013584                            Obj01_PlayMusic:
00013584 1031 0000                  		move.b	(a1,d0.w),d0
00013588 4EB9 0000 15CC             		jsr	(PlaySound).l	; play normal music
0001358E                             
0001358E                            ; NineKode ends here.
0001358E                            
0001358E                            Obj01_RmvInvin:
0001358E 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013594                            
00013594                            Obj01_ChkShoes:
00013594 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013598 6700                       		beq.s	Obj01_ExitChk	; if not, branch
0001359A 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
0001359E 6700                       		beq.s	Obj01_ExitChk
000135A0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
000135A4 6600                       		bne.s	Obj01_ExitChk
000135A6 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
000135AC 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
000135B2 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
000135B8 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
000135BE 303C 00E3                  		move.w	#$E3,d0
000135C2 4EF9 0000 15CC             		jmp	(PlaySound).l	; run music at normal speed
000135C8                            ; ===========================================================================
000135C8                            
000135C8                            Obj01_ExitChk:
000135C8 4E75                       		rts	
000135CA                            
000135CA                            ; ---------------------------------------------------------------------------
000135CA                            ; Subroutine to	record Sonic's previous positions for invincibility stars
000135CA                            ; ---------------------------------------------------------------------------
000135CA                            
000135CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135CA                            
000135CA                            
000135CA                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
000135CA 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
000135CE 43F8 CB00                  		lea	($FFFFCB00).w,a1
000135D2 43F1 0000                  		lea	(a1,d0.w),a1
000135D6 32E8 0008                  		move.w	8(a0),(a1)+
000135DA 32E8 000C                  		move.w	$C(a0),(a1)+
000135DE 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
000135E2 4E75                       		rts	
000135E4                            ; End of function Sonic_RecordPos
000135E4                            
000135E4                            ; ---------------------------------------------------------------------------
000135E4                            ; Subroutine for Sonic when he's underwater
000135E4                            ; ---------------------------------------------------------------------------
000135E4                            
000135E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000135E4                            
000135E4                            
000135E4                            Sonic_Water:				; XREF: loc_12C7E
000135E4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000135EA 6700                       		beq.s	Obj01_InWater	; if yes, branch
000135EC                            
000135EC                            locret_12D80:
000135EC 4E75                       		rts	
000135EE                            ; ===========================================================================
000135EE                            
000135EE                            Obj01_InWater:
000135EE 3038 F646                  		move.w	($FFFFF646).w,d0
000135F2 B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
000135F6 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
000135F8 08E8 0006 0022             		bset	#6,$22(a0)
000135FE 66EC                       		bne.s	locret_12D80
00013600 6100 0000                  		bsr.w	ResumeMusic
00013604 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
0001360A 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013610 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013616 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
0001361C 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013622 E0E8 0010                  		asr	$10(a0)
00013626 E0E8 0012                  		asr	$12(a0)
0001362A E0E8 0012                  		asr	$12(a0)
0001362E 67BC                       		beq.s	locret_12D80
00013630 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013636 303C 00AA                  		move.w	#$AA,d0
0001363A 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play splash sound
00013640                            ; ===========================================================================
00013640                            
00013640                            Obj01_OutWater:
00013640 08A8 0006 0022             		bclr	#6,$22(a0)
00013646 67A4                       		beq.s	locret_12D80
00013648 6100 0000                  		bsr.w	ResumeMusic
0001364C 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013652 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013658 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
0001365E E1E8 0012                  		asl	$12(a0)
00013662 6700 FF88                  		beq.w	locret_12D80
00013666 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
0001366C 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013672 6E00                       		bgt.s	loc_12E0E
00013674 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
0001367A                            
0001367A                            loc_12E0E:
0001367A 303C 00AA                  		move.w	#$AA,d0
0001367E 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play splash sound
00013684                            ; End of function Sonic_Water
00013684                            
00013684                            ; ===========================================================================
00013684                            ; ---------------------------------------------------------------------------
00013684                            ; Modes	for controlling	Sonic
00013684                            ; ---------------------------------------------------------------------------
00013684                            
00013684                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013684 6100 0000                  		bsr.w	Sonic_Jump
00013688 6100 0000                  		bsr.w	Sonic_SlopeResist
0001368C 6100 0000                  		bsr.w	Sonic_Move
00013690 6100 0000                  		bsr.w	Sonic_Roll
00013694 6100 0000                  		bsr.w	Sonic_LevelBound
00013698 4EBA A7A0                  		jsr	SpeedToPos
0001369C 6100 0000                  		bsr.w	Sonic_AnglePos
000136A0 6100 0000                  		bsr.w	Sonic_SlopeRepel
000136A4 4E75                       		rts	
000136A6                            ; ===========================================================================
000136A6                            
000136A6                            Obj01_MdJump:				; XREF: Obj01_Modes
000136A6 6100 0000                  		bsr.w	Sonic_JumpHeight
000136AA 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000136AE 6100 0000                  		bsr.w	Sonic_LevelBound
000136B2 4EBA A714                  		jsr	ObjectFall
000136B6 0828 0006 0022             		btst	#6,$22(a0)
000136BC 6700                       		beq.s	loc_12E5C
000136BE 0468 0028 0012             		subi.w	#$28,$12(a0)
000136C4                            
000136C4                            loc_12E5C:
000136C4 6100 0000                  		bsr.w	Sonic_JumpAngle
000136C8 6100 0000                  		bsr.w	Sonic_Floor
000136CC 4E75                       		rts	
000136CE                            ; ===========================================================================
000136CE                            
000136CE                            Obj01_MdRoll:				; XREF: Obj01_Modes
000136CE 6100 0000                  		bsr.w	Sonic_Jump
000136D2 6100 0000                  		bsr.w	Sonic_RollRepel
000136D6 6100 0000                  		bsr.w	Sonic_RollSpeed
000136DA 6100 0000                  		bsr.w	Sonic_LevelBound
000136DE 4EBA A75A                  		jsr	SpeedToPos
000136E2 6100 0000                  		bsr.w	Sonic_AnglePos
000136E6 6100 0000                  		bsr.w	Sonic_SlopeRepel
000136EA 4E75                       		rts	
000136EC                            ; ===========================================================================
000136EC                            
000136EC                            Obj01_MdJump2:				; XREF: Obj01_Modes
000136EC 6100 0000                  		bsr.w	Sonic_JumpHeight
000136F0 6100 0000                  		bsr.w	Sonic_ChgJumpDir
000136F4 6100 0000                  		bsr.w	Sonic_LevelBound
000136F8 6100 0000                  		bsr.w	Sonic_AirUnroll
000136FC 4EBA A6CA                  		jsr	ObjectFall
00013700 0828 0006 0022             		btst	#6,$22(a0)
00013706 6700                       		beq.s	loc_12EA6
00013708 0468 0028 0012             		subi.w	#$28,$12(a0)
0001370E                            
0001370E                            loc_12EA6:
0001370E 6100 0000                  		bsr.w	Sonic_JumpAngle
00013712 6100 0000                  		bsr.w	Sonic_Floor
00013716 4E75                       		rts	
00013718                            ; ---------------------------------------------------------------------------
00013718                            ; Subroutine to	make Sonic walk/run
00013718                            ; ---------------------------------------------------------------------------
00013718                            
00013718                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013718                            
00013718                            
00013718                            Sonic_Move:				; XREF: Obj01_MdNormal
00013718 3C38 F760                  		move.w	($FFFFF760).w,d6
0001371C 3A38 F762                  		move.w	($FFFFF762).w,d5
00013720 3838 F764                  		move.w	($FFFFF764).w,d4
00013724 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013728 6600 0000                  		bne.w	loc_12FEE
0001372C 4A68 003E                  		tst.w	$3E(a0)
00013730 6600 0000                  		bne.w	Obj01_ResetScr
00013734 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001373A 6700                       		beq.s	Obj01_NotLeft	; if not, branch
0001373C 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013742 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
00013744 6100 0000                  		bsr.w	Sonic_MoveLeft
00013748                            
00013748                            Obj01_NotLeft:
00013748 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001374E 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013750 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013756 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013758 6100 0000                  		bsr.w	Sonic_MoveLeft
0001375C 6000                       		bra.s	Obj01_NotRight
0001375E                            
0001375E                            Obj01_MoveRight:
0001375E 6100 0000                  		bsr.w	Sonic_MoveRight
00013762                            
00013762                            Obj01_NotRight:
00013762 1028 0026                  		move.b	$26(a0),d0
00013766 0600 0020                  		addi.b	#$20,d0
0001376A 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
0001376E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013772 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013776 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001377A 08A8 0005 0022             		bclr	#5,$22(a0)
00013780 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013786 0828 0003 0022             		btst	#3,$22(a0)
0001378C 6700                       		beq.s	Sonic_Balance
0001378E 7000                       		moveq	#0,d0
00013790 1028 003D                  		move.b	$3D(a0),d0
00013794 ED48                       		lsl.w	#6,d0
00013796 43F8 D000                  		lea	($FFFFD000).w,a1
0001379A 43F1 0000                  		lea	(a1,d0.w),a1
0001379E 4A29 0022                  		tst.b	$22(a1)
000137A2 6B00                       		bmi.s	Sonic_LookUp
000137A4 7200                       		moveq	#0,d1
000137A6 1229 0019                  		move.b	$19(a1),d1
000137AA 3401                       		move.w	d1,d2
000137AC D442                       		add.w	d2,d2
000137AE 5942                       		subq.w	#4,d2
000137B0 D268 0008                  		add.w	8(a0),d1
000137B4 9269 0008                  		sub.w	8(a1),d1
000137B8 0C41 0004                  		cmpi.w	#4,d1
000137BC 6D00                       		blt.s	loc_12F6A
000137BE B242                       		cmp.w	d2,d1
000137C0 6C00                       		bge.s	loc_12F5A
000137C2 6000                       		bra.s	Sonic_LookUp
000137C4                            ; ===========================================================================
000137C4                            
000137C4                            Sonic_Balance:
000137C4 4EB9 0000 0000             		jsr	ObjHitFloor
000137CA 0C41 000C                  		cmpi.w	#$C,d1
000137CE 6D00                       		blt.s	Sonic_LookUp
000137D0 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000137D6 6600                       		bne.s	loc_12F62
000137D8                            
000137D8                            loc_12F5A:
000137D8 08A8 0000 0022             		bclr	#0,$22(a0)
000137DE 6000                       		bra.s	loc_12F70
000137E0                            ; ===========================================================================
000137E0                            
000137E0                            loc_12F62:
000137E0 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000137E6 6600                       		bne.s	Sonic_LookUp
000137E8                            
000137E8                            loc_12F6A:
000137E8 08E8 0000 0022             		bset	#0,$22(a0)
000137EE                            
000137EE                            loc_12F70:
000137EE 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000137F4 6000                       		bra.s	Obj01_ResetScr
000137F6                            ; ===========================================================================
000137F6                            
000137F6                            Sonic_LookUp:
000137F6 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000137FC 6700                       		beq.s	Sonic_Duck	; if not, branch
000137FE 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00013804 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
0001380A 6700                       		beq.s	loc_12FC2
0001380C 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00013810 6000                       		bra.s	loc_12FC2
00013812                            ; ===========================================================================
00013812                            
00013812                            Sonic_Duck:
00013812 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013818 6700                       		beq.s	Obj01_ResetScr	; if not, branch
0001381A 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00013820 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00013826 6700                       		beq.s	loc_12FC2
00013828 5578 F73E                  		subq.w	#2,($FFFFF73E).w
0001382C 6000                       		bra.s	loc_12FC2
0001382E                            ; ===========================================================================
0001382E                            
0001382E                            Obj01_ResetScr:
0001382E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00013834 6700                       		beq.s	loc_12FC2	; if yes, branch
00013836 6400                       		bcc.s	loc_12FBE
00013838 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
0001383C                            
0001383C                            loc_12FBE:
0001383C 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013840                            
00013840                            loc_12FC2:
00013840 1038 F602                  		move.b	($FFFFF602).w,d0
00013844 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013848 6600                       		bne.s	loc_12FEE	; if yes, branch
0001384A 3028 0014                  		move.w	$14(a0),d0
0001384E 6700                       		beq.s	loc_12FEE
00013850 6B00                       		bmi.s	loc_12FE2
00013852 9045                       		sub.w	d5,d0
00013854 6400                       		bcc.s	loc_12FDC
00013856 303C 0000                  		move.w	#0,d0
0001385A                            
0001385A                            loc_12FDC:
0001385A 3140 0014                  		move.w	d0,$14(a0)
0001385E 6000                       		bra.s	loc_12FEE
00013860                            ; ===========================================================================
00013860                            
00013860                            loc_12FE2:
00013860 D045                       		add.w	d5,d0
00013862 6400                       		bcc.s	loc_12FEA
00013864 303C 0000                  		move.w	#0,d0
00013868                            
00013868                            loc_12FEA:
00013868 3140 0014                  		move.w	d0,$14(a0)
0001386C                            
0001386C                            loc_12FEE:
0001386C 1028 0026                  		move.b	$26(a0),d0
00013870 4EB9 0000 2CFE             		jsr	(CalcSine).l
00013876 C3E8 0014                  		muls.w	$14(a0),d1
0001387A E081                       		asr.l	#8,d1
0001387C 3141 0010                  		move.w	d1,$10(a0)
00013880 C1E8 0014                  		muls.w	$14(a0),d0
00013884 E080                       		asr.l	#8,d0
00013886 3140 0012                  		move.w	d0,$12(a0)
0001388A                            
0001388A                            loc_1300C:
0001388A 1028 0026                  		move.b	$26(a0),d0
0001388E 0600 0040                  		addi.b	#$40,d0
00013892 6B00                       		bmi.s	locret_1307C
00013894 123C 0040                  		move.b	#$40,d1
00013898 4A68 0014                  		tst.w	$14(a0)
0001389C 6700                       		beq.s	locret_1307C
0001389E 6B00                       		bmi.s	loc_13024
000138A0 4441                       		neg.w	d1
000138A2                            
000138A2                            loc_13024:
000138A2 1028 0026                  		move.b	$26(a0),d0
000138A6 D001                       		add.b	d1,d0
000138A8 3F00                       		move.w	d0,-(sp)
000138AA 6100 0000                  		bsr.w	Sonic_WalkSpeed
000138AE 301F                       		move.w	(sp)+,d0
000138B0 4A41                       		tst.w	d1
000138B2 6A00                       		bpl.s	locret_1307C
000138B4 E141                       		asl.w	#8,d1
000138B6 0600 0020                  		addi.b	#$20,d0
000138BA 0200 00C0                  		andi.b	#$C0,d0
000138BE 6700                       		beq.s	loc_13078
000138C0 0C00 0040                  		cmpi.b	#$40,d0
000138C4 6700                       		beq.s	loc_13066
000138C6 0C00 0080                  		cmpi.b	#$80,d0
000138CA 6700                       		beq.s	loc_13060
000138CC D368 0010                  		add.w	d1,$10(a0)
000138D0 08E8 0005 0022             		bset	#5,$22(a0)
000138D6 317C 0000 0014             		move.w	#0,$14(a0)
000138DC 4E75                       		rts	
000138DE                            ; ===========================================================================
000138DE                            
000138DE                            loc_13060:
000138DE 9368 0012                  		sub.w	d1,$12(a0)
000138E2 4E75                       		rts	
000138E4                            ; ===========================================================================
000138E4                            
000138E4                            loc_13066:
000138E4 9368 0010                  		sub.w	d1,$10(a0)
000138E8 08E8 0005 0022             		bset	#5,$22(a0)
000138EE 317C 0000 0014             		move.w	#0,$14(a0)
000138F4 4E75                       		rts	
000138F6                            ; ===========================================================================
000138F6                            
000138F6                            loc_13078:
000138F6 D368 0012                  		add.w	d1,$12(a0)
000138FA                            
000138FA                            locret_1307C:
000138FA 4E75                       		rts	
000138FC                            ; End of function Sonic_Move
000138FC                            
000138FC                            
000138FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000138FC                            
000138FC                            
000138FC                            Sonic_MoveLeft:				; XREF: Sonic_Move
000138FC 3028 0014                  		move.w	$14(a0),d0
00013900 6700                       		beq.s	loc_13086
00013902 6A00                       		bpl.s	loc_130B2
00013904                            
00013904                            loc_13086:
00013904 08E8 0000 0022             		bset	#0,$22(a0)
0001390A 6600                       		bne.s	loc_1309A
0001390C 08A8 0005 0022             		bclr	#5,$22(a0)
00013912 117C 0001 001D             		move.b	#1,$1D(a0)
00013918                            
00013918                            loc_1309A:
00013918 9045                       		sub.w	d5,d0
0001391A 3206                       		move.w	d6,d1
0001391C 4441                       		neg.w	d1
0001391E B041                       		cmp.w	d1,d0
00013920 6E00                       		bgt.s	loc_130A6
00013922 3001                       		move.w	d1,d0
00013924                            
00013924                            loc_130A6:
00013924 3140 0014                  		move.w	d0,$14(a0)
00013928 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001392E 4E75                       		rts	
00013930                            ; ===========================================================================
00013930                            
00013930                            loc_130B2:				; XREF: Sonic_MoveLeft
00013930 9044                       		sub.w	d4,d0
00013932 6400                       		bcc.s	loc_130BA
00013934 303C FF80                  		move.w	#-$80,d0
00013938                            
00013938                            loc_130BA:
00013938 3140 0014                  		move.w	d0,$14(a0)
0001393C 1028 0026                  		move.b	$26(a0),d0
00013940 0600 0020                  		addi.b	#$20,d0
00013944 0200 00C0                  		andi.b	#$C0,d0
00013948 6600                       		bne.s	locret_130E8
0001394A 0C40 0400                  		cmpi.w	#$400,d0
0001394E 6D00                       		blt.s	locret_130E8
00013950 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013956 08A8 0000 0022             		bclr	#0,$22(a0)
0001395C 303C 00A4                  		move.w	#$A4,d0
00013960 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stopping sound
00013966                            
00013966                            locret_130E8:
00013966 4E75                       		rts	
00013968                            ; End of function Sonic_MoveLeft
00013968                            
00013968                            
00013968                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013968                            
00013968                            
00013968                            Sonic_MoveRight:			; XREF: Sonic_Move
00013968 3028 0014                  		move.w	$14(a0),d0
0001396C 6B00                       		bmi.s	loc_13118
0001396E 08A8 0000 0022             		bclr	#0,$22(a0)
00013974 6700                       		beq.s	loc_13104
00013976 08A8 0005 0022             		bclr	#5,$22(a0)
0001397C 117C 0001 001D             		move.b	#1,$1D(a0)
00013982                            
00013982                            loc_13104:
00013982 D045                       		add.w	d5,d0
00013984 B046                       		cmp.w	d6,d0
00013986 6D00                       		blt.s	loc_1310C
00013988 3006                       		move.w	d6,d0
0001398A                            
0001398A                            loc_1310C:
0001398A 3140 0014                  		move.w	d0,$14(a0)
0001398E 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013994 4E75                       		rts	
00013996                            ; ===========================================================================
00013996                            
00013996                            loc_13118:				; XREF: Sonic_MoveRight
00013996 D044                       		add.w	d4,d0
00013998 6400                       		bcc.s	loc_13120
0001399A 303C 0080                  		move.w	#$80,d0
0001399E                            
0001399E                            loc_13120:
0001399E 3140 0014                  		move.w	d0,$14(a0)
000139A2 1028 0026                  		move.b	$26(a0),d0
000139A6 0600 0020                  		addi.b	#$20,d0
000139AA 0200 00C0                  		andi.b	#$C0,d0
000139AE 6600                       		bne.s	locret_1314E
000139B0 0C40 FC00                  		cmpi.w	#-$400,d0
000139B4 6E00                       		bgt.s	locret_1314E
000139B6 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000139BC 08E8 0000 0022             		bset	#0,$22(a0)
000139C2 303C 00A4                  		move.w	#$A4,d0
000139C6 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play stopping sound
000139CC                            
000139CC                            locret_1314E:
000139CC 4E75                       		rts	
000139CE                            ; End of function Sonic_MoveRight
000139CE                            
000139CE                            ; ---------------------------------------------------------------------------
000139CE                            ; Subroutine to	change Sonic's speed as he rolls
000139CE                            ; ---------------------------------------------------------------------------
000139CE                            
000139CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139CE                            
000139CE                            
000139CE                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000139CE 3C38 F760                  		move.w	($FFFFF760).w,d6
000139D2 E346                       		asl.w	#1,d6
000139D4 3A38 F762                  		move.w	($FFFFF762).w,d5
000139D8 E245                       		asr.w	#1,d5
000139DA 3838 F764                  		move.w	($FFFFF764).w,d4
000139DE E444                       		asr.w	#2,d4
000139E0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000139E4 6600 0000                  		bne.w	loc_131CC
000139E8 4A68 003E                  		tst.w	$3E(a0)
000139EC 6600                       		bne.s	loc_13188
000139EE 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000139F4 6700                       		beq.s	loc_1317C	; if not, branch
000139F6 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000139FC 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000139FE 6100 0000                  		bsr.w	Sonic_RollLeft
00013A02                            
00013A02                            loc_1317C:
00013A02 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013A08 6700                       		beq.s	loc_13188	; if not, branch
00013A0A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013A10 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
00013A12 6100 0000                  		bsr.w	Sonic_RollLeft
00013A16 6000                       		bra.s	loc_13188
00013A18                            
00013A18                            SonicRS_RollRight:
00013A18 6100 0000                  		bsr.w	Sonic_RollRight
00013A1C                            
00013A1C                            loc_13188:
00013A1C 3028 0014                  		move.w	$14(a0),d0
00013A20 6700                       		beq.s	loc_131AA
00013A22 6B00                       		bmi.s	loc_1319E
00013A24 9045                       		sub.w	d5,d0
00013A26 6400                       		bcc.s	loc_13198
00013A28 303C 0000                  		move.w	#0,d0
00013A2C                            
00013A2C                            loc_13198:
00013A2C 3140 0014                  		move.w	d0,$14(a0)
00013A30 6000                       		bra.s	loc_131AA
00013A32                            ; ===========================================================================
00013A32                            
00013A32                            loc_1319E:				; XREF: Sonic_RollSpeed
00013A32 D045                       		add.w	d5,d0
00013A34 6400                       		bcc.s	loc_131A6
00013A36 303C 0000                  		move.w	#0,d0
00013A3A                            
00013A3A                            loc_131A6:
00013A3A 3140 0014                  		move.w	d0,$14(a0)
00013A3E                            
00013A3E                            loc_131AA:
00013A3E 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00013A42 6600                       		bne.s	loc_131CC	; if yes, branch
00013A44 08A8 0002 0022             		bclr	#2,$22(a0)
00013A4A 117C 0013 0016             		move.b	#$13,$16(a0)
00013A50 117C 0009 0017             		move.b	#9,$17(a0)
00013A56 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013A5C 5B68 000C                  		subq.w	#5,$C(a0)
00013A60                            
00013A60                            loc_131CC:
00013A60 1028 0026                  		move.b	$26(a0),d0
00013A64 4EB9 0000 2CFE             		jsr	(CalcSine).l
00013A6A C1E8 0014                  		muls.w	$14(a0),d0
00013A6E E080                       		asr.l	#8,d0
00013A70 3140 0012                  		move.w	d0,$12(a0)
00013A74 C3E8 0014                  		muls.w	$14(a0),d1
00013A78 E081                       		asr.l	#8,d1
00013A7A 0C41 1000                  		cmpi.w	#$1000,d1
00013A7E 6F00                       		ble.s	loc_131F0
00013A80 323C 1000                  		move.w	#$1000,d1
00013A84                            
00013A84                            loc_131F0:
00013A84 0C41 F000                  		cmpi.w	#-$1000,d1
00013A88 6C00                       		bge.s	loc_131FA
00013A8A 323C F000                  		move.w	#-$1000,d1
00013A8E                            
00013A8E                            loc_131FA:
00013A8E 3141 0010                  		move.w	d1,$10(a0)
00013A92 6000 FDF6                  		bra.w	loc_1300C
00013A96                            ; End of function Sonic_RollSpeed
00013A96                            
00013A96                            
00013A96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A96                            
00013A96                            
00013A96                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013A96 3028 0014                  		move.w	$14(a0),d0
00013A9A 6700                       		beq.s	loc_1320A
00013A9C 6A00                       		bpl.s	loc_13218
00013A9E                            
00013A9E                            loc_1320A:
00013A9E 08E8 0000 0022             		bset	#0,$22(a0)
00013AA4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013AAA 4E75                       		rts	
00013AAC                            ; ===========================================================================
00013AAC                            
00013AAC                            loc_13218:
00013AAC 9044                       		sub.w	d4,d0
00013AAE 6400                       		bcc.s	loc_13220
00013AB0 303C FF80                  		move.w	#-$80,d0
00013AB4                            
00013AB4                            loc_13220:
00013AB4 3140 0014                  		move.w	d0,$14(a0)
00013AB8 4E75                       		rts	
00013ABA                            ; End of function Sonic_RollLeft
00013ABA                            
00013ABA                            
00013ABA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ABA                            
00013ABA                            
00013ABA                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013ABA 3028 0014                  		move.w	$14(a0),d0
00013ABE 6B00                       		bmi.s	loc_1323A
00013AC0 08A8 0000 0022             		bclr	#0,$22(a0)
00013AC6 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013ACC 4E75                       		rts	
00013ACE                            ; ===========================================================================
00013ACE                            
00013ACE                            loc_1323A:
00013ACE D044                       		add.w	d4,d0
00013AD0 6400                       		bcc.s	loc_13242
00013AD2 303C 0080                  		move.w	#$80,d0
00013AD6                            
00013AD6                            loc_13242:
00013AD6 3140 0014                  		move.w	d0,$14(a0)
00013ADA 4E75                       		rts	
00013ADC                            ; End of function Sonic_RollRight
00013ADC                            
00013ADC                            Sonic_AirUnroll:
00013ADC                            		
00013ADC 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
00013AE0 6600                       		bne.s	@timer
00013AE2 1038 F605                  		move.b	($FFFFF605).w,d0
00013AE6 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
00013AEA 6700                       		beq.s	@end	; if not, branch
00013AEC 08A8 0002 0022             		bclr	#2,$22(a0)
00013AF2 117C 0013 0016             		move.b	#$13,$16(a0)
00013AF8 117C 0009 0017             		move.b	#9,$17(a0)
00013AFE 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
00013B04 303C 00A5                  		move.w	#$A5,d0
00013B08 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play fart sound
00013B0E 2028 0010                  		move.l	$10(a0),d0
00013B12 D080                       		add.l	d0,d0
00013B14 2140 0010                  		move.l	d0,$10(a0)
00013B18 5B68 000C                  		subq.w	#5,$C(a0)
00013B1C                            	@end:
00013B1C 4E75                       		rts
00013B1E                            	@timer:
00013B1E 5328 003A                  		subq.b	#1,$3A(a0)
00013B22 4E75                       		rts
00013B24                            
00013B24                            ; ---------------------------------------------------------------------------
00013B24                            ; Subroutine to	change Sonic's direction while jumping
00013B24                            ; ---------------------------------------------------------------------------
00013B24                            
00013B24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B24                            
00013B24                            
00013B24                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013B24 3C38 F760                  		move.w	($FFFFF760).w,d6
00013B28 3A38 F762                  		move.w	($FFFFF762).w,d5
00013B2C E345                       		asl.w	#1,d5
00013B2E 0828 0004 0022             		btst	#4,$22(a0)
00013B34 6600                       		bne.s	Obj01_ResetScr2
00013B36 3028 0010                  		move.w	$10(a0),d0
00013B3A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013B40 6700                       		beq.s	loc_13278	; if not, branch
00013B42 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B48 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00013B4A 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013B4E 6E00                       		bgt.s	loc_13278
00013B50 3001                       		move.w	d1,d0
00013B52                            
00013B52                            loc_13278:
00013B52 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013B58 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00013B5A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00013B60 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
00013B62 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00013B66 6E00                       		bgt.s	Obj01_JumpMove
00013B68 3001                       		move.w	d1,d0
00013B6A 6000                       		bra.s	Obj01_JumpMove
00013B6C                            
00013B6C                            SonicCJD_JumpLeft:
00013B6C 08E8 0000 0022             		bset	#0,$22(a0)
00013B72 9045                       		sub.w	d5,d0
00013B74 3206                       		move.w	d6,d1
00013B76 4441                       		neg.w	d1
00013B78 B041                       		cmp.w	d1,d0
00013B7A                            		; bgt.s	loc_13278
00013B7A                            		; move.w	d1,d0
00013B7A 4E75                       		rts
00013B7C                            
00013B7C                            SonicCJD_JumpRight:
00013B7C 08A8 0000 0022             		bclr	#0,$22(a0)
00013B82 D045                       		add.w	d5,d0
00013B84 B046                       		cmp.w	d6,d0
00013B86 6D00                       		blt.s	Obj01_JumpMove
00013B88 3006                       		move.w	d6,d0
00013B8A                            
00013B8A                            Obj01_JumpMove:
00013B8A 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00013B8E                            
00013B8E                            Obj01_ResetScr2:
00013B8E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013B94 6700                       		beq.s	loc_132A4	; if yes, branch
00013B96 6400                       		bcc.s	loc_132A0
00013B98 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00013B9C                            
00013B9C                            loc_132A0:
00013B9C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013BA0                            
00013BA0                            loc_132A4:
00013BA0 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013BA6 6500                       		bcs.s	locret_132D2	; if yes, branch
00013BA8 3028 0010                  		move.w	$10(a0),d0
00013BAC 3200                       		move.w	d0,d1
00013BAE EA41                       		asr.w	#5,d1
00013BB0 6700                       		beq.s	locret_132D2
00013BB2 6B00                       		bmi.s	loc_132C6
00013BB4 9041                       		sub.w	d1,d0
00013BB6 6400                       		bcc.s	loc_132C0
00013BB8 303C 0000                  		move.w	#0,d0
00013BBC                            
00013BBC                            loc_132C0:
00013BBC 3140 0010                  		move.w	d0,$10(a0)
00013BC0 4E75                       		rts	
00013BC2                            ; ===========================================================================
00013BC2                            
00013BC2                            loc_132C6:
00013BC2 9041                       		sub.w	d1,d0
00013BC4 6500                       		bcs.s	loc_132CE
00013BC6 303C 0000                  		move.w	#0,d0
00013BCA                            
00013BCA                            loc_132CE:
00013BCA 3140 0010                  		move.w	d0,$10(a0)
00013BCE                            
00013BCE                            locret_132D2:
00013BCE 4E75                       		rts	
00013BD0                            ; End of function Sonic_ChgJumpDir
00013BD0                            
00013BD0                            ; ===========================================================================
00013BD0                            ; ---------------------------------------------------------------------------
00013BD0                            ; Unused subroutine to squash Sonic
00013BD0                            ; ---------------------------------------------------------------------------
00013BD0 1028 0026                  		move.b	$26(a0),d0
00013BD4 0600 0020                  		addi.b	#$20,d0
00013BD8 0200 00C0                  		andi.b	#$C0,d0
00013BDC 6600                       		bne.s	locret_13302
00013BDE 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013BE2 4A41                       		tst.w	d1
00013BE4 6A00                       		bpl.s	locret_13302
00013BE6 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
00013BEC 317C 0000 0010             		move.w	#0,$10(a0)
00013BF2 317C 0000 0012             		move.w	#0,$12(a0)
00013BF8 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013BFE                            
00013BFE                            locret_13302:
00013BFE 4E75                       		rts	
00013C00                            ; ---------------------------------------------------------------------------
00013C00                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013C00                            ; ---------------------------------------------------------------------------
00013C00                            
00013C00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C00                            
00013C00                            
00013C00                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013C00 2228 0008                  		move.l	8(a0),d1
00013C04 3028 0010                  		move.w	$10(a0),d0
00013C08 48C0                       		ext.l	d0
00013C0A E180                       		asl.l	#8,d0
00013C0C D280                       		add.l	d0,d1
00013C0E 4841                       		swap	d1
00013C10 3038 F728                  		move.w	($FFFFF728).w,d0
00013C14 0640 0010                  		addi.w	#$10,d0
00013C18 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013C1A 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00013C1C 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013C20 0640 0128                  		addi.w	#$128,d0
00013C24 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013C28 6600                       		bne.s	loc_13332
00013C2A 0640 0040                  		addi.w	#$40,d0
00013C2E                            
00013C2E                            loc_13332:
00013C2E B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013C30 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013C32                            
00013C32                            loc_13336:
00013C32 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013C36 0640 00E0                  		addi.w	#$E0,d0
00013C3A B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00013C3E 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00013C40 4E75                       		rts	
00013C42                            ; ===========================================================================
00013C42                            
00013C42                            Boundary_Bottom:
00013C42 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00013C48 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
00013C4C 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
00013C52 6500 0000                  		bcs.w	KillSonic
00013C56 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00013C5A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013C60 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
00013C66 4E75                       		rts	
00013C68                            ; ===========================================================================
00013C68                            
00013C68                            Boundary_Sides:
00013C68 3140 0008                  		move.w	d0,8(a0)
00013C6C 317C 0000 000A             		move.w	#0,$A(a0)
00013C72 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013C78 317C 0000 0014             		move.w	#0,$14(a0)
00013C7E 60B2                       		bra.s	loc_13336
00013C80                            ; End of function Sonic_LevelBound
00013C80                            
00013C80                            ; ---------------------------------------------------------------------------
00013C80                            ; Subroutine allowing Sonic to roll when he's moving
00013C80                            ; ---------------------------------------------------------------------------
00013C80                            
00013C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013C80                            
00013C80                            
00013C80                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013C80 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013C84 6600                       		bne.s	Obj01_NoRoll
00013C86 3028 0014                  		move.w	$14(a0),d0
00013C8A 6A00                       		bpl.s	loc_13392
00013C8C 4440                       		neg.w	d0
00013C8E                            
00013C8E                            loc_13392:
00013C8E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013C92 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013C94 1038 F602                  		move.b	($FFFFF602).w,d0
00013C98 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
00013C9C 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013C9E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013CA4 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013CA6                            
00013CA6                            Obj01_NoRoll:
00013CA6 4E75                       		rts	
00013CA8                            ; ===========================================================================
00013CA8                            
00013CA8                            Obj01_ChkRoll:
00013CA8 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013CAE 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013CB0 4E75                       		rts	
00013CB2                            ; ===========================================================================
00013CB2                            
00013CB2                            Obj01_DoRoll:
00013CB2 08E8 0002 0022             		bset	#2,$22(a0)
00013CB8 117C 000E 0016             		move.b	#$E,$16(a0)
00013CBE 117C 0007 0017             		move.b	#7,$17(a0)
00013CC4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013CCA 5A68 000C                  		addq.w	#5,$C(a0)
00013CCE 303C 00BE                  		move.w	#$BE,d0
00013CD2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rolling sound
00013CD8 4A68 0014                  		tst.w	$14(a0)
00013CDC 6600                       		bne.s	locret_133E8
00013CDE 317C 0200 0014             		move.w	#$200,$14(a0)
00013CE4                            
00013CE4                            locret_133E8:
00013CE4 4E75                       		rts	
00013CE6                            ; End of function Sonic_Roll
00013CE6                            
00013CE6                            ; ---------------------------------------------------------------------------
00013CE6                            ; Subroutine allowing Sonic to jump
00013CE6                            ; ---------------------------------------------------------------------------
00013CE6                            
00013CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013CE6                            
00013CE6                            
00013CE6                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013CE6 1038 F603                  		move.b	($FFFFF603).w,d0
00013CEA 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013CEE 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013CF2 7000                       		moveq	#0,d0
00013CF4 1028 0026                  		move.b	$26(a0),d0
00013CF8 0600 0080                  		addi.b	#$80,d0
00013CFC 6100 0000                  		bsr.w	sub_14D48
00013D00 0C41 0006                  		cmpi.w	#6,d1
00013D04 6D00 0000                  		blt.w	locret_1348E
00013D08 343C 0680                  		move.w	#$680,d2
00013D0C 0828 0006 0022             		btst	#6,$22(a0)
00013D12 6700                       		beq.s	loc_1341C
00013D14 343C 0380                  		move.w	#$380,d2
00013D18                            
00013D18                            loc_1341C:
00013D18 7000                       		moveq	#0,d0
00013D1A 1028 0026                  		move.b	$26(a0),d0
00013D1E 0400 0040                  		subi.b	#$40,d0
00013D22 4EB9 0000 2CFE             		jsr	(CalcSine).l
00013D28 C3C2                       		muls.w	d2,d1
00013D2A E081                       		asr.l	#8,d1
00013D2C D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013D30 C1C2                       		muls.w	d2,d0
00013D32 E080                       		asr.l	#8,d0
00013D34 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00013D38 08E8 0001 0022             		bset	#1,$22(a0)
00013D3E 08A8 0005 0022             		bclr	#5,$22(a0)
00013D44 588F                       		addq.l	#4,sp
00013D46 117C 0001 003C             		move.b	#1,$3C(a0)
00013D4C 4228 0038                  		clr.b	$38(a0)
00013D50 303C 00A0                  		move.w	#$A0,d0
00013D54 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play jumping sound
00013D5A 117C 0013 0016             		move.b	#$13,$16(a0)
00013D60 117C 0009 0017             		move.b	#9,$17(a0)
00013D66 0828 0002 0022             		btst	#2,$22(a0)
00013D6C 6600                       		bne.s	loc_13490
00013D6E 117C 000E 0016             		move.b	#$E,$16(a0)
00013D74 117C 0007 0017             		move.b	#7,$17(a0)
00013D7A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013D80 08E8 0002 0022             		bset	#2,$22(a0)
00013D86 5A68 000C                  		addq.w	#5,$C(a0)
00013D8A 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
00013D90                            
00013D90                            locret_1348E:
00013D90 4E75                       		rts	
00013D92                            ; ===========================================================================
00013D92                            
00013D92                            loc_13490:
00013D92 08E8 0004 0022             		bset	#4,$22(a0)
00013D98 4E75                       		rts	
00013D9A                            ; End of function Sonic_Jump
00013D9A                            
00013D9A                            
00013D9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013D9A                            
00013D9A                            
00013D9A                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013D9A 4A28 003C                  		tst.b	$3C(a0)
00013D9E 6700                       		beq.s	loc_134C4
00013DA0 323C FC00                  		move.w	#-$400,d1
00013DA4 0828 0006 0022             		btst	#6,$22(a0)
00013DAA 6700                       		beq.s	loc_134AE
00013DAC 323C FE00                  		move.w	#-$200,d1
00013DB0                            
00013DB0                            loc_134AE:
00013DB0 B268 0012                  		cmp.w	$12(a0),d1
00013DB4 6F00                       		ble.s	locret_134C2
00013DB6 1038 F602                  		move.b	($FFFFF602).w,d0
00013DBA 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013DBE 6600                       		bne.s	locret_134C2	; if yes, branch
00013DC0 3141 0012                  		move.w	d1,$12(a0)
00013DC4                            
00013DC4                            locret_134C2:
00013DC4 4E75                       		rts	
00013DC6                            ; ===========================================================================
00013DC6                            
00013DC6                            loc_134C4:
00013DC6 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013DCC 6C00                       		bge.s	locret_134D2
00013DCE 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013DD4                            
00013DD4                            locret_134D2:
00013DD4 4E75                       		rts	
00013DD6                            ; End of function Sonic_JumpHeight
00013DD6                            
00013DD6                            ; ---------------------------------------------------------------------------
00013DD6                            ; Subroutine to	slow Sonic walking up a	slope
00013DD6                            ; ---------------------------------------------------------------------------
00013DD6                            
00013DD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DD6                            
00013DD6                            
00013DD6                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013DD6 1028 0026                  		move.b	$26(a0),d0
00013DDA 0600 0060                  		addi.b	#$60,d0
00013DDE 0C00 00C0                  		cmpi.b	#$C0,d0
00013DE2 6400                       		bcc.s	locret_13508
00013DE4 1028 0026                  		move.b	$26(a0),d0
00013DE8 4EB9 0000 2CFE             		jsr	(CalcSine).l
00013DEE C1FC 0020                  		muls.w	#$20,d0
00013DF2 E080                       		asr.l	#8,d0
00013DF4 4A68 0014                  		tst.w	$14(a0)
00013DF8 6700                       		beq.s	locret_13508
00013DFA 6B00                       		bmi.s	loc_13504
00013DFC 4A40                       		tst.w	d0
00013DFE 6700                       		beq.s	locret_13502
00013E00 D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013E04                            
00013E04                            locret_13502:
00013E04 4E75                       		rts	
00013E06                            ; ===========================================================================
00013E06                            
00013E06                            loc_13504:
00013E06 D168 0014                  		add.w	d0,$14(a0)
00013E0A                            
00013E0A                            locret_13508:
00013E0A 4E75                       		rts	
00013E0C                            ; End of function Sonic_SlopeResist
00013E0C                            
00013E0C                            ; ---------------------------------------------------------------------------
00013E0C                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013E0C                            ; ---------------------------------------------------------------------------
00013E0C                            
00013E0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E0C                            
00013E0C                            
00013E0C                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013E0C 1028 0026                  		move.b	$26(a0),d0
00013E10 0600 0060                  		addi.b	#$60,d0
00013E14 0C00 00C0                  		cmpi.b	#-$40,d0
00013E18 6400                       		bcc.s	locret_13544
00013E1A 1028 0026                  		move.b	$26(a0),d0
00013E1E 4EB9 0000 2CFE             		jsr	(CalcSine).l
00013E24 C1FC 0050                  		muls.w	#$50,d0
00013E28 E080                       		asr.l	#8,d0
00013E2A 4A68 0014                  		tst.w	$14(a0)
00013E2E 6B00                       		bmi.s	loc_1353A
00013E30 4A40                       		tst.w	d0
00013E32 6A00                       		bpl.s	loc_13534
00013E34 E480                       		asr.l	#2,d0
00013E36                            
00013E36                            loc_13534:
00013E36 D168 0014                  		add.w	d0,$14(a0)
00013E3A 4E75                       		rts	
00013E3C                            ; ===========================================================================
00013E3C                            
00013E3C                            loc_1353A:
00013E3C 4A40                       		tst.w	d0
00013E3E 6B00                       		bmi.s	loc_13540
00013E40 E480                       		asr.l	#2,d0
00013E42                            
00013E42                            loc_13540:
00013E42 D168 0014                  		add.w	d0,$14(a0)
00013E46                            
00013E46                            locret_13544:
00013E46 4E75                       		rts	
00013E48                            ; End of function Sonic_RollRepel
00013E48                            
00013E48                            ; ---------------------------------------------------------------------------
00013E48                            ; Subroutine to	push Sonic down	a slope
00013E48                            ; ---------------------------------------------------------------------------
00013E48                            
00013E48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E48                            
00013E48                            
00013E48                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00013E48 4E71                       		nop	
00013E4A 4A28 0038                  		tst.b	$38(a0)
00013E4E 6600                       		bne.s	locret_13580
00013E50 4A68 003E                  		tst.w	$3E(a0)
00013E54 6600                       		bne.s	loc_13582
00013E56 1028 0026                  		move.b	$26(a0),d0
00013E5A 0600 0020                  		addi.b	#$20,d0
00013E5E 0200 00C0                  		andi.b	#$C0,d0
00013E62 6700                       		beq.s	locret_13580
00013E64 3028 0014                  		move.w	$14(a0),d0
00013E68 6A00                       		bpl.s	loc_1356A
00013E6A 4440                       		neg.w	d0
00013E6C                            
00013E6C                            loc_1356A:
00013E6C 0C40 0280                  		cmpi.w	#$280,d0
00013E70 6400                       		bcc.s	locret_13580
00013E72 4268 0014                  		clr.w	$14(a0)
00013E76 08E8 0001 0022             		bset	#1,$22(a0)
00013E7C 317C 001E 003E             		move.w	#$1E,$3E(a0)
00013E82                            
00013E82                            locret_13580:
00013E82 4E75                       		rts	
00013E84                            ; ===========================================================================
00013E84                            
00013E84                            loc_13582:
00013E84 5368 003E                  		subq.w	#1,$3E(a0)
00013E88 4E75                       		rts	
00013E8A                            ; End of function Sonic_SlopeRepel
00013E8A                            
00013E8A                            ; ---------------------------------------------------------------------------
00013E8A                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013E8A                            ; ---------------------------------------------------------------------------
00013E8A                            
00013E8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013E8A                            
00013E8A                            
00013E8A                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013E8A 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013E8E 6700                       		beq.s	locret_135A2	; if already 0,	branch
00013E90 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00013E92                            
00013E92 5400                       		addq.b	#2,d0		; increase angle
00013E94 6400                       		bcc.s	loc_13596
00013E96 7000                       		moveq	#0,d0
00013E98                            
00013E98                            loc_13596:
00013E98 6000                       		bra.s	loc_1359E
00013E9A                            ; ===========================================================================
00013E9A                            
00013E9A                            loc_13598:
00013E9A 5500                       		subq.b	#2,d0		; decrease angle
00013E9C 6400                       		bcc.s	loc_1359E
00013E9E 7000                       		moveq	#0,d0
00013EA0                            
00013EA0                            loc_1359E:
00013EA0 1140 0026                  		move.b	d0,$26(a0)
00013EA4                            
00013EA4                            locret_135A2:
00013EA4 4E75                       		rts	
00013EA6                            ; End of function Sonic_JumpAngle
00013EA6                            
00013EA6                            ; ---------------------------------------------------------------------------
00013EA6                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013EA6                            ; ---------------------------------------------------------------------------
00013EA6                            
00013EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EA6                            
00013EA6                            
00013EA6                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013EA6 3228 0010                  		move.w	$10(a0),d1
00013EAA 3428 0012                  		move.w	$12(a0),d2
00013EAE 4EB9 0000 2FCC             		jsr	(CalcAngle).l
00013EB4 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013EB8 0400 0020                  		subi.b	#$20,d0
00013EBC 11C0 FFED                  		move.b	d0,($FFFFFFED).w
00013EC0 0200 00C0                  		andi.b	#$C0,d0
00013EC4 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013EC8 0C00 0040                  		cmpi.b	#$40,d0
00013ECC 6700 0000                  		beq.w	loc_13680
00013ED0 0C00 0080                  		cmpi.b	#$80,d0
00013ED4 6700 0000                  		beq.w	loc_136E2
00013ED8 0C00 00C0                  		cmpi.b	#-$40,d0
00013EDC 6700 0000                  		beq.w	loc_1373E
00013EE0 6100 0000                  		bsr.w	Sonic_HitWall
00013EE4 4A41                       		tst.w	d1
00013EE6 6A00                       		bpl.s	loc_135F0
00013EE8 9368 0008                  		sub.w	d1,8(a0)
00013EEC 317C 0000 0010             		move.w	#0,$10(a0)
00013EF2                            
00013EF2                            loc_135F0:
00013EF2 6100 0000                  		bsr.w	sub_14EB4
00013EF6 4A41                       		tst.w	d1
00013EF8 6A00                       		bpl.s	loc_13602
00013EFA D368 0008                  		add.w	d1,8(a0)
00013EFE 317C 0000 0010             		move.w	#0,$10(a0)
00013F04                            
00013F04                            loc_13602:
00013F04 6100 0000                  		bsr.w	Sonic_HitFloor
00013F08 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013F0C 4A41                       		tst.w	d1
00013F0E 6A00                       		bpl.s	locret_1367E
00013F10 1428 0012                  		move.b	$12(a0),d2
00013F14 5002                       		addq.b	#8,d2
00013F16 4402                       		neg.b	d2
00013F18 B202                       		cmp.b	d2,d1
00013F1A 6C00                       		bge.s	loc_1361E
00013F1C B002                       		cmp.b	d2,d0
00013F1E 6D00                       		blt.s	locret_1367E
00013F20                            
00013F20                            loc_1361E:
00013F20 D368 000C                  		add.w	d1,$C(a0)
00013F24 1143 0026                  		move.b	d3,$26(a0)
00013F28 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013F2C 117C 0000 001C             		move.b	#0,$1C(a0)
00013F32 1003                       		move.b	d3,d0
00013F34 0600 0020                  		addi.b	#$20,d0
00013F38 0200 0040                  		andi.b	#$40,d0
00013F3C 6600                       		bne.s	loc_1365C
00013F3E 1003                       		move.b	d3,d0
00013F40 0600 0010                  		addi.b	#$10,d0
00013F44 0200 0020                  		andi.b	#$20,d0
00013F48 6700                       		beq.s	loc_1364E
00013F4A E0E8 0012                  		asr	$12(a0)
00013F4E 6000                       		bra.s	loc_13670
00013F50                            ; ===========================================================================
00013F50                            
00013F50                            loc_1364E:
00013F50 317C 0000 0012             		move.w	#0,$12(a0)
00013F56 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013F5C 4E75                       		rts	
00013F5E                            ; ===========================================================================
00013F5E                            
00013F5E                            loc_1365C:
00013F5E 317C 0000 0010             		move.w	#0,$10(a0)
00013F64 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00013F6A 6F00                       		ble.s	loc_13670
00013F6C 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00013F72                            
00013F72                            loc_13670:
00013F72 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F78 4A03                       		tst.b	d3
00013F7A 6A00                       		bpl.s	locret_1367E
00013F7C 4468 0014                  		neg.w	$14(a0)
00013F80                            
00013F80                            locret_1367E:
00013F80 4E75                       		rts	
00013F82                            ; ===========================================================================
00013F82                            
00013F82                            loc_13680:
00013F82 6100 0000                  		bsr.w	Sonic_HitWall
00013F86 4A41                       		tst.w	d1
00013F88 6A00                       		bpl.s	loc_1369A
00013F8A 9368 0008                  		sub.w	d1,8(a0)
00013F8E 317C 0000 0010             		move.w	#0,$10(a0)
00013F94 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013F9A 4E75                       		rts	
00013F9C                            ; ===========================================================================
00013F9C                            
00013F9C                            loc_1369A:
00013F9C 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013FA0 4A41                       		tst.w	d1
00013FA2 6A00                       		bpl.s	loc_136B4
00013FA4 9368 000C                  		sub.w	d1,$C(a0)
00013FA8 4A68 0012                  		tst.w	$12(a0)
00013FAC 6A00                       		bpl.s	locret_136B2
00013FAE 317C 0000 0012             		move.w	#0,$12(a0)
00013FB4                            
00013FB4                            locret_136B2:
00013FB4 4E75                       		rts	
00013FB6                            ; ===========================================================================
00013FB6                            
00013FB6                            loc_136B4:
00013FB6 4A68 0012                  		tst.w	$12(a0)
00013FBA 6B00                       		bmi.s	locret_136E0
00013FBC 6100 0000                  		bsr.w	Sonic_HitFloor
00013FC0 4A41                       		tst.w	d1
00013FC2 6A00                       		bpl.s	locret_136E0
00013FC4 D368 000C                  		add.w	d1,$C(a0)
00013FC8 1143 0026                  		move.b	d3,$26(a0)
00013FCC 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013FD0 117C 0000 001C             		move.b	#0,$1C(a0)
00013FD6 317C 0000 0012             		move.w	#0,$12(a0)
00013FDC 3168 0010 0014             		move.w	$10(a0),$14(a0)
00013FE2                            
00013FE2                            locret_136E0:
00013FE2 4E75                       		rts	
00013FE4                            ; ===========================================================================
00013FE4                            
00013FE4                            loc_136E2:
00013FE4 6100 0000                  		bsr.w	Sonic_HitWall
00013FE8 4A41                       		tst.w	d1
00013FEA 6A00                       		bpl.s	loc_136F4
00013FEC 9368 0008                  		sub.w	d1,8(a0)
00013FF0 317C 0000 0010             		move.w	#0,$10(a0)
00013FF6                            
00013FF6                            loc_136F4:
00013FF6 6100 0000                  		bsr.w	sub_14EB4
00013FFA 4A41                       		tst.w	d1
00013FFC 6A00                       		bpl.s	loc_13706
00013FFE D368 0008                  		add.w	d1,8(a0)
00014002 317C 0000 0010             		move.w	#0,$10(a0)
00014008                            
00014008                            loc_13706:
00014008 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001400C 4A41                       		tst.w	d1
0001400E 6A00                       		bpl.s	locret_1373C
00014010 9368 000C                  		sub.w	d1,$C(a0)
00014014 1003                       		move.b	d3,d0
00014016 0600 0020                  		addi.b	#$20,d0
0001401A 0200 0040                  		andi.b	#$40,d0
0001401E 6600                       		bne.s	loc_13726
00014020 317C 0000 0012             		move.w	#0,$12(a0)
00014026 4E75                       		rts	
00014028                            ; ===========================================================================
00014028                            
00014028                            loc_13726:
00014028 1143 0026                  		move.b	d3,$26(a0)
0001402C 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00014030 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014036 4A03                       		tst.b	d3
00014038 6A00                       		bpl.s	locret_1373C
0001403A 4468 0014                  		neg.w	$14(a0)
0001403E                            
0001403E                            locret_1373C:
0001403E 4E75                       		rts	
00014040                            ; ===========================================================================
00014040                            
00014040                            loc_1373E:
00014040 6100 0000                  		bsr.w	sub_14EB4
00014044 4A41                       		tst.w	d1
00014046 6A00                       		bpl.s	loc_13758
00014048 D368 0008                  		add.w	d1,8(a0)
0001404C 317C 0000 0010             		move.w	#0,$10(a0)
00014052 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014058 4E75                       		rts	
0001405A                            ; ===========================================================================
0001405A                            
0001405A                            loc_13758:
0001405A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001405E 4A41                       		tst.w	d1
00014060 6A00                       		bpl.s	loc_13772
00014062 9368 000C                  		sub.w	d1,$C(a0)
00014066 4A68 0012                  		tst.w	$12(a0)
0001406A 6A00                       		bpl.s	locret_13770
0001406C 317C 0000 0012             		move.w	#0,$12(a0)
00014072                            
00014072                            locret_13770:
00014072 4E75                       		rts	
00014074                            ; ===========================================================================
00014074                            
00014074                            loc_13772:
00014074 4A68 0012                  		tst.w	$12(a0)
00014078 6B00                       		bmi.s	locret_1379E
0001407A 6100 0000                  		bsr.w	Sonic_HitFloor
0001407E 4A41                       		tst.w	d1
00014080 6A00                       		bpl.s	locret_1379E
00014082 D368 000C                  		add.w	d1,$C(a0)
00014086 1143 0026                  		move.b	d3,$26(a0)
0001408A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001408E 117C 0000 001C             		move.b	#0,$1C(a0)
00014094 317C 0000 0012             		move.w	#0,$12(a0)
0001409A 3168 0010 0014             		move.w	$10(a0),$14(a0)
000140A0                            
000140A0                            locret_1379E:
000140A0 4E75                       		rts	
000140A2                            ; End of function Sonic_Floor
000140A2                            
000140A2                            ; ---------------------------------------------------------------------------
000140A2                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000140A2                            ; ---------------------------------------------------------------------------
000140A2                            
000140A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000140A2                            
000140A2                            
000140A2                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000140A2 0828 0004 0022             		btst	#4,$22(a0)
000140A8 6700                       		beq.s	loc_137AE
000140AA 4E71                       		nop	
000140AC 4E71                       		nop	
000140AE 4E71                       		nop	
000140B0                            
000140B0                            loc_137AE:
000140B0 08A8 0005 0022             		bclr	#5,$22(a0)
000140B6 08A8 0001 0022             		bclr	#1,$22(a0)
000140BC 08A8 0004 0022             		bclr	#4,$22(a0)
000140C2 0828 0002 0022             		btst	#2,$22(a0)
000140C8 6700                       		beq.s	loc_137E4
000140CA 08A8 0002 0022             		bclr	#2,$22(a0)
000140D0 117C 0013 0016             		move.b	#$13,$16(a0)
000140D6 117C 0009 0017             		move.b	#9,$17(a0)
000140DC 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000140E2 5B68 000C                  		subq.w	#5,$C(a0)
000140E6                            
000140E6                            loc_137E4:
000140E6 117C 0000 003C             		move.b	#0,$3C(a0)
000140EC 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000140F2 4E75                       		rts	
000140F4                            ; End of function Sonic_ResetOnFloor
000140F4                            
000140F4                            ; ===========================================================================
000140F4                            ; ---------------------------------------------------------------------------
000140F4                            ; Sonic	when he	gets hurt
000140F4                            ; ---------------------------------------------------------------------------
000140F4                            
000140F4                            Obj01_Hurt:				; XREF: Obj01_Index
000140F4 4EBA 9D44                  		jsr	SpeedToPos
000140F8 0668 0030 0012             		addi.w	#$30,$12(a0)
000140FE 0828 0006 0022             		btst	#6,$22(a0)
00014104 6700                       		beq.s	loc_1380C
00014106 0468 0020 0012             		subi.w	#$20,$12(a0)
0001410C                            
0001410C                            loc_1380C:
0001410C 6100 0000                  		bsr.w	Sonic_HurtStop
00014110 6100 FAEE                  		bsr.w	Sonic_LevelBound
00014114 6100 F4B4                  		bsr.w	Sonic_RecordPos
00014118 6100 0000                  		bsr.w	Sonic_Animate
0001411C 6100 0000                  		bsr.w	LoadSonicDynPLC
00014120 4EFA 9D3E                  		jmp	DisplaySprite
00014124                            
00014124                            ; ---------------------------------------------------------------------------
00014124                            ; Subroutine to	stop Sonic falling after he's been hurt
00014124                            ; ---------------------------------------------------------------------------
00014124                            
00014124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014124                            
00014124                            
00014124                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014124 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014128 0640 00E0                  		addi.w	#$E0,d0
0001412C B068 000C                  		cmp.w	$C(a0),d0
00014130 6500 0000                  		bcs.w	KillSonic
00014134 6100 FD70                  		bsr.w	Sonic_Floor
00014138 0828 0001 0022             		btst	#1,$22(a0)
0001413E 6600                       		bne.s	locret_13860
00014140 7000                       		moveq	#0,d0
00014142 3140 0012                  		move.w	d0,$12(a0)
00014146 3140 0010                  		move.w	d0,$10(a0)
0001414A 3140 0014                  		move.w	d0,$14(a0)
0001414E 117C 0000 001C             		move.b	#0,$1C(a0)
00014154 5528 0024                  		subq.b	#2,$24(a0)
00014158 317C 0078 0030             		move.w	#$78,$30(a0)
0001415E                            
0001415E                            locret_13860:
0001415E 4E75                       		rts	
00014160                            ; End of function Sonic_HurtStop
00014160                            
00014160                            ; ===========================================================================
00014160                            ; ---------------------------------------------------------------------------
00014160                            ; Sonic	when he	dies
00014160                            ; ---------------------------------------------------------------------------
00014160                            
00014160                            Obj01_Death:				; XREF: Obj01_Index
00014160 6100 0000                  		bsr.w	GameOver
00014164 4EBA 9C62                  		jsr	ObjectFall
00014168 6100 F460                  		bsr.w	Sonic_RecordPos
0001416C 6100 0000                  		bsr.w	Sonic_Animate
00014170 6100 0000                  		bsr.w	LoadSonicDynPLC
00014174 4EFA 9CEA                  		jmp	DisplaySprite
00014178                            
00014178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014178                            
00014178                            
00014178                            GameOver:				; XREF: Obj01_Death
00014178 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001417C 0640 0100                  		addi.w	#$100,d0
00014180 B068 000C                  		cmp.w	$C(a0),d0
00014184 6400 0000                  		bcc.w	locret_13900
00014188 317C FFC8 0012             		move.w	#-$38,$12(a0)
0001418E 5428 0024                  		addq.b	#2,$24(a0)
00014192 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014196 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
0001419A 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
0001419E 6600                       		bne.s	loc_138D4
000141A0 317C 0000 003A             		move.w	#0,$3A(a0)
000141A6 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
000141AC 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000141B2 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
000141B8 4238 FE1A                  		clr.b	($FFFFFE1A).w
000141BC                            
000141BC                            loc_138C2:
000141BC 303C 008F                  		move.w	#$8F,d0
000141C0 4EB9 0000 15CC             		jsr	(PlaySound).l	; play game over music
000141C6 7003                       		moveq	#3,d0
000141C8 4EF9 0000 17B6             		jmp	(LoadPLC).l	; load game over patterns
000141CE                            ; ===========================================================================
000141CE                            
000141CE                            loc_138D4:
000141CE 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
000141D4 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
000141D8 6700                       		beq.s	locret_13900	; if not, branch
000141DA 317C 0000 003A             		move.w	#0,$3A(a0)
000141E0 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
000141E6 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
000141EC 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
000141F2 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
000141F8 60C2                       		bra.s	loc_138C2
000141FA                            ; ===========================================================================
000141FA                            
000141FA                            locret_13900:
000141FA 4E75                       		rts	
000141FC                            ; End of function GameOver
000141FC                            
000141FC                            ; ===========================================================================
000141FC                            ; ---------------------------------------------------------------------------
000141FC                            ; Sonic	when the level is restarted
000141FC                            ; ---------------------------------------------------------------------------
000141FC                            
000141FC                            Obj01_ResetLevel:			; XREF: Obj01_Index
000141FC 4A68 003A                  		tst.w	$3A(a0)
00014200 6700                       		beq.s	locret_13914
00014202 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014206 6600                       		bne.s	locret_13914
00014208 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001420E                            
0001420E                            locret_13914:
0001420E 4E75                       		rts	
00014210                            
00014210                            ; ---------------------------------------------------------------------------
00014210                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014210                            ; ---------------------------------------------------------------------------
00014210                            
00014210                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014210                            
00014210                            
00014210                            Sonic_Loops:				; XREF: Obj01_Control
00014210 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014216 6700                       		beq.s	loc_13926	; if yes, branch
00014218 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
0001421C 6600 0000                  		bne.w	locret_139C2	; if not, branch
00014220                            
00014220                            loc_13926:
00014220 3028 000C                  		move.w	$C(a0),d0
00014224 E248                       		lsr.w	#1,d0
00014226 0240 0380                  		andi.w	#$380,d0
0001422A 1228 0008                  		move.b	8(a0),d1
0001422E 0241 007F                  		andi.w	#$7F,d1
00014232 D041                       		add.w	d1,d0
00014234 43F8 A400                  		lea	($FFFFA400).w,a1
00014238 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
0001423C B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014240 6700 FA66                  		beq.w	Obj01_ChkRoll
00014244 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014248 6700 FA5E                  		beq.w	Obj01_ChkRoll
0001424C B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014250 6700                       		beq.s	loc_13976
00014252 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014256 6700                       		beq.s	loc_13966
00014258 08A8 0006 0001             		bclr	#6,1(a0)
0001425E 4E75                       		rts	
00014260                            ; ===========================================================================
00014260                            
00014260                            loc_13966:
00014260 0828 0001 0022             		btst	#1,$22(a0)
00014266 6700                       		beq.s	loc_13976
00014268 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
0001426E 4E75                       		rts	
00014270                            ; ===========================================================================
00014270                            
00014270                            loc_13976:
00014270 3428 0008                  		move.w	8(a0),d2
00014274 0C02 002C                  		cmpi.b	#$2C,d2
00014278 6400                       		bcc.s	loc_13988
0001427A 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014280 4E75                       		rts	
00014282                            ; ===========================================================================
00014282                            
00014282                            loc_13988:
00014282 0C02 00E0                  		cmpi.b	#-$20,d2
00014286 6500                       		bcs.s	loc_13996
00014288 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
0001428E 4E75                       		rts	
00014290                            ; ===========================================================================
00014290                            
00014290                            loc_13996:
00014290 0828 0006 0001             		btst	#6,1(a0)
00014296 6600                       		bne.s	loc_139B2
00014298 1228 0026                  		move.b	$26(a0),d1
0001429C 6700                       		beq.s	locret_139C2
0001429E 0C01 0080                  		cmpi.b	#-$80,d1
000142A2 6200                       		bhi.s	locret_139C2
000142A4 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000142AA 4E75                       		rts	
000142AC                            ; ===========================================================================
000142AC                            
000142AC                            loc_139B2:
000142AC 1228 0026                  		move.b	$26(a0),d1
000142B0 0C01 0080                  		cmpi.b	#-$80,d1
000142B4 6300                       		bls.s	locret_139C2
000142B6 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000142BC                            
000142BC                            locret_139C2:
000142BC 4E75                       		rts	
000142BE                            ; End of function Sonic_Loops
000142BE                            
000142BE                            ; ---------------------------------------------------------------------------
000142BE                            ; Subroutine to	animate	Sonic's sprites
000142BE                            ; ---------------------------------------------------------------------------
000142BE                            
000142BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142BE                            
000142BE                            Player_Anim:
000142BE 0000 0000                  	dc.l	SonicAniData
000142C2 0000 0000                  	dc.l	SonicAniData ; gronic
000142C6 0000 0000                  	dc.l	SonicAniData ; anakama
000142CA                            	; Insert more animation data for other characters here
000142CA                            	
000142CA                            Sonic_Animate:				; XREF: Obj01_Control; et al
000142CA 7000                       			moveq	#0,d0
000142CC 1038 FFE8                  		move.b	(v_character),d0
000142D0 E548                       		lsl.w	#2,d0
000142D2 43FA FFEA                  		lea 	Player_Anim(pc),a1
000142D6                            		
000142D6 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
000142DA                            	
000142DA 7000                       		moveq	#0,d0
000142DC 1028 001C                  		move.b	$1C(a0),d0
000142E0 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
000142E4 6700                       		beq.s	SAnim_Do	; if not, branch
000142E6 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
000142EA 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
000142F0 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
000142F6                            
000142F6                            SAnim_Do:
000142F6 D040                       		add.w	d0,d0
000142F8 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
000142FC 1011                       		move.b	(a1),d0
000142FE 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014300 1228 0022                  		move.b	$22(a0),d1
00014304 0201 0001                  		andi.b	#1,d1
00014308 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001430E 8328 0001                  		or.b	d1,1(a0)
00014312 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014316 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014318 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
0001431C                            
0001431C                            SAnim_Do2:
0001431C 7200                       		moveq	#0,d1
0001431E 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014322 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014326 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014328                            
00014328                            SAnim_Next:
00014328 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0001432C 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014330                            
00014330                            SAnim_Delay:
00014330 4E75                       		rts	
00014332                            ; ===========================================================================
00014332                            
00014332                            SAnim_End_FF:
00014332 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014334 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014336 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0001433C 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014340 60E6                       		bra.s	SAnim_Next
00014342                            ; ===========================================================================
00014342                            
00014342                            SAnim_End_FE:
00014342 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014344 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014346 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0001434A 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0001434E 9200                       		sub.b	d0,d1
00014350 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014354 60D2                       		bra.s	SAnim_Next
00014356                            ; ===========================================================================
00014356                            
00014356                            SAnim_End_FD:
00014356 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014358 6600                       		bne.s	SAnim_End	; if not, branch
0001435A 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014360                            
00014360                            SAnim_End:
00014360 4E75                       		rts	
00014362                            ; ===========================================================================
00014362                            
00014362                            SAnim_WalkRun:				; XREF: SAnim_Do
00014362 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014366 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014368 5200                       		addq.b	#1,d0		; is animation walking/running?
0001436A 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
0001436E 7200                       		moveq	#0,d1
00014370 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014374 1428 0022                  		move.b	$22(a0),d2
00014378 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
0001437C 6600                       		bne.s	loc_13A70	; if yes, branch
0001437E 4600                       		not.b	d0		; reverse angle
00014380                            
00014380                            loc_13A70:
00014380 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014384 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014386 7203                       		moveq	#3,d1
00014388                            
00014388                            loc_13A78:
00014388 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001438E B302                       		eor.b	d1,d2
00014390 8528 0001                  		or.b	d2,1(a0)
00014394 0828 0005 0022             		btst	#5,$22(a0)
0001439A 6600 0000                  		bne.w	SAnim_Push
0001439E E808                       		lsr.b	#4,d0		; divide angle by $10
000143A0 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000143A4 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000143A8 6A00                       		bpl.s	loc_13A9C
000143AA 4442                       		neg.w	d2
000143AC                            
000143AC                            loc_13A9C:
000143AC 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000143B2 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000143B6 6400                       		bcc.s	loc_13AB4	; if yes, branch
000143B8 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
000143BE 1200                       		move.b	d0,d1
000143C0 E209                       		lsr.b	#1,d1
000143C2 D001                       		add.b	d1,d0
000143C4                            
000143C4                            loc_13AB4:
000143C4 D000                       		add.b	d0,d0
000143C6 1600                       		move.b	d0,d3
000143C8 4442                       		neg.w	d2
000143CA 0642 0800                  		addi.w	#$800,d2
000143CE 6A00                       		bpl.s	loc_13AC2
000143D0 7400                       		moveq	#0,d2
000143D2                            
000143D2                            loc_13AC2:
000143D2 E04A                       		lsr.w	#8,d2
000143D4 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
000143D8 6100 FF42                  		bsr.w	SAnim_Do2
000143DC D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
000143E0 4E75                       		rts	
000143E2                            ; ===========================================================================
000143E2                            
000143E2                            SAnim_RollJump:				; XREF: SAnim_WalkRun
000143E2 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
000143E4 6600                       		bne.s	SAnim_Push	; if not, branch
000143E6 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000143EA 6A00                       		bpl.s	loc_13ADE
000143EC 4442                       		neg.w	d2
000143EE                            
000143EE                            loc_13ADE:
000143EE 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
000143F4 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
000143F8 6400                       		bcc.s	loc_13AF0	; if yes, branch
000143FA 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014400                            
00014400                            loc_13AF0:
00014400 4442                       		neg.w	d2
00014402 0642 0400                  		addi.w	#$400,d2
00014406 6A00                       		bpl.s	loc_13AFA
00014408 7400                       		moveq	#0,d2
0001440A                            
0001440A                            loc_13AFA:
0001440A E04A                       		lsr.w	#8,d2
0001440C 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014410 1228 0022                  		move.b	$22(a0),d1
00014414 0201 0001                  		andi.b	#1,d1
00014418 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001441E 8328 0001                  		or.b	d1,1(a0)
00014422 6000 FEF8                  		bra.w	SAnim_Do2
00014426                            ; ===========================================================================
00014426                            
00014426                            SAnim_Push:				; XREF: SAnim_RollJump
00014426 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
0001442A 6B00                       		bmi.s	loc_13B1E
0001442C 4442                       		neg.w	d2
0001442E                            
0001442E                            loc_13B1E:
0001442E 0642 0800                  		addi.w	#$800,d2
00014432 6A00                       		bpl.s	loc_13B26
00014434 7400                       		moveq	#0,d2
00014436                            
00014436                            loc_13B26:
00014436 EC4A                       		lsr.w	#6,d2
00014438 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
0001443C 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014442 1228 0022                  		move.b	$22(a0),d1
00014446 0201 0001                  		andi.b	#1,d1
0001444A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014450 8328 0001                  		or.b	d1,1(a0)
00014454 6000 FEC6                  		bra.w	SAnim_Do2
00014458                            ; End of function Sonic_Animate
00014458                            
00014458                            ; ===========================================================================
00014458                            SonicAniData:
00014458                            	include "_anim\Sonic.asm"
00014458                            ; ---------------------------------------------------------------------------
00014458                            ; Animation script - Sonic
00014458                            ; ---------------------------------------------------------------------------
00014458 0000                       		dc.w SonAni_Walk-SonicAniData
0001445A 0000                       		dc.w SonAni_Run-SonicAniData
0001445C 0000                       		dc.w SonAni_Roll-SonicAniData
0001445E 0000                       		dc.w SonAni_Roll2-SonicAniData
00014460 0000                       		dc.w SonAni_Push-SonicAniData
00014462 0000                       		dc.w SonAni_Wait-SonicAniData
00014464 0000                       		dc.w SonAni_Balance-SonicAniData
00014466 0000                       		dc.w SonAni_LookUp-SonicAniData
00014468 0000                       		dc.w SonAni_Duck-SonicAniData
0001446A 0000                       		dc.w SonAni_Warp1-SonicAniData
0001446C 0000                       		dc.w SonAni_Warp2-SonicAniData
0001446E 0000                       		dc.w SonAni_Warp3-SonicAniData
00014470 0000                       		dc.w SonAni_Warp4-SonicAniData
00014472 0000                       		dc.w SonAni_Stop-SonicAniData
00014474 0000                       		dc.w SonAni_Float1-SonicAniData
00014476 0000                       		dc.w SonAni_Float2-SonicAniData
00014478 0000                       		dc.w SonAni_Spring-SonicAniData
0001447A 0000                       		dc.w SonAni_LZHang-SonicAniData
0001447C 0000                       		dc.w SonAni_Leap1-SonicAniData
0001447E 0000                       		dc.w SonAni_Leap2-SonicAniData
00014480 0000                       		dc.w SonAni_Surf-SonicAniData
00014482 0000                       		dc.w SonAni_Bubble-SonicAniData
00014484 0000                       		dc.w SonAni_Death1-SonicAniData
00014486 0000                       		dc.w SonAni_Drown-SonicAniData
00014488 0000                       		dc.w SonAni_Death2-SonicAniData
0001448A 0000                       		dc.w SonAni_Shrink-SonicAniData
0001448C 0000                       		dc.w SonAni_Hurt-SonicAniData
0001448E 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014490 0000                       		dc.w SonAni_Blank-SonicAniData
00014492 0000                       		dc.w SonAni_Float3-SonicAniData
00014494 0000                       		dc.w SonAni_Float4-SonicAniData
00014496 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
000144A0 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
000144A8 FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
000144B0 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
000144B8 FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
000144C0 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
000144D6 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
000144DA 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
000144DE 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
000144E2 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
000144E6 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
000144EA 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
000144EE 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
000144F2 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
000144F6 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
000144FA 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014502 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014506 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
0001450A 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014510 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014516 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
0001451A 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014522 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014526 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
0001452A 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
0001452E 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014538 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
0001453C 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014540 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014544 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
0001454C 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014550                            		even
00014550                            		even
00014550                            
00014550                            ; ---------------------------------------------------------------------------
00014550                            ; Sonic	pattern	loading	subroutine
00014550                            ; ---------------------------------------------------------------------------
00014550                            
00014550                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014550                            Player_DPLC:
00014550 0000 0000                  	dc.l	SonicDynPLC
00014554 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014558 0000 0000                  	dc.l	SonicDynPLC ; anakama
0001455C                            	; add pointers for player dplc here
0001455C                            Player_Art:
0001455C 0000 0000                  	dc.l	Art_Sonic
00014560 0000 0000                  	dc.l	Art_Sonic ; gronic
00014564 0000 0000                  	dc.l	Art_Sonic ; anakama
00014568                            	; add pointers for player art here
00014568                            
00014568                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014568 7000                       		moveq	#0,d0
0001456A 1028 001A                  		move.b	$1A(a0),d0	; load frame number
0001456E B038 F766                  		cmp.b	($FFFFF766).w,d0
00014572 6700                       		beq.s	locret_13C96
00014574 11C0 F766                  		move.b	d0,($FFFFF766).w
00014578                            		
00014578 323C 0000                  		move.w	#0,d1
0001457C 1238 FFE8                  		move.b	(v_character),d1
00014580 E549                       		lsl.w	#2,d1
00014582 45FA FFCC                  		lea 	Player_DPLC(pc),a2
00014586                            
00014586 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
0001458A                            		
0001458A D040                       		add.w	d0,d0
0001458C D4F2 0000                  		adda.w	(a2,d0.w),a2
00014590 7200                       		moveq	#0,d1
00014592 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014594 5301                       		subq.b	#1,d1
00014596 6B00                       		bmi.s	locret_13C96
00014598 47F8 C800                  		lea	($FFFFC800).w,a3
0001459C 11FC 0001 F767             		move.b	#1,($FFFFF767).w
000145A2                            
000145A2                            SPLC_ReadEntry:
000145A2 303C 0000                  		move.w	#0,d0
000145A6 1038 FFE8                  		move.b	(v_character),d0
000145AA E548                       		lsl.w	#2,d0
000145AC 43FA FFAE                  		lea 	Player_Art(pc),a1
000145B0                            
000145B0 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
000145B4                            
000145B4 7400                       		moveq	#0,d2
000145B6 141A                       		move.b	(a2)+,d2
000145B8 3002                       		move.w	d2,d0
000145BA E808                       		lsr.b	#4,d0
000145BC E14A                       		lsl.w	#8,d2
000145BE 141A                       		move.b	(a2)+,d2
000145C0 EB4A                       		lsl.w	#5,d2
000145C2 D3C2                       		adda.l	d2,a1
000145C4                            
000145C4                            SPLC_LoadTile:
000145C4 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
000145C8 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
000145CC 47EB 0020                  		lea	$20(a3),a3	; next tile
000145D0 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
000145D4                            
000145D4 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
000145D8                            
000145D8                            locret_13C96:
000145D8 4E75                       		rts	
000145DA                            ; End of function LoadSonicDynPLC
000145DA                            
000145DA                            ; ===========================================================================
000145DA                            ; ---------------------------------------------------------------------------
000145DA                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
000145DA                            ; ---------------------------------------------------------------------------
000145DA                            
000145DA                            Obj0A:					; XREF: Obj_Index
000145DA 7000                       		moveq	#0,d0
000145DC 1028 0024                  		move.b	$24(a0),d0
000145E0 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
000145E4 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
000145E8                            ; ===========================================================================
000145E8 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
000145EC 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
000145F0 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
000145F4 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
000145F8 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
000145FA                            ; ===========================================================================
000145FA                            
000145FA                            Obj0A_Main:				; XREF: Obj0A_Index
000145FA 5428 0024                  		addq.b	#2,$24(a0)
000145FE 217C 0001 31F2 0004        		move.l	#Map_obj64,4(a0)
00014606 317C 8348 0002             		move.w	#$8348,2(a0)
0001460C 117C 0084 0001             		move.b	#$84,1(a0)
00014612 117C 0010 0019             		move.b	#$10,$19(a0)
00014618 117C 0001 0018             		move.b	#1,$18(a0)
0001461E 1028 0028                  		move.b	$28(a0),d0
00014622 6A00                       		bpl.s	loc_13D00
00014624 5028 0024                  		addq.b	#8,$24(a0)
00014628 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014630 317C 0440 0002             		move.w	#$440,2(a0)
00014636 0240 007F                  		andi.w	#$7F,d0
0001463A 1140 0033                  		move.b	d0,$33(a0)
0001463E 6000 0000                  		bra.w	Obj0A_Countdown
00014642                            ; ===========================================================================
00014642                            
00014642                            loc_13D00:
00014642 1140 001C                  		move.b	d0,$1C(a0)
00014646 3168 0008 0030             		move.w	8(a0),$30(a0)
0001464C 317C FF78 0012             		move.w	#-$88,$12(a0)
00014652                            
00014652                            Obj0A_Animate:				; XREF: Obj0A_Index
00014652 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014658 4EB9 0000 AEDA             		jsr	AnimateSprite
0001465E                            
0001465E                            Obj0A_ChkWater:				; XREF: Obj0A_Index
0001465E 3038 F646                  		move.w	($FFFFF646).w,d0
00014662 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014666 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014668 117C 0006 0024             		move.b	#6,$24(a0)
0001466E 5E28 001C                  		addq.b	#7,$1C(a0)
00014672 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014678 6700                       		beq.s	Obj0A_Display
0001467A 6000                       		bra.s	Obj0A_Display
0001467C                            ; ===========================================================================
0001467C                            
0001467C                            Obj0A_Wobble:
0001467C 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014680 6700                       		beq.s	loc_13D44
00014682 5868 0030                  		addq.w	#4,$30(a0)
00014686                            
00014686                            loc_13D44:
00014686 1028 0026                  		move.b	$26(a0),d0
0001468A 5228 0026                  		addq.b	#1,$26(a0)
0001468E 0240 007F                  		andi.w	#$7F,d0
00014692 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014698 1031 0000                  		move.b	(a1,d0.w),d0
0001469C 4880                       		ext.w	d0
0001469E D068 0030                  		add.w	$30(a0),d0
000146A2 3140 0008                  		move.w	d0,8(a0)
000146A6 6100                       		bsr.s	Obj0A_ShowNumber
000146A8 4EBA 9790                  		jsr	SpeedToPos
000146AC 4A28 0001                  		tst.b	1(a0)
000146B0 6A00                       		bpl.s	Obj0A_Delete
000146B2 4EFA 97AC                  		jmp	DisplaySprite
000146B6                            ; ===========================================================================
000146B6                            
000146B6                            Obj0A_Delete:
000146B6 4EFA 97E4                  		jmp	DeleteObject
000146BA                            ; ===========================================================================
000146BA                            
000146BA                            Obj0A_Display:				; XREF: Obj0A_Index
000146BA 6100                       		bsr.s	Obj0A_ShowNumber
000146BC 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000146C2 4EB9 0000 AEDA             		jsr	AnimateSprite
000146C8 4EFA 9796                  		jmp	DisplaySprite
000146CC                            ; ===========================================================================
000146CC                            
000146CC                            Obj0A_Delete2:				; XREF: Obj0A_Index
000146CC 4EFA 97CE                  		jmp	DeleteObject
000146D0                            ; ===========================================================================
000146D0                            
000146D0                            Obj0A_AirLeft:				; XREF: Obj0A_Index
000146D0 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
000146D6 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
000146D8 5368 0038                  		subq.w	#1,$38(a0)
000146DC 6600                       		bne.s	Obj0A_Display2
000146DE 117C 000E 0024             		move.b	#$E,$24(a0)
000146E4 5E28 001C                  		addq.b	#7,$1C(a0)
000146E8 60D0                       		bra.s	Obj0A_Display
000146EA                            ; ===========================================================================
000146EA                            
000146EA                            Obj0A_Display2:
000146EA 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
000146F0 4EB9 0000 AEDA             		jsr	AnimateSprite
000146F6 4A28 0001                  		tst.b	1(a0)
000146FA 6A00                       		bpl.s	Obj0A_Delete3
000146FC 4EFA 9762                  		jmp	DisplaySprite
00014700                            ; ===========================================================================
00014700                            
00014700                            Obj0A_Delete3:
00014700 4EFA 979A                  		jmp	DeleteObject
00014704                            ; ===========================================================================
00014704                            
00014704                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014704 4A68 0038                  		tst.w	$38(a0)
00014708 6700                       		beq.s	locret_13E1A
0001470A 5368 0038                  		subq.w	#1,$38(a0)
0001470E 6600                       		bne.s	locret_13E1A
00014710 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00014716 6400                       		bcc.s	locret_13E1A
00014718 317C 000F 0038             		move.w	#$F,$38(a0)
0001471E 4268 0012                  		clr.w	$12(a0)
00014722 117C 0080 0001             		move.b	#$80,1(a0)
00014728 3028 0008                  		move.w	8(a0),d0
0001472C 9078 F700                  		sub.w	($FFFFF700).w,d0
00014730 0640 0080                  		addi.w	#$80,d0
00014734 3140 0008                  		move.w	d0,8(a0)
00014738 3028 000C                  		move.w	$C(a0),d0
0001473C 9078 F704                  		sub.w	($FFFFF704).w,d0
00014740 0640 0080                  		addi.w	#$80,d0
00014744 3140 000A                  		move.w	d0,$A(a0)
00014748 117C 000C 0024             		move.b	#$C,$24(a0)
0001474E                            
0001474E                            locret_13E1A:
0001474E 4E75                       		rts	
00014750                            ; ===========================================================================
00014750                            Obj0A_WobbleData:
00014750 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00014761 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00014772 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00014783 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00014793 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
000147A0 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000147AD FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000147BA FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000147C7 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000147D0                            ; ===========================================================================
000147D0                            
000147D0                            Obj0A_Countdown:			; XREF: Obj0A_Index
000147D0 4A68 002C                  		tst.w	$2C(a0)
000147D4 6600 0000                  		bne.w	loc_13F86
000147D8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000147DE 6400 0000                  		bcc.w	locret_1408C
000147E2 0838 0006 D022             		btst	#6,($FFFFD022).w
000147E8 6700 0000                  		beq.w	locret_1408C
000147EC 5368 0038                  		subq.w	#1,$38(a0)
000147F0 6A00 0000                  		bpl.w	loc_13FAC
000147F4 317C 003B 0038             		move.w	#59,$38(a0)
000147FA 317C 0001 0036             		move.w	#1,$36(a0)
00014800 4EB9 0000 2CD8             		jsr	(RandomNumber).l
00014806 0240 0001                  		andi.w	#1,d0
0001480A 1140 0034                  		move.b	d0,$34(a0)
0001480E 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014812 0C40 0019                  		cmpi.w	#$19,d0
00014816 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00014818 0C40 0014                  		cmpi.w	#$14,d0
0001481C 6700                       		beq.s	Obj0A_WarnSound
0001481E 0C40 000F                  		cmpi.w	#$F,d0
00014822 6700                       		beq.s	Obj0A_WarnSound
00014824 0C40 000C                  		cmpi.w	#$C,d0
00014828 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001482A 6600                       		bne.s	loc_13F02
0001482C 303C 0092                  		move.w	#$92,d0
00014830 4EB9 0000 15CC             		jsr	(PlaySound).l	; play countdown music
00014836                            
00014836                            loc_13F02:
00014836 5328 0032                  		subq.b	#1,$32(a0)
0001483A 6A00                       		bpl.s	Obj0A_ReduceAir
0001483C 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014842 08E8 0007 0036             		bset	#7,$36(a0)
00014848 6000                       		bra.s	Obj0A_ReduceAir
0001484A                            ; ===========================================================================
0001484A                            
0001484A                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001484A 303C 00C2                  		move.w	#$C2,d0
0001484E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014854                            
00014854                            Obj0A_ReduceAir:
00014854 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00014858 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001485C 6100 0000                  		bsr.w	ResumeMusic
00014860 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00014866 303C 00B2                  		move.w	#$B2,d0
0001486A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play drowning sound
00014870 117C 000A 0034             		move.b	#$A,$34(a0)
00014876 317C 0001 0036             		move.w	#1,$36(a0)
0001487C 317C 0078 002C             		move.w	#$78,$2C(a0)
00014882 2F08                       		move.l	a0,-(sp)
00014884 41F8 D000                  		lea	($FFFFD000).w,a0
00014888 6100 F818                  		bsr.w	Sonic_ResetOnFloor
0001488C 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00014892 08E8 0001 0022             		bset	#1,$22(a0)
00014898 08E8 0007 0002             		bset	#7,2(a0)
0001489E 317C 0000 0012             		move.w	#0,$12(a0)
000148A4 317C 0000 0010             		move.w	#0,$10(a0)
000148AA 317C 0000 0014             		move.w	#0,$14(a0)
000148B0 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000148B6 205F                       		movea.l	(sp)+,a0
000148B8 4E75                       		rts	
000148BA                            ; ===========================================================================
000148BA                            
000148BA                            loc_13F86:
000148BA 5368 002C                  		subq.w	#1,$2C(a0)
000148BE 6600                       		bne.s	loc_13F94
000148C0 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000148C6 4E75                       		rts	
000148C8                            ; ===========================================================================
000148C8                            
000148C8                            loc_13F94:
000148C8 2F08                       		move.l	a0,-(sp)
000148CA 41F8 D000                  		lea	($FFFFD000).w,a0
000148CE 4EBA 956A                  		jsr	SpeedToPos
000148D2 0668 0010 0012             		addi.w	#$10,$12(a0)
000148D8 205F                       		movea.l	(sp)+,a0
000148DA 6000                       		bra.s	loc_13FAC
000148DC                            ; ===========================================================================
000148DC                            
000148DC                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
000148DC 6000                       		bra.s	Obj0A_MakeItem
000148DE                            ; ===========================================================================
000148DE                            
000148DE                            loc_13FAC:
000148DE 4A68 0036                  		tst.w	$36(a0)
000148E2 6700 0000                  		beq.w	locret_1408C
000148E6 5368 003A                  		subq.w	#1,$3A(a0)
000148EA 6A00 0000                  		bpl.w	locret_1408C
000148EE                            
000148EE                            Obj0A_MakeItem:
000148EE 4EB9 0000 2CD8             		jsr	(RandomNumber).l
000148F4 0240 000F                  		andi.w	#$F,d0
000148F8 3140 003A                  		move.w	d0,$3A(a0)
000148FC 4EBA 99E8                  		jsr	SingleObjLoad
00014900 6600 0000                  		bne.w	locret_1408C
00014904 12BC 000A                  		move.b	#$A,0(a1)	; load object
00014908 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
0001490E 7006                       		moveq	#6,d0
00014910 0838 0000 D022             		btst	#0,($FFFFD022).w
00014916 6700                       		beq.s	loc_13FF2
00014918 4440                       		neg.w	d0
0001491A 137C 0040 0026             		move.b	#$40,$26(a1)
00014920                            
00014920                            loc_13FF2:
00014920 D169 0008                  		add.w	d0,8(a1)
00014924 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001492A 137C 0006 0028             		move.b	#6,$28(a1)
00014930 4A68 002C                  		tst.w	$2C(a0)
00014934 6700 0000                  		beq.w	loc_1403E
00014938 0268 0007 003A             		andi.w	#7,$3A(a0)
0001493E 0668 0000 003A             		addi.w	#0,$3A(a0)
00014944 3038 D00C                  		move.w	($FFFFD00C).w,d0
00014948 0440 000C                  		subi.w	#$C,d0
0001494C 3340 000C                  		move.w	d0,$C(a1)
00014950 4EB9 0000 2CD8             		jsr	(RandomNumber).l
00014956 1340 0026                  		move.b	d0,$26(a1)
0001495A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001495E 0200 0003                  		andi.b	#3,d0
00014962 6600                       		bne.s	loc_14082
00014964 137C 000E 0028             		move.b	#$E,$28(a1)
0001496A 6000                       		bra.s	loc_14082
0001496C                            ; ===========================================================================
0001496C                            
0001496C                            loc_1403E:
0001496C 0828 0007 0036             		btst	#7,$36(a0)
00014972 6700                       		beq.s	loc_14082
00014974 3438 FE14                  		move.w	($FFFFFE14).w,d2
00014978 E24A                       		lsr.w	#1,d2
0001497A 4EB9 0000 2CD8             		jsr	(RandomNumber).l
00014980 0240 0003                  		andi.w	#3,d0
00014984 6600                       		bne.s	loc_1406A
00014986 08E8 0006 0036             		bset	#6,$36(a0)
0001498C 6600                       		bne.s	loc_14082
0001498E 1342 0028                  		move.b	d2,$28(a1)
00014992 337C 001C 0038             		move.w	#$1C,$38(a1)
00014998                            
00014998                            loc_1406A:
00014998 4A28 0034                  		tst.b	$34(a0)
0001499C 6600                       		bne.s	loc_14082
0001499E 08E8 0006 0036             		bset	#6,$36(a0)
000149A4 6600                       		bne.s	loc_14082
000149A6 1342 0028                  		move.b	d2,$28(a1)
000149AA 337C 001C 0038             		move.w	#$1C,$38(a1)
000149B0                            
000149B0                            loc_14082:
000149B0 5328 0034                  		subq.b	#1,$34(a0)
000149B4 6A00                       		bpl.s	locret_1408C
000149B6 4268 0036                  		clr.w	$36(a0)
000149BA                            
000149BA                            locret_1408C:
000149BA 4E75                       		rts	
000149BC                            
000149BC                            ; ---------------------------------------------------------------------------
000149BC                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000149BC                            ; ---------------------------------------------------------------------------
000149BC                            
000149BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149BC                            
000149BC                            
000149BC                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000149BC 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000149C2                             
000149C2                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
000149C2                             
000149C2 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
000149C6                             
000149C6 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000149CC 6600                       		bne.s	Air_GetBgm2	; if not, branch
000149CE 43F9 0000 3C84             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000149D4 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000149D6                             
000149D6                            Air_GetBgm2:
000149D6 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000149DC 6600                       		bne.s	Air_GetBgm3	; if not, branch
000149DE 43F9 0000 3C8C             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000149E4 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000149E6                             
000149E6                            Air_GetBgm3:
000149E6 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000149EC 6600                       		bne.s	Air_GetBgm4	; if not, branch
000149EE 43F9 0000 3C92             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
000149F4 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000149F6                             
000149F6                            Air_GetBgm4:
000149F6 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000149FC 6600                       		bne.s	Air_PlayMusic	; if not, branch
000149FE 43F9 0000 3C98             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00014A04                             
00014A04                            Air_PlayMusic:
00014A04 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
00014A08                             
00014A08                            loc_140A6:
00014A08 4EB9 0000 15CC             		jsr	(PlaySound).l
00014A0E                             
00014A0E                            ; NineKode ends here
00014A0E                            
00014A0E                            loc_140AC:
00014A0E 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014A14 4238 D372                  		clr.b	($FFFFD372).w
00014A18 4E75                       		rts	
00014A1A                            ; End of function ResumeMusic
00014A1A                            
00014A1A                            ; ===========================================================================
00014A1A                            Ani_obj0A:
00014A1A                            	include "_anim\obj0A.asm"
00014A1A                            ; ---------------------------------------------------------------------------
00014A1A                            ; Animation script - countdown numbers and bubbles (LZ)
00014A1A                            ; ---------------------------------------------------------------------------
00014A1A 0000                       		dc.w byte_140D6-Ani_obj0A
00014A1C 0000                       		dc.w byte_140E0-Ani_obj0A
00014A1E 0000                       		dc.w byte_140EA-Ani_obj0A
00014A20 0000                       		dc.w byte_140F4-Ani_obj0A
00014A22 0000                       		dc.w byte_140FE-Ani_obj0A
00014A24 0000                       		dc.w byte_14108-Ani_obj0A
00014A26 0000                       		dc.w byte_14112-Ani_obj0A
00014A28 0000                       		dc.w byte_14118-Ani_obj0A
00014A2A 0000                       		dc.w byte_14120-Ani_obj0A
00014A2C 0000                       		dc.w byte_14128-Ani_obj0A
00014A2E 0000                       		dc.w byte_14130-Ani_obj0A
00014A30 0000                       		dc.w byte_14138-Ani_obj0A
00014A32 0000                       		dc.w byte_14140-Ani_obj0A
00014A34 0000                       		dc.w byte_14148-Ani_obj0A
00014A36 0000                       		dc.w byte_1414A-Ani_obj0A
00014A38 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014A42 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00014A4C 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014A56 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014A60 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014A6A 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014A74 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014A7A 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014A82 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014A8A 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014A92 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00014A9A 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014AA2 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00014AAA 0EFC                       byte_14148:	dc.b $E, $FC
00014AAC 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014AB2                            		even
00014AB2                            		even
00014AB2                            
00014AB2                            ; ---------------------------------------------------------------------------
00014AB2                            ; Sprite mappings - drowning countdown numbers (LZ)
00014AB2                            ; ---------------------------------------------------------------------------
00014AB2                            Map_obj0A:
00014AB2                            	include "_maps\obj0A.asm"
00014AB2                            ; ---------------------------------------------------------------------------
00014AB2                            ; Sprite mappings - drowning countdown numbers (LZ)
00014AB2                            ; ---------------------------------------------------------------------------
00014AB2 0000                       		dc.w byte_14152-Map_obj0A
00014AB4 01                         byte_14152:	dc.b 1
00014AB5 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
00014ABA                            		even
00014ABA                            		even
00014ABA                            
00014ABA                            ; ===========================================================================
00014ABA                            ; ---------------------------------------------------------------------------
00014ABA                            ; Object 38 - shield and invincibility stars
00014ABA                            ; ---------------------------------------------------------------------------
00014ABA                            
00014ABA                            Obj38:					; XREF: Obj_Index
00014ABA 7000                       		moveq	#0,d0
00014ABC 1028 0024                  		move.b	$24(a0),d0
00014AC0 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
00014AC4 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
00014AC8                            ; ===========================================================================
00014AC8 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
00014ACA 0000                       		dc.w Obj38_Shield-Obj38_Index
00014ACC 0000                       		dc.w Obj38_Stars-Obj38_Index
00014ACE                            ; ===========================================================================
00014ACE                            
00014ACE                            Obj38_Main:				; XREF: Obj38_Index
00014ACE 5428 0024                  		addq.b	#2,$24(a0)
00014AD2 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
00014ADA 117C 0004 0001             		move.b	#4,1(a0)
00014AE0 117C 0001 0018             		move.b	#1,$18(a0)
00014AE6 117C 0010 0019             		move.b	#$10,$19(a0)
00014AEC 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
00014AF0 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014AF2 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014AF8 4E75                       		rts	
00014AFA                            ; ===========================================================================
00014AFA                            
00014AFA                            Obj38_DoStars:
00014AFA 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
00014AFE 317C 055C 0002             		move.w	#$55C,2(a0)
00014B04 4E75                       		rts	
00014B06                            ; ===========================================================================
00014B06                            
00014B06                            Obj38_Shield:				; XREF: Obj38_Index
00014B06 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014B0A 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
00014B0C 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
00014B10 6700                       		beq.s	Obj38_Delete	; if not, branch
00014B12 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014B18 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014B1E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B24 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014B2A 4EB9 0000 AEDA             		jsr	AnimateSprite
00014B30 4EFA 932E                  		jmp	DisplaySprite
00014B34                            ; ===========================================================================
00014B34                            
00014B34                            Obj38_RmvShield:
00014B34 4E75                       		rts	
00014B36                            ; ===========================================================================
00014B36                            
00014B36                            Obj38_Delete:
00014B36 4EFA 9364                  		jmp	DeleteObject
00014B3A                            ; ===========================================================================
00014B3A                            
00014B3A                            Obj38_Stars:				; XREF: Obj38_Index
00014B3A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014B3E 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014B40 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014B44 1228 001C                  		move.b	$1C(a0),d1
00014B48 5301                       		subq.b	#1,d1
00014B4A 6000                       		bra.s	Obj38_StarTrail
00014B4C                            ; ===========================================================================
00014B4C E909                       		lsl.b	#4,d1
00014B4E 5801                       		addq.b	#4,d1
00014B50 9001                       		sub.b	d1,d0
00014B52 1228 0030                  		move.b	$30(a0),d1
00014B56 9001                       		sub.b	d1,d0
00014B58 5801                       		addq.b	#4,d1
00014B5A 0201 000F                  		andi.b	#$F,d1
00014B5E 1141 0030                  		move.b	d1,$30(a0)
00014B62 6000                       		bra.s	Obj38_StarTrail2a
00014B64                            ; ===========================================================================
00014B64                            
00014B64                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014B64 E709                       		lsl.b	#3,d1
00014B66 1401                       		move.b	d1,d2
00014B68 D201                       		add.b	d1,d1
00014B6A D202                       		add.b	d2,d1
00014B6C 5801                       		addq.b	#4,d1
00014B6E 9001                       		sub.b	d1,d0
00014B70 1228 0030                  		move.b	$30(a0),d1
00014B74 9001                       		sub.b	d1,d0
00014B76 5801                       		addq.b	#4,d1
00014B78 0C01 0018                  		cmpi.b	#$18,d1
00014B7C 6500                       		bcs.s	Obj38_StarTrail2
00014B7E 7200                       		moveq	#0,d1
00014B80                            
00014B80                            Obj38_StarTrail2:
00014B80 1141 0030                  		move.b	d1,$30(a0)
00014B84                            
00014B84                            Obj38_StarTrail2a:
00014B84 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014B88 43F1 0000                  		lea	(a1,d0.w),a1
00014B8C 3159 0008                  		move.w	(a1)+,8(a0)
00014B90 3159 000C                  		move.w	(a1)+,$C(a0)
00014B94 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014B9A 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014BA0 4EB9 0000 AEDA             		jsr	AnimateSprite
00014BA6 4EFA 92B8                  		jmp	DisplaySprite
00014BAA                            ; ===========================================================================
00014BAA                            
00014BAA                            Obj38_Delete2:				; XREF: Obj38_Stars
00014BAA 4EFA 92F0                  		jmp	DeleteObject
00014BAE                            ; ===========================================================================
00014BAE                            ; ---------------------------------------------------------------------------
00014BAE                            ; Object 4A - special stage entry from beta
00014BAE                            ; ---------------------------------------------------------------------------
00014BAE                            
00014BAE                            Obj4A:					; XREF: Obj_Index
00014BAE 7000                       		moveq	#0,d0
00014BB0 1028 0024                  		move.b	$24(a0),d0
00014BB4 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014BB8 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
00014BBC                            ; ===========================================================================
00014BBC 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
00014BBE 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
00014BC0 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
00014BC2                            ; ===========================================================================
00014BC2                            
00014BC2                            Obj4A_Main:				; XREF: Obj4A_Index
00014BC2 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
00014BC6 6700                       		beq.s	Obj4A_Main2	; if yes, branch
00014BC8 4E75                       		rts	
00014BCA                            ; ===========================================================================
00014BCA                            
00014BCA                            Obj4A_Main2:
00014BCA 5428 0024                  		addq.b	#2,$24(a0)
00014BCE 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
00014BD6 117C 0004 0001             		move.b	#4,1(a0)
00014BDC 117C 0001 0018             		move.b	#1,$18(a0)
00014BE2 117C 0038 0019             		move.b	#$38,$19(a0)
00014BE8 317C 0541 0002             		move.w	#$541,2(a0)
00014BEE 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014BF4                            
00014BF4                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014BF4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014BFA 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00014C00 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014C06 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
00014C0C 4EB9 0000 AEDA             		jsr	AnimateSprite
00014C12 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014C18 6600                       		bne.s	Obj4A_Display
00014C1A 4A38 D000                  		tst.b	($FFFFD000).w
00014C1E 6700                       		beq.s	Obj4A_Display
00014C20 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014C26 303C 00A8                  		move.w	#$A8,d0
00014C2A 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014C30                            
00014C30                            Obj4A_Display:
00014C30 4EFA 922E                  		jmp	DisplaySprite
00014C34                            ; ===========================================================================
00014C34                            
00014C34                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014C34 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014C38 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014C3A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014C40 4EFA 925A                  		jmp	DeleteObject
00014C44                            ; ===========================================================================
00014C44                            
00014C44                            Obj4A_Wait:
00014C44 4E75                       		rts	
00014C46                            ; ===========================================================================
00014C46                            ; ---------------------------------------------------------------------------
00014C46                            ; Object 08 - water splash (LZ)
00014C46                            ; ---------------------------------------------------------------------------
00014C46                            
00014C46                            Obj08:					; XREF: Obj_Index
00014C46 7000                       		moveq	#0,d0
00014C48 1028 0024                  		move.b	$24(a0),d0
00014C4C 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014C50 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014C54                            ; ===========================================================================
00014C54 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014C56 0000                       		dc.w Obj08_Display-Obj08_Index
00014C58 0000                       		dc.w Obj08_Delete-Obj08_Index
00014C5A                            ; ===========================================================================
00014C5A                            
00014C5A                            Obj08_Main:				; XREF: Obj08_Index
00014C5A 5428 0024                  		addq.b	#2,$24(a0)
00014C5E 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014C66 0028 0004 0001             		ori.b	#4,1(a0)
00014C6C 117C 0001 0018             		move.b	#1,$18(a0)
00014C72 117C 0010 0019             		move.b	#$10,$19(a0)
00014C78 317C 4259 0002             		move.w	#$4259,2(a0)
00014C7E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014C84                            
00014C84                            Obj08_Display:				; XREF: Obj08_Index
00014C84 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014C8A 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014C90 4EB9 0000 AEDA             		jsr	AnimateSprite
00014C96 4EFA 91C8                  		jmp	DisplaySprite
00014C9A                            ; ===========================================================================
00014C9A                            
00014C9A                            Obj08_Delete:				; XREF: Obj08_Index
00014C9A 4EFA 9200                  		jmp	DeleteObject	; delete when animation	is complete
00014C9E                            ; ===========================================================================
00014C9E                            Ani_obj38:
00014C9E                            	include "_anim\obj38.asm"
00014C9E                            ; ---------------------------------------------------------------------------
00014C9E                            ; Animation script - shield and invincibility stars
00014C9E                            ; ---------------------------------------------------------------------------
00014C9E 0000                       		dc.w byte_14356-Ani_obj38
00014CA0 0000                       		dc.w byte_1435E-Ani_obj38
00014CA2 0000                       		dc.w byte_14364-Ani_obj38
00014CA4 0000                       		dc.w byte_1437E-Ani_obj38
00014CA6 0000                       		dc.w byte_14398-Ani_obj38
00014CA8 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014CB0 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014CB6 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
00014CC7 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
00014CD0 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
00014CE1 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
00014CEA 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014CFB 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014D04                            		even
00014D04                            		even
00014D04                            
00014D04                            ; ---------------------------------------------------------------------------
00014D04                            ; Sprite mappings - shield and invincibility stars
00014D04                            ; ---------------------------------------------------------------------------
00014D04                            Map_obj38:
00014D04                            	include "_maps\obj38.asm"
00014D04                            ; ---------------------------------------------------------------------------
00014D04                            ; Sprite mappings - shield and invincibility stars
00014D04                            ; ---------------------------------------------------------------------------
00014D04 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014D08 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
00014D0C 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
00014D10 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014D14 04                         byte_143C2:	dc.b 4
00014D15 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014D1A E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014D1F 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014D24 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014D29 04                         byte_143D7:	dc.b 4
00014D2A E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00014D2F E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014D34 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014D39 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00014D3E 04                         byte_143EC:	dc.b 4
00014D3F E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014D44 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014D49 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014D4E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014D53 04                         byte_14401:	dc.b 4
00014D54 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014D59 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00014D5E 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014D63 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014D68 04                         byte_14416:	dc.b 4
00014D69 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014D6E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014D73 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014D78 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014D7D 04                         byte_1442B:	dc.b 4
00014D7E E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014D83 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014D88 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00014D8D 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014D92 04                         byte_14440:	dc.b 4
00014D93 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014D98 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00014D9D 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014DA2 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014DA8 00                         		even
00014DA8 00                         		even
00014DA8                            
00014DA8                            Ani_obj4A:
00014DA8                            	include "_anim\obj4A.asm"
00014DA8                            ; ---------------------------------------------------------------------------
00014DA8                            ; Animation script - special stage entry effect from beta
00014DA8                            ; ---------------------------------------------------------------------------
00014DA8 0000                       		dc.w byte_14458-Ani_obj4A
00014DAA 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
00014DBE                            		even
00014DBE                            		even
00014DBE                            
00014DBE                            ; ---------------------------------------------------------------------------
00014DBE                            ; Sprite mappings - special stage entry	from beta
00014DBE                            ; ---------------------------------------------------------------------------
00014DBE                            Map_obj4A:
00014DBE                            	include "_maps\obj4A.asm"
00014DBE                            ; ---------------------------------------------------------------------------
00014DBE                            ; Sprite mappings - special stage entry	from beta
00014DBE                            ; ---------------------------------------------------------------------------
00014DBE 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
00014DC2 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
00014DC6 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
00014DCA 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
00014DCE 03                         byte_1447C:	dc.b 3
00014DCF F800 0000 08               		dc.b $F8, 0, 0,	0, 8
00014DD4 0004 0001 00               		dc.b 0,	4, 0, 1, 0
00014DD9 0800 1000 08               		dc.b 8,	0, $10,	0, 8
00014DDE 03                         byte_1448C:	dc.b 3
00014DDF F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
00014DE4 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
00014DE9 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
00014DEE 05                         byte_1449C:	dc.b 5
00014DEF E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014DF4 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014DF9 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
00014DFE 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014E03 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014E08 09                         byte_144B6:	dc.b 9
00014E09 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
00014E0E F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014E13 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014E18 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00014E1D F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014E22 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014E27 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014E2C 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014E31 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014E36 12                         byte_144E4:	dc.b $12
00014E37 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00014E3C F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014E41 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014E46 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014E4B 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014E50 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014E55 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014E5A F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00014E5F 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014E64 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014E69 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00014E6E 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014E73 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014E78 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00014E7D 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014E82 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014E87 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00014E8C F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014E91 11                         byte_1453F:	dc.b $11
00014E92 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014E97 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00014E9C 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014EA1 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014EA6 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00014EAB F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014EB0 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014EB5 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
00014EBA 0000 0025 30               		dc.b 0,	0, 0, $25, $30
00014EBF 0800 0825 30               		dc.b 8,	0, 8, $25, $30
00014EC4 0000 0826 38               		dc.b 0,	0, 8, $26, $38
00014EC9 0800 0029 38               		dc.b 8,	0, 0, $29, $38
00014ECE F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
00014ED3 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
00014ED8 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
00014EDD 0000 0025 48               		dc.b 0,	0, 0, $25, $48
00014EE2 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
00014EE7 09                         byte_14595:	dc.b 9
00014EE8 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
00014EED 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014EF2 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014EF7 0400 0826 40               		dc.b 4,	0, 8, $26, $40
00014EFC FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
00014F01 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014F06 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014F0B 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
00014F10 04                         		dc.b 4
00014F11 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014F16                            		even
00014F16                            		even
00014F16                            
00014F16                            Ani_obj08:
00014F16                            	include "_anim\obj08.asm"
00014F16                            ; ---------------------------------------------------------------------------
00014F16                            ; Animation script - water splash (LZ)
00014F16                            ; ---------------------------------------------------------------------------
00014F16 0000                       		dc.w byte_145C6-Ani_obj08
00014F18 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00014F1E                            		even
00014F1E                            		even
00014F1E                            
00014F1E                            ; ---------------------------------------------------------------------------
00014F1E                            ; Sprite mappings - water splash (LZ)
00014F1E                            ; ---------------------------------------------------------------------------
00014F1E                            Map_obj08:
00014F1E                            	include "_maps\obj08.asm"
00014F1E                            ; ---------------------------------------------------------------------------
00014F1E                            ; Sprite mappings - water splash (LZ)
00014F1E                            ; ---------------------------------------------------------------------------
00014F1E 0000                       		dc.w byte_145D2-Map_obj08
00014F20 0000                       		dc.w byte_145DD-Map_obj08
00014F22 0000                       		dc.w byte_145E8-Map_obj08
00014F24 02                         byte_145D2:	dc.b 2
00014F25 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014F2A FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00014F2F 02                         byte_145DD:	dc.b 2
00014F30 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014F35 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014F3A 01                         byte_145E8:	dc.b 1
00014F3B E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014F40                            		even
00014F40                            		even
00014F40                            
00014F40                            ; ---------------------------------------------------------------------------
00014F40                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014F40                            ; ---------------------------------------------------------------------------
00014F40                            
00014F40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F40                            
00014F40                            
00014F40                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014F40 0828 0003 0022             		btst	#3,$22(a0)
00014F46 6700                       		beq.s	loc_14602
00014F48 7000                       		moveq	#0,d0
00014F4A 11C0 F768                  		move.b	d0,($FFFFF768).w
00014F4E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014F52 4E75                       		rts	
00014F54                            ; ===========================================================================
00014F54                            
00014F54                            loc_14602:
00014F54 7003                       		moveq	#3,d0
00014F56 11C0 F768                  		move.b	d0,($FFFFF768).w
00014F5A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014F5E 1028 0026                  		move.b	$26(a0),d0
00014F62 0600 0020                  		addi.b	#$20,d0
00014F66 6A00                       		bpl.s	loc_14624
00014F68 1028 0026                  		move.b	$26(a0),d0
00014F6C 6A00                       		bpl.s	loc_1461E
00014F6E 5300                       		subq.b	#1,d0
00014F70                            
00014F70                            loc_1461E:
00014F70 0600 0020                  		addi.b	#$20,d0
00014F74 6000                       		bra.s	loc_14630
00014F76                            ; ===========================================================================
00014F76                            
00014F76                            loc_14624:
00014F76 1028 0026                  		move.b	$26(a0),d0
00014F7A 6A00                       		bpl.s	loc_1462C
00014F7C 5200                       		addq.b	#1,d0
00014F7E                            
00014F7E                            loc_1462C:
00014F7E 0600 001F                  		addi.b	#$1F,d0
00014F82                            
00014F82                            loc_14630:
00014F82 0200 00C0                  		andi.b	#$C0,d0
00014F86 0C00 0040                  		cmpi.b	#$40,d0
00014F8A 6700 0000                  		beq.w	Sonic_WalkVertL
00014F8E 0C00 0080                  		cmpi.b	#$80,d0
00014F92 6700 0000                  		beq.w	Sonic_WalkCeiling
00014F96 0C00 00C0                  		cmpi.b	#$C0,d0
00014F9A 6700 0000                  		beq.w	Sonic_WalkVertR
00014F9E 3428 000C                  		move.w	$C(a0),d2
00014FA2 3628 0008                  		move.w	8(a0),d3
00014FA6 7000                       		moveq	#0,d0
00014FA8 1028 0016                  		move.b	$16(a0),d0
00014FAC 4880                       		ext.w	d0
00014FAE D440                       		add.w	d0,d2
00014FB0 1028 0017                  		move.b	$17(a0),d0
00014FB4 4880                       		ext.w	d0
00014FB6 D640                       		add.w	d0,d3
00014FB8 49F8 F768                  		lea	($FFFFF768).w,a4
00014FBC 367C 0010                  		movea.w	#$10,a3
00014FC0 3C3C 0000                  		move.w	#0,d6
00014FC4 7A0D                       		moveq	#$D,d5
00014FC6 6100 0000                  		bsr.w	FindFloor
00014FCA 3F01                       		move.w	d1,-(sp)
00014FCC 3428 000C                  		move.w	$C(a0),d2
00014FD0 3628 0008                  		move.w	8(a0),d3
00014FD4 7000                       		moveq	#0,d0
00014FD6 1028 0016                  		move.b	$16(a0),d0
00014FDA 4880                       		ext.w	d0
00014FDC D440                       		add.w	d0,d2
00014FDE 1028 0017                  		move.b	$17(a0),d0
00014FE2 4880                       		ext.w	d0
00014FE4 4440                       		neg.w	d0
00014FE6 D640                       		add.w	d0,d3
00014FE8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014FEC 367C 0010                  		movea.w	#$10,a3
00014FF0 3C3C 0000                  		move.w	#0,d6
00014FF4 7A0D                       		moveq	#$D,d5
00014FF6 6100 0000                  		bsr.w	FindFloor
00014FFA 301F                       		move.w	(sp)+,d0
00014FFC 6100 0000                  		bsr.w	Sonic_Angle
00015000 4A41                       		tst.w	d1
00015002 6700                       		beq.s	locret_146BE
00015004 6A00                       		bpl.s	loc_146C0
00015006 0C41 FFF2                  		cmpi.w	#-$E,d1
0001500A 6D00                       		blt.s	locret_146E6
0001500C D368 000C                  		add.w	d1,$C(a0)
00015010                            
00015010                            locret_146BE:
00015010 4E75                       		rts	
00015012                            ; ===========================================================================
00015012                            
00015012                            loc_146C0:
00015012 0C41 000E                  		cmpi.w	#$E,d1
00015016 6E00                       		bgt.s	loc_146CC
00015018                            
00015018                            loc_146C6:
00015018 D368 000C                  		add.w	d1,$C(a0)
0001501C 4E75                       		rts	
0001501E                            ; ===========================================================================
0001501E                            
0001501E                            loc_146CC:
0001501E 4A28 0038                  		tst.b	$38(a0)
00015022 66F4                       		bne.s	loc_146C6
00015024 08E8 0001 0022             		bset	#1,$22(a0)
0001502A 08A8 0005 0022             		bclr	#5,$22(a0)
00015030 117C 0001 001D             		move.b	#1,$1D(a0)
00015036 4E75                       		rts	
00015038                            ; ===========================================================================
00015038                            
00015038                            locret_146E6:
00015038 4E75                       		rts	
0001503A                            ; End of function Sonic_AnglePos
0001503A                            
0001503A                            ; ===========================================================================
0001503A 2428 0008                  		move.l	8(a0),d2
0001503E 3028 0010                  		move.w	$10(a0),d0
00015042 48C0                       		ext.l	d0
00015044 E180                       		asl.l	#8,d0
00015046 9480                       		sub.l	d0,d2
00015048 2142 0008                  		move.l	d2,8(a0)
0001504C 303C 0038                  		move.w	#$38,d0
00015050 48C0                       		ext.l	d0
00015052 E180                       		asl.l	#8,d0
00015054 9680                       		sub.l	d0,d3
00015056 2143 000C                  		move.l	d3,$C(a0)
0001505A 4E75                       		rts	
0001505C                            ; ===========================================================================
0001505C                            
0001505C                            locret_1470A:
0001505C 4E75                       		rts	
0001505E                            ; ===========================================================================
0001505E 2628 000C                  		move.l	$C(a0),d3
00015062 3028 0012                  		move.w	$12(a0),d0
00015066 0440 0038                  		subi.w	#$38,d0
0001506A 3140 0012                  		move.w	d0,$12(a0)
0001506E 48C0                       		ext.l	d0
00015070 E180                       		asl.l	#8,d0
00015072 9680                       		sub.l	d0,d3
00015074 2143 000C                  		move.l	d3,$C(a0)
00015078 4E75                       		rts	
0001507A 4E75                       		rts	
0001507C                            ; ===========================================================================
0001507C 2428 0008                  		move.l	8(a0),d2
00015080 2628 000C                  		move.l	$C(a0),d3
00015084 3028 0010                  		move.w	$10(a0),d0
00015088 48C0                       		ext.l	d0
0001508A E180                       		asl.l	#8,d0
0001508C 9480                       		sub.l	d0,d2
0001508E 3028 0012                  		move.w	$12(a0),d0
00015092 48C0                       		ext.l	d0
00015094 E180                       		asl.l	#8,d0
00015096 9680                       		sub.l	d0,d3
00015098 2142 0008                  		move.l	d2,8(a0)
0001509C 2143 000C                  		move.l	d3,$C(a0)
000150A0 4E75                       		rts	
000150A2                            
000150A2                            ; ---------------------------------------------------------------------------
000150A2                            ; Subroutine to	change Sonic's angle as he walks along the floor
000150A2                            ; ---------------------------------------------------------------------------
000150A2                            
000150A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150A2                            
000150A2                            
000150A2                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000150A2 1438 F76A                  		move.b	($FFFFF76A).w,d2
000150A6 B240                       		cmp.w	d0,d1
000150A8 6F00                       		ble.s	loc_1475E
000150AA 1438 F768                  		move.b	($FFFFF768).w,d2
000150AE 3200                       		move.w	d0,d1
000150B0                            
000150B0                            loc_1475E:
000150B0 0802 0000                  		btst	#0,d2
000150B4 6600                       		bne.s	loc_1476A
000150B6 1142 0026                  		move.b	d2,$26(a0)
000150BA 4E75                       		rts	
000150BC                            ; ===========================================================================
000150BC                            
000150BC                            loc_1476A:
000150BC 1428 0026                  		move.b	$26(a0),d2
000150C0 0602 0020                  		addi.b	#$20,d2
000150C4 0202 00C0                  		andi.b	#$C0,d2
000150C8 1142 0026                  		move.b	d2,$26(a0)
000150CC 4E75                       		rts	
000150CE                            ; End of function Sonic_Angle
000150CE                            
000150CE                            ; ---------------------------------------------------------------------------
000150CE                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000150CE                            ; ---------------------------------------------------------------------------
000150CE                            
000150CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150CE                            
000150CE                            
000150CE                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000150CE 3428 000C                  		move.w	$C(a0),d2
000150D2 3628 0008                  		move.w	8(a0),d3
000150D6 7000                       		moveq	#0,d0
000150D8 1028 0017                  		move.b	$17(a0),d0
000150DC 4880                       		ext.w	d0
000150DE 4440                       		neg.w	d0
000150E0 D440                       		add.w	d0,d2
000150E2 1028 0016                  		move.b	$16(a0),d0
000150E6 4880                       		ext.w	d0
000150E8 D640                       		add.w	d0,d3
000150EA 49F8 F768                  		lea	($FFFFF768).w,a4
000150EE 367C 0010                  		movea.w	#$10,a3
000150F2 3C3C 0000                  		move.w	#0,d6
000150F6 7A0D                       		moveq	#$D,d5
000150F8 6100 0000                  		bsr.w	FindWall
000150FC 3F01                       		move.w	d1,-(sp)
000150FE 3428 000C                  		move.w	$C(a0),d2
00015102 3628 0008                  		move.w	8(a0),d3
00015106 7000                       		moveq	#0,d0
00015108 1028 0017                  		move.b	$17(a0),d0
0001510C 4880                       		ext.w	d0
0001510E D440                       		add.w	d0,d2
00015110 1028 0016                  		move.b	$16(a0),d0
00015114 4880                       		ext.w	d0
00015116 D640                       		add.w	d0,d3
00015118 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001511C 367C 0010                  		movea.w	#$10,a3
00015120 3C3C 0000                  		move.w	#0,d6
00015124 7A0D                       		moveq	#$D,d5
00015126 6100 0000                  		bsr.w	FindWall
0001512A 301F                       		move.w	(sp)+,d0
0001512C 6100 FF74                  		bsr.w	Sonic_Angle
00015130 4A41                       		tst.w	d1
00015132 6700                       		beq.s	locret_147F0
00015134 6A00                       		bpl.s	loc_147F2
00015136 0C41 FFF2                  		cmpi.w	#-$E,d1
0001513A 6D00 FF20                  		blt.w	locret_1470A
0001513E D368 0008                  		add.w	d1,8(a0)
00015142                            
00015142                            locret_147F0:
00015142 4E75                       		rts	
00015144                            ; ===========================================================================
00015144                            
00015144                            loc_147F2:
00015144 0C41 000E                  		cmpi.w	#$E,d1
00015148 6E00                       		bgt.s	loc_147FE
0001514A                            
0001514A                            loc_147F8:
0001514A D368 0008                  		add.w	d1,8(a0)
0001514E 4E75                       		rts	
00015150                            ; ===========================================================================
00015150                            
00015150                            loc_147FE:
00015150 4A28 0038                  		tst.b	$38(a0)
00015154 66F4                       		bne.s	loc_147F8
00015156 08E8 0001 0022             		bset	#1,$22(a0)
0001515C 08A8 0005 0022             		bclr	#5,$22(a0)
00015162 117C 0001 001D             		move.b	#1,$1D(a0)
00015168 4E75                       		rts	
0001516A                            ; End of function Sonic_WalkVertR
0001516A                            
0001516A                            ; ---------------------------------------------------------------------------
0001516A                            ; Subroutine allowing Sonic to walk upside-down
0001516A                            ; ---------------------------------------------------------------------------
0001516A                            
0001516A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001516A                            
0001516A                            
0001516A                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001516A 3428 000C                  		move.w	$C(a0),d2
0001516E 3628 0008                  		move.w	8(a0),d3
00015172 7000                       		moveq	#0,d0
00015174 1028 0016                  		move.b	$16(a0),d0
00015178 4880                       		ext.w	d0
0001517A 9440                       		sub.w	d0,d2
0001517C 0A42 000F                  		eori.w	#$F,d2
00015180 1028 0017                  		move.b	$17(a0),d0
00015184 4880                       		ext.w	d0
00015186 D640                       		add.w	d0,d3
00015188 49F8 F768                  		lea	($FFFFF768).w,a4
0001518C 367C FFF0                  		movea.w	#-$10,a3
00015190 3C3C 1000                  		move.w	#$1000,d6
00015194 7A0D                       		moveq	#$D,d5
00015196 6100 0000                  		bsr.w	FindFloor
0001519A 3F01                       		move.w	d1,-(sp)
0001519C 3428 000C                  		move.w	$C(a0),d2
000151A0 3628 0008                  		move.w	8(a0),d3
000151A4 7000                       		moveq	#0,d0
000151A6 1028 0016                  		move.b	$16(a0),d0
000151AA 4880                       		ext.w	d0
000151AC 9440                       		sub.w	d0,d2
000151AE 0A42 000F                  		eori.w	#$F,d2
000151B2 1028 0017                  		move.b	$17(a0),d0
000151B6 4880                       		ext.w	d0
000151B8 9640                       		sub.w	d0,d3
000151BA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000151BE 367C FFF0                  		movea.w	#-$10,a3
000151C2 3C3C 1000                  		move.w	#$1000,d6
000151C6 7A0D                       		moveq	#$D,d5
000151C8 6100 0000                  		bsr.w	FindFloor
000151CC 301F                       		move.w	(sp)+,d0
000151CE 6100 FED2                  		bsr.w	Sonic_Angle
000151D2 4A41                       		tst.w	d1
000151D4 6700                       		beq.s	locret_14892
000151D6 6A00                       		bpl.s	loc_14894
000151D8 0C41 FFF2                  		cmpi.w	#-$E,d1
000151DC 6D00 FE5A                  		blt.w	locret_146E6
000151E0 9368 000C                  		sub.w	d1,$C(a0)
000151E4                            
000151E4                            locret_14892:
000151E4 4E75                       		rts	
000151E6                            ; ===========================================================================
000151E6                            
000151E6                            loc_14894:
000151E6 0C41 000E                  		cmpi.w	#$E,d1
000151EA 6E00                       		bgt.s	loc_148A0
000151EC                            
000151EC                            loc_1489A:
000151EC 9368 000C                  		sub.w	d1,$C(a0)
000151F0 4E75                       		rts	
000151F2                            ; ===========================================================================
000151F2                            
000151F2                            loc_148A0:
000151F2 4A28 0038                  		tst.b	$38(a0)
000151F6 66F4                       		bne.s	loc_1489A
000151F8 08E8 0001 0022             		bset	#1,$22(a0)
000151FE 08A8 0005 0022             		bclr	#5,$22(a0)
00015204 117C 0001 001D             		move.b	#1,$1D(a0)
0001520A 4E75                       		rts	
0001520C                            ; End of function Sonic_WalkCeiling
0001520C                            
0001520C                            ; ---------------------------------------------------------------------------
0001520C                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
0001520C                            ; ---------------------------------------------------------------------------
0001520C                            
0001520C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001520C                            
0001520C                            
0001520C                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
0001520C 3428 000C                  		move.w	$C(a0),d2
00015210 3628 0008                  		move.w	8(a0),d3
00015214 7000                       		moveq	#0,d0
00015216 1028 0017                  		move.b	$17(a0),d0
0001521A 4880                       		ext.w	d0
0001521C 9440                       		sub.w	d0,d2
0001521E 1028 0016                  		move.b	$16(a0),d0
00015222 4880                       		ext.w	d0
00015224 9640                       		sub.w	d0,d3
00015226 0A43 000F                  		eori.w	#$F,d3
0001522A 49F8 F768                  		lea	($FFFFF768).w,a4
0001522E 367C FFF0                  		movea.w	#-$10,a3
00015232 3C3C 0800                  		move.w	#$800,d6
00015236 7A0D                       		moveq	#$D,d5
00015238 6100 0000                  		bsr.w	FindWall
0001523C 3F01                       		move.w	d1,-(sp)
0001523E 3428 000C                  		move.w	$C(a0),d2
00015242 3628 0008                  		move.w	8(a0),d3
00015246 7000                       		moveq	#0,d0
00015248 1028 0017                  		move.b	$17(a0),d0
0001524C 4880                       		ext.w	d0
0001524E D440                       		add.w	d0,d2
00015250 1028 0016                  		move.b	$16(a0),d0
00015254 4880                       		ext.w	d0
00015256 9640                       		sub.w	d0,d3
00015258 0A43 000F                  		eori.w	#$F,d3
0001525C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015260 367C FFF0                  		movea.w	#-$10,a3
00015264 3C3C 0800                  		move.w	#$800,d6
00015268 7A0D                       		moveq	#$D,d5
0001526A 6100 0000                  		bsr.w	FindWall
0001526E 301F                       		move.w	(sp)+,d0
00015270 6100 FE30                  		bsr.w	Sonic_Angle
00015274 4A41                       		tst.w	d1
00015276 6700                       		beq.s	locret_14934
00015278 6A00                       		bpl.s	loc_14936
0001527A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001527E 6D00 FDDC                  		blt.w	locret_1470A
00015282 9368 0008                  		sub.w	d1,8(a0)
00015286                            
00015286                            locret_14934:
00015286 4E75                       		rts	
00015288                            ; ===========================================================================
00015288                            
00015288                            loc_14936:
00015288 0C41 000E                  		cmpi.w	#$E,d1
0001528C 6E00                       		bgt.s	loc_14942
0001528E                            
0001528E                            loc_1493C:
0001528E 9368 0008                  		sub.w	d1,8(a0)
00015292 4E75                       		rts	
00015294                            ; ===========================================================================
00015294                            
00015294                            loc_14942:
00015294 4A28 0038                  		tst.b	$38(a0)
00015298 66F4                       		bne.s	loc_1493C
0001529A 08E8 0001 0022             		bset	#1,$22(a0)
000152A0 08A8 0005 0022             		bclr	#5,$22(a0)
000152A6 117C 0001 001D             		move.b	#1,$1D(a0)
000152AC 4E75                       		rts	
000152AE                            ; End of function Sonic_WalkVertL
000152AE                            
000152AE                            ; ---------------------------------------------------------------------------
000152AE                            ; Subroutine to	find which tile	the object is standing on
000152AE                            ; ---------------------------------------------------------------------------
000152AE                            
000152AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152AE                            
000152AE                            
000152AE                            Floor_ChkTile:				; XREF: FindFloor; et al
000152AE 3002                       		move.w	d2,d0
000152B0 E248                       		lsr.w	#1,d0
000152B2 0240 0380                  		andi.w	#$380,d0
000152B6 3203                       		move.w	d3,d1
000152B8 E049                       		lsr.w	#8,d1
000152BA 0241 007F                  		andi.w	#$7F,d1
000152BE D041                       		add.w	d1,d0
000152C0 72FF                       		moveq	#-1,d1
000152C2 43F8 A400                  		lea	($FFFFA400).w,a1
000152C6 1231 0000                  		move.b	(a1,d0.w),d1
000152CA 6700                       		beq.s	loc_14996
000152CC 6B00                       		bmi.s	loc_1499A
000152CE 5301                       		subq.b	#1,d1
000152D0 4881                       		ext.w	d1
000152D2 EE59                       		ror.w	#7,d1
000152D4 3002                       		move.w	d2,d0
000152D6 D040                       		add.w	d0,d0
000152D8 0240 01E0                  		andi.w	#$1E0,d0
000152DC D240                       		add.w	d0,d1
000152DE 3003                       		move.w	d3,d0
000152E0 E648                       		lsr.w	#3,d0
000152E2 0240 001E                  		andi.w	#$1E,d0
000152E6 D240                       		add.w	d0,d1
000152E8                            
000152E8                            loc_14996:
000152E8 2241                       		movea.l	d1,a1
000152EA 4E75                       		rts	
000152EC                            ; ===========================================================================
000152EC                            
000152EC                            loc_1499A:
000152EC 0241 007F                  		andi.w	#$7F,d1
000152F0 0828 0006 0001             		btst	#6,1(a0)
000152F6 6700                       		beq.s	loc_149B2
000152F8 5241                       		addq.w	#1,d1
000152FA 0C41 0029                  		cmpi.w	#$29,d1
000152FE 6600                       		bne.s	loc_149B2
00015300 323C 0051                  		move.w	#$51,d1
00015304                            
00015304                            loc_149B2:
00015304 5301                       		subq.b	#1,d1
00015306 EE59                       		ror.w	#7,d1
00015308 3002                       		move.w	d2,d0
0001530A D040                       		add.w	d0,d0
0001530C 0240 01E0                  		andi.w	#$1E0,d0
00015310 D240                       		add.w	d0,d1
00015312 3003                       		move.w	d3,d0
00015314 E648                       		lsr.w	#3,d0
00015316 0240 001E                  		andi.w	#$1E,d0
0001531A D240                       		add.w	d0,d1
0001531C 2241                       		movea.l	d1,a1
0001531E 4E75                       		rts	
00015320                            ; End of function Floor_ChkTile
00015320                            
00015320                            
00015320                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015320                            
00015320                            
00015320                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015320 618C                       		bsr.s	Floor_ChkTile
00015322 3011                       		move.w	(a1),d0
00015324 3800                       		move.w	d0,d4
00015326 0240 07FF                  		andi.w	#$7FF,d0
0001532A 6700                       		beq.s	loc_149DE
0001532C 0B04                       		btst	d5,d4
0001532E 6600                       		bne.s	loc_149EC
00015330                            
00015330                            loc_149DE:
00015330 D44B                       		add.w	a3,d2
00015332 6100 0000                  		bsr.w	FindFloor2
00015336 944B                       		sub.w	a3,d2
00015338 0641 0010                  		addi.w	#$10,d1
0001533C 4E75                       		rts	
0001533E                            ; ===========================================================================
0001533E                            
0001533E                            loc_149EC:
0001533E 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015342 1032 0000                  		move.b	(a2,d0.w),d0
00015346 0240 00FF                  		andi.w	#$FF,d0
0001534A 67E4                       		beq.s	loc_149DE
0001534C 45F9 0000 0000             		lea	(AngleMap).l,a2
00015352 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015356 E948                       		lsl.w	#4,d0
00015358 3203                       		move.w	d3,d1
0001535A 0804 000B                  		btst	#$B,d4
0001535E 6700                       		beq.s	loc_14A12
00015360 4641                       		not.w	d1
00015362 4414                       		neg.b	(a4)
00015364                            
00015364                            loc_14A12:
00015364 0804 000C                  		btst	#$C,d4
00015368 6700                       		beq.s	loc_14A22
0001536A 0614 0040                  		addi.b	#$40,(a4)
0001536E 4414                       		neg.b	(a4)
00015370 0414 0040                  		subi.b	#$40,(a4)
00015374                            
00015374                            loc_14A22:
00015374 0241 000F                  		andi.w	#$F,d1
00015378 D240                       		add.w	d0,d1
0001537A 45F9 0000 0000             		lea	(CollArray1).l,a2
00015380 1032 1000                  		move.b	(a2,d1.w),d0
00015384 4880                       		ext.w	d0
00015386 BD44                       		eor.w	d6,d4
00015388 0804 000C                  		btst	#$C,d4
0001538C 6700                       		beq.s	loc_14A3E
0001538E 4440                       		neg.w	d0
00015390                            
00015390                            loc_14A3E:
00015390 4A40                       		tst.w	d0
00015392 679C                       		beq.s	loc_149DE
00015394 6B00                       		bmi.s	loc_14A5A
00015396 0C00 0010                  		cmpi.b	#$10,d0
0001539A 6700                       		beq.s	loc_14A66
0001539C 3202                       		move.w	d2,d1
0001539E 0241 000F                  		andi.w	#$F,d1
000153A2 D041                       		add.w	d1,d0
000153A4 323C 000F                  		move.w	#$F,d1
000153A8 9240                       		sub.w	d0,d1
000153AA 4E75                       		rts	
000153AC                            ; ===========================================================================
000153AC                            
000153AC                            loc_14A5A:
000153AC 3202                       		move.w	d2,d1
000153AE 0241 000F                  		andi.w	#$F,d1
000153B2 D041                       		add.w	d1,d0
000153B4 6A00 FF7A                  		bpl.w	loc_149DE
000153B8                            
000153B8                            loc_14A66:
000153B8 944B                       		sub.w	a3,d2
000153BA 6100 0000                  		bsr.w	FindFloor2
000153BE D44B                       		add.w	a3,d2
000153C0 0441 0010                  		subi.w	#$10,d1
000153C4 4E75                       		rts	
000153C6                            ; End of function FindFloor
000153C6                            
000153C6                            
000153C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153C6                            
000153C6                            
000153C6                            FindFloor2:				; XREF: FindFloor
000153C6 6100 FEE6                  		bsr.w	Floor_ChkTile
000153CA 3011                       		move.w	(a1),d0
000153CC 3800                       		move.w	d0,d4
000153CE 0240 07FF                  		andi.w	#$7FF,d0
000153D2 6700                       		beq.s	loc_14A86
000153D4 0B04                       		btst	d5,d4
000153D6 6600                       		bne.s	loc_14A94
000153D8                            
000153D8                            loc_14A86:
000153D8 323C 000F                  		move.w	#$F,d1
000153DC 3002                       		move.w	d2,d0
000153DE 0240 000F                  		andi.w	#$F,d0
000153E2 9240                       		sub.w	d0,d1
000153E4 4E75                       		rts	
000153E6                            ; ===========================================================================
000153E6                            
000153E6                            loc_14A94:
000153E6 2478 F796                  		movea.l	($FFFFF796).w,a2
000153EA 1032 0000                  		move.b	(a2,d0.w),d0
000153EE 0240 00FF                  		andi.w	#$FF,d0
000153F2 67E4                       		beq.s	loc_14A86
000153F4 45F9 0000 0000             		lea	(AngleMap).l,a2
000153FA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000153FE E948                       		lsl.w	#4,d0
00015400 3203                       		move.w	d3,d1
00015402 0804 000B                  		btst	#$B,d4
00015406 6700                       		beq.s	loc_14ABA
00015408 4641                       		not.w	d1
0001540A 4414                       		neg.b	(a4)
0001540C                            
0001540C                            loc_14ABA:
0001540C 0804 000C                  		btst	#$C,d4
00015410 6700                       		beq.s	loc_14ACA
00015412 0614 0040                  		addi.b	#$40,(a4)
00015416 4414                       		neg.b	(a4)
00015418 0414 0040                  		subi.b	#$40,(a4)
0001541C                            
0001541C                            loc_14ACA:
0001541C 0241 000F                  		andi.w	#$F,d1
00015420 D240                       		add.w	d0,d1
00015422 45F9 0000 0000             		lea	(CollArray1).l,a2
00015428 1032 1000                  		move.b	(a2,d1.w),d0
0001542C 4880                       		ext.w	d0
0001542E BD44                       		eor.w	d6,d4
00015430 0804 000C                  		btst	#$C,d4
00015434 6700                       		beq.s	loc_14AE6
00015436 4440                       		neg.w	d0
00015438                            
00015438                            loc_14AE6:
00015438 4A40                       		tst.w	d0
0001543A 679C                       		beq.s	loc_14A86
0001543C 6B00                       		bmi.s	loc_14AFC
0001543E 3202                       		move.w	d2,d1
00015440 0241 000F                  		andi.w	#$F,d1
00015444 D041                       		add.w	d1,d0
00015446 323C 000F                  		move.w	#$F,d1
0001544A 9240                       		sub.w	d0,d1
0001544C 4E75                       		rts	
0001544E                            ; ===========================================================================
0001544E                            
0001544E                            loc_14AFC:
0001544E 3202                       		move.w	d2,d1
00015450 0241 000F                  		andi.w	#$F,d1
00015454 D041                       		add.w	d1,d0
00015456 6A00 FF80                  		bpl.w	loc_14A86
0001545A 4641                       		not.w	d1
0001545C 4E75                       		rts	
0001545E                            ; End of function FindFloor2
0001545E                            
0001545E                            
0001545E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001545E                            
0001545E                            
0001545E                            FindWall:				; XREF: Sonic_WalkVertR; et al
0001545E 6100 FE4E                  		bsr.w	Floor_ChkTile
00015462 3011                       		move.w	(a1),d0
00015464 3800                       		move.w	d0,d4
00015466 0240 07FF                  		andi.w	#$7FF,d0
0001546A 6700                       		beq.s	loc_14B1E
0001546C 0B04                       		btst	d5,d4
0001546E 6600                       		bne.s	loc_14B2C
00015470                            
00015470                            loc_14B1E:
00015470 D64B                       		add.w	a3,d3
00015472 6100 0000                  		bsr.w	FindWall2
00015476 964B                       		sub.w	a3,d3
00015478 0641 0010                  		addi.w	#$10,d1
0001547C 4E75                       		rts	
0001547E                            ; ===========================================================================
0001547E                            
0001547E                            loc_14B2C:
0001547E 2478 F796                  		movea.l	($FFFFF796).w,a2
00015482 1032 0000                  		move.b	(a2,d0.w),d0
00015486 0240 00FF                  		andi.w	#$FF,d0
0001548A 67E4                       		beq.s	loc_14B1E
0001548C 45F9 0000 0000             		lea	(AngleMap).l,a2
00015492 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015496 E948                       		lsl.w	#4,d0
00015498 3202                       		move.w	d2,d1
0001549A 0804 000C                  		btst	#$C,d4
0001549E 6700                       		beq.s	loc_14B5A
000154A0 4641                       		not.w	d1
000154A2 0614 0040                  		addi.b	#$40,(a4)
000154A6 4414                       		neg.b	(a4)
000154A8 0414 0040                  		subi.b	#$40,(a4)
000154AC                            
000154AC                            loc_14B5A:
000154AC 0804 000B                  		btst	#$B,d4
000154B0 6700                       		beq.s	loc_14B62
000154B2 4414                       		neg.b	(a4)
000154B4                            
000154B4                            loc_14B62:
000154B4 0241 000F                  		andi.w	#$F,d1
000154B8 D240                       		add.w	d0,d1
000154BA 45F9 0000 0000             		lea	(CollArray2).l,a2
000154C0 1032 1000                  		move.b	(a2,d1.w),d0
000154C4 4880                       		ext.w	d0
000154C6 BD44                       		eor.w	d6,d4
000154C8 0804 000B                  		btst	#$B,d4
000154CC 6700                       		beq.s	loc_14B7E
000154CE 4440                       		neg.w	d0
000154D0                            
000154D0                            loc_14B7E:
000154D0 4A40                       		tst.w	d0
000154D2 679C                       		beq.s	loc_14B1E
000154D4 6B00                       		bmi.s	loc_14B9A
000154D6 0C00 0010                  		cmpi.b	#$10,d0
000154DA 6700                       		beq.s	loc_14BA6
000154DC 3203                       		move.w	d3,d1
000154DE 0241 000F                  		andi.w	#$F,d1
000154E2 D041                       		add.w	d1,d0
000154E4 323C 000F                  		move.w	#$F,d1
000154E8 9240                       		sub.w	d0,d1
000154EA 4E75                       		rts	
000154EC                            ; ===========================================================================
000154EC                            
000154EC                            loc_14B9A:
000154EC 3203                       		move.w	d3,d1
000154EE 0241 000F                  		andi.w	#$F,d1
000154F2 D041                       		add.w	d1,d0
000154F4 6A00 FF7A                  		bpl.w	loc_14B1E
000154F8                            
000154F8                            loc_14BA6:
000154F8 964B                       		sub.w	a3,d3
000154FA 6100 0000                  		bsr.w	FindWall2
000154FE D64B                       		add.w	a3,d3
00015500 0441 0010                  		subi.w	#$10,d1
00015504 4E75                       		rts	
00015506                            ; End of function FindWall
00015506                            
00015506                            
00015506                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015506                            
00015506                            
00015506                            FindWall2:				; XREF: FindWall
00015506 6100 FDA6                  		bsr.w	Floor_ChkTile
0001550A 3011                       		move.w	(a1),d0
0001550C 3800                       		move.w	d0,d4
0001550E 0240 07FF                  		andi.w	#$7FF,d0
00015512 6700                       		beq.s	loc_14BC6
00015514 0B04                       		btst	d5,d4
00015516 6600                       		bne.s	loc_14BD4
00015518                            
00015518                            loc_14BC6:
00015518 323C 000F                  		move.w	#$F,d1
0001551C 3003                       		move.w	d3,d0
0001551E 0240 000F                  		andi.w	#$F,d0
00015522 9240                       		sub.w	d0,d1
00015524 4E75                       		rts	
00015526                            ; ===========================================================================
00015526                            
00015526                            loc_14BD4:
00015526 2478 F796                  		movea.l	($FFFFF796).w,a2
0001552A 1032 0000                  		move.b	(a2,d0.w),d0
0001552E 0240 00FF                  		andi.w	#$FF,d0
00015532 67E4                       		beq.s	loc_14BC6
00015534 45F9 0000 0000             		lea	(AngleMap).l,a2
0001553A 18B2 0000                  		move.b	(a2,d0.w),(a4)
0001553E E948                       		lsl.w	#4,d0
00015540 3202                       		move.w	d2,d1
00015542 0804 000C                  		btst	#$C,d4
00015546 6700                       		beq.s	loc_14C02
00015548 4641                       		not.w	d1
0001554A 0614 0040                  		addi.b	#$40,(a4)
0001554E 4414                       		neg.b	(a4)
00015550 0414 0040                  		subi.b	#$40,(a4)
00015554                            
00015554                            loc_14C02:
00015554 0804 000B                  		btst	#$B,d4
00015558 6700                       		beq.s	loc_14C0A
0001555A 4414                       		neg.b	(a4)
0001555C                            
0001555C                            loc_14C0A:
0001555C 0241 000F                  		andi.w	#$F,d1
00015560 D240                       		add.w	d0,d1
00015562 45F9 0000 0000             		lea	(CollArray2).l,a2
00015568 1032 1000                  		move.b	(a2,d1.w),d0
0001556C 4880                       		ext.w	d0
0001556E BD44                       		eor.w	d6,d4
00015570 0804 000B                  		btst	#$B,d4
00015574 6700                       		beq.s	loc_14C26
00015576 4440                       		neg.w	d0
00015578                            
00015578                            loc_14C26:
00015578 4A40                       		tst.w	d0
0001557A 679C                       		beq.s	loc_14BC6
0001557C 6B00                       		bmi.s	loc_14C3C
0001557E 3203                       		move.w	d3,d1
00015580 0241 000F                  		andi.w	#$F,d1
00015584 D041                       		add.w	d1,d0
00015586 323C 000F                  		move.w	#$F,d1
0001558A 9240                       		sub.w	d0,d1
0001558C 4E75                       		rts	
0001558E                            ; ===========================================================================
0001558E                            
0001558E                            loc_14C3C:
0001558E 3203                       		move.w	d3,d1
00015590 0241 000F                  		andi.w	#$F,d1
00015594 D041                       		add.w	d1,d0
00015596 6A00 FF80                  		bpl.w	loc_14BC6
0001559A 4641                       		not.w	d1
0001559C 4E75                       		rts	
0001559E                            ; End of function FindWall2
0001559E                            
0001559E                            ; ---------------------------------------------------------------------------
0001559E                            ; Unused floor/wall subroutine - logs something	to do with collision
0001559E                            ; ---------------------------------------------------------------------------
0001559E                            
0001559E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001559E                            
0001559E                            
0001559E                            FloorLog_Unk:				; XREF: Level
0001559E 4E75                       		rts	
000155A0                            
000155A0 43F9 0000 0000             		lea	(CollArray1).l,a1
000155A6 45F9 0000 0000             		lea	(CollArray1).l,a2
000155AC 363C 00FF                  		move.w	#$FF,d3
000155B0                            
000155B0                            loc_14C5E:
000155B0 7A10                       		moveq	#$10,d5
000155B2 343C 000F                  		move.w	#$F,d2
000155B6                            
000155B6                            loc_14C64:
000155B6 7800                       		moveq	#0,d4
000155B8 323C 000F                  		move.w	#$F,d1
000155BC                            
000155BC                            loc_14C6A:
000155BC 3019                       		move.w	(a1)+,d0
000155BE EAA8                       		lsr.l	d5,d0
000155C0 D944                       		addx.w	d4,d4
000155C2 51C9 FFF8                  		dbf	d1,loc_14C6A
000155C6                            
000155C6 34C4                       		move.w	d4,(a2)+
000155C8 92FC 0020                  		suba.w	#$20,a1
000155CC 5345                       		subq.w	#1,d5
000155CE 51CA FFE6                  		dbf	d2,loc_14C64
000155D2                            
000155D2 D2FC 0020                  		adda.w	#$20,a1
000155D6 51CB FFD8                  		dbf	d3,loc_14C5E
000155DA                            
000155DA 43F9 0000 0000             		lea	(CollArray1).l,a1
000155E0 45F9 0000 0000             		lea	(CollArray2).l,a2
000155E6 6100                       		bsr.s	FloorLog_Unk2
000155E8 43F9 0000 0000             		lea	(CollArray1).l,a1
000155EE 45F9 0000 0000             		lea	(CollArray1).l,a2
000155F4                            
000155F4                            ; End of function FloorLog_Unk
000155F4                            
000155F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000155F4                            
000155F4                            
000155F4                            FloorLog_Unk2:				; XREF: FloorLog_Unk
000155F4 363C 0FFF                  		move.w	#$FFF,d3
000155F8                            
000155F8                            loc_14CA6:
000155F8 7400                       		moveq	#0,d2
000155FA 323C 000F                  		move.w	#$F,d1
000155FE 3019                       		move.w	(a1)+,d0
00015600 6700                       		beq.s	loc_14CD4
00015602 6B00                       		bmi.s	loc_14CBE
00015604                            
00015604                            loc_14CB2:
00015604 E248                       		lsr.w	#1,d0
00015606 6400                       		bcc.s	loc_14CB8
00015608 5202                       		addq.b	#1,d2
0001560A                            
0001560A                            loc_14CB8:
0001560A 51C9 FFF8                  		dbf	d1,loc_14CB2
0001560E                            
0001560E 6000                       		bra.s	loc_14CD6
00015610                            ; ===========================================================================
00015610                            
00015610                            loc_14CBE:
00015610 0C40 FFFF                  		cmpi.w	#-1,d0
00015614 6700                       		beq.s	loc_14CD0
00015616                            
00015616                            loc_14CC4:
00015616 E348                       		lsl.w	#1,d0
00015618 6400                       		bcc.s	loc_14CCA
0001561A 5302                       		subq.b	#1,d2
0001561C                            
0001561C                            loc_14CCA:
0001561C 51C9 FFF8                  		dbf	d1,loc_14CC4
00015620                            
00015620 6000                       		bra.s	loc_14CD6
00015622                            ; ===========================================================================
00015622                            
00015622                            loc_14CD0:
00015622 303C 0010                  		move.w	#$10,d0
00015626                            
00015626                            loc_14CD4:
00015626 3400                       		move.w	d0,d2
00015628                            
00015628                            loc_14CD6:
00015628 14C2                       		move.b	d2,(a2)+
0001562A 51CB FFCC                  		dbf	d3,loc_14CA6
0001562E                            
0001562E 4E75                       		rts	
00015630                            
00015630                            ; End of function FloorLog_Unk2
00015630                            
00015630                            
00015630                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015630                            
00015630                            
00015630                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015630 2628 0008                  		move.l	8(a0),d3
00015634 2428 000C                  		move.l	$C(a0),d2
00015638 3228 0010                  		move.w	$10(a0),d1
0001563C 48C1                       		ext.l	d1
0001563E E181                       		asl.l	#8,d1
00015640 D681                       		add.l	d1,d3
00015642 3228 0012                  		move.w	$12(a0),d1
00015646 48C1                       		ext.l	d1
00015648 E181                       		asl.l	#8,d1
0001564A D481                       		add.l	d1,d2
0001564C 4842                       		swap	d2
0001564E 4843                       		swap	d3
00015650 11C0 F768                  		move.b	d0,($FFFFF768).w
00015654 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015658 1200                       		move.b	d0,d1
0001565A 0600 0020                  		addi.b	#$20,d0
0001565E 6A00                       		bpl.s	loc_14D1A
00015660 1001                       		move.b	d1,d0
00015662 6A00                       		bpl.s	loc_14D14
00015664 5300                       		subq.b	#1,d0
00015666                            
00015666                            loc_14D14:
00015666 0600 0020                  		addi.b	#$20,d0
0001566A 6000                       		bra.s	loc_14D24
0001566C                            ; ===========================================================================
0001566C                            
0001566C                            loc_14D1A:
0001566C 1001                       		move.b	d1,d0
0001566E 6A00                       		bpl.s	loc_14D20
00015670 5200                       		addq.b	#1,d0
00015672                            
00015672                            loc_14D20:
00015672 0600 001F                  		addi.b	#$1F,d0
00015676                            
00015676                            loc_14D24:
00015676 0200 00C0                  		andi.b	#$C0,d0
0001567A 6700 0000                  		beq.w	loc_14DF0
0001567E 0C00 0080                  		cmpi.b	#$80,d0
00015682 6700 0000                  		beq.w	loc_14F7C
00015686 0201 0038                  		andi.b	#$38,d1
0001568A 6600                       		bne.s	loc_14D3C
0001568C 5042                       		addq.w	#8,d2
0001568E                            
0001568E                            loc_14D3C:
0001568E 0C00 0040                  		cmpi.b	#$40,d0
00015692 6700 0000                  		beq.w	loc_1504A
00015696 6000 0000                  		bra.w	loc_14EBC
0001569A                            
0001569A                            ; End of function Sonic_WalkSpeed
0001569A                            
0001569A                            
0001569A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001569A                            
0001569A                            
0001569A                            sub_14D48:				; XREF: Sonic_Jump
0001569A 11C0 F768                  		move.b	d0,($FFFFF768).w
0001569E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
000156A2 0600 0020                  		addi.b	#$20,d0
000156A6 0200 00C0                  		andi.b	#$C0,d0
000156AA 0C00 0040                  		cmpi.b	#$40,d0
000156AE 6700 0000                  		beq.w	loc_14FD6
000156B2 0C00 0080                  		cmpi.b	#$80,d0
000156B6 6700 0000                  		beq.w	Sonic_DontRunOnWalls
000156BA 0C00 00C0                  		cmpi.b	#$C0,d0
000156BE 6700 0000                  		beq.w	sub_14E50
000156C2                            
000156C2                            ; End of function sub_14D48
000156C2                            
000156C2                            ; ---------------------------------------------------------------------------
000156C2                            ; Subroutine to	make Sonic land	on the floor after jumping
000156C2                            ; ---------------------------------------------------------------------------
000156C2                            
000156C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000156C2                            
000156C2                            
000156C2                            Sonic_HitFloor:				; XREF: Sonic_Floor
000156C2 3428 000C                  		move.w	$C(a0),d2
000156C6 3628 0008                  		move.w	8(a0),d3
000156CA 7000                       		moveq	#0,d0
000156CC 1028 0016                  		move.b	$16(a0),d0
000156D0 4880                       		ext.w	d0
000156D2 D440                       		add.w	d0,d2
000156D4 1028 0017                  		move.b	$17(a0),d0
000156D8 4880                       		ext.w	d0
000156DA D640                       		add.w	d0,d3
000156DC 49F8 F768                  		lea	($FFFFF768).w,a4
000156E0 367C 0010                  		movea.w	#$10,a3
000156E4 3C3C 0000                  		move.w	#0,d6
000156E8 7A0D                       		moveq	#$D,d5
000156EA 6100 FC34                  		bsr.w	FindFloor
000156EE 3F01                       		move.w	d1,-(sp)
000156F0 3428 000C                  		move.w	$C(a0),d2
000156F4 3628 0008                  		move.w	8(a0),d3
000156F8 7000                       		moveq	#0,d0
000156FA 1028 0016                  		move.b	$16(a0),d0
000156FE 4880                       		ext.w	d0
00015700 D440                       		add.w	d0,d2
00015702 1028 0017                  		move.b	$17(a0),d0
00015706 4880                       		ext.w	d0
00015708 9640                       		sub.w	d0,d3
0001570A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001570E 367C 0010                  		movea.w	#$10,a3
00015712 3C3C 0000                  		move.w	#0,d6
00015716 7A0D                       		moveq	#$D,d5
00015718 6100 FC06                  		bsr.w	FindFloor
0001571C 301F                       		move.w	(sp)+,d0
0001571E 143C 0000                  		move.b	#0,d2
00015722                            
00015722                            loc_14DD0:
00015722 1638 F76A                  		move.b	($FFFFF76A).w,d3
00015726 B240                       		cmp.w	d0,d1
00015728 6F00                       		ble.s	loc_14DDE
0001572A 1638 F768                  		move.b	($FFFFF768).w,d3
0001572E C141                       		exg	d0,d1
00015730                            
00015730                            loc_14DDE:
00015730 0803 0000                  		btst	#0,d3
00015734 6700                       		beq.s	locret_14DE6
00015736 1602                       		move.b	d2,d3
00015738                            
00015738                            locret_14DE6:
00015738 4E75                       		rts	
0001573A                            
0001573A                            ; End of function Sonic_HitFloor
0001573A                            
0001573A                            ; ===========================================================================
0001573A 3428 000C                  		move.w	$C(a0),d2
0001573E 3628 0008                  		move.w	8(a0),d3
00015742                            
00015742                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00015742 0642 000A                  		addi.w	#$A,d2
00015746 49F8 F768                  		lea	($FFFFF768).w,a4
0001574A 367C 0010                  		movea.w	#$10,a3
0001574E 3C3C 0000                  		move.w	#0,d6
00015752 7A0E                       		moveq	#$E,d5
00015754 6100 FBCA                  		bsr.w	FindFloor
00015758 143C 0000                  		move.b	#0,d2
0001575C                            
0001575C                            loc_14E0A:				; XREF: sub_14EB4
0001575C 1638 F768                  		move.b	($FFFFF768).w,d3
00015760 0803 0000                  		btst	#0,d3
00015764 6700                       		beq.s	locret_14E16
00015766 1602                       		move.b	d2,d3
00015768                            
00015768                            locret_14E16:
00015768 4E75                       		rts	
0001576A                            
0001576A                            ; ---------------------------------------------------------------------------
0001576A                            ; Subroutine allowing objects to interact with the floor
0001576A                            ; ---------------------------------------------------------------------------
0001576A                            
0001576A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001576A                            
0001576A                            
0001576A                            ObjHitFloor:
0001576A 3628 0008                  		move.w	8(a0),d3
0001576E                            
0001576E                            ; End of function ObjHitFloor
0001576E                            
0001576E                            
0001576E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001576E                            
0001576E                            
0001576E                            ObjHitFloor2:
0001576E 3428 000C                  		move.w	$C(a0),d2
00015772 7000                       		moveq	#0,d0
00015774 1028 0016                  		move.b	$16(a0),d0
00015778 4880                       		ext.w	d0
0001577A D440                       		add.w	d0,d2
0001577C 49F8 F768                  		lea	($FFFFF768).w,a4
00015780 18BC 0000                  		move.b	#0,(a4)
00015784 367C 0010                  		movea.w	#$10,a3
00015788 3C3C 0000                  		move.w	#0,d6
0001578C 7A0D                       		moveq	#$D,d5
0001578E 6100 FB90                  		bsr.w	FindFloor
00015792 1638 F768                  		move.b	($FFFFF768).w,d3
00015796 0803 0000                  		btst	#0,d3
0001579A 6700                       		beq.s	locret_14E4E
0001579C 163C 0000                  		move.b	#0,d3
000157A0                            
000157A0                            locret_14E4E:
000157A0 4E75                       		rts	
000157A2                            ; End of function ObjHitFloor2
000157A2                            
000157A2                            
000157A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000157A2                            
000157A2                            
000157A2                            sub_14E50:				; XREF: sub_14D48
000157A2 3428 000C                  		move.w	$C(a0),d2
000157A6 3628 0008                  		move.w	8(a0),d3
000157AA 7000                       		moveq	#0,d0
000157AC 1028 0017                  		move.b	$17(a0),d0
000157B0 4880                       		ext.w	d0
000157B2 9440                       		sub.w	d0,d2
000157B4 1028 0016                  		move.b	$16(a0),d0
000157B8 4880                       		ext.w	d0
000157BA D640                       		add.w	d0,d3
000157BC 49F8 F768                  		lea	($FFFFF768).w,a4
000157C0 367C 0010                  		movea.w	#$10,a3
000157C4 3C3C 0000                  		move.w	#0,d6
000157C8 7A0E                       		moveq	#$E,d5
000157CA 6100 FC92                  		bsr.w	FindWall
000157CE 3F01                       		move.w	d1,-(sp)
000157D0 3428 000C                  		move.w	$C(a0),d2
000157D4 3628 0008                  		move.w	8(a0),d3
000157D8 7000                       		moveq	#0,d0
000157DA 1028 0017                  		move.b	$17(a0),d0
000157DE 4880                       		ext.w	d0
000157E0 D440                       		add.w	d0,d2
000157E2 1028 0016                  		move.b	$16(a0),d0
000157E6 4880                       		ext.w	d0
000157E8 D640                       		add.w	d0,d3
000157EA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000157EE 367C 0010                  		movea.w	#$10,a3
000157F2 3C3C 0000                  		move.w	#0,d6
000157F6 7A0E                       		moveq	#$E,d5
000157F8 6100 FC64                  		bsr.w	FindWall
000157FC 301F                       		move.w	(sp)+,d0
000157FE 143C 00C0                  		move.b	#-$40,d2
00015802 6000 FF1E                  		bra.w	loc_14DD0
00015806                            
00015806                            ; End of function sub_14E50
00015806                            
00015806                            
00015806                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015806                            
00015806                            
00015806                            sub_14EB4:				; XREF: Sonic_Floor
00015806 3428 000C                  		move.w	$C(a0),d2
0001580A 3628 0008                  		move.w	8(a0),d3
0001580E                            
0001580E                            loc_14EBC:
0001580E 0643 000A                  		addi.w	#$A,d3
00015812 49F8 F768                  		lea	($FFFFF768).w,a4
00015816 367C 0010                  		movea.w	#$10,a3
0001581A 3C3C 0000                  		move.w	#0,d6
0001581E 7A0E                       		moveq	#$E,d5
00015820 6100 FC3C                  		bsr.w	FindWall
00015824 143C 00C0                  		move.b	#-$40,d2
00015828 6000 FF32                  		bra.w	loc_14E0A
0001582C                            
0001582C                            ; End of function sub_14EB4
0001582C                            
0001582C                            ; ---------------------------------------------------------------------------
0001582C                            ; Subroutine to	detect when an object hits a wall to its right
0001582C                            ; ---------------------------------------------------------------------------
0001582C                            
0001582C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001582C                            
0001582C                            
0001582C                            ObjHitWallRight:
0001582C D668 0008                  		add.w	8(a0),d3
00015830 3428 000C                  		move.w	$C(a0),d2
00015834 49F8 F768                  		lea	($FFFFF768).w,a4
00015838 18BC 0000                  		move.b	#0,(a4)
0001583C 367C 0010                  		movea.w	#$10,a3
00015840 3C3C 0000                  		move.w	#0,d6
00015844 7A0E                       		moveq	#$E,d5
00015846 6100 FC16                  		bsr.w	FindWall
0001584A 1638 F768                  		move.b	($FFFFF768).w,d3
0001584E 0803 0000                  		btst	#0,d3
00015852 6700                       		beq.s	locret_14F06
00015854 163C 00C0                  		move.b	#-$40,d3
00015858                            
00015858                            locret_14F06:
00015858 4E75                       		rts	
0001585A                            
0001585A                            ; End of function ObjHitWallRight
0001585A                            
0001585A                            ; ---------------------------------------------------------------------------
0001585A                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
0001585A                            ; touches them
0001585A                            ; ---------------------------------------------------------------------------
0001585A                            
0001585A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001585A                            
0001585A                            
0001585A                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
0001585A 3428 000C                  		move.w	$C(a0),d2
0001585E 3628 0008                  		move.w	8(a0),d3
00015862 7000                       		moveq	#0,d0
00015864 1028 0016                  		move.b	$16(a0),d0
00015868 4880                       		ext.w	d0
0001586A 9440                       		sub.w	d0,d2
0001586C 0A42 000F                  		eori.w	#$F,d2
00015870 1028 0017                  		move.b	$17(a0),d0
00015874 4880                       		ext.w	d0
00015876 D640                       		add.w	d0,d3
00015878 49F8 F768                  		lea	($FFFFF768).w,a4
0001587C 367C FFF0                  		movea.w	#-$10,a3
00015880 3C3C 1000                  		move.w	#$1000,d6
00015884 7A0E                       		moveq	#$E,d5
00015886 6100 FA98                  		bsr.w	FindFloor
0001588A 3F01                       		move.w	d1,-(sp)
0001588C 3428 000C                  		move.w	$C(a0),d2
00015890 3628 0008                  		move.w	8(a0),d3
00015894 7000                       		moveq	#0,d0
00015896 1028 0016                  		move.b	$16(a0),d0
0001589A 4880                       		ext.w	d0
0001589C 9440                       		sub.w	d0,d2
0001589E 0A42 000F                  		eori.w	#$F,d2
000158A2 1028 0017                  		move.b	$17(a0),d0
000158A6 4880                       		ext.w	d0
000158A8 9640                       		sub.w	d0,d3
000158AA 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158AE 367C FFF0                  		movea.w	#-$10,a3
000158B2 3C3C 1000                  		move.w	#$1000,d6
000158B6 7A0E                       		moveq	#$E,d5
000158B8 6100 FA66                  		bsr.w	FindFloor
000158BC 301F                       		move.w	(sp)+,d0
000158BE 143C 0080                  		move.b	#-$80,d2
000158C2 6000 FE5E                  		bra.w	loc_14DD0
000158C6                            ; End of function Sonic_DontRunOnWalls
000158C6                            
000158C6                            ; ===========================================================================
000158C6 3428 000C                  		move.w	$C(a0),d2
000158CA 3628 0008                  		move.w	8(a0),d3
000158CE                            
000158CE                            loc_14F7C:
000158CE 0442 000A                  		subi.w	#$A,d2
000158D2 0A42 000F                  		eori.w	#$F,d2
000158D6 49F8 F768                  		lea	($FFFFF768).w,a4
000158DA 367C FFF0                  		movea.w	#-$10,a3
000158DE 3C3C 1000                  		move.w	#$1000,d6
000158E2 7A0E                       		moveq	#$E,d5
000158E4 6100 FA3A                  		bsr.w	FindFloor
000158E8 143C 0080                  		move.b	#-$80,d2
000158EC 6000 FE6E                  		bra.w	loc_14E0A
000158F0                            
000158F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000158F0                            
000158F0                            
000158F0                            ObjHitCeiling:
000158F0 3428 000C                  		move.w	$C(a0),d2
000158F4 3628 0008                  		move.w	8(a0),d3
000158F8 7000                       		moveq	#0,d0
000158FA 1028 0016                  		move.b	$16(a0),d0
000158FE 4880                       		ext.w	d0
00015900 9440                       		sub.w	d0,d2
00015902 0A42 000F                  		eori.w	#$F,d2
00015906 49F8 F768                  		lea	($FFFFF768).w,a4
0001590A 367C FFF0                  		movea.w	#-$10,a3
0001590E 3C3C 1000                  		move.w	#$1000,d6
00015912 7A0E                       		moveq	#$E,d5
00015914 6100 FA0A                  		bsr.w	FindFloor
00015918 1638 F768                  		move.b	($FFFFF768).w,d3
0001591C 0803 0000                  		btst	#0,d3
00015920 6700                       		beq.s	locret_14FD4
00015922 163C 0080                  		move.b	#-$80,d3
00015926                            
00015926                            locret_14FD4:
00015926 4E75                       		rts	
00015928                            ; End of function ObjHitCeiling
00015928                            
00015928                            ; ===========================================================================
00015928                            
00015928                            loc_14FD6:				; XREF: sub_14D48
00015928 3428 000C                  		move.w	$C(a0),d2
0001592C 3628 0008                  		move.w	8(a0),d3
00015930 7000                       		moveq	#0,d0
00015932 1028 0017                  		move.b	$17(a0),d0
00015936 4880                       		ext.w	d0
00015938 9440                       		sub.w	d0,d2
0001593A 1028 0016                  		move.b	$16(a0),d0
0001593E 4880                       		ext.w	d0
00015940 9640                       		sub.w	d0,d3
00015942 0A43 000F                  		eori.w	#$F,d3
00015946 49F8 F768                  		lea	($FFFFF768).w,a4
0001594A 367C FFF0                  		movea.w	#-$10,a3
0001594E 3C3C 0800                  		move.w	#$800,d6
00015952 7A0E                       		moveq	#$E,d5
00015954 6100 FB08                  		bsr.w	FindWall
00015958 3F01                       		move.w	d1,-(sp)
0001595A 3428 000C                  		move.w	$C(a0),d2
0001595E 3628 0008                  		move.w	8(a0),d3
00015962 7000                       		moveq	#0,d0
00015964 1028 0017                  		move.b	$17(a0),d0
00015968 4880                       		ext.w	d0
0001596A D440                       		add.w	d0,d2
0001596C 1028 0016                  		move.b	$16(a0),d0
00015970 4880                       		ext.w	d0
00015972 9640                       		sub.w	d0,d3
00015974 0A43 000F                  		eori.w	#$F,d3
00015978 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001597C 367C FFF0                  		movea.w	#-$10,a3
00015980 3C3C 0800                  		move.w	#$800,d6
00015984 7A0E                       		moveq	#$E,d5
00015986 6100 FAD6                  		bsr.w	FindWall
0001598A 301F                       		move.w	(sp)+,d0
0001598C 143C 0040                  		move.b	#$40,d2
00015990 6000 FD90                  		bra.w	loc_14DD0
00015994                            
00015994                            ; ---------------------------------------------------------------------------
00015994                            ; Subroutine to	stop Sonic when	he jumps at a wall
00015994                            ; ---------------------------------------------------------------------------
00015994                            
00015994                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015994                            
00015994                            
00015994                            Sonic_HitWall:				; XREF: Sonic_Floor
00015994 3428 000C                  		move.w	$C(a0),d2
00015998 3628 0008                  		move.w	8(a0),d3
0001599C                            
0001599C                            loc_1504A:
0001599C 0443 000A                  		subi.w	#$A,d3
000159A0 0A43 000F                  		eori.w	#$F,d3
000159A4 49F8 F768                  		lea	($FFFFF768).w,a4
000159A8 367C FFF0                  		movea.w	#-$10,a3
000159AC 3C3C 0800                  		move.w	#$800,d6
000159B0 7A0E                       		moveq	#$E,d5
000159B2 6100 FAAA                  		bsr.w	FindWall
000159B6 143C 0040                  		move.b	#$40,d2
000159BA 6000 FDA0                  		bra.w	loc_14E0A
000159BE                            ; End of function Sonic_HitWall
000159BE                            
000159BE                            ; ---------------------------------------------------------------------------
000159BE                            ; Subroutine to	detect when an object hits a wall to its left
000159BE                            ; ---------------------------------------------------------------------------
000159BE                            
000159BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159BE                            
000159BE                            
000159BE                            ObjHitWallLeft:
000159BE D668 0008                  		add.w	8(a0),d3
000159C2 3428 000C                  		move.w	$C(a0),d2
000159C6 49F8 F768                  		lea	($FFFFF768).w,a4
000159CA 18BC 0000                  		move.b	#0,(a4)
000159CE 367C FFF0                  		movea.w	#-$10,a3
000159D2 3C3C 0800                  		move.w	#$800,d6
000159D6 7A0E                       		moveq	#$E,d5
000159D8 6100 FA84                  		bsr.w	FindWall
000159DC 1638 F768                  		move.b	($FFFFF768).w,d3
000159E0 0803 0000                  		btst	#0,d3
000159E4 6700                       		beq.s	locret_15098
000159E6 163C 0040                  		move.b	#$40,d3
000159EA                            
000159EA                            locret_15098:
000159EA 4E75                       		rts	
000159EC                            ; End of function ObjHitWallLeft
000159EC                            
000159EC                            ; ===========================================================================
000159EC                            ; ---------------------------------------------------------------------------
000159EC                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000159EC                            ; ---------------------------------------------------------------------------
000159EC                            
000159EC                            Obj66:					; XREF: Obj_Index
000159EC 7000                       		moveq	#0,d0
000159EE 1028 0024                  		move.b	$24(a0),d0
000159F2 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000159F6 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000159FA                            ; ===========================================================================
000159FA 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000159FC 0000                       		dc.w Obj66_Action-Obj66_Index
000159FE 0000                       		dc.w Obj66_Display-Obj66_Index
00015A00 0000                       		dc.w Obj66_Release-Obj66_Index
00015A02                            ; ===========================================================================
00015A02                            
00015A02                            Obj66_Main:				; XREF: Obj66_Index
00015A02 5428 0024                  		addq.b	#2,$24(a0)
00015A06 323C 0001                  		move.w	#1,d1
00015A0A 2248                       		movea.l	a0,a1
00015A0C 6000                       		bra.s	Obj66_MakeItem
00015A0E                            ; ===========================================================================
00015A0E                            
00015A0E                            Obj66_Loop:
00015A0E 6100 88D6                  		bsr.w	SingleObjLoad
00015A12 6600                       		bne.s	loc_150FE
00015A14 12BC 0066                  		move.b	#$66,0(a1)
00015A18 5829 0024                  		addq.b	#4,$24(a1)
00015A1C 3368 0008 0008             		move.w	8(a0),8(a1)
00015A22 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015A28 137C 0003 0018             		move.b	#3,$18(a1)
00015A2E 137C 0010 001A             		move.b	#$10,$1A(a1)
00015A34                            
00015A34                            Obj66_MakeItem:				; XREF: Obj66_Main
00015A34 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00015A3C 337C 4348 0002             		move.w	#$4348,2(a1)
00015A42 0029 0004 0001             		ori.b	#4,1(a1)
00015A48 137C 0038 0019             		move.b	#$38,$19(a1)
00015A4E                            
00015A4E                            loc_150FE:
00015A4E 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015A52                            
00015A52 117C 0030 0019             		move.b	#$30,$19(a0)
00015A58 117C 0004 0018             		move.b	#4,$18(a0)
00015A5E 317C 003C 0030             		move.w	#$3C,$30(a0)
00015A64 117C 0001 0034             		move.b	#1,$34(a0)
00015A6A 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015A70                            
00015A70                            Obj66_Action:				; XREF: Obj66_Index
00015A70 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015A74 4A28 0001                  		tst.b	1(a0)
00015A78 6A00 0000                  		bpl.w	Obj66_Display
00015A7C 323C 0030                  		move.w	#$30,d1
00015A80 3401                       		move.w	d1,d2
00015A82 3602                       		move.w	d2,d3
00015A84 5243                       		addq.w	#1,d3
00015A86 3828 0008                  		move.w	8(a0),d4
00015A8A 6100 A7A4                  		bsr.w	SolidObject
00015A8E 0828 0005 0022             		btst	#5,$22(a0)
00015A94 6700 0000                  		beq.w	Obj66_Display
00015A98 43F8 D000                  		lea	($FFFFD000).w,a1
00015A9C 720E                       		moveq	#$E,d1
00015A9E 3029 0008                  		move.w	8(a1),d0
00015AA2 B068 0008                  		cmp.w	8(a0),d0
00015AA6 6500                       		bcs.s	Obj66_GrabSonic
00015AA8 7207                       		moveq	#7,d1
00015AAA                            
00015AAA                            Obj66_GrabSonic:
00015AAA B228 001A                  		cmp.b	$1A(a0),d1
00015AAE 6600                       		bne.s	Obj66_Display
00015AB0 1141 0032                  		move.b	d1,$32(a0)
00015AB4 5828 0024                  		addq.b	#4,$24(a0)
00015AB8 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00015ABE 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
00015AC4 337C 0800 0014             		move.w	#$800,$14(a1)
00015ACA 337C 0000 0010             		move.w	#0,$10(a1)
00015AD0 337C 0000 0012             		move.w	#0,$12(a1)
00015AD6 08A8 0005 0022             		bclr	#5,$22(a0)
00015ADC 08A9 0005 0022             		bclr	#5,$22(a1)
00015AE2 08E9 0001 0022             		bset	#1,$22(a1)
00015AE8 3429 0008                  		move.w	8(a1),d2
00015AEC 3629 000C                  		move.w	$C(a1),d3
00015AF0 6100 0000                  		bsr.w	Obj66_ChgPos
00015AF4 D569 0008                  		add.w	d2,8(a1)
00015AF8 D769 000C                  		add.w	d3,$C(a1)
00015AFC E0E9 0008                  		asr	8(a1)
00015B00 E0E9 000C                  		asr	$C(a1)
00015B04                            
00015B04                            Obj66_Display:				; XREF: Obj66_Index
00015B04 6000 A402                  		bra.w	MarkObjGone
00015B08                            ; ===========================================================================
00015B08                            
00015B08                            Obj66_Release:				; XREF: Obj66_Index
00015B08 1028 001A                  		move.b	$1A(a0),d0
00015B0C 0C00 0004                  		cmpi.b	#4,d0
00015B10 6700                       		beq.s	loc_151C8
00015B12 0C00 0007                  		cmpi.b	#7,d0
00015B16 6600                       		bne.s	loc_151F8
00015B18                            
00015B18                            loc_151C8:
00015B18 B028 0032                  		cmp.b	$32(a0),d0
00015B1C 6700                       		beq.s	loc_151F8
00015B1E 43F8 D000                  		lea	($FFFFD000).w,a1
00015B22 337C 0000 0010             		move.w	#0,$10(a1)
00015B28 337C 0800 0012             		move.w	#$800,$12(a1)
00015B2E 0C00 0004                  		cmpi.b	#4,d0
00015B32 6700                       		beq.s	loc_151F0
00015B34 337C 0800 0010             		move.w	#$800,$10(a1)
00015B3A 337C 0800 0012             		move.w	#$800,$12(a1)
00015B40                            
00015B40                            loc_151F0:
00015B40 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015B44 5928 0024                  		subq.b	#4,$24(a0)
00015B48                            
00015B48                            loc_151F8:
00015B48 6100                       		bsr.s	Obj66_ChkSwitch
00015B4A 6100                       		bsr.s	Obj66_ChgPos
00015B4C 6000 A3BA                  		bra.w	MarkObjGone
00015B50                            
00015B50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B50                            
00015B50                            
00015B50                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015B50 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015B54 7000                       		moveq	#0,d0
00015B56 1028 0038                  		move.b	$38(a0),d0
00015B5A 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015B60 6700                       		beq.s	loc_15224	; if not, branch
00015B62 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015B66 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015B68 4428 0034                  		neg.b	$34(a0)
00015B6C 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015B72 6000                       		bra.s	Obj66_Animate
00015B74                            ; ===========================================================================
00015B74                            
00015B74                            loc_15224:
00015B74 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015B78                            
00015B78                            Obj66_Animate:
00015B78 5328 001E                  		subq.b	#1,$1E(a0)
00015B7C 6A00                       		bpl.s	locret_15246
00015B7E 117C 0007 001E             		move.b	#7,$1E(a0)
00015B84 1228 0034                  		move.b	$34(a0),d1
00015B88 1028 001A                  		move.b	$1A(a0),d0
00015B8C D001                       		add.b	d1,d0
00015B8E 0200 000F                  		andi.b	#$F,d0
00015B92 1140 001A                  		move.b	d0,$1A(a0)
00015B96                            
00015B96                            locret_15246:
00015B96 4E75                       		rts	
00015B98                            ; End of function Obj66_ChkSwitch
00015B98                            
00015B98                            
00015B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B98                            
00015B98                            
00015B98                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015B98 43F8 D000                  		lea	($FFFFD000).w,a1
00015B9C 7000                       		moveq	#0,d0
00015B9E 1028 001A                  		move.b	$1A(a0),d0
00015BA2 D040                       		add.w	d0,d0
00015BA4 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015BA8 101A                       		move.b	(a2)+,d0
00015BAA 4880                       		ext.w	d0
00015BAC D068 0008                  		add.w	8(a0),d0
00015BB0 3340 0008                  		move.w	d0,8(a1)
00015BB4 101A                       		move.b	(a2)+,d0
00015BB6 4880                       		ext.w	d0
00015BB8 D068 000C                  		add.w	$C(a0),d0
00015BBC 3340 000C                  		move.w	d0,$C(a1)
00015BC0 4E75                       		rts	
00015BC2                            ; End of function Obj66_ChgPos
00015BC2                            
00015BC2                            ; ===========================================================================
00015BC2 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
00015BC6 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
00015BCA 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
00015BCE 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
00015BD2 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
00015BD6 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
00015BDA 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
00015BDE E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
00015BE2                            ; ---------------------------------------------------------------------------
00015BE2                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015BE2                            ; ---------------------------------------------------------------------------
00015BE2                            Map_obj66:
00015BE2                            	include "_maps\obj66.asm"
00015BE2                            ; ---------------------------------------------------------------------------
00015BE2                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
00015BE2                            ; ---------------------------------------------------------------------------
00015BE2 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
00015BE6 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
00015BEA 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
00015BEE 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015BF2 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015BF6 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015BFA 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
00015BFE 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015C02 0000                       		dc.w byte_154A4-Map_obj66
00015C04 06                         byte_152B4:	dc.b 6
00015C05 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015C0A 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
00015C0F E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015C14 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015C19 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00015C1E 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015C23 06                         byte_152D3:	dc.b 6
00015C24 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015C29 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00015C2E F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015C33 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015C38 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00015C3D 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015C42 06                         byte_152F2:	dc.b 6
00015C43 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015C48 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00015C4D 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015C52 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015C57 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00015C5C 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015C61 06                         byte_15311:	dc.b 6
00015C62 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015C67 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00015C6C 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015C71 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015C76 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015C7B 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015C80 06                         byte_15330:	dc.b 6
00015C81 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015C86 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015C8B 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015C90 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015C95 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00015C9A 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00015C9F 06                         byte_1534F:	dc.b 6
00015CA0 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015CA5 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00015CAA 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00015CAF 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015CB4 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015CB9 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
00015CBE 06                         byte_1536E:	dc.b 6
00015CBF 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
00015CC4 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
00015CC9 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
00015CCE 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
00015CD3 180A 1000 00               		dc.b $18, $A, $10, 0, 0
00015CD8 180A 1800 18               		dc.b $18, $A, $18, 0, $18
00015CDD 06                         byte_1538D:	dc.b 6
00015CDE 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
00015CE3 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
00015CE8 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
00015CED F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015CF2 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015CF7 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
00015CFC 06                         byte_153AC:	dc.b 6
00015CFD E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015D02 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015D07 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
00015D0C E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
00015D11 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015D16 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015D1B 06                         byte_153CB:	dc.b 6
00015D1C D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015D21 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015D26 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015D2B DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015D30 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015D35 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015D3A 06                         byte_153EA:	dc.b 6
00015D3B D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015D40 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015D45 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015D4A D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00015D4F E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015D54 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015D59 06                         byte_15409:	dc.b 6
00015D5A D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00015D5F D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015D64 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015D69 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00015D6E E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015D73 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015D78 06                         byte_15428:	dc.b 6
00015D79 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00015D7E D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015D83 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015D88 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00015D8D E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015D92 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015D97 06                         byte_15447:	dc.b 6
00015D98 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00015D9D D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015DA2 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015DA7 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00015DAC E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015DB1 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015DB6 06                         byte_15466:	dc.b 6
00015DB7 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
00015DBC D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
00015DC1 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
00015DC6 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
00015DCB E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
00015DD0 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
00015DD5 06                         byte_15485:	dc.b 6
00015DD6 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
00015DDB D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
00015DE0 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
00015DE5 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
00015DEA F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
00015DEF F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015DF4 0C                         byte_154A4:	dc.b $C
00015DF5 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015DFA D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
00015DFF E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015E04 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015E09 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
00015E0E E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015E13 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015E18 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00015E1D 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015E22 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015E27 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00015E2C 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015E32 00                         		even
00015E32 00                         		even
00015E32                            
00015E32                            ; ===========================================================================
00015E32                            ; ---------------------------------------------------------------------------
00015E32                            ; Object 67 - disc that	you run	around (SBZ)
00015E32                            ; ---------------------------------------------------------------------------
00015E32                            
00015E32                            Obj67:					; XREF: Obj_Index
00015E32 7000                       		moveq	#0,d0
00015E34 1028 0024                  		move.b	$24(a0),d0
00015E38 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00015E3C 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015E40                            ; ===========================================================================
00015E40 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015E42 0000                       		dc.w Obj67_Action-Obj67_Index
00015E44                            ; ===========================================================================
00015E44                            
00015E44                            Obj67_Main:				; XREF: Obj67_Index
00015E44 5428 0024                  		addq.b	#2,$24(a0)
00015E48 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015E50 317C C344 0002             		move.w	#$C344,2(a0)
00015E56 117C 0004 0001             		move.b	#4,1(a0)
00015E5C 117C 0004 0018             		move.b	#4,$18(a0)
00015E62 117C 0008 0019             		move.b	#8,$19(a0)
00015E68 3168 0008 0032             		move.w	8(a0),$32(a0)
00015E6E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015E74 117C 0018 0034             		move.b	#$18,$34(a0)
00015E7A 117C 0048 0038             		move.b	#$48,$38(a0)
00015E80 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E84 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015E88 6700                       		beq.s	loc_15546
00015E8A 117C 0010 0034             		move.b	#$10,$34(a0)
00015E90 117C 0038 0038             		move.b	#$38,$38(a0)
00015E96                            
00015E96                            loc_15546:
00015E96 1228 0028                  		move.b	$28(a0),d1	; get object type
00015E9A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015E9E 4881                       		ext.w	d1
00015EA0 E741                       		asl.w	#3,d1
00015EA2 3141 0036                  		move.w	d1,$36(a0)
00015EA6 1028 0022                  		move.b	$22(a0),d0
00015EAA E418                       		ror.b	#2,d0
00015EAC 0200 00C0                  		andi.b	#-$40,d0
00015EB0 1140 0026                  		move.b	d0,$26(a0)
00015EB4                            
00015EB4                            Obj67_Action:				; XREF: Obj67_Index
00015EB4 6100 0000                  		bsr.w	Obj67_MoveSonic
00015EB8 6100 0000                  		bsr.w	Obj67_MoveSpot
00015EBC 6000 0000                  		bra.w	Obj67_ChkDel
00015EC0                            ; ===========================================================================
00015EC0                            
00015EC0                            Obj67_MoveSonic:			; XREF: Obj67_Action
00015EC0 7400                       		moveq	#0,d2
00015EC2 1428 0038                  		move.b	$38(a0),d2
00015EC6 3602                       		move.w	d2,d3
00015EC8 D643                       		add.w	d3,d3
00015ECA 43F8 D000                  		lea	($FFFFD000).w,a1
00015ECE 3029 0008                  		move.w	8(a1),d0
00015ED2 9068 0032                  		sub.w	$32(a0),d0
00015ED6 D042                       		add.w	d2,d0
00015ED8 B043                       		cmp.w	d3,d0
00015EDA 6400                       		bcc.s	loc_155A8
00015EDC 3229 000C                  		move.w	$C(a1),d1
00015EE0 9268 0030                  		sub.w	$30(a0),d1
00015EE4 D242                       		add.w	d2,d1
00015EE6 B243                       		cmp.w	d3,d1
00015EE8 6400                       		bcc.s	loc_155A8
00015EEA 0829 0001 0022             		btst	#1,$22(a1)
00015EF0 6700                       		beq.s	loc_155B8
00015EF2 4228 003A                  		clr.b	$3A(a0)
00015EF6 4E75                       		rts	
00015EF8                            ; ===========================================================================
00015EF8                            
00015EF8                            loc_155A8:
00015EF8 4A28 003A                  		tst.b	$3A(a0)
00015EFC 6700                       		beq.s	locret_155B6
00015EFE 4229 0038                  		clr.b	$38(a1)
00015F02 4228 003A                  		clr.b	$3A(a0)
00015F06                            
00015F06                            locret_155B6:
00015F06 4E75                       		rts	
00015F08                            ; ===========================================================================
00015F08                            
00015F08                            loc_155B8:
00015F08 4A28 003A                  		tst.b	$3A(a0)
00015F0C 6600                       		bne.s	loc_155E2
00015F0E 117C 0001 003A             		move.b	#1,$3A(a0)
00015F14 0829 0002 0022             		btst	#2,$22(a1)
00015F1A 6600                       		bne.s	loc_155D0
00015F1C 4229 001C                  		clr.b	$1C(a1)
00015F20                            
00015F20                            loc_155D0:
00015F20 08A9 0005 0022             		bclr	#5,$22(a1)
00015F26 137C 0001 001D             		move.b	#1,$1D(a1)
00015F2C 137C 0001 0038             		move.b	#1,$38(a1)
00015F32                            
00015F32                            loc_155E2:
00015F32 3029 0014                  		move.w	$14(a1),d0
00015F36 4A68 0036                  		tst.w	$36(a0)
00015F3A 6A00                       		bpl.s	loc_15608
00015F3C 0C40 FC00                  		cmpi.w	#-$400,d0
00015F40 6F00                       		ble.s	loc_155FA
00015F42 337C FC00 0014             		move.w	#-$400,$14(a1)
00015F48 4E75                       		rts	
00015F4A                            ; ===========================================================================
00015F4A                            
00015F4A                            loc_155FA:
00015F4A 0C40 F100                  		cmpi.w	#-$F00,d0
00015F4E 6C00                       		bge.s	locret_15606
00015F50 337C F100 0014             		move.w	#-$F00,$14(a1)
00015F56                            
00015F56                            locret_15606:
00015F56 4E75                       		rts	
00015F58                            ; ===========================================================================
00015F58                            
00015F58                            loc_15608:
00015F58 0C40 0400                  		cmpi.w	#$400,d0
00015F5C 6C00                       		bge.s	loc_15616
00015F5E 337C 0400 0014             		move.w	#$400,$14(a1)
00015F64 4E75                       		rts	
00015F66                            ; ===========================================================================
00015F66                            
00015F66                            loc_15616:
00015F66 0C40 0F00                  		cmpi.w	#$F00,d0
00015F6A 6F00                       		ble.s	locret_15622
00015F6C 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015F72                            
00015F72                            locret_15622:
00015F72 4E75                       		rts	
00015F74                            ; ===========================================================================
00015F74                            
00015F74                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015F74 3028 0036                  		move.w	$36(a0),d0
00015F78 D168 0026                  		add.w	d0,$26(a0)
00015F7C 1028 0026                  		move.b	$26(a0),d0
00015F80 4EB9 0000 2CFE             		jsr	(CalcSine).l
00015F86 3428 0030                  		move.w	$30(a0),d2
00015F8A 3628 0032                  		move.w	$32(a0),d3
00015F8E 7800                       		moveq	#0,d4
00015F90 1828 0034                  		move.b	$34(a0),d4
00015F94 E14C                       		lsl.w	#8,d4
00015F96 2A04                       		move.l	d4,d5
00015F98 C9C0                       		muls.w	d0,d4
00015F9A 4844                       		swap	d4
00015F9C CBC1                       		muls.w	d1,d5
00015F9E 4845                       		swap	d5
00015FA0 D842                       		add.w	d2,d4
00015FA2 DA43                       		add.w	d3,d5
00015FA4 3144 000C                  		move.w	d4,$C(a0)
00015FA8 3145 0008                  		move.w	d5,8(a0)
00015FAC 4E75                       		rts	
00015FAE                            ; ===========================================================================
00015FAE                            
00015FAE                            Obj67_ChkDel:				; XREF: Obj67_Action
00015FAE 3028 0032                  		move.w	$32(a0),d0
00015FB2 0240 FF80                  		andi.w	#-$80,d0
00015FB6 3238 F700                  		move.w	($FFFFF700).w,d1
00015FBA 0441 0080                  		subi.w	#$80,d1
00015FBE 0241 FF80                  		andi.w	#-$80,d1
00015FC2 9041                       		sub.w	d1,d0
00015FC4 0C40 0280                  		cmpi.w	#$280,d0
00015FC8 6200                       		bhi.s	Obj67_Delete
00015FCA 4EF9 0000 DE60             		jmp	DisplaySprite
00015FD0                            ; ===========================================================================
00015FD0                            
00015FD0                            Obj67_Delete:
00015FD0 4EF9 0000 DE9C             		jmp	DeleteObject
00015FD6                            ; ===========================================================================
00015FD6                            ; ---------------------------------------------------------------------------
00015FD6                            ; Sprite mappings - disc that you run around (SBZ)
00015FD6                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015FD6                            ; part of the level tiles.)
00015FD6                            ; ---------------------------------------------------------------------------
00015FD6                            Map_obj67:
00015FD6                            	include "_maps\obj67.asm"
00015FD6                            ; ---------------------------------------------------------------------------
00015FD6                            ; Sprite mappings - disc that you run around (SBZ)
00015FD6                            ; (It's just a small blob that moves around in a circle. The disc itself is
00015FD6                            ; part of the level tiles.)
00015FD6                            ; ---------------------------------------------------------------------------
00015FD6 0000                       		dc.w byte_15688-Map_obj67
00015FD8 01                         byte_15688:	dc.b 1
00015FD9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00015FDE                            		even
00015FDE                            		even
00015FDE                            
00015FDE                            ; ===========================================================================
00015FDE                            ; ---------------------------------------------------------------------------
00015FDE                            ; Object 68 - conveyor belts (SBZ)
00015FDE                            ; ---------------------------------------------------------------------------
00015FDE                            
00015FDE                            Obj68:					; XREF: Obj_Index
00015FDE 7000                       		moveq	#0,d0
00015FE0 1028 0024                  		move.b	$24(a0),d0
00015FE4 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
00015FE8 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
00015FEC                            ; ===========================================================================
00015FEC 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
00015FEE 0000                       		dc.w Obj68_Action-Obj68_Index
00015FF0                            ; ===========================================================================
00015FF0                            
00015FF0                            Obj68_Main:				; XREF: Obj68_Index
00015FF0 5428 0024                  		addq.b	#2,$24(a0)
00015FF4 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015FFA 1228 0028                  		move.b	$28(a0),d1	; get object type
00015FFE 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016002 6700                       		beq.s	loc_156BA	; if zero, branch
00016004 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
0001600A                            
0001600A                            loc_156BA:
0001600A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001600E 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016012 4881                       		ext.w	d1
00016014 E841                       		asr.w	#4,d1
00016016 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
0001601A                            
0001601A                            Obj68_Action:				; XREF: Obj68_Index
0001601A 6100                       		bsr.s	Obj68_MoveSonic
0001601C 3028 0008                  		move.w	8(a0),d0
00016020 0240 FF80                  		andi.w	#$FF80,d0
00016024 3238 F700                  		move.w	($FFFFF700).w,d1
00016028 0441 0080                  		subi.w	#$80,d1
0001602C 0241 FF80                  		andi.w	#$FF80,d1
00016030 9041                       		sub.w	d1,d0
00016032 0C40 0280                  		cmpi.w	#$280,d0
00016036 6200                       		bhi.s	Obj68_Delete
00016038 4E75                       		rts	
0001603A                            ; ===========================================================================
0001603A                            
0001603A                            Obj68_Delete:
0001603A 4EF9 0000 DE9C             		jmp	DeleteObject
00016040                            ; ===========================================================================
00016040                            
00016040                            Obj68_MoveSonic:			; XREF: Obj68_Action
00016040 7400                       		moveq	#0,d2
00016042 1428 0038                  		move.b	$38(a0),d2
00016046 3602                       		move.w	d2,d3
00016048 D643                       		add.w	d3,d3
0001604A 43F8 D000                  		lea	($FFFFD000).w,a1
0001604E 3029 0008                  		move.w	8(a1),d0
00016052 9068 0008                  		sub.w	8(a0),d0
00016056 D042                       		add.w	d2,d0
00016058 B043                       		cmp.w	d3,d0
0001605A 6400                       		bcc.s	locret_1572E
0001605C 3229 000C                  		move.w	$C(a1),d1
00016060 9268 000C                  		sub.w	$C(a0),d1
00016064 0641 0030                  		addi.w	#$30,d1
00016068 0C41 0030                  		cmpi.w	#$30,d1
0001606C 6400                       		bcc.s	locret_1572E
0001606E 0829 0001 0022             		btst	#1,$22(a1)
00016074 6600                       		bne.s	locret_1572E
00016076 3028 0036                  		move.w	$36(a0),d0
0001607A D169 0008                  		add.w	d0,8(a1)
0001607E                            
0001607E                            locret_1572E:
0001607E 4E75                       		rts	
00016080                            
00016080                            ; ===========================================================================
00016080                            ; ---------------------------------------------------------------------------
00016080                            ; Object 69 - spinning platforms and trapdoors (SBZ)
00016080                            ; ---------------------------------------------------------------------------
00016080                            
00016080                            Obj69:					; XREF: Obj_Index
00016080 7000                       		moveq	#0,d0
00016082 1028 0024                  		move.b	$24(a0),d0
00016086 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
0001608A 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001608E                            ; ===========================================================================
0001608E 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
00016090 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00016092 0000                       		dc.w Obj69_Spinner-Obj69_Index
00016094                            ; ===========================================================================
00016094                            
00016094                            Obj69_Main:				; XREF: Obj69_Index
00016094 5428 0024                  		addq.b	#2,$24(a0)
00016098 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000160A0 317C 4492 0002             		move.w	#$4492,2(a0)
000160A6 0028 0004 0001             		ori.b	#4,1(a0)
000160AC 117C 0080 0019             		move.b	#$80,$19(a0)
000160B2 7000                       		moveq	#0,d0
000160B4 1028 0028                  		move.b	$28(a0),d0
000160B8 0240 000F                  		andi.w	#$F,d0
000160BC C0FC 003C                  		mulu.w	#$3C,d0
000160C0 3140 0032                  		move.w	d0,$32(a0)
000160C4 4A28 0028                  		tst.b	$28(a0)
000160C8 6A00                       		bpl.s	Obj69_Trapdoor
000160CA 5428 0024                  		addq.b	#2,$24(a0)
000160CE 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000160D6 317C 04DF 0002             		move.w	#$4DF,2(a0)
000160DC 117C 0010 0019             		move.b	#$10,$19(a0)
000160E2 117C 0002 001C             		move.b	#2,$1C(a0)
000160E8 7000                       		moveq	#0,d0
000160EA 1028 0028                  		move.b	$28(a0),d0	; get object type
000160EE 3200                       		move.w	d0,d1
000160F0 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000160F4 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000160F8 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000160FC 3140 0032                  		move.w	d0,$32(a0)
00016100 0241 0070                  		andi.w	#$70,d1
00016104 0641 0010                  		addi.w	#$10,d1
00016108 E549                       		lsl.w	#2,d1
0001610A 5341                       		subq.w	#1,d1
0001610C 3141 0036                  		move.w	d1,$36(a0)
00016110 6000                       		bra.s	Obj69_Spinner
00016112                            ; ===========================================================================
00016112                            
00016112                            Obj69_Trapdoor:				; XREF: Obj69_Index
00016112 5368 0030                  		subq.w	#1,$30(a0)
00016116 6A00                       		bpl.s	Obj69_Animate
00016118 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001611E 0868 0000 001C             		bchg	#0,$1C(a0)
00016124 4A28 0001                  		tst.b	1(a0)
00016128 6A00                       		bpl.s	Obj69_Animate
0001612A 303C 00BB                  		move.w	#$BB,d0
0001612E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play door sound
00016134                            
00016134                            Obj69_Animate:
00016134 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001613A 4EB9 0000 AEDA             		jsr	AnimateSprite
00016140 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016144 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016146 323C 004B                  		move.w	#$4B,d1
0001614A 343C 000C                  		move.w	#$C,d2
0001614E 3602                       		move.w	d2,d3
00016150 5243                       		addq.w	#1,d3
00016152 3828 0008                  		move.w	8(a0),d4
00016156 6100 A0D8                  		bsr.w	SolidObject
0001615A 6000 9DAC                  		bra.w	MarkObjGone
0001615E                            ; ===========================================================================
0001615E                            
0001615E                            Obj69_NotSolid:
0001615E 0828 0003 0022             		btst	#3,$22(a0)
00016164 6700                       		beq.s	Obj69_Display
00016166 43F8 D000                  		lea	($FFFFD000).w,a1
0001616A 08A9 0003 0022             		bclr	#3,$22(a1)
00016170 08A8 0003 0022             		bclr	#3,$22(a0)
00016176 4228 0025                  		clr.b	$25(a0)
0001617A                            
0001617A                            Obj69_Display:
0001617A 6000 9D8C                  		bra.w	MarkObjGone
0001617E                            ; ===========================================================================
0001617E                            
0001617E                            Obj69_Spinner:				; XREF: Obj69_Index
0001617E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016182 C068 0036                  		and.w	$36(a0),d0
00016186 6600                       		bne.s	Obj69_Delay
00016188 117C 0001 0034             		move.b	#1,$34(a0)
0001618E                            
0001618E                            Obj69_Delay:
0001618E 4A28 0034                  		tst.b	$34(a0)
00016192 6700                       		beq.s	Obj69_Animate2
00016194 5368 0030                  		subq.w	#1,$30(a0)
00016198 6A00                       		bpl.s	Obj69_Animate2
0001619A 3168 0032 0030             		move.w	$32(a0),$30(a0)
000161A0 4228 0034                  		clr.b	$34(a0)
000161A4 0868 0000 001C             		bchg	#0,$1C(a0)
000161AA                            
000161AA                            Obj69_Animate2:
000161AA 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000161B0 4EB9 0000 AEDA             		jsr	AnimateSprite
000161B6 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000161BA 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000161BC 323C 001B                  		move.w	#$1B,d1
000161C0 343C 0007                  		move.w	#7,d2
000161C4 3602                       		move.w	d2,d3
000161C6 5243                       		addq.w	#1,d3
000161C8 3828 0008                  		move.w	8(a0),d4
000161CC 6100 A062                  		bsr.w	SolidObject
000161D0 6000 9D36                  		bra.w	MarkObjGone
000161D4                            ; ===========================================================================
000161D4                            
000161D4                            Obj69_NotSolid2:
000161D4 0828 0003 0022             		btst	#3,$22(a0)
000161DA 6700                       		beq.s	Obj69_Display2
000161DC 43F8 D000                  		lea	($FFFFD000).w,a1
000161E0 08A9 0003 0022             		bclr	#3,$22(a1)
000161E6 08A8 0003 0022             		bclr	#3,$22(a0)
000161EC 4228 0025                  		clr.b	$25(a0)
000161F0                            
000161F0                            Obj69_Display2:
000161F0 6000 9D16                  		bra.w	MarkObjGone
000161F4                            ; ===========================================================================
000161F4                            Ani_obj69:
000161F4                            	include "_anim\obj69.asm"
000161F4                            ; ---------------------------------------------------------------------------
000161F4                            ; Animation script - trapdoor (SBZ)
000161F4                            ; ---------------------------------------------------------------------------
000161F4 0000                       		dc.w byte_158AC-Ani_obj69
000161F6 0000                       		dc.w byte_158B2-Ani_obj69
000161F8 0000                       		dc.w byte_158B8-Ani_obj69
000161FA 0000                       		dc.w byte_158CC-Ani_obj69
000161FC 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00016202 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016208 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016215 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001621C 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016229 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016230                            		even
00016230                            		even
00016230                            
00016230                            ; ---------------------------------------------------------------------------
00016230                            ; Sprite mappings - trapdoor (SBZ)
00016230                            ; ---------------------------------------------------------------------------
00016230                            Map_obj69:
00016230                            	include "_maps\obj69.asm"
00016230                            ; ---------------------------------------------------------------------------
00016230                            ; Sprite mappings - trapdoor (SBZ)
00016230                            ; ---------------------------------------------------------------------------
00016230 0000                       		dc.w byte_158E6-Map_obj69
00016232 0000                       		dc.w byte_158FB-Map_obj69
00016234 0000                       		dc.w byte_15924-Map_obj69
00016236 04                         byte_158E6:	dc.b 4
00016237 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001623C F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016241 F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016246 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
0001624B 08                         byte_158FB:	dc.b 8
0001624C F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016251 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016256 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
0001625B 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016260 F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016265 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
0001626A 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001626F 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016274 04                         byte_15924:	dc.b 4
00016275 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
0001627A 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001627F 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016284 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
0001628A 00                         		even
0001628A 00                         		even
0001628A                            
0001628A                            ; ---------------------------------------------------------------------------
0001628A                            ; Sprite mappings - spinning platforms (SBZ)
0001628A                            ; ---------------------------------------------------------------------------
0001628A                            Map_obj69a:
0001628A                            	include "_maps\obj69a.asm"
0001628A                            ; ---------------------------------------------------------------------------
0001628A                            ; Sprite mappings - spinning platforms (SBZ)
0001628A                            ; ---------------------------------------------------------------------------
0001628A 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001628E 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016292 0000                       		dc.w byte_15970-Map_obj69a
00016294 02                         byte_15944:	dc.b 2
00016295 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0001629A F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001629F 02                         byte_1594F:	dc.b 2
000162A0 F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
000162A5 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
000162AA 02                         byte_1595A:	dc.b 2
000162AB F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
000162B0 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
000162B5 02                         byte_15965:	dc.b 2
000162B6 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
000162BB 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
000162C0 02                         byte_15970:	dc.b 2
000162C1 F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000162C6 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000162CC 00                         		even
000162CC 00                         		even
000162CC                            
000162CC                            ; ===========================================================================
000162CC                            ; ---------------------------------------------------------------------------
000162CC                            ; Object 6A - ground saws and pizza cutters (SBZ)
000162CC                            ; ---------------------------------------------------------------------------
000162CC                            
000162CC                            Obj6A:					; XREF: Obj_Index
000162CC 7000                       		moveq	#0,d0
000162CE 1028 0024                  		move.b	$24(a0),d0
000162D2 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000162D6 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000162DA                            ; ===========================================================================
000162DA 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000162DC 0000                       		dc.w Obj6A_Action-Obj6A_Index
000162DE                            ; ===========================================================================
000162DE                            
000162DE                            Obj6A_Main:				; XREF: Obj6A_Index
000162DE 5428 0024                  		addq.b	#2,$24(a0)
000162E2 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000162EA 317C 43B5 0002             		move.w	#$43B5,2(a0)
000162F0 117C 0004 0001             		move.b	#4,1(a0)
000162F6 117C 0004 0018             		move.b	#4,$18(a0)
000162FC 117C 0020 0019             		move.b	#$20,$19(a0)
00016302 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016308 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001630E 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016314 6400                       		bcc.s	Obj6A_Action
00016316 117C 00A2 0020             		move.b	#$A2,$20(a0)
0001631C                            
0001631C                            Obj6A_Action:				; XREF: Obj6A_Index
0001631C 7000                       		moveq	#0,d0
0001631E 1028 0028                  		move.b	$28(a0),d0
00016322 0240 0007                  		andi.w	#7,d0
00016326 D040                       		add.w	d0,d0
00016328 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001632C 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016330 3028 003A                  		move.w	$3A(a0),d0
00016334 0240 FF80                  		andi.w	#$FF80,d0
00016338 3238 F700                  		move.w	($FFFFF700).w,d1
0001633C 0441 0080                  		subi.w	#$80,d1
00016340 0241 FF80                  		andi.w	#$FF80,d1
00016344 9041                       		sub.w	d1,d0
00016346 0C40 0280                  		cmpi.w	#$280,d0
0001634A 6200                       		bhi.s	Obj6A_Delete
0001634C 4EF9 0000 DE60             		jmp	DisplaySprite
00016352                            ; ===========================================================================
00016352                            
00016352                            Obj6A_Delete:
00016352 4EF9 0000 DE9C             		jmp	DeleteObject
00016358                            ; ===========================================================================
00016358 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001635C 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016360 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016362                            ; ===========================================================================
00016362                            
00016362                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016362 4E75                       		rts	
00016364                            ; ===========================================================================
00016364                            
00016364                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016364 323C 0060                  		move.w	#$60,d1
00016368 7000                       		moveq	#0,d0
0001636A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001636E 0828 0000 0022             		btst	#0,$22(a0)
00016374 6700                       		beq.s	Obj6A_Animate01
00016376 4440                       		neg.w	d0
00016378 D041                       		add.w	d1,d0
0001637A                            
0001637A                            Obj6A_Animate01:
0001637A 3228 003A                  		move.w	$3A(a0),d1
0001637E 9240                       		sub.w	d0,d1
00016380 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016384 5328 001E                  		subq.b	#1,$1E(a0)
00016388 6A00                       		bpl.s	loc_15A46
0001638A 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016390 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016396                            
00016396                            loc_15A46:
00016396 4A28 0001                  		tst.b	1(a0)
0001639A 6A00                       		bpl.s	locret_15A60
0001639C 3038 FE04                  		move.w	($FFFFFE04).w,d0
000163A0 0240 000F                  		andi.w	#$F,d0
000163A4 6600                       		bne.s	locret_15A60
000163A6 303C 00B0                  		move.w	#$B0,d0
000163AA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
000163B0                            
000163B0                            locret_15A60:
000163B0 4E75                       		rts	
000163B2                            ; ===========================================================================
000163B2                            
000163B2                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
000163B2 323C 0030                  		move.w	#$30,d1
000163B6 7000                       		moveq	#0,d0
000163B8 1038 FE64                  		move.b	($FFFFFE64).w,d0
000163BC 0828 0000 0022             		btst	#0,$22(a0)
000163C2 6700                       		beq.s	Obj6A_Animate02
000163C4 4440                       		neg.w	d0
000163C6 0640 0080                  		addi.w	#$80,d0
000163CA                            
000163CA                            Obj6A_Animate02:
000163CA 3228 0038                  		move.w	$38(a0),d1
000163CE 9240                       		sub.w	d0,d1
000163D0 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000163D4 5328 001E                  		subq.b	#1,$1E(a0)
000163D8 6A00                       		bpl.s	loc_15A96
000163DA 117C 0002 001E             		move.b	#2,$1E(a0)
000163E0 0868 0000 001A             		bchg	#0,$1A(a0)
000163E6                            
000163E6                            loc_15A96:
000163E6 4A28 0001                  		tst.b	1(a0)
000163EA 6A00                       		bpl.s	locret_15AB0
000163EC 1038 FE64                  		move.b	($FFFFFE64).w,d0
000163F0 0C00 0018                  		cmpi.b	#$18,d0
000163F4 6600                       		bne.s	locret_15AB0
000163F6 303C 00B0                  		move.w	#$B0,d0
000163FA 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
00016400                            
00016400                            locret_15AB0:
00016400 4E75                       		rts	
00016402                            ; ===========================================================================
00016402                            
00016402                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016402 4A28 003D                  		tst.b	$3D(a0)
00016406 6600                       		bne.s	Obj6A_Animate03
00016408 3038 D008                  		move.w	($FFFFD008).w,d0
0001640C 0440 00C0                  		subi.w	#$C0,d0
00016410 6500                       		bcs.s	loc_15B02
00016412 9068 0008                  		sub.w	8(a0),d0
00016416 6500                       		bcs.s	loc_15B02
00016418 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001641C 0440 0080                  		subi.w	#$80,d0
00016420 B068 000C                  		cmp.w	$C(a0),d0
00016424 6400                       		bcc.s	locret_15B04
00016426 0640 0100                  		addi.w	#$100,d0
0001642A B068 000C                  		cmp.w	$C(a0),d0
0001642E 6500                       		bcs.s	locret_15B04
00016430 117C 0001 003D             		move.b	#1,$3D(a0)
00016436 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
0001643C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016442 117C 0002 001A             		move.b	#2,$1A(a0)
00016448 303C 00B0                  		move.w	#$B0,d0
0001644C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
00016452                            
00016452                            loc_15B02:
00016452 588F                       		addq.l	#4,sp
00016454                            
00016454                            locret_15B04:
00016454 4E75                       		rts	
00016456                            ; ===========================================================================
00016456                            
00016456                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016456 4EB9 0000 DE3A             		jsr	SpeedToPos
0001645C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016462 5328 001E                  		subq.b	#1,$1E(a0)
00016466 6A00                       		bpl.s	locret_15B24
00016468 117C 0002 001E             		move.b	#2,$1E(a0)
0001646E 0868 0000 001A             		bchg	#0,$1A(a0)
00016474                            
00016474                            locret_15B24:
00016474 4E75                       		rts	
00016476                            ; ===========================================================================
00016476                            
00016476                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016476 4A28 003D                  		tst.b	$3D(a0)
0001647A 6600                       		bne.s	Obj6A_Animate04
0001647C 3038 D008                  		move.w	($FFFFD008).w,d0
00016480 0640 00E0                  		addi.w	#$E0,d0
00016484 9068 0008                  		sub.w	8(a0),d0
00016488 6400                       		bcc.s	loc_15B74
0001648A 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001648E 0440 0080                  		subi.w	#$80,d0
00016492 B068 000C                  		cmp.w	$C(a0),d0
00016496 6400                       		bcc.s	locret_15B76
00016498 0640 0100                  		addi.w	#$100,d0
0001649C B068 000C                  		cmp.w	$C(a0),d0
000164A0 6500                       		bcs.s	locret_15B76
000164A2 117C 0001 003D             		move.b	#1,$3D(a0)
000164A8 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
000164AE 117C 00A2 0020             		move.b	#$A2,$20(a0)
000164B4 117C 0002 001A             		move.b	#2,$1A(a0)
000164BA 303C 00B0                  		move.w	#$B0,d0
000164BE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play saw sound
000164C4                            
000164C4                            loc_15B74:
000164C4 588F                       		addq.l	#4,sp
000164C6                            
000164C6                            locret_15B76:
000164C6 4E75                       		rts	
000164C8                            ; ===========================================================================
000164C8                            
000164C8                            Obj6A_Animate04:
000164C8 4EB9 0000 DE3A             		jsr	SpeedToPos
000164CE 3168 0008 003A             		move.w	8(a0),$3A(a0)
000164D4 5328 001E                  		subq.b	#1,$1E(a0)
000164D8 6A00                       		bpl.s	locret_15B96
000164DA 117C 0002 001E             		move.b	#2,$1E(a0)
000164E0 0868 0000 001A             		bchg	#0,$1A(a0)
000164E6                            
000164E6                            locret_15B96:
000164E6 4E75                       		rts	
000164E8                            ; ===========================================================================
000164E8                            ; ---------------------------------------------------------------------------
000164E8                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000164E8                            ; ---------------------------------------------------------------------------
000164E8                            Map_obj6A:
000164E8                            	include "_maps\obj6A.asm"
000164E8                            ; ---------------------------------------------------------------------------
000164E8                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
000164E8                            ; ---------------------------------------------------------------------------
000164E8 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
000164EC 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
000164F0 07                         byte_15BA0:	dc.b 7
000164F1 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
000164F6 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
000164FB E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016500 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016505 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
0001650A 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
0001650F 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016514 07                         byte_15BC4:	dc.b 7
00016515 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
0001651A D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
0001651F E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016524 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016529 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
0001652E 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016533 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016538 04                         byte_15BE8:	dc.b 4
00016539 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
0001653E E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016543 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016548 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
0001654D 04                         byte_15BFD:	dc.b 4
0001654E E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016553 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016558 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
0001655D 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016562                            		even
00016562                            		even
00016562                            
00016562                            ; ===========================================================================
00016562                            ; ---------------------------------------------------------------------------
00016562                            ; Object 6B - stomper (SBZ)
00016562                            ; ---------------------------------------------------------------------------
00016562                            
00016562                            Obj6B:					; XREF: Obj_Index
00016562 7000                       		moveq	#0,d0
00016564 1028 0024                  		move.b	$24(a0),d0
00016568 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
0001656C 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016570                            ; ===========================================================================
00016570 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016572 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016574                            
00016574 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016578 1C20 3803                  		dc.b  $1C, $20,	$38,   3
0001657C 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016580 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016584 8040 0005                  		dc.b  $80, $40,	  0,   5
00016588                            ; ===========================================================================
00016588                            
00016588                            Obj6B_Main:				; XREF: Obj6B_Index
00016588 5428 0024                  		addq.b	#2,$24(a0)
0001658C 7000                       		moveq	#0,d0
0001658E 1028 0028                  		move.b	$28(a0),d0
00016592 E448                       		lsr.w	#2,d0
00016594 0240 001C                  		andi.w	#$1C,d0
00016598 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
0001659C 115B 0019                  		move.b	(a3)+,$19(a0)
000165A0 115B 0016                  		move.b	(a3)+,$16(a0)
000165A4 E448                       		lsr.w	#2,d0
000165A6 1140 001A                  		move.b	d0,$1A(a0)
000165AA 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
000165B2 317C 22C0 0002             		move.w	#$22C0,2(a0)
000165B8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
000165BE 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
000165C0 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
000165C6 6700                       		beq.s	Obj6B_SBZ3
000165C8                            
000165C8                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
000165C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165CC 7000                       		moveq	#0,d0
000165CE 1028 0023                  		move.b	$23(a0),d0
000165D2 6700                       		beq.s	Obj6B_Delete
000165D4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000165DA                            
000165DA                            Obj6B_Delete:
000165DA 4EF9 0000 DE9C             		jmp	DeleteObject
000165E0                            ; ===========================================================================
000165E0                            
000165E0                            Obj6B_SBZ3:				; XREF: Obj6B_Main
000165E0 317C 41F0 0002             		move.w	#$41F0,2(a0)
000165E6 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
000165EC 6600                       		bne.s	Obj6B_SBZ12
000165EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000165F2 7000                       		moveq	#0,d0
000165F4 1028 0023                  		move.b	$23(a0),d0
000165F8 6700                       		beq.s	Obj6B_SBZ12
000165FA 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016600 6700                       		beq.s	Obj6B_SBZ12
00016602 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016606 60C0                       		bra.s	Obj6B_ChkGone
00016608                            ; ===========================================================================
00016608                            
00016608                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016608 0028 0004 0001             		ori.b	#4,1(a0)
0001660E 117C 0004 0018             		move.b	#4,$18(a0)
00016614 3168 0008 0034             		move.w	8(a0),$34(a0)
0001661A 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016620 7000                       		moveq	#0,d0
00016622 101B                       		move.b	(a3)+,d0
00016624 3140 003C                  		move.w	d0,$3C(a0)
00016628 7000                       		moveq	#0,d0
0001662A 1028 0028                  		move.b	$28(a0),d0
0001662E 6A00                       		bpl.s	Obj6B_Action
00016630 0200 000F                  		andi.b	#$F,d0
00016634 1140 003E                  		move.b	d0,$3E(a0)
00016638 1153 0028                  		move.b	(a3),$28(a0)
0001663C 0C13 0005                  		cmpi.b	#5,(a3)
00016640 6600                       		bne.s	Obj6B_ChkGone2
00016642 08E8 0004 0001             		bset	#4,1(a0)
00016648                            
00016648                            Obj6B_ChkGone2:
00016648 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001664C 7000                       		moveq	#0,d0
0001664E 1028 0023                  		move.b	$23(a0),d0
00016652 6700                       		beq.s	Obj6B_Action
00016654 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001665A                            
0001665A                            Obj6B_Action:				; XREF: Obj6B_Index
0001665A 3F28 0008                  		move.w	8(a0),-(sp)
0001665E 7000                       		moveq	#0,d0
00016660 1028 0028                  		move.b	$28(a0),d0
00016664 0240 000F                  		andi.w	#$F,d0
00016668 D040                       		add.w	d0,d0
0001666A 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
0001666E 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016672 381F                       		move.w	(sp)+,d4
00016674 4A28 0001                  		tst.b	1(a0)
00016678 6A00                       		bpl.s	Obj6B_ChkDel
0001667A 7200                       		moveq	#0,d1
0001667C 1228 0019                  		move.b	$19(a0),d1
00016680 0641 000B                  		addi.w	#$B,d1
00016684 7400                       		moveq	#0,d2
00016686 1428 0016                  		move.b	$16(a0),d2
0001668A 3602                       		move.w	d2,d3
0001668C 5243                       		addq.w	#1,d3
0001668E 6100 9BA0                  		bsr.w	SolidObject
00016692                            
00016692                            Obj6B_ChkDel:
00016692 3028 0034                  		move.w	$34(a0),d0
00016696 0240 FF80                  		andi.w	#$FF80,d0
0001669A 3238 F700                  		move.w	($FFFFF700).w,d1
0001669E 0441 0080                  		subi.w	#$80,d1
000166A2 0241 FF80                  		andi.w	#$FF80,d1
000166A6 9041                       		sub.w	d1,d0
000166A8 0C40 0280                  		cmpi.w	#$280,d0
000166AC 6200                       		bhi.s	loc_15D64
000166AE 4EF9 0000 DE60             		jmp	DisplaySprite
000166B4                            ; ===========================================================================
000166B4                            
000166B4                            loc_15D64:
000166B4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000166BA 6600                       		bne.s	Obj6B_Delete2
000166BC 4238 F7CB                  		clr.b	($FFFFF7CB).w
000166C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000166C4 7000                       		moveq	#0,d0
000166C6 1028 0023                  		move.b	$23(a0),d0
000166CA 6700                       		beq.s	Obj6B_Delete2
000166CC 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000166D2                            
000166D2                            Obj6B_Delete2:
000166D2 4EF9 0000 DE9C             		jmp	DeleteObject
000166D8                            ; ===========================================================================
000166D8 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
000166DC 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
000166E0 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
000166E4                            ; ===========================================================================
000166E4                            
000166E4                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
000166E4 4E75                       		rts	
000166E6                            ; ===========================================================================
000166E6                            
000166E6                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
000166E6 4A28 0038                  		tst.b	$38(a0)
000166EA 6600                       		bne.s	loc_15DB4
000166EC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000166F0 7000                       		moveq	#0,d0
000166F2 1028 003E                  		move.b	$3E(a0),d0
000166F6 0832 0000 0000             		btst	#0,(a2,d0.w)
000166FC 6700                       		beq.s	loc_15DC2
000166FE 117C 0001 0038             		move.b	#1,$38(a0)
00016704                            
00016704                            loc_15DB4:
00016704 3028 003C                  		move.w	$3C(a0),d0
00016708 B068 003A                  		cmp.w	$3A(a0),d0
0001670C 6700                       		beq.s	loc_15DE0
0001670E 5468 003A                  		addq.w	#2,$3A(a0)
00016712                            
00016712                            loc_15DC2:
00016712 3028 003A                  		move.w	$3A(a0),d0
00016716 0828 0000 0022             		btst	#0,$22(a0)
0001671C 6700                       		beq.s	loc_15DD4
0001671E 4440                       		neg.w	d0
00016720 0640 0080                  		addi.w	#$80,d0
00016724                            
00016724                            loc_15DD4:
00016724 3228 0034                  		move.w	$34(a0),d1
00016728 9240                       		sub.w	d0,d1
0001672A 3141 0008                  		move.w	d1,8(a0)
0001672E 4E75                       		rts	
00016730                            ; ===========================================================================
00016730                            
00016730                            loc_15DE0:
00016730 5228 0028                  		addq.b	#1,$28(a0)
00016734 317C 00B4 0036             		move.w	#$B4,$36(a0)
0001673A 4228 0038                  		clr.b	$38(a0)
0001673E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016742 7000                       		moveq	#0,d0
00016744 1028 0023                  		move.b	$23(a0),d0
00016748 67C8                       		beq.s	loc_15DC2
0001674A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016750 60C0                       		bra.s	loc_15DC2
00016752                            ; ===========================================================================
00016752                            
00016752                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00016752 4A28 0038                  		tst.b	$38(a0)
00016756 6600                       		bne.s	loc_15E14
00016758 5368 0036                  		subq.w	#1,$36(a0)
0001675C 6600                       		bne.s	loc_15E1E
0001675E 117C 0001 0038             		move.b	#1,$38(a0)
00016764                            
00016764                            loc_15E14:
00016764 4A68 003A                  		tst.w	$3A(a0)
00016768 6700                       		beq.s	loc_15E3C
0001676A 5568 003A                  		subq.w	#2,$3A(a0)
0001676E                            
0001676E                            loc_15E1E:
0001676E 3028 003A                  		move.w	$3A(a0),d0
00016772 0828 0000 0022             		btst	#0,$22(a0)
00016778 6700                       		beq.s	loc_15E30
0001677A 4440                       		neg.w	d0
0001677C 0640 0080                  		addi.w	#$80,d0
00016780                            
00016780                            loc_15E30:
00016780 3228 0034                  		move.w	$34(a0),d1
00016784 9240                       		sub.w	d0,d1
00016786 3141 0008                  		move.w	d1,8(a0)
0001678A 4E75                       		rts	
0001678C                            ; ===========================================================================
0001678C                            
0001678C                            loc_15E3C:
0001678C 5328 0028                  		subq.b	#1,$28(a0)
00016790 4228 0038                  		clr.b	$38(a0)
00016794 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016798 7000                       		moveq	#0,d0
0001679A 1028 0023                  		move.b	$23(a0),d0
0001679E 67CE                       		beq.s	loc_15E1E
000167A0 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000167A6 60C6                       		bra.s	loc_15E1E
000167A8                            ; ===========================================================================
000167A8                            
000167A8                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
000167A8 4A28 0038                  		tst.b	$38(a0)
000167AC 6600                       		bne.s	loc_15E7C
000167AE 4A68 003A                  		tst.w	$3A(a0)
000167B2 6700                       		beq.s	loc_15E6A
000167B4 5368 003A                  		subq.w	#1,$3A(a0)
000167B8 6000                       		bra.s	loc_15E8E
000167BA                            ; ===========================================================================
000167BA                            
000167BA                            loc_15E6A:
000167BA 5368 0036                  		subq.w	#1,$36(a0)
000167BE 6A00                       		bpl.s	loc_15E8E
000167C0 317C 003C 0036             		move.w	#$3C,$36(a0)
000167C6 117C 0001 0038             		move.b	#1,$38(a0)
000167CC                            
000167CC                            loc_15E7C:
000167CC 5068 003A                  		addq.w	#8,$3A(a0)
000167D0 3028 003A                  		move.w	$3A(a0),d0
000167D4 B068 003C                  		cmp.w	$3C(a0),d0
000167D8 6600                       		bne.s	loc_15E8E
000167DA 4228 0038                  		clr.b	$38(a0)
000167DE                            
000167DE                            loc_15E8E:
000167DE 3028 003A                  		move.w	$3A(a0),d0
000167E2 0828 0000 0022             		btst	#0,$22(a0)
000167E8 6700                       		beq.s	loc_15EA0
000167EA 4440                       		neg.w	d0
000167EC 0640 0038                  		addi.w	#$38,d0
000167F0                            
000167F0                            loc_15EA0:
000167F0 3228 0030                  		move.w	$30(a0),d1
000167F4 D240                       		add.w	d0,d1
000167F6 3141 000C                  		move.w	d1,$C(a0)
000167FA 4E75                       		rts	
000167FC                            ; ===========================================================================
000167FC                            
000167FC                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000167FC 4A28 0038                  		tst.b	$38(a0)
00016800 6600                       		bne.s	loc_15ED0
00016802 4A68 003A                  		tst.w	$3A(a0)
00016806 6700                       		beq.s	loc_15EBE
00016808 5168 003A                  		subq.w	#8,$3A(a0)
0001680C 6000                       		bra.s	loc_15EF0
0001680E                            ; ===========================================================================
0001680E                            
0001680E                            loc_15EBE:
0001680E 5368 0036                  		subq.w	#1,$36(a0)
00016812 6A00                       		bpl.s	loc_15EF0
00016814 317C 003C 0036             		move.w	#$3C,$36(a0)
0001681A 117C 0001 0038             		move.b	#1,$38(a0)
00016820                            
00016820                            loc_15ED0:
00016820 3028 003A                  		move.w	$3A(a0),d0
00016824 B068 003C                  		cmp.w	$3C(a0),d0
00016828 6700                       		beq.s	loc_15EE0
0001682A 5068 003A                  		addq.w	#8,$3A(a0)
0001682E 6000                       		bra.s	loc_15EF0
00016830                            ; ===========================================================================
00016830                            
00016830                            loc_15EE0:
00016830 5368 0036                  		subq.w	#1,$36(a0)
00016834 6A00                       		bpl.s	loc_15EF0
00016836 317C 003C 0036             		move.w	#$3C,$36(a0)
0001683C 4228 0038                  		clr.b	$38(a0)
00016840                            
00016840                            loc_15EF0:
00016840 3028 003A                  		move.w	$3A(a0),d0
00016844 0828 0000 0022             		btst	#0,$22(a0)
0001684A 6700                       		beq.s	loc_15F02
0001684C 4440                       		neg.w	d0
0001684E 0640 0038                  		addi.w	#$38,d0
00016852                            
00016852                            loc_15F02:
00016852 3228 0030                  		move.w	$30(a0),d1
00016856 D240                       		add.w	d0,d1
00016858 3141 000C                  		move.w	d1,$C(a0)
0001685C 4E75                       		rts	
0001685E                            ; ===========================================================================
0001685E                            
0001685E                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
0001685E 4A28 0038                  		tst.b	$38(a0)
00016862 6600                       		bne.s	loc_15F3E
00016864 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016868 7000                       		moveq	#0,d0
0001686A 1028 003E                  		move.b	$3E(a0),d0
0001686E 0832 0000 0000             		btst	#0,(a2,d0.w)
00016874 6700                       		beq.s	locret_15F5C
00016876 117C 0001 0038             		move.b	#1,$38(a0)
0001687C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016880 7000                       		moveq	#0,d0
00016882 1028 0023                  		move.b	$23(a0),d0
00016886 6700                       		beq.s	loc_15F3E
00016888 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001688E                            
0001688E                            loc_15F3E:
0001688E 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00016896 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
0001689E 3168 0008 0034             		move.w	8(a0),$34(a0)
000168A4 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000168AA 6700                       		beq.s	loc_15F5E
000168AC                            
000168AC                            locret_15F5C:
000168AC 4E75                       		rts	
000168AE                            ; ===========================================================================
000168AE                            
000168AE                            loc_15F5E:
000168AE 4228 0028                  		clr.b	$28(a0)
000168B2 4228 0038                  		clr.b	$38(a0)
000168B6 4E75                       		rts	
000168B8                            ; ===========================================================================
000168B8                            ; ---------------------------------------------------------------------------
000168B8                            ; Sprite mappings - stomper and	platforms (SBZ)
000168B8                            ; ---------------------------------------------------------------------------
000168B8                            Map_obj6B:
000168B8                            	include "_maps\obj6B.asm"
000168B8                            ; ---------------------------------------------------------------------------
000168B8                            ; Sprite mappings - stomper and	platforms (SBZ)
000168B8                            ; ---------------------------------------------------------------------------
000168B8 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000168BC 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000168C0 0000                       		dc.w byte_15FB0-Map_obj6B
000168C2 04                         byte_15F72:	dc.b 4
000168C3 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000168C8 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000168CD F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000168D2 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000168D7 08                         byte_15F87:	dc.b 8
000168D8 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000168DD E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000168E2 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000168E7 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000168EC 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000168F1 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000168F6 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000168FB 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00016900 0E                         byte_15FB0:	dc.b $E
00016901 C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016906 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
0001690B C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00016910 C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016915 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
0001691A C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001691F C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016924 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016929 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
0001692E E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016933 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016938 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
0001693D 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016942 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016948 00                         		even
00016948 00                         		even
00016948                            
00016948                            ; ===========================================================================
00016948                            ; ---------------------------------------------------------------------------
00016948                            ; Object 6C - vanishing	platforms (SBZ)
00016948                            ; ---------------------------------------------------------------------------
00016948                            
00016948                            Obj6C:					; XREF: Obj_Index
00016948 7000                       		moveq	#0,d0
0001694A 1028 0024                  		move.b	$24(a0),d0
0001694E 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016952 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016956                            ; ===========================================================================
00016956 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016958 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001695A 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001695C 0000                       		dc.w loc_16068-Obj6C_Index
0001695E                            ; ===========================================================================
0001695E                            
0001695E                            Obj6C_Main:				; XREF: Obj6C_Index
0001695E 5C28 0024                  		addq.b	#6,$24(a0)
00016962 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
0001696A 317C 44C3 0002             		move.w	#$44C3,2(a0)
00016970 0028 0004 0001             		ori.b	#4,1(a0)
00016976 117C 0010 0019             		move.b	#$10,$19(a0)
0001697C 117C 0004 0018             		move.b	#4,$18(a0)
00016982 7000                       		moveq	#0,d0
00016984 1028 0028                  		move.b	$28(a0),d0	; get object type
00016988 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001698C 5240                       		addq.w	#1,d0		; add 1
0001698E EF48                       		lsl.w	#7,d0		; multiply by $80
00016990 3200                       		move.w	d0,d1
00016992 5340                       		subq.w	#1,d0
00016994 3140 0030                  		move.w	d0,$30(a0)
00016998 3140 0032                  		move.w	d0,$32(a0)
0001699C 7000                       		moveq	#0,d0
0001699E 1028 0028                  		move.b	$28(a0),d0	; get object type
000169A2 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000169A6 0641 0080                  		addi.w	#$80,d1
000169AA C0C1                       		mulu.w	d1,d0
000169AC E088                       		lsr.l	#8,d0
000169AE 3140 0036                  		move.w	d0,$36(a0)
000169B2 5341                       		subq.w	#1,d1
000169B4 3141 0038                  		move.w	d1,$38(a0)
000169B8                            
000169B8                            loc_16068:				; XREF: Obj6C_Index
000169B8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000169BC 9068 0036                  		sub.w	$36(a0),d0
000169C0 C068 0038                  		and.w	$38(a0),d0
000169C4 6600                       		bne.s	Obj6C_Animate
000169C6 5928 0024                  		subq.b	#4,$24(a0)
000169CA 6000                       		bra.s	Obj6C_Vanish
000169CC                            ; ===========================================================================
000169CC                            
000169CC                            Obj6C_Animate:
000169CC 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000169D2 4EB9 0000 AEDA             		jsr	AnimateSprite
000169D8 6000 952E                  		bra.w	MarkObjGone
000169DC                            ; ===========================================================================
000169DC                            
000169DC                            Obj6C_Vanish:				; XREF: Obj6C_Index
000169DC 5368 0030                  		subq.w	#1,$30(a0)
000169E0 6A00                       		bpl.s	loc_160AA
000169E2 317C 007F 0030             		move.w	#127,$30(a0)
000169E8 4A28 001C                  		tst.b	$1C(a0)
000169EC 6700                       		beq.s	loc_160A4
000169EE 3168 0032 0030             		move.w	$32(a0),$30(a0)
000169F4                            
000169F4                            loc_160A4:
000169F4 0868 0000 001C             		bchg	#0,$1C(a0)
000169FA                            
000169FA                            loc_160AA:
000169FA 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00016A00 4EB9 0000 AEDA             		jsr	AnimateSprite
00016A06 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00016A0C 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00016A0E 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016A14 6600                       		bne.s	loc_160D6
00016A16 7200                       		moveq	#0,d1
00016A18 1228 0019                  		move.b	$19(a0),d1
00016A1C 4EB9 0000 7A9A             		jsr	(PlatformObject).l
00016A22 6000 94E4                  		bra.w	MarkObjGone
00016A26                            ; ===========================================================================
00016A26                            
00016A26                            loc_160D6:
00016A26 7200                       		moveq	#0,d1
00016A28 1228 0019                  		move.b	$19(a0),d1
00016A2C 4EB9 0000 7C0E             		jsr	(ExitPlatform).l
00016A32 3428 0008                  		move.w	8(a0),d2
00016A36 4EB9 0000 8178             		jsr	(MvSonicOnPtfm2).l
00016A3C 6000 94CA                  		bra.w	MarkObjGone
00016A40                            ; ===========================================================================
00016A40                            
00016A40                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
00016A40 0828 0003 0022             		btst	#3,$22(a0)
00016A46 6700                       		beq.s	Obj6C_Display
00016A48 43F8 D000                  		lea	($FFFFD000).w,a1
00016A4C 08A9 0003 0022             		bclr	#3,$22(a1)
00016A52 08A8 0003 0022             		bclr	#3,$22(a0)
00016A58 117C 0002 0024             		move.b	#2,$24(a0)
00016A5E 4228 0025                  		clr.b	$25(a0)
00016A62                            
00016A62                            Obj6C_Display:
00016A62 6000 94A4                  		bra.w	MarkObjGone
00016A66                            ; ===========================================================================
00016A66                            Ani_obj6C:
00016A66                            	include "_anim\obj6C.asm"
00016A66                            ; ---------------------------------------------------------------------------
00016A66                            ; Animation script - vanishing platforms (SBZ)
00016A66                            ; ---------------------------------------------------------------------------
00016A66 0000                       		dc.w byte_1611A-Ani_obj6C
00016A68 0000                       		dc.w byte_16122-Ani_obj6C
00016A6A 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016A72 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016A7A                            		even
00016A7A                            		even
00016A7A                            
00016A7A                            ; ---------------------------------------------------------------------------
00016A7A                            ; Sprite mappings - vanishing platforms	(SBZ)
00016A7A                            ; ---------------------------------------------------------------------------
00016A7A                            Map_obj6C:
00016A7A                            	include "_maps\obj6C.asm"
00016A7A                            ; ---------------------------------------------------------------------------
00016A7A                            ; Sprite mappings - vanishing platforms	(SBZ)
00016A7A                            ; ---------------------------------------------------------------------------
00016A7A 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00016A7E 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016A82 01                         byte_16132:	dc.b 1
00016A83 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016A88 01                         byte_16138:	dc.b 1
00016A89 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00016A8E 01                         byte_1613E:	dc.b 1
00016A8F F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016A94 00                         byte_16144:	dc.b 0
00016A96 00                         		even
00016A96 00                         		even
00016A96                            
00016A96                            ; ===========================================================================
00016A96                            ; ---------------------------------------------------------------------------
00016A96                            ; Object 6E - electrocution orbs (SBZ)
00016A96                            ; ---------------------------------------------------------------------------
00016A96                            
00016A96                            Obj6E:					; XREF: Obj_Index
00016A96 7000                       		moveq	#0,d0
00016A98 1028 0024                  		move.b	$24(a0),d0
00016A9C 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
00016AA0 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016AA4                            ; ===========================================================================
00016AA4 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016AA6 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016AA8                            ; ===========================================================================
00016AA8                            
00016AA8                            Obj6E_Main:				; XREF: Obj6E_Index
00016AA8 5428 0024                  		addq.b	#2,$24(a0)
00016AAC 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016AB4 317C 047E 0002             		move.w	#$47E,2(a0)
00016ABA 0028 0004 0001             		ori.b	#4,1(a0)
00016AC0 117C 0028 0019             		move.b	#$28,$19(a0)
00016AC6 7000                       		moveq	#0,d0
00016AC8 1028 0028                  		move.b	$28(a0),d0	; read object type
00016ACC E948                       		lsl.w	#4,d0		; multiply by $10
00016ACE 5340                       		subq.w	#1,d0
00016AD0 3140 0034                  		move.w	d0,$34(a0)
00016AD4                            
00016AD4                            Obj6E_Shock:				; XREF: Obj6E_Index
00016AD4 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016AD8 C068 0034                  		and.w	$34(a0),d0
00016ADC 6600                       		bne.s	Obj6E_Animate
00016ADE 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
00016AE4 4A28 0001                  		tst.b	1(a0)
00016AE8 6A00                       		bpl.s	Obj6E_Animate
00016AEA 303C 00B1                  		move.w	#$B1,d0
00016AEE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play electricity sound
00016AF4                            
00016AF4                            Obj6E_Animate:
00016AF4 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016AFA 4EB9 0000 AEDA             		jsr	AnimateSprite
00016B00 117C 0000 0020             		move.b	#0,$20(a0)
00016B06 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
00016B0C 6600                       		bne.s	Obj6E_Display	; if not, branch
00016B0E 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016B14                            
00016B14                            Obj6E_Display:
00016B14 6000 93F2                  		bra.w	MarkObjGone
00016B18                            ; ===========================================================================
00016B18                            Ani_obj6E:
00016B18                            	include "_anim\obj6E.asm"
00016B18                            ; ---------------------------------------------------------------------------
00016B18                            ; Animation script - electrocution orbs (SBZ)
00016B18                            ; ---------------------------------------------------------------------------
00016B18 0000                       		dc.w byte_161CC-Ani_obj6E
00016B1A 0000                       		dc.w byte_161D0-Ani_obj6E
00016B1C 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
00016B20 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
00016B30                            		even
00016B30                            		even
00016B30                            
00016B30                            ; ---------------------------------------------------------------------------
00016B30                            ; Sprite mappings - electrocution orbs (SBZ)
00016B30                            ; ---------------------------------------------------------------------------
00016B30                            Map_obj6E:
00016B30                            	include "_maps\obj6E.asm"
00016B30                            Map_26ed:
00016B30 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
00016B32 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
00016B34 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00016B36 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00016B38 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00016B3A 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00016B3C 01                         Map_26ed_C: 	dc.b $1
00016B3D 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
00016B42 02                         Map_26ed_12: 	dc.b $2
00016B43 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B48 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B4D 06                         Map_26ed_1D: 	dc.b $6
00016B4E F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B53 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B58 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016B5D F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B62 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B67 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B6C 08                         Map_26ed_3C: 	dc.b $8
00016B6D F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B72 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016B77 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00016B7C F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016B81 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00016B86 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016B8B F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016B90 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016B95 06                         Map_26ed_65: 	dc.b $6
00016B96 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016B9B 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BA0 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
00016BA5 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016BAA F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00016BAF F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016BB4 04                         Map_26ed_84: 	dc.b $4
00016BB5 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00016BBA 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00016BBF F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00016BC4 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
00016BCA 00                         	even
00016BCA 00                         	even
00016BCA                            
00016BCA                            ; ===========================================================================
00016BCA                            ; ---------------------------------------------------------------------------
00016BCA                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016BCA                            ; ---------------------------------------------------------------------------
00016BCA                            
00016BCA                            Obj6F:					; XREF: Obj_Index
00016BCA 7000                       		moveq	#0,d0
00016BCC 1028 0024                  		move.b	$24(a0),d0
00016BD0 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
00016BD4 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
00016BD8 3028 0030                  		move.w	$30(a0),d0
00016BDC 0240 FF80                  		andi.w	#$FF80,d0
00016BE0 3238 F700                  		move.w	($FFFFF700).w,d1
00016BE4 0441 0080                  		subi.w	#$80,d1
00016BE8 0241 FF80                  		andi.w	#$FF80,d1
00016BEC 9041                       		sub.w	d1,d0
00016BEE 0C40 0280                  		cmpi.w	#$280,d0
00016BF2 6200                       		bhi.s	loc_1629A
00016BF4                            
00016BF4                            Obj6F_Display:
00016BF4 4EF9 0000 DE60             		jmp	DisplaySprite
00016BFA                            ; ===========================================================================
00016BFA                            
00016BFA                            loc_1629A:
00016BFA 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
00016C00 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016C02 0C40 FF80                  		cmpi.w	#-$80,d0
00016C06 64EC                       		bcc.s	Obj6F_Display
00016C08                            
00016C08                            Obj6F_Act1or2:
00016C08 1028 002F                  		move.b	$2F(a0),d0
00016C0C 6A00                       		bpl.s	Obj6F_Delete
00016C0E 0240 007F                  		andi.w	#$7F,d0
00016C12 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016C16 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00016C1C                            
00016C1C                            Obj6F_Delete:
00016C1C 4EF9 0000 DE9C             		jmp	DeleteObject
00016C22                            ; ===========================================================================
00016C22 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016C24 0000                       		dc.w loc_163D8-Obj6F_Index
00016C26                            ; ===========================================================================
00016C26                            
00016C26                            Obj6F_Main:				; XREF: Obj6F_Index
00016C26 1028 0028                  		move.b	$28(a0),d0
00016C2A 6B00 0000                  		bmi.w	loc_16380
00016C2E 5428 0024                  		addq.b	#2,$24(a0)
00016C32 217C 0001 628A 0004        		move.l	#Map_obj69a,4(a0)
00016C3A 317C 04DF 0002             		move.w	#$4DF,2(a0)
00016C40 117C 0010 0019             		move.b	#$10,$19(a0)
00016C46 0028 0004 0001             		ori.b	#4,1(a0)
00016C4C 117C 0004 0018             		move.b	#4,$18(a0)
00016C52 7000                       		moveq	#0,d0
00016C54 1028 0028                  		move.b	$28(a0),d0
00016C58 3200                       		move.w	d0,d1
00016C5A E648                       		lsr.w	#3,d0
00016C5C 0240 001E                  		andi.w	#$1E,d0
00016C60 45FA 0000                  		lea	off_164A6(pc),a2
00016C64 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016C68 315A 0038                  		move.w	(a2)+,$38(a0)
00016C6C 315A 0030                  		move.w	(a2)+,$30(a0)
00016C70 214A 003C                  		move.l	a2,$3C(a0)
00016C74 0241 000F                  		andi.w	#$F,d1
00016C78 E549                       		lsl.w	#2,d1
00016C7A 1141 0038                  		move.b	d1,$38(a0)
00016C7E 117C 0004 003A             		move.b	#4,$3A(a0)
00016C84 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016C88 6700                       		beq.s	loc_16356
00016C8A 117C 0001 003B             		move.b	#1,$3B(a0)
00016C90 4428 003A                  		neg.b	$3A(a0)
00016C94 7200                       		moveq	#0,d1
00016C96 1228 0038                  		move.b	$38(a0),d1
00016C9A D228 003A                  		add.b	$3A(a0),d1
00016C9E B228 0039                  		cmp.b	$39(a0),d1
00016CA2 6500                       		bcs.s	loc_16352
00016CA4 1001                       		move.b	d1,d0
00016CA6 7200                       		moveq	#0,d1
00016CA8 4A00                       		tst.b	d0
00016CAA 6A00                       		bpl.s	loc_16352
00016CAC 1228 0039                  		move.b	$39(a0),d1
00016CB0 5901                       		subq.b	#4,d1
00016CB2                            
00016CB2                            loc_16352:
00016CB2 1141 0038                  		move.b	d1,$38(a0)
00016CB6                            
00016CB6                            loc_16356:
00016CB6 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
00016CBC 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016CC2 4A41                       		tst.w	d1
00016CC4 6600                       		bne.s	loc_1636C
00016CC6 117C 0001 001C             		move.b	#1,$1C(a0)
00016CCC                            
00016CCC                            loc_1636C:
00016CCC 0C41 0008                  		cmpi.w	#8,d1
00016CD0 6600                       		bne.s	loc_16378
00016CD2 117C 0000 001C             		move.b	#0,$1C(a0)
00016CD8                            
00016CD8                            loc_16378:
00016CD8 6100 C0C6                  		bsr.w	Obj63_ChangeDir
00016CDC 6000 0000                  		bra.w	loc_163D8
00016CE0                            ; ===========================================================================
00016CE0                            
00016CE0                            loc_16380:				; XREF: Obj6F_Main
00016CE0 1140 002F                  		move.b	d0,$2F(a0)
00016CE4 0240 007F                  		andi.w	#$7F,d0
00016CE8 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016CEC 08F2 0000 0000             		bset	#0,(a2,d0.w)
00016CF2 6700                       		beq.s	loc_1639A
00016CF4 4EF9 0000 DE9C             		jmp	DeleteObject
00016CFA                            ; ===========================================================================
00016CFA                            
00016CFA                            loc_1639A:
00016CFA D040                       		add.w	d0,d0
00016CFC 0240 001E                  		andi.w	#$1E,d0
00016D00 0640 0080                  		addi.w	#$80,d0
00016D04 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016D0A D4F2 0000                  		adda.w	(a2,d0.w),a2
00016D0E 321A                       		move.w	(a2)+,d1
00016D10 2248                       		movea.l	a0,a1
00016D12 6000                       		bra.s	Obj6F_LoadPform
00016D14                            ; ===========================================================================
00016D14                            
00016D14                            Obj6F_Loop:
00016D14 4EB9 0000 E2E6             		jsr	SingleObjLoad
00016D1A 6600                       		bne.s	loc_163D0
00016D1C                            
00016D1C                            Obj6F_LoadPform:			; XREF: loc_1639A
00016D1C 12BC 006F                  		move.b	#$6F,0(a1)
00016D20 335A 0008                  		move.w	(a2)+,8(a1)
00016D24 335A 000C                  		move.w	(a2)+,$C(a1)
00016D28 301A                       		move.w	(a2)+,d0
00016D2A 1340 0028                  		move.b	d0,$28(a1)
00016D2E                            
00016D2E                            loc_163D0:
00016D2E 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016D32                            
00016D32 588F                       		addq.l	#4,sp
00016D34 4E75                       		rts	
00016D36                            ; ===========================================================================
00016D36                            
00016D36                            loc_163D8:				; XREF: Obj6F_Index
00016D36 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00016D3C 4EB9 0000 AEDA             		jsr	AnimateSprite
00016D42 4A28 001A                  		tst.b	$1A(a0)
00016D46 6600                       		bne.s	loc_16404
00016D48 3F28 0008                  		move.w	8(a0),-(sp)
00016D4C 6100 0000                  		bsr.w	loc_16424
00016D50 323C 001B                  		move.w	#$1B,d1
00016D54 343C 0007                  		move.w	#7,d2
00016D58 3602                       		move.w	d2,d3
00016D5A 5243                       		addq.w	#1,d3
00016D5C 381F                       		move.w	(sp)+,d4
00016D5E 6000 94D0                  		bra.w	SolidObject
00016D62                            ; ===========================================================================
00016D62                            
00016D62                            loc_16404:
00016D62 0828 0003 0022             		btst	#3,$22(a0)
00016D68 6700                       		beq.s	loc_16420
00016D6A 43F8 D000                  		lea	($FFFFD000).w,a1
00016D6E 08A9 0003 0022             		bclr	#3,$22(a1)
00016D74 08A8 0003 0022             		bclr	#3,$22(a0)
00016D7A 4228 0025                  		clr.b	$25(a0)
00016D7E                            
00016D7E                            loc_16420:
00016D7E 6000 0002                  		bra.w	*+4
00016D82                            
00016D82                            loc_16424:
00016D82 3028 0008                  		move.w	8(a0),d0
00016D86 B068 0034                  		cmp.w	$34(a0),d0
00016D8A 6600                       		bne.s	loc_16484
00016D8C 3028 000C                  		move.w	$C(a0),d0
00016D90 B068 0036                  		cmp.w	$36(a0),d0
00016D94 6600                       		bne.s	loc_16484
00016D96 7200                       		moveq	#0,d1
00016D98 1228 0038                  		move.b	$38(a0),d1
00016D9C D228 003A                  		add.b	$3A(a0),d1
00016DA0 B228 0039                  		cmp.b	$39(a0),d1
00016DA4 6500                       		bcs.s	loc_16456
00016DA6 1001                       		move.b	d1,d0
00016DA8 7200                       		moveq	#0,d1
00016DAA 4A00                       		tst.b	d0
00016DAC 6A00                       		bpl.s	loc_16456
00016DAE 1228 0039                  		move.b	$39(a0),d1
00016DB2 5901                       		subq.b	#4,d1
00016DB4                            
00016DB4                            loc_16456:
00016DB4 1141 0038                  		move.b	d1,$38(a0)
00016DB8 2268 003C                  		movea.l	$3C(a0),a1
00016DBC 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016DC2 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016DC8 4A41                       		tst.w	d1
00016DCA 6600                       		bne.s	loc_16474
00016DCC 117C 0001 001C             		move.b	#1,$1C(a0)
00016DD2                            
00016DD2                            loc_16474:
00016DD2 0C41 0008                  		cmpi.w	#8,d1
00016DD6 6600                       		bne.s	loc_16480
00016DD8 117C 0000 001C             		move.b	#0,$1C(a0)
00016DDE                            
00016DDE                            loc_16480:
00016DDE 6100 BFC0                  		bsr.w	Obj63_ChangeDir
00016DE2                            
00016DE2                            loc_16484:
00016DE2 4EF9 0000 DE3A             		jmp	SpeedToPos
00016DE8                            ; ===========================================================================
00016DE8                            Ani_obj6F:
00016DE8                            	include "_anim\obj6F.asm"
00016DE8                            ; ---------------------------------------------------------------------------
00016DE8                            ; Animation script - platform on conveyor belt (SBZ)
00016DE8                            ; ---------------------------------------------------------------------------
00016DE8 0000                       		dc.w byte_1648E-Ani_obj6F
00016DEA 0000                       		dc.w byte_164A2-Ani_obj6F
00016DEC 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016DF9 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
00016E00 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016E04 00                         		even
00016E04 00                         		even
00016E04                            
00016E04 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016E0A 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
00016E10 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016E24 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016E38 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00016E4C 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00016E60 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016E74 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016E88                            ; ===========================================================================
00016E88                            ; ---------------------------------------------------------------------------
00016E88                            ; Object 70 - large girder block (SBZ)
00016E88                            ; ---------------------------------------------------------------------------
00016E88                            
00016E88                            Obj70:					; XREF: Obj_Index
00016E88 7000                       		moveq	#0,d0
00016E8A 1028 0024                  		move.b	$24(a0),d0
00016E8E 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016E92 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016E96                            ; ===========================================================================
00016E96 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016E98 0000                       		dc.w Obj70_Action-Obj70_Index
00016E9A                            ; ===========================================================================
00016E9A                            
00016E9A                            Obj70_Main:				; XREF: Obj70_Index
00016E9A 5428 0024                  		addq.b	#2,$24(a0)
00016E9E 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016EA6 317C 42F0 0002             		move.w	#$42F0,2(a0)
00016EAC 0028 0004 0001             		ori.b	#4,1(a0)
00016EB2 117C 0004 0018             		move.b	#4,$18(a0)
00016EB8 117C 0060 0019             		move.b	#$60,$19(a0)
00016EBE 117C 0018 0016             		move.b	#$18,$16(a0)
00016EC4 3168 0008 0032             		move.w	8(a0),$32(a0)
00016ECA 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016ED0 6100 0000                  		bsr.w	Obj70_Move2
00016ED4                            
00016ED4                            Obj70_Action:				; XREF: Obj70_Index
00016ED4 3F28 0008                  		move.w	8(a0),-(sp)
00016ED8 4A68 003A                  		tst.w	$3A(a0)
00016EDC 6700                       		beq.s	Obj70_Move
00016EDE 5368 003A                  		subq.w	#1,$3A(a0)
00016EE2 6600                       		bne.s	Obj70_Solid
00016EE4                            
00016EE4                            Obj70_Move:
00016EE4 4EB9 0000 DE3A             		jsr	SpeedToPos
00016EEA 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
00016EEE 6600                       		bne.s	Obj70_Solid	; if time remains, branch
00016EF0 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
00016EF4                            
00016EF4                            Obj70_Solid:
00016EF4 381F                       		move.w	(sp)+,d4
00016EF6 4A28 0001                  		tst.b	1(a0)
00016EFA 6A00                       		bpl.s	Obj70_ChkDel
00016EFC 7200                       		moveq	#0,d1
00016EFE 1228 0019                  		move.b	$19(a0),d1
00016F02 0641 000B                  		addi.w	#$B,d1
00016F06 7400                       		moveq	#0,d2
00016F08 1428 0016                  		move.b	$16(a0),d2
00016F0C 3602                       		move.w	d2,d3
00016F0E 5243                       		addq.w	#1,d3
00016F10 6100 931E                  		bsr.w	SolidObject
00016F14                            
00016F14                            Obj70_ChkDel:
00016F14 3028 0032                  		move.w	$32(a0),d0
00016F18 0240 FF80                  		andi.w	#$FF80,d0
00016F1C 3238 F700                  		move.w	($FFFFF700).w,d1
00016F20 0441 0080                  		subi.w	#$80,d1
00016F24 0241 FF80                  		andi.w	#$FF80,d1
00016F28 9041                       		sub.w	d1,d0
00016F2A 0C40 0280                  		cmpi.w	#$280,d0
00016F2E 6200                       		bhi.s	Obj70_Delete
00016F30 4EF9 0000 DE60             		jmp	DisplaySprite
00016F36                            ; ===========================================================================
00016F36                            
00016F36                            Obj70_Delete:
00016F36 4EF9 0000 DE9C             		jmp	DeleteObject
00016F3C                            ; ===========================================================================
00016F3C                            
00016F3C                            Obj70_Move2:				; XREF: Obj70_Main
00016F3C 1028 0038                  		move.b	$38(a0),d0
00016F40 0240 0018                  		andi.w	#$18,d0
00016F44 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016F4A 43F1 0000                  		lea	(a1,d0.w),a1
00016F4E 3159 0010                  		move.w	(a1)+,$10(a0)
00016F52 3159 0012                  		move.w	(a1)+,$12(a0)
00016F56 3159 0034                  		move.w	(a1)+,$34(a0)
00016F5A 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00016F5E 317C 0007 003A             		move.w	#7,$3A(a0)
00016F64 4E75                       		rts	
00016F66                            ; ===========================================================================
00016F66 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00016F6E 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016F76 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00016F7E 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016F86                            ; ---------------------------------------------------------------------------
00016F86                            ; Sprite mappings - large girder block (SBZ)
00016F86                            ; ---------------------------------------------------------------------------
00016F86                            Map_obj70:
00016F86                            	include "_maps\obj70.asm"
00016F86                            ; ---------------------------------------------------------------------------
00016F86                            ; Sprite mappings - large girder block (SBZ)
00016F86                            ; ---------------------------------------------------------------------------
00016F86 0000                       		dc.w byte_1662A-Map_obj70
00016F88 0C                         byte_1662A:	dc.b $C
00016F89 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00016F8E 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016F93 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016F98 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00016F9D E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016FA2 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016FA7 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00016FAC 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00016FB1 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016FB6 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016FBB E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
00016FC0 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016FC6 00                         		even
00016FC6 00                         		even
00016FC6                            
00016FC6                            ; ===========================================================================
00016FC6                            ; ---------------------------------------------------------------------------
00016FC6                            ; Object 72 - teleporter (SBZ)
00016FC6                            ; ---------------------------------------------------------------------------
00016FC6                            
00016FC6                            Obj72:					; XREF: Obj_Index
00016FC6 7000                       		moveq	#0,d0
00016FC8 1028 0024                  		move.b	$24(a0),d0
00016FCC 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
00016FD0 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
00016FD4 3028 0008                  		move.w	8(a0),d0
00016FD8 0240 FF80                  		andi.w	#$FF80,d0
00016FDC 3238 F700                  		move.w	($FFFFF700).w,d1
00016FE0 0441 0080                  		subi.w	#$80,d1
00016FE4 0241 FF80                  		andi.w	#$FF80,d1
00016FE8 9041                       		sub.w	d1,d0
00016FEA 0C40 0280                  		cmpi.w	#$280,d0
00016FEE 6200                       		bhi.s	Obj72_Delete
00016FF0 4E75                       		rts	
00016FF2                            ; ===========================================================================
00016FF2                            
00016FF2                            Obj72_Delete:
00016FF2 4EF9 0000 DE9C             		jmp	DeleteObject
00016FF8                            ; ===========================================================================
00016FF8 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
00016FFA 0000                       		dc.w loc_166C8-Obj72_Index
00016FFC 0000                       		dc.w loc_1675E-Obj72_Index
00016FFE 0000                       		dc.w loc_16798-Obj72_Index
00017000                            ; ===========================================================================
00017000                            
00017000                            Obj72_Main:				; XREF: Obj72_Index
00017000 5428 0024                  		addq.b	#2,$24(a0)
00017004 1028 0028                  		move.b	$28(a0),d0
00017008 D040                       		add.w	d0,d0
0001700A 0240 001E                  		andi.w	#$1E,d0
0001700E 45FA 0000                  		lea	Obj72_Data(pc),a2
00017012 D4F2 0000                  		adda.w	(a2,d0.w),a2
00017016 315A 003A                  		move.w	(a2)+,$3A(a0)
0001701A 214A 003C                  		move.l	a2,$3C(a0)
0001701E 315A 0036                  		move.w	(a2)+,$36(a0)
00017022 315A 0038                  		move.w	(a2)+,$38(a0)
00017026                            
00017026                            loc_166C8:				; XREF: Obj72_Index
00017026 43F8 D000                  		lea	($FFFFD000).w,a1
0001702A 3029 0008                  		move.w	8(a1),d0
0001702E 9068 0008                  		sub.w	8(a0),d0
00017032 0828 0000 0022             		btst	#0,$22(a0)
00017038 6700                       		beq.s	loc_166E0
0001703A 0640 000F                  		addi.w	#$F,d0
0001703E                            
0001703E                            loc_166E0:
0001703E 0C40 0010                  		cmpi.w	#$10,d0
00017042 6400                       		bcc.s	locret_1675C
00017044 3229 000C                  		move.w	$C(a1),d1
00017048 9268 000C                  		sub.w	$C(a0),d1
0001704C 0641 0020                  		addi.w	#$20,d1
00017050 0C41 0040                  		cmpi.w	#$40,d1
00017054 6400                       		bcc.s	locret_1675C
00017056 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001705A 6600                       		bne.s	locret_1675C
0001705C 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017062 6600                       		bne.s	loc_1670E
00017064 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
0001706A 6500                       		bcs.s	locret_1675C
0001706C                            
0001706C                            loc_1670E:
0001706C 5428 0024                  		addq.b	#2,$24(a0)
00017070 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00017076 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001707C 337C 0800 0014             		move.w	#$800,$14(a1)
00017082 337C 0000 0010             		move.w	#0,$10(a1)
00017088 337C 0000 0012             		move.w	#0,$12(a1)
0001708E 08A8 0005 0022             		bclr	#5,$22(a0)
00017094 08A9 0005 0022             		bclr	#5,$22(a1)
0001709A 08E9 0001 0022             		bset	#1,$22(a1)
000170A0 3368 0008 0008             		move.w	8(a0),8(a1)
000170A6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000170AC 4228 0032                  		clr.b	$32(a0)
000170B0 303C 00BE                  		move.w	#$BE,d0
000170B4 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000170BA                            
000170BA                            locret_1675C:
000170BA 4E75                       		rts	
000170BC                            ; ===========================================================================
000170BC                            
000170BC                            loc_1675E:				; XREF: Obj72_Index
000170BC 43F8 D000                  		lea	($FFFFD000).w,a1
000170C0 1028 0032                  		move.b	$32(a0),d0
000170C4 5428 0032                  		addq.b	#2,$32(a0)
000170C8 4EB9 0000 2CFE             		jsr	(CalcSine).l
000170CE EA40                       		asr.w	#5,d0
000170D0 3428 000C                  		move.w	$C(a0),d2
000170D4 9440                       		sub.w	d0,d2
000170D6 3342 000C                  		move.w	d2,$C(a1)
000170DA 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000170E0 6600                       		bne.s	locret_16796
000170E2 6100 0000                  		bsr.w	sub_1681C
000170E6 5428 0024                  		addq.b	#2,$24(a0)
000170EA 303C 00BC                  		move.w	#$BC,d0
000170EE 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play teleport sound
000170F4                            
000170F4                            locret_16796:
000170F4 4E75                       		rts	
000170F6                            ; ===========================================================================
000170F6                            
000170F6                            loc_16798:				; XREF: Obj72_Index
000170F6 588F                       		addq.l	#4,sp
000170F8 43F8 D000                  		lea	($FFFFD000).w,a1
000170FC 5328 002E                  		subq.b	#1,$2E(a0)
00017100 6A00                       		bpl.s	loc_167DA
00017102 3368 0036 0008             		move.w	$36(a0),8(a1)
00017108 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001710E 7200                       		moveq	#0,d1
00017110 1228 003A                  		move.b	$3A(a0),d1
00017114 5801                       		addq.b	#4,d1
00017116 B228 003B                  		cmp.b	$3B(a0),d1
0001711A 6500                       		bcs.s	loc_167C2
0001711C 7200                       		moveq	#0,d1
0001711E 6000                       		bra.s	loc_16800
00017120                            ; ===========================================================================
00017120                            
00017120                            loc_167C2:
00017120 1141 003A                  		move.b	d1,$3A(a0)
00017124 2468 003C                  		movea.l	$3C(a0),a2
00017128 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001712E 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017134 6000 0000                  		bra.w	sub_1681C
00017138                            ; ===========================================================================
00017138                            
00017138                            loc_167DA:
00017138 2429 0008                  		move.l	8(a1),d2
0001713C 2629 000C                  		move.l	$C(a1),d3
00017140 3029 0010                  		move.w	$10(a1),d0
00017144 48C0                       		ext.l	d0
00017146 E180                       		asl.l	#8,d0
00017148 D480                       		add.l	d0,d2
0001714A 3029 0012                  		move.w	$12(a1),d0
0001714E 48C0                       		ext.l	d0
00017150 E180                       		asl.l	#8,d0
00017152 D680                       		add.l	d0,d3
00017154 2342 0008                  		move.l	d2,8(a1)
00017158 2343 000C                  		move.l	d3,$C(a1)
0001715C 4E75                       		rts	
0001715E                            ; ===========================================================================
0001715E                            
0001715E                            loc_16800:
0001715E 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017164 4228 0024                  		clr.b	$24(a0)
00017168 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001716C 337C 0000 0010             		move.w	#0,$10(a1)
00017172 337C 0200 0012             		move.w	#$200,$12(a1)
00017178 4E75                       		rts	
0001717A                            
0001717A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001717A                            
0001717A                            
0001717A                            sub_1681C:
0001717A 7000                       		moveq	#0,d0
0001717C 343C 1000                  		move.w	#$1000,d2
00017180 3028 0036                  		move.w	$36(a0),d0
00017184 9069 0008                  		sub.w	8(a1),d0
00017188 6C00                       		bge.s	loc_16830
0001718A 4440                       		neg.w	d0
0001718C 4442                       		neg.w	d2
0001718E                            
0001718E                            loc_16830:
0001718E 7200                       		moveq	#0,d1
00017190 363C 1000                  		move.w	#$1000,d3
00017194 3228 0038                  		move.w	$38(a0),d1
00017198 9269 000C                  		sub.w	$C(a1),d1
0001719C 6C00                       		bge.s	loc_16844
0001719E 4441                       		neg.w	d1
000171A0 4443                       		neg.w	d3
000171A2                            
000171A2                            loc_16844:
000171A2 B240                       		cmp.w	d0,d1
000171A4 6500                       		bcs.s	loc_1687A
000171A6 7200                       		moveq	#0,d1
000171A8 3228 0038                  		move.w	$38(a0),d1
000171AC 9269 000C                  		sub.w	$C(a1),d1
000171B0 4841                       		swap	d1
000171B2 83C3                       		divs.w	d3,d1
000171B4 7000                       		moveq	#0,d0
000171B6 3028 0036                  		move.w	$36(a0),d0
000171BA 9069 0008                  		sub.w	8(a1),d0
000171BE 6700                       		beq.s	loc_16866
000171C0 4840                       		swap	d0
000171C2 81C1                       		divs.w	d1,d0
000171C4                            
000171C4                            loc_16866:
000171C4 3340 0010                  		move.w	d0,$10(a1)
000171C8 3343 0012                  		move.w	d3,$12(a1)
000171CC 4A41                       		tst.w	d1
000171CE 6A00                       		bpl.s	loc_16874
000171D0 4441                       		neg.w	d1
000171D2                            
000171D2                            loc_16874:
000171D2 3141 002E                  		move.w	d1,$2E(a0)
000171D6 4E75                       		rts	
000171D8                            ; ===========================================================================
000171D8                            
000171D8                            loc_1687A:
000171D8 7000                       		moveq	#0,d0
000171DA 3028 0036                  		move.w	$36(a0),d0
000171DE 9069 0008                  		sub.w	8(a1),d0
000171E2 4840                       		swap	d0
000171E4 81C2                       		divs.w	d2,d0
000171E6 7200                       		moveq	#0,d1
000171E8 3228 0038                  		move.w	$38(a0),d1
000171EC 9269 000C                  		sub.w	$C(a1),d1
000171F0 6700                       		beq.s	loc_16898
000171F2 4841                       		swap	d1
000171F4 83C0                       		divs.w	d0,d1
000171F6                            
000171F6                            loc_16898:
000171F6 3341 0012                  		move.w	d1,$12(a1)
000171FA 3342 0010                  		move.w	d2,$10(a1)
000171FE 4A40                       		tst.w	d0
00017200 6A00                       		bpl.s	loc_168A6
00017202 4440                       		neg.w	d0
00017204                            
00017204                            loc_168A6:
00017204 3140 002E                  		move.w	d0,$2E(a0)
00017208 4E75                       		rts	
0001720A                            ; End of function sub_1681C
0001720A                            
0001720A                            ; ===========================================================================
0001720A 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017210 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017216 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
0001721A 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017220 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017226 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
0001722C 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017232 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017238 0884 0298 0894             		dc.w $884, $298, $894
0001723E 0270 0894 0190             		dc.w $270, $894, $190
00017244 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
0001724A 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017250 1184 0498 1158             		dc.w $1184, $498, $1158
00017256 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001725C 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017262 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017268 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001726E 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017274 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
0001727A FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017280 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017286 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001728C 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017292                            ; ===========================================================================
00017292                            ; ---------------------------------------------------------------------------
00017292                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017292                            ; ---------------------------------------------------------------------------
00017292                            
00017292                            Obj78:					; XREF: Obj_Index
00017292 7000                       		moveq	#0,d0
00017294 1028 0024                  		move.b	$24(a0),d0
00017298 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001729C 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
000172A0                            ; ===========================================================================
000172A0 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
000172A2 0000                       		dc.w Obj78_Action-Obj78_Index
000172A4 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000172A6 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
000172A8 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
000172AA 0000                       		dc.w Obj78_Delete-Obj78_Index
000172AC 0000                       		dc.w loc_16CC0-Obj78_Index
000172AE                            ; ===========================================================================
000172AE                            
000172AE                            locret_16950:
000172AE 4E75                       		rts	
000172B0                            ; ===========================================================================
000172B0                            
000172B0                            Obj78_Main:				; XREF: Obj78_Index
000172B0 117C 0007 0016             		move.b	#7,$16(a0)
000172B6 117C 0008 0017             		move.b	#8,$17(a0)
000172BC 4EB9 0000 DDC8             		jsr	ObjectFall
000172C2 4EBA E4A6                  		jsr	ObjHitFloor
000172C6 4A41                       		tst.w	d1
000172C8 6AE4                       		bpl.s	locret_16950
000172CA D368 000C                  		add.w	d1,$C(a0)
000172CE 4268 0012                  		clr.w	$12(a0)
000172D2 5428 0024                  		addq.b	#2,$24(a0)
000172D6 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000172DE 317C 22B0 0002             		move.w	#$22B0,2(a0)
000172E4 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000172EA 6700                       		beq.s	loc_16996
000172EC 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000172F2                            
000172F2                            loc_16996:
000172F2 0228 0003 0001             		andi.b	#3,1(a0)
000172F8 0028 0004 0001             		ori.b	#4,1(a0)
000172FE 1168 0001 0022             		move.b	1(a0),$22(a0)
00017304 117C 0004 0018             		move.b	#4,$18(a0)
0001730A 117C 0008 0019             		move.b	#8,$19(a0)
00017310 117C 000B 0020             		move.b	#$B,$20(a0)
00017316 3428 0008                  		move.w	8(a0),d2
0001731A 7A0C                       		moveq	#$C,d5
0001731C 0828 0000 0022             		btst	#0,$22(a0)
00017322 6700                       		beq.s	loc_169CA
00017324 4445                       		neg.w	d5
00017326                            
00017326                            loc_169CA:
00017326 1C3C 0004                  		move.b	#4,d6
0001732A 7600                       		moveq	#0,d3
0001732C 7804                       		moveq	#4,d4
0001732E 2448                       		movea.l	a0,a2
00017330 7202                       		moveq	#2,d1
00017332                            
00017332                            Obj78_LoadBody:
00017332 4EB9 0000 E2FC             		jsr	SingleObjLoad2
00017338 6600                       		bne.s	Obj78_QuitLoad
0001733A 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
0001733E 1346 0024                  		move.b	d6,$24(a1)
00017342 5406                       		addq.b	#2,d6
00017344 2368 0004 0004             		move.l	4(a0),4(a1)
0001734A 3368 0002 0002             		move.w	2(a0),2(a1)
00017350 137C 0005 0018             		move.b	#5,$18(a1)
00017356 137C 0008 0019             		move.b	#8,$19(a1)
0001735C 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017362 D445                       		add.w	d5,d2
00017364 3342 0008                  		move.w	d2,8(a1)
00017368 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001736E 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017374 1368 0022 0001             		move.b	$22(a0),1(a1)
0001737A 137C 0008 001A             		move.b	#8,$1A(a1)
00017380 234A 003C                  		move.l	a2,$3C(a1)
00017384 1344 003C                  		move.b	d4,$3C(a1)
00017388 5804                       		addq.b	#4,d4
0001738A 2449                       		movea.l	a1,a2
0001738C                            
0001738C                            Obj78_QuitLoad:
0001738C 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017390                            
00017390 117C 0007 002A             		move.b	#7,$2A(a0)
00017396 4228 003C                  		clr.b	$3C(a0)
0001739A                            
0001739A                            Obj78_Action:				; XREF: Obj78_Index
0001739A 4A28 0022                  		tst.b	$22(a0)
0001739E 6B00 0000                  		bmi.w	loc_16C96
000173A2 7000                       		moveq	#0,d0
000173A4 1028 0025                  		move.b	$25(a0),d0
000173A8 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
000173AC 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
000173B0 1228 002B                  		move.b	$2B(a0),d1
000173B4 6A00                       		bpl.s	Obj78_Display
000173B6 43F9 0000 0000             		lea	(Ani_obj78).l,a1
000173BC 1028 0026                  		move.b	$26(a0),d0
000173C0 0240 007F                  		andi.w	#$7F,d0
000173C4 5828 0026                  		addq.b	#4,$26(a0)
000173C8 1031 0000                  		move.b	(a1,d0.w),d0
000173CC 6A00                       		bpl.s	Obj78_AniHead
000173CE 08A8 0007 002B             		bclr	#7,$2B(a0)
000173D4 6000                       		bra.s	Obj78_Display
000173D6                            ; ===========================================================================
000173D6                            
000173D6                            Obj78_AniHead:
000173D6 0201 0010                  		andi.b	#$10,d1
000173DA D001                       		add.b	d1,d0
000173DC 1140 001A                  		move.b	d0,$1A(a0)
000173E0                            
000173E0                            Obj78_Display:
000173E0 3028 0008                  		move.w	8(a0),d0
000173E4 0240 FF80                  		andi.w	#$FF80,d0
000173E8 3238 F700                  		move.w	($FFFFF700).w,d1
000173EC 0441 0080                  		subi.w	#$80,d1
000173F0 0241 FF80                  		andi.w	#$FF80,d1
000173F4 9041                       		sub.w	d1,d0
000173F6 0C40 0280                  		cmpi.w	#$280,d0
000173FA 6200 0000                  		bhi.w	Obj78_ChkGone
000173FE 4EF9 0000 DE60             		jmp	DisplaySprite
00017404                            ; ===========================================================================
00017404                            
00017404                            Obj78_ChkGone:
00017404 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017408 7000                       		moveq	#0,d0
0001740A 1028 0023                  		move.b	$23(a0),d0
0001740E 6700                       		beq.s	loc_16ABC
00017410 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017416                            
00017416                            loc_16ABC:
00017416 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
0001741C 4E75                       		rts	
0001741E                            ; ===========================================================================
0001741E                            
0001741E                            Obj78_Delete:				; XREF: Obj78_Index
0001741E 4EF9 0000 DE9C             		jmp	DeleteObject
00017424                            ; ===========================================================================
00017424 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017426 0000                       		dc.w loc_16B02-Obj78_Index2
00017428                            ; ===========================================================================
00017428                            
00017428                            Obj78_Move:				; XREF: Obj78_Index2
00017428 5328 002A                  		subq.b	#1,$2A(a0)
0001742C 6B00                       		bmi.s	Obj78_Move2
0001742E 4E75                       		rts	
00017430                            ; ===========================================================================
00017430                            
00017430                            Obj78_Move2:
00017430 5428 0025                  		addq.b	#2,$25(a0)
00017434 117C 0010 002A             		move.b	#$10,$2A(a0)
0001743A 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017440 317C 0040 0014             		move.w	#$40,$14(a0)
00017446 0868 0004 002B             		bchg	#4,$2B(a0)
0001744C 6600                       		bne.s	loc_16AFC
0001744E 4268 0010                  		clr.w	$10(a0)
00017452 4468 0014                  		neg.w	$14(a0)
00017456                            
00017456                            loc_16AFC:
00017456 08E8 0007 002B             		bset	#7,$2B(a0)
0001745C                            
0001745C                            loc_16B02:				; XREF: Obj78_Index2
0001745C 5328 002A                  		subq.b	#1,$2A(a0)
00017460 6B00                       		bmi.s	loc_16B5E
00017462 2F28 0008                  		move.l	8(a0),-(sp)
00017466 2428 0008                  		move.l	8(a0),d2
0001746A 3028 0010                  		move.w	$10(a0),d0
0001746E 0828 0000 0022             		btst	#0,$22(a0)
00017474 6700                       		beq.s	loc_16B1E
00017476 4440                       		neg.w	d0
00017478                            
00017478                            loc_16B1E:
00017478 48C0                       		ext.l	d0
0001747A E180                       		asl.l	#8,d0
0001747C D480                       		add.l	d0,d2
0001747E 2142 0008                  		move.l	d2,8(a0)
00017482 4EBA E2E6                  		jsr	ObjHitFloor
00017486 241F                       		move.l	(sp)+,d2
00017488 0C41 FFF8                  		cmpi.w	#-8,d1
0001748C 6D00                       		blt.s	loc_16B70
0001748E 0C41 000C                  		cmpi.w	#$C,d1
00017492 6C00                       		bge.s	loc_16B70
00017494 D368 000C                  		add.w	d1,$C(a0)
00017498 4842                       		swap	d2
0001749A B468 0008                  		cmp.w	8(a0),d2
0001749E 6700                       		beq.s	locret_16B5C
000174A0 7000                       		moveq	#0,d0
000174A2 1028 003C                  		move.b	$3C(a0),d0
000174A6 5228 003C                  		addq.b	#1,$3C(a0)
000174AA 0228 000F 003C             		andi.b	#$F,$3C(a0)
000174B0 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000174B4                            
000174B4                            locret_16B5C:
000174B4 4E75                       		rts	
000174B6                            ; ===========================================================================
000174B6                            
000174B6                            loc_16B5E:
000174B6 5528 0025                  		subq.b	#2,$25(a0)
000174BA 117C 0007 002A             		move.b	#7,$2A(a0)
000174C0 317C 0000 0010             		move.w	#0,$10(a0)
000174C6 4E75                       		rts	
000174C8                            ; ===========================================================================
000174C8                            
000174C8                            loc_16B70:
000174C8 2142 0008                  		move.l	d2,8(a0)
000174CC 0868 0000 0022             		bchg	#0,$22(a0)
000174D2 1168 0022 0001             		move.b	$22(a0),1(a0)
000174D8 7000                       		moveq	#0,d0
000174DA 1028 003C                  		move.b	$3C(a0),d0
000174DE 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
000174E4 5228 003C                  		addq.b	#1,$3C(a0)
000174E8 0228 000F 003C             		andi.b	#$F,$3C(a0)
000174EE 4E75                       		rts	
000174F0                            ; ===========================================================================
000174F0                            
000174F0                            Obj78_BodySeg2:				; XREF: Obj78_Index
000174F0 2268 003C                  		movea.l	$3C(a0),a1
000174F4 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
000174FA 6A00                       		bpl.s	Obj78_BodySeg1
000174FC 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017502 1028 0026                  		move.b	$26(a0),d0
00017506 0240 007F                  		andi.w	#$7F,d0
0001750A 5828 0026                  		addq.b	#4,$26(a0)
0001750E 4A31 0004                  		tst.b	4(a1,d0.w)
00017512 6A00                       		bpl.s	Obj78_AniBody
00017514 5828 0026                  		addq.b	#4,$26(a0)
00017518                            
00017518                            Obj78_AniBody:
00017518 1031 0000                  		move.b	(a1,d0.w),d0
0001751C 5000                       		addq.b	#8,d0
0001751E 1140 001A                  		move.b	d0,$1A(a0)
00017522                            
00017522                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017522 2268 003C                  		movea.l	$3C(a0),a1
00017526 4A28 0022                  		tst.b	$22(a0)
0001752A 6B00 0000                  		bmi.w	loc_16C90
0001752E 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017534 1169 0025 0025             		move.b	$25(a1),$25(a0)
0001753A 6700 0000                  		beq.w	loc_16C64
0001753E 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017544 3029 0010                  		move.w	$10(a1),d0
00017548 D069 0014                  		add.w	$14(a1),d0
0001754C 3140 0010                  		move.w	d0,$10(a0)
00017550 2428 0008                  		move.l	8(a0),d2
00017554 2602                       		move.l	d2,d3
00017556 3028 0010                  		move.w	$10(a0),d0
0001755A 0828 0000 0022             		btst	#0,$22(a0)
00017560 6700                       		beq.s	loc_16C0C
00017562 4440                       		neg.w	d0
00017564                            
00017564                            loc_16C0C:
00017564 48C0                       		ext.l	d0
00017566 E180                       		asl.l	#8,d0
00017568 D480                       		add.l	d0,d2
0001756A 2142 0008                  		move.l	d2,8(a0)
0001756E 4843                       		swap	d3
00017570 B668 0008                  		cmp.w	8(a0),d3
00017574 6700                       		beq.s	loc_16C64
00017576 7000                       		moveq	#0,d0
00017578 1028 003C                  		move.b	$3C(a0),d0
0001757C 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017580 0C01 0080                  		cmpi.b	#-$80,d1
00017584 6600                       		bne.s	loc_16C50
00017586 4843                       		swap	d3
00017588 2143 0008                  		move.l	d3,8(a0)
0001758C 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017590 0868 0000 0022             		bchg	#0,$22(a0)
00017596 1168 0022 0001             		move.b	$22(a0),1(a0)
0001759C 5228 003C                  		addq.b	#1,$3C(a0)
000175A0 0228 000F 003C             		andi.b	#$F,$3C(a0)
000175A6 6000                       		bra.s	loc_16C64
000175A8                            ; ===========================================================================
000175A8                            
000175A8                            loc_16C50:
000175A8 4881                       		ext.w	d1
000175AA D368 000C                  		add.w	d1,$C(a0)
000175AE 5228 003C                  		addq.b	#1,$3C(a0)
000175B2 0228 000F 003C             		andi.b	#$F,$3C(a0)
000175B8 1181 002C                  		move.b	d1,$2C(a0,d0.w)
000175BC                            
000175BC                            loc_16C64:
000175BC 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
000175C2 6700                       		beq.s	loc_16C90
000175C4 0C11 0027                  		cmpi.b	#$27,0(a1)
000175C8 6700                       		beq.s	loc_16C7C
000175CA 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
000175D0 6600                       		bne.s	loc_16C82
000175D2                            
000175D2                            loc_16C7C:
000175D2 117C 000A 0024             		move.b	#$A,$24(a0)
000175D8                            
000175D8                            loc_16C82:
000175D8 4EF9 0000 DE60             		jmp	DisplaySprite
000175DE                            
000175DE                            ; ===========================================================================
000175DE FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
000175E6                            ; ===========================================================================
000175E6                            
000175E6                            loc_16C90:
000175E6 08E9 0007 0022             		bset	#7,$22(a1)
000175EC                            
000175EC                            loc_16C96:
000175EC 7000                       		moveq	#0,d0
000175EE 1028 0024                  		move.b	$24(a0),d0
000175F2 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
000175F6 0828 0000 0022             		btst	#0,$22(a0)
000175FC 6700                       		beq.s	loc_16CAA
000175FE 4440                       		neg.w	d0
00017600                            
00017600                            loc_16CAA:
00017600 3140 0010                  		move.w	d0,$10(a0)
00017604 317C FC00 0012             		move.w	#-$400,$12(a0)
0001760A 117C 000C 0024             		move.b	#$C,$24(a0)
00017610 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017616                            
00017616                            loc_16CC0:				; XREF: Obj78_Index
00017616 4EB9 0000 DDC8             		jsr	ObjectFall
0001761C 4A68 0012                  		tst.w	$12(a0)
00017620 6B00                       		bmi.s	loc_16CE0
00017622 4EBA E146                  		jsr	ObjHitFloor
00017626 4A41                       		tst.w	d1
00017628 6A00                       		bpl.s	loc_16CE0
0001762A D368 000C                  		add.w	d1,$C(a0)
0001762E 317C FC00 0012             		move.w	#-$400,$12(a0)
00017634                            
00017634                            loc_16CE0:
00017634 4A28 0001                  		tst.b	1(a0)
00017638 6A00 FDCA                  		bpl.w	Obj78_ChkGone
0001763C 4EF9 0000 DE60             		jmp	DisplaySprite
00017642                            ; ===========================================================================
00017642                            Ani_obj78:
00017642                            	include "_anim\obj78.asm"
00017642                            ; ---------------------------------------------------------------------------
00017642                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017642                            ; ---------------------------------------------------------------------------
00017642 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017652 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017662 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017672 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017682 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017692 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
000176A2 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
000176B2 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
000176C2                            	even
000176C2                            	even
000176C2                            
000176C2                            ; ---------------------------------------------------------------------------
000176C2                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000176C2                            ; ---------------------------------------------------------------------------
000176C2                            Map_obj78:
000176C2                            	include "_maps\obj78.asm"
000176C2                            ; ---------------------------------------------------------------------------
000176C2                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
000176C2                            ; ---------------------------------------------------------------------------
000176C2 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
000176C6 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
000176CA 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
000176CE 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
000176D2 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
000176D6 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
000176DA 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
000176DE 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
000176E2 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
000176E6 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
000176EA 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
000176EE 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
000176F2 01                         byte_16D9E:	dc.b 1
000176F3 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
000176F8 01                         byte_16DA4:	dc.b 1
000176F9 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
000176FE 01                         byte_16DAA:	dc.b 1
000176FF F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017704 01                         byte_16DB0:	dc.b 1
00017705 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
0001770A 01                         byte_16DB6:	dc.b 1
0001770B EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017710 01                         byte_16DBC:	dc.b 1
00017711 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017716 01                         byte_16DC2:	dc.b 1
00017717 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
0001771C 01                         byte_16DC8:	dc.b 1
0001771D EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00017722 01                         byte_16DCE:	dc.b 1
00017723 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00017728 01                         byte_16DD4:	dc.b 1
00017729 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
0001772E 01                         byte_16DDA:	dc.b 1
0001772F F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00017734 01                         byte_16DE0:	dc.b 1
00017735 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
0001773A 01                         byte_16DE6:	dc.b 1
0001773B F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00017740 01                         byte_16DEC:	dc.b 1
00017741 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00017746 01                         byte_16DF2:	dc.b 1
00017747 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
0001774C 01                         byte_16DF8:	dc.b 1
0001774D F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00017752 01                         byte_16DFE:	dc.b 1
00017753 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00017758 01                         byte_16E04:	dc.b 1
00017759 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
0001775E 01                         byte_16E0A:	dc.b 1
0001775F F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00017764 01                         byte_16E10:	dc.b 1
00017765 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
0001776A 01                         byte_16E16:	dc.b 1
0001776B EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00017770 01                         byte_16E1C:	dc.b 1
00017771 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00017776 01                         byte_16E22:	dc.b 1
00017777 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
0001777C 01                         byte_16E28:	dc.b 1
0001777D EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00017782                            		even
00017782                            		even
00017782                            
00017782                            ; ===========================================================================
00017782                            ; ---------------------------------------------------------------------------
00017782                            ; Object 79 - lamppost
00017782                            ; ---------------------------------------------------------------------------
00017782                            
00017782                            Obj79:					; XREF: Obj_Index
00017782 7000                       		moveq	#0,d0
00017784 1028 0024                  		move.b	$24(a0),d0
00017788 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
0001778C 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00017790 4EFA 8776                  		jmp	MarkObjGone
00017794                            ; ===========================================================================
00017794 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00017796 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00017798 0000                       		dc.w Obj79_AfterHit-Obj79_Index
0001779A 0000                       		dc.w Obj79_Twirl-Obj79_Index
0001779C                            ; ===========================================================================
0001779C                            
0001779C                            Obj79_Main:				; XREF: Obj79_Index
0001779C 5428 0024                  		addq.b	#2,$24(a0)
000177A0 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
000177A8 317C 07A0 0002             		move.w	#$7A0,2(a0)
000177AE 117C 0004 0001             		move.b	#4,1(a0)
000177B4 117C 0008 0019             		move.b	#8,$19(a0)
000177BA 117C 0005 0018             		move.b	#5,$18(a0)
000177C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000177C4 7000                       		moveq	#0,d0
000177C6 1028 0023                  		move.b	$23(a0),d0
000177CA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000177D0 0832 0000 0002             		btst	#0,2(a2,d0.w)
000177D6 6600                       		bne.s	Obj79_RedLamp
000177D8 1238 FE30                  		move.b	($FFFFFE30).w,d1
000177DC 0201 007F                  		andi.b	#$7F,d1
000177E0 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000177E4 0202 007F                  		andi.b	#$7F,d2
000177E8 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000177EA 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000177EC                            
000177EC                            Obj79_RedLamp:
000177EC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000177F2 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000177F8 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000177FE 4E75                       		rts	
00017800                            ; ===========================================================================
00017800                            
00017800                            Obj79_BlueLamp:				; XREF: Obj79_Index
00017800 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017804 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017808 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001780C 6B00 0000                  		bmi.w	locret_16F90
00017810 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017814 0201 007F                  		andi.b	#$7F,d1
00017818 1428 0028                  		move.b	$28(a0),d2
0001781C 0202 007F                  		andi.b	#$7F,d2
00017820 B202                       		cmp.b	d2,d1
00017822 6500                       		bcs.s	Obj79_HitLamp
00017824 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017828 7000                       		moveq	#0,d0
0001782A 1028 0023                  		move.b	$23(a0),d0
0001782E 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017834 117C 0004 0024             		move.b	#4,$24(a0)
0001783A 117C 0003 001A             		move.b	#3,$1A(a0)
00017840 6000 0000                  		bra.w	locret_16F90
00017844                            ; ===========================================================================
00017844                            
00017844                            Obj79_HitLamp:
00017844 3038 D008                  		move.w	($FFFFD008).w,d0
00017848 9068 0008                  		sub.w	8(a0),d0
0001784C 5040                       		addq.w	#8,d0
0001784E 0C40 0010                  		cmpi.w	#$10,d0
00017852 6400 0000                  		bcc.w	locret_16F90
00017856 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001785A 9068 000C                  		sub.w	$C(a0),d0
0001785E 0640 0040                  		addi.w	#$40,d0
00017862 0C40 0068                  		cmpi.w	#$68,d0
00017866 6400                       		bcc.s	locret_16F90
00017868 303C 00A1                  		move.w	#$A1,d0
0001786C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017872 5428 0024                  		addq.b	#2,$24(a0)
00017876 4EB9 0000 E2E6             		jsr	SingleObjLoad
0001787C 6600                       		bne.s	loc_16F76
0001787E 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017882 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017888 3368 0008 0030             		move.w	8(a0),$30(a1)
0001788E 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017894 0469 0018 0032             		subi.w	#$18,$32(a1)
0001789A 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000178A2 337C 07A0 0002             		move.w	#$7A0,2(a1)
000178A8 137C 0004 0001             		move.b	#4,1(a1)
000178AE 137C 0008 0019             		move.b	#8,$19(a1)
000178B4 137C 0004 0018             		move.b	#4,$18(a1)
000178BA 137C 0002 001A             		move.b	#2,$1A(a1)
000178C0 337C 0020 0036             		move.w	#$20,$36(a1)
000178C6                            
000178C6                            loc_16F76:
000178C6 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000178CC 6100 0000                  		bsr.w	Obj79_StoreInfo
000178D0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000178D4 7000                       		moveq	#0,d0
000178D6 1028 0023                  		move.b	$23(a0),d0
000178DA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000178E0                            
000178E0                            locret_16F90:
000178E0 4E75                       		rts	
000178E2                            ; ===========================================================================
000178E2                            
000178E2                            Obj79_AfterHit:				; XREF: Obj79_Index
000178E2 4E75                       		rts	
000178E4                            ; ===========================================================================
000178E4                            
000178E4                            Obj79_Twirl:				; XREF: Obj79_Index
000178E4 5368 0036                  		subq.w	#1,$36(a0)
000178E8 6A00                       		bpl.s	loc_16FA0
000178EA 117C 0004 0024             		move.b	#4,$24(a0)
000178F0                            
000178F0                            loc_16FA0:
000178F0 1028 0026                  		move.b	$26(a0),d0
000178F4 0428 0010 0026             		subi.b	#$10,$26(a0)
000178FA 0400 0040                  		subi.b	#$40,d0
000178FE 4EB9 0000 2CFE             		jsr	(CalcSine).l
00017904 C3FC 0C00                  		muls.w	#$C00,d1
00017908 4841                       		swap	d1
0001790A D268 0030                  		add.w	$30(a0),d1
0001790E 3141 0008                  		move.w	d1,8(a0)
00017912 C1FC 0C00                  		muls.w	#$C00,d0
00017916 4840                       		swap	d0
00017918 D068 0032                  		add.w	$32(a0),d0
0001791C 3140 000C                  		move.w	d0,$C(a0)
00017920 4E75                       		rts	
00017922                            ; ===========================================================================
00017922                            ; ---------------------------------------------------------------------------
00017922                            ; Subroutine to	store information when you hit a lamppost
00017922                            ; ---------------------------------------------------------------------------
00017922                            
00017922                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017922 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017928 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0001792E 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017934 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
0001793A 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00017940 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017946 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001794C 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017952 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017958 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001795E 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017964 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
0001796A 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00017970 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017976 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001797C 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017982 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017988 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001798E 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017994 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
0001799A 4E75                       		rts	
0001799C                            
0001799C                            ; ---------------------------------------------------------------------------
0001799C                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001799C                            ; ---------------------------------------------------------------------------
0001799C                            
0001799C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001799C                            
0001799C                            
0001799C                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001799C 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000179A2 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000179A8 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000179AE 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000179B4 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000179BA 4278 FE20                  		clr.w	($FFFFFE20).w
000179BE 4238 FE1B                  		clr.b	($FFFFFE1B).w
000179C2 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000179C8 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000179CE 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000179D2 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000179D8 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000179DE 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000179E4 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000179EA 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000179F0 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000179F6 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000179FC 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017A02 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017A08 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00017A0E 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017A14 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017A1A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00017A20 6600                       		bne.s	loc_170E4
00017A22 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017A28 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00017A2E 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017A34                            
00017A34                            loc_170E4:
00017A34 4A38 FE30                  		tst.b	($FFFFFE30).w
00017A38 6A00                       		bpl.s	locret_170F6
00017A3A 3038 FE32                  		move.w	($FFFFFE32).w,d0
00017A3E 0440 00A0                  		subi.w	#$A0,d0
00017A42 31C0 F728                  		move.w	d0,($FFFFF728).w
00017A46                            
00017A46                            locret_170F6:
00017A46 4E75                       		rts	
00017A48                            ; End of function Obj79_LoadInfo
00017A48                            
00017A48                            ; ===========================================================================
00017A48                            ; ---------------------------------------------------------------------------
00017A48                            ; Sprite mappings - lamppost
00017A48                            ; ---------------------------------------------------------------------------
00017A48                            Map_obj79:
00017A48                            	include "_maps\obj79.asm"
00017A48                            ; ---------------------------------------------------------------------------
00017A48                            ; Sprite mappings - lamppost
00017A48                            ; ---------------------------------------------------------------------------
00017A48 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00017A4C 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00017A50 06                         byte_17100:	dc.b 6
00017A51 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A56 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A5B F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A60 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A65 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017A6A D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00017A6F 04                         byte_1711F:	dc.b 4
00017A70 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A75 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A7A F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A7F F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017A84 02                         byte_17134:	dc.b 2
00017A85 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017A8A F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00017A8F 06                         byte_1713F:	dc.b 6
00017A90 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017A95 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017A9A F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00017A9F F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017AA4 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017AA9 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00017AAE                            		even
00017AAE                            		even
00017AAE                            
00017AAE                            ; ===========================================================================
00017AAE                            ; ---------------------------------------------------------------------------
00017AAE                            ; Object 7D - hidden points at the end of a level
00017AAE                            ; ---------------------------------------------------------------------------
00017AAE                            
00017AAE                            Obj7D:					; XREF: Obj_Index
00017AAE 7000                       		moveq	#0,d0
00017AB0 1028 0024                  		move.b	$24(a0),d0
00017AB4 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017AB8 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
00017ABC                            ; ===========================================================================
00017ABC 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
00017ABE 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
00017AC0                            ; ===========================================================================
00017AC0                            
00017AC0                            Obj7D_Main:				; XREF: Obj7D_Index
00017AC0 7410                       		moveq	#$10,d2
00017AC2 3602                       		move.w	d2,d3
00017AC4 D643                       		add.w	d3,d3
00017AC6 43F8 D000                  		lea	($FFFFD000).w,a1
00017ACA 3029 0008                  		move.w	8(a1),d0
00017ACE 9068 0008                  		sub.w	8(a0),d0
00017AD2 D042                       		add.w	d2,d0
00017AD4 B043                       		cmp.w	d3,d0
00017AD6 6400                       		bcc.s	Obj7D_ChkDel
00017AD8 3229 000C                  		move.w	$C(a1),d1
00017ADC 9268 000C                  		sub.w	$C(a0),d1
00017AE0 D242                       		add.w	d2,d1
00017AE2 B243                       		cmp.w	d3,d1
00017AE4 6400                       		bcc.s	Obj7D_ChkDel
00017AE6 4A78 FE08                  		tst.w	($FFFFFE08).w
00017AEA 6600                       		bne.s	Obj7D_ChkDel
00017AEC 4A38 F7CD                  		tst.b	($FFFFF7CD).w
00017AF0 6600                       		bne.s	Obj7D_ChkDel
00017AF2 5428 0024                  		addq.b	#2,$24(a0)
00017AF6 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
00017AFE 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017B04 0028 0004 0001             		ori.b	#4,1(a0)
00017B0A 117C 0000 0018             		move.b	#0,$18(a0)
00017B10 117C 0010 0019             		move.b	#$10,$19(a0)
00017B16 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00017B1C 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017B22 303C 00C9                  		move.w	#$C9,d0
00017B26 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play bonus sound
00017B2C 7000                       		moveq	#0,d0
00017B2E 1028 0028                  		move.b	$28(a0),d0
00017B32 D040                       		add.w	d0,d0
00017B34 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017B38 4EB9 0000 0000             		jsr	AddPoints
00017B3E                            
00017B3E                            Obj7D_ChkDel:
00017B3E 3028 0008                  		move.w	8(a0),d0
00017B42 0240 FF80                  		andi.w	#$FF80,d0
00017B46 3238 F700                  		move.w	($FFFFF700).w,d1
00017B4A 0441 0080                  		subi.w	#$80,d1
00017B4E 0241 FF80                  		andi.w	#$FF80,d1
00017B52 9041                       		sub.w	d1,d0
00017B54 0C40 0280                  		cmpi.w	#$280,d0
00017B58 6200                       		bhi.s	Obj7D_Delete
00017B5A 4E75                       		rts	
00017B5C                            ; ===========================================================================
00017B5C                            
00017B5C                            Obj7D_Delete:
00017B5C 4EF9 0000 DE9C             		jmp	DeleteObject
00017B62                            ; ===========================================================================
00017B62 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017B64 03E8                       		dc.w 1000
00017B66 0064                       		dc.w 100
00017B68 0001                       		dc.w 1
00017B6A                            ; ===========================================================================
00017B6A                            
00017B6A                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017B6A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00017B6E 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00017B70 3028 0008                  		move.w	8(a0),d0
00017B74 0240 FF80                  		andi.w	#-$80,d0
00017B78 3238 F700                  		move.w	($FFFFF700).w,d1
00017B7C 0441 0080                  		subi.w	#$80,d1
00017B80 0241 FF80                  		andi.w	#-$80,d1
00017B84 9041                       		sub.w	d1,d0
00017B86 0C40 0280                  		cmpi.w	#$280,d0
00017B8A 6200                       		bhi.s	Obj7D_Delete2
00017B8C 4EF9 0000 DE60             		jmp	DisplaySprite
00017B92                            ; ===========================================================================
00017B92                            
00017B92                            Obj7D_Delete2:
00017B92 4EF9 0000 DE9C             		jmp	DeleteObject
00017B98                            ; ===========================================================================
00017B98                            ; ---------------------------------------------------------------------------
00017B98                            ; Sprite mappings - hidden points at the end of	a level
00017B98                            ; ---------------------------------------------------------------------------
00017B98                            Map_obj7D:
00017B98                            	include "_maps\obj7D.asm"
00017B98                            ; ---------------------------------------------------------------------------
00017B98                            ; Sprite mappings - hidden points at the end of	a level
00017B98                            ; ---------------------------------------------------------------------------
00017B98 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00017B9C 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00017BA0 00                         byte_17250:	dc.b 0
00017BA1 01                         byte_17251:	dc.b 1
00017BA2 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017BA7 01                         byte_17257:	dc.b 1
00017BA8 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00017BAD 01                         byte_1725D:	dc.b 1
00017BAE F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017BB4 00                         		even
00017BB4 00                         		even
00017BB4                            
00017BB4                            ; ===========================================================================
00017BB4                            ; ---------------------------------------------------------------------------
00017BB4                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017BB4                            ; ---------------------------------------------------------------------------
00017BB4                            
00017BB4                            Obj8A:					; XREF: Obj_Index
00017BB4 7000                       		moveq	#0,d0
00017BB6 1028 0024                  		move.b	$24(a0),d0
00017BBA 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
00017BBE 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017BC2                            ; ===========================================================================
00017BC2 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017BC4 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017BC6                            ; ===========================================================================
00017BC6                            
00017BC6                            Obj8A_Main:				; XREF: Obj8A_Index
00017BC6 5428 0024                  		addq.b	#2,$24(a0)
00017BCA 317C 0120 0008             		move.w	#$120,8(a0)
00017BD0 317C 00F0 000A             		move.w	#$F0,$A(a0)
00017BD6 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
00017BDE 317C 05A0 0002             		move.w	#$5A0,2(a0)
00017BE4 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
00017BE8 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
00017BEC 117C 0000 0001             		move.b	#0,1(a0)
00017BF2 117C 0000 0018             		move.b	#0,$18(a0)
00017BF8 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
00017BFE 6600                       		bne.s	Obj8A_Display	; if not, branch
00017C00 317C 00A6 0002             		move.w	#$A6,2(a0)
00017C06 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
00017C0C 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
00017C10 6700                       		beq.s	Obj8A_Display	; if not, branch
00017C12 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017C18 6600                       		bne.s	Obj8A_Display	; if not, branch
00017C1A 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00017C20 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017C26 4EF9 0000 DE9C             		jmp	DeleteObject
00017C2C                            ; ===========================================================================
00017C2C                            
00017C2C                            Obj8A_Display:				; XREF: Obj8A_Index
00017C2C 4EF9 0000 DE60             		jmp	DisplaySprite
00017C32                            ; ===========================================================================
00017C32                            ; ---------------------------------------------------------------------------
00017C32                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017C32                            ; ---------------------------------------------------------------------------
00017C32                            Map_obj8A:
00017C32                            	include "_maps\obj8A.asm"
00017C32                            Map_ca8f:
00017C32 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
00017C34 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
00017C36 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
00017C38 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00017C3A 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00017C3C 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00017C3E 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00017C40 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00017C42 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
00017C44 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
00017C46 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
00017C48 08                         Map_ca8f_16: 	dc.b $8
00017C49 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00017C4E E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
00017C53 F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00017C58 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00017C5D B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
00017C62 B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
00017C67 B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00017C6C B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00017C71 10                         Map_ca8f_3F: 	dc.b $10
00017C72 D805 0000 80               	dc.b $D8, $5, $0, $0, $80
00017C77 D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00017C7C D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00017C81 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
00017C86 D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00017C8B D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00017C90 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
00017C95 D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00017C9A 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00017C9F 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
00017CA4 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00017CA9 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00017CAE 0805 0016 08               	dc.b $8, $5, $0, $16, $8
00017CB3 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
00017CB8 0805 0004 30               	dc.b $8, $5, $0, $4, $30
00017CBD 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
00017CC2 0A                         Map_ca8f_90: 	dc.b $A
00017CC3 D805 0012 80               	dc.b $D8, $5, $0, $12, $80
00017CC8 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
00017CCD D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
00017CD2 D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
00017CD7 D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
00017CDC D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
00017CE1 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
00017CE6 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
00017CEB 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
00017CF0 0805 0036 08               	dc.b $8, $5, $0, $36, $8
00017CF5 18                         Map_ca8f_C3: 	dc.b $18
00017CF6 D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
00017CFB D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
00017D00 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
00017D05 D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
00017D0A D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017D0F D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
00017D14 D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00017D19 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00017D1E D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017D23 D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00017D28 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00017D2D D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
00017D32 D801 0046 50               	dc.b $D8, $1, $0, $46, $50
00017D37 D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00017D3C D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00017D41 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
00017D46 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00017D4B 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00017D50 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
00017D55 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00017D5A 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00017D5F 0805 0004 10               	dc.b $8, $5, $0, $4, $10
00017D64 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00017D69 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00017D6E 14                         Map_ca8f_13C: 	dc.b $14
00017D6F D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
00017D74 D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00017D79 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00017D7E D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
00017D83 D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00017D88 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00017D8D 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
00017D92 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
00017D97 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00017D9C 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00017DA1 0005 0004 24               	dc.b $0, $5, $0, $4, $24
00017DA6 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00017DAB 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00017DB0 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
00017DB5 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
00017DBA 2001 0046 10               	dc.b $20, $1, $0, $46, $10
00017DBF 2005 0050 18               	dc.b $20, $5, $0, $50, $18
00017DC4 2005 0022 30               	dc.b $20, $5, $0, $22, $30
00017DC9 2001 0046 40               	dc.b $20, $1, $0, $46, $40
00017DCE 2005 000E 48               	dc.b $20, $5, $0, $E, $48
00017DD3 1A                         Map_ca8f_1A1: 	dc.b $1A
00017DD4 D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
00017DD9 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
00017DDE D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
00017DE3 D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
00017DE8 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
00017DED D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
00017DF2 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
00017DF7 D805 0026 18               	dc.b $D8, $5, $0, $26, $18
00017DFC D805 0042 28               	dc.b $D8, $5, $0, $42, $28
00017E01 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
00017E06 D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
00017E0B D805 000E 58               	dc.b $D8, $5, $0, $E, $58
00017E10 0809 0008 88               	dc.b $8, $9, $0, $8, $88
00017E15 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00017E1A 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00017E1F 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
00017E24 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00017E29 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00017E2E 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
00017E33 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00017E38 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00017E3D 0805 0004 28               	dc.b $8, $5, $0, $4, $28
00017E42 0809 0008 38               	dc.b $8, $9, $0, $8, $38
00017E47 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00017E4C 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00017E51 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
00017E56 17                         Map_ca8f_224: 	dc.b $17
00017E57 D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00017E5C D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00017E61 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
00017E66 D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00017E6B D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00017E70 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
00017E75 D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00017E7A D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00017E7F D005 0000 28               	dc.b $D0, $5, $0, $0, $28
00017E84 D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00017E89 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00017E8E D009 0008 58               	dc.b $D0, $9, $0, $8, $58
00017E93 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017E98 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017E9D 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
00017EA2 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
00017EA7 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00017EAC 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00017EB1 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
00017EB6 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
00017EBB 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
00017EC0 2005 0058 04               	dc.b $20, $5, $0, $58, $4
00017EC5 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
00017ECA 1F                         Map_ca8f_298: 	dc.b $1F
00017ECB D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
00017ED0 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
00017ED5 D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
00017EDA D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
00017EDF D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
00017EE4 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
00017EE9 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
00017EEE D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
00017EF3 D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
00017EF8 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
00017EFD D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
00017F02 D805 0058 38               	dc.b $D8, $5, $0, $58, $38
00017F07 D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
00017F0C 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
00017F11 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
00017F16 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00017F1B 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00017F20 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
00017F25 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00017F2A 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00017F2F 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
00017F34 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00017F39 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00017F3E 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
00017F43 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00017F48 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00017F4D 0001 0046 74               	dc.b $0, $1, $0, $46, $74
00017F52 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
00017F57 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00017F5C 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00017F61 2005 0004 28               	dc.b $20, $5, $0, $4, $28
00017F66 0F                         Map_ca8f_334: 	dc.b $F
00017F67 F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00017F6C F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00017F71 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
00017F76 F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00017F7B F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00017F80 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
00017F85 F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00017F8A F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00017F8F F805 0042 00               	dc.b $F8, $5, $0, $42, $0
00017F94 F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00017F99 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00017F9E F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
00017FA3 F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00017FA8 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00017FAD F805 0004 70               	dc.b $F8, $5, $0, $4, $70
00017FB2 08                         Map_ca8f_380: 	dc.b $8
00017FB3 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
00017FB8 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
00017FBD 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
00017FC2 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
00017FC7 3005 0000 08               	dc.b $30, $5, $0, $0, $8
00017FCC 3005 0004 18               	dc.b $30, $5, $0, $4, $18
00017FD1 3001 0046 28               	dc.b $30, $1, $0, $46, $28
00017FD6 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
00017FDB 20                         Map_ca8f_3A9: 	dc.b $20
00017FDC ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
00017FE1 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
00017FE6 ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
00017FEB ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
00017FF0 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
00017FF5 ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
00017FFA ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
00017FFF FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
00018004 FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
00018009 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
0001800E FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
00018013 FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00018018 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
0001801D 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
00018022 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
00018027 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
0001802C 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00018031 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
00018036 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
0001803B 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00018040 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
00018045 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
0001804A 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
0001804F 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
00018054 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00018059 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
0001805E 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
00018063 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018068 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
0001806D 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
00018072 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
00018077 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
0001807C                            	even
0001807C                            	even
0001807C                            
0001807C                            ; ===========================================================================
0001807C                            ; ---------------------------------------------------------------------------
0001807C                            ; Object 3D - matthew boss - modified by GK89
0001807C                            ; ---------------------------------------------------------------------------
0001807C                            
0001807C                            Obj3D:					; XREF: Obj_Index
0001807C 7000                       		moveq	#0,d0
0001807E 1028 0024                  		move.b	$24(a0),d0
00018082 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00018086 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001808A                            ; ===========================================================================
0001808A 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001808C 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001808E 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018090 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018092                            
00018092 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018094 0401                       		dc.b 4,	1
00018096 0607                       		dc.b 6,	7
00018098                            ; ===========================================================================
00018098                            
00018098                            Obj3D_Main:				; XREF: Obj3D_Index
00018098 45F9 0001 8092             		lea	(Obj3D_ObjData).l,a2
0001809E 2248                       		movea.l	a0,a1
000180A0 7202                       		moveq	#2,d1
000180A2 6000                       		bra.s	Obj3D_LoadBoss
000180A4                            ; ===========================================================================
000180A4                            
000180A4                            Obj3D_Loop:
000180A4 4EB9 0000 E2FC             		jsr	SingleObjLoad2
000180AA 6600                       		bne.s	loc_17772
000180AC                            
000180AC                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
000180AC 135A 0024                  		move.b	(a2)+,$24(a1)
000180B0 12BC 003D                  		move.b	#$3D,0(a1)
000180B4 3368 0008 0008             		move.w	8(a0),8(a1)
000180BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000180C0 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000180C8 337C 0400 0002             		move.w	#$400,2(a1)
000180CE 137C 0004 0001             		move.b	#4,1(a1)
000180D4 137C 0020 0019             		move.b	#$20,$19(a1)
000180DA 137C 0003 0018             		move.b	#3,$18(a1)
000180E0 135A 001C                  		move.b	(a2)+,$1C(a1)
000180E4 2348 0034                  		move.l	a0,$34(a1)
000180E8 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000180EC                            
000180EC                            loc_17772:
000180EC 3168 0008 0030             		move.w	8(a0),$30(a0)
000180F2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000180F8 117C 000F 0020             		move.b	#$F,$20(a0)
000180FE 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018104                            
00018104                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018104 7000                       		moveq	#0,d0
00018106 1028 0025                  		move.b	$25(a0),d0
0001810A 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
0001810E 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00018112 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018118 4EB9 0000 AEDA             		jsr	AnimateSprite
0001811E 1028 0022                  		move.b	$22(a0),d0
00018122 0200 0003                  		andi.b	#3,d0
00018126 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001812C 8128 0001                  		or.b	d0,1(a0)
00018130 4EF9 0000 DE60             		jmp	DisplaySprite
00018136                            ; ===========================================================================
00018136 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00018138 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001813A 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001813C 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001813E 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018140 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00018142 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00018144                            ; ===========================================================================
00018144                            
00018144                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00018144 4EB9 0000 0000             		jsr    Obj3D_ShipMove
0001814A 6100 0000                  		bsr.w	BossMove
0001814E 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00018154 6600                       		bne.s	loc_177E6
00018156 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001815C 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018160                            
00018160                            loc_177E6:
00018160 1028 003F                  		move.b	$3F(a0),d0
00018164 4EB9 0000 2CFE             		jsr	(CalcSine).l
0001816A EC40                       		asr.w	#6,d0
0001816C D068 0038                  		add.w	$38(a0),d0
00018170 3140 000C                  		move.w	d0,$C(a0)
00018174 3168 0030 0008             		move.w	$30(a0),8(a0)
0001817A 5428 003F                  		addq.b	#2,$3F(a0)
0001817E 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018184 6400                       		bcc.s	locret_1784A
00018186 4A28 0022                  		tst.b	$22(a0)
0001818A 6B00                       		bmi.s	loc_1784C
0001818C 4A28 0020                  		tst.b	$20(a0)
00018190 6600                       		bne.s	locret_1784A
00018192 4A28 003E                  		tst.b	$3E(a0)
00018196 6600                       		bne.s	Obj3D_ShipFlash
00018198 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001819E 303C 00AC                  		move.w	#$AC,d0
000181A2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
000181A8                            
000181A8                            Obj3D_ShipFlash:
000181A8 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
000181AC 7000                       		moveq	#0,d0		; move 0 (black) to d0
000181AE 4A51                       		tst.w	(a1)
000181B0 6600                       		bne.s	loc_1783C
000181B2 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000181B6                            
000181B6                            loc_1783C:
000181B6 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000181B8 5328 003E                  		subq.b	#1,$3E(a0)
000181BC 6600                       		bne.s	locret_1784A
000181BE 117C 000F 0020             		move.b	#$F,$20(a0)
000181C4                            
000181C4                            locret_1784A:
000181C4 4E75                       		rts	
000181C6                            ; ===========================================================================
000181C6                            
000181C6                            loc_1784C:				; XREF: loc_177E6
000181C6 7064                       		moveq	#100,d0
000181C8 6100 0000                  		bsr.w	AddPoints
000181CC 117C 0008 0025             		move.b	#8,$25(a0)
000181D2 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000181D8 4E75                       		rts	
000181DA                            
000181DA                            ; ---------------------------------------------------------------------------
000181DA                            ; Defeated boss	subroutine
000181DA                            ; ---------------------------------------------------------------------------
000181DA                            
000181DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000181DA                            
000181DA                            
000181DA                            BossDefeated:
000181DA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000181DE 0200 0007                  		andi.b	#7,d0
000181E2 6600                       		bne.s	locret_178A2
000181E4 4EB9 0000 E2E6             		jsr	SingleObjLoad
000181EA 6600                       		bne.s	locret_178A2
000181EC 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000181F0 3368 0008 0008             		move.w	8(a0),8(a1)
000181F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000181FC 4EB9 0000 2CD8             		jsr	(RandomNumber).l
00018202 3200                       		move.w	d0,d1
00018204 7200                       		moveq	#0,d1
00018206 1200                       		move.b	d0,d1
00018208 E409                       		lsr.b	#2,d1
0001820A 0441 0020                  		subi.w	#$20,d1
0001820E D369 0008                  		add.w	d1,8(a1)
00018212 E048                       		lsr.w	#8,d0
00018214 E608                       		lsr.b	#3,d0
00018216 D169 000C                  		add.w	d0,$C(a1)
0001821A                            
0001821A                            locret_178A2:
0001821A 4E75                       		rts	
0001821C                            ; End of function BossDefeated
0001821C                            
0001821C                            ; ---------------------------------------------------------------------------
0001821C                            ; Subroutine to	move a boss
0001821C                            ; ---------------------------------------------------------------------------
0001821C                            
0001821C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001821C                            
0001821C                            
0001821C                            BossMove:
0001821C 2428 0030                  		move.l	$30(a0),d2
00018220 2628 0038                  		move.l	$38(a0),d3
00018224 3028 0010                  		move.w	$10(a0),d0
00018228 48C0                       		ext.l	d0
0001822A E180                       		asl.l	#8,d0
0001822C D480                       		add.l	d0,d2
0001822E 3028 0012                  		move.w	$12(a0),d0
00018232 48C0                       		ext.l	d0
00018234 E180                       		asl.l	#8,d0
00018236 D680                       		add.l	d0,d3
00018238 2142 0030                  		move.l	d2,$30(a0)
0001823C 2143 0038                  		move.l	d3,$38(a0)
00018240 4E75                       		rts	
00018242                            ; End of function BossMove
00018242                            
00018242                            ; ===========================================================================
00018242                            
00018242                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00018242 6100 FFD8                  		bsr.w	BossMove
00018246 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001824C 6600                       		bne.s	loc_17916
0001824E 317C 0000 0010             		move.w	#0,$10(a0)
00018254 317C 0000 0012             		move.w	#0,$12(a0)
0001825A 5428 0025                  		addq.b	#2,$25(a0)
0001825E 4EB9 0000 E2FC             		jsr	SingleObjLoad2
00018264 6600                       		bne.s	loc_17910
00018266 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
0001826A 3368 0030 0008             		move.w	$30(a0),8(a1)
00018270 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018276 2348 0034                  		move.l	a0,$34(a1)
0001827A                            
0001827A                            loc_17910:
0001827A 317C 0077 003C             		move.w	#$77,$3C(a0)
00018280                            
00018280                            loc_17916:
00018280 6000 FEDE                  		bra.w	loc_177E6
00018284                            ; ===========================================================================
00018284                            
00018284                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018284 5368 003C                  		subq.w	#1,$3C(a0)
00018288 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
0001828E 5428 0025                  		addq.b	#2,$25(a0)
00018292 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018298 3038 D008                  		move.w	($FFFFD008).w,d0	 
0001829C 9068 0008                  		sub.w	8(a0),d0		 
000182A0 6A00                       		bpl.s	Obj3D_left			 
000182A2 08A8 0000 0022             		bclr	#0,$22(a0)		 
000182A8 6000                       		bra.s	Obj3D_right		 
000182AA 08A8 0005 0022             		bclr	#5,$22(a0)
000182B0 4EB9 0000 0000              		jsr     loc_17950
000182B6 4E75                       		rts
000182B8                            ; ===========================================================================
000182B8                            
000182B8                            Obj3D_right:
000182B8 317C FF00 0010             		move.w	#-$100,$10(a0)	
000182BE 4E75                       		Rts
000182C0                            
000182C0                            Obj3D_left:
000182C0 317C 0100 0010             		move.w	#$100,$10(a0)	 
000182C6 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
000182CC 6600                       		bne.s	RTSboss  	; if not, branch
000182CE 0868 0000 0022              		bchg	#0,$22(a0)
000182D4                            
000182D4                            RTSboss:	    
000182D4 4E75                       		rts
000182D6                             ; ===========================================================================
000182D6                            
000182D6                            Obj3D_UpStuff:
000182D6 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
000182DA 9068 000C                  		sub.w	$C(a0),d0		 
000182DE 6A00                       		bpl.s	Obj3D_down			 
000182E0 6000                        		bra.s	Obj3D_up		 
000182E2 08A8 0005 0022             		bclr	#5,$22(a0)
000182E8                             
000182E8                            Obj3D_up:		
000182E8 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
000182EE 4E75                        	    rts
000182F0                            
000182F0                            Obj3D_down:
000182F0 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
000182F6                            
000182F6                            loc_17950:
000182F6 6000 FE68                  		bra.w	loc_177E6
000182FA                            ; ===========================================================================
000182FA                            
000182FA                            loc_17954:				; XREF: Obj3D_ShipIndex
000182FA 5368 003C                  		subq.w	#1,$3C(a0)
000182FE 6B00                       		bmi.s	loc_17960
00018300 6100 FF1A                  		bsr.w	BossMove
00018304 6000                       		bra.s	loc_17976
00018306                            ; ===========================================================================
00018306                            
00018306                            loc_17960:
00018306 0868 0000 0022             		bchg	#0,$22(a0)
0001830C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018312 5528 0025                  		subq.b	#2,$25(a0)
00018316 317C 0000 0010             		move.w	#0,$10(a0)
0001831C                            
0001831C                            loc_17976:
0001831C 6000 FE42                  		bra.w	loc_177E6
00018320                            ; ===========================================================================
00018320                            
00018320                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018320 5368 003C                  		subq.w	#1,$3C(a0)
00018324 6B00                       		bmi.s	loc_17984
00018326 6000 FEB2                  		bra.w	BossDefeated
0001832A                            ; ===========================================================================
0001832A                            
0001832A                            loc_17984:
0001832A 08E8 0000 0022             		bset	#0,$22(a0)
00018330 08A8 0007 0022             		bclr	#7,$22(a0)
00018336 4268 0010                  		clr.w	$10(a0)
0001833A 5428 0025                  		addq.b	#2,$25(a0)
0001833E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018344 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018348 6600                       		bne.s	locret_179AA
0001834A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018350 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018356 6000 FE82                  		bra.w	BossDefeated
0001835A                            
0001835A                            locret_179AA:
0001835A 4E75                       		rts	
0001835C                            ; ===========================================================================
0001835C                            
0001835C                            loc_179AC:				; XREF: Obj3D_ShipIndex
0001835C 4EB9 0000 DDC8             		jsr ObjectFall		
00018362 5268 003C                  		addq.w	#1,$3C(a0)
00018366 6700                       		beq.s	loc_179BC
00018368 6A00                       		bpl.s	loc_179C2
0001836A 6000                       		bra.s	loc_179EE
0001836C                            ; ===========================================================================
0001836C                            
0001836C                            loc_179BC:
0001836C 4268 0012                  		clr.w	$12(a0)
00018370 6000                       		bra.s	loc_179EE
00018372                            ; ===========================================================================
00018372                            
00018372                            loc_179C2:
00018372 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018378 6500                       		bcs.s	loc_179DA
0001837A 6700                       		beq.s	loc_179E0
0001837C 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018382 6500                       		bcs.s	loc_179EE
00018384 5428 0025                  		addq.b	#2,$25(a0)
00018388 6000                       		bra.s	loc_179EE
0001838A                            ; ===========================================================================
0001838A                            
0001838A                            loc_179DA:
0001838A 5168 0012                  		subq.w	#8,$12(a0)
0001838E 6000                       		bra.s	loc_179EE
00018390 6000 FE48                  		bra.w	BossDefeated
00018394                            ; ===========================================================================
00018394                            
00018394                            loc_179E0:
00018394 4268 0012                  		clr.w	$12(a0)
00018398 303C 0081                  		move.w	#$81,d0
0001839C 4EB9 0000 15CC             		jsr	(PlaySound).l	; play GHZ music
000183A2                            
000183A2                            loc_179EE:
000183A2 6100 FE78                  		bsr.w	BossMove
000183A6 6000 FDB8                  		bra.w	loc_177E6
000183AA                            ; ===========================================================================
000183AA                            
000183AA                            loc_179F6:				; XREF: Obj3D_ShipIndex
000183AA 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
000183B0 6700                       		beq.s	loc_17A10
000183B2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000183B6 6000                       		bra.s	loc_17A16
000183B8                            ; ===========================================================================
000183B8                            
000183B8                            loc_17A10:
000183B8 4A28 0001                  		tst.b	1(a0)
000183BC 6A00                       		bpl.s	Obj3D_ShipDel
000183BE                            
000183BE                            loc_17A16:
000183BE 6100 FE5C                  		bsr.w	BossMove
000183C2 6000 FD9C                  		bra.w	loc_177E6
000183C6                            ; ===========================================================================
000183C6                            
000183C6                            Obj3D_ShipDel:
000183C6 4EF9 0000 DE9C             		jmp	DeleteObject
000183CC                            ; ===========================================================================
000183CC                            
000183CC                            Obj3D_FaceMain:				; XREF: Obj3D_Index
000183CC 7000                       		moveq	#0,d0
000183CE 7201                       		moveq	#1,d1
000183D0 2268 0034                  		movea.l	$34(a0),a1
000183D4 1029 0025                  		move.b	$25(a1),d0
000183D8 5900                       		subq.b	#4,d0
000183DA 6600                       		bne.s	loc_17A3E
000183DC 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
000183E2 6600                       		bne.s	loc_17A46
000183E4 7204                       		moveq	#4,d1
000183E6                            
000183E6                            loc_17A3E:
000183E6 5D00                       		subq.b	#6,d0
000183E8 6B00                       		bmi.s	loc_17A46
000183EA 720A                       		moveq	#$A,d1
000183EC 6000                       		bra.s	loc_17A5A
000183EE                            ; ===========================================================================
000183EE                            
000183EE                            loc_17A46:
000183EE 4A29 0020                  		tst.b	$20(a1)
000183F2 6600                       		bne.s	loc_17A50
000183F4 7205                       		moveq	#5,d1
000183F6 6000                       		bra.s	loc_17A5A
000183F8                            ; ===========================================================================
000183F8                            
000183F8                            loc_17A50:
000183F8 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000183FE 6500                       		bcs.s	loc_17A5A
00018400 7204                       		moveq	#4,d1
00018402                            
00018402                            loc_17A5A:
00018402 1141 001C                  		move.b	d1,$1C(a0)
00018406 5500                       		subq.b	#2,d0
00018408 6600                       		bne.s	Obj3D_FaceDisp
0001840A 117C 0006 001C             		move.b	#6,$1C(a0)
00018410 4A28 0001                  		tst.b	1(a0)
00018414 6A00                       		bpl.s	Obj3D_FaceDel
00018416                            
00018416                            Obj3D_FaceDisp:
00018416 6000                       		bra.s	Obj3D_Display
00018418                            ; ===========================================================================
00018418                            
00018418                            Obj3D_FaceDel:
00018418 4EF9 0000 DE9C             		jmp	DeleteObject
0001841E                            ; ===========================================================================
0001841E                            
0001841E                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001841E 117C 0007 001C             		move.b	#7,$1C(a0)
00018424 2268 0034                  		movea.l	$34(a0),a1
00018428 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001842E 6600                       		bne.s	loc_17A96
00018430 117C 000B 001C             		move.b	#$B,$1C(a0)
00018436 4A28 0001                  		tst.b	1(a0)
0001843A 6A00                       		bpl.s	Obj3D_FlameDel
0001843C 6000                       		bra.s	Obj3D_FlameDisp
0001843E                            ; ===========================================================================
0001843E                            
0001843E                            loc_17A96:
0001843E 3029 0010                  		move.w	$10(a1),d0
00018442 6700                       		beq.s	Obj3D_FlameDisp
00018444 117C 0008 001C             		move.b	#8,$1C(a0)
0001844A                            
0001844A                            Obj3D_FlameDisp:
0001844A 6000                       		bra.s	Obj3D_Display
0001844C                            ; ===========================================================================
0001844C                            
0001844C                            Obj3D_FlameDel:
0001844C 4EF9 0000 DE9C             		jmp	DeleteObject
00018452                            ; ===========================================================================
00018452                            
00018452                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00018452 2268 0034                  		movea.l	$34(a0),a1
00018456 3169 0008 0008             		move.w	8(a1),8(a0)
0001845C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018462 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018468 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
0001846E 4EB9 0000 AEDA             		jsr	AnimateSprite
00018474 1028 0022                  		move.b	$22(a0),d0
00018478 0200 0003                  		andi.b	#3,d0
0001847C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018482 8128 0001                  		or.b	d0,1(a0)
00018486 4EF9 0000 DE60             		jmp	DisplaySprite
0001848C                            ; ===========================================================================
0001848C                            ; ---------------------------------------------------------------------------
0001848C                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
0001848C                            ; ---------------------------------------------------------------------------
0001848C                            
0001848C                            Obj48:					; XREF: Obj_Index
0001848C 7000                       		moveq	#0,d0
0001848E 1028 0024                  		move.b	$24(a0),d0
00018492 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018496 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
0001849A                            ; ===========================================================================
0001849A 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
0001849C 0000                       		dc.w Obj48_Base-Obj48_Index
0001849E 0000                       		dc.w Obj48_Display2-Obj48_Index
000184A0 0000                       		dc.w loc_17C68-Obj48_Index
000184A2 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
000184A4                            ; ===========================================================================
000184A4                            
000184A4                            Obj48_Main:				; XREF: Obj48_Index
000184A4 5428 0024                  		addq.b	#2,$24(a0)
000184A8 317C 4080 0026             		move.w	#$4080,$26(a0)
000184AE 317C FE00 003E             		move.w	#-$200,$3E(a0)
000184B4 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
000184BC 317C 046C 0002             		move.w	#$46C,2(a0)
000184C2 45E8 0028                  		lea	$28(a0),a2
000184C6 14FC 0000                  		move.b	#0,(a2)+
000184CA 7205                       		moveq	#5,d1
000184CC 2248                       		movea.l	a0,a1
000184CE 6000                       		bra.s	loc_17B60
000184D0                            ; ===========================================================================
000184D0                            
000184D0                            Obj48_MakeLinks:
000184D0 4EB9 0000 E2FC             		jsr	SingleObjLoad2
000184D6 6600                       		bne.s	Obj48_MakeBall
000184D8 3368 0008 0008             		move.w	8(a0),8(a1)
000184DE 3368 000C 000C             		move.w	$C(a0),$C(a1)
000184E4 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
000184E8 137C 0006 0024             		move.b	#6,$24(a1)
000184EE 237C 0000 8292 0004        		move.l	#Map_obj15,4(a1)
000184F6 337C 0380 0002             		move.w	#$380,2(a1)
000184FC 137C 0001 001A             		move.b	#1,$1A(a1)
00018502 5228 0028                  		addq.b	#1,$28(a0)
00018506                            
00018506                            loc_17B60:				; XREF: Obj48_Main
00018506 3A09                       		move.w	a1,d5
00018508 0445 D000                  		subi.w	#$D000,d5
0001850C EC4D                       		lsr.w	#6,d5
0001850E 0245 007F                  		andi.w	#$7F,d5
00018512 14C5                       		move.b	d5,(a2)+
00018514 137C 0004 0001             		move.b	#4,1(a1)
0001851A 137C 0008 0019             		move.b	#8,$19(a1)
00018520 137C 0006 0018             		move.b	#6,$18(a1)
00018526 2368 0034 0034             		move.l	$34(a0),$34(a1)
0001852C 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018530                            
00018530                            Obj48_MakeBall:
00018530 137C 0008 0024             		move.b	#8,$24(a1)
00018536 237C 0000 8882 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
0001853E 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018544 137C 0001 001A             		move.b	#1,$1A(a1)
0001854A 137C 0005 0018             		move.b	#5,$18(a1)
00018550 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018556 4E75                       		rts	
00018558                            ; ===========================================================================
00018558                            
00018558 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
0001855E                            
0001855E                            ; ===========================================================================
0001855E                            
0001855E                            Obj48_Base:				; XREF: Obj48_Index
0001855E 47F9 0001 8558             		lea	(Obj48_PosData).l,a3
00018564 45E8 0028                  		lea	$28(a0),a2
00018568 7C00                       		moveq	#0,d6
0001856A 1C1A                       		move.b	(a2)+,d6
0001856C                            
0001856C                            loc_17BC6:
0001856C 7800                       		moveq	#0,d4
0001856E 181A                       		move.b	(a2)+,d4
00018570 ED4C                       		lsl.w	#6,d4
00018572 0684 00FF D000             		addi.l	#$FFD000,d4
00018578 2244                       		movea.l	d4,a1
0001857A 101B                       		move.b	(a3)+,d0
0001857C B029 003C                  		cmp.b	$3C(a1),d0
00018580 6700                       		beq.s	loc_17BE0
00018582 5229 003C                  		addq.b	#1,$3C(a1)
00018586                            
00018586                            loc_17BE0:
00018586 51CE FFE4                  		dbf	d6,loc_17BC6
0001858A                            
0001858A B029 003C                  		cmp.b	$3C(a1),d0
0001858E 6600                       		bne.s	loc_17BFA
00018590 2268 0034                  		movea.l	$34(a0),a1
00018594 0C29 0006 0025             		cmpi.b	#6,$25(a1)
0001859A 6600                       		bne.s	loc_17BFA
0001859C 5428 0024                  		addq.b	#2,$24(a0)
000185A0                            
000185A0                            loc_17BFA:
000185A0 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
000185A6 6700                       		beq.s	Obj48_Display
000185A8 5268 0032                  		addq.w	#1,$32(a0)
000185AC                            
000185AC                            Obj48_Display:
000185AC 6100 0000                  		bsr.w	sub_17C2A
000185B0 1028 0026                  		move.b	$26(a0),d0
000185B4 4EB9 0000 8204             		jsr	(Obj15_Move2).l
000185BA 4EF9 0000 DE60             		jmp	DisplaySprite
000185C0                            ; ===========================================================================
000185C0                            
000185C0                            Obj48_Display2:				; XREF: Obj48_Index
000185C0 6100 0000                  		bsr.w	sub_17C2A
000185C4 4EB9 0000 81C4             		jsr	(Obj48_Move).l
000185CA 4EF9 0000 DE60             		jmp	DisplaySprite
000185D0                            
000185D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000185D0                            
000185D0                            
000185D0                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
000185D0 2268 0034                  		movea.l	$34(a0),a1
000185D4 0628 0020 001B             		addi.b	#$20,$1B(a0)
000185DA 6400                       		bcc.s	loc_17C3C
000185DC 0868 0000 001A             		bchg	#0,$1A(a0)
000185E2                            
000185E2                            loc_17C3C:
000185E2 3169 0008 003A             		move.w	8(a1),$3A(a0)
000185E8 3029 000C                  		move.w	$C(a1),d0
000185EC D068 0032                  		add.w	$32(a0),d0
000185F0 3140 0038                  		move.w	d0,$38(a0)
000185F4 1169 0022 0022             		move.b	$22(a1),$22(a0)
000185FA 4A29 0022                  		tst.b	$22(a1)
000185FE 6A00                       		bpl.s	locret_17C66
00018600 10BC 003F                  		move.b	#$3F,0(a0)
00018604 117C 0000 0024             		move.b	#0,$24(a0)
0001860A                            
0001860A                            locret_17C66:
0001860A 4E75                       		rts	
0001860C                            ; End of function sub_17C2A
0001860C                            
0001860C                            ; ===========================================================================
0001860C                            
0001860C                            loc_17C68:				; XREF: Obj48_Index
0001860C 2268 0034                  		movea.l	$34(a0),a1
00018610 4A29 0022                  		tst.b	$22(a1)
00018614 6A00                       		bpl.s	Obj48_Display3
00018616 10BC 003F                  		move.b	#$3F,0(a0)
0001861A 117C 0000 0024             		move.b	#0,$24(a0)
00018620                            
00018620                            Obj48_Display3:
00018620 4EF9 0000 DE60             		jmp	DisplaySprite
00018626                            ; ===========================================================================
00018626                            
00018626                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018626 7000                       		moveq	#0,d0
00018628 4A28 001A                  		tst.b	$1A(a0)
0001862C 6600                       		bne.s	Obj48_Vanish
0001862E 5200                       		addq.b	#1,d0
00018630                            
00018630                            Obj48_Vanish:
00018630 1140 001A                  		move.b	d0,$1A(a0)
00018634 2268 0034                  		movea.l	$34(a0),a1
00018638 4A29 0022                  		tst.b	$22(a1)
0001863C 6A00                       		bpl.s	Obj48_Display4
0001863E 117C 0000 0020             		move.b	#0,$20(a0)
00018644 6100 FB94                  		bsr.w	BossDefeated
00018648 5328 003C                  		subq.b	#1,$3C(a0)
0001864C 6A00                       		bpl.s	Obj48_Display4
0001864E 10BC 003F                  		move.b	#$3F,(a0)
00018652 117C 0000 0024             		move.b	#0,$24(a0)
00018658                            
00018658                            Obj48_Display4:
00018658 4EF9 0000 DE60             		jmp	DisplaySprite
0001865E                            ; ===========================================================================
0001865E                            Ani_Eggman:
0001865E                            	include "_anim\Eggman.asm"
0001865E                            ; ---------------------------------------------------------------------------
0001865E                            ; Animation script - Eggman (bosses)
0001865E                            ; ---------------------------------------------------------------------------
0001865E 0000                       		dc.w byte_17CD4-Ani_Eggman
00018660 0000                       		dc.w byte_17CD8-Ani_Eggman
00018662 0000                       		dc.w byte_17CDC-Ani_Eggman
00018664 0000                       		dc.w byte_17CE0-Ani_Eggman
00018666 0000                       		dc.w byte_17CE4-Ani_Eggman
00018668 0000                       		dc.w byte_17CE8-Ani_Eggman
0001866A 0000                       		dc.w byte_17CEC-Ani_Eggman
0001866C 0000                       		dc.w byte_17CF0-Ani_Eggman
0001866E 0000                       		dc.w byte_17CF4-Ani_Eggman
00018670 0000                       		dc.w byte_17CF8-Ani_Eggman
00018672 0000                       		dc.w byte_17CFC-Ani_Eggman
00018674 0000                       		dc.w byte_17D00-Ani_Eggman
00018676 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
0001867A 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
0001867E 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018682 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018686 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
0001868A 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
0001868E 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00018692 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00018696 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
0001869A 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
0001869E 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
000186A2 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
000186AE                            		even
000186AE                            		even
000186AE                            Ani_TetoB:
000186AE                            	include "_anim\TetoB.asm"
000186AE                            ; ---------------------------------------------------------------------------
000186AE                            ; Animation script - Eggman (bosses)
000186AE                            ; ---------------------------------------------------------------------------
000186AE 0000                       		dc.w spin-Ani_TetoB
000186B0 0000                       		dc.w static-Ani_TetoB
000186B2 0000                       		dc.w static2-Ani_TetoB
000186B4 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
000186BB 0500 FF                    static:	dc.b 5,	0, $FF
000186BE 0501 FF                    static2:	dc.b 5,	1, $FF
000186C2 00                         		even
000186C2 00                         		even
000186C2                            ; ---------------------------------------------------------------------------
000186C2                            ; Sprite mappings - Eggman (boss levels)
000186C2                            ; ---------------------------------------------------------------------------
000186C2                            Map_Eggman:
000186C2                            	include "_maps\Eggman.asm"
000186C2                            Map_dc7e:
000186C2 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
000186C4 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
000186C6 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
000186C8 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
000186CA 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
000186CC 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
000186CE 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
000186D0 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
000186D2 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
000186D4 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
000186D6 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
000186D8 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
000186DA 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
000186DC 06                         Map_dc7e_1A: 	dc.b $6
000186DD EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
000186E2 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
000186E7 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
000186EC FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
000186F1 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
000186F6 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
000186FB 02                         Map_dc7e_39: 	dc.b $2
000186FC E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00018701 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00018706 02                         Map_dc7e_44: 	dc.b $2
00018707 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001870C EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018711 03                         Map_dc7e_4F: 	dc.b $3
00018712 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00018717 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
0001871C EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00018721 03                         Map_dc7e_5F: 	dc.b $3
00018722 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00018727 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
0001872C EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00018731 03                         Map_dc7e_6F: 	dc.b $3
00018732 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00018737 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
0001873C EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018741 03                         Map_dc7e_7F: 	dc.b $3
00018742 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00018747 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
0001874C EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00018751 04                         Map_dc7e_8F: 	dc.b $4
00018752 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00018757 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
0001875C EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00018761 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00018766 01                         Map_dc7e_A4: 	dc.b $1
00018767 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
0001876C 01                         Map_dc7e_AA: 	dc.b $1
0001876D 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00018772 00                         Map_dc7e_B0: 	dc.b $0
00018773 02                         Map_dc7e_B1: 	dc.b $2
00018774 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00018779 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
0001877E 02                         Map_dc7e_BC: 	dc.b $2
0001877F F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00018784 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
0001878A 00                         	even
0001878A 00                         	even
0001878A                            
0001878A                            ; ---------------------------------------------------------------------------
0001878A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001878A                            ; ---------------------------------------------------------------------------
0001878A                            Map_BossItems:
0001878A                            	include "_maps\Boss items.asm"
0001878A                            ; ---------------------------------------------------------------------------
0001878A                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
0001878A                            ; ---------------------------------------------------------------------------
0001878A 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
0001878E 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00018792 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00018796 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
0001879A 01                         byte_17DE4:	dc.b 1
0001879B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000187A0 02                         byte_17DEA:	dc.b 2
000187A1 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
000187A6 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000187AB 00                         		dc.b 0
000187AC 01                         byte_17DF6:	dc.b 1
000187AD FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
000187B2 01                         byte_17DFC:	dc.b 1
000187B3 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
000187B8 01                         byte_17E02:	dc.b 1
000187B9 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
000187BE 04                         byte_17E08:	dc.b 4
000187BF F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
000187C4 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
000187C9 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
000187CE 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
000187D3 00                         		dc.b 0
000187D4 02                         byte_17E1E:	dc.b 2
000187D5 0005 0017 00               		dc.b 0,	5, 0, $17, 0
000187DA 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
000187DF 00                         		dc.b 0
000187E0 02                         byte_17E2A:	dc.b 2
000187E1 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
000187E6 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
000187EC 00                         		even
000187EC 00                         		even
000187EC                            
000187EC                            ; ===========================================================================
000187EC                            ; ---------------------------------------------------------------------------
000187EC                            ; Object 77 - Fatass teto boss fight in LZ -STDH
000187EC                            ; ---------------------------------------------------------------------------
000187EC                            
000187EC                            
000187EC                            obj77:					; XREF: Obj_Index
000187EC 7000                       		moveq	#0,d0
000187EE 1028 0024                  		move.b	$24(a0),d0
000187F2 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
000187F6 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
000187FA                            ; ===========================================================================
000187FA 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
000187FC 0000                       		dc.w obj77_ShipMain-obj77_Index
000187FE 0000                       		dc.w obj77_FaceMain-obj77_Index
00018800 0000                       		dc.w obj77_FlameMain-obj77_Index
00018802                            
00018802 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
00018804 0401                       		dc.b 4,	1
00018806 0607                       		dc.b 6,	7
00018808                            ; ===========================================================================
00018808                            
00018808                            obj77_Main:				; XREF: obj77_Index
00018808 45F9 0001 8802             		lea	(obj77_ObjData).l,a2
0001880E 2248                       		movea.l	a0,a1
00018810 7202                       		moveq	#2,d1
00018812 6000                       		bra.s	obj77_LoadBoss
00018814                            ; ===========================================================================
00018814                            
00018814                            obj77_Loop:
00018814 4EB9 0000 E2FC             		jsr	SingleObjLoad2
0001881A 6600                       		bne.s	loc2_17772
0001881C                            
0001881C                            obj77_LoadBoss:				; XREF: obj77_Main
0001881C 135A 0024                  		move.b	(a2)+,$24(a1)
00018820 12BC 0077                  		move.b	#$77,0(a1)
00018824 3368 0008 0008             		move.w	8(a0),8(a1)
0001882A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018830 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
00018838 337C 0400 0002             		move.w	#$400,2(a1)
0001883E 137C 0004 0001             		move.b	#4,1(a1)
00018844 137C 0020 0019             		move.b	#$20,$19(a1)
0001884A 137C 0003 0018             		move.b	#3,$18(a1)
00018850 135A 001C                  		move.b	(a2)+,$1C(a1)
00018854 2348 0034                  		move.l	a0,$34(a1)
00018858 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
0001885C                            
0001885C                            loc2_17772:
0001885C 3168 0008 0030             		move.w	8(a0),$30(a0)
00018862 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018868 117C 000F 0020             		move.b	#$F,$20(a0)
0001886E 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018874                            
00018874                            obj77_ShipMain:				; XREF: obj77_Index
00018874 7000                       		moveq	#0,d0
00018876 1028 0025                  		move.b	$25(a0),d0
0001887A 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
0001887E 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
00018882 43F9 0001 86AE             		lea	(Ani_TetoB).l,a1
00018888 4EB9 0000 AEDA             		jsr	AnimateSprite
0001888E 1028 0022                  		move.b	$22(a0),d0
00018892 0200 0003                  		andi.b	#3,d0
00018896 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001889C 8128 0001                  		or.b	d0,1(a0)
000188A0 4EF9 0000 DE60             		jmp	DisplaySprite
000188A6                            ; ===========================================================================
000188A6 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
000188A8 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
000188AA 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
000188AC 0000                       		dc.w loc2_17954-obj77_ShipIndex
000188AE 0000                       		dc.w fatassruns-obj77_ShipIndex		
000188B0 0000                       		dc.w loc2_1797A-obj77_ShipIndex
000188B2 0000                       		dc.w loc2_179AC-obj77_ShipIndex
000188B4 0000                       		dc.w loc2_179F6-obj77_ShipIndex
000188B6                            ; ===========================================================================
000188B6                            
000188B6                            obj77_ShipStart:			; XREF: obj77_ShipIndex
000188B6                            	;	move.w	#$100,$12(a0)	; move ship down
000188B6 6100 F964                  		bsr.w	BossMove
000188BA 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
000188C0 6600                       		bne.s	loc2_177E6
000188C2 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000188C8 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
000188CC                            
000188CC                            loc2_177E6:
000188CC                            ;		move.b	$3F(a0),d0
000188CC                            ;		jsr	(CalcSine).l
000188CC EC40                       		asr.w	#6,d0
000188CE D068 0038                  		add.w	$38(a0),d0
000188D2 3140 000C                  		move.w	d0,$C(a0)
000188D6 3168 0030 0008             		move.w	$30(a0),8(a0)
000188DC 5428 003F                  		addq.b	#2,$3F(a0)
000188E0 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
000188E6 6400                       		bcc.s	locret_1784A2
000188E8 4A28 0022                  		tst.b	$22(a0)
000188EC 6B00                       		bmi.s	loc2_1784C
000188EE 4A28 0020                  		tst.b	$20(a0)
000188F2 6600                       		bne.s	locret_1784A2
000188F4 4A28 003E                  		tst.b	$3E(a0)
000188F8 6600                       		bne.s	obj77_ShipFlash
000188FA 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00018900 303C 00AC                  		move.w	#$AC,d0
00018904 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001890A                            
0001890A                            obj77_ShipFlash:
0001890A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001890E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018910 4A51                       		tst.w	(a1)
00018912 6600                       		bne.s	loc2_1783C
00018914 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018918                            
00018918                            loc2_1783C:
00018918 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001891A 5328 003E                  		subq.b	#1,$3E(a0)
0001891E 6600                       		bne.s	locret_1784A2
00018920 117C 000F 0020             		move.b	#$F,$20(a0)
00018926                            
00018926                            locret_1784A2:
00018926 4E75                       		rts	
00018928                            ; ===========================================================================
00018928                            
00018928                            loc2_1784C:				; XREF: loc2_177E6
00018928 7064                       		moveq	#100,d0
0001892A 6100 0000                  		bsr.w	AddPoints
0001892E 117C 000A 0025             		move.b	#$A,$25(a0)
00018934 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001893A 4E75                       		rts	
0001893C                            ; ===========================================================================
0001893C                            
0001893C                            obj77_MakeBall:				; XREF: obj77_ShipIndex
0001893C 317C FF00 0010             		move.w	#-$100,$10(a0)
00018942 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
00018948 6100 F8D2                  		bsr.w	BossMove
0001894C 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
00018952 6600                       		bne.s	loc2_17916
00018954 317C 0000 0010             		move.w	#0,$10(a0)
0001895A 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
00018960 317C 0000 0012             		move.w	#0,$12(a0)
00018966 5428 0025                  		addq.b	#2,$25(a0)
0001896A                            
0001896A                            loc2_17910:
0001896A 317C 0077 003C             		move.w	#$77,$3C(a0)
00018970                            
00018970                            loc2_17916:
00018970 6000 FF5A                  		bra.w	loc2_177E6
00018974                            ; ===========================================================================
00018974                            
00018974                            obj77_ShipMove:				; XREF: obj77_ShipIndex
00018974 6100 F8A6                  		bsr.w	BossMove
00018978 5368 003C                  		subq.w	#1,$3C(a0)
0001897C 6A00                       		bpl.s	loc2_17950 ; if time remains go here
0001897E 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
00018984 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
0001898A 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00018990 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
00018996 6600                       		bne.s	loc2_17950 ; if not branch
00018998                            
00018998                            fatass_attack:
00018998 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
0001899E 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
000189A4 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
000189AA 6600                       		bne.s	loc2_17950    ; if not you know the drill
000189AC 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000189B0 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000189B6                            
000189B6                            loc2_17950:
000189B6 6000 FF14                  		bra.w	loc2_177E6
000189BA                            ; ===========================================================================
000189BA                            
000189BA                            loc2_17954:				; XREF: obj77_ShipIndex
000189BA 6100 F860                  		bsr.w	BossMove
000189BE 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
000189C4                            		; i suck at programming
000189C4 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
000189CA 6600                       		bne.s	loc2_17976    ; if not blah blah
000189CC 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
000189D2 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
000189D6 303C 00B9                  		move.w	#$B9,d0
000189DA 4EB9 0000 15CC             		jsr	(PlaySound).l	; play the earthquake sound
000189E0                            
000189E0                            Peartobombs:	
000189E0 4EB9 0000 E2FC                		jsr	SingleObjLoad2
000189E6 6600                       		bne.s	secondone
000189E8 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
000189EC 337C 1D70 0008             		move.w	#$1D70,8(a1)
000189F2 337C 0670 000C             		move.w	#$670,$C(a1)
000189F8                            secondone:		
000189F8 4EB9 0000 E2FC                		jsr	SingleObjLoad2
000189FE 6600                       		bne.s	loc2_17976		
00018A00 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
00018A04 337C 1D20 0008             		move.w	#$1D20,8(a1)
00018A0A 337C 0670 000C             		move.w	#$670,$C(a1)
00018A10                            lastone:
00018A10 4EB9 0000 E2FC                		jsr	SingleObjLoad2
00018A16 6600                       		bne.s	loc2_17976		
00018A18 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00018A1C 337C 1E00 0008             		move.w	#$1E00,8(a1)
00018A22 337C 0670 000C             		move.w	#$670,$C(a1)
00018A28                            		
00018A28                            loc2_17976:
00018A28 6000 FEA2                  		bra.w	loc2_177E6
00018A2C                            		
00018A2C                            ; ===========================================================================
00018A2C                            Fatassruns:
00018A2C 6100 F7EE                   		bsr.w	BossMove
00018A30 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
00018A36 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
00018A3C 6600                       		bne.s	processstuff ; is not go here
00018A3E 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
00018A44 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
00018A4A 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
00018A4E 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
00018A54 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
00018A5A                            		
00018A5A                            		
00018A5A                            processstuff:
00018A5A 6000 FE70                  		bra.w	loc2_177E6
00018A5E                            ; ===========================================================================
00018A5E                            
00018A5E                            loc2_1797A:				; XREF: obj77_ShipIndex
00018A5E 5368 003C                  		subq.w	#1,$3C(a0)
00018A62 6B00                       		bmi.s	loc2_17984
00018A64 6000 F774                  		bra.w	BossDefeated
00018A68                            ; ===========================================================================
00018A68                            
00018A68                            loc2_17984:
00018A68 08E8 0000 0022             		bset	#0,$22(a0)
00018A6E 08A8 0007 0022             		bclr	#7,$22(a0)
00018A74 4268 0010                  		clr.w	$10(a0)
00018A78 5428 0025                  		addq.b	#2,$25(a0)
00018A7C 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018A82 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018A86 6600                       		bne.s	locret_179AA2
00018A88 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018A8E                            
00018A8E                            locret_179AA2:
00018A8E 4E75                       		rts	
00018A90                            ; ===========================================================================
00018A90                            
00018A90                            loc2_179AC:				; XREF: obj77_ShipIndex
00018A90 5268 003C                  		addq.w	#1,$3C(a0)
00018A94 6700                       		beq.s	loc2_179BC
00018A96 6A00                       		bpl.s	loc2_179C2
00018A98 0668 0018 0012             		addi.w	#$18,$12(a0)
00018A9E 6000                       		bra.s	loc2_179EE
00018AA0                            ; ===========================================================================
00018AA0                            
00018AA0                            loc2_179BC:
00018AA0 4268 0012                  		clr.w	$12(a0)
00018AA4 6000                       		bra.s	loc2_179EE
00018AA6                            ; ===========================================================================
00018AA6                            
00018AA6                            loc2_179C2:
00018AA6 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018AAC 6500                       		bcs.s	loc2_179DA
00018AAE 6700                       		beq.s	loc2_179E0
00018AB0 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018AB6 6500                       		bcs.s	loc2_179EE
00018AB8 5428 0025                  		addq.b	#2,$25(a0)
00018ABC 6000                       		bra.s	loc2_179EE
00018ABE                            ; ===========================================================================
00018ABE                            
00018ABE                            loc2_179DA:
00018ABE 5168 0012                  		subq.w	#8,$12(a0)
00018AC2 6000                       		bra.s	loc2_179EE
00018AC4                            ; ===========================================================================
00018AC4                            
00018AC4                            loc2_179E0:
00018AC4 4268 0012                  		clr.w	$12(a0)
00018AC8 303C 0097                  		move.w	#$97,d0
00018ACC 4EB9 0000 15CC             		jsr	(PlaySound).l	; play lz3 music
00018AD2                            
00018AD2                            loc2_179EE:
00018AD2 6100 F748                  		bsr.w	BossMove
00018AD6 6000 FDF4                  		bra.w	loc2_177E6
00018ADA                            ; ===========================================================================
00018ADA                            
00018ADA                            loc2_179F6:				; XREF: obj77_ShipIndex
00018ADA 317C 0400 0010             		move.w	#$400,$10(a0)
00018AE0 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018AE6 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00018AEC 6700                       		beq.s	loc2_17A10
00018AEE 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018AF2 6000                       		bra.s	loc2_17A16
00018AF4                            ; ===========================================================================
00018AF4                            
00018AF4                            loc2_17A10:
00018AF4 4A28 0001                  		tst.b	1(a0)
00018AF8 6A00                       		bpl.s	obj77_ShipDel
00018AFA                            
00018AFA                            loc2_17A16:
00018AFA 6100 F720                  		bsr.w	BossMove
00018AFE 6000 FDCC                  		bra.w	loc2_177E6
00018B02                            ; ===========================================================================
00018B02                            
00018B02                            obj77_ShipDel:
00018B02 4EF9 0000 DE9C             		jmp	DeleteObject
00018B08                            ; ===========================================================================
00018B08                            
00018B08                            obj77_FaceMain:				; XREF: obj77_Index
00018B08 4E75                       		rts
00018B0A                            ; ===========================================================================
00018B0A                            
00018B0A                            obj77_FlameMain:			; XREF: obj77_Index
00018B0A 4E75                       		rts
00018B0C                            ; ===========================================================================
00018B0C                            
00018B0C                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00018B0C 43F9 0001 86AE             		lea	(Ani_TetoB).l,a1
00018B12 4EB9 0000 AEDA             		jsr	AnimateSprite
00018B18 4EF9 0000 DE60             		jmp	DisplaySprite
00018B1E                            ; ---------------------------------------------------------------------------
00018B1E                            ; Sprite mappings - Fatass teto boss
00018B1E                            ; ---------------------------------------------------------------------------
00018B1E                            Map_TetoBoss:
00018B1E                            	include "_maps\tetoboss.asm"
00018B1E                            Map_f09a:
00018B1E 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00018B20 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00018B22 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
00018B24 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
00018B26 03                         Map_f09a_8: 	dc.b $3
00018B27 E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
00018B2C 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
00018B31 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
00018B36 06                         Map_f09a_18: 	dc.b $6
00018B37 EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
00018B3C 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
00018B41 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
00018B46 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
00018B4B EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
00018B50 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
00018B55 03                         Map_f09a_37: 	dc.b $3
00018B56 E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
00018B5B 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
00018B60 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
00018B65 06                         Map_f09a_47: 	dc.b $6
00018B66 ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
00018B6B 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
00018B70 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
00018B75 DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
00018B7A ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
00018B7F 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
00018B84                            	even
00018B84                            	even
00018B84                            ; ===========================================================================
00018B84                            ; ---------------------------------------------------------------------------
00018B84                            ; Object 73 - Eggman (MZ)
00018B84                            ; ---------------------------------------------------------------------------
00018B84                            
00018B84                            Obj73:					; XREF: Obj_Index
00018B84 7000                       		moveq	#0,d0
00018B86 1028 0024                  		move.b	$24(a0),d0
00018B8A 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018B8E 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00018B92                            ; ===========================================================================
00018B92 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018B94 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018B96 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018B98 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018B9A 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018B9C                            
00018B9C 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018B9F 0401 04                    		dc.b 4,	1, 4
00018BA2 0607 04                    		dc.b 6,	7, 4
00018BA5 0800 03                    		dc.b 8,	0, 3
00018BA8                            ; ===========================================================================
00018BA8                            
00018BA8                            Obj73_Main:				; XREF: Obj73_Index
00018BA8 3168 0008 0030             		move.w	8(a0),$30(a0)
00018BAE 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018BB4 117C 000F 0020             		move.b	#$F,$20(a0)
00018BBA 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018BC0 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018BC4 2248                       		movea.l	a0,a1
00018BC6 7203                       		moveq	#3,d1
00018BC8 6000                       		bra.s	Obj73_LoadBoss
00018BCA                            ; ===========================================================================
00018BCA                            
00018BCA                            Obj73_Loop:
00018BCA 4EB9 0000 E2FC             		jsr	SingleObjLoad2
00018BD0 6600                       		bne.s	Obj73_ShipMain
00018BD2 12BC 0073                  		move.b	#$73,0(a1)
00018BD6 3368 0008 0008             		move.w	8(a0),8(a1)
00018BDC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018BE2                            
00018BE2                            Obj73_LoadBoss:				; XREF: Obj73_Main
00018BE2 08A8 0000 0022             		bclr	#0,$22(a0)
00018BE8 4229 0025                  		clr.b	$25(a1)
00018BEC 135A 0024                  		move.b	(a2)+,$24(a1)
00018BF0 135A 001C                  		move.b	(a2)+,$1C(a1)
00018BF4 135A 0018                  		move.b	(a2)+,$18(a1)
00018BF8 237C 0001 86C2 0004        		move.l	#Map_Eggman,4(a1)
00018C00 337C 0400 0002             		move.w	#$400,2(a1)
00018C06 137C 0004 0001             		move.b	#4,1(a1)
00018C0C 137C 0020 0019             		move.b	#$20,$19(a1)
00018C12 2348 0034                  		move.l	a0,$34(a1)
00018C16 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018C1A                            
00018C1A                            Obj73_ShipMain:
00018C1A 7000                       		moveq	#0,d0
00018C1C 1028 0025                  		move.b	$25(a0),d0
00018C20 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
00018C24 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018C28 43F9 0001 865E             		lea	(Ani_Eggman).l,a1
00018C2E 4EB9 0000 AEDA             		jsr	AnimateSprite
00018C34 7003                       		moveq	#3,d0
00018C36 C028 0022                  		and.b	$22(a0),d0
00018C3A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018C40 8128 0001                  		or.b	d0,1(a0)
00018C44 4EF9 0000 DE60             		jmp	DisplaySprite
00018C4A                            ; ===========================================================================
00018C4A 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018C4C 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018C4E 0000                       		dc.w loc_184F6-Obj73_ShipIndex
00018C50 0000                       		dc.w loc_1852C-Obj73_ShipIndex
00018C52 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018C54                            ; ===========================================================================
00018C54                            
00018C54                            loc_18302:				; XREF: Obj73_ShipIndex
00018C54 1028 003F                  		move.b	$3F(a0),d0
00018C58 5428 003F                  		addq.b	#2,$3F(a0)
00018C5C 4EB9 0000 2CFE             		jsr	(CalcSine).l
00018C62 E440                       		asr.w	#2,d0
00018C64 3140 0012                  		move.w	d0,$12(a0)
00018C68 317C FF00 0010             		move.w	#-$100,$10(a0)
00018C6E 6100 F5AC                  		bsr.w	BossMove
00018C72 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018C78 6600                       		bne.s	loc_18334
00018C7A 5428 0025                  		addq.b	#2,$25(a0)
00018C7E 4228 0028                  		clr.b	$28(a0)
00018C82 42A8 0010                  		clr.l	$10(a0)
00018C86                            
00018C86                            loc_18334:
00018C86 4EB9 0000 2CD8             		jsr	(RandomNumber).l
00018C8C 1140 0034                  		move.b	d0,$34(a0)
00018C90                            
00018C90                            loc_1833E:
00018C90 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018C96 3168 0030 0008             		move.w	$30(a0),8(a0)
00018C9C 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00018CA2 6400                       		bcc.s	locret_18390
00018CA4 4A28 0022                  		tst.b	$22(a0)
00018CA8 6B00                       		bmi.s	loc_18392
00018CAA 4A28 0020                  		tst.b	$20(a0)
00018CAE 6600                       		bne.s	locret_18390
00018CB0 4A28 003E                  		tst.b	$3E(a0)
00018CB4 6600                       		bne.s	loc_18374
00018CB6 117C 0028 003E             		move.b	#$28,$3E(a0)
00018CBC 303C 00AC                  		move.w	#$AC,d0
00018CC0 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018CC6                            
00018CC6                            loc_18374:
00018CC6 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018CCA 7000                       		moveq	#0,d0
00018CCC 4A51                       		tst.w	(a1)
00018CCE 6600                       		bne.s	loc_18382
00018CD0 303C 0EEE                  		move.w	#$EEE,d0
00018CD4                            
00018CD4                            loc_18382:
00018CD4 3280                       		move.w	d0,(a1)
00018CD6 5328 003E                  		subq.b	#1,$3E(a0)
00018CDA 6600                       		bne.s	locret_18390
00018CDC 117C 000F 0020             		move.b	#$F,$20(a0)
00018CE2                            
00018CE2                            locret_18390:
00018CE2 4E75                       		rts	
00018CE4                            ; ===========================================================================
00018CE4                            
00018CE4                            loc_18392:				; XREF: loc_1833E
00018CE4 7064                       		moveq	#100,d0
00018CE6 6100 0000                  		bsr.w	AddPoints
00018CEA 117C 0004 0025             		move.b	#4,$25(a0)
00018CF0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018CF6 4268 0010                  		clr.w	$10(a0)
00018CFA 4E75                       		rts	
00018CFC                            ; ===========================================================================
00018CFC                            
00018CFC                            loc_183AA:				; XREF: Obj73_ShipIndex
00018CFC 7000                       		moveq	#0,d0
00018CFE 1028 0028                  		move.b	$28(a0),d0
00018D02 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018D06 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018D0A 0228 0006 0028             		andi.b	#6,$28(a0)
00018D10 6000 FF7E                  		bra.w	loc_1833E
00018D14                            ; ===========================================================================
00018D14 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018D16 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018D18 0000                       		dc.w loc_183CA-off_183C2
00018D1A 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018D1C                            ; ===========================================================================
00018D1C                            
00018D1C                            loc_183CA:				; XREF: off_183C2
00018D1C 4A68 0010                  		tst.w	$10(a0)
00018D20 6600                       		bne.s	loc_183FE
00018D22 7040                       		moveq	#$40,d0
00018D24 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018D2A 6700                       		beq.s	loc_183E6
00018D2C 6500                       		bcs.s	loc_183DE
00018D2E 4440                       		neg.w	d0
00018D30                            
00018D30                            loc_183DE:
00018D30 3140 0012                  		move.w	d0,$12(a0)
00018D34 6000 F4E6                  		bra.w	BossMove
00018D38                            ; ===========================================================================
00018D38                            
00018D38                            loc_183E6:
00018D38 317C 0200 0010             		move.w	#$200,$10(a0)
00018D3E 317C 0100 0012             		move.w	#$100,$12(a0)
00018D44 0828 0000 0022             		btst	#0,$22(a0)
00018D4A 6600                       		bne.s	loc_183FE
00018D4C 4468 0010                  		neg.w	$10(a0)
00018D50                            
00018D50                            loc_183FE:
00018D50 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018D56 6400                       		bcc.s	Obj73_MakeLava
00018D58 6100 F4C2                  		bsr.w	BossMove
00018D5C 5968 0012                  		subq.w	#4,$12(a0)
00018D60                            
00018D60                            Obj73_MakeLava:
00018D60 5328 0034                  		subq.b	#1,$34(a0)
00018D64 6400                       		bcc.s	loc_1845C
00018D66 4EB9 0000 E2E6             		jsr	SingleObjLoad
00018D6C 6600                       		bne.s	loc_1844A
00018D6E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
00018D72 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018D78 4EB9 0000 2CD8             		jsr	(RandomNumber).l
00018D7E 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018D84 80FC 0050                  		divu.w	#$50,d0
00018D88 4840                       		swap	d0
00018D8A 0640 1878                  		addi.w	#$1878,d0
00018D8E 3340 0008                  		move.w	d0,8(a1)
00018D92 EE09                       		lsr.b	#7,d1
00018D94 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018D9A                            
00018D9A                            loc_1844A:
00018D9A 4EB9 0000 2CD8             		jsr	(RandomNumber).l
00018DA0 0200 001F                  		andi.b	#$1F,d0
00018DA4 0600 0040                  		addi.b	#$40,d0
00018DA8 1140 0034                  		move.b	d0,$34(a0)
00018DAC                            
00018DAC                            loc_1845C:
00018DAC 0828 0000 0022             		btst	#0,$22(a0)
00018DB2 6700                       		beq.s	loc_18474
00018DB4 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018DBA 6D00                       		blt.s	locret_1849C
00018DBC 317C 1910 0030             		move.w	#$1910,$30(a0)
00018DC2 6000                       		bra.s	loc_18482
00018DC4                            ; ===========================================================================
00018DC4                            
00018DC4                            loc_18474:
00018DC4 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018DCA 6E00                       		bgt.s	locret_1849C
00018DCC 317C 1830 0030             		move.w	#$1830,$30(a0)
00018DD2                            
00018DD2                            loc_18482:
00018DD2 4268 0010                  		clr.w	$10(a0)
00018DD6 317C FE80 0012             		move.w	#-$180,$12(a0)
00018DDC 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018DE2 6400                       		bcc.s	loc_18498
00018DE4 4468 0012                  		neg.w	$12(a0)
00018DE8                            
00018DE8                            loc_18498:
00018DE8 5428 0028                  		addq.b	#2,$28(a0)
00018DEC                            
00018DEC                            locret_1849C:
00018DEC 4E75                       		rts	
00018DEE                            ; ===========================================================================
00018DEE                            
00018DEE                            Obj73_MakeLava2:			; XREF: off_183C2
00018DEE 6100 F42C                  		bsr.w	BossMove
00018DF2 3028 0038                  		move.w	$38(a0),d0
00018DF6 0440 022C                  		subi.w	#$22C,d0
00018DFA 6E00                       		bgt.s	locret_184F4
00018DFC 303C 022C                  		move.w	#$22C,d0
00018E00 4A68 0012                  		tst.w	$12(a0)
00018E04 6700                       		beq.s	loc_184EA
00018E06 4268 0012                  		clr.w	$12(a0)
00018E0A 317C 0050 003C             		move.w	#$50,$3C(a0)
00018E10 0868 0000 0022             		bchg	#0,$22(a0)
00018E16 4EB9 0000 E2E6             		jsr	SingleObjLoad
00018E1C 6600                       		bne.s	loc_184EA
00018E1E 3368 0030 0008             		move.w	$30(a0),8(a1)
00018E24 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018E2A 0669 0018 000C             		addi.w	#$18,$C(a1)
00018E30 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
00018E34 137C 0001 0028             		move.b	#1,$28(a1)
00018E3A                            
00018E3A                            loc_184EA:
00018E3A 5368 003C                  		subq.w	#1,$3C(a0)
00018E3E 6600                       		bne.s	locret_184F4
00018E40 5428 0028                  		addq.b	#2,$28(a0)
00018E44                            
00018E44                            locret_184F4:
00018E44 4E75                       		rts	
00018E46                            ; ===========================================================================
00018E46                            
00018E46                            loc_184F6:				; XREF: Obj73_ShipIndex
00018E46 5368 003C                  		subq.w	#1,$3C(a0)
00018E4A 6B00                       		bmi.s	loc_18500
00018E4C 6000 F38C                  		bra.w	BossDefeated
00018E50                            ; ===========================================================================
00018E50                            
00018E50                            loc_18500:
00018E50 08E8 0000 0022             		bset	#0,$22(a0)
00018E56 08A8 0007 0022             		bclr	#7,$22(a0)
00018E5C 4268 0010                  		clr.w	$10(a0)
00018E60 5428 0025                  		addq.b	#2,$25(a0)
00018E64 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018E6A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018E6E 6600                       		bne.s	locret_1852A
00018E70 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018E76 4268 0012                  		clr.w	$12(a0)
00018E7A                            
00018E7A                            locret_1852A:
00018E7A 4E75                       		rts	
00018E7C                            ; ===========================================================================
00018E7C                            
00018E7C                            loc_1852C:				; XREF: Obj73_ShipIndex
00018E7C 5268 003C                  		addq.w	#1,$3C(a0)
00018E80 6700                       		beq.s	loc_18544
00018E82 6A00                       		bpl.s	loc_1854E
00018E84 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018E8A 6400                       		bcc.s	loc_18544
00018E8C 0668 0018 0012             		addi.w	#$18,$12(a0)
00018E92 6000                       		bra.s	loc_1857A
00018E94                            ; ===========================================================================
00018E94                            
00018E94                            loc_18544:
00018E94 4268 0012                  		clr.w	$12(a0)
00018E98 4268 003C                  		clr.w	$3C(a0)
00018E9C 6000                       		bra.s	loc_1857A
00018E9E                            ; ===========================================================================
00018E9E                            
00018E9E                            loc_1854E:
00018E9E 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018EA4 6500                       		bcs.s	loc_18566
00018EA6 6700                       		beq.s	loc_1856C
00018EA8 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018EAE 6500                       		bcs.s	loc_1857A
00018EB0 5428 0025                  		addq.b	#2,$25(a0)
00018EB4 6000                       		bra.s	loc_1857A
00018EB6                            ; ===========================================================================
00018EB6                            
00018EB6                            loc_18566:
00018EB6 5168 0012                  		subq.w	#8,$12(a0)
00018EBA 6000                       		bra.s	loc_1857A
00018EBC                            ; ===========================================================================
00018EBC                            
00018EBC                            loc_1856C:
00018EBC 4268 0012                  		clr.w	$12(a0)
00018EC0 303C 0083                  		move.w	#$83,d0
00018EC4 4EB9 0000 15CC             		jsr	(PlaySound).l	; play MZ music
00018ECA                            
00018ECA                            loc_1857A:
00018ECA 6100 F350                  		bsr.w	BossMove
00018ECE 6000 FDC0                  		bra.w	loc_1833E
00018ED2                            ; ===========================================================================
00018ED2                            
00018ED2                            loc_18582:				; XREF: Obj73_ShipIndex
00018ED2 317C 0500 0010             		move.w	#$500,$10(a0)
00018ED8 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018EDE 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
00018EE4 6400                       		bcc.s	loc_1859C
00018EE6 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018EEA 6000                       		bra.s	loc_185A2
00018EEC                            ; ===========================================================================
00018EEC                            
00018EEC                            loc_1859C:
00018EEC 4A28 0001                  		tst.b	1(a0)
00018EF0 6A00                       		bpl.s	Obj73_ShipDel
00018EF2                            
00018EF2                            loc_185A2:
00018EF2 6100 F328                  		bsr.w	BossMove
00018EF6 6000 FD98                  		bra.w	loc_1833E
00018EFA                            ; ===========================================================================
00018EFA                            
00018EFA                            Obj73_ShipDel:
00018EFA 4EF9 0000 DE9C             		jmp	DeleteObject
00018F00                            ; ===========================================================================
00018F00                            
00018F00                            Obj73_FaceMain:				; XREF: Obj73_Index
00018F00 7000                       		moveq	#0,d0
00018F02 7201                       		moveq	#1,d1
00018F04 2268 0034                  		movea.l	$34(a0),a1
00018F08 1029 0025                  		move.b	$25(a1),d0
00018F0C 5540                       		subq.w	#2,d0
00018F0E 6600                       		bne.s	loc_185D2
00018F10 0829 0001 0028             		btst	#1,$28(a1)
00018F16 6700                       		beq.s	loc_185DA
00018F18 4A69 0012                  		tst.w	$12(a1)
00018F1C 6600                       		bne.s	loc_185DA
00018F1E 7204                       		moveq	#4,d1
00018F20 6000                       		bra.s	loc_185EE
00018F22                            ; ===========================================================================
00018F22                            
00018F22                            loc_185D2:
00018F22 5500                       		subq.b	#2,d0
00018F24 6B00                       		bmi.s	loc_185DA
00018F26 720A                       		moveq	#$A,d1
00018F28 6000                       		bra.s	loc_185EE
00018F2A                            ; ===========================================================================
00018F2A                            
00018F2A                            loc_185DA:
00018F2A 4A29 0020                  		tst.b	$20(a1)
00018F2E 6600                       		bne.s	loc_185E4
00018F30 7205                       		moveq	#5,d1
00018F32 6000                       		bra.s	loc_185EE
00018F34                            ; ===========================================================================
00018F34                            
00018F34                            loc_185E4:
00018F34 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018F3A 6500                       		bcs.s	loc_185EE
00018F3C 7204                       		moveq	#4,d1
00018F3E                            
00018F3E                            loc_185EE:
00018F3E 1141 001C                  		move.b	d1,$1C(a0)
00018F42 5900                       		subq.b	#4,d0
00018F44 6600                       		bne.s	loc_18602
00018F46 117C 0006 001C             		move.b	#6,$1C(a0)
00018F4C 4A28 0001                  		tst.b	1(a0)
00018F50 6A00                       		bpl.s	Obj73_FaceDel
00018F52                            
00018F52                            loc_18602:
00018F52 6000                       		bra.s	Obj73_Display
00018F54                            ; ===========================================================================
00018F54                            
00018F54                            Obj73_FaceDel:
00018F54 4EF9 0000 DE9C             		jmp	DeleteObject
00018F5A                            ; ===========================================================================
00018F5A                            
00018F5A                            Obj73_FlameMain:			; XREF: Obj73_Index
00018F5A 117C 0007 001C             		move.b	#7,$1C(a0)
00018F60 2268 0034                  		movea.l	$34(a0),a1
00018F64 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018F6A 6D00                       		blt.s	loc_1862A
00018F6C 117C 000B 001C             		move.b	#$B,$1C(a0)
00018F72 4A28 0001                  		tst.b	1(a0)
00018F76 6A00                       		bpl.s	Obj73_FlameDel
00018F78 6000                       		bra.s	loc_18636
00018F7A                            ; ===========================================================================
00018F7A                            
00018F7A                            loc_1862A:
00018F7A 4A69 0010                  		tst.w	$10(a1)
00018F7E 6700                       		beq.s	loc_18636
00018F80 117C 0008 001C             		move.b	#8,$1C(a0)
00018F86                            
00018F86                            loc_18636:
00018F86 6000                       		bra.s	Obj73_Display
00018F88                            ; ===========================================================================
00018F88                            
00018F88                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018F88 4EF9 0000 DE9C             		jmp	DeleteObject
00018F8E                            ; ===========================================================================
00018F8E                            
00018F8E                            Obj73_Display:
00018F8E 43F9 0001 865E             		lea	(Ani_Eggman).l,a1
00018F94 4EB9 0000 AEDA             		jsr	AnimateSprite
00018F9A                            
00018F9A                            loc_1864A:
00018F9A 2268 0034                  		movea.l	$34(a0),a1
00018F9E 3169 0008 0008             		move.w	8(a1),8(a0)
00018FA4 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018FAA 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018FB0 7003                       		moveq	#3,d0
00018FB2 C028 0022                  		and.b	$22(a0),d0
00018FB6 0228 00FC 0001             		andi.b	#-4,1(a0)
00018FBC 8128 0001                  		or.b	d0,1(a0)
00018FC0 4EF9 0000 DE60             		jmp	DisplaySprite
00018FC6                            ; ===========================================================================
00018FC6                            
00018FC6                            Obj73_TubeMain:				; XREF: Obj73_Index
00018FC6 2268 0034                  		movea.l	$34(a0),a1
00018FCA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018FD0 6600                       		bne.s	loc_18688
00018FD2 4A28 0001                  		tst.b	1(a0)
00018FD6 6A00                       		bpl.s	Obj73_TubeDel
00018FD8                            
00018FD8                            loc_18688:
00018FD8 217C 0001 878A 0004        		move.l	#Map_BossItems,4(a0)
00018FE0 317C 246C 0002             		move.w	#$246C,2(a0)
00018FE6 117C 0004 001A             		move.b	#4,$1A(a0)
00018FEC 60AC                       		bra.s	loc_1864A
00018FEE                            ; ===========================================================================
00018FEE                            
00018FEE                            Obj73_TubeDel:
00018FEE 4EF9 0000 DE9C             		jmp	DeleteObject
00018FF4                            ; ===========================================================================
00018FF4                            ; ---------------------------------------------------------------------------
00018FF4                            ; Object 74 - lava that	Eggman drops (MZ)
00018FF4                            ; ---------------------------------------------------------------------------
00018FF4                            
00018FF4                            Obj74:					; XREF: Obj_Index
00018FF4 7000                       		moveq	#0,d0
00018FF6 1028 0024                  		move.b	$24(a0),d0
00018FFA 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018FFE 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00019002 4EF9 0000 DE60             		jmp	DisplaySprite
00019008                            ; ===========================================================================
00019008 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
0001900A 0000                       		dc.w Obj74_Action-Obj74_Index
0001900C 0000                       		dc.w loc_18886-Obj74_Index
0001900E 0000                       		dc.w Obj74_Delete3-Obj74_Index
00019010                            ; ===========================================================================
00019010                            
00019010                            Obj74_Main:				; XREF: Obj74_Index
00019010 117C 0008 0016             		move.b	#8,$16(a0)
00019016 117C 0008 0017             		move.b	#8,$17(a0)
0001901C 217C 0000 BAD8 0004        		move.l	#Map_obj14,4(a0)
00019024 317C 0345 0002             		move.w	#$345,2(a0)
0001902A 117C 0004 0001             		move.b	#4,1(a0)
00019030 117C 0005 0018             		move.b	#5,$18(a0)
00019036 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001903C 117C 0008 0019             		move.b	#8,$19(a0)
00019042 5428 0024                  		addq.b	#2,$24(a0)
00019046 4A28 0028                  		tst.b	$28(a0)
0001904A 6600                       		bne.s	loc_1870A
0001904C 117C 008B 0020             		move.b	#$8B,$20(a0)
00019052 5428 0024                  		addq.b	#2,$24(a0)
00019056 6000 0000                  		bra.w	loc_18886
0001905A                            ; ===========================================================================
0001905A                            
0001905A                            loc_1870A:
0001905A 117C 001E 0029             		move.b	#$1E,$29(a0)
00019060 303C 00AE                  		move.w	#$AE,d0
00019064 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play lava sound
0001906A                            
0001906A                            Obj74_Action:				; XREF: Obj74_Index
0001906A 7000                       		moveq	#0,d0
0001906C 1028 0025                  		move.b	$25(a0),d0
00019070 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00019074 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00019078 4EB9 0000 DE3A             		jsr	SpeedToPos
0001907E 43F9 0000 ED1A             		lea	(Ani_obj14).l,a1
00019084 4EB9 0000 AEDA             		jsr	AnimateSprite
0001908A 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019090 6200                       		bhi.s	Obj74_Delete
00019092 4E75                       		rts	
00019094                            ; ===========================================================================
00019094                            
00019094                            Obj74_Delete:
00019094 4EF9 0000 DE9C             		jmp	DeleteObject
0001909A                            ; ===========================================================================
0001909A 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
0001909C 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001909E 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
000190A0 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
000190A2                            ; ===========================================================================
000190A2                            
000190A2                            Obj74_Drop:				; XREF: Obj74_Index2
000190A2 08E8 0001 0022             		bset	#1,$22(a0)
000190A8 5328 0029                  		subq.b	#1,$29(a0)
000190AC 6A00                       		bpl.s	locret_18780
000190AE 117C 008B 0020             		move.b	#$8B,$20(a0)
000190B4 4228 0028                  		clr.b	$28(a0)
000190B8 0668 0018 0012             		addi.w	#$18,$12(a0)
000190BE 08A8 0001 0022             		bclr	#1,$22(a0)
000190C4 6100 C6A4                  		bsr.w	ObjHitFloor
000190C8 4A41                       		tst.w	d1
000190CA 6A00                       		bpl.s	locret_18780
000190CC 5428 0025                  		addq.b	#2,$25(a0)
000190D0                            
000190D0                            locret_18780:
000190D0 4E75                       		rts	
000190D2                            ; ===========================================================================
000190D2                            
000190D2                            Obj74_MakeFlame:			; XREF: Obj74_Index2
000190D2 5568 000C                  		subq.w	#2,$C(a0)
000190D6 08E8 0007 0002             		bset	#7,2(a0)
000190DC 317C 00A0 0010             		move.w	#$A0,$10(a0)
000190E2 4268 0012                  		clr.w	$12(a0)
000190E6 3168 0008 0030             		move.w	8(a0),$30(a0)
000190EC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000190F2 117C 0003 0029             		move.b	#3,$29(a0)
000190F8 4EB9 0000 E2FC             		jsr	SingleObjLoad2
000190FE 6600                       		bne.s	loc_187CA
00019100 47D1                       		lea	(a1),a3
00019102 45D0                       		lea	(a0),a2
00019104 7003                       		moveq	#3,d0
00019106                            
00019106                            Obj74_Loop:
00019106 26DA                       		move.l	(a2)+,(a3)+
00019108 26DA                       		move.l	(a2)+,(a3)+
0001910A 26DA                       		move.l	(a2)+,(a3)+
0001910C 26DA                       		move.l	(a2)+,(a3)+
0001910E 51C8 FFF6                  		dbf	d0,Obj74_Loop
00019112                            
00019112 4469 0010                  		neg.w	$10(a1)
00019116 5429 0025                  		addq.b	#2,$25(a1)
0001911A                            
0001911A                            loc_187CA:
0001911A 5428 0025                  		addq.b	#2,$25(a0)
0001911E 4E75                       		rts	
00019120                            
00019120                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019120                            
00019120                            
00019120                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019120 4EB9 0000 E2FC             		jsr	SingleObjLoad2
00019126 6600                       		bne.s	locret_187EE
00019128 3368 0008 0008             		move.w	8(a0),8(a1)
0001912E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019134 12BC 0074                  		move.b	#$74,(a1)
00019138 337C 0067 0028             		move.w	#$67,$28(a1)
0001913E                            
0001913E                            locret_187EE:
0001913E 4E75                       		rts	
00019140                            ; End of function Obj74_Duplicate2
00019140                            
00019140                            ; ===========================================================================
00019140                            
00019140                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019140 6100 C628                  		bsr.w	ObjHitFloor
00019144 4A41                       		tst.w	d1
00019146 6A00                       		bpl.s	loc_18826
00019148 3028 0008                  		move.w	8(a0),d0
0001914C 0C40 1940                  		cmpi.w	#$1940,d0
00019150 6E00                       		bgt.s	loc_1882C
00019152 3228 0030                  		move.w	$30(a0),d1
00019156 B240                       		cmp.w	d0,d1
00019158 6700                       		beq.s	loc_1881E
0001915A 0240 0010                  		andi.w	#$10,d0
0001915E 0241 0010                  		andi.w	#$10,d1
00019162 B240                       		cmp.w	d0,d1
00019164 6700                       		beq.s	loc_1881E
00019166 61B8                       		bsr.s	Obj74_Duplicate2
00019168 3168 0008 0032             		move.w	8(a0),$32(a0)
0001916E                            
0001916E                            loc_1881E:
0001916E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019174 4E75                       		rts	
00019176                            ; ===========================================================================
00019176                            
00019176                            loc_18826:
00019176 5428 0025                  		addq.b	#2,$25(a0)
0001917A 4E75                       		rts	
0001917C                            ; ===========================================================================
0001917C                            
0001917C                            loc_1882C:
0001917C 5428 0024                  		addq.b	#2,$24(a0)
00019180 4E75                       		rts	
00019182                            ; ===========================================================================
00019182                            
00019182                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019182 08A8 0001 0022             		bclr	#1,$22(a0)
00019188 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001918E 3028 0008                  		move.w	8(a0),d0
00019192 9068 0032                  		sub.w	$32(a0),d0
00019196 6A00                       		bpl.s	loc_1884A
00019198 4440                       		neg.w	d0
0001919A                            
0001919A                            loc_1884A:
0001919A 0C40 0012                  		cmpi.w	#$12,d0
0001919E 6600                       		bne.s	loc_18856
000191A0 08A8 0007 0002             		bclr	#7,2(a0)
000191A6                            
000191A6                            loc_18856:
000191A6 6100 C5C2                  		bsr.w	ObjHitFloor
000191AA 4A41                       		tst.w	d1
000191AC 6A00                       		bpl.s	locret_1887E
000191AE 5328 0029                  		subq.b	#1,$29(a0)
000191B2 6700                       		beq.s	Obj74_Delete2
000191B4 4268 0012                  		clr.w	$12(a0)
000191B8 3168 0032 0008             		move.w	$32(a0),8(a0)
000191BE 3168 0038 000C             		move.w	$38(a0),$C(a0)
000191C4 08E8 0007 0002             		bset	#7,2(a0)
000191CA 5528 0025                  		subq.b	#2,$25(a0)
000191CE                            
000191CE                            locret_1887E:
000191CE 4E75                       		rts	
000191D0                            ; ===========================================================================
000191D0                            
000191D0                            Obj74_Delete2:
000191D0 4EF9 0000 DE9C             		jmp	DeleteObject
000191D6                            ; ===========================================================================
000191D6                            
000191D6                            loc_18886:				; XREF: Obj74_Index
000191D6 08E8 0007 0002             		bset	#7,2(a0)
000191DC 5328 0029                  		subq.b	#1,$29(a0)
000191E0 6600                       		bne.s	Obj74_Animate
000191E2 117C 0001 001C             		move.b	#1,$1C(a0)
000191E8 5968 000C                  		subq.w	#4,$C(a0)
000191EC 4228 0020                  		clr.b	$20(a0)
000191F0                            
000191F0                            Obj74_Animate:
000191F0 43F9 0000 ED1A             		lea	(Ani_obj14).l,a1
000191F6 4EF9 0000 AEDA             		jmp	AnimateSprite
000191FC                            ; ===========================================================================
000191FC                            
000191FC                            Obj74_Delete3:				; XREF: Obj74_Index
000191FC 4EF9 0000 DE9C             		jmp	DeleteObject
00019202                            ; ===========================================================================
00019202                            
00019202                            Obj7A_Delete:
00019202 4EF9 0000 DE9C             		jmp	DeleteObject
00019208                            ; ===========================================================================
00019208                            ; ---------------------------------------------------------------------------
00019208                            ; Object 7A - Eggman (SLZ)
00019208                            ; ---------------------------------------------------------------------------
00019208                            
00019208                            Obj7A:					; XREF: Obj_Index
00019208 7000                       		moveq	#0,d0
0001920A 1028 0024                  		move.b	$24(a0),d0
0001920E 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019212 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019216                            ; ===========================================================================
00019216 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019218 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
0001921A 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
0001921C 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
0001921E 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019220                            
00019220 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019223 0401 04                    		dc.b 4,	1, 4
00019226 0607 04                    		dc.b 6,	7, 4
00019229 0800 03                    		dc.b 8,	0, 3
0001922C                            ; ===========================================================================
0001922C                            
0001922C                            Obj7A_Main:				; XREF: Obj7A_Index
0001922C 317C 2188 0008             		move.w	#$2188,8(a0)
00019232 317C 0228 000C             		move.w	#$228,$C(a0)
00019238 3168 0008 0030             		move.w	8(a0),$30(a0)
0001923E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019244 117C 000F 0020             		move.b	#$F,$20(a0)
0001924A 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019250 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019254 2248                       		movea.l	a0,a1
00019256 7203                       		moveq	#3,d1
00019258 6000                       		bra.s	Obj7A_LoadBoss
0001925A                            ; ===========================================================================
0001925A                            
0001925A                            Obj7A_Loop:
0001925A 4EB9 0000 E2FC             		jsr	SingleObjLoad2
00019260 6600                       		bne.s	loc_1895C
00019262 12BC 007A                  		move.b	#$7A,0(a1)
00019266 3368 0008 0008             		move.w	8(a0),8(a1)
0001926C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019272                            
00019272                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019272 08A8 0000 0022             		bclr	#0,$22(a0)
00019278 4229 0025                  		clr.b	$25(a1)
0001927C 135A 0024                  		move.b	(a2)+,$24(a1)
00019280 135A 001C                  		move.b	(a2)+,$1C(a1)
00019284 135A 0018                  		move.b	(a2)+,$18(a1)
00019288 237C 0001 86C2 0004        		move.l	#Map_Eggman,4(a1)
00019290 337C 0400 0002             		move.w	#$400,2(a1)
00019296 137C 0004 0001             		move.b	#4,1(a1)
0001929C 137C 0020 0019             		move.b	#$20,$19(a1)
000192A2 2348 0034                  		move.l	a0,$34(a1)
000192A6 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
000192AA                            
000192AA                            loc_1895C:
000192AA 43F8 D040                  		lea	($FFFFD040).w,a1
000192AE 45E8 002A                  		lea	$2A(a0),a2
000192B2 705E                       		moveq	#$5E,d0
000192B4 723E                       		moveq	#$3E,d1
000192B6                            
000192B6                            loc_18968:
000192B6 B011                       		cmp.b	(a1),d0
000192B8 6600                       		bne.s	loc_18974
000192BA 4A29 0028                  		tst.b	$28(a1)
000192BE 6700                       		beq.s	loc_18974
000192C0 34C9                       		move.w	a1,(a2)+
000192C2                            
000192C2                            loc_18974:
000192C2 D2FC 0040                  		adda.w	#$40,a1
000192C6 51C9 FFEE                  		dbf	d1,loc_18968
000192CA                            
000192CA                            Obj7A_ShipMain:				; XREF: Obj7A_Index
000192CA 7000                       		moveq	#0,d0
000192CC 1028 0025                  		move.b	$25(a0),d0
000192D0 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
000192D4 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
000192D8 43F9 0001 865E             		lea	(Ani_Eggman).l,a1
000192DE 4EB9 0000 AEDA             		jsr	AnimateSprite
000192E4 7003                       		moveq	#3,d0
000192E6 C028 0022                  		and.b	$22(a0),d0
000192EA 0228 00FC 0001             		andi.b	#$FC,1(a0)
000192F0 8128 0001                  		or.b	d0,1(a0)
000192F4 4EF9 0000 DE60             		jmp	DisplaySprite
000192FA                            ; ===========================================================================
000192FA 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000192FC 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000192FE 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019300 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019302 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019304 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019306                            ; ===========================================================================
00019306                            
00019306                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019306 317C FF00 0010             		move.w	#-$100,$10(a0)
0001930C 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019312 6400                       		bcc.s	loc_189CA
00019314 5428 0025                  		addq.b	#2,$25(a0)
00019318                            
00019318                            loc_189CA:
00019318 6100 EF02                  		bsr.w	BossMove
0001931C 1028 003F                  		move.b	$3F(a0),d0
00019320 5428 003F                  		addq.b	#2,$3F(a0)
00019324 4EB9 0000 2CFE             		jsr	(CalcSine).l
0001932A EC40                       		asr.w	#6,d0
0001932C D068 0038                  		add.w	$38(a0),d0
00019330 3140 000C                  		move.w	d0,$C(a0)
00019334 3168 0030 0008             		move.w	$30(a0),8(a0)
0001933A 6000                       		bra.s	loc_189FE
0001933C                            ; ===========================================================================
0001933C                            
0001933C                            loc_189EE:
0001933C 6100 EEDE                  		bsr.w	BossMove
00019340 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019346 3168 0030 0008             		move.w	$30(a0),8(a0)
0001934C                            
0001934C                            loc_189FE:
0001934C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019352 6400                       		bcc.s	locret_18A44
00019354 4A28 0022                  		tst.b	$22(a0)
00019358 6B00                       		bmi.s	loc_18A46
0001935A 4A28 0020                  		tst.b	$20(a0)
0001935E 6600                       		bne.s	locret_18A44
00019360 4A28 003E                  		tst.b	$3E(a0)
00019364 6600                       		bne.s	loc_18A28
00019366 117C 0020 003E             		move.b	#$20,$3E(a0)
0001936C 303C 00AC                  		move.w	#$AC,d0
00019370 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019376                            
00019376                            loc_18A28:
00019376 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001937A 7000                       		moveq	#0,d0
0001937C 4A51                       		tst.w	(a1)
0001937E 6600                       		bne.s	loc_18A36
00019380 303C 0EEE                  		move.w	#$EEE,d0
00019384                            
00019384                            loc_18A36:
00019384 3280                       		move.w	d0,(a1)
00019386 5328 003E                  		subq.b	#1,$3E(a0)
0001938A 6600                       		bne.s	locret_18A44
0001938C 117C 000F 0020             		move.b	#$F,$20(a0)
00019392                            
00019392                            locret_18A44:
00019392 4E75                       		rts	
00019394                            ; ===========================================================================
00019394                            
00019394                            loc_18A46:
00019394 7064                       		moveq	#100,d0
00019396 6100 0000                  		bsr.w	AddPoints
0001939A 117C 0006 0025             		move.b	#6,$25(a0)
000193A0 117C 0078 003C             		move.b	#$78,$3C(a0)
000193A6 4268 0010                  		clr.w	$10(a0)
000193AA 4E75                       		rts	
000193AC                            ; ===========================================================================
000193AC                            
000193AC                            loc_18A5E:				; XREF: Obj7A_ShipIndex
000193AC 3028 0030                  		move.w	$30(a0),d0
000193B0 317C 0200 0010             		move.w	#$200,$10(a0)
000193B6 0828 0000 0022             		btst	#0,$22(a0)
000193BC 6600                       		bne.s	loc_18A7C
000193BE 4468 0010                  		neg.w	$10(a0)
000193C2 0C40 2008                  		cmpi.w	#$2008,d0
000193C6 6E00                       		bgt.s	loc_18A88
000193C8 6000                       		bra.s	loc_18A82
000193CA                            ; ===========================================================================
000193CA                            
000193CA                            loc_18A7C:
000193CA 0C40 2138                  		cmpi.w	#$2138,d0
000193CE 6D00                       		blt.s	loc_18A88
000193D0                            
000193D0                            loc_18A82:
000193D0 0868 0000 0022             		bchg	#0,$22(a0)
000193D6                            
000193D6                            loc_18A88:
000193D6 3028 0008                  		move.w	8(a0),d0
000193DA 72FF                       		moveq	#-1,d1
000193DC 7402                       		moveq	#2,d2
000193DE 45E8 002A                  		lea	$2A(a0),a2
000193E2 7828                       		moveq	#$28,d4
000193E4 4A68 0010                  		tst.w	$10(a0)
000193E8 6A00                       		bpl.s	loc_18A9E
000193EA 4444                       		neg.w	d4
000193EC                            
000193EC                            loc_18A9E:
000193EC 321A                       		move.w	(a2)+,d1
000193EE 2641                       		movea.l	d1,a3
000193F0 082B 0003 0022             		btst	#3,$22(a3)
000193F6 6600                       		bne.s	loc_18AB4
000193F8 362B 0008                  		move.w	8(a3),d3
000193FC D644                       		add.w	d4,d3
000193FE 9640                       		sub.w	d0,d3
00019400 6700                       		beq.s	loc_18AC0
00019402                            
00019402                            loc_18AB4:
00019402 51CA FFE8                  		dbf	d2,loc_18A9E
00019406                            
00019406 1142 0028                  		move.b	d2,$28(a0)
0001940A 6000 FF0C                  		bra.w	loc_189CA
0001940E                            ; ===========================================================================
0001940E                            
0001940E                            loc_18AC0:
0001940E 1142 0028                  		move.b	d2,$28(a0)
00019412 5428 0025                  		addq.b	#2,$25(a0)
00019416 117C 0028 003C             		move.b	#$28,$3C(a0)
0001941C 6000 FEFA                  		bra.w	loc_189CA
00019420                            ; ===========================================================================
00019420                            
00019420                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019420 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019426 6600                       		bne.s	loc_18B36
00019428 70FF                       		moveq	#-1,d0
0001942A 1028 0028                  		move.b	$28(a0),d0
0001942E 4880                       		ext.w	d0
00019430 6B00                       		bmi.s	loc_18B40
00019432 5540                       		subq.w	#2,d0
00019434 4440                       		neg.w	d0
00019436 D040                       		add.w	d0,d0
00019438 43E8 002A                  		lea	$2A(a0),a1
0001943C 3031 0000                  		move.w	(a1,d0.w),d0
00019440 2440                       		movea.l	d0,a2
00019442 43F8 D040                  		lea	($FFFFD040).w,a1
00019446 723E                       		moveq	#$3E,d1
00019448                            
00019448                            loc_18AFA:
00019448 B0A9 003C                  		cmp.l	$3C(a1),d0
0001944C 6700                       		beq.s	loc_18B40
0001944E D2FC 0040                  		adda.w	#$40,a1
00019452 51C9 FFF4                  		dbf	d1,loc_18AFA
00019456                            
00019456 2F08                       		move.l	a0,-(sp)
00019458 41D2                       		lea	(a2),a0
0001945A 4EB9 0000 E2FC             		jsr	SingleObjLoad2
00019460 205F                       		movea.l	(sp)+,a0
00019462 6600                       		bne.s	loc_18B40
00019464 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019468 3368 0008 0008             		move.w	8(a0),8(a1)
0001946E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019474 0669 0020 000C             		addi.w	#$20,$C(a1)
0001947A 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019480 234A 003C                  		move.l	a2,$3C(a1)
00019484                            
00019484                            loc_18B36:
00019484 5328 003C                  		subq.b	#1,$3C(a0)
00019488 6700                       		beq.s	loc_18B40
0001948A 6000 FEC0                  		bra.w	loc_189FE
0001948E                            ; ===========================================================================
0001948E                            
0001948E                            loc_18B40:
0001948E 5528 0025                  		subq.b	#2,$25(a0)
00019492 6000 FE84                  		bra.w	loc_189CA
00019496                            ; ===========================================================================
00019496                            
00019496                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019496 5328 003C                  		subq.b	#1,$3C(a0)
0001949A 6B00                       		bmi.s	loc_18B52
0001949C 6000 ED3C                  		bra.w	BossDefeated
000194A0                            ; ===========================================================================
000194A0                            
000194A0                            loc_18B52:
000194A0 5428 0025                  		addq.b	#2,$25(a0)
000194A4 4268 0012                  		clr.w	$12(a0)
000194A8 08E8 0000 0022             		bset	#0,$22(a0)
000194AE 08A8 0007 0022             		bclr	#7,$22(a0)
000194B4 4268 0010                  		clr.w	$10(a0)
000194B8 117C 00E8 003C             		move.b	#-$18,$3C(a0)
000194BE 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000194C2 6600                       		bne.s	loc_18B7C
000194C4 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000194CA                            
000194CA                            loc_18B7C:
000194CA 6000 FE80                  		bra.w	loc_189FE
000194CE                            ; ===========================================================================
000194CE                            
000194CE                            loc_18B80:				; XREF: Obj7A_ShipIndex
000194CE 5228 003C                  		addq.b	#1,$3C(a0)
000194D2 6700                       		beq.s	loc_18B90
000194D4 6A00                       		bpl.s	loc_18B96
000194D6 0668 0018 0012             		addi.w	#$18,$12(a0)
000194DC 6000                       		bra.s	loc_18BC2
000194DE                            ; ===========================================================================
000194DE                            
000194DE                            loc_18B90:
000194DE 4268 0012                  		clr.w	$12(a0)
000194E2 6000                       		bra.s	loc_18BC2
000194E4                            ; ===========================================================================
000194E4                            
000194E4                            loc_18B96:
000194E4 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
000194EA 6500                       		bcs.s	loc_18BAE
000194EC 6700                       		beq.s	loc_18BB4
000194EE 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
000194F4 6500                       		bcs.s	loc_18BC2
000194F6 5428 0025                  		addq.b	#2,$25(a0)
000194FA 6000                       		bra.s	loc_18BC2
000194FC                            ; ===========================================================================
000194FC                            
000194FC                            loc_18BAE:
000194FC 5168 0012                  		subq.w	#8,$12(a0)
00019500 6000                       		bra.s	loc_18BC2
00019502                            ; ===========================================================================
00019502                            
00019502                            loc_18BB4:
00019502 4268 0012                  		clr.w	$12(a0)
00019506 303C 0084                  		move.w	#$84,d0
0001950A 4EB9 0000 15CC             		jsr	(PlaySound).l	; play SLZ music
00019510                            
00019510                            loc_18BC2:
00019510 6000 FE2A                  		bra.w	loc_189EE
00019514                            ; ===========================================================================
00019514                            
00019514                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019514 317C 0400 0010             		move.w	#$400,$10(a0)
0001951A 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019520 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019526 6400                       		bcc.s	loc_18BE0
00019528 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001952C 6000                       		bra.s	loc_18BE8
0001952E                            ; ===========================================================================
0001952E                            
0001952E                            loc_18BE0:
0001952E 4A28 0001                  		tst.b	1(a0)
00019532 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019536                            
00019536                            loc_18BE8:
00019536 6100 ECE4                  		bsr.w	BossMove
0001953A 6000 FDDC                  		bra.w	loc_189CA
0001953E                            ; ===========================================================================
0001953E                            
0001953E                            Obj7A_FaceMain:				; XREF: Obj7A_Index
0001953E 7000                       		moveq	#0,d0
00019540 7201                       		moveq	#1,d1
00019542 2268 0034                  		movea.l	$34(a0),a1
00019546 1029 0025                  		move.b	$25(a1),d0
0001954A 0C00 0006                  		cmpi.b	#6,d0
0001954E 6B00                       		bmi.s	loc_18C06
00019550 720A                       		moveq	#$A,d1
00019552 6000                       		bra.s	loc_18C1A
00019554                            ; ===========================================================================
00019554                            
00019554                            loc_18C06:
00019554 4A29 0020                  		tst.b	$20(a1)
00019558 6600                       		bne.s	loc_18C10
0001955A 7205                       		moveq	#5,d1
0001955C 6000                       		bra.s	loc_18C1A
0001955E                            ; ===========================================================================
0001955E                            
0001955E                            loc_18C10:
0001955E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019564 6500                       		bcs.s	loc_18C1A
00019566 7204                       		moveq	#4,d1
00019568                            
00019568                            loc_18C1A:
00019568 1141 001C                  		move.b	d1,$1C(a0)
0001956C 0C00 000A                  		cmpi.b	#$A,d0
00019570 6600                       		bne.s	loc_18C32
00019572 117C 0006 001C             		move.b	#6,$1C(a0)
00019578 4A28 0001                  		tst.b	1(a0)
0001957C 6A00 FC84                  		bpl.w	Obj7A_Delete
00019580                            
00019580                            loc_18C32:
00019580 6000                       		bra.s	loc_18C6C
00019582                            ; ===========================================================================
00019582                            
00019582                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019582 117C 0008 001C             		move.b	#8,$1C(a0)
00019588 2268 0034                  		movea.l	$34(a0),a1
0001958C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019592 6600                       		bne.s	loc_18C56
00019594 4A28 0001                  		tst.b	1(a0)
00019598 6A00 FC68                  		bpl.w	Obj7A_Delete
0001959C 117C 000B 001C             		move.b	#$B,$1C(a0)
000195A2 6000                       		bra.s	loc_18C6C
000195A4                            ; ===========================================================================
000195A4                            
000195A4                            loc_18C56:
000195A4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000195AA 6E00                       		bgt.s	loc_18C6C
000195AC 0C29 0004 0025             		cmpi.b	#4,$25(a1)
000195B2 6D00                       		blt.s	loc_18C6C
000195B4 117C 0007 001C             		move.b	#7,$1C(a0)
000195BA                            
000195BA                            loc_18C6C:
000195BA 43F9 0001 865E             		lea	(Ani_Eggman).l,a1
000195C0 4EB9 0000 AEDA             		jsr	AnimateSprite
000195C6                            
000195C6                            loc_18C78:
000195C6 2268 0034                  		movea.l	$34(a0),a1
000195CA 3169 0008 0008             		move.w	8(a1),8(a0)
000195D0 3169 000C 000C             		move.w	$C(a1),$C(a0)
000195D6 1169 0022 0022             		move.b	$22(a1),$22(a0)
000195DC 7003                       		moveq	#3,d0
000195DE C028 0022                  		and.b	$22(a0),d0
000195E2 0228 00FC 0001             		andi.b	#-4,1(a0)
000195E8 8128 0001                  		or.b	d0,1(a0)
000195EC 4EF9 0000 DE60             		jmp	DisplaySprite
000195F2                            ; ===========================================================================
000195F2                            
000195F2                            Obj7A_TubeMain:				; XREF: Obj7A_Index
000195F2 2268 0034                  		movea.l	$34(a0),a1
000195F6 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000195FC 6600                       		bne.s	loc_18CB8
000195FE 4A28 0001                  		tst.b	1(a0)
00019602 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019606                            
00019606                            loc_18CB8:
00019606 217C 0001 878A 0004        		move.l	#Map_BossItems,4(a0)
0001960E 317C 246C 0002             		move.w	#$246C,2(a0)
00019614 117C 0003 001A             		move.b	#3,$1A(a0)
0001961A 60AA                       		bra.s	loc_18C78
0001961C                            ; ===========================================================================
0001961C                            ; ---------------------------------------------------------------------------
0001961C                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
0001961C                            ; ---------------------------------------------------------------------------
0001961C                            
0001961C                            Obj7B:					; XREF: Obj_Index
0001961C 7000                       		moveq	#0,d0
0001961E 1028 0024                  		move.b	$24(a0),d0
00019622 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019626 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
0001962A 3028 0030                  		move.w	$30(a0),d0
0001962E 0240 FF80                  		andi.w	#$FF80,d0
00019632 3238 F700                  		move.w	($FFFFF700).w,d1
00019636 0441 0080                  		subi.w	#$80,d1
0001963A 0241 FF80                  		andi.w	#$FF80,d1
0001963E 9041                       		sub.w	d1,d0
00019640 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019644 0C40 0280                  		cmpi.w	#$280,d0
00019648 6200 FBB8                  		bhi.w	Obj7A_Delete
0001964C 4EF9 0000 DE60             		jmp	DisplaySprite
00019652                            ; ===========================================================================
00019652 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019654 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019656 0000                       		dc.w loc_18DC6-Obj7B_Index
00019658 0000                       		dc.w loc_18EAA-Obj7B_Index
0001965A 0000                       		dc.w Obj7B_Explode-Obj7B_Index
0001965C 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
0001965E                            ; ===========================================================================
0001965E                            
0001965E                            Obj7B_Main:				; XREF: Obj7B_Index
0001965E 217C 0001 2226 0004        		move.l	#Map_obj5Ea,4(a0)
00019666 317C 0518 0002             		move.w	#$518,2(a0)
0001966C 117C 0001 001A             		move.b	#1,$1A(a0)
00019672 0028 0004 0001             		ori.b	#4,1(a0)
00019678 117C 0004 0018             		move.b	#4,$18(a0)
0001967E 117C 008B 0020             		move.b	#$8B,$20(a0)
00019684 117C 000C 0019             		move.b	#$C,$19(a0)
0001968A 2268 003C                  		movea.l	$3C(a0),a1
0001968E 3169 0008 0030             		move.w	8(a1),$30(a0)
00019694 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001969A 08E8 0000 0022             		bset	#0,$22(a0)
000196A0 3028 0008                  		move.w	8(a0),d0
000196A4 B069 0008                  		cmp.w	8(a1),d0
000196A8 6E00                       		bgt.s	loc_18D68
000196AA 08A8 0000 0022             		bclr	#0,$22(a0)
000196B0 117C 0002 003A             		move.b	#2,$3A(a0)
000196B6                            
000196B6                            loc_18D68:
000196B6 5428 0024                  		addq.b	#2,$24(a0)
000196BA                            
000196BA                            Obj7B_Fall:				; XREF: Obj7B_Index
000196BA 4EB9 0000 DDC8             		jsr	ObjectFall
000196C0 2268 003C                  		movea.l	$3C(a0),a1
000196C4 45F9 0000 0000             		lea	(word_19018).l,a2
000196CA 7000                       		moveq	#0,d0
000196CC 1029 001A                  		move.b	$1A(a1),d0
000196D0 3228 0008                  		move.w	8(a0),d1
000196D4 9268 0030                  		sub.w	$30(a0),d1
000196D8 6400                       		bcc.s	loc_18D8E
000196DA 5440                       		addq.w	#2,d0
000196DC                            
000196DC                            loc_18D8E:
000196DC D040                       		add.w	d0,d0
000196DE 3228 0034                  		move.w	$34(a0),d1
000196E2 D272 0000                  		add.w	(a2,d0.w),d1
000196E6 B268 000C                  		cmp.w	$C(a0),d1
000196EA 6E00                       		bgt.s	locret_18DC4
000196EC 2268 003C                  		movea.l	$3C(a0),a1
000196F0 7202                       		moveq	#2,d1
000196F2 0828 0000 0022             		btst	#0,$22(a0)
000196F8 6700                       		beq.s	loc_18DAE
000196FA 7200                       		moveq	#0,d1
000196FC                            
000196FC                            loc_18DAE:
000196FC 317C 00F0 0028             		move.w	#$F0,$28(a0)
00019702 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00019708 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001970E 6000 0000                  		bra.w	loc_18FA2
00019712                            ; ===========================================================================
00019712                            
00019712                            locret_18DC4:
00019712 4E75                       		rts	
00019714                            ; ===========================================================================
00019714                            
00019714                            loc_18DC6:				; XREF: Obj7B_Index
00019714 2268 003C                  		movea.l	$3C(a0),a1
00019718 7000                       		moveq	#0,d0
0001971A 1028 003A                  		move.b	$3A(a0),d0
0001971E 9029 003A                  		sub.b	$3A(a1),d0
00019722 6700                       		beq.s	loc_18E2A
00019724 6400                       		bcc.s	loc_18DDA
00019726 4400                       		neg.b	d0
00019728                            
00019728                            loc_18DDA:
00019728 323C F7E8                  		move.w	#-$818,d1
0001972C 343C FEEC                  		move.w	#-$114,d2
00019730 0C00 0001                  		cmpi.b	#1,d0
00019734 6700                       		beq.s	loc_18E00
00019736 323C F6A0                  		move.w	#-$960,d1
0001973A 343C FF0C                  		move.w	#-$F4,d2
0001973E 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00019744 6D00                       		blt.s	loc_18E00
00019746 323C F5E0                  		move.w	#-$A20,d1
0001974A 343C FF80                  		move.w	#-$80,d2
0001974E                            
0001974E                            loc_18E00:
0001974E 3141 0012                  		move.w	d1,$12(a0)
00019752 3142 0010                  		move.w	d2,$10(a0)
00019756 3028 0008                  		move.w	8(a0),d0
0001975A 9068 0030                  		sub.w	$30(a0),d0
0001975E 6400                       		bcc.s	loc_18E16
00019760 4468 0010                  		neg.w	$10(a0)
00019764                            
00019764                            loc_18E16:
00019764 117C 0001 001A             		move.b	#1,$1A(a0)
0001976A 317C 0020 0028             		move.w	#$20,$28(a0)
00019770 5428 0024                  		addq.b	#2,$24(a0)
00019774 6000 0000                  		bra.w	loc_18EAA
00019778                            ; ===========================================================================
00019778                            
00019778                            loc_18E2A:				; XREF: loc_18DC6
00019778 45F9 0000 0000             		lea	(word_19018).l,a2
0001977E 7000                       		moveq	#0,d0
00019780 1029 001A                  		move.b	$1A(a1),d0
00019784 343C 0028                  		move.w	#$28,d2
00019788 3228 0008                  		move.w	8(a0),d1
0001978C 9268 0030                  		sub.w	$30(a0),d1
00019790 6400                       		bcc.s	loc_18E48
00019792 4442                       		neg.w	d2
00019794 5440                       		addq.w	#2,d0
00019796                            
00019796                            loc_18E48:
00019796 D040                       		add.w	d0,d0
00019798 3228 0034                  		move.w	$34(a0),d1
0001979C D272 0000                  		add.w	(a2,d0.w),d1
000197A0 3141 000C                  		move.w	d1,$C(a0)
000197A4 D468 0030                  		add.w	$30(a0),d2
000197A8 3142 0008                  		move.w	d2,8(a0)
000197AC 4268 000E                  		clr.w	$E(a0)
000197B0 4268 000A                  		clr.w	$A(a0)
000197B4 5368 0028                  		subq.w	#1,$28(a0)
000197B8 6600                       		bne.s	loc_18E7A
000197BA 317C 0020 0028             		move.w	#$20,$28(a0)
000197C0 117C 0008 0024             		move.b	#8,$24(a0)
000197C6 4E75                       		rts	
000197C8                            ; ===========================================================================
000197C8                            
000197C8                            loc_18E7A:
000197C8 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
000197CE 6600                       		bne.s	loc_18E88
000197D0 117C 0005 001F             		move.b	#5,$1F(a0)
000197D6                            
000197D6                            loc_18E88:
000197D6 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
000197DC 6600                       		bne.s	loc_18E96
000197DE 117C 0002 001F             		move.b	#2,$1F(a0)
000197E4                            
000197E4                            loc_18E96:
000197E4 5328 001E                  		subq.b	#1,$1E(a0)
000197E8 6E00                       		bgt.s	locret_18EA8
000197EA 0868 0000 001A             		bchg	#0,$1A(a0)
000197F0 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000197F6                            
000197F6                            locret_18EA8:
000197F6 4E75                       		rts	
000197F8                            ; ===========================================================================
000197F8                            
000197F8                            loc_18EAA:				; XREF: Obj7B_Index
000197F8 43F8 D040                  		lea	($FFFFD040).w,a1
000197FC 707A                       		moveq	#$7A,d0
000197FE 7240                       		moveq	#$40,d1
00019800 743E                       		moveq	#$3E,d2
00019802                            
00019802                            loc_18EB4:
00019802 B011                       		cmp.b	(a1),d0
00019804 6700                       		beq.s	loc_18EC0
00019806 D2C1                       		adda.w	d1,a1
00019808 51CA FFF8                  		dbf	d2,loc_18EB4
0001980C                            
0001980C 6000                       		bra.s	loc_18F38
0001980E                            ; ===========================================================================
0001980E                            
0001980E                            loc_18EC0:
0001980E 3029 0008                  		move.w	8(a1),d0
00019812 3229 000C                  		move.w	$C(a1),d1
00019816 3428 0008                  		move.w	8(a0),d2
0001981A 3628 000C                  		move.w	$C(a0),d3
0001981E 45FA 0000                  		lea	byte_19022(pc),a2
00019822 47FA 0000                  		lea	byte_19026(pc),a3
00019826 181A                       		move.b	(a2)+,d4
00019828 4884                       		ext.w	d4
0001982A D044                       		add.w	d4,d0
0001982C 181B                       		move.b	(a3)+,d4
0001982E 4884                       		ext.w	d4
00019830 D444                       		add.w	d4,d2
00019832 B440                       		cmp.w	d0,d2
00019834 6500                       		bcs.s	loc_18F38
00019836 181A                       		move.b	(a2)+,d4
00019838 4884                       		ext.w	d4
0001983A D044                       		add.w	d4,d0
0001983C 181B                       		move.b	(a3)+,d4
0001983E 4884                       		ext.w	d4
00019840 D444                       		add.w	d4,d2
00019842 B042                       		cmp.w	d2,d0
00019844 6500                       		bcs.s	loc_18F38
00019846 181A                       		move.b	(a2)+,d4
00019848 4884                       		ext.w	d4
0001984A D244                       		add.w	d4,d1
0001984C 181B                       		move.b	(a3)+,d4
0001984E 4884                       		ext.w	d4
00019850 D644                       		add.w	d4,d3
00019852 B641                       		cmp.w	d1,d3
00019854 6500                       		bcs.s	loc_18F38
00019856 181A                       		move.b	(a2)+,d4
00019858 4884                       		ext.w	d4
0001985A D244                       		add.w	d4,d1
0001985C 181B                       		move.b	(a3)+,d4
0001985E 4884                       		ext.w	d4
00019860 D644                       		add.w	d4,d3
00019862 B243                       		cmp.w	d3,d1
00019864 6500                       		bcs.s	loc_18F38
00019866 5428 0024                  		addq.b	#2,$24(a0)
0001986A 4268 0028                  		clr.w	$28(a0)
0001986E 4229 0020                  		clr.b	$20(a1)
00019872 5329 0021                  		subq.b	#1,$21(a1)
00019876 6600                       		bne.s	loc_18F38
00019878 08E9 0007 0022             		bset	#7,$22(a1)
0001987E 4268 0010                  		clr.w	$10(a0)
00019882 4268 0012                  		clr.w	$12(a0)
00019886                            
00019886                            loc_18F38:
00019886 4A68 0012                  		tst.w	$12(a0)
0001988A 6A00                       		bpl.s	loc_18F5C
0001988C 4EB9 0000 DDC8             		jsr	ObjectFall
00019892 3028 0034                  		move.w	$34(a0),d0
00019896 0440 002F                  		subi.w	#$2F,d0
0001989A B068 000C                  		cmp.w	$C(a0),d0
0001989E 6E00                       		bgt.s	loc_18F58
000198A0 4EB9 0000 DDC8             		jsr	ObjectFall
000198A6                            
000198A6                            loc_18F58:
000198A6 6000 FF20                  		bra.w	loc_18E7A
000198AA                            ; ===========================================================================
000198AA                            
000198AA                            loc_18F5C:
000198AA 4EB9 0000 DDC8             		jsr	ObjectFall
000198B0 2268 003C                  		movea.l	$3C(a0),a1
000198B4 45F9 0000 0000             		lea	(word_19018).l,a2
000198BA 7000                       		moveq	#0,d0
000198BC 1029 001A                  		move.b	$1A(a1),d0
000198C0 3228 0008                  		move.w	8(a0),d1
000198C4 9268 0030                  		sub.w	$30(a0),d1
000198C8 6400                       		bcc.s	loc_18F7E
000198CA 5440                       		addq.w	#2,d0
000198CC                            
000198CC                            loc_18F7E:
000198CC D040                       		add.w	d0,d0
000198CE 3228 0034                  		move.w	$34(a0),d1
000198D2 D272 0000                  		add.w	(a2,d0.w),d1
000198D6 B268 000C                  		cmp.w	$C(a0),d1
000198DA 6ECA                       		bgt.s	loc_18F58
000198DC 2268 003C                  		movea.l	$3C(a0),a1
000198E0 7202                       		moveq	#2,d1
000198E2 4A68 0010                  		tst.w	$10(a0)
000198E6 6B00                       		bmi.s	loc_18F9C
000198E8 7200                       		moveq	#0,d1
000198EA                            
000198EA                            loc_18F9C:
000198EA 317C 0000 0028             		move.w	#0,$28(a0)
000198F0                            
000198F0                            loc_18FA2:
000198F0 1341 003A                  		move.b	d1,$3A(a1)
000198F4 1141 003A                  		move.b	d1,$3A(a0)
000198F8 B229 001A                  		cmp.b	$1A(a1),d1
000198FC 6700                       		beq.s	loc_19008
000198FE 08A9 0003 0022             		bclr	#3,$22(a1)
00019904 6700                       		beq.s	loc_19008
00019906 4229 0025                  		clr.b	$25(a1)
0001990A 137C 0002 0024             		move.b	#2,$24(a1)
00019910 45F8 D000                  		lea	($FFFFD000).w,a2
00019914 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001991A 446A 0012                  		neg.w	$12(a2)
0001991E 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00019924 6600                       		bne.s	loc_18FDC
00019926 E0EA 0012                  		asr	$12(a2)
0001992A                            
0001992A                            loc_18FDC:
0001992A 08EA 0001 0022             		bset	#1,$22(a2)
00019930 08AA 0003 0022             		bclr	#3,$22(a2)
00019936 422A 003C                  		clr.b	$3C(a2)
0001993A 2F08                       		move.l	a0,-(sp)
0001993C 41D2                       		lea	(a2),a0
0001993E 4EBA A368                  		jsr	Obj01_ChkRoll
00019942 205F                       		movea.l	(sp)+,a0
00019944 157C 0002 0024             		move.b	#2,$24(a2)
0001994A 303C 00CC                  		move.w	#$CC,d0
0001994E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "spring" sound
00019954                            
00019954                            loc_19008:
00019954 4268 0010                  		clr.w	$10(a0)
00019958 4268 0012                  		clr.w	$12(a0)
0001995C 5428 0024                  		addq.b	#2,$24(a0)
00019960 6000 FE66                  		bra.w	loc_18E7A
00019964                            ; ===========================================================================
00019964 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001996E                            		even
0001996E E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00019972                            		even
00019972 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019976                            		even
00019976                            ; ===========================================================================
00019976                            
00019976                            Obj7B_Explode:				; XREF: Obj7B_Index
00019976 10BC 003F                  		move.b	#$3F,(a0)
0001997A 4228 0024                  		clr.b	$24(a0)
0001997E 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00019984 6700                       		beq.s	Obj7B_MakeFrag
00019986 4E75                       		rts	
00019988                            ; ===========================================================================
00019988                            
00019988                            Obj7B_MakeFrag:
00019988 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001998E 7203                       		moveq	#3,d1
00019990 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00019994                            
00019994                            Obj7B_Loop:
00019994 4EB9 0000 E2E6             		jsr	SingleObjLoad
0001999A 6600                       		bne.s	loc_1909A
0001999C 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
000199A0 137C 000A 0024             		move.b	#$A,$24(a1)
000199A6 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
000199AE 137C 0003 0018             		move.b	#3,$18(a1)
000199B4 337C 0518 0002             		move.w	#$518,2(a1)
000199BA 3368 0008 0008             		move.w	8(a0),8(a1)
000199C0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000199C6 335A 0010                  		move.w	(a2)+,$10(a1)
000199CA 335A 0012                  		move.w	(a2)+,$12(a1)
000199CE 137C 0098 0020             		move.b	#$98,$20(a1)
000199D4 0029 0004 0001             		ori.b	#4,1(a1)
000199DA 08E9 0007 0001             		bset	#7,1(a1)
000199E0 137C 000C 0019             		move.b	#$C,$19(a1)
000199E6                            
000199E6                            loc_1909A:
000199E6 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000199EA                            
000199EA 4E75                       		rts	
000199EC                            ; ===========================================================================
000199EC FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000199F0 FF60 FDC0                  		dc.w $FF60, $FDC0
000199F4 0100 FCC0                  		dc.w $100, $FCC0
000199F8 00A0 FDC0                  		dc.w $A0, $FDC0
000199FC                            ; ===========================================================================
000199FC                            
000199FC                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
000199FC 4EB9 0000 DE3A             		jsr	SpeedToPos
00019A02 3168 0008 0030             		move.w	8(a0),$30(a0)
00019A08 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019A0E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019A14 7004                       		moveq	#4,d0
00019A16 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019A1A E448                       		lsr.w	#2,d0
00019A1C 1140 001A                  		move.b	d0,$1A(a0)
00019A20 4A28 0001                  		tst.b	1(a0)
00019A24 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019A28 4E75                       		rts	
00019A2A                            ; ===========================================================================
00019A2A                            ; ---------------------------------------------------------------------------
00019A2A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019A2A                            ; ---------------------------------------------------------------------------
00019A2A                            Map_obj7B:
00019A2A                            	include "_maps\obj7B.asm"
00019A2A                            ; ---------------------------------------------------------------------------
00019A2A                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019A2A                            ; ---------------------------------------------------------------------------
00019A2A 0000                       		dc.w byte_190E2-Map_obj7B
00019A2C 0000                       		dc.w byte_190E8-Map_obj7B
00019A2E 01                         byte_190E2:	dc.b 1
00019A2F FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00019A34 01                         byte_190E8:	dc.b 1
00019A35 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019A3A                            		even
00019A3A                            		even
00019A3A                            
00019A3A                            ; ===========================================================================
00019A3A                            ; ---------------------------------------------------------------------------
00019A3A                            ; Object 75 - Eggman (SYZ)
00019A3A                            ; ---------------------------------------------------------------------------
00019A3A                            
00019A3A                            Obj75:					; XREF: Obj_Index
00019A3A 7000                       		moveq	#0,d0
00019A3C 1028 0024                  		move.b	$24(a0),d0
00019A40 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019A44 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019A48                            ; ===========================================================================
00019A48 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019A4A 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019A4C 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019A4E 0000                       		dc.w Obj75_FlameMain-Obj75_Index
00019A50 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
00019A52                            
00019A52 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019A55 0401 05                    		dc.b 4,	1, 5
00019A58 0607 05                    		dc.b 6,	7, 5
00019A5B 0800 05                    		dc.b 8,	0, 5
00019A5E                            ; ===========================================================================
00019A5E                            
00019A5E                            Obj75_Main:				; XREF: Obj75_Index
00019A5E 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019A64 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019A6A 3168 0008 0030             		move.w	8(a0),$30(a0)
00019A70 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019A76 117C 000F 0020             		move.b	#$F,$20(a0)
00019A7C 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019A82 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019A86 2248                       		movea.l	a0,a1
00019A88 7203                       		moveq	#3,d1
00019A8A 6000                       		bra.s	Obj75_LoadBoss
00019A8C                            ; ===========================================================================
00019A8C                            
00019A8C                            Obj75_Loop:
00019A8C 4EB9 0000 E2FC             		jsr	SingleObjLoad2
00019A92 6600                       		bne.s	Obj75_ShipMain
00019A94 12BC 0075                  		move.b	#$75,(a1)
00019A98 3368 0008 0008             		move.w	8(a0),8(a1)
00019A9E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019AA4                            
00019AA4                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019AA4 08A8 0000 0022             		bclr	#0,$22(a0)
00019AAA 4229 0025                  		clr.b	$25(a1)
00019AAE 135A 0024                  		move.b	(a2)+,$24(a1)
00019AB2 135A 001C                  		move.b	(a2)+,$1C(a1)
00019AB6 135A 0018                  		move.b	(a2)+,$18(a1)
00019ABA 237C 0001 86C2 0004        		move.l	#Map_Eggman,4(a1)
00019AC2 337C 0400 0002             		move.w	#$400,2(a1)
00019AC8 137C 0004 0001             		move.b	#4,1(a1)
00019ACE 137C 0020 0019             		move.b	#$20,$19(a1)
00019AD4 2348 0034                  		move.l	a0,$34(a1)
00019AD8 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019ADC                            
00019ADC                            Obj75_ShipMain:				; XREF: Obj75_Index
00019ADC 7000                       		moveq	#0,d0
00019ADE 1028 0025                  		move.b	$25(a0),d0
00019AE2 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
00019AE6 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
00019AEA 43F9 0001 865E             		lea	(Ani_Eggman).l,a1
00019AF0 4EB9 0000 AEDA             		jsr	AnimateSprite
00019AF6 7003                       		moveq	#3,d0
00019AF8 C028 0022                  		and.b	$22(a0),d0
00019AFC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019B02 8128 0001                  		or.b	d0,1(a0)
00019B06 4EF9 0000 DE60             		jmp	DisplaySprite
00019B0C                            ; ===========================================================================
00019B0C 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
00019B10 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
00019B14 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019B18                            ; ===========================================================================
00019B18                            
00019B18                            loc_191CC:				; XREF: Obj75_ShipIndex
00019B18 317C FF00 0010             		move.w	#-$100,$10(a0)
00019B1E 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
00019B24 6400                       		bcc.s	loc_191DE
00019B26 5428 0025                  		addq.b	#2,$25(a0)
00019B2A                            
00019B2A                            loc_191DE:
00019B2A 1028 003F                  		move.b	$3F(a0),d0
00019B2E 5428 003F                  		addq.b	#2,$3F(a0)
00019B32 4EB9 0000 2CFE             		jsr	(CalcSine).l
00019B38 E440                       		asr.w	#2,d0
00019B3A 3140 0012                  		move.w	d0,$12(a0)
00019B3E                            
00019B3E                            loc_191F2:
00019B3E 6100 E6DC                  		bsr.w	BossMove
00019B42 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019B48 3168 0030 0008             		move.w	$30(a0),8(a0)
00019B4E                            
00019B4E                            loc_19202:
00019B4E 3028 0008                  		move.w	8(a0),d0
00019B52 0440 2C00                  		subi.w	#$2C00,d0
00019B56 EA48                       		lsr.w	#5,d0
00019B58 1140 0034                  		move.b	d0,$34(a0)
00019B5C 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019B62 6400                       		bcc.s	locret_19256
00019B64 4A28 0022                  		tst.b	$22(a0)
00019B68 6B00                       		bmi.s	loc_19258
00019B6A 4A28 0020                  		tst.b	$20(a0)
00019B6E 6600                       		bne.s	locret_19256
00019B70 4A28 003E                  		tst.b	$3E(a0)
00019B74 6600                       		bne.s	loc_1923A
00019B76 117C 0020 003E             		move.b	#$20,$3E(a0)
00019B7C 303C 00AC                  		move.w	#$AC,d0
00019B80 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019B86                            
00019B86                            loc_1923A:
00019B86 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019B8A 7000                       		moveq	#0,d0
00019B8C 4A51                       		tst.w	(a1)
00019B8E 6600                       		bne.s	loc_19248
00019B90 303C 0EEE                  		move.w	#$EEE,d0
00019B94                            
00019B94                            loc_19248:
00019B94 3280                       		move.w	d0,(a1)
00019B96 5328 003E                  		subq.b	#1,$3E(a0)
00019B9A 6600                       		bne.s	locret_19256
00019B9C 117C 000F 0020             		move.b	#$F,$20(a0)
00019BA2                            
00019BA2                            locret_19256:
00019BA2 4E75                       		rts	
00019BA4                            ; ===========================================================================
00019BA4                            
00019BA4                            loc_19258:				; XREF: loc_19202
00019BA4 7064                       		moveq	#100,d0
00019BA6 6100 0000                  		bsr.w	AddPoints
00019BAA 117C 0006 0025             		move.b	#6,$25(a0)
00019BB0 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019BB6 4268 0010                  		clr.w	$10(a0)
00019BBA 4E75                       		rts	
00019BBC                            ; ===========================================================================
00019BBC                            
00019BBC                            loc_19270:				; XREF: Obj75_ShipIndex
00019BBC 3028 0030                  		move.w	$30(a0),d0
00019BC0 317C 0140 0010             		move.w	#$140,$10(a0)
00019BC6 0828 0000 0022             		btst	#0,$22(a0)
00019BCC 6600                       		bne.s	loc_1928E
00019BCE 4468 0010                  		neg.w	$10(a0)
00019BD2 0C40 2C08                  		cmpi.w	#$2C08,d0
00019BD6 6E00                       		bgt.s	loc_1929E
00019BD8 6000                       		bra.s	loc_19294
00019BDA                            ; ===========================================================================
00019BDA                            
00019BDA                            loc_1928E:
00019BDA 0C40 2D38                  		cmpi.w	#$2D38,d0
00019BDE 6D00                       		blt.s	loc_1929E
00019BE0                            
00019BE0                            loc_19294:
00019BE0 0868 0000 0022             		bchg	#0,$22(a0)
00019BE6 4228 003D                  		clr.b	$3D(a0)
00019BEA                            
00019BEA                            loc_1929E:
00019BEA 0440 2C10                  		subi.w	#$2C10,d0
00019BEE 0240 001F                  		andi.w	#$1F,d0
00019BF2 0440 001F                  		subi.w	#$1F,d0
00019BF6 6A00                       		bpl.s	loc_192AE
00019BF8 4440                       		neg.w	d0
00019BFA                            
00019BFA                            loc_192AE:
00019BFA 5340                       		subq.w	#1,d0
00019BFC 6E00                       		bgt.s	loc_192E8
00019BFE 4A28 003D                  		tst.b	$3D(a0)
00019C02 6600                       		bne.s	loc_192E8
00019C04 3238 D008                  		move.w	($FFFFD008).w,d1
00019C08 0441 2C00                  		subi.w	#$2C00,d1
00019C0C EA41                       		asr.w	#5,d1
00019C0E B228 0034                  		cmp.b	$34(a0),d1
00019C12 6600                       		bne.s	loc_192E8
00019C14 7000                       		moveq	#0,d0
00019C16 1028 0034                  		move.b	$34(a0),d0
00019C1A EB40                       		asl.w	#5,d0
00019C1C 0640 2C10                  		addi.w	#$2C10,d0
00019C20 3140 0030                  		move.w	d0,$30(a0)
00019C24 6100 0000                  		bsr.w	Obj75_FindBlocks
00019C28 5428 0025                  		addq.b	#2,$25(a0)
00019C2C 4268 0028                  		clr.w	$28(a0)
00019C30 4268 0010                  		clr.w	$10(a0)
00019C34                            
00019C34                            loc_192E8:
00019C34 6000 FEF4                  		bra.w	loc_191DE
00019C38                            ; ===========================================================================
00019C38                            
00019C38                            loc_192EC:				; XREF: Obj75_ShipIndex
00019C38 7000                       		moveq	#0,d0
00019C3A 1028 0028                  		move.b	$28(a0),d0
00019C3E 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
00019C42 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019C46                            ; ===========================================================================
00019C46 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019C48 0000                       		dc.w loc_19348-off_192FA
00019C4A 0000                       		dc.w loc_1938E-off_192FA
00019C4C 0000                       		dc.w loc_193D0-off_192FA
00019C4E                            ; ===========================================================================
00019C4E                            
00019C4E                            loc_19302:				; XREF: off_192FA
00019C4E 317C 0180 0012             		move.w	#$180,$12(a0)
00019C54 3028 0038                  		move.w	$38(a0),d0
00019C58 0C40 0556                  		cmpi.w	#$556,d0
00019C5C 6500                       		bcs.s	loc_19344
00019C5E 317C 0556 0038             		move.w	#$556,$38(a0)
00019C64 4268 003C                  		clr.w	$3C(a0)
00019C68 70FF                       		moveq	#-1,d0
00019C6A 3028 0036                  		move.w	$36(a0),d0
00019C6E 6700                       		beq.s	loc_1933C
00019C70 2240                       		movea.l	d0,a1
00019C72 137C 00FF 0029             		move.b	#-1,$29(a1)
00019C78 117C 00FF 0029             		move.b	#-1,$29(a0)
00019C7E 2348 0034                  		move.l	a0,$34(a1)
00019C82 317C 0032 003C             		move.w	#$32,$3C(a0)
00019C88                            
00019C88                            loc_1933C:
00019C88 4268 0012                  		clr.w	$12(a0)
00019C8C 5428 0028                  		addq.b	#2,$28(a0)
00019C90                            
00019C90                            loc_19344:
00019C90 6000 FEAC                  		bra.w	loc_191F2
00019C94                            ; ===========================================================================
00019C94                            
00019C94                            loc_19348:				; XREF: off_192FA
00019C94 5368 003C                  		subq.w	#1,$3C(a0)
00019C98 6A00                       		bpl.s	loc_19366
00019C9A 5428 0028                  		addq.b	#2,$28(a0)
00019C9E 317C F800 0012             		move.w	#-$800,$12(a0)
00019CA4 4A68 0036                  		tst.w	$36(a0)
00019CA8 6600                       		bne.s	loc_19362
00019CAA E0E8 0012                  		asr	$12(a0)
00019CAE                            
00019CAE                            loc_19362:
00019CAE 7000                       		moveq	#0,d0
00019CB0 6000                       		bra.s	loc_1937C
00019CB2                            ; ===========================================================================
00019CB2                            
00019CB2                            loc_19366:
00019CB2 7000                       		moveq	#0,d0
00019CB4 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019CBA 6E00                       		bgt.s	loc_1937C
00019CBC 7002                       		moveq	#2,d0
00019CBE 0828 0001 003D             		btst	#1,$3D(a0)
00019CC4 6700                       		beq.s	loc_1937C
00019CC6 4440                       		neg.w	d0
00019CC8                            
00019CC8                            loc_1937C:
00019CC8 D068 0038                  		add.w	$38(a0),d0
00019CCC 3140 000C                  		move.w	d0,$C(a0)
00019CD0 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CD6 6000 FE76                  		bra.w	loc_19202
00019CDA                            ; ===========================================================================
00019CDA                            
00019CDA                            loc_1938E:				; XREF: off_192FA
00019CDA 303C 04DA                  		move.w	#$4DA,d0
00019CDE 4A68 0036                  		tst.w	$36(a0)
00019CE2 6700                       		beq.s	loc_1939C
00019CE4 0440 0018                  		subi.w	#$18,d0
00019CE8                            
00019CE8                            loc_1939C:
00019CE8 B068 0038                  		cmp.w	$38(a0),d0
00019CEC 6D00                       		blt.s	loc_193BE
00019CEE 317C 0008 003C             		move.w	#8,$3C(a0)
00019CF4 4A68 0036                  		tst.w	$36(a0)
00019CF8 6700                       		beq.s	loc_193B4
00019CFA 317C 002D 003C             		move.w	#$2D,$3C(a0)
00019D00                            
00019D00                            loc_193B4:
00019D00 5428 0028                  		addq.b	#2,$28(a0)
00019D04 4268 0012                  		clr.w	$12(a0)
00019D08 6000                       		bra.s	loc_193CC
00019D0A                            ; ===========================================================================
00019D0A                            
00019D0A                            loc_193BE:
00019D0A 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
00019D10 6C00                       		bge.s	loc_193CC
00019D12 0668 000C 0012             		addi.w	#$C,$12(a0)
00019D18                            
00019D18                            loc_193CC:
00019D18 6000 FE24                  		bra.w	loc_191F2
00019D1C                            ; ===========================================================================
00019D1C                            
00019D1C                            loc_193D0:				; XREF: off_192FA
00019D1C 5368 003C                  		subq.w	#1,$3C(a0)
00019D20 6E00                       		bgt.s	loc_19406
00019D22 6B00                       		bmi.s	loc_193EE
00019D24 70FF                       		moveq	#-1,d0
00019D26 3028 0036                  		move.w	$36(a0),d0
00019D2A 6700                       		beq.s	loc_193E8
00019D2C 2240                       		movea.l	d0,a1
00019D2E 137C 000A 0029             		move.b	#$A,$29(a1)
00019D34                            
00019D34                            loc_193E8:
00019D34 4268 0036                  		clr.w	$36(a0)
00019D38 6000                       		bra.s	loc_19406
00019D3A                            ; ===========================================================================
00019D3A                            
00019D3A                            loc_193EE:
00019D3A 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
00019D40 6600                       		bne.s	loc_19406
00019D42 4228 0029                  		clr.b	$29(a0)
00019D46 5528 0025                  		subq.b	#2,$25(a0)
00019D4A 117C 00FF 003D             		move.b	#-1,$3D(a0)
00019D50 6000                       		bra.s	loc_19446
00019D52                            ; ===========================================================================
00019D52                            
00019D52                            loc_19406:
00019D52 7001                       		moveq	#1,d0
00019D54 4A68 0036                  		tst.w	$36(a0)
00019D58 6700                       		beq.s	loc_19410
00019D5A 7002                       		moveq	#2,d0
00019D5C                            
00019D5C                            loc_19410:
00019D5C 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
00019D62 6700                       		beq.s	loc_19424
00019D64 6D00                       		blt.s	loc_1941C
00019D66 4440                       		neg.w	d0
00019D68                            
00019D68                            loc_1941C:
00019D68 4A68 0036                  		tst.w	$36(a0)
00019D6C D168 0038                  		add.w	d0,$38(a0)
00019D70                            
00019D70                            loc_19424:
00019D70 7000                       		moveq	#0,d0
00019D72 4A68 0036                  		tst.w	$36(a0)
00019D76 6700                       		beq.s	loc_19438
00019D78 7002                       		moveq	#2,d0
00019D7A 0828 0000 003D             		btst	#0,$3D(a0)
00019D80 6700                       		beq.s	loc_19438
00019D82 4440                       		neg.w	d0
00019D84                            
00019D84                            loc_19438:
00019D84 D068 0038                  		add.w	$38(a0),d0
00019D88 3140 000C                  		move.w	d0,$C(a0)
00019D8C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019D92                            
00019D92                            loc_19446:
00019D92 6000 FDBA                  		bra.w	loc_19202
00019D96                            
00019D96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019D96                            
00019D96                            
00019D96                            Obj75_FindBlocks:			; XREF: loc_192AE
00019D96 4268 0036                  		clr.w	$36(a0)
00019D9A 43F8 D040                  		lea	($FFFFD040).w,a1
00019D9E 703E                       		moveq	#$3E,d0
00019DA0 7276                       		moveq	#$76,d1
00019DA2 1428 0034                  		move.b	$34(a0),d2
00019DA6                            
00019DA6                            Obj75_FindLoop:
00019DA6 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019DA8 6600                       		bne.s	loc_1946A	; if not, branch
00019DAA B429 0028                  		cmp.b	$28(a1),d2
00019DAE 6600                       		bne.s	loc_1946A
00019DB0 3149 0036                  		move.w	a1,$36(a0)
00019DB4 6000                       		bra.s	locret_19472
00019DB6                            ; ===========================================================================
00019DB6                            
00019DB6                            loc_1946A:
00019DB6 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019DBA 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
00019DBE                            
00019DBE                            locret_19472:
00019DBE 4E75                       		rts	
00019DC0                            ; End of function Obj75_FindBlocks
00019DC0                            
00019DC0                            ; ===========================================================================
00019DC0                            
00019DC0                            loc_19474:				; XREF: Obj75_ShipIndex
00019DC0 5368 003C                  		subq.w	#1,$3C(a0)
00019DC4 6B00                       		bmi.s	loc_1947E
00019DC6 6000 E412                  		bra.w	BossDefeated
00019DCA                            ; ===========================================================================
00019DCA                            
00019DCA                            loc_1947E:
00019DCA 5428 0025                  		addq.b	#2,$25(a0)
00019DCE 4268 0012                  		clr.w	$12(a0)
00019DD2 08E8 0000 0022             		bset	#0,$22(a0)
00019DD8 08A8 0007 0022             		bclr	#7,$22(a0)
00019DDE 4268 0010                  		clr.w	$10(a0)
00019DE2 317C FFFF 003C             		move.w	#-1,$3C(a0)
00019DE8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019DEC 6600                       		bne.s	loc_194A8
00019DEE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019DF4                            
00019DF4                            loc_194A8:
00019DF4 6000 FD58                  		bra.w	loc_19202
00019DF8                            ; ===========================================================================
00019DF8                            
00019DF8                            loc_194AC:				; XREF: Obj75_ShipIndex
00019DF8 5268 003C                  		addq.w	#1,$3C(a0)
00019DFC 6700                       		beq.s	loc_194BC
00019DFE 6A00                       		bpl.s	loc_194C2
00019E00 0668 0018 0012             		addi.w	#$18,$12(a0)
00019E06 6000                       		bra.s	loc_194EE
00019E08                            ; ===========================================================================
00019E08                            
00019E08                            loc_194BC:
00019E08 4268 0012                  		clr.w	$12(a0)
00019E0C 6000                       		bra.s	loc_194EE
00019E0E                            ; ===========================================================================
00019E0E                            
00019E0E                            loc_194C2:
00019E0E 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
00019E14 6500                       		bcs.s	loc_194DA
00019E16 6700                       		beq.s	loc_194E0
00019E18 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019E1E 6500                       		bcs.s	loc_194EE
00019E20 5428 0025                  		addq.b	#2,$25(a0)
00019E24 6000                       		bra.s	loc_194EE
00019E26                            ; ===========================================================================
00019E26                            
00019E26                            loc_194DA:
00019E26 5168 0012                  		subq.w	#8,$12(a0)
00019E2A 6000                       		bra.s	loc_194EE
00019E2C                            ; ===========================================================================
00019E2C                            
00019E2C                            loc_194E0:
00019E2C 4268 0012                  		clr.w	$12(a0)
00019E30 303C 0085                  		move.w	#$85,d0
00019E34 4EB9 0000 15CC             		jsr	(PlaySound).l	; play SYZ music
00019E3A                            
00019E3A                            loc_194EE:
00019E3A 6000 FD02                  		bra.w	loc_191F2
00019E3E                            ; ===========================================================================
00019E3E                            
00019E3E                            loc_194F2:				; XREF: Obj75_ShipIndex
00019E3E 317C 0400 0010             		move.w	#$400,$10(a0)
00019E44 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019E4A 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
00019E50 6400                       		bcc.s	loc_1950C
00019E52 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019E56 6000                       		bra.s	loc_19512
00019E58                            ; ===========================================================================
00019E58                            
00019E58                            loc_1950C:
00019E58 4A28 0001                  		tst.b	1(a0)
00019E5C 6A00                       		bpl.s	Obj75_ShipDelete
00019E5E                            
00019E5E                            loc_19512:
00019E5E 6100 E3BC                  		bsr.w	BossMove
00019E62 6000 FCC6                  		bra.w	loc_191DE
00019E66                            ; ===========================================================================
00019E66                            
00019E66                            Obj75_ShipDelete:
00019E66 4EF9 0000 DE9C             		jmp	DeleteObject
00019E6C                            ; ===========================================================================
00019E6C                            
00019E6C                            Obj75_FaceMain:				; XREF: Obj75_Index
00019E6C 7201                       		moveq	#1,d1
00019E6E 2268 0034                  		movea.l	$34(a0),a1
00019E72 7000                       		moveq	#0,d0
00019E74 1029 0025                  		move.b	$25(a1),d0
00019E78 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019E7C 4EBB 0000                  		jsr	off_19546(pc,d0.w)
00019E80 1141 001C                  		move.b	d1,$1C(a0)
00019E84 1010                       		move.b	(a0),d0
00019E86 B011                       		cmp.b	(a1),d0
00019E88 6600                       		bne.s	Obj75_FaceDelete
00019E8A 6000                       		bra.s	loc_195BE
00019E8C                            ; ===========================================================================
00019E8C                            
00019E8C                            Obj75_FaceDelete:
00019E8C 4EF9 0000 DE9C             		jmp	DeleteObject
00019E92                            ; ===========================================================================
00019E92 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019E96 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019E9A 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
00019E9E                            ; ===========================================================================
00019E9E                            
00019E9E                            loc_19552:				; XREF: off_19546
00019E9E 720A                       		moveq	#$A,d1
00019EA0 4E75                       		rts	
00019EA2                            ; ===========================================================================
00019EA2                            
00019EA2                            loc_19556:				; XREF: off_19546
00019EA2 7206                       		moveq	#6,d1
00019EA4 4E75                       		rts	
00019EA6                            ; ===========================================================================
00019EA6                            
00019EA6                            loc_1955A:				; XREF: off_19546
00019EA6 7000                       		moveq	#0,d0
00019EA8 1029 0028                  		move.b	$28(a1),d0
00019EAC 303B 0000                  		move.w	off_19568(pc,d0.w),d0
00019EB0 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019EB4                            ; ===========================================================================
00019EB4 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019EB8 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019EBC                            ; ===========================================================================
00019EBC                            
00019EBC                            loc_19570:				; XREF: off_19568
00019EBC 6000                       		bra.s	loc_19574
00019EBE                            ; ===========================================================================
00019EBE                            
00019EBE                            loc_19572:				; XREF: off_19568
00019EBE 7206                       		moveq	#6,d1
00019EC0                            
00019EC0                            loc_19574:				; XREF: off_19546
00019EC0 4A29 0020                  		tst.b	$20(a1)
00019EC4 6600                       		bne.s	loc_1957E
00019EC6 7205                       		moveq	#5,d1
00019EC8 4E75                       		rts	
00019ECA                            ; ===========================================================================
00019ECA                            
00019ECA                            loc_1957E:
00019ECA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019ED0 6500                       		bcs.s	locret_19588
00019ED2 7204                       		moveq	#4,d1
00019ED4                            
00019ED4                            locret_19588:
00019ED4 4E75                       		rts	
00019ED6                            ; ===========================================================================
00019ED6                            
00019ED6                            Obj75_FlameMain:			; XREF: Obj75_Index
00019ED6 117C 0007 001C             		move.b	#7,$1C(a0)
00019EDC 2268 0034                  		movea.l	$34(a0),a1
00019EE0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019EE6 6600                       		bne.s	loc_195AA
00019EE8 117C 000B 001C             		move.b	#$B,$1C(a0)
00019EEE 4A28 0001                  		tst.b	1(a0)
00019EF2 6A00                       		bpl.s	Obj75_FlameDelete
00019EF4 6000                       		bra.s	loc_195B6
00019EF6                            ; ===========================================================================
00019EF6                            
00019EF6                            loc_195AA:
00019EF6 4A69 0010                  		tst.w	$10(a1)
00019EFA 6700                       		beq.s	loc_195B6
00019EFC 117C 0008 001C             		move.b	#8,$1C(a0)
00019F02                            
00019F02                            loc_195B6:
00019F02 6000                       		bra.s	loc_195BE
00019F04                            ; ===========================================================================
00019F04                            
00019F04                            Obj75_FlameDelete:
00019F04 4EF9 0000 DE9C             		jmp	DeleteObject
00019F0A                            ; ===========================================================================
00019F0A                            
00019F0A                            loc_195BE:
00019F0A 43F9 0001 865E             		lea	(Ani_Eggman).l,a1
00019F10 4EB9 0000 AEDA             		jsr	AnimateSprite
00019F16 2268 0034                  		movea.l	$34(a0),a1
00019F1A 3169 0008 0008             		move.w	8(a1),8(a0)
00019F20 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F26                            
00019F26                            loc_195DA:
00019F26 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019F2C 7003                       		moveq	#3,d0
00019F2E C028 0022                  		and.b	$22(a0),d0
00019F32 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019F38 8128 0001                  		or.b	d0,1(a0)
00019F3C 4EF9 0000 DE60             		jmp	DisplaySprite
00019F42                            ; ===========================================================================
00019F42                            
00019F42                            Obj75_SpikeMain:			; XREF: Obj75_Index
00019F42 217C 0001 878A 0004        		move.l	#Map_BossItems,4(a0)
00019F4A 317C 246C 0002             		move.w	#$246C,2(a0)
00019F50 117C 0005 001A             		move.b	#5,$1A(a0)
00019F56 2268 0034                  		movea.l	$34(a0),a1
00019F5A 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F60 6600                       		bne.s	loc_1961C
00019F62 4A28 0001                  		tst.b	1(a0)
00019F66 6A00                       		bpl.s	Obj75_SpikeDelete
00019F68                            
00019F68                            loc_1961C:
00019F68 3169 0008 0008             		move.w	8(a1),8(a0)
00019F6E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F74 3028 003C                  		move.w	$3C(a0),d0
00019F78 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019F7E 6600                       		bne.s	loc_19652
00019F80 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019F86 6700                       		beq.s	loc_1964C
00019F88 4A29 0028                  		tst.b	$28(a1)
00019F8C 6600                       		bne.s	loc_19658
00019F8E 0C40 0094                  		cmpi.w	#$94,d0
00019F92 6C00                       		bge.s	loc_19658
00019F94 5E40                       		addq.w	#7,d0
00019F96 6000                       		bra.s	loc_19658
00019F98                            ; ===========================================================================
00019F98                            
00019F98                            loc_1964C:
00019F98 4A69 003C                  		tst.w	$3C(a1)
00019F9C 6A00                       		bpl.s	loc_19658
00019F9E                            
00019F9E                            loc_19652:
00019F9E 4A40                       		tst.w	d0
00019FA0 6F00                       		ble.s	loc_19658
00019FA2 5B40                       		subq.w	#5,d0
00019FA4                            
00019FA4                            loc_19658:
00019FA4 3140 003C                  		move.w	d0,$3C(a0)
00019FA8 E440                       		asr.w	#2,d0
00019FAA D168 000C                  		add.w	d0,$C(a0)
00019FAE 117C 0008 0019             		move.b	#8,$19(a0)
00019FB4 117C 000C 0016             		move.b	#$C,$16(a0)
00019FBA 4228 0020                  		clr.b	$20(a0)
00019FBE 2268 0034                  		movea.l	$34(a0),a1
00019FC2 4A29 0020                  		tst.b	$20(a1)
00019FC6 6700                       		beq.s	loc_19688
00019FC8 4A29 0029                  		tst.b	$29(a1)
00019FCC 6600                       		bne.s	loc_19688
00019FCE 117C 0084 0020             		move.b	#$84,$20(a0)
00019FD4                            
00019FD4                            loc_19688:
00019FD4 6000 FF50                  		bra.w	loc_195DA
00019FD8                            ; ===========================================================================
00019FD8                            
00019FD8                            Obj75_SpikeDelete:
00019FD8 4EF9 0000 DE9C             		jmp	DeleteObject
00019FDE                            ; ===========================================================================
00019FDE                            ; ---------------------------------------------------------------------------
00019FDE                            ; Object 76 - blocks that Eggman picks up (SYZ)
00019FDE                            ; ---------------------------------------------------------------------------
00019FDE                            
00019FDE                            Obj76:					; XREF: Obj_Index
00019FDE 7000                       		moveq	#0,d0
00019FE0 1028 0024                  		move.b	$24(a0),d0
00019FE4 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
00019FE8 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
00019FEC                            ; ===========================================================================
00019FEC 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
00019FEE 0000                       		dc.w Obj76_Action-Obj76_Index
00019FF0 0000                       		dc.w loc_19762-Obj76_Index
00019FF2                            ; ===========================================================================
00019FF2                            
00019FF2                            Obj76_Main:				; XREF: Obj76_Index
00019FF2 7800                       		moveq	#0,d4
00019FF4 3A3C 2C10                  		move.w	#$2C10,d5
00019FF8 7C09                       		moveq	#9,d6
00019FFA 43D0                       		lea	(a0),a1
00019FFC 6000                       		bra.s	Obj76_MakeBlock
00019FFE                            ; ===========================================================================
00019FFE                            
00019FFE                            Obj76_Loop:
00019FFE 4EB9 0000 E2E6             		jsr	SingleObjLoad
0001A004 6600                       		bne.s	Obj76_ExitLoop
0001A006                            
0001A006                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A006 12BC 0076                  		move.b	#$76,(a1)
0001A00A 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A012 337C 4000 0002             		move.w	#$4000,2(a1)
0001A018 137C 0004 0001             		move.b	#4,1(a1)
0001A01E 137C 0010 0019             		move.b	#$10,$19(a1)
0001A024 137C 0010 0016             		move.b	#$10,$16(a1)
0001A02A 137C 0003 0018             		move.b	#3,$18(a1)
0001A030 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A034 337C 0582 000C             		move.w	#$582,$C(a1)
0001A03A 3344 0028                  		move.w	d4,$28(a1)
0001A03E 0644 0101                  		addi.w	#$101,d4
0001A042 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A046 5429 0024                  		addq.b	#2,$24(a1)
0001A04A 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A04E                            
0001A04E                            Obj76_ExitLoop:
0001A04E 4E75                       		rts	
0001A050                            ; ===========================================================================
0001A050                            
0001A050                            Obj76_Action:				; XREF: Obj76_Index
0001A050 1028 0029                  		move.b	$29(a0),d0
0001A054 B028 0028                  		cmp.b	$28(a0),d0
0001A058 6700                       		beq.s	Obj76_Solid
0001A05A 4A00                       		tst.b	d0
0001A05C 6B00                       		bmi.s	loc_19718
0001A05E                            
0001A05E                            loc_19712:
0001A05E 6100 0000                  		bsr.w	Obj76_Break
0001A062 6000                       		bra.s	Obj76_Display
0001A064                            ; ===========================================================================
0001A064                            
0001A064                            loc_19718:
0001A064 2268 0034                  		movea.l	$34(a0),a1
0001A068 4A29 0021                  		tst.b	$21(a1)
0001A06C 67F0                       		beq.s	loc_19712
0001A06E 3169 0008 0008             		move.w	8(a1),8(a0)
0001A074 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A07A 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A080 B2C8                       		cmpa.w	a0,a1
0001A082 6500                       		bcs.s	Obj76_Display
0001A084 3029 0012                  		move.w	$12(a1),d0
0001A088 48C0                       		ext.l	d0
0001A08A E080                       		asr.l	#8,d0
0001A08C D168 000C                  		add.w	d0,$C(a0)
0001A090 6000                       		bra.s	Obj76_Display
0001A092                            ; ===========================================================================
0001A092                            
0001A092                            Obj76_Solid:				; XREF: Obj76_Action
0001A092 323C 001B                  		move.w	#$1B,d1
0001A096 343C 0010                  		move.w	#$10,d2
0001A09A 363C 0011                  		move.w	#$11,d3
0001A09E 3828 0008                  		move.w	8(a0),d4
0001A0A2 4EB9 0001 0230             		jsr	SolidObject
0001A0A8                            
0001A0A8                            Obj76_Display:				; XREF: Obj76_Action
0001A0A8 4EF9 0000 DE60             		jmp	DisplaySprite
0001A0AE                            ; ===========================================================================
0001A0AE                            
0001A0AE                            loc_19762:				; XREF: Obj76_Index
0001A0AE 4A28 0001                  		tst.b	1(a0)
0001A0B2 6A00                       		bpl.s	Obj76_Delete
0001A0B4 4EB9 0000 DDC8             		jsr	ObjectFall
0001A0BA 4EF9 0000 DE60             		jmp	DisplaySprite
0001A0C0                            ; ===========================================================================
0001A0C0                            
0001A0C0                            Obj76_Delete:
0001A0C0 4EF9 0000 DE9C             		jmp	DeleteObject
0001A0C6                            
0001A0C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A0C6                            
0001A0C6                            
0001A0C6                            Obj76_Break:				; XREF: Obj76_Action
0001A0C6 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001A0CA 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001A0CE 7801                       		moveq	#1,d4
0001A0D0 7203                       		moveq	#3,d1
0001A0D2 7438                       		moveq	#$38,d2
0001A0D4 5428 0024                  		addq.b	#2,$24(a0)
0001A0D8 117C 0008 0019             		move.b	#8,$19(a0)
0001A0DE 117C 0008 0016             		move.b	#8,$16(a0)
0001A0E4 43D0                       		lea	(a0),a1
0001A0E6 6000                       		bra.s	Obj76_MakeFrag
0001A0E8                            ; ===========================================================================
0001A0E8                            
0001A0E8                            Obj76_LoopFrag:
0001A0E8 4EB9 0000 E2FC             		jsr	SingleObjLoad2
0001A0EE 6600                       		bne.s	loc_197D4
0001A0F0                            
0001A0F0                            Obj76_MakeFrag:
0001A0F0 45D0                       		lea	(a0),a2
0001A0F2 47D1                       		lea	(a1),a3
0001A0F4 7603                       		moveq	#3,d3
0001A0F6                            
0001A0F6                            loc_197AA:
0001A0F6 26DA                       		move.l	(a2)+,(a3)+
0001A0F8 26DA                       		move.l	(a2)+,(a3)+
0001A0FA 26DA                       		move.l	(a2)+,(a3)+
0001A0FC 26DA                       		move.l	(a2)+,(a3)+
0001A0FE 51CB FFF6                  		dbf	d3,loc_197AA
0001A102                            
0001A102 335C 0010                  		move.w	(a4)+,$10(a1)
0001A106 335C 0012                  		move.w	(a4)+,$12(a1)
0001A10A 361D                       		move.w	(a5)+,d3
0001A10C D769 0008                  		add.w	d3,8(a1)
0001A110 361D                       		move.w	(a5)+,d3
0001A112 D769 000C                  		add.w	d3,$C(a1)
0001A116 1344 001A                  		move.b	d4,$1A(a1)
0001A11A 5244                       		addq.w	#1,d4
0001A11C 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001A120                            
0001A120                            loc_197D4:
0001A120 303C 00CB                  		move.w	#$CB,d0
0001A124 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play smashing sound
0001A12A                            ; End of function Obj76_Break
0001A12A                            
0001A12A                            ; ===========================================================================
0001A12A FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001A12E 0180 FE00                  		dc.w $180, $FE00
0001A132 FF00 FF00                  		dc.w $FF00, $FF00
0001A136 0100 FF00                  		dc.w $100, $FF00
0001A13A FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001A13E 0010 0000                  		dc.w $10, 0
0001A142 0000 0010                  		dc.w 0,	$10
0001A146 0010 0010                  		dc.w $10, $10
0001A14A                            ; ---------------------------------------------------------------------------
0001A14A                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001A14A                            ; ---------------------------------------------------------------------------
0001A14A                            Map_obj76:
0001A14A                            	include "_maps\obj76.asm"
0001A14A                            ; ---------------------------------------------------------------------------
0001A14A                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001A14A                            ; ---------------------------------------------------------------------------
0001A14A 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001A14E 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001A152 0000                       		dc.w byte_19826-Map_obj76
0001A154 02                         byte_19808:	dc.b 2
0001A155 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001A15A 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001A15F 00                         		dc.b 0
0001A160 01                         byte_19814:	dc.b 1
0001A161 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001A166 01                         byte_1981A:	dc.b 1
0001A167 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001A16C 01                         byte_19820:	dc.b 1
0001A16D F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001A172 01                         byte_19826:	dc.b 1
0001A173 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001A178                            		even
0001A178                            		even
0001A178                            
0001A178                            ; ===========================================================================
0001A178                            
0001A178                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001A178 4EF9 0000 DE9C             		jmp	DeleteObject
0001A17E                            ; ===========================================================================
0001A17E                            ; ---------------------------------------------------------------------------
0001A17E                            ; Object 82 - Eggman (SBZ2)
0001A17E                            ; ---------------------------------------------------------------------------
0001A17E                            
0001A17E                            Obj82:					; XREF: Obj_Index
0001A17E 7000                       		moveq	#0,d0
0001A180 1028 0024                  		move.b	$24(a0),d0
0001A184 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001A188 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001A18C                            ; ===========================================================================
0001A18C 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001A18E 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001A190 0000                       		dc.w Obj82_Switch-Obj82_Index
0001A192                            
0001A192 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001A195 0400 03                    		dc.b 4,	0, 3
0001A198                            ; ===========================================================================
0001A198                            
0001A198                            Obj82_Main:				; XREF: Obj82_Index
0001A198 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001A19C 317C 2160 0008             		move.w	#$2160,8(a0)
0001A1A2 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001A1A8 117C 000F 0020             		move.b	#$F,$20(a0)
0001A1AE 117C 0010 0021             		move.b	#$10,$21(a0)
0001A1B4 08A8 0000 0022             		bclr	#0,$22(a0)
0001A1BA 4228 0025                  		clr.b	$25(a0)
0001A1BE 115A 0024                  		move.b	(a2)+,$24(a0)
0001A1C2 115A 001C                  		move.b	(a2)+,$1C(a0)
0001A1C6 115A 0018                  		move.b	(a2)+,$18(a0)
0001A1CA 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001A1D2 317C 0400 0002             		move.w	#$400,2(a0)
0001A1D8 117C 0004 0001             		move.b	#4,1(a0)
0001A1DE 08E8 0007 0001             		bset	#7,1(a0)
0001A1E4 117C 0020 0019             		move.b	#$20,$19(a0)
0001A1EA 4EB9 0000 E2FC             		jsr	SingleObjLoad2
0001A1F0 6600                       		bne.s	Obj82_Eggman
0001A1F2 2348 0034                  		move.l	a0,$34(a1)
0001A1F6 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001A1FA 337C 2130 0008             		move.w	#$2130,8(a1)
0001A200 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001A206 4228 0025                  		clr.b	$25(a0)
0001A20A 135A 0024                  		move.b	(a2)+,$24(a1)
0001A20E 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A212 135A 0018                  		move.b	(a2)+,$18(a1)
0001A216 237C 0000 C60E 0004        		move.l	#Map_obj32,4(a1)
0001A21E 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001A224 137C 0004 0001             		move.b	#4,1(a1)
0001A22A 08E9 0007 0001             		bset	#7,1(a1)
0001A230 137C 0010 0019             		move.b	#$10,$19(a1)
0001A236 137C 0000 001A             		move.b	#0,$1A(a1)
0001A23C                            
0001A23C                            Obj82_Eggman:				; XREF: Obj82_Index
0001A23C 7000                       		moveq	#0,d0
0001A23E 1028 0025                  		move.b	$25(a0),d0
0001A242 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001A246 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001A24A 43FA 0000                  		lea	Ani_obj82(pc),a1
0001A24E 4EB9 0000 AEDA             		jsr	AnimateSprite
0001A254 4EF9 0000 DE60             		jmp	DisplaySprite
0001A25A                            ; ===========================================================================
0001A25A 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001A25C 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001A25E 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001A260 0000                       		dc.w loc_19934-Obj82_EggIndex
0001A262                            ; ===========================================================================
0001A262                            
0001A262                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001A262 3028 0008                  		move.w	8(a0),d0
0001A266 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A26A 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001A26E 6400                       		bcc.s	loc_19934	; if not, branch
0001A270 5428 0025                  		addq.b	#2,$25(a0)
0001A274 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001A27A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A280                            
0001A280                            loc_19934:				; XREF: Obj82_EggIndex
0001A280 4EF9 0000 DE3A             		jmp	SpeedToPos
0001A286                            ; ===========================================================================
0001A286                            
0001A286                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001A286 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001A28A 6600                       		bne.s	loc_19954	; if time remains, branch
0001A28C 5428 0025                  		addq.b	#2,$25(a0)
0001A290 117C 0002 001C             		move.b	#2,$1C(a0)
0001A296 5868 000C                  		addq.w	#4,$C(a0)
0001A29A 317C 000F 003C             		move.w	#15,$3C(a0)
0001A2A0                            
0001A2A0                            loc_19954:
0001A2A0 60DE                       		bra.s	loc_19934
0001A2A2                            ; ===========================================================================
0001A2A2                            
0001A2A2                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001A2A2 5368 003C                  		subq.w	#1,$3C(a0)
0001A2A6 6E00                       		bgt.s	loc_199D0
0001A2A8 6600                       		bne.s	loc_1996A
0001A2AA 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001A2B0 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001A2B6                            
0001A2B6                            loc_1996A:
0001A2B6 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001A2BC 6E00                       		bgt.s	loc_19976
0001A2BE 4268 0010                  		clr.w	$10(a0)
0001A2C2                            
0001A2C2                            loc_19976:
0001A2C2 0668 0024 0012             		addi.w	#$24,$12(a0)
0001A2C8 4A68 0012                  		tst.w	$12(a0)
0001A2CC 6B00                       		bmi.s	Obj82_FindBlocks
0001A2CE 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001A2D4 6500                       		bcs.s	Obj82_FindBlocks
0001A2D6 317C 5357 0028             		move.w	#$5357,$28(a0)
0001A2DC 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001A2E2 6500                       		bcs.s	Obj82_FindBlocks
0001A2E4 317C 059B 000C             		move.w	#$59B,$C(a0)
0001A2EA 4268 0012                  		clr.w	$12(a0)
0001A2EE                            
0001A2EE                            Obj82_FindBlocks:
0001A2EE 3028 0010                  		move.w	$10(a0),d0
0001A2F2 8068 0012                  		or.w	$12(a0),d0
0001A2F6 6600                       		bne.s	loc_199D0
0001A2F8 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001A2FC 703E                       		moveq	#$3E,d0
0001A2FE 7240                       		moveq	#$40,d1
0001A300                            
0001A300                            Obj82_FindLoop:	
0001A300 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001A302 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001A306 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001A30A                            
0001A30A 6600                       		bne.s	loc_199D0
0001A30C 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001A312 5428 0025                  		addq.b	#2,$25(a0)
0001A316 117C 0001 001C             		move.b	#1,$1C(a0)
0001A31C                            
0001A31C                            loc_199D0:
0001A31C 6000 FF62                  		bra.w	loc_19934
0001A320                            ; ===========================================================================
0001A320                            
0001A320                            Obj82_Switch:				; XREF: Obj82_Index
0001A320 7000                       		moveq	#0,d0
0001A322 1028 0025                  		move.b	$25(a0),d0
0001A326 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001A32A 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001A32E                            ; ===========================================================================
0001A32E 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001A330 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001A332                            ; ===========================================================================
0001A332                            
0001A332                            loc_199E6:				; XREF: Obj82_SwIndex
0001A332 2268 0034                  		movea.l	$34(a0),a1
0001A336 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001A33C 6600                       		bne.s	Obj82_SwDisplay
0001A33E 117C 0001 001A             		move.b	#1,$1A(a0)
0001A344 5428 0025                  		addq.b	#2,$25(a0)
0001A348                            
0001A348                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001A348 4EF9 0000 DE60             		jmp	DisplaySprite
0001A34E                            ; ===========================================================================
0001A34E                            Ani_obj82:
0001A34E                            	include "_anim\obj82.asm"
0001A34E                            ; ---------------------------------------------------------------------------
0001A34E                            ; Animation script - Eggman (SBZ2)
0001A34E                            ; ---------------------------------------------------------------------------
0001A34E 0000                       		dc.w byte_19A10-Ani_obj82
0001A350 0000                       		dc.w byte_19A14-Ani_obj82
0001A352 0000                       		dc.w byte_19A18-Ani_obj82
0001A354 0000                       		dc.w byte_19A20-Ani_obj82
0001A356 0000                       		dc.w byte_19A24-Ani_obj82
0001A358 0000                       		dc.w byte_19A2A-Ani_obj82
0001A35A 0000                       		dc.w byte_19A30-Ani_obj82
0001A35C 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001A360 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001A364 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001A36C 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001A370 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001A376 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001A37C 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001A380                            		even
0001A380                            		even
0001A380                            
0001A380                            ; ---------------------------------------------------------------------------
0001A380                            ; Sprite mappings - Eggman (SBZ2)
0001A380                            ; ---------------------------------------------------------------------------
0001A380                            Map_obj82:
0001A380                            	include "_maps\obj82.asm"
0001A380                            ; ================================================================================
0001A380                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001A380                            ; ================================================================================
0001A380                            
0001A380                            DATAA16Z12RYSAF:
0001A380 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001A384 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001A388 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001A38C 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001A390 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001A394 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001A396 03                         DATAA16Z12RYSAF_0: dc.b $3
0001A397 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A39C E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A3A1 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A3A6 04                         DATAA16Z12RYSAF_1: dc.b $4
0001A3A7 E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001A3AC E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A3B1 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A3B6 FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001A3BB 04                         DATAA16Z12RYSAF_2: dc.b $4
0001A3BC E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001A3C1 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001A3C6 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001A3CB FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001A3D0 03                         DATAA16Z12RYSAF_3: dc.b $3
0001A3D1 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001A3D6 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001A3DB F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001A3E0 04                         DATAA16Z12RYSAF_4: dc.b $4
0001A3E1 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001A3E6 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001A3EB 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001A3F0 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001A3F5 04                         DATAA16Z12RYSAF_5: dc.b $4
0001A3F6 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A3FB E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A400 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A405 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A40A 07                         DATAA16Z12RYSAF_6: dc.b $7
0001A40B E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A410 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A415 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001A41A 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001A41F F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001A424 F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001A429 F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001A42E 04                         DATAA16Z12RYSAF_7: dc.b $4
0001A42F 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001A434 E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001A439 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001A43E F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001A443 05                         DATAA16Z12RYSAF_8: dc.b $5
0001A444 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001A449 E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001A44E 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001A453 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001A458 EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001A45D 08                         DATAA16Z12RYSAF_9: dc.b $8
0001A45E E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001A463 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001A468 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001A46D 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001A472 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001A477 F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001A47C 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001A481 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001A486 03                         DATAA16Z12RYSAF_A: dc.b $3
0001A487 EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001A48C F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001A491 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001A496                            	even
0001A496                            	even
0001A496                            
0001A496                            ; ===========================================================================
0001A496                            ; ---------------------------------------------------------------------------
0001A496                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001A496                            ; ---------------------------------------------------------------------------
0001A496                            
0001A496                            Obj83:					; XREF: Obj_Index
0001A496 7000                       		moveq	#0,d0
0001A498 1028 0024                  		move.b	$24(a0),d0
0001A49C 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001A4A0 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001A4A4                            ; ===========================================================================
0001A4A4 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001A4A6 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001A4A8 0000                       		dc.w loc_19C36-Obj83_Index
0001A4AA 0000                       		dc.w loc_19C62-Obj83_Index
0001A4AC 0000                       		dc.w loc_19C72-Obj83_Index
0001A4AE 0000                       		dc.w loc_19C80-Obj83_Index
0001A4B0                            ; ===========================================================================
0001A4B0                            
0001A4B0                            Obj83_Main:				; XREF: Obj83_Index
0001A4B0 317C 2080 0008             		move.w	#$2080,8(a0)
0001A4B6 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001A4BC 117C 0080 0019             		move.b	#$80,$19(a0)
0001A4C2 117C 0010 0016             		move.b	#$10,$16(a0)
0001A4C8 117C 0004 0001             		move.b	#4,1(a0)
0001A4CE 08E8 0007 0001             		bset	#7,1(a0)
0001A4D4 7800                       		moveq	#0,d4
0001A4D6 3A3C 2010                  		move.w	#$2010,d5
0001A4DA 7C07                       		moveq	#7,d6
0001A4DC 45E8 0030                  		lea	$30(a0),a2
0001A4E0                            
0001A4E0                            Obj83_MakeBlock:
0001A4E0 4EB9 0000 E2E6             		jsr	SingleObjLoad
0001A4E6 6600                       		bne.s	Obj83_ExitMake
0001A4E8 34C9                       		move.w	a1,(a2)+
0001A4EA 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001A4EE 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001A4F6 337C 4518 0002             		move.w	#$4518,2(a1)
0001A4FC 137C 0004 0001             		move.b	#4,1(a1)
0001A502 137C 0010 0019             		move.b	#$10,$19(a1)
0001A508 137C 0010 0016             		move.b	#$10,$16(a1)
0001A50E 137C 0003 0018             		move.b	#3,$18(a1)
0001A514 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001A518 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001A51E 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001A522 137C 0008 0024             		move.b	#8,$24(a1)
0001A528 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001A52C                            
0001A52C                            Obj83_ExitMake:
0001A52C 5428 0024                  		addq.b	#2,$24(a0)
0001A530 4E75                       		rts	
0001A532                            ; ===========================================================================
0001A532                            
0001A532                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001A532 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A538 6600                       		bne.s	Obj83_Solid	; if not, branch
0001A53A 4228 001A                  		clr.b	$1A(a0)
0001A53E 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001A542                            
0001A542                            Obj83_Solid:
0001A542 7000                       		moveq	#0,d0
0001A544 1028 001A                  		move.b	$1A(a0),d0
0001A548 4400                       		neg.b	d0
0001A54A 4880                       		ext.w	d0
0001A54C 5040                       		addq.w	#8,d0
0001A54E E940                       		asl.w	#4,d0
0001A550 383C 2100                  		move.w	#$2100,d4
0001A554 9840                       		sub.w	d0,d4
0001A556 1140 0019                  		move.b	d0,$19(a0)
0001A55A 3144 0008                  		move.w	d4,8(a0)
0001A55E 720B                       		moveq	#$B,d1
0001A560 D240                       		add.w	d0,d1
0001A562 7410                       		moveq	#$10,d2
0001A564 7611                       		moveq	#$11,d3
0001A566 4EF9 0001 0230             		jmp	SolidObject
0001A56C                            ; ===========================================================================
0001A56C                            
0001A56C                            loc_19C36:				; XREF: Obj83_Index
0001A56C 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001A572 6400                       		bcc.s	Obj83_Solid2
0001A574 70FF                       		moveq	#-1,d0
0001A576 1028 001A                  		move.b	$1A(a0),d0
0001A57A 4880                       		ext.w	d0
0001A57C D040                       		add.w	d0,d0
0001A57E 3030 0030                  		move.w	$30(a0,d0.w),d0
0001A582 2240                       		movea.l	d0,a1
0001A584 337C 474F 0028             		move.w	#$474F,$28(a1)
0001A58A 5228 001A                  		addq.b	#1,$1A(a0)
0001A58E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001A594 6700                       		beq.s	loc_19C62
0001A596                            
0001A596                            Obj83_Solid2:
0001A596 60AA                       		bra.s	Obj83_Solid
0001A598                            ; ===========================================================================
0001A598                            
0001A598                            loc_19C62:				; XREF: Obj83_Index
0001A598 08A8 0003 0022             		bclr	#3,$22(a0)
0001A59E 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001A5A4 6000 FBD2                  		bra.w	loc_1982C
0001A5A8                            ; ===========================================================================
0001A5A8                            
0001A5A8                            loc_19C72:				; XREF: Obj83_Index
0001A5A8 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001A5AE 6700                       		beq.s	Obj83_Break	; if yes, branch
0001A5B0 4EF9 0000 DE60             		jmp	DisplaySprite
0001A5B6                            ; ===========================================================================
0001A5B6                            
0001A5B6                            loc_19C80:				; XREF: Obj83_Index
0001A5B6 4A28 0001                  		tst.b	1(a0)
0001A5BA 6A00 FBBC                  		bpl.w	loc_1982C
0001A5BE 4EB9 0000 DDC8             		jsr	ObjectFall
0001A5C4 4EF9 0000 DE60             		jmp	DisplaySprite
0001A5CA                            ; ===========================================================================
0001A5CA                            
0001A5CA                            Obj83_Break:				; XREF: loc_19C72
0001A5CA 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001A5CE 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001A5D2 7801                       		moveq	#1,d4
0001A5D4 7203                       		moveq	#3,d1
0001A5D6 7438                       		moveq	#$38,d2
0001A5D8 5428 0024                  		addq.b	#2,$24(a0)
0001A5DC 117C 0008 0019             		move.b	#8,$19(a0)
0001A5E2 117C 0008 0016             		move.b	#8,$16(a0)
0001A5E8 43D0                       		lea	(a0),a1
0001A5EA 6000                       		bra.s	Obj83_MakeFrag
0001A5EC                            ; ===========================================================================
0001A5EC                            
0001A5EC                            Obj83_LoopFrag:
0001A5EC 4EB9 0000 E2FC             		jsr	SingleObjLoad2
0001A5F2 6600                       		bne.s	Obj83_BreakSnd
0001A5F4                            
0001A5F4                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001A5F4 45D0                       		lea	(a0),a2
0001A5F6 47D1                       		lea	(a1),a3
0001A5F8 7603                       		moveq	#3,d3
0001A5FA                            
0001A5FA                            loc_19CC4:
0001A5FA 26DA                       		move.l	(a2)+,(a3)+
0001A5FC 26DA                       		move.l	(a2)+,(a3)+
0001A5FE 26DA                       		move.l	(a2)+,(a3)+
0001A600 26DA                       		move.l	(a2)+,(a3)+
0001A602 51CB FFF6                  		dbf	d3,loc_19CC4
0001A606                            
0001A606 335C 0012                  		move.w	(a4)+,$12(a1)
0001A60A 361D                       		move.w	(a5)+,d3
0001A60C D769 0008                  		add.w	d3,8(a1)
0001A610 361D                       		move.w	(a5)+,d3
0001A612 D769 000C                  		add.w	d3,$C(a1)
0001A616 1344 001A                  		move.b	d4,$1A(a1)
0001A61A 5244                       		addq.w	#1,d4
0001A61C 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001A620                            
0001A620                            Obj83_BreakSnd:
0001A620 303C 00CB                  		move.w	#$CB,d0
0001A624 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play smashing sound
0001A62A 4EF9 0000 DE60             		jmp	DisplaySprite
0001A630                            ; ===========================================================================
0001A630 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001A634 0120 00C0                  		dc.w $120, $C0
0001A638 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001A63C 0010 0000                  		dc.w $10, 0
0001A640 0000 0010                  		dc.w 0,	$10
0001A644 0010 0010                  		dc.w $10, $10
0001A648                            ; ---------------------------------------------------------------------------
0001A648                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A648                            ; ---------------------------------------------------------------------------
0001A648                            Map_obj83:
0001A648                            	include "_maps\obj83.asm"
0001A648                            ; ---------------------------------------------------------------------------
0001A648                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001A648                            ; ---------------------------------------------------------------------------
0001A648 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001A64C 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001A650 0000                       		dc.w byte_19D46-Map_obj83
0001A652 01                         byte_19D1C:	dc.b 1
0001A653 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001A658 02                         byte_19D22:	dc.b 2
0001A659 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001A65E F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001A663 00                         		dc.b 0
0001A664 02                         byte_19D2E:	dc.b 2
0001A665 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001A66A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001A66F 00                         		dc.b 0
0001A670 02                         byte_19D3A:	dc.b 2
0001A671 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001A676 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001A67B 00                         		dc.b 0
0001A67C 02                         byte_19D46:	dc.b 2
0001A67D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001A682 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001A688 00                         		even
0001A688 00                         		even
0001A688                            
0001A688                            ; ===========================================================================
0001A688                            ; ---------------------------------------------------------------------------
0001A688                            ; Object 85 - Eggman (FZ)
0001A688                            ; ---------------------------------------------------------------------------
0001A688                            
0001A688                            Obj85_Delete:
0001A688 4EF9 0000 DE9C             		jmp	DeleteObject
0001A68E                            ; ===========================================================================
0001A68E                            
0001A68E                            Obj85:					; XREF: Obj_Index
0001A68E 7000                       		moveq	#0,d0
0001A690 1028 0024                  		move.b	$24(a0),d0
0001A694 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001A698 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001A69C                            ; ===========================================================================
0001A69C 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001A69E 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001A6A0 0000                       		dc.w loc_1A38E-Obj85_Index
0001A6A2 0000                       		dc.w loc_1A346-Obj85_Index
0001A6A4 0000                       		dc.w loc_1A2C6-Obj85_Index
0001A6A6 0000                       		dc.w loc_1A3AC-Obj85_Index
0001A6A8 0000                       		dc.w loc_1A264-Obj85_Index
0001A6AA                            
0001A6AA 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001A6B0 0001 A380                  		dc.l Map_obj82		; mappings pointer
0001A6B4 25B0 0590 0300             		dc.w $25B0, $590, $300
0001A6BA 0000 0000                  		dc.l Map_obj84
0001A6BE 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001A6C4 0000 0000                  		dc.l Map_FZBoss
0001A6C8 26E0 0596 0470             		dc.w $26E0, $596, $470
0001A6CE 0001 A380                  		dc.l Map_obj82
0001A6D2 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A6D8 0001 86C2                  		dc.l Map_Eggman
0001A6DC 26E0 0596 0400             		dc.w $26E0, $596, $400
0001A6E2 0001 86C2                  		dc.l Map_Eggman
0001A6E6                            
0001A6E6 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001A6EB 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001A6F0 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001A6F5 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001A6FA 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001A6FF 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001A704                            ; ===========================================================================
0001A704                            
0001A704                            Obj85_Main:				; XREF: Obj85_Index
0001A704 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001A708 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001A70C 2248                       		movea.l	a0,a1
0001A70E 7205                       		moveq	#5,d1
0001A710 6000                       		bra.s	Obj85_LoadBoss
0001A712                            ; ===========================================================================
0001A712                            
0001A712                            Obj85_Loop:
0001A712 4EB9 0000 E2FC             		jsr	SingleObjLoad2
0001A718 6600                       		bne.s	loc_19E20
0001A71A                            
0001A71A                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001A71A 12BC 0085                  		move.b	#$85,(a1)
0001A71E 335A 0008                  		move.w	(a2)+,8(a1)
0001A722 335A 000C                  		move.w	(a2)+,$C(a1)
0001A726 335A 0002                  		move.w	(a2)+,2(a1)
0001A72A 235A 0004                  		move.l	(a2)+,4(a1)
0001A72E 135B 0024                  		move.b	(a3)+,$24(a1)
0001A732 135B 001C                  		move.b	(a3)+,$1C(a1)
0001A736 135B 0018                  		move.b	(a3)+,$18(a1)
0001A73A 135B 0017                  		move.b	(a3)+,$17(a1)
0001A73E 135B 0016                  		move.b	(a3)+,$16(a1)
0001A742 137C 0004 0001             		move.b	#4,1(a1)
0001A748 08E8 0007 0001             		bset	#7,1(a0)
0001A74E 2348 0034                  		move.l	a0,$34(a1)
0001A752 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001A756                            
0001A756                            loc_19E20:
0001A756 45E8 0036                  		lea	$36(a0),a2
0001A75A 4EB9 0000 E2E6             		jsr	SingleObjLoad
0001A760 6600                       		bne.s	loc_19E5A
0001A762 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001A766 3489                       		move.w	a1,(a2)
0001A768 2348 0034                  		move.l	a0,$34(a1)
0001A76C 45E8 0038                  		lea	$38(a0),a2
0001A770 7400                       		moveq	#0,d2
0001A772 7203                       		moveq	#3,d1
0001A774                            
0001A774                            loc_19E3E:
0001A774 4EB9 0000 E2FC             		jsr	SingleObjLoad2
0001A77A 6600                       		bne.s	loc_19E5A
0001A77C 34C9                       		move.w	a1,(a2)+
0001A77E 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001A782 2348 0034                  		move.l	a0,$34(a1)
0001A786 1342 0028                  		move.b	d2,$28(a1)
0001A78A 5442                       		addq.w	#2,d2
0001A78C 51C9 FFE6                  		dbf	d1,loc_19E3E
0001A790                            
0001A790                            loc_19E5A:
0001A790 317C 0000 0034             		move.w	#0,$34(a0)
0001A796 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A79C 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A7A2                            
0001A7A2                            Obj85_Eggman:				; XREF: Obj85_Index
0001A7A2 7000                       		moveq	#0,d0
0001A7A4 1028 0034                  		move.b	$34(a0),d0
0001A7A8 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001A7AC 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001A7B0 4EF9 0000 DE60             		jmp	DisplaySprite
0001A7B6                            ; ===========================================================================
0001A7B6 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001A7BA 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001A7BE 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001A7C2 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001A7C6                            ; ===========================================================================
0001A7C6                            
0001A7C6                            loc_19E90:				; XREF: off_19E80
0001A7C6 4AB8 F680                  		tst.l	($FFFFF680).w
0001A7CA 6600                       		bne.s	loc_19EA2
0001A7CC 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001A7D2 6500                       		bcs.s	loc_19EA2
0001A7D4 5428 0034                  		addq.b	#2,$34(a0)
0001A7D8                            
0001A7D8                            loc_19EA2:
0001A7D8 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001A7DC 4E75                       		rts	
0001A7DE                            ; ===========================================================================
0001A7DE                            
0001A7DE                            loc_19EA8:				; XREF: off_19E80
0001A7DE 4A68 0030                  		tst.w	$30(a0)
0001A7E2 6A00                       		bpl.s	loc_19F10
0001A7E4 4268 0030                  		clr.w	$30(a0)
0001A7E8 4EB9 0000 2CD8             		jsr	(RandomNumber).l
0001A7EE 0240 000C                  		andi.w	#$C,d0
0001A7F2 3200                       		move.w	d0,d1
0001A7F4 5441                       		addq.w	#2,d1
0001A7F6 4A80                       		tst.l	d0
0001A7F8 6A00                       		bpl.s	loc_19EC6
0001A7FA C141                       		exg	d1,d0
0001A7FC                            
0001A7FC                            loc_19EC6:
0001A7FC 43FA 0000                  		lea	word_19FD6(pc),a1
0001A800 3031 0000                  		move.w	(a1,d0.w),d0
0001A804 3231 1000                  		move.w	(a1,d1.w),d1
0001A808 3140 0030                  		move.w	d0,$30(a0)
0001A80C 74FF                       		moveq	#-1,d2
0001A80E 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A812 2242                       		movea.l	d2,a1
0001A814 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A81A 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A820 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A824 2242                       		movea.l	d2,a1
0001A826 137C 0001 0029             		move.b	#1,$29(a1)
0001A82C 337C 0000 0030             		move.w	#0,$30(a1)
0001A832 317C 0001 0032             		move.w	#1,$32(a0)
0001A838 4228 0035                  		clr.b	$35(a0)
0001A83C 303C 00B7                  		move.w	#$B7,d0
0001A840 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A846                            
0001A846                            loc_19F10:
0001A846 4A68 0032                  		tst.w	$32(a0)
0001A84A 6B00 0000                  		bmi.w	loc_19FA6
0001A84E 08A8 0000 0022             		bclr	#0,$22(a0)
0001A854 3038 D008                  		move.w	($FFFFD008).w,d0
0001A858 9068 0008                  		sub.w	8(a0),d0
0001A85C 6500                       		bcs.s	loc_19F2E
0001A85E 08E8 0000 0022             		bset	#0,$22(a0)
0001A864                            
0001A864                            loc_19F2E:
0001A864 323C 002B                  		move.w	#$2B,d1
0001A868 343C 0014                  		move.w	#$14,d2
0001A86C 363C 0014                  		move.w	#$14,d3
0001A870 3828 0008                  		move.w	8(a0),d4
0001A874 4EB9 0001 0230             		jsr	SolidObject
0001A87A 4A44                       		tst.w	d4
0001A87C 6E00                       		bgt.s	loc_19F50
0001A87E                            
0001A87E                            loc_19F48:
0001A87E 4A28 0035                  		tst.b	$35(a0)
0001A882 6600                       		bne.s	loc_19F88
0001A884 6000                       		bra.s	loc_19F96
0001A886                            ; ===========================================================================
0001A886                            
0001A886                            loc_19F50:
0001A886 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A88A 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A890 66EC                       		bne.s	loc_19F48
0001A892 303C 0300                  		move.w	#$300,d0
0001A896 0828 0000 0022             		btst	#0,$22(a0)
0001A89C 6600                       		bne.s	loc_19F6A
0001A89E 4440                       		neg.w	d0
0001A8A0                            
0001A8A0                            loc_19F6A:
0001A8A0 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A8A4 4A28 0035                  		tst.b	$35(a0)
0001A8A8 6600                       		bne.s	loc_19F88
0001A8AA 5328 0021                  		subq.b	#1,$21(a0)
0001A8AE 117C 0064 0035             		move.b	#$64,$35(a0)
0001A8B4 303C 00AC                  		move.w	#$AC,d0
0001A8B8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A8BE                            
0001A8BE                            loc_19F88:
0001A8BE 5328 0035                  		subq.b	#1,$35(a0)
0001A8C2 6700                       		beq.s	loc_19F96
0001A8C4 117C 0003 001C             		move.b	#3,$1C(a0)
0001A8CA 6000                       		bra.s	loc_19F9C
0001A8CC                            ; ===========================================================================
0001A8CC                            
0001A8CC                            loc_19F96:
0001A8CC 117C 0001 001C             		move.b	#1,$1C(a0)
0001A8D2                            
0001A8D2                            loc_19F9C:
0001A8D2 43FA FA7A                  		lea	Ani_obj82(pc),a1
0001A8D6 4EF9 0000 AEDA             		jmp	AnimateSprite
0001A8DC                            ; ===========================================================================
0001A8DC                            
0001A8DC                            loc_19FA6:
0001A8DC 4A28 0021                  		tst.b	$21(a0)
0001A8E0 6700                       		beq.s	loc_19FBC
0001A8E2 5428 0034                  		addq.b	#2,$34(a0)
0001A8E6 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A8EC 4268 0032                  		clr.w	$32(a0)
0001A8F0 4E75                       		rts	
0001A8F2                            ; ===========================================================================
0001A8F2                            
0001A8F2                            loc_19FBC:
0001A8F2 117C 0006 0034             		move.b	#6,$34(a0)
0001A8F8 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A8FE 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A904 117C 0014 0016             		move.b	#$14,$16(a0)
0001A90A 4E75                       		rts	
0001A90C                            ; ===========================================================================
0001A90C 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A91C                            ; ===========================================================================
0001A91C                            
0001A91C                            loc_19FE6:				; XREF: off_19E80
0001A91C 70FF                       		moveq	#-1,d0
0001A91E 3028 0036                  		move.w	$36(a0),d0
0001A922 2240                       		movea.l	d0,a1
0001A924 4A68 0030                  		tst.w	$30(a0)
0001A928 6A00                       		bpl.s	loc_1A000
0001A92A 4268 0030                  		clr.w	$30(a0)
0001A92E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A934 6100                       		bsr.s	loc_1A020
0001A936                            
0001A936                            loc_1A000:
0001A936 700F                       		moveq	#$F,d0
0001A938 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A93C 6600                       		bne.s	loc_1A00A
0001A93E 6100                       		bsr.s	loc_1A020
0001A940                            
0001A940                            loc_1A00A:
0001A940 4A68 0032                  		tst.w	$32(a0)
0001A944 6700                       		beq.s	locret_1A01E
0001A946 5528 0034                  		subq.b	#2,$34(a0)
0001A94A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A950 4268 0032                  		clr.w	$32(a0)
0001A954                            
0001A954                            locret_1A01E:
0001A954 4E75                       		rts	
0001A956                            ; ===========================================================================
0001A956                            
0001A956                            loc_1A020:
0001A956 303C 00B1                  		move.w	#$B1,d0
0001A95A 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A960                            ; ===========================================================================
0001A960                            
0001A960                            loc_1A02A:				; XREF: off_19E80
0001A960 117C 0030 0017             		move.b	#$30,$17(a0)
0001A966 08E8 0000 0022             		bset	#0,$22(a0)
0001A96C 4EB9 0000 DE3A             		jsr	SpeedToPos
0001A972 117C 0006 001A             		move.b	#6,$1A(a0)
0001A978 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A97E 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A984 6500                       		bcs.s	loc_1A070
0001A986 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A98C 5428 0034                  		addq.b	#2,$34(a0)
0001A990 117C 0020 0017             		move.b	#$20,$17(a0)
0001A996 317C 0100 0010             		move.w	#$100,$10(a0)
0001A99C 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A9A2 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A9A6                            
0001A9A6                            loc_1A070:
0001A9A6 6000 0000                  		bra.w	loc_1A166
0001A9AA                            ; ===========================================================================
0001A9AA                            
0001A9AA                            loc_1A074:				; XREF: off_19E80
0001A9AA 08E8 0000 0022             		bset	#0,$22(a0)
0001A9B0 117C 0004 001C             		move.b	#4,$1C(a0)
0001A9B6 4EB9 0000 DE3A             		jsr	SpeedToPos
0001A9BC 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A9C2 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A9C8 6500                       		bcs.s	loc_1A09A
0001A9CA 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A9D0                            
0001A9D0                            loc_1A09A:
0001A9D0 317C 0400 0010             		move.w	#$400,$10(a0)
0001A9D6 3028 0008                  		move.w	8(a0),d0
0001A9DA 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A9DE 6A00                       		bpl.s	loc_1A0B4
0001A9E0 317C 0500 0010             		move.w	#$500,$10(a0)
0001A9E6 6000 0000                  		bra.w	loc_1A0F2
0001A9EA                            ; ===========================================================================
0001A9EA                            
0001A9EA                            loc_1A0B4:
0001A9EA 0440 0070                  		subi.w	#$70,d0
0001A9EE 6500                       		bcs.s	loc_1A0F2
0001A9F0 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A9F6 5140                       		subq.w	#8,d0
0001A9F8 6500                       		bcs.s	loc_1A0F2
0001A9FA 0468 0100 0010             		subi.w	#$100,$10(a0)
0001AA00 5140                       		subq.w	#8,d0
0001AA02 6500                       		bcs.s	loc_1A0F2
0001AA04 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AA0A 5140                       		subq.w	#8,d0
0001AA0C 6500                       		bcs.s	loc_1A0F2
0001AA0E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AA14 5140                       		subq.w	#8,d0
0001AA16 6500                       		bcs.s	loc_1A0F2
0001AA18 0468 0080 0010             		subi.w	#$80,$10(a0)
0001AA1E 0440 0038                  		subi.w	#$38,d0
0001AA22 6500                       		bcs.s	loc_1A0F2
0001AA24 4268 0010                  		clr.w	$10(a0)
0001AA28                            
0001AA28                            loc_1A0F2:
0001AA28 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001AA2E 6500                       		bcs.s	loc_1A110
0001AA30 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001AA36 317C 0240 0010             		move.w	#$240,$10(a0)
0001AA3C 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001AA42 5428 0034                  		addq.b	#2,$34(a0)
0001AA46                            
0001AA46                            loc_1A110:
0001AA46 6000                       		bra.s	loc_1A15C
0001AA48                            ; ===========================================================================
0001AA48                            
0001AA48                            loc_1A112:				; XREF: off_19E80
0001AA48 4EB9 0000 DE3A             		jsr	SpeedToPos
0001AA4E 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001AA54 6500                       		bcs.s	loc_1A124
0001AA56 4268 0010                  		clr.w	$10(a0)
0001AA5A                            
0001AA5A                            loc_1A124:
0001AA5A 0668 0034 0012             		addi.w	#$34,$12(a0)
0001AA60 4A68 0012                  		tst.w	$12(a0)
0001AA64 6B00                       		bmi.s	loc_1A142
0001AA66 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001AA6C 6500                       		bcs.s	loc_1A142
0001AA6E 317C 0592 000C             		move.w	#$592,$C(a0)
0001AA74 4268 0012                  		clr.w	$12(a0)
0001AA78                            
0001AA78                            loc_1A142:
0001AA78 3028 0010                  		move.w	$10(a0),d0
0001AA7C 8068 0012                  		or.w	$12(a0),d0
0001AA80 6600                       		bne.s	loc_1A15C
0001AA82 5428 0034                  		addq.b	#2,$34(a0)
0001AA86 317C FE80 0012             		move.w	#-$180,$12(a0)
0001AA8C 117C 0001 0021             		move.b	#1,$21(a0)
0001AA92                            
0001AA92                            loc_1A15C:
0001AA92 43FA F8BA                  		lea	Ani_obj82(pc),a1
0001AA96 4EB9 0000 AEDA             		jsr	AnimateSprite
0001AA9C                            
0001AA9C                            loc_1A166:
0001AA9C 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001AAA2 6C00                       		bge.s	loc_1A172
0001AAA4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001AAA8                            
0001AAA8                            loc_1A172:
0001AAA8 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001AAAE 6C00                       		bge.s	locret_1A190
0001AAB0 323C 001B                  		move.w	#$1B,d1
0001AAB4 343C 0070                  		move.w	#$70,d2
0001AAB8 363C 0071                  		move.w	#$71,d3
0001AABC 3828 0008                  		move.w	8(a0),d4
0001AAC0 4EF9 0001 0230             		jmp	SolidObject
0001AAC6                            ; ===========================================================================
0001AAC6                            
0001AAC6                            locret_1A190:
0001AAC6 4E75                       		rts	
0001AAC8                            ; ===========================================================================
0001AAC8                            
0001AAC8                            loc_1A192:				; XREF: off_19E80
0001AAC8 217C 0001 86C2 0004        		move.l	#Map_Eggman,4(a0)
0001AAD0 317C 0400 0002             		move.w	#$400,2(a0)
0001AAD6 117C 0000 001C             		move.b	#0,$1C(a0)
0001AADC 08E8 0000 0022             		bset	#0,$22(a0)
0001AAE2 4EB9 0000 DE3A             		jsr	SpeedToPos
0001AAE8 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001AAEE 6400                       		bcc.s	loc_1A1D0
0001AAF0 317C 0180 0010             		move.w	#$180,$10(a0)
0001AAF6 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001AAFC 117C 000F 0020             		move.b	#$F,$20(a0)
0001AB02 5428 0034                  		addq.b	#2,$34(a0)
0001AB06                            
0001AB06                            loc_1A1D0:
0001AB06 6000 FF8A                  		bra.w	loc_1A15C
0001AB0A                            ; ===========================================================================
0001AB0A                            
0001AB0A                            loc_1A1D4:				; XREF: off_19E80
0001AB0A 08E8 0000 0022             		bset	#0,$22(a0)
0001AB10 4EB9 0000 DE3A             		jsr	SpeedToPos
0001AB16 4A68 0030                  		tst.w	$30(a0)
0001AB1A 6600                       		bne.s	loc_1A1FC
0001AB1C 4A28 0020                  		tst.b	$20(a0)
0001AB20 6600                       		bne.s	loc_1A216
0001AB22 317C 001E 0030             		move.w	#$1E,$30(a0)
0001AB28 303C 00AC                  		move.w	#$AC,d0
0001AB2C 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001AB32                            
0001AB32                            loc_1A1FC:
0001AB32 5368 0030                  		subq.w	#1,$30(a0)
0001AB36 6600                       		bne.s	loc_1A216
0001AB38 4A28 0022                  		tst.b	$22(a0)
0001AB3C 6A00                       		bpl.s	loc_1A210
0001AB3E 317C 0060 0012             		move.w	#$60,$12(a0)
0001AB44 6000                       		bra.s	loc_1A216
0001AB46                            ; ===========================================================================
0001AB46                            
0001AB46                            loc_1A210:
0001AB46 117C 000F 0020             		move.b	#$F,$20(a0)
0001AB4C                            
0001AB4C                            loc_1A216:
0001AB4C 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001AB52 6D00                       		blt.s	loc_1A23A
0001AB54 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001AB5A 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001AB60 4278 D014                  		clr.w	($FFFFD014).w
0001AB64 4A68 0012                  		tst.w	$12(a0)
0001AB68 6A00                       		bpl.s	loc_1A248
0001AB6A 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001AB70                            
0001AB70                            loc_1A23A:
0001AB70 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001AB76 6D00                       		blt.s	loc_1A248
0001AB78 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001AB7E                            
0001AB7E                            loc_1A248:
0001AB7E 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001AB84 6500                       		bcs.s	loc_1A260
0001AB86 4A28 0001                  		tst.b	1(a0)
0001AB8A 6B00                       		bmi.s	loc_1A260
0001AB8C 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001AB92 6000 FAF4                  		bra.w	Obj85_Delete
0001AB96                            ; ===========================================================================
0001AB96                            
0001AB96                            loc_1A260:
0001AB96 6000 FEFA                  		bra.w	loc_1A15C
0001AB9A                            ; ===========================================================================
0001AB9A                            
0001AB9A                            loc_1A264:				; XREF: Obj85_Index
0001AB9A 2268 0034                  		movea.l	$34(a0),a1
0001AB9E 1011                       		move.b	(a1),d0
0001ABA0 B010                       		cmp.b	(a0),d0
0001ABA2 6600 FAE4                  		bne.w	Obj85_Delete
0001ABA6 117C 0007 001C             		move.b	#7,$1C(a0)
0001ABAC 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001ABB2 6C00                       		bge.s	loc_1A280
0001ABB4 6000                       		bra.s	loc_1A2A6
0001ABB6                            ; ===========================================================================
0001ABB6                            
0001ABB6                            loc_1A280:
0001ABB6 4A69 0010                  		tst.w	$10(a1)
0001ABBA 6700                       		beq.s	loc_1A28C
0001ABBC 117C 000B 001C             		move.b	#$B,$1C(a0)
0001ABC2                            
0001ABC2                            loc_1A28C:
0001ABC2 43FA DA9A                  		lea	Ani_Eggman(pc),a1
0001ABC6 4EB9 0000 AEDA             		jsr	AnimateSprite
0001ABCC                            
0001ABCC                            loc_1A296:
0001ABCC 2268 0034                  		movea.l	$34(a0),a1
0001ABD0 3169 0008 0008             		move.w	8(a1),8(a0)
0001ABD6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ABDC                            
0001ABDC                            loc_1A2A6:
0001ABDC 2268 0034                  		movea.l	$34(a0),a1
0001ABE0 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001ABE6 7003                       		moveq	#3,d0
0001ABE8 C028 0022                  		and.b	$22(a0),d0
0001ABEC 0228 00FC 0001             		andi.b	#-4,1(a0)
0001ABF2 8128 0001                  		or.b	d0,1(a0)
0001ABF6 4EF9 0000 DE60             		jmp	DisplaySprite
0001ABFC                            ; ===========================================================================
0001ABFC                            
0001ABFC                            loc_1A2C6:				; XREF: Obj85_Index
0001ABFC 2268 0034                  		movea.l	$34(a0),a1
0001AC00 1011                       		move.b	(a1),d0
0001AC02 B010                       		cmp.b	(a0),d0
0001AC04 6600 FA82                  		bne.w	Obj85_Delete
0001AC08 0CA9 0001 86C2 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC10 6700                       		beq.s	loc_1A2E4
0001AC12 117C 000A 001A             		move.b	#$A,$1A(a0)
0001AC18 60C2                       		bra.s	loc_1A2A6
0001AC1A                            ; ===========================================================================
0001AC1A                            
0001AC1A                            loc_1A2E4:
0001AC1A 117C 0001 001C             		move.b	#1,$1C(a0)
0001AC20 4A29 0021                  		tst.b	$21(a1)
0001AC24 6F00                       		ble.s	loc_1A312
0001AC26 117C 0006 001C             		move.b	#6,$1C(a0)
0001AC2C 217C 0001 86C2 0004        		move.l	#Map_Eggman,4(a0)
0001AC34 317C 0400 0002             		move.w	#$400,2(a0)
0001AC3A 43FA DA22                  		lea	Ani_Eggman(pc),a1
0001AC3E 4EB9 0000 AEDA             		jsr	AnimateSprite
0001AC44 6000 FF86                  		bra.w	loc_1A296
0001AC48                            ; ===========================================================================
0001AC48                            
0001AC48                            loc_1A312:
0001AC48 4A28 0001                  		tst.b	1(a0)
0001AC4C 6A00 FA3A                  		bpl.w	Obj85_Delete
0001AC50 6100 D588                  		bsr.w	BossDefeated
0001AC54 117C 0002 0018             		move.b	#2,$18(a0)
0001AC5A 117C 0000 001C             		move.b	#0,$1C(a0)
0001AC60 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001AC68 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001AC6E 43FA 0000                  		lea	Ani_obj85(pc),a1
0001AC72 4EB9 0000 AEDA             		jsr	AnimateSprite
0001AC78 6000 FF52                  		bra.w	loc_1A296
0001AC7C                            ; ===========================================================================
0001AC7C                            
0001AC7C                            loc_1A346:				; XREF: Obj85_Index
0001AC7C 08E8 0000 0022             		bset	#0,$22(a0)
0001AC82 2268 0034                  		movea.l	$34(a0),a1
0001AC86 0CA9 0001 86C2 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AC8E 6700                       		beq.s	loc_1A35E
0001AC90 6000 FF4A                  		bra.w	loc_1A2A6
0001AC94                            ; ===========================================================================
0001AC94                            
0001AC94                            loc_1A35E:
0001AC94 3169 0008 0008             		move.w	8(a1),8(a0)
0001AC9A 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001ACA0 4A28 001E                  		tst.b	$1E(a0)
0001ACA4 6600                       		bne.s	loc_1A376
0001ACA6 117C 0014 001E             		move.b	#$14,$1E(a0)
0001ACAC                            
0001ACAC                            loc_1A376:
0001ACAC 5328 001E                  		subq.b	#1,$1E(a0)
0001ACB0 6E00                       		bgt.s	loc_1A38A
0001ACB2 5228 001A                  		addq.b	#1,$1A(a0)
0001ACB6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001ACBC 6E00 F9CA                  		bgt.w	Obj85_Delete
0001ACC0                            
0001ACC0                            loc_1A38A:
0001ACC0 6000 FF0A                  		bra.w	loc_1A296
0001ACC4                            ; ===========================================================================
0001ACC4                            
0001ACC4                            loc_1A38E:				; XREF: Obj85_Index
0001ACC4 117C 000B 001A             		move.b	#$B,$1A(a0)
0001ACCA 3038 D008                  		move.w	($FFFFD008).w,d0
0001ACCE 9068 0008                  		sub.w	8(a0),d0
0001ACD2 6500                       		bcs.s	loc_1A3A6
0001ACD4 4A28 0001                  		tst.b	1(a0)
0001ACD8 6A00 F9AE                  		bpl.w	Obj85_Delete
0001ACDC                            
0001ACDC                            loc_1A3A6:
0001ACDC 4EF9 0000 DE60             		jmp	DisplaySprite
0001ACE2                            ; ===========================================================================
0001ACE2                            
0001ACE2                            loc_1A3AC:				; XREF: Obj85_Index
0001ACE2 117C 0000 001A             		move.b	#0,$1A(a0)
0001ACE8 08E8 0000 0022             		bset	#0,$22(a0)
0001ACEE 2268 0034                  		movea.l	$34(a0),a1
0001ACF2 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001ACF8 6600                       		bne.s	loc_1A3D0
0001ACFA 0CA9 0001 86C2 0004        		cmpi.l	#Map_Eggman,4(a1)
0001AD02 6700 F984                  		beq.w	Obj85_Delete
0001AD06                            
0001AD06                            loc_1A3D0:
0001AD06 6000 FED4                  		bra.w	loc_1A2A6
0001AD0A                            ; ===========================================================================
0001AD0A                            Ani_obj85:
0001AD0A                            	include "_anim\obj85.asm"
0001AD0A                            ; ---------------------------------------------------------------------------
0001AD0A                            ; Animation script - Eggman (FZ)
0001AD0A                            ; ---------------------------------------------------------------------------
0001AD0A 0000                       		dc.w byte_1A3D6-Ani_obj85
0001AD0C 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001AD10                            		even
0001AD10                            		even
0001AD10                            
0001AD10                            Map_Eggman2:
0001AD10                            	include "_maps\Eggman2.asm"
0001AD10                            ; ---------------------------------------------------------------------------
0001AD10                            ; Sprite mappings - Eggman (FZ)
0001AD10                            ; ---------------------------------------------------------------------------
0001AD10 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001AD12 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001AD14 06                         byte_1A3DE:	dc.b 6
0001AD15 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001AD1A EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001AD1F EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AD24 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AD29 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AD2E 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AD33 06                         byte_1A3FD:	dc.b 6
0001AD34 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001AD39 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001AD3E EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001AD43 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001AD48 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001AD4D 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001AD52                            		even
0001AD52                            		even
0001AD52                            
0001AD52                            Map_FZBoss:
0001AD52                            	include "_maps\FZ boss.asm"
0001AD52                            ; ---------------------------------------------------------------------------
0001AD52                            ; Sprite mappings - boss (FZ)
0001AD52                            ; ---------------------------------------------------------------------------
0001AD52 0000                       		dc.w byte_1A422-Map_FZBoss
0001AD54 0000                       		dc.w byte_1A42D-Map_FZBoss
0001AD56 0000                       		dc.w byte_1A43D-Map_FZBoss
0001AD58 02                         byte_1A422:	dc.b 2
0001AD59 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001AD5E 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001AD63 03                         byte_1A42D:	dc.b 3
0001AD64 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001AD69 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001AD6E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001AD73 02                         byte_1A43D:	dc.b 2
0001AD74 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001AD79 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001AD7E                            		even
0001AD7E                            		even
0001AD7E                            
0001AD7E                            ; ===========================================================================
0001AD7E                            
0001AD7E                            Obj84_Delete:
0001AD7E 4EF9 0000 DE9C             		jmp	DeleteObject
0001AD84                            ; ===========================================================================
0001AD84                            ; ---------------------------------------------------------------------------
0001AD84                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001AD84                            ; ---------------------------------------------------------------------------
0001AD84                            
0001AD84                            Obj84:					; XREF: Obj_Index
0001AD84 7000                       		moveq	#0,d0
0001AD86 1028 0024                  		move.b	$24(a0),d0
0001AD8A 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001AD8E 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001AD92                            ; ===========================================================================
0001AD92 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001AD94 0000                       		dc.w loc_1A4CE-Obj84_Index
0001AD96 0000                       		dc.w loc_1A57E-Obj84_Index
0001AD98                            
0001AD98 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001AD9C 2550 0620                  		dc.w $2550, $620
0001ADA0 2490 04C0                  		dc.w $2490, $4C0
0001ADA4 2510 04C0                  		dc.w $2510, $4C0
0001ADA8                            ; ===========================================================================
0001ADA8                            
0001ADA8                            Obj84_Main:				; XREF: Obj84_Index
0001ADA8 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001ADAC 7000                       		moveq	#0,d0
0001ADAE 1028 0028                  		move.b	$28(a0),d0
0001ADB2 D040                       		add.w	d0,d0
0001ADB4 D2C0                       		adda.w	d0,a1
0001ADB6 117C 0004 0001             		move.b	#4,1(a0)
0001ADBC 08E8 0007 0001             		bset	#7,1(a0)
0001ADC2 08E8 0004 0001             		bset	#4,1(a0)
0001ADC8 317C 0300 0002             		move.w	#$300,2(a0)
0001ADCE 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001ADD6 3159 0008                  		move.w	(a1)+,8(a0)
0001ADDA 3151 000C                  		move.w	(a1),$C(a0)
0001ADDE 3159 0038                  		move.w	(a1)+,$38(a0)
0001ADE2 117C 0020 0016             		move.b	#$20,$16(a0)
0001ADE8 117C 0060 0017             		move.b	#$60,$17(a0)
0001ADEE 117C 0020 0019             		move.b	#$20,$19(a0)
0001ADF4 117C 0060 0016             		move.b	#$60,$16(a0)
0001ADFA 117C 0003 0018             		move.b	#3,$18(a0)
0001AE00 5428 0024                  		addq.b	#2,$24(a0)
0001AE04                            
0001AE04                            loc_1A4CE:				; XREF: Obj84_Index
0001AE04 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AE0A 6F00                       		ble.s	loc_1A4DC
0001AE0C 08E8 0001 0001             		bset	#1,1(a0)
0001AE12                            
0001AE12                            loc_1A4DC:
0001AE12 42A8 003C                  		clr.l	$3C(a0)
0001AE16 4A28 0029                  		tst.b	$29(a0)
0001AE1A 6700                       		beq.s	loc_1A4EA
0001AE1C 5428 0024                  		addq.b	#2,$24(a0)
0001AE20                            
0001AE20                            loc_1A4EA:
0001AE20 2028 003C                  		move.l	$3C(a0),d0
0001AE24 2228 0038                  		move.l	$38(a0),d1
0001AE28 D280                       		add.l	d0,d1
0001AE2A 4841                       		swap	d1
0001AE2C 3141 000C                  		move.w	d1,$C(a0)
0001AE30 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001AE36 6600                       		bne.s	loc_1A524
0001AE38 4A68 0030                  		tst.w	$30(a0)
0001AE3C 6A00                       		bpl.s	loc_1A524
0001AE3E 70F6                       		moveq	#-$A,d0
0001AE40 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001AE46 6F00                       		ble.s	loc_1A514
0001AE48 700E                       		moveq	#$E,d0
0001AE4A                            
0001AE4A                            loc_1A514:
0001AE4A D240                       		add.w	d0,d1
0001AE4C 2268 0034                  		movea.l	$34(a0),a1
0001AE50 3341 000C                  		move.w	d1,$C(a1)
0001AE54 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE5A                            
0001AE5A                            loc_1A524:
0001AE5A 323C 002B                  		move.w	#$2B,d1
0001AE5E 343C 0060                  		move.w	#$60,d2
0001AE62 363C 0061                  		move.w	#$61,d3
0001AE66 3828 0008                  		move.w	8(a0),d4
0001AE6A 4EB9 0001 0230             		jsr	SolidObject
0001AE70 7000                       		moveq	#0,d0
0001AE72 3228 003C                  		move.w	$3C(a0),d1
0001AE76 6A00                       		bpl.s	loc_1A550
0001AE78 4441                       		neg.w	d1
0001AE7A 5141                       		subq.w	#8,d1
0001AE7C 6500                       		bcs.s	loc_1A55C
0001AE7E 5200                       		addq.b	#1,d0
0001AE80 E841                       		asr.w	#4,d1
0001AE82 D041                       		add.w	d1,d0
0001AE84 6000                       		bra.s	loc_1A55C
0001AE86                            ; ===========================================================================
0001AE86                            
0001AE86                            loc_1A550:
0001AE86 0441 0027                  		subi.w	#$27,d1
0001AE8A 6500                       		bcs.s	loc_1A55C
0001AE8C 5200                       		addq.b	#1,d0
0001AE8E E841                       		asr.w	#4,d1
0001AE90 D041                       		add.w	d1,d0
0001AE92                            
0001AE92                            loc_1A55C:
0001AE92 1140 001A                  		move.b	d0,$1A(a0)
0001AE96 3038 D008                  		move.w	($FFFFD008).w,d0
0001AE9A 9068 0008                  		sub.w	8(a0),d0
0001AE9E 6B00                       		bmi.s	loc_1A578
0001AEA0 0440 0140                  		subi.w	#$140,d0
0001AEA4 6B00                       		bmi.s	loc_1A578
0001AEA6 4A28 0001                  		tst.b	1(a0)
0001AEAA 6A00 FED2                  		bpl.w	Obj84_Delete
0001AEAE                            
0001AEAE                            loc_1A578:
0001AEAE 4EF9 0000 DE60             		jmp	DisplaySprite
0001AEB4                            ; ===========================================================================
0001AEB4                            
0001AEB4                            loc_1A57E:				; XREF: Obj84_Index
0001AEB4 7000                       		moveq	#0,d0
0001AEB6 1028 0028                  		move.b	$28(a0),d0
0001AEBA 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001AEBE 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001AEC2 6000 FF5C                  		bra.w	loc_1A4EA
0001AEC6                            ; ===========================================================================
0001AEC6 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001AEC8 0000                       		dc.w loc_1A598-off_1A590
0001AECA 0000                       		dc.w loc_1A604-off_1A590
0001AECC 0000                       		dc.w loc_1A604-off_1A590
0001AECE                            ; ===========================================================================
0001AECE                            
0001AECE                            loc_1A598:				; XREF: off_1A590
0001AECE 4A28 0029                  		tst.b	$29(a0)
0001AED2 6600                       		bne.s	loc_1A5D4
0001AED4 2268 0034                  		movea.l	$34(a0),a1
0001AED8 4A29 0021                  		tst.b	$21(a1)
0001AEDC 6600                       		bne.s	loc_1A5B4
0001AEDE 6100 D2FA                  		bsr.w	BossDefeated
0001AEE2 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001AEEA                            
0001AEEA                            loc_1A5B4:
0001AEEA 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001AEF2 6400                       		bcc.s	locret_1A602
0001AEF4 42A8 003C                  		clr.l	$3C(a0)
0001AEF8 2268 0034                  		movea.l	$34(a0),a1
0001AEFC 5369 0032                  		subq.w	#1,$32(a1)
0001AF00 4269 0030                  		clr.w	$30(a1)
0001AF04 5528 0024                  		subq.b	#2,$24(a0)
0001AF08 4E75                       		rts	
0001AF0A                            ; ===========================================================================
0001AF0A                            
0001AF0A                            loc_1A5D4:
0001AF0A 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001AF10 6C00                       		bge.s	loc_1A5E4
0001AF12 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001AF1A                            
0001AF1A                            loc_1A5E4:
0001AF1A 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001AF22 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001AF28 6E00                       		bgt.s	locret_1A602
0001AF2A 4268 003E                  		clr.w	$3E(a0)
0001AF2E 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001AF34 4228 0029                  		clr.b	$29(a0)
0001AF38                            
0001AF38                            locret_1A602:
0001AF38 4E75                       		rts	
0001AF3A                            ; ===========================================================================
0001AF3A                            
0001AF3A                            loc_1A604:				; XREF: off_1A590
0001AF3A 08E8 0001 0001             		bset	#1,1(a0)
0001AF40 4A28 0029                  		tst.b	$29(a0)
0001AF44 6600                       		bne.s	loc_1A646
0001AF46 2268 0034                  		movea.l	$34(a0),a1
0001AF4A 4A29 0021                  		tst.b	$21(a1)
0001AF4E 6600                       		bne.s	loc_1A626
0001AF50 6100 D288                  		bsr.w	BossDefeated
0001AF54 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001AF5C                            
0001AF5C                            loc_1A626:
0001AF5C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001AF64 6400                       		bcc.s	locret_1A674
0001AF66 42A8 003C                  		clr.l	$3C(a0)
0001AF6A 2268 0034                  		movea.l	$34(a0),a1
0001AF6E 5369 0032                  		subq.w	#1,$32(a1)
0001AF72 4269 0030                  		clr.w	$30(a1)
0001AF76 5528 0024                  		subq.b	#2,$24(a0)
0001AF7A 4E75                       		rts	
0001AF7C                            ; ===========================================================================
0001AF7C                            
0001AF7C                            loc_1A646:
0001AF7C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001AF82 6D00                       		blt.s	loc_1A656
0001AF84 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001AF8C                            
0001AF8C                            loc_1A656:
0001AF8C 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001AF94 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001AF9A 6D00                       		blt.s	locret_1A674
0001AF9C 4268 003E                  		clr.w	$3E(a0)
0001AFA0 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001AFA6 4228 0029                  		clr.b	$29(a0)
0001AFAA                            
0001AFAA                            locret_1A674:
0001AFAA 4E75                       		rts	
0001AFAC                            ; ===========================================================================
0001AFAC                            ; ---------------------------------------------------------------------------
0001AFAC                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AFAC                            ; ---------------------------------------------------------------------------
0001AFAC                            Map_obj84:
0001AFAC                            	include "_maps\obj84.asm"
0001AFAC                            ; ---------------------------------------------------------------------------
0001AFAC                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001AFAC                            ; ---------------------------------------------------------------------------
0001AFAC 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001AFB0 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001AFB4 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001AFB8 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AFBC 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001AFC0 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001AFC4 06                         byte_1A68E:	dc.b 6
0001AFC5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFCA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFCF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFD4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFD9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFDE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001AFE3 08                         byte_1A6AD:	dc.b 8
0001AFE4 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001AFE9 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001AFEE B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001AFF3 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001AFF8 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001AFFD B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B002 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B007 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B00C 0A                         byte_1A6D6:	dc.b $A
0001B00D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B012 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B017 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B01C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B021 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B026 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B02B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B030 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B035 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B03A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B03F 0C                         byte_1A709:	dc.b $C
0001B040 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B045 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B04A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B04F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B054 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B059 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B05E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B063 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B068 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B06D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B072 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B077 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B07C 0D                         byte_1A746:	dc.b $D
0001B07D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B082 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B087 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B08C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B091 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B096 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B09B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B0A0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B0A5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B0AA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B0AF 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B0B4 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B0B9 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B0BE 0E                         byte_1A788:	dc.b $E
0001B0BF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B0C4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B0C9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B0CE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B0D3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B0D8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B0DD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B0E2 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B0E7 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B0EC F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B0F1 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B0F6 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B0FB 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001B100 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001B105 02                         byte_1A7CF:	dc.b 2
0001B106 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001B10B 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001B110                            		even
0001B110                            		even
0001B110                            
0001B110                            ; ===========================================================================
0001B110                            ; ---------------------------------------------------------------------------
0001B110                            ; Object 86 - energy balls (FZ)
0001B110                            ; ---------------------------------------------------------------------------
0001B110                            
0001B110                            Obj86:					; XREF: Obj_Index
0001B110 7000                       		moveq	#0,d0
0001B112 1028 0024                  		move.b	$24(a0),d0
0001B116 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001B11A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001B11E                            ; ===========================================================================
0001B11E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001B120 0000                       		dc.w Obj86_Generator-Obj86_Index
0001B122 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001B124 0000                       		dc.w loc_1A962-Obj86_Index
0001B126 0000                       		dc.w loc_1A982-Obj86_Index
0001B128                            ; ===========================================================================
0001B128                            
0001B128                            Obj86_Main:				; XREF: Obj86_Index
0001B128 317C 2588 0008             		move.w	#$2588,8(a0)
0001B12E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B134 317C 0300 0002             		move.w	#$300,2(a0)
0001B13A 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001B142 117C 0000 001C             		move.b	#0,$1C(a0)
0001B148 117C 0003 0018             		move.b	#3,$18(a0)
0001B14E 117C 0008 0017             		move.b	#8,$17(a0)
0001B154 117C 0008 0016             		move.b	#8,$16(a0)
0001B15A 117C 0004 0001             		move.b	#4,1(a0)
0001B160 08E8 0007 0001             		bset	#7,1(a0)
0001B166 5428 0024                  		addq.b	#2,$24(a0)
0001B16A                            
0001B16A                            Obj86_Generator:			; XREF: Obj86_Index
0001B16A 2268 0034                  		movea.l	$34(a0),a1
0001B16E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001B174 6600                       		bne.s	loc_1A850
0001B176 10BC 003F                  		move.b	#$3F,(a0)
0001B17A 117C 0000 0024             		move.b	#0,$24(a0)
0001B180 4EF9 0000 DE60             		jmp	DisplaySprite
0001B186                            ; ===========================================================================
0001B186                            
0001B186                            loc_1A850:
0001B186 117C 0000 001C             		move.b	#0,$1C(a0)
0001B18C 4A28 0029                  		tst.b	$29(a0)
0001B190 6700                       		beq.s	loc_1A86C
0001B192 5428 0024                  		addq.b	#2,$24(a0)
0001B196 117C 0001 001C             		move.b	#1,$1C(a0)
0001B19C 117C 003E 0028             		move.b	#$3E,$28(a0)
0001B1A2                            
0001B1A2                            loc_1A86C:
0001B1A2 323C 0013                  		move.w	#$13,d1
0001B1A6 343C 0008                  		move.w	#8,d2
0001B1AA 363C 0011                  		move.w	#$11,d3
0001B1AE 3828 0008                  		move.w	8(a0),d4
0001B1B2 4EB9 0001 0230             		jsr	SolidObject
0001B1B8 3038 D008                  		move.w	($FFFFD008).w,d0
0001B1BC 9068 0008                  		sub.w	8(a0),d0
0001B1C0 6B00                       		bmi.s	loc_1A89A
0001B1C2 0440 0140                  		subi.w	#$140,d0
0001B1C6 6B00                       		bmi.s	loc_1A89A
0001B1C8 4A28 0001                  		tst.b	1(a0)
0001B1CC 6A00 FBB0                  		bpl.w	Obj84_Delete
0001B1D0                            
0001B1D0                            loc_1A89A:
0001B1D0 43FA 0000                  		lea	Ani_obj86(pc),a1
0001B1D4 4EB9 0000 AEDA             		jsr	AnimateSprite
0001B1DA 4EF9 0000 DE60             		jmp	DisplaySprite
0001B1E0                            ; ===========================================================================
0001B1E0                            
0001B1E0                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001B1E0 4A28 0029                  		tst.b	$29(a0)
0001B1E4 6700 0000                  		beq.w	loc_1A954
0001B1E8 4228 0029                  		clr.b	$29(a0)
0001B1EC D068 0030                  		add.w	$30(a0),d0
0001B1F0 0240 001E                  		andi.w	#$1E,d0
0001B1F4 D4C0                       		adda.w	d0,a2
0001B1F6 5868 0030                  		addq.w	#4,$30(a0)
0001B1FA 4268 0032                  		clr.w	$32(a0)
0001B1FE 7403                       		moveq	#3,d2
0001B200                            
0001B200                            Obj86_Loop:
0001B200 4EB9 0000 E2FC             		jsr	SingleObjLoad2
0001B206 6600 0000                  		bne.w	loc_1A954
0001B20A 12BC 0086                  		move.b	#$86,(a1)
0001B20E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B214 337C 053C 000C             		move.w	#$53C,$C(a1)
0001B21A 137C 0008 0024             		move.b	#8,$24(a1)
0001B220 337C 2300 0002             		move.w	#$2300,2(a1)
0001B226 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001B22E 137C 000C 0016             		move.b	#$C,$16(a1)
0001B234 137C 000C 0017             		move.b	#$C,$17(a1)
0001B23A 137C 0000 0020             		move.b	#0,$20(a1)
0001B240 137C 0003 0018             		move.b	#3,$18(a1)
0001B246 337C 003E 0028             		move.w	#$3E,$28(a1)
0001B24C 137C 0004 0001             		move.b	#4,1(a1)
0001B252 08E9 0007 0001             		bset	#7,1(a1)
0001B258 2348 0034                  		move.l	a0,$34(a1)
0001B25C 4EB9 0000 2CD8             		jsr	(RandomNumber).l
0001B262 3228 0032                  		move.w	$32(a0),d1
0001B266 C3FC FFB1                  		muls.w	#-$4F,d1
0001B26A 0641 2578                  		addi.w	#$2578,d1
0001B26E 0240 001F                  		andi.w	#$1F,d0
0001B272 0440 0010                  		subi.w	#$10,d0
0001B276 D041                       		add.w	d1,d0
0001B278 3340 0030                  		move.w	d0,$30(a1)
0001B27C 5268 0032                  		addq.w	#1,$32(a0)
0001B280 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001B286 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001B28A                            
0001B28A                            loc_1A954:
0001B28A 4A68 0032                  		tst.w	$32(a0)
0001B28E 6600                       		bne.s	loc_1A95E
0001B290 5428 0024                  		addq.b	#2,$24(a0)
0001B294                            
0001B294                            loc_1A95E:
0001B294 6000 FF0C                  		bra.w	loc_1A86C
0001B298                            ; ===========================================================================
0001B298                            
0001B298                            loc_1A962:				; XREF: Obj86_Index
0001B298 117C 0002 001C             		move.b	#2,$1C(a0)
0001B29E 4A68 0038                  		tst.w	$38(a0)
0001B2A2 6600                       		bne.s	loc_1A97E
0001B2A4 117C 0002 0024             		move.b	#2,$24(a0)
0001B2AA 2268 0034                  		movea.l	$34(a0),a1
0001B2AE 337C FFFF 0032             		move.w	#-1,$32(a1)
0001B2B4                            
0001B2B4                            loc_1A97E:
0001B2B4 6000 FEEC                  		bra.w	loc_1A86C
0001B2B8                            ; ===========================================================================
0001B2B8                            
0001B2B8                            loc_1A982:				; XREF: Obj86_Index
0001B2B8 7000                       		moveq	#0,d0
0001B2BA 1028 0025                  		move.b	$25(a0),d0
0001B2BE 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001B2C2 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001B2C6 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001B2CA 4EB9 0000 AEDA             		jsr	AnimateSprite
0001B2D0 4EF9 0000 DE60             		jmp	DisplaySprite
0001B2D6                            ; ===========================================================================
0001B2D6 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001B2D8 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001B2DA 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001B2DC                            ; ===========================================================================
0001B2DC                            
0001B2DC                            loc_1A9A6:				; XREF: Obj86_Index2
0001B2DC 3028 0030                  		move.w	$30(a0),d0
0001B2E0 9068 0008                  		sub.w	8(a0),d0
0001B2E4 E940                       		asl.w	#4,d0
0001B2E6 3140 0010                  		move.w	d0,$10(a0)
0001B2EA 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B2F0 5428 0025                  		addq.b	#2,$25(a0)
0001B2F4 4E75                       		rts	
0001B2F6                            ; ===========================================================================
0001B2F6                            
0001B2F6                            loc_1A9C0:				; XREF: Obj86_Index2
0001B2F6 4A68 0010                  		tst.w	$10(a0)
0001B2FA 6700                       		beq.s	loc_1A9E6
0001B2FC 4EB9 0000 DE3A             		jsr	SpeedToPos
0001B302 3028 0008                  		move.w	8(a0),d0
0001B306 9068 0030                  		sub.w	$30(a0),d0
0001B30A 6400                       		bcc.s	loc_1A9E6
0001B30C 4268 0010                  		clr.w	$10(a0)
0001B310 D168 0008                  		add.w	d0,8(a0)
0001B314 2268 0034                  		movea.l	$34(a0),a1
0001B318 5369 0032                  		subq.w	#1,$32(a1)
0001B31C                            
0001B31C                            loc_1A9E6:
0001B31C 117C 0000 001C             		move.b	#0,$1C(a0)
0001B322 5368 0028                  		subq.w	#1,$28(a0)
0001B326 6600                       		bne.s	locret_1AA1C
0001B328 5428 0025                  		addq.b	#2,$25(a0)
0001B32C 117C 0001 001C             		move.b	#1,$1C(a0)
0001B332 117C 009A 0020             		move.b	#$9A,$20(a0)
0001B338 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001B33E 7000                       		moveq	#0,d0
0001B340 3038 D008                  		move.w	($FFFFD008).w,d0
0001B344 9068 0008                  		sub.w	8(a0),d0
0001B348 3140 0010                  		move.w	d0,$10(a0)
0001B34C 317C 0140 0012             		move.w	#$140,$12(a0)
0001B352                            
0001B352                            locret_1AA1C:
0001B352 4E75                       		rts	
0001B354                            ; ===========================================================================
0001B354                            
0001B354                            loc_1AA1E:				; XREF: Obj86_Index2
0001B354 4EB9 0000 DE3A             		jsr	SpeedToPos
0001B35A 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001B360 6400                       		bcc.s	loc_1AA34
0001B362 5368 0028                  		subq.w	#1,$28(a0)
0001B366 6700                       		beq.s	loc_1AA34
0001B368 4E75                       		rts	
0001B36A                            ; ===========================================================================
0001B36A                            
0001B36A                            loc_1AA34:
0001B36A 2268 0034                  		movea.l	$34(a0),a1
0001B36E 5369 0038                  		subq.w	#1,$38(a1)
0001B372 6000 FA0A                  		bra.w	Obj84_Delete
0001B376                            ; ===========================================================================
0001B376                            Ani_obj86:
0001B376                            	include "_anim\obj86.asm"
0001B376                            ; ---------------------------------------------------------------------------
0001B376                            ; Animation script - energy ball launcher (FZ)
0001B376                            ; ---------------------------------------------------------------------------
0001B376 0000                       		dc.w byte_1AA46-Ani_obj86
0001B378 0000                       		dc.w byte_1AA4A-Ani_obj86
0001B37A 0000                       		dc.w byte_1AA50-Ani_obj86
0001B37C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001B380 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001B386 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001B38C                            		even
0001B38C                            		even
0001B38C                            
0001B38C                            ; ---------------------------------------------------------------------------
0001B38C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B38C                            ; ---------------------------------------------------------------------------
0001B38C                            Map_obj86:
0001B38C                            	include "_maps\obj86.asm"
0001B38C                            ; ---------------------------------------------------------------------------
0001B38C                            ; Sprite mappings - energy ball	launcher (FZ)
0001B38C                            ; ---------------------------------------------------------------------------
0001B38C 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001B390 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001B394 01                         byte_1AA5E:	dc.b 1
0001B395 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001B39A 01                         byte_1AA64:	dc.b 1
0001B39B F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001B3A0 01                         byte_1AA6A:	dc.b 1
0001B3A1 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001B3A6 01                         byte_1AA70:	dc.b 1
0001B3A7 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001B3AC                            		even
0001B3AC                            		even
0001B3AC                            
0001B3AC                            Ani_obj86a:
0001B3AC                            	include "_anim\obj86a.asm"
0001B3AC                            ; ---------------------------------------------------------------------------
0001B3AC                            ; Animation script - energy balls (FZ)
0001B3AC                            ; ---------------------------------------------------------------------------
0001B3AC 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001B3AE 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001B3B0 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001B3BF 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001B3CE 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001B3D2 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001B3DC                            		even
0001B3DC                            		even
0001B3DC                            
0001B3DC                            ; ---------------------------------------------------------------------------
0001B3DC                            ; Sprite mappings - energy balls (FZ)
0001B3DC                            ; ---------------------------------------------------------------------------
0001B3DC                            Map_obj86a:
0001B3DC                            	include "_maps\obj86a.asm"
0001B3DC                            ; ---------------------------------------------------------------------------
0001B3DC                            ; Sprite mappings - energy balls (FZ)
0001B3DC                            ; ---------------------------------------------------------------------------
0001B3DC 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001B3E0 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001B3E4 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001B3E8 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001B3EC 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001B3F0 0000                       		dc.w byte_1AB20-Map_obj86a
0001B3F2 02                         byte_1AABC:	dc.b 2
0001B3F3 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001B3F8 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001B3FD 02                         byte_1AAC7:	dc.b 2
0001B3FE F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001B403 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001B408 02                         byte_1AAD2:	dc.b 2
0001B409 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001B40E 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001B413 02                         byte_1AADD:	dc.b 2
0001B414 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001B419 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001B41E 02                         byte_1AAE8:	dc.b 2
0001B41F F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001B424 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001B429 02                         byte_1AAF3:	dc.b 2
0001B42A F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001B42F F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001B434 01                         byte_1AAFE:	dc.b 1
0001B435 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001B43A 01                         byte_1AB04:	dc.b 1
0001B43B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001B440 02                         byte_1AB0A:	dc.b 2
0001B441 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001B446 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001B44B 02                         byte_1AB15:	dc.b 2
0001B44C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001B451 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001B456 00                         byte_1AB20:	dc.b 0
0001B458 00                         		even
0001B458 00                         		even
0001B458                            
0001B458                            ; ===========================================================================
0001B458                            ; ---------------------------------------------------------------------------
0001B458                            ; Object 3E - prison capsule
0001B458                            ; ---------------------------------------------------------------------------
0001B458                            
0001B458                            Obj3E:					; XREF: Obj_Index
0001B458 7000                       		moveq	#0,d0
0001B45A 1028 0024                  		move.b	$24(a0),d0
0001B45E 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001B462 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001B466 3028 0008                  		move.w	8(a0),d0
0001B46A 0240 FF80                  		andi.w	#$FF80,d0
0001B46E 3238 F700                  		move.w	($FFFFF700).w,d1
0001B472 0441 0080                  		subi.w	#$80,d1
0001B476 0241 FF80                  		andi.w	#$FF80,d1
0001B47A 9041                       		sub.w	d1,d0
0001B47C 0C40 0280                  		cmpi.w	#$280,d0
0001B480 6200                       		bhi.s	Obj3E_Delete
0001B482 4EF9 0000 DE60             		jmp	DisplaySprite
0001B488                            ; ===========================================================================
0001B488                            
0001B488                            Obj3E_Delete:
0001B488 4EF9 0000 DE9C             		jmp	DeleteObject
0001B48E                            ; ===========================================================================
0001B48E 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001B490 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001B492 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001B494 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B496 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B498 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001B49A 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001B49C 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001B49E                            
0001B49E 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001B4A2 040C 0501                  		dc.b 4,	$C, 5, 1
0001B4A6 0610 0403                  		dc.b 6,	$10, 4,	3
0001B4AA 0810 0305                  		dc.b 8,	$10, 3,	5
0001B4AE                            ; ===========================================================================
0001B4AE                            
0001B4AE                            Obj3E_Main:				; XREF: Obj3E_Index
0001B4AE 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001B4B6 317C 049D 0002             		move.w	#$49D,2(a0)
0001B4BC 117C 0004 0001             		move.b	#4,1(a0)
0001B4C2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001B4C8 7000                       		moveq	#0,d0
0001B4CA 1028 0028                  		move.b	$28(a0),d0
0001B4CE E548                       		lsl.w	#2,d0
0001B4D0 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001B4D4 1159 0024                  		move.b	(a1)+,$24(a0)
0001B4D8 1159 0019                  		move.b	(a1)+,$19(a0)
0001B4DC 1159 0018                  		move.b	(a1)+,$18(a0)
0001B4E0 1159 001A                  		move.b	(a1)+,$1A(a0)
0001B4E4 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001B4E8 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001B4EA 117C 0006 0020             		move.b	#6,$20(a0)
0001B4F0 117C 0008 0021             		move.b	#8,$21(a0)
0001B4F6                            
0001B4F6                            Obj3E_Not02:
0001B4F6 4E75                       		rts	
0001B4F8                            ; ===========================================================================
0001B4F8                            
0001B4F8                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001B4F8 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001B4FE 6700                       		beq.s	Obj3E_ChkOpened
0001B500 323C 002B                  		move.w	#$2B,d1
0001B504 343C 0018                  		move.w	#$18,d2
0001B508 363C 0018                  		move.w	#$18,d3
0001B50C 3828 0008                  		move.w	8(a0),d4
0001B510 4EF9 0001 0230             		jmp	SolidObject
0001B516                            ; ===========================================================================
0001B516                            
0001B516                            Obj3E_ChkOpened:
0001B516 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001B51A 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001B51C 4228 0025                  		clr.b	$25(a0)
0001B520 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B526 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B52C                            
0001B52C                            Obj3E_DoOpen:
0001B52C 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001B532 4E75                       		rts	
0001B534                            ; ===========================================================================
0001B534                            
0001B534                            Obj3E_Switched:				; XREF: Obj3E_Index
0001B534 323C 0017                  		move.w	#$17,d1
0001B538 343C 0008                  		move.w	#8,d2
0001B53C 363C 0008                  		move.w	#8,d3
0001B540 3828 0008                  		move.w	8(a0),d4
0001B544 4EB9 0001 0230             		jsr	SolidObject
0001B54A 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001B550 4EB9 0000 AEDA             		jsr	AnimateSprite
0001B556 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001B55C 4A28 0025                  		tst.b	$25(a0)
0001B560 6700                       		beq.s	locret_1AC60
0001B562 5068 000C                  		addq.w	#8,$C(a0)
0001B566 117C 000A 0024             		move.b	#$A,$24(a0)
0001B56C 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001B572 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001B576 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001B57A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001B580 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001B586 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001B588 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001B58E 6000                       		bra.s	Obj3E_ContinueCode
0001B590                            
0001B590                            Obj3E_MoveLeft:
0001B590 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001B596                            
0001B596                            Obj3E_ContinueCode:
0001B596 4228 0025                  		clr.b	$25(a0)
0001B59A 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001B5A0 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001B5A6                            
0001B5A6                            locret_1AC60:
0001B5A6 4E75                       		rts	
0001B5A8                            ; ===========================================================================
0001B5A8                            
0001B5A8                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001B5A8 7007                       		moveq	#7,d0
0001B5AA C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B5AE 6600                       		bne.s	loc_1ACA0
0001B5B0 4EB9 0000 E2E6             		jsr	SingleObjLoad
0001B5B6 6600                       		bne.s	loc_1ACA0
0001B5B8 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001B5BC 3368 0008 0008             		move.w	8(a0),8(a1)
0001B5C2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B5C8 4EB9 0000 2CD8             		jsr	(RandomNumber).l
0001B5CE 7200                       		moveq	#0,d1
0001B5D0 1200                       		move.b	d0,d1
0001B5D2 E409                       		lsr.b	#2,d1
0001B5D4 0441 0020                  		subi.w	#$20,d1
0001B5D8 D369 0008                  		add.w	d1,8(a1)
0001B5DC E048                       		lsr.w	#8,d0
0001B5DE E608                       		lsr.b	#3,d0
0001B5E0 D169 000C                  		add.w	d0,$C(a1)
0001B5E4                            
0001B5E4                            loc_1ACA0:
0001B5E4 5368 001E                  		subq.w	#1,$1E(a0)
0001B5E8 6700                       		beq.s	Obj3E_MakeAnimal
0001B5EA 4E75                       		rts	
0001B5EC                            ; ===========================================================================
0001B5EC                            
0001B5EC                            Obj3E_MakeAnimal:
0001B5EC 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001B5F2 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001B5F8 117C 0006 001A             		move.b	#6,$1A(a0)
0001B5FE 317C 0096 001E             		move.w	#$96,$1E(a0)
0001B604 0668 0020 000C             		addi.w	#$20,$C(a0)
0001B60A 7C07                       		moveq	#7,d6
0001B60C 3A3C 009A                  		move.w	#$9A,d5
0001B610 78E4                       		moveq	#-$1C,d4
0001B612                            
0001B612                            Obj3E_Loop:
0001B612 4EB9 0000 E2E6             		jsr	SingleObjLoad
0001B618 6600                       		bne.s	locret_1ACF8
0001B61A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B61E 3368 0008 0008             		move.w	8(a0),8(a1)
0001B624 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B62A D969 0008                  		add.w	d4,8(a1)
0001B62E 5E44                       		addq.w	#7,d4
0001B630 3345 0036                  		move.w	d5,$36(a1)
0001B634 5145                       		subq.w	#8,d5
0001B636 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001B63A                            
0001B63A                            locret_1ACF8:
0001B63A 4E75                       		rts	
0001B63C                            ; ===========================================================================
0001B63C                            
0001B63C                            Obj3E_Animals:				; XREF: Obj3E_Index
0001B63C 7007                       		moveq	#7,d0
0001B63E C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001B642 6600                       		bne.s	loc_1AD38
0001B644 4EB9 0000 E2E6             		jsr	SingleObjLoad
0001B64A 6600                       		bne.s	loc_1AD38
0001B64C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001B650 3368 0008 0008             		move.w	8(a0),8(a1)
0001B656 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B65C 4EB9 0000 2CD8             		jsr	(RandomNumber).l
0001B662 0240 001F                  		andi.w	#$1F,d0
0001B666 5D40                       		subq.w	#6,d0
0001B668 4A41                       		tst.w	d1
0001B66A 6A00                       		bpl.s	loc_1AD2E
0001B66C 4440                       		neg.w	d0
0001B66E                            
0001B66E                            loc_1AD2E:
0001B66E D169 0008                  		add.w	d0,8(a1)
0001B672 337C 000C 0036             		move.w	#$C,$36(a1)
0001B678                            
0001B678                            loc_1AD38:
0001B678 5368 001E                  		subq.w	#1,$1E(a0)
0001B67C 6600                       		bne.s	locret_1AD48
0001B67E 5428 0024                  		addq.b	#2,$24(a0)
0001B682 317C 00B4 001E             		move.w	#180,$1E(a0)
0001B688                            
0001B688                            locret_1AD48:
0001B688 4E75                       		rts	
0001B68A                            ; ===========================================================================
0001B68A                            
0001B68A                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001B68A 703E                       		moveq	#$3E,d0
0001B68C 7228                       		moveq	#$28,d1
0001B68E 7440                       		moveq	#$40,d2
0001B690 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001B694                            
0001B694                            Obj3E_FindObj28:
0001B694 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001B696 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001B698 D2C2                       		adda.w	d2,a1		; next object RAM
0001B69A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001B69E                            
0001B69E 4EB9 0000 F4EC             		jsr	GotThroughAct
0001B6A4 4EF9 0000 DE9C             		jmp	DeleteObject
0001B6AA                            ; ===========================================================================
0001B6AA                            
0001B6AA                            Obj3E_Obj28Found:
0001B6AA 4E75                       		rts	
0001B6AC                            ; ===========================================================================
0001B6AC                            Ani_obj3E:
0001B6AC                            	include "_anim\obj3E.asm"
0001B6AC                            ; ---------------------------------------------------------------------------
0001B6AC                            ; Animation script - prison capsule
0001B6AC                            ; ---------------------------------------------------------------------------
0001B6AC 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B6AE 0000                       		dc.w byte_1AD70-Ani_obj3E
0001B6B0 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001B6B4                            		even
0001B6B4                            		even
0001B6B4                            
0001B6B4                            ; ---------------------------------------------------------------------------
0001B6B4                            ; Sprite mappings - prison capsule
0001B6B4                            ; ---------------------------------------------------------------------------
0001B6B4                            Map_obj3E:
0001B6B4                            	include "_maps\obj3E.asm"
0001B6B4                            ; ---------------------------------------------------------------------------
0001B6B4                            ; Sprite mappings - prison capsule
0001B6B4                            ; ---------------------------------------------------------------------------
0001B6B4 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001B6B8 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001B6BC 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001B6C0 0000                       		dc.w byte_1ADE2-Map_obj3E
0001B6C2 07                         byte_1AD82:	dc.b 7
0001B6C3 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001B6C8 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001B6CD E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001B6D2 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001B6D7 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001B6DC 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B6E1 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B6E6 01                         byte_1ADA6:	dc.b 1
0001B6E7 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001B6EC 06                         byte_1ADAC:	dc.b 6
0001B6ED 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001B6F2 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001B6F7 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001B6FC 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001B701 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001B706 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001B70B 01                         byte_1ADCB:	dc.b 1
0001B70C F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001B711 02                         byte_1ADD1:	dc.b 2
0001B712 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001B717 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001B71C 01                         byte_1ADDC:	dc.b 1
0001B71D F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001B722 00                         byte_1ADE2:	dc.b 0
0001B724 00                         		even
0001B724 00                         		even
0001B724                            
0001B724                            ; ---------------------------------------------------------------------------
0001B724                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001B724                            ; ---------------------------------------------------------------------------
0001B724                            
0001B724                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B724                            
0001B724                            
0001B724                            TouchResponse:				; XREF: Obj01
0001B724 4E71                       		nop	
0001B726 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001B72A 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001B72E 5142                       		subq.w	#8,d2
0001B730 7A00                       		moveq	#0,d5
0001B732 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001B736 5705                       		subq.b	#3,d5
0001B738 9645                       		sub.w	d5,d3
0001B73A 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001B740 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001B742 0643 000C                  		addi.w	#$C,d3
0001B746 7A0A                       		moveq	#$A,d5
0001B748                            
0001B748                            Touch_NoDuck:
0001B748 383C 0010                  		move.w	#$10,d4
0001B74C DA45                       		add.w	d5,d5
0001B74E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001B752 3C3C 005F                  		move.w	#$5F,d6
0001B756                            
0001B756                            Touch_Loop:
0001B756 4A29 0001                  		tst.b	1(a1)
0001B75A 6A00                       		bpl.s	Touch_NextObj
0001B75C 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001B760 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001B762                            
0001B762                            Touch_NextObj:
0001B762 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001B766 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001B76A                            
0001B76A 7000                       		moveq	#0,d0
0001B76C 4E75                       		rts	
0001B76E                            ; ===========================================================================
0001B76E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001B770 0C14                       		dc.b   $C, $14
0001B772 140C                       		dc.b  $14,  $C
0001B774 0410                       		dc.b	4, $10
0001B776 0C12                       		dc.b   $C, $12
0001B778 1010                       		dc.b  $10, $10
0001B77A 0606                       		dc.b	6,   6
0001B77C 180C                       		dc.b  $18,  $C
0001B77E 0C10                       		dc.b   $C, $10
0001B780 100C                       		dc.b  $10,  $C
0001B782 0808                       		dc.b	8,   8
0001B784 1410                       		dc.b  $14, $10
0001B786 1408                       		dc.b  $14,   8
0001B788 0E0E                       		dc.b   $E,  $E
0001B78A 1818                       		dc.b  $18, $18
0001B78C 2810                       		dc.b  $28, $10
0001B78E 1018                       		dc.b  $10, $18
0001B790 0810                       		dc.b	8, $10
0001B792 2070                       		dc.b  $20, $70
0001B794 4020                       		dc.b  $40, $20
0001B796 8020                       		dc.b  $80, $20
0001B798 2020                       		dc.b  $20, $20
0001B79A 0808                       		dc.b	8,   8
0001B79C 0404                       		dc.b	4,   4
0001B79E 2008                       		dc.b  $20,   8
0001B7A0 0C0C                       		dc.b   $C,  $C
0001B7A2 0804                       		dc.b	8,   4
0001B7A4 1804                       		dc.b  $18,   4
0001B7A6 2804                       		dc.b  $28,   4
0001B7A8 0408                       		dc.b	4,   8
0001B7AA 0418                       		dc.b	4, $18
0001B7AC 0428                       		dc.b	4, $28
0001B7AE 0420                       		dc.b	4, $20
0001B7B0 1818                       		dc.b  $18, $18
0001B7B2 0C18                       		dc.b   $C, $18
0001B7B4 4808                       		dc.b  $48,   8
0001B7B6                            ; ===========================================================================
0001B7B6                            
0001B7B6                            Touch_Height:				; XREF: TouchResponse
0001B7B6 0240 003F                  		andi.w	#$3F,d0
0001B7BA D040                       		add.w	d0,d0
0001B7BC 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001B7C0 7200                       		moveq	#0,d1
0001B7C2 121A                       		move.b	(a2)+,d1
0001B7C4 3029 0008                  		move.w	8(a1),d0
0001B7C8 9041                       		sub.w	d1,d0
0001B7CA 9042                       		sub.w	d2,d0
0001B7CC 6400                       		bcc.s	loc_1AE98
0001B7CE D241                       		add.w	d1,d1
0001B7D0 D041                       		add.w	d1,d0
0001B7D2 6500                       		bcs.s	Touch_Width
0001B7D4 6000 FF8C                  		bra.w	Touch_NextObj
0001B7D8                            ; ===========================================================================
0001B7D8                            
0001B7D8                            loc_1AE98:
0001B7D8 B044                       		cmp.w	d4,d0
0001B7DA 6200 FF86                  		bhi.w	Touch_NextObj
0001B7DE                            
0001B7DE                            Touch_Width:
0001B7DE 7200                       		moveq	#0,d1
0001B7E0 121A                       		move.b	(a2)+,d1
0001B7E2 3029 000C                  		move.w	$C(a1),d0
0001B7E6 9041                       		sub.w	d1,d0
0001B7E8 9043                       		sub.w	d3,d0
0001B7EA 6400                       		bcc.s	loc_1AEB6
0001B7EC D241                       		add.w	d1,d1
0001B7EE D240                       		add.w	d0,d1
0001B7F0 6500                       		bcs.s	Touch_ChkValue
0001B7F2 6000 FF6E                  		bra.w	Touch_NextObj
0001B7F6                            ; ===========================================================================
0001B7F6                            
0001B7F6                            loc_1AEB6:
0001B7F6 B045                       		cmp.w	d5,d0
0001B7F8 6200 FF68                  		bhi.w	Touch_NextObj
0001B7FC                            
0001B7FC                            Touch_ChkValue:
0001B7FC 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B800 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B804 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B808 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B80C 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B810 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B812 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B816                            
0001B816                            ; touch	response is $40-$7F
0001B816                            
0001B816 1029 0020                  		move.b	$20(a1),d0
0001B81A 0200 003F                  		andi.b	#$3F,d0
0001B81E 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B822 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B824 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B82A 6400 0000                  		bcc.w	locret_1AEF2
0001B82E 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B832                            
0001B832                            locret_1AEF2:
0001B832 4E75                       		rts	
0001B834                            ; ===========================================================================
0001B834                            
0001B834                            Touch_Monitor:
0001B834 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B838 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B83A 3028 000C                  		move.w	$C(a0),d0
0001B83E 0440 0010                  		subi.w	#$10,d0
0001B842 B069 000C                  		cmp.w	$C(a1),d0
0001B846 6500                       		bcs.s	locret_1AF2E
0001B848 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B84C 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B852 4A29 0025                  		tst.b	$25(a1)
0001B856 6600                       		bne.s	locret_1AF2E
0001B858 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B85C 4E75                       		rts	
0001B85E                            ; ===========================================================================
0001B85E                            
0001B85E                            loc_1AF1E:
0001B85E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B864 6600                       		bne.s	locret_1AF2E
0001B866 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B86A 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B86E                            
0001B86E                            locret_1AF2E:
0001B86E 4E75                       		rts	
0001B870                            ; ===========================================================================
0001B870                            
0001B870                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B870 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B874 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B876 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B87C 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B880                            
0001B880                            loc_1AF40:
0001B880 4A29 0021                  		tst.b	$21(a1)
0001B884 6700                       		beq.s	Touch_KillEnemy
0001B886 4468 0010                  		neg.w	$10(a0)
0001B88A 4468 0012                  		neg.w	$12(a0)
0001B88E E0E8 0010                  		asr	$10(a0)
0001B892 E0E8 0012                  		asr	$12(a0)
0001B896 137C 0000 0020             		move.b	#0,$20(a1)
0001B89C 5329 0021                  		subq.b	#1,$21(a1)
0001B8A0 6600                       		bne.s	locret_1AF68
0001B8A2 08E9 0007 0022             		bset	#7,$22(a1)
0001B8A8                            
0001B8A8                            locret_1AF68:
0001B8A8 4E75                       		rts	
0001B8AA                            ; ===========================================================================
0001B8AA                            
0001B8AA                            Touch_KillEnemy:
0001B8AA 08E9 0007 0022             		bset	#7,$22(a1)
0001B8B0 7000                       		moveq	#0,d0
0001B8B2 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B8B6 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B8BA 0C40 0006                  		cmpi.w	#6,d0
0001B8BE 6500                       		bcs.s	loc_1AF82
0001B8C0 7006                       		moveq	#6,d0
0001B8C2                            
0001B8C2                            loc_1AF82:
0001B8C2 3340 003E                  		move.w	d0,$3E(a1)
0001B8C6 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B8CA 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B8D0 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B8D2 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B8D6 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B8DC                            
0001B8DC                            loc_1AF9C:
0001B8DC 6100 0000                  		bsr.w	AddPoints
0001B8E0 7400                       		moveq	#0,d2	; GMZ
0001B8E2 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001B8E4 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001B8E6                            
0001B8E6                            TouchKE_Explode:
0001B8E6 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B8EA 137C 0000 0024             		move.b	#0,$24(a1)
0001B8F0 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001B8F4                            
0001B8F4                            TouchKE_NextExplosion:
0001B8F4 5802                       		addq.b	#4,d2
0001B8F6 4EB9 0000 E2E6             		jsr	SingleObjLoad
0001B8FC 6600                       		bne.s	TouchKE_NoExplosion
0001B8FE 336A 0008 0008             		move.w	8(a2),8(a1)
0001B904 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001B90A 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001B90E                            
0001B90E                            TouchKE_NoExplosion:
0001B90E 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001B910 4A68 0012                  		tst.w	$12(a0)
0001B914 6B00                       		bmi.s	loc_1AFC2
0001B916 3028 000C                  		move.w	$C(a0),d0
0001B91A B069 000C                  		cmp.w	$C(a1),d0
0001B91E 6400                       		bcc.s	loc_1AFCA
0001B920 4468 0012                  		neg.w	$12(a0)
0001B924 4E75                       		rts	
0001B926                            ; ===========================================================================
0001B926                            
0001B926                            loc_1AFC2:
0001B926 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B92C 4E75                       		rts	
0001B92E                            ; ===========================================================================
0001B92E                            
0001B92E                            loc_1AFCA:
0001B92E 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B934 4E75                       		rts	
0001B936                            ; ===========================================================================
0001B936 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B93E                            ; ===========================================================================
0001B93E                            
0001B93E                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B93E 08E9 0007 0022             		bset	#7,$22(a1)
0001B944                            
0001B944                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B944 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B948 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B94A                            
0001B94A                            loc_1AFE6:				; XREF: Touch_Hurt
0001B94A 70FF                       		moveq	#-1,d0
0001B94C 4E75                       		rts	
0001B94E                            ; ===========================================================================
0001B94E                            
0001B94E                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B94E 4E71                       		nop	
0001B950 4A68 0030                  		tst.w	$30(a0)
0001B954 66F4                       		bne.s	loc_1AFE6
0001B956 2449                       		movea.l	a1,a2
0001B958                            
0001B958                            ; End of function TouchResponse
0001B958                            ; continue straight to HurtSonic
0001B958                            
0001B958                            ; ---------------------------------------------------------------------------
0001B958                            ; Hurting Sonic	subroutine
0001B958                            ; ---------------------------------------------------------------------------
0001B958                            
0001B958                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B958                            
0001B958                            
0001B958                            HurtSonic:
0001B958 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B95C 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B95E 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B962 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B966 4EB9 0000 E2E6             		jsr	SingleObjLoad
0001B96C 6600                       		bne.s	Hurt_Shield
0001B96E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B972 3368 0008 0008             		move.w	8(a0),8(a1)
0001B978 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B97E                            
0001B97E                            Hurt_Shield:
0001B97E 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B984 117C 0004 0024             		move.b	#4,$24(a0)
0001B98A 6100 8716                  		bsr.w	Sonic_ResetOnFloor
0001B98E 08E8 0001 0022             		bset	#1,$22(a0)
0001B994 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B99A 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B9A0 0828 0006 0022             		btst	#6,$22(a0)
0001B9A6 6700                       		beq.s	Hurt_Reverse
0001B9A8 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B9AE 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B9B4                            
0001B9B4                            Hurt_Reverse:
0001B9B4 3028 0008                  		move.w	8(a0),d0
0001B9B8 B06A 0008                  		cmp.w	8(a2),d0
0001B9BC 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B9BE 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B9C2                            
0001B9C2                            Hurt_ChkSpikes:
0001B9C2 317C 0000 0014             		move.w	#0,$14(a0)
0001B9C8 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B9CE 317C 0078 0030             		move.w	#$78,$30(a0)
0001B9D4 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B9D8 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B9DC 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B9DE 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B9E2 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B9E4 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B9E8                            
0001B9E8                            Hurt_Sound:
0001B9E8 4EB9 0000 15D2             		jsr	(PlaySound_Special).l
0001B9EE 70FF                       		moveq	#-1,d0
0001B9F0 4E75                       		rts	
0001B9F2                            ; ===========================================================================
0001B9F2                            
0001B9F2                            Hurt_NoRings:
0001B9F2 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B9F6 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B9FA                            ; End of function HurtSonic
0001B9FA                            
0001B9FA                            ; ---------------------------------------------------------------------------
0001B9FA                            ; Subroutine to	kill Sonic
0001B9FA                            ; ---------------------------------------------------------------------------
0001B9FA                            
0001B9FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9FA                            
0001B9FA                            
0001B9FA                            KillSonic:
0001B9FA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B9FE 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001BA00 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001BA06 117C 0006 0024             		move.b	#6,$24(a0)
0001BA0C 6100 8694                  		bsr.w	Sonic_ResetOnFloor
0001BA10 08E8 0001 0022             		bset	#1,$22(a0)
0001BA16 317C F900 0012             		move.w	#-$700,$12(a0)
0001BA1C 317C 0000 0010             		move.w	#0,$10(a0)
0001BA22 317C 0000 0014             		move.w	#0,$14(a0)
0001BA28 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001BA2E 117C 0018 001C             		move.b	#$18,$1C(a0)
0001BA34 08E8 0007 0002             		bset	#7,2(a0)
0001BA3A 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001BA3E 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001BA42 6600                       		bne.s	Kill_Sound
0001BA44 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001BA48                            
0001BA48                            Kill_Sound:
0001BA48 4EB9 0000 15D2             		jsr	(PlaySound_Special).l
0001BA4E                            
0001BA4E                            Kill_NoDeath:
0001BA4E 70FF                       		moveq	#-1,d0
0001BA50 4E75                       		rts	
0001BA52                            ; End of function KillSonic
0001BA52                            
0001BA52                            
0001BA52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA52                            
0001BA52                            
0001BA52                            Touch_Special:				; XREF: Touch_ChkValue
0001BA52 1229 0020                  		move.b	$20(a1),d1
0001BA56 0201 003F                  		andi.b	#$3F,d1
0001BA5A 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001BA5E 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001BA60 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001BA64 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001BA66 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001BA6A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BA6C 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001BA70 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001BA72 4E75                       		rts	
0001BA74                            ; ===========================================================================
0001BA74                            
0001BA74                            Touch_CatKiller:			; XREF: Touch_Special
0001BA74 6000 FEC8                  		bra.w	loc_1AFDA
0001BA78                            ; ===========================================================================
0001BA78                            
0001BA78                            Touch_Yadrin:				; XREF: Touch_Special
0001BA78 9A40                       		sub.w	d0,d5
0001BA7A 0C45 0008                  		cmpi.w	#8,d5
0001BA7E 6400                       		bcc.s	loc_1B144
0001BA80 3029 0008                  		move.w	8(a1),d0
0001BA84 5940                       		subq.w	#4,d0
0001BA86 0829 0000 0022             		btst	#0,$22(a1)
0001BA8C 6700                       		beq.s	loc_1B130
0001BA8E 0440 0010                  		subi.w	#$10,d0
0001BA92                            
0001BA92                            loc_1B130:
0001BA92 9042                       		sub.w	d2,d0
0001BA94 6400                       		bcc.s	loc_1B13C
0001BA96 0640 0018                  		addi.w	#$18,d0
0001BA9A 6500                       		bcs.s	loc_1B140
0001BA9C 6000                       		bra.s	loc_1B144
0001BA9E                            ; ===========================================================================
0001BA9E                            
0001BA9E                            loc_1B13C:
0001BA9E B044                       		cmp.w	d4,d0
0001BAA0 6200                       		bhi.s	loc_1B144
0001BAA2                            
0001BAA2                            loc_1B140:
0001BAA2 6000 FEA0                  		bra.w	Touch_ChkHurt
0001BAA6                            ; ===========================================================================
0001BAA6                            
0001BAA6                            loc_1B144:
0001BAA6 6000 FDC8                  		bra.w	Touch_Enemy
0001BAAA                            ; ===========================================================================
0001BAAA                            
0001BAAA                            Touch_D7orE1:				; XREF: Touch_Special
0001BAAA 5229 0021                  		addq.b	#1,$21(a1)
0001BAAE 4E75                       		rts	
0001BAB0                            ; End of function Touch_Special
0001BAB0                            
0001BAB0                            ; ---------------------------------------------------------------------------
0001BAB0                            ; Subroutine to	show the special stage layout
0001BAB0                            ; ---------------------------------------------------------------------------
0001BAB0                            
0001BAB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAB0                            
0001BAB0                            
0001BAB0                            SS_ShowLayout:				; XREF: SpecialStage
0001BAB0 6100 0000                  		bsr.w	SS_AniWallsRings
0001BAB4 6100 0000                  		bsr.w	SS_AniItems
0001BAB8 3F05                       		move.w	d5,-(sp)
0001BABA 43F8 8000                  		lea	($FFFF8000).w,a1
0001BABE 1038 F780                  		move.b	($FFFFF780).w,d0
0001BAC2 0200 00FC                  		andi.b	#$FC,d0
0001BAC6 4EB9 0000 2CFE             		jsr	(CalcSine).l
0001BACC 3800                       		move.w	d0,d4
0001BACE 3A01                       		move.w	d1,d5
0001BAD0 C9FC 0018                  		muls.w	#$18,d4
0001BAD4 CBFC 0018                  		muls.w	#$18,d5
0001BAD8 7400                       		moveq	#0,d2
0001BADA 3438 F700                  		move.w	($FFFFF700).w,d2
0001BADE 84FC 0018                  		divu.w	#$18,d2
0001BAE2 4842                       		swap	d2
0001BAE4 4442                       		neg.w	d2
0001BAE6 0642 FF4C                  		addi.w	#-$B4,d2
0001BAEA 7600                       		moveq	#0,d3
0001BAEC 3638 F704                  		move.w	($FFFFF704).w,d3
0001BAF0 86FC 0018                  		divu.w	#$18,d3
0001BAF4 4843                       		swap	d3
0001BAF6 4443                       		neg.w	d3
0001BAF8 0643 FF4C                  		addi.w	#-$B4,d3
0001BAFC 3E3C 000F                  		move.w	#$F,d7
0001BB00                            
0001BB00                            loc_1B19E:
0001BB00 48A7 E000                  		movem.w	d0-d2,-(sp)
0001BB04 48A7 C000                  		movem.w	d0-d1,-(sp)
0001BB08 4440                       		neg.w	d0
0001BB0A C3C2                       		muls.w	d2,d1
0001BB0C C1C3                       		muls.w	d3,d0
0001BB0E 2C00                       		move.l	d0,d6
0001BB10 DC81                       		add.l	d1,d6
0001BB12 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001BB16 C1C2                       		muls.w	d2,d0
0001BB18 C3C3                       		muls.w	d3,d1
0001BB1A D280                       		add.l	d0,d1
0001BB1C 2406                       		move.l	d6,d2
0001BB1E 3C3C 000F                  		move.w	#$F,d6
0001BB22                            
0001BB22                            loc_1B1C0:
0001BB22 2002                       		move.l	d2,d0
0001BB24 E080                       		asr.l	#8,d0
0001BB26 32C0                       		move.w	d0,(a1)+
0001BB28 2001                       		move.l	d1,d0
0001BB2A E080                       		asr.l	#8,d0
0001BB2C 32C0                       		move.w	d0,(a1)+
0001BB2E D485                       		add.l	d5,d2
0001BB30 D284                       		add.l	d4,d1
0001BB32 51CE FFEE                  		dbf	d6,loc_1B1C0
0001BB36                            
0001BB36 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001BB3A 0643 0018                  		addi.w	#$18,d3
0001BB3E 51CF FFC0                  		dbf	d7,loc_1B19E
0001BB42                            
0001BB42 3A1F                       		move.w	(sp)+,d5
0001BB44 41F9 00FF 0000             		lea	($FF0000).l,a0
0001BB4A 7000                       		moveq	#0,d0
0001BB4C 3038 F704                  		move.w	($FFFFF704).w,d0
0001BB50 80FC 0018                  		divu.w	#$18,d0
0001BB54 C0FC 0080                  		mulu.w	#$80,d0
0001BB58 D1C0                       		adda.l	d0,a0
0001BB5A 7000                       		moveq	#0,d0
0001BB5C 3038 F700                  		move.w	($FFFFF700).w,d0
0001BB60 80FC 0018                  		divu.w	#$18,d0
0001BB64 D0C0                       		adda.w	d0,a0
0001BB66 49F8 8000                  		lea	($FFFF8000).w,a4
0001BB6A 3E3C 000F                  		move.w	#$F,d7
0001BB6E                            
0001BB6E                            loc_1B20C:
0001BB6E 3C3C 000F                  		move.w	#$F,d6
0001BB72                            
0001BB72                            loc_1B210:
0001BB72 7000                       		moveq	#0,d0
0001BB74 1018                       		move.b	(a0)+,d0
0001BB76 6700                       		beq.s	loc_1B268
0001BB78 0C00 004E                  		cmpi.b	#$4E,d0
0001BB7C 6200                       		bhi.s	loc_1B268
0001BB7E 3614                       		move.w	(a4),d3
0001BB80 0643 0120                  		addi.w	#$120,d3
0001BB84 0C43 0070                  		cmpi.w	#$70,d3
0001BB88 6500                       		bcs.s	loc_1B268
0001BB8A 0C43 01D0                  		cmpi.w	#$1D0,d3
0001BB8E 6400                       		bcc.s	loc_1B268
0001BB90 342C 0002                  		move.w	2(a4),d2
0001BB94 0642 00F0                  		addi.w	#$F0,d2
0001BB98 0C42 0070                  		cmpi.w	#$70,d2
0001BB9C 6500                       		bcs.s	loc_1B268
0001BB9E 0C42 0170                  		cmpi.w	#$170,d2
0001BBA2 6400                       		bcc.s	loc_1B268
0001BBA4 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001BBAA E748                       		lsl.w	#3,d0
0001BBAC 4BF5 0000                  		lea	(a5,d0.w),a5
0001BBB0 225D                       		movea.l	(a5)+,a1
0001BBB2 321D                       		move.w	(a5)+,d1
0001BBB4 D241                       		add.w	d1,d1
0001BBB6 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001BBBA 365D                       		movea.w	(a5)+,a3
0001BBBC 7200                       		moveq	#0,d1
0001BBBE 1219                       		move.b	(a1)+,d1
0001BBC0 5301                       		subq.b	#1,d1
0001BBC2 6B00                       		bmi.s	loc_1B268
0001BBC4 4EB9 0000 DFBE             		jsr	sub_D762
0001BBCA                            
0001BBCA                            loc_1B268:
0001BBCA 584C                       		addq.w	#4,a4
0001BBCC 51CE FFA4                  		dbf	d6,loc_1B210
0001BBD0                            
0001BBD0 41E8 0070                  		lea	$70(a0),a0
0001BBD4 51CF FF98                  		dbf	d7,loc_1B20C
0001BBD8                            
0001BBD8 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001BBDC 0C05 0050                  		cmpi.b	#$50,d5
0001BBE0 6700                       		beq.s	loc_1B288
0001BBE2 24BC 0000 0000             		move.l	#0,(a2)
0001BBE8 4E75                       		rts	
0001BBEA                            ; ===========================================================================
0001BBEA                            
0001BBEA                            loc_1B288:
0001BBEA 157C 0000 FFFB             		move.b	#0,-5(a2)
0001BBF0 4E75                       		rts	
0001BBF2                            ; End of function SS_ShowLayout
0001BBF2                            
0001BBF2                            ; ---------------------------------------------------------------------------
0001BBF2                            ; Subroutine to	animate	walls and rings	in the special stage
0001BBF2                            ; ---------------------------------------------------------------------------
0001BBF2                            
0001BBF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBF2                            
0001BBF2                            
0001BBF2                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001BBF2 43F9 00FF 400C             		lea	($FF400C).l,a1
0001BBF8 7000                       		moveq	#0,d0
0001BBFA 1038 F780                  		move.b	($FFFFF780).w,d0
0001BBFE E408                       		lsr.b	#2,d0
0001BC00 0240 000F                  		andi.w	#$F,d0
0001BC04 7223                       		moveq	#$23,d1
0001BC06                            
0001BC06                            loc_1B2A4:
0001BC06 3280                       		move.w	d0,(a1)
0001BC08 5049                       		addq.w	#8,a1
0001BC0A 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001BC0E                            
0001BC0E 43F9 00FF 4005             		lea	($FF4005).l,a1
0001BC14 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001BC18 6A00                       		bpl.s	loc_1B2C8
0001BC1A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001BC20 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001BC24 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001BC2A                            
0001BC2A                            loc_1B2C8:
0001BC2A 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001BC30 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001BC34 6A00                       		bpl.s	loc_1B2E4
0001BC36 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001BC3C 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001BC40 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001BC46                            
0001BC46                            loc_1B2E4:
0001BC46 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001BC4A 1340 0138                  		move.b	d0,$138(a1)
0001BC4E 1340 0160                  		move.b	d0,$160(a1)
0001BC52 1340 0148                  		move.b	d0,$148(a1)
0001BC56 1340 0150                  		move.b	d0,$150(a1)
0001BC5A 1340 01D8                  		move.b	d0,$1D8(a1)
0001BC5E 1340 01E0                  		move.b	d0,$1E0(a1)
0001BC62 1340 01E8                  		move.b	d0,$1E8(a1)
0001BC66 1340 01F0                  		move.b	d0,$1F0(a1)
0001BC6A 1340 01F8                  		move.b	d0,$1F8(a1)
0001BC6E 1340 0200                  		move.b	d0,$200(a1)
0001BC72 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001BC76 6A00                       		bpl.s	loc_1B326
0001BC78 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001BC7E 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001BC82 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001BC88                            
0001BC88                            loc_1B326:
0001BC88 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001BC8C 1340 0168                  		move.b	d0,$168(a1)
0001BC90 1340 0170                  		move.b	d0,$170(a1)
0001BC94 1340 0178                  		move.b	d0,$178(a1)
0001BC98 1340 0180                  		move.b	d0,$180(a1)
0001BC9C 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001BCA0 6A00                       		bpl.s	loc_1B350
0001BCA2 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001BCA8 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001BCAC 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001BCB2                            
0001BCB2                            loc_1B350:
0001BCB2 43F9 00FF 4016             		lea	($FF4016).l,a1
0001BCB8 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001BCBE 7000                       		moveq	#0,d0
0001BCC0 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001BCC4 D040                       		add.w	d0,d0
0001BCC6 41F0 0000                  		lea	(a0,d0.w),a0
0001BCCA 3290                       		move.w	(a0),(a1)
0001BCCC 3368 0002 0008             		move.w	2(a0),8(a1)
0001BCD2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BCD8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BCDE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BCE4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BCEA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BCF0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BCF6 D0FC 0020                  		adda.w	#$20,a0
0001BCFA D2FC 0048                  		adda.w	#$48,a1
0001BCFE 3290                       		move.w	(a0),(a1)
0001BD00 3368 0002 0008             		move.w	2(a0),8(a1)
0001BD06 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BD0C 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD12 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD18 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD1E 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD24 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD2A D0FC 0020                  		adda.w	#$20,a0
0001BD2E D2FC 0048                  		adda.w	#$48,a1
0001BD32 3290                       		move.w	(a0),(a1)
0001BD34 3368 0002 0008             		move.w	2(a0),8(a1)
0001BD3A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BD40 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD46 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD4C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD52 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD58 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD5E D0FC 0020                  		adda.w	#$20,a0
0001BD62 D2FC 0048                  		adda.w	#$48,a1
0001BD66 3290                       		move.w	(a0),(a1)
0001BD68 3368 0002 0008             		move.w	2(a0),8(a1)
0001BD6E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001BD74 3368 0006 0018             		move.w	6(a0),$18(a1)
0001BD7A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001BD80 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001BD86 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001BD8C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001BD92 D0FC 0020                  		adda.w	#$20,a0
0001BD96 D2FC 0048                  		adda.w	#$48,a1
0001BD9A 4E75                       		rts	
0001BD9C                            ; End of function SS_AniWallsRings
0001BD9C                            
0001BD9C                            ; ===========================================================================
0001BD9C 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BDAC 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001BDBC 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BDCC 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001BDDC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BDEC 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001BDFC 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BE0C 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001BE1C                            ; ---------------------------------------------------------------------------
0001BE1C                            ; Subroutine to	remove items when you collect them in the special stage
0001BE1C                            ; ---------------------------------------------------------------------------
0001BE1C                            
0001BE1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE1C                            
0001BE1C                            
0001BE1C                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001BE1C 45F9 00FF 4400             		lea	($FF4400).l,a2
0001BE22 303C 001F                  		move.w	#$1F,d0
0001BE26                            
0001BE26                            loc_1B4C4:
0001BE26 4A12                       		tst.b	(a2)
0001BE28 6700                       		beq.s	locret_1B4CE
0001BE2A 504A                       		addq.w	#8,a2
0001BE2C 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001BE30                            
0001BE30                            locret_1B4CE:
0001BE30 4E75                       		rts	
0001BE32                            ; End of function SS_RemoveCollectedItem
0001BE32                            
0001BE32                            ; ---------------------------------------------------------------------------
0001BE32                            ; Subroutine to	animate	special	stage items when you touch them
0001BE32                            ; ---------------------------------------------------------------------------
0001BE32                            
0001BE32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE32                            
0001BE32                            
0001BE32                            SS_AniItems:				; XREF: SS_ShowLayout
0001BE32 41F9 00FF 4400             		lea	($FF4400).l,a0
0001BE38 3E3C 001F                  		move.w	#$1F,d7
0001BE3C                            
0001BE3C                            loc_1B4DA:
0001BE3C 7000                       		moveq	#0,d0
0001BE3E 1010                       		move.b	(a0),d0
0001BE40 6700                       		beq.s	loc_1B4E8
0001BE42 E548                       		lsl.w	#2,d0
0001BE44 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001BE48 4E91                       		jsr	(a1)
0001BE4A                            
0001BE4A                            loc_1B4E8:
0001BE4A 5048                       		addq.w	#8,a0
0001BE4C                            
0001BE4C                            loc_1B4EA:
0001BE4C 51CF FFEE                  		dbf	d7,loc_1B4DA
0001BE50                            
0001BE50 4E75                       		rts	
0001BE52                            ; End of function SS_AniItems
0001BE52                            
0001BE52                            ; ===========================================================================
0001BE52 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001BE56 0000 0000                  		dc.l SS_AniBumper
0001BE5A 0000 0000                  		dc.l SS_Ani1Up
0001BE5E 0000 0000                  		dc.l SS_AniReverse
0001BE62 0000 0000                  		dc.l SS_AniEmeraldSparks
0001BE66 0000 0000                  		dc.l SS_AniGlassBlock
0001BE6A                            ; ===========================================================================
0001BE6A                            
0001BE6A                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001BE6A 5328 0002                  		subq.b	#1,2(a0)
0001BE6E 6A00                       		bpl.s	locret_1B530
0001BE70 117C 0005 0002             		move.b	#5,2(a0)
0001BE76 7000                       		moveq	#0,d0
0001BE78 1028 0003                  		move.b	3(a0),d0
0001BE7C 5228 0003                  		addq.b	#1,3(a0)
0001BE80 2268 0004                  		movea.l	4(a0),a1
0001BE84 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001BE88 1280                       		move.b	d0,(a1)
0001BE8A 6600                       		bne.s	locret_1B530
0001BE8C 4290                       		clr.l	(a0)
0001BE8E 42A8 0004                  		clr.l	4(a0)
0001BE92                            
0001BE92                            locret_1B530:
0001BE92 4E75                       		rts	
0001BE94                            ; ===========================================================================
0001BE94 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001BE9A                            ; ===========================================================================
0001BE9A                            
0001BE9A                            SS_AniBumper:				; XREF: SS_AniIndex
0001BE9A 5328 0002                  		subq.b	#1,2(a0)
0001BE9E 6A00                       		bpl.s	locret_1B566
0001BEA0 117C 0007 0002             		move.b	#7,2(a0)
0001BEA6 7000                       		moveq	#0,d0
0001BEA8 1028 0003                  		move.b	3(a0),d0
0001BEAC 5228 0003                  		addq.b	#1,3(a0)
0001BEB0 2268 0004                  		movea.l	4(a0),a1
0001BEB4 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001BEB8 6600                       		bne.s	loc_1B564
0001BEBA 4290                       		clr.l	(a0)
0001BEBC 42A8 0004                  		clr.l	4(a0)
0001BEC0 12BC 0025                  		move.b	#$25,(a1)
0001BEC4 4E75                       		rts	
0001BEC6                            ; ===========================================================================
0001BEC6                            
0001BEC6                            loc_1B564:
0001BEC6 1280                       		move.b	d0,(a1)
0001BEC8                            
0001BEC8                            locret_1B566:
0001BEC8 4E75                       		rts	
0001BECA                            ; ===========================================================================
0001BECA 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001BED0                            ; ===========================================================================
0001BED0                            
0001BED0                            SS_Ani1Up:				; XREF: SS_AniIndex
0001BED0 5328 0002                  		subq.b	#1,2(a0)
0001BED4 6A00                       		bpl.s	locret_1B596
0001BED6 117C 0005 0002             		move.b	#5,2(a0)
0001BEDC 7000                       		moveq	#0,d0
0001BEDE 1028 0003                  		move.b	3(a0),d0
0001BEE2 5228 0003                  		addq.b	#1,3(a0)
0001BEE6 2268 0004                  		movea.l	4(a0),a1
0001BEEA 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001BEEE 1280                       		move.b	d0,(a1)
0001BEF0 6600                       		bne.s	locret_1B596
0001BEF2 4290                       		clr.l	(a0)
0001BEF4 42A8 0004                  		clr.l	4(a0)
0001BEF8                            
0001BEF8                            locret_1B596:
0001BEF8 4E75                       		rts	
0001BEFA                            ; ===========================================================================
0001BEFA 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001BF00                            ; ===========================================================================
0001BF00                            
0001BF00                            SS_AniReverse:				; XREF: SS_AniIndex
0001BF00 5328 0002                  		subq.b	#1,2(a0)
0001BF04 6A00                       		bpl.s	locret_1B5CC
0001BF06 117C 0007 0002             		move.b	#7,2(a0)
0001BF0C 7000                       		moveq	#0,d0
0001BF0E 1028 0003                  		move.b	3(a0),d0
0001BF12 5228 0003                  		addq.b	#1,3(a0)
0001BF16 2268 0004                  		movea.l	4(a0),a1
0001BF1A 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001BF1E 6600                       		bne.s	loc_1B5CA
0001BF20 4290                       		clr.l	(a0)
0001BF22 42A8 0004                  		clr.l	4(a0)
0001BF26 12BC 002B                  		move.b	#$2B,(a1)
0001BF2A 4E75                       		rts	
0001BF2C                            ; ===========================================================================
0001BF2C                            
0001BF2C                            loc_1B5CA:
0001BF2C 1280                       		move.b	d0,(a1)
0001BF2E                            
0001BF2E                            locret_1B5CC:
0001BF2E 4E75                       		rts	
0001BF30                            ; ===========================================================================
0001BF30 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001BF36                            ; ===========================================================================
0001BF36                            
0001BF36                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001BF36 5328 0002                  		subq.b	#1,2(a0)
0001BF3A 6A00                       		bpl.s	locret_1B60C
0001BF3C 117C 0005 0002             		move.b	#5,2(a0)
0001BF42 7000                       		moveq	#0,d0
0001BF44 1028 0003                  		move.b	3(a0),d0
0001BF48 5228 0003                  		addq.b	#1,3(a0)
0001BF4C 2268 0004                  		movea.l	4(a0),a1
0001BF50 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001BF54 1280                       		move.b	d0,(a1)
0001BF56 6600                       		bne.s	locret_1B60C
0001BF58 4290                       		clr.l	(a0)
0001BF5A 42A8 0004                  		clr.l	4(a0)
0001BF5E 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001BF64 303C 00A8                  		move.w	#$A8,d0
0001BF68 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001BF6E                            
0001BF6E                            locret_1B60C:
0001BF6E 4E75                       		rts	
0001BF70                            ; ===========================================================================
0001BF70 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001BF76                            ; ===========================================================================
0001BF76                            
0001BF76                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001BF76 5328 0002                  		subq.b	#1,2(a0)
0001BF7A 6A00                       		bpl.s	locret_1B640
0001BF7C 117C 0001 0002             		move.b	#1,2(a0)
0001BF82 7000                       		moveq	#0,d0
0001BF84 1028 0003                  		move.b	3(a0),d0
0001BF88 5228 0003                  		addq.b	#1,3(a0)
0001BF8C 2268 0004                  		movea.l	4(a0),a1
0001BF90 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001BF94 1280                       		move.b	d0,(a1)
0001BF96 6600                       		bne.s	locret_1B640
0001BF98 12A8 0004                  		move.b	4(a0),(a1)
0001BF9C 4290                       		clr.l	(a0)
0001BF9E 42A8 0004                  		clr.l	4(a0)
0001BFA2                            
0001BFA2                            locret_1B640:
0001BFA2 4E75                       		rts	
0001BFA4                            ; ===========================================================================
0001BFA4 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001BFAE                            ; ---------------------------------------------------------------------------
0001BFAE                            ; Special stage	layout pointers
0001BFAE                            ; ---------------------------------------------------------------------------
0001BFAE                            SS_LayoutIndex:
0001BFAE                            	include "_inc\Special stage layout pointers.asm"
0001BFAE                            ; ---------------------------------------------------------------------------
0001BFAE                            ; Special stage	layout pointers
0001BFAE                            ; ---------------------------------------------------------------------------
0001BFAE 0000 0000                  	dc.l SS_1
0001BFB2 0000 0000                  	dc.l SS_2
0001BFB6 0000 0000                  	dc.l SS_3
0001BFBA 0000 0000                  	dc.l SS_4
0001BFBE 0000 0000                  	dc.l SS_5
0001BFC2 0000 0000                  	dc.l SS_6
0001BFC6                            	even
0001BFC6                            	even
0001BFC6                            
0001BFC6                            ; ---------------------------------------------------------------------------
0001BFC6                            ; Special stage	start locations
0001BFC6                            ; ---------------------------------------------------------------------------
0001BFC6                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001BFDE                            		even
0001BFDE                            
0001BFDE                            ; ---------------------------------------------------------------------------
0001BFDE                            ; Subroutine to	load special stage layout
0001BFDE                            ; ---------------------------------------------------------------------------
0001BFDE                            
0001BFDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFDE                            
0001BFDE                            
0001BFDE                            SS_Load:				; XREF: SpecialStage
0001BFDE 7000                       		moveq	#0,d0
0001BFE0 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001BFE4 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001BFE8 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001BFEE 6500                       		bcs.s	SS_ChkEmldNum
0001BFF0 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001BFF6                            
0001BFF6                            SS_ChkEmldNum:
0001BFF6 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001BFFC 6700                       		beq.s	SS_LoadData	; if yes, branch
0001BFFE 7200                       		moveq	#0,d1
0001C000 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001C004 5301                       		subq.b	#1,d1
0001C006 6500                       		bcs.s	SS_LoadData
0001C008 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001C00C                            
0001C00C                            SS_ChkEmldLoop:	
0001C00C B033 1000                  		cmp.b	(a3,d1.w),d0
0001C010 6600                       		bne.s	SS_ChkEmldRepeat
0001C012 60CA                       		bra.s	SS_Load
0001C014                            ; ===========================================================================
0001C014                            
0001C014                            SS_ChkEmldRepeat:
0001C014 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001C018                            
0001C018                            SS_LoadData:
0001C018 E548                       		lsl.w	#2,d0
0001C01A 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001C01E 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001C022 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001C026 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001C02A 43F9 00FF 4000             		lea	($FF4000).l,a1
0001C030 303C 0000                  		move.w	#0,d0
0001C034 4EB9 0000 1954             		jsr	(EniDec).l
0001C03A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C040 303C 0FFF                  		move.w	#$FFF,d0
0001C044                            
0001C044                            SS_ClrRAM3:
0001C044 4299                       		clr.l	(a1)+
0001C046 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001C04A                            
0001C04A 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C050 41F9 00FF 4000             		lea	($FF4000).l,a0
0001C056 723F                       		moveq	#$3F,d1
0001C058                            
0001C058                            loc_1B6F6:
0001C058 743F                       		moveq	#$3F,d2
0001C05A                            
0001C05A                            loc_1B6F8:
0001C05A 12D8                       		move.b	(a0)+,(a1)+
0001C05C 51CA FFFC                  		dbf	d2,loc_1B6F8
0001C060                            
0001C060 43E9 0040                  		lea	$40(a1),a1
0001C064 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001C068                            
0001C068 43F9 00FF 4008             		lea	($FF4008).l,a1
0001C06E 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001C074 724D                       		moveq	#$4D,d1
0001C076                            
0001C076                            loc_1B714:
0001C076 22D8                       		move.l	(a0)+,(a1)+
0001C078 32FC 0000                  		move.w	#0,(a1)+
0001C07C 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001C082 32D8                       		move.w	(a0)+,(a1)+
0001C084 51C9 FFF0                  		dbf	d1,loc_1B714
0001C088                            
0001C088 43F9 00FF 4400             		lea	($FF4400).l,a1
0001C08E 323C 003F                  		move.w	#$3F,d1
0001C092                            
0001C092                            loc_1B730:
0001C092                            
0001C092 4299                       		clr.l	(a1)+
0001C094 51C9 FFFC                  		dbf	d1,loc_1B730
0001C098                            
0001C098 4E75                       		rts	
0001C09A                            ; End of function SS_Load
0001C09A                            
0001C09A                            ; ===========================================================================
0001C09A                            ; ---------------------------------------------------------------------------
0001C09A                            ; Special stage	mappings and VRAM pointers
0001C09A                            ; ---------------------------------------------------------------------------
0001C09A                            SS_MapIndex:
0001C09A                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001C09A                            ; ---------------------------------------------------------------------------
0001C09A                            ; Special stage	mappings and VRAM pointers
0001C09A                            ; ---------------------------------------------------------------------------
0001C09A 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001C09E 0142                       	dc.w $142		; VRAM setting
0001C0A0 0000 0000                  	dc.l Map_SSWalls
0001C0A4 0142                       	dc.w $142
0001C0A6 0000 0000                  	dc.l Map_SSWalls
0001C0AA 0142                       	dc.w $142
0001C0AC 0000 0000                  	dc.l Map_SSWalls
0001C0B0 0142                       	dc.w $142
0001C0B2 0000 0000                  	dc.l Map_SSWalls
0001C0B6 0142                       	dc.w $142
0001C0B8 0000 0000                  	dc.l Map_SSWalls
0001C0BC 0142                       	dc.w $142
0001C0BE 0000 0000                  	dc.l Map_SSWalls
0001C0C2 0142                       	dc.w $142
0001C0C4 0000 0000                  	dc.l Map_SSWalls
0001C0C8 0142                       	dc.w $142
0001C0CA 0000 0000                  	dc.l Map_SSWalls
0001C0CE 0142                       	dc.w $142
0001C0D0 0000 0000                  	dc.l Map_SSWalls
0001C0D4 2142                       	dc.w $2142
0001C0D6 0000 0000                  	dc.l Map_SSWalls
0001C0DA 2142                       	dc.w $2142
0001C0DC 0000 0000                  	dc.l Map_SSWalls
0001C0E0 2142                       	dc.w $2142
0001C0E2 0000 0000                  	dc.l Map_SSWalls
0001C0E6 2142                       	dc.w $2142
0001C0E8 0000 0000                  	dc.l Map_SSWalls
0001C0EC 2142                       	dc.w $2142
0001C0EE 0000 0000                  	dc.l Map_SSWalls
0001C0F2 2142                       	dc.w $2142
0001C0F4 0000 0000                  	dc.l Map_SSWalls
0001C0F8 2142                       	dc.w $2142
0001C0FA 0000 0000                  	dc.l Map_SSWalls
0001C0FE 2142                       	dc.w $2142
0001C100 0000 0000                  	dc.l Map_SSWalls
0001C104 2142                       	dc.w $2142
0001C106 0000 0000                  	dc.l Map_SSWalls
0001C10A 4142                       	dc.w $4142
0001C10C 0000 0000                  	dc.l Map_SSWalls
0001C110 4142                       	dc.w $4142
0001C112 0000 0000                  	dc.l Map_SSWalls
0001C116 4142                       	dc.w $4142
0001C118 0000 0000                  	dc.l Map_SSWalls
0001C11C 4142                       	dc.w $4142
0001C11E 0000 0000                  	dc.l Map_SSWalls
0001C122 4142                       	dc.w $4142
0001C124 0000 0000                  	dc.l Map_SSWalls
0001C128 4142                       	dc.w $4142
0001C12A 0000 0000                  	dc.l Map_SSWalls
0001C12E 4142                       	dc.w $4142
0001C130 0000 0000                  	dc.l Map_SSWalls
0001C134 4142                       	dc.w $4142
0001C136 0000 0000                  	dc.l Map_SSWalls
0001C13A 4142                       	dc.w $4142
0001C13C 0000 0000                  	dc.l Map_SSWalls
0001C140 6142                       	dc.w $6142
0001C142 0000 0000                  	dc.l Map_SSWalls
0001C146 6142                       	dc.w $6142
0001C148 0000 0000                  	dc.l Map_SSWalls
0001C14C 6142                       	dc.w $6142
0001C14E 0000 0000                  	dc.l Map_SSWalls
0001C152 6142                       	dc.w $6142
0001C154 0000 0000                  	dc.l Map_SSWalls
0001C158 6142                       	dc.w $6142
0001C15A 0000 0000                  	dc.l Map_SSWalls
0001C15E 6142                       	dc.w $6142
0001C160 0000 0000                  	dc.l Map_SSWalls
0001C164 6142                       	dc.w $6142
0001C166 0000 0000                  	dc.l Map_SSWalls
0001C16A 6142                       	dc.w $6142
0001C16C 0000 0000                  	dc.l Map_SSWalls
0001C170 6142                       	dc.w $6142
0001C172 0000 F354                  	dc.l Map_obj47
0001C176 023B                       	dc.w $23B
0001C178 0000 0000                  	dc.l Map_SS_R
0001C17C 0570                       	dc.w $570
0001C17E 0000 0000                  	dc.l Map_SS_R
0001C182 0251                       	dc.w $251
0001C184 0000 0000                  	dc.l Map_SS_R
0001C188 0370                       	dc.w $370
0001C18A 0000 0000                  	dc.l Map_SS_Up
0001C18E 0263                       	dc.w $263
0001C190 0000 0000                  	dc.l Map_SS_Down
0001C194 0263                       	dc.w $263
0001C196 0000 0000                  	dc.l Map_SS_R
0001C19A 22F0                       	dc.w $22F0
0001C19C 0000 0000                  	dc.l Map_SS_Glass
0001C1A0 0470                       	dc.w $470
0001C1A2 0000 0000                  	dc.l Map_SS_Glass
0001C1A6 05F0                       	dc.w $5F0
0001C1A8 0000 0000                  	dc.l Map_SS_Glass
0001C1AC 65F0                       	dc.w $65F0
0001C1AE 0000 0000                  	dc.l Map_SS_Glass
0001C1B2 25F0                       	dc.w $25F0
0001C1B4 0000 0000                  	dc.l Map_SS_Glass
0001C1B8 45F0                       	dc.w $45F0
0001C1BA 0000 0000                  	dc.l Map_SS_R
0001C1BE 02F0                       	dc.w $2F0
0001C1C0 0100 F354                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001C1C4 023B                       	dc.w $23B
0001C1C6 0200 F354                  	dc.l Map_obj47+$2000000
0001C1CA 023B                       	dc.w $23B
0001C1CC 0000 0000                  	dc.l Map_SS_R
0001C1D0 0797                       	dc.w $797
0001C1D2 0000 0000                  	dc.l Map_SS_R
0001C1D6 07A0                       	dc.w $7A0
0001C1D8 0000 0000                  	dc.l Map_SS_R
0001C1DC 07A9                       	dc.w $7A9
0001C1DE 0000 0000                  	dc.l Map_SS_R
0001C1E2 0797                       	dc.w $797
0001C1E4 0000 0000                  	dc.l Map_SS_R
0001C1E8 07A0                       	dc.w $7A0
0001C1EA 0000 0000                  	dc.l Map_SS_R
0001C1EE 07A9                       	dc.w $7A9
0001C1F0 0000 A678                  	dc.l Map_obj25
0001C1F4 27B2                       	dc.w $27B2
0001C1F6 0000 0000                  	dc.l Map_SS_Chaos3
0001C1FA 0770                       	dc.w $770
0001C1FC 0000 0000                  	dc.l Map_SS_Chaos3
0001C200 2770                       	dc.w $2770
0001C202 0000 0000                  	dc.l Map_SS_Chaos3
0001C206 4770                       	dc.w $4770
0001C208 0000 0000                  	dc.l Map_SS_Chaos3
0001C20C 6770                       	dc.w $6770
0001C20E 0000 0000                  	dc.l Map_SS_Chaos1
0001C212 0770                       	dc.w $770
0001C214 0000 0000                  	dc.l Map_SS_Chaos2
0001C218 0770                       	dc.w $770
0001C21A 0000 0000                  	dc.l Map_SS_R
0001C21E 04F0                       	dc.w $4F0
0001C220 0400 A678                  	dc.l Map_obj25+$4000000
0001C224 27B2                       	dc.w $27B2
0001C226 0500 A678                  	dc.l Map_obj25+$5000000
0001C22A 27B2                       	dc.w $27B2
0001C22C 0600 A678                  	dc.l Map_obj25+$6000000
0001C230 27B2                       	dc.w $27B2
0001C232 0700 A678                  	dc.l Map_obj25+$7000000
0001C236 27B2                       	dc.w $27B2
0001C238 0000 0000                  	dc.l Map_SS_Glass
0001C23C 23F0                       	dc.w $23F0
0001C23E 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001C242 23F0                       	dc.w $23F0
0001C244 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001C248 23F0                       	dc.w $23F0
0001C24A 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001C24E 23F0                       	dc.w $23F0
0001C250 0000 0000                  	dc.l Map_SS_R+$2000000
0001C254 04F0                       	dc.w $4F0
0001C256 0000 0000                  	dc.l Map_SS_Glass
0001C25A 05F0                       	dc.w $5F0
0001C25C 0000 0000                  	dc.l Map_SS_Glass
0001C260 65F0                       	dc.w $65F0
0001C262 0000 0000                  	dc.l Map_SS_Glass
0001C266 25F0                       	dc.w $25F0
0001C268 0000 0000                  	dc.l Map_SS_Glass
0001C26C 45F0                       	dc.w $45F0
0001C26C 45F0                       	dc.w $45F0
0001C26E                            
0001C26E                            ; ---------------------------------------------------------------------------
0001C26E                            ; Sprite mappings - special stage "R" block
0001C26E                            ; ---------------------------------------------------------------------------
0001C26E                            Map_SS_R:
0001C26E                            	include "_maps\SSRblock.asm"
0001C26E                            ; ---------------------------------------------------------------------------
0001C26E                            ; Sprite mappings - special stage "R" block
0001C26E                            ; ---------------------------------------------------------------------------
0001C26E 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001C272 0000                       		dc.w byte_1B91E-Map_SS_R
0001C274 01                         byte_1B912:	dc.b 1
0001C275 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C27A 01                         byte_1B918:	dc.b 1
0001C27B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C280 00                         byte_1B91E:	dc.b 0
0001C282 00                         		even
0001C282 00                         		even
0001C282                            
0001C282                            ; ---------------------------------------------------------------------------
0001C282                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C282                            ; ---------------------------------------------------------------------------
0001C282                            Map_SS_Glass:
0001C282                            	include "_maps\SSglassblock.asm"
0001C282                            ; ---------------------------------------------------------------------------
0001C282                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001C282                            ; ---------------------------------------------------------------------------
0001C282 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001C286 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001C28A 01                         byte_1B928:	dc.b 1
0001C28B F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C290 01                         byte_1B92E:	dc.b 1
0001C291 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001C296 01                         byte_1B934:	dc.b 1
0001C297 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001C29C 01                         byte_1B93A:	dc.b 1
0001C29D F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001C2A2                            		even
0001C2A2                            		even
0001C2A2                            
0001C2A2                            ; ---------------------------------------------------------------------------
0001C2A2                            ; Sprite mappings - special stage "UP" block
0001C2A2                            ; ---------------------------------------------------------------------------
0001C2A2                            Map_SS_Up:
0001C2A2                            	include "_maps\SSUPblock.asm"
0001C2A2                            ; ---------------------------------------------------------------------------
0001C2A2                            ; Sprite mappings - special stage "UP" block
0001C2A2                            ; ---------------------------------------------------------------------------
0001C2A2 0000                       		dc.w byte_1B944-Map_SS_Up
0001C2A4 0000                       		dc.w byte_1B94A-Map_SS_Up
0001C2A6 01                         byte_1B944:	dc.b 1
0001C2A7 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001C2AC 01                         byte_1B94A:	dc.b 1
0001C2AD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C2B2                            		even
0001C2B2                            		even
0001C2B2                            
0001C2B2                            ; ---------------------------------------------------------------------------
0001C2B2                            ; Sprite mappings - special stage "DOWN" block
0001C2B2                            ; ---------------------------------------------------------------------------
0001C2B2                            Map_SS_Down:
0001C2B2                            	include "_maps\SSDOWNblock.asm"
0001C2B2                            ; ---------------------------------------------------------------------------
0001C2B2                            ; Sprite mappings - special stage "DOWN" block
0001C2B2                            ; ---------------------------------------------------------------------------
0001C2B2 0000                       		dc.w byte_1B954-Map_SS_Down
0001C2B4 0000                       		dc.w byte_1B95A-Map_SS_Down
0001C2B6 01                         byte_1B954:	dc.b 1
0001C2B7 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001C2BC 01                         byte_1B95A:	dc.b 1
0001C2BD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001C2C2                            		even
0001C2C2                            		even
0001C2C2                            
0001C2C2                            ; ---------------------------------------------------------------------------
0001C2C2                            ; Sprite mappings - special stage chaos	emeralds
0001C2C2                            ; ---------------------------------------------------------------------------
0001C2C2 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001C2C4 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001C2C6 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001C2C8 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001C2CA 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001C2CC 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001C2CE 01                         byte_1B96C:	dc.b 1
0001C2CF F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001C2D4 01                         byte_1B972:	dc.b 1
0001C2D5 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001C2DA 01                         byte_1B978:	dc.b 1
0001C2DB F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001C2E0 01                         byte_1B97E:	dc.b 1
0001C2E1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001C2E6                            		even
0001C2E6                            ; ===========================================================================
0001C2E6                            ; ---------------------------------------------------------------------------
0001C2E6                            ; Object 09 - Sonic (special stage)
0001C2E6                            ; ---------------------------------------------------------------------------
0001C2E6                            
0001C2E6                            Obj09:					; XREF: Obj_Index
0001C2E6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001C2EA 6700                       		beq.s	Obj09_Normal	; if not, branch
0001C2EC 6100 0000                  		bsr.w	SS_FixCamera
0001C2F0 6000 0000                  		bra.w	DebugMode
0001C2F4                            ; ===========================================================================
0001C2F4                            
0001C2F4                            Obj09_Normal:
0001C2F4 7000                       		moveq	#0,d0
0001C2F6 1028 0024                  		move.b	$24(a0),d0
0001C2FA 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001C2FE 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001C302                            ; ===========================================================================
0001C302 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001C304 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001C306 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001C308 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001C30A                            ; ===========================================================================
0001C30A                            
0001C30A                            Obj09_Main:				; XREF: Obj09_Index
0001C30A 5428 0024                  		addq.b	#2,$24(a0)
0001C30E 117C 000E 0016             		move.b	#$E,$16(a0)
0001C314 117C 0007 0017             		move.b	#7,$17(a0)
0001C31A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001C322 317C 0780 0002             		move.w	#$780,2(a0)
0001C328 117C 0004 0001             		move.b	#4,1(a0)
0001C32E 117C 0000 0018             		move.b	#0,$18(a0)
0001C334 117C 0002 001C             		move.b	#2,$1C(a0)
0001C33A 08E8 0002 0022             		bset	#2,$22(a0)
0001C340 08E8 0001 0022             		bset	#1,$22(a0)
0001C346                            
0001C346                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001C346 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001C34A 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C34C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001C352 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001C354 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001C35A                            
0001C35A                            Obj09_NoDebug:
0001C35A 117C 0000 0030             		move.b	#0,$30(a0)
0001C360 7000                       		moveq	#0,d0
0001C362 1028 0022                  		move.b	$22(a0),d0
0001C366 0240 0002                  		andi.w	#2,d0
0001C36A 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001C36E 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001C372 4EBA 81F4                  		jsr	LoadSonicDynPLC
0001C376 4EF9 0000 DE60             		jmp	DisplaySprite
0001C37C                            ; ===========================================================================
0001C37C 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001C37E 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001C380                            ; ===========================================================================
0001C380                            
0001C380                            Obj09_OnWall:				; XREF: Obj09_Modes
0001C380 6100 0000                  		bsr.w	Obj09_Jump
0001C384 6100 0000                  		bsr.w	Obj09_Move
0001C388 6100 0000                  		bsr.w	Obj09_Fall
0001C38C 6000                       		bra.s	Obj09_Display
0001C38E                            ; ===========================================================================
0001C38E                            
0001C38E                            Obj09_InAir:				; XREF: Obj09_Modes
0001C38E 6100 0000                  		bsr.w	nullsub_2
0001C392 6100 0000                  		bsr.w	Obj09_Move
0001C396 6100 0000                  		bsr.w	Obj09_Fall
0001C39A                            
0001C39A                            Obj09_Display:				; XREF: Obj09_OnWall
0001C39A 6100 0000                  		bsr.w	Obj09_ChkItems
0001C39E 6100 0000                  		bsr.w	Obj09_ChkItems2
0001C3A2 4EB9 0000 DE3A             		jsr	SpeedToPos
0001C3A8 6100 0000                  		bsr.w	SS_FixCamera
0001C3AC 3038 F780                  		move.w	($FFFFF780).w,d0
0001C3B0 D078 F782                  		add.w	($FFFFF782).w,d0
0001C3B4 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C3B8 4EB9 0001 42CA             		jsr	Sonic_Animate
0001C3BE 4E75                       		rts	
0001C3C0                            
0001C3C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C3C0                            
0001C3C0                            
0001C3C0                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001C3C0 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001C3C6 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001C3C8 6100 0000                  		bsr.w	Obj09_MoveLeft
0001C3CC                            
0001C3CC                            Obj09_ChkRight:
0001C3CC 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001C3D2 6700                       		beq.s	loc_1BA78	; if not, branch
0001C3D4 6100 0000                  		bsr.w	Obj09_MoveRight
0001C3D8                            
0001C3D8                            loc_1BA78:
0001C3D8 1038 F602                  		move.b	($FFFFF602).w,d0
0001C3DC 0200 000C                  		andi.b	#$C,d0
0001C3E0 6600                       		bne.s	loc_1BAA8
0001C3E2 3028 0014                  		move.w	$14(a0),d0
0001C3E6 6700                       		beq.s	loc_1BAA8
0001C3E8 6B00                       		bmi.s	loc_1BA9A
0001C3EA 0440 000C                  		subi.w	#$C,d0
0001C3EE 6400                       		bcc.s	loc_1BA94
0001C3F0 303C 0000                  		move.w	#0,d0
0001C3F4                            
0001C3F4                            loc_1BA94:
0001C3F4 3140 0014                  		move.w	d0,$14(a0)
0001C3F8 6000                       		bra.s	loc_1BAA8
0001C3FA                            ; ===========================================================================
0001C3FA                            
0001C3FA                            loc_1BA9A:
0001C3FA 0640 000C                  		addi.w	#$C,d0
0001C3FE 6400                       		bcc.s	loc_1BAA4
0001C400 303C 0000                  		move.w	#0,d0
0001C404                            
0001C404                            loc_1BAA4:
0001C404 3140 0014                  		move.w	d0,$14(a0)
0001C408                            
0001C408                            loc_1BAA8:
0001C408 1038 F780                  		move.b	($FFFFF780).w,d0
0001C40C 0600 0020                  		addi.b	#$20,d0
0001C410 0200 00C0                  		andi.b	#$C0,d0
0001C414 4400                       		neg.b	d0
0001C416 4EB9 0000 2CFE             		jsr	(CalcSine).l
0001C41C C3E8 0014                  		muls.w	$14(a0),d1
0001C420 D3A8 0008                  		add.l	d1,8(a0)
0001C424 C1E8 0014                  		muls.w	$14(a0),d0
0001C428 D1A8 000C                  		add.l	d0,$C(a0)
0001C42C 48E7 C000                  		movem.l	d0-d1,-(sp)
0001C430 2428 000C                  		move.l	$C(a0),d2
0001C434 2628 0008                  		move.l	8(a0),d3
0001C438 6100 0000                  		bsr.w	sub_1BCE8
0001C43C 6700                       		beq.s	loc_1BAF2
0001C43E 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C442 93A8 0008                  		sub.l	d1,8(a0)
0001C446 91A8 000C                  		sub.l	d0,$C(a0)
0001C44A 317C 0000 0014             		move.w	#0,$14(a0)
0001C450 4E75                       		rts	
0001C452                            ; ===========================================================================
0001C452                            
0001C452                            loc_1BAF2:
0001C452 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001C456 4E75                       		rts	
0001C458                            ; End of function Obj09_Move
0001C458                            
0001C458                            
0001C458                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C458                            
0001C458                            
0001C458                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001C458 08E8 0000 0022             		bset	#0,$22(a0)
0001C45E 3028 0014                  		move.w	$14(a0),d0
0001C462 6700                       		beq.s	loc_1BB06
0001C464 6A00                       		bpl.s	loc_1BB1A
0001C466                            
0001C466                            loc_1BB06:
0001C466 0440 000C                  		subi.w	#$C,d0
0001C46A 0C40 F800                  		cmpi.w	#-$800,d0
0001C46E 6E00                       		bgt.s	loc_1BB14
0001C470 303C F800                  		move.w	#-$800,d0
0001C474                            
0001C474                            loc_1BB14:
0001C474 3140 0014                  		move.w	d0,$14(a0)
0001C478 4E75                       		rts	
0001C47A                            ; ===========================================================================
0001C47A                            
0001C47A                            loc_1BB1A:
0001C47A 0440 0040                  		subi.w	#$40,d0
0001C47E 6400                       		bcc.s	loc_1BB22
0001C480 4E71                       		nop	
0001C482                            
0001C482                            loc_1BB22:
0001C482 3140 0014                  		move.w	d0,$14(a0)
0001C486 4E75                       		rts	
0001C488                            ; End of function Obj09_MoveLeft
0001C488                            
0001C488                            
0001C488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C488                            
0001C488                            
0001C488                            Obj09_MoveRight:			; XREF: Obj09_Move
0001C488 08A8 0000 0022             		bclr	#0,$22(a0)
0001C48E 3028 0014                  		move.w	$14(a0),d0
0001C492 6B00                       		bmi.s	loc_1BB48
0001C494 0640 000C                  		addi.w	#$C,d0
0001C498 0C40 0800                  		cmpi.w	#$800,d0
0001C49C 6D00                       		blt.s	loc_1BB42
0001C49E 303C 0800                  		move.w	#$800,d0
0001C4A2                            
0001C4A2                            loc_1BB42:
0001C4A2 3140 0014                  		move.w	d0,$14(a0)
0001C4A6 6000                       		bra.s	locret_1BB54
0001C4A8                            ; ===========================================================================
0001C4A8                            
0001C4A8                            loc_1BB48:
0001C4A8 0640 0040                  		addi.w	#$40,d0
0001C4AC 6400                       		bcc.s	loc_1BB50
0001C4AE 4E71                       		nop	
0001C4B0                            
0001C4B0                            loc_1BB50:
0001C4B0 3140 0014                  		move.w	d0,$14(a0)
0001C4B4                            
0001C4B4                            locret_1BB54:
0001C4B4 4E75                       		rts	
0001C4B6                            ; End of function Obj09_MoveRight
0001C4B6                            
0001C4B6                            
0001C4B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4B6                            
0001C4B6                            
0001C4B6                            Obj09_Jump:				; XREF: Obj09_OnWall
0001C4B6 1038 F603                  		move.b	($FFFFF603).w,d0
0001C4BA 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001C4BE 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001C4C0 1038 F780                  		move.b	($FFFFF780).w,d0
0001C4C4 0200 00FC                  		andi.b	#$FC,d0
0001C4C8 4400                       		neg.b	d0
0001C4CA 0400 0040                  		subi.b	#$40,d0
0001C4CE 4EB9 0000 2CFE             		jsr	(CalcSine).l
0001C4D4 C3FC 0680                  		muls.w	#$680,d1
0001C4D8 E081                       		asr.l	#8,d1
0001C4DA 3141 0010                  		move.w	d1,$10(a0)
0001C4DE C1FC 0680                  		muls.w	#$680,d0
0001C4E2 E080                       		asr.l	#8,d0
0001C4E4 3140 0012                  		move.w	d0,$12(a0)
0001C4E8 08E8 0001 0022             		bset	#1,$22(a0)
0001C4EE 303C 00A0                  		move.w	#$A0,d0
0001C4F2 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play jumping sound
0001C4F8                            
0001C4F8                            Obj09_NoJump:
0001C4F8 4E75                       		rts	
0001C4FA                            ; End of function Obj09_Jump
0001C4FA                            
0001C4FA                            
0001C4FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C4FA                            
0001C4FA                            
0001C4FA                            nullsub_2:				; XREF: Obj09_InAir
0001C4FA 4E75                       		rts	
0001C4FC                            ; End of function nullsub_2
0001C4FC                            
0001C4FC                            ; ===========================================================================
0001C4FC                            ; ---------------------------------------------------------------------------
0001C4FC                            ; unused subroutine to limit Sonic's upward vertical speed
0001C4FC                            ; ---------------------------------------------------------------------------
0001C4FC 323C FC00                  		move.w	#-$400,d1
0001C500 B268 0012                  		cmp.w	$12(a0),d1
0001C504 6F00                       		ble.s	locret_1BBB4
0001C506 1038 F602                  		move.b	($FFFFF602).w,d0
0001C50A 0200 0070                  		andi.b	#$70,d0
0001C50E 6600                       		bne.s	locret_1BBB4
0001C510 3141 0012                  		move.w	d1,$12(a0)
0001C514                            
0001C514                            locret_1BBB4:
0001C514 4E75                       		rts	
0001C516                            ; ---------------------------------------------------------------------------
0001C516                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001C516                            ; ---------------------------------------------------------------------------
0001C516                            
0001C516                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C516                            
0001C516                            
0001C516                            SS_FixCamera:				; XREF: Obj09
0001C516 3428 000C                  		move.w	$C(a0),d2
0001C51A 3628 0008                  		move.w	8(a0),d3
0001C51E 3038 F700                  		move.w	($FFFFF700).w,d0
0001C522 0443 00A0                  		subi.w	#$A0,d3
0001C526 6500                       		bcs.s	loc_1BBCE
0001C528 9043                       		sub.w	d3,d0
0001C52A 9178 F700                  		sub.w	d0,($FFFFF700).w
0001C52E                            
0001C52E                            loc_1BBCE:
0001C52E 3038 F704                  		move.w	($FFFFF704).w,d0
0001C532 0442 0070                  		subi.w	#$70,d2
0001C536 6500                       		bcs.s	locret_1BBDE
0001C538 9042                       		sub.w	d2,d0
0001C53A 9178 F704                  		sub.w	d0,($FFFFF704).w
0001C53E                            
0001C53E                            locret_1BBDE:
0001C53E 4E75                       		rts	
0001C540                            ; End of function SS_FixCamera
0001C540                            
0001C540                            ; ===========================================================================
0001C540                            
0001C540                            Obj09_ExitStage:			; XREF: Obj09_Index
0001C540 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001C546 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001C54C 6600                       		bne.s	loc_1BBF4
0001C54E 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C554                            
0001C554                            loc_1BBF4:
0001C554 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001C55A 6D00                       		blt.s	loc_1BC12
0001C55C 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001C562 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001C568 5428 0024                  		addq.b	#2,$24(a0)
0001C56C 317C 003C 0038             		move.w	#$3C,$38(a0)
0001C572                            
0001C572                            loc_1BC12:
0001C572 3038 F780                  		move.w	($FFFFF780).w,d0
0001C576 D078 F782                  		add.w	($FFFFF782).w,d0
0001C57A 31C0 F780                  		move.w	d0,($FFFFF780).w
0001C57E 4EB9 0001 42CA             		jsr	Sonic_Animate
0001C584 4EB9 0001 4568             		jsr	LoadSonicDynPLC
0001C58A 6100 FF8A                  		bsr.w	SS_FixCamera
0001C58E 4EF9 0000 DE60             		jmp	DisplaySprite
0001C594                            ; ===========================================================================
0001C594                            
0001C594                            Obj09_Exit2:				; XREF: Obj09_Index
0001C594 5368 0038                  		subq.w	#1,$38(a0)
0001C598 6600                       		bne.s	loc_1BC40
0001C59A 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001C5A0                            
0001C5A0                            loc_1BC40:
0001C5A0 4EB9 0001 42CA             		jsr	Sonic_Animate
0001C5A6 4EB9 0001 4568             		jsr	LoadSonicDynPLC
0001C5AC 6100 FF68                  		bsr.w	SS_FixCamera
0001C5B0 4EF9 0000 DE60             		jmp	DisplaySprite
0001C5B6                            
0001C5B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5B6                            
0001C5B6                            
0001C5B6                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001C5B6 2428 000C                  		move.l	$C(a0),d2
0001C5BA 2628 0008                  		move.l	8(a0),d3
0001C5BE 1038 F780                  		move.b	($FFFFF780).w,d0
0001C5C2 0200 00FC                  		andi.b	#$FC,d0
0001C5C6 4EB9 0000 2CFE             		jsr	(CalcSine).l
0001C5CC 3828 0010                  		move.w	$10(a0),d4
0001C5D0 48C4                       		ext.l	d4
0001C5D2 E184                       		asl.l	#8,d4
0001C5D4 C1FC 002A                  		muls.w	#$2A,d0
0001C5D8 D084                       		add.l	d4,d0
0001C5DA 3828 0012                  		move.w	$12(a0),d4
0001C5DE 48C4                       		ext.l	d4
0001C5E0 E184                       		asl.l	#8,d4
0001C5E2 C3FC 002A                  		muls.w	#$2A,d1
0001C5E6 D284                       		add.l	d4,d1
0001C5E8 D680                       		add.l	d0,d3
0001C5EA 6100 0000                  		bsr.w	sub_1BCE8
0001C5EE 6700                       		beq.s	loc_1BCB0
0001C5F0 9680                       		sub.l	d0,d3
0001C5F2 7000                       		moveq	#0,d0
0001C5F4 3140 0010                  		move.w	d0,$10(a0)
0001C5F8 08A8 0001 0022             		bclr	#1,$22(a0)
0001C5FE D481                       		add.l	d1,d2
0001C600 6100 0000                  		bsr.w	sub_1BCE8
0001C604 6700                       		beq.s	loc_1BCC6
0001C606 9481                       		sub.l	d1,d2
0001C608 7200                       		moveq	#0,d1
0001C60A 3141 0012                  		move.w	d1,$12(a0)
0001C60E 4E75                       		rts	
0001C610                            ; ===========================================================================
0001C610                            
0001C610                            loc_1BCB0:
0001C610 D481                       		add.l	d1,d2
0001C612 6100 0000                  		bsr.w	sub_1BCE8
0001C616 6700                       		beq.s	loc_1BCD4
0001C618 9481                       		sub.l	d1,d2
0001C61A 7200                       		moveq	#0,d1
0001C61C 3141 0012                  		move.w	d1,$12(a0)
0001C620 08A8 0001 0022             		bclr	#1,$22(a0)
0001C626                            
0001C626                            loc_1BCC6:
0001C626 E080                       		asr.l	#8,d0
0001C628 E081                       		asr.l	#8,d1
0001C62A 3140 0010                  		move.w	d0,$10(a0)
0001C62E 3141 0012                  		move.w	d1,$12(a0)
0001C632 4E75                       		rts	
0001C634                            ; ===========================================================================
0001C634                            
0001C634                            loc_1BCD4:
0001C634 E080                       		asr.l	#8,d0
0001C636 E081                       		asr.l	#8,d1
0001C638 3140 0010                  		move.w	d0,$10(a0)
0001C63C 3141 0012                  		move.w	d1,$12(a0)
0001C640 08E8 0001 0022             		bset	#1,$22(a0)
0001C646 4E75                       		rts	
0001C648                            ; End of function Obj09_Fall
0001C648                            
0001C648                            
0001C648                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C648                            
0001C648                            
0001C648                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001C648 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C64E 7800                       		moveq	#0,d4
0001C650 4842                       		swap	d2
0001C652 3802                       		move.w	d2,d4
0001C654 4842                       		swap	d2
0001C656 0644 0044                  		addi.w	#$44,d4
0001C65A 88FC 0018                  		divu.w	#$18,d4
0001C65E C8FC 0080                  		mulu.w	#$80,d4
0001C662 D3C4                       		adda.l	d4,a1
0001C664 7800                       		moveq	#0,d4
0001C666 4843                       		swap	d3
0001C668 3803                       		move.w	d3,d4
0001C66A 4843                       		swap	d3
0001C66C 0644 0014                  		addi.w	#$14,d4
0001C670 88FC 0018                  		divu.w	#$18,d4
0001C674 D2C4                       		adda.w	d4,a1
0001C676 7A00                       		moveq	#0,d5
0001C678 1819                       		move.b	(a1)+,d4
0001C67A 6100                       		bsr.s	sub_1BD30
0001C67C 1819                       		move.b	(a1)+,d4
0001C67E 6100                       		bsr.s	sub_1BD30
0001C680 D2FC 007E                  		adda.w	#$7E,a1
0001C684 1819                       		move.b	(a1)+,d4
0001C686 6100                       		bsr.s	sub_1BD30
0001C688 1819                       		move.b	(a1)+,d4
0001C68A 6100                       		bsr.s	sub_1BD30
0001C68C 4A05                       		tst.b	d5
0001C68E 4E75                       		rts	
0001C690                            ; End of function sub_1BCE8
0001C690                            
0001C690                            
0001C690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C690                            
0001C690                            
0001C690                            sub_1BD30:				; XREF: sub_1BCE8
0001C690 6700                       		beq.s	locret_1BD44
0001C692 0C04 0028                  		cmpi.b	#$28,d4
0001C696 6700                       		beq.s	locret_1BD44
0001C698 0C04 003A                  		cmpi.b	#$3A,d4
0001C69C 6500                       		bcs.s	loc_1BD46
0001C69E 0C04 004B                  		cmpi.b	#$4B,d4
0001C6A2 6400                       		bcc.s	loc_1BD46
0001C6A4                            
0001C6A4                            locret_1BD44:
0001C6A4 4E75                       		rts	
0001C6A6                            ; ===========================================================================
0001C6A6                            
0001C6A6                            loc_1BD46:
0001C6A6 1144 0030                  		move.b	d4,$30(a0)
0001C6AA 2149 0032                  		move.l	a1,$32(a0)
0001C6AE 7AFF                       		moveq	#-1,d5
0001C6B0 4E75                       		rts	
0001C6B2                            ; End of function sub_1BD30
0001C6B2                            
0001C6B2                            
0001C6B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C6B2                            
0001C6B2                            
0001C6B2                            Obj09_ChkItems:				; XREF: Obj09_Display
0001C6B2 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C6B8 7800                       		moveq	#0,d4
0001C6BA 3828 000C                  		move.w	$C(a0),d4
0001C6BE 0644 0050                  		addi.w	#$50,d4
0001C6C2 88FC 0018                  		divu.w	#$18,d4
0001C6C6 C8FC 0080                  		mulu.w	#$80,d4
0001C6CA D3C4                       		adda.l	d4,a1
0001C6CC 7800                       		moveq	#0,d4
0001C6CE 3828 0008                  		move.w	8(a0),d4
0001C6D2 0644 0020                  		addi.w	#$20,d4
0001C6D6 88FC 0018                  		divu.w	#$18,d4
0001C6DA D2C4                       		adda.w	d4,a1
0001C6DC 1811                       		move.b	(a1),d4
0001C6DE 6600                       		bne.s	Obj09_ChkCont
0001C6E0 4A28 003A                  		tst.b	$3A(a0)
0001C6E4 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001C6E8 7800                       		moveq	#0,d4
0001C6EA 4E75                       		rts	
0001C6EC                            ; ===========================================================================
0001C6EC                            
0001C6EC                            Obj09_ChkCont:
0001C6EC 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001C6F0 6600                       		bne.s	Obj09_Chk1Up
0001C6F2 6100 F728                  		bsr.w	SS_RemoveCollectedItem
0001C6F6 6600                       		bne.s	Obj09_GetCont
0001C6F8 14BC 0001                  		move.b	#1,(a2)
0001C6FC 2549 0004                  		move.l	a1,4(a2)
0001C700                            
0001C700                            Obj09_GetCont:
0001C700 4EB9 0000 A360             		jsr	CollectRing
0001C706 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001C70C 6500                       		bcs.s	Obj09_NoCont
0001C70E 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001C714 6600                       		bne.s	Obj09_NoCont
0001C716 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001C71A 303C 00BF                  		move.w	#$BF,d0
0001C71E 4EB9 0000 15CC             		jsr	(PlaySound).l	; play extra continue sound
0001C724                            
0001C724                            Obj09_NoCont:
0001C724 7800                       		moveq	#0,d4
0001C726 4E75                       		rts	
0001C728                            ; ===========================================================================
0001C728                            
0001C728                            Obj09_Chk1Up:
0001C728 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001C72C 6600                       		bne.s	Obj09_ChkEmer
0001C72E 6100 F6EC                  		bsr.w	SS_RemoveCollectedItem
0001C732 6600                       		bne.s	Obj09_Get1Up
0001C734 14BC 0003                  		move.b	#3,(a2)
0001C738 2549 0004                  		move.l	a1,4(a2)
0001C73C                            
0001C73C                            Obj09_Get1Up:
0001C73C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001C740 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001C744 303C 0088                  		move.w	#$88,d0
0001C748 4EB9 0000 15CC             		jsr	(PlaySound).l	; play extra life music
0001C74E 7800                       		moveq	#0,d4
0001C750 4E75                       		rts	
0001C752                            ; ===========================================================================
0001C752                            
0001C752                            Obj09_ChkEmer:
0001C752 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001C756 6500                       		bcs.s	Obj09_ChkGhost
0001C758 0C04 0040                  		cmpi.b	#$40,d4
0001C75C 6200                       		bhi.s	Obj09_ChkGhost
0001C75E 6100 F6BC                  		bsr.w	SS_RemoveCollectedItem
0001C762 6600                       		bne.s	Obj09_GetEmer
0001C764 14BC 0005                  		move.b	#5,(a2)
0001C768 2549 0004                  		move.l	a1,4(a2)
0001C76C                            
0001C76C                            Obj09_GetEmer:
0001C76C 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001C772 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001C774 0404 003B                  		subi.b	#$3B,d4
0001C778 7000                       		moveq	#0,d0
0001C77A 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001C77E 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001C782 1584 0000                  		move.b	d4,(a2,d0.w)
0001C786 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001C78A                            
0001C78A                            Obj09_NoEmer:
0001C78A 303C 0093                  		move.w	#$93,d0
0001C78E 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play emerald music
0001C794 7800                       		moveq	#0,d4
0001C796 4E75                       		rts	
0001C798                            ; ===========================================================================
0001C798                            
0001C798                            Obj09_ChkGhost:
0001C798 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001C79C 6600                       		bne.s	Obj09_ChkGhostTag
0001C79E 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001C7A4                            
0001C7A4                            Obj09_ChkGhostTag:
0001C7A4 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001C7A8 6600                       		bne.s	Obj09_NoGhost
0001C7AA 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001C7B0 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001C7B2 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001C7B8                            
0001C7B8                            Obj09_NoGhost:
0001C7B8 78FF                       		moveq	#-1,d4
0001C7BA 4E75                       		rts	
0001C7BC                            ; ===========================================================================
0001C7BC                            
0001C7BC                            Obj09_MakeGhostSolid:
0001C7BC 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001C7C2 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001C7C4 43F9 00FF 1020             		lea	($FF1020).l,a1
0001C7CA 723F                       		moveq	#$3F,d1
0001C7CC                            
0001C7CC                            Obj09_GhostLoop2:
0001C7CC 743F                       		moveq	#$3F,d2
0001C7CE                            
0001C7CE                            Obj09_GhostLoop:
0001C7CE 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001C7D2 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001C7D4 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001C7D8                            
0001C7D8                            Obj09_NoReplace:
0001C7D8 5249                       		addq.w	#1,a1
0001C7DA 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001C7DE 43E9 0040                  		lea	$40(a1),a1
0001C7E2 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001C7E6                            
0001C7E6                            Obj09_GhostNotSolid:
0001C7E6 4228 003A                  		clr.b	$3A(a0)
0001C7EA 7800                       		moveq	#0,d4
0001C7EC 4E75                       		rts	
0001C7EE                            ; End of function Obj09_ChkItems
0001C7EE                            
0001C7EE                            
0001C7EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7EE                            
0001C7EE                            
0001C7EE                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001C7EE 1028 0030                  		move.b	$30(a0),d0
0001C7F2 6600                       		bne.s	Obj09_ChkBumper
0001C7F4 5328 0036                  		subq.b	#1,$36(a0)
0001C7F8 6A00                       		bpl.s	loc_1BEA0
0001C7FA 117C 0000 0036             		move.b	#0,$36(a0)
0001C800                            
0001C800                            loc_1BEA0:
0001C800 5328 0037                  		subq.b	#1,$37(a0)
0001C804 6A00                       		bpl.s	locret_1BEAC
0001C806 117C 0000 0037             		move.b	#0,$37(a0)
0001C80C                            
0001C80C                            locret_1BEAC:
0001C80C 4E75                       		rts	
0001C80E                            ; ===========================================================================
0001C80E                            
0001C80E                            Obj09_ChkBumper:
0001C80E 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C812 6600                       		bne.s	Obj09_GOAL
0001C814 2228 0032                  		move.l	$32(a0),d1
0001C818 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C81E 3401                       		move.w	d1,d2
0001C820 0241 007F                  		andi.w	#$7F,d1
0001C824 C2FC 0018                  		mulu.w	#$18,d1
0001C828 0441 0014                  		subi.w	#$14,d1
0001C82C EE4A                       		lsr.w	#7,d2
0001C82E 0242 007F                  		andi.w	#$7F,d2
0001C832 C4FC 0018                  		mulu.w	#$18,d2
0001C836 0442 0044                  		subi.w	#$44,d2
0001C83A 9268 0008                  		sub.w	8(a0),d1
0001C83E 9468 000C                  		sub.w	$C(a0),d2
0001C842 4EB9 0000 2FCC             		jsr	(CalcAngle).l
0001C848 4EB9 0000 2CFE             		jsr	(CalcSine).l
0001C84E C3FC F900                  		muls.w	#-$700,d1
0001C852 E081                       		asr.l	#8,d1
0001C854 3141 0010                  		move.w	d1,$10(a0)
0001C858 C1FC F900                  		muls.w	#-$700,d0
0001C85C E080                       		asr.l	#8,d0
0001C85E 3140 0012                  		move.w	d0,$12(a0)
0001C862 08E8 0001 0022             		bset	#1,$22(a0)
0001C868 6100 F5B2                  		bsr.w	SS_RemoveCollectedItem
0001C86C 6600                       		bne.s	Obj09_BumpSnd
0001C86E 14BC 0002                  		move.b	#2,(a2)
0001C872 2028 0032                  		move.l	$32(a0),d0
0001C876 5380                       		subq.l	#1,d0
0001C878 2540 0004                  		move.l	d0,4(a2)
0001C87C                            
0001C87C                            Obj09_BumpSnd:
0001C87C 303C 00B4                  		move.w	#$B4,d0
0001C880 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C886                            ; ===========================================================================
0001C886                            
0001C886                            Obj09_GOAL:
0001C886 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C88A 6600                       		bne.s	Obj09_UPblock
0001C88C 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C890 303C 00A8                  		move.w	#$A8,d0		; change item
0001C894 4EB9 0000 15D2             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C89A 4E75                       		rts	
0001C89C                            ; ===========================================================================
0001C89C                            
0001C89C                            Obj09_UPblock:
0001C89C 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C8A0 6600                       		bne.s	Obj09_DOWNblock
0001C8A2 4A28 0036                  		tst.b	$36(a0)
0001C8A6 6600 0000                  		bne.w	Obj09_NoGlass
0001C8AA 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C8B0 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C8B6 6700                       		beq.s	Obj09_UPsnd
0001C8B8 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C8BC 2268 0032                  		movea.l	$32(a0),a1
0001C8C0 5389                       		subq.l	#1,a1
0001C8C2 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C8C6                            
0001C8C6                            Obj09_UPsnd:
0001C8C6 303C 00A9                  		move.w	#$A9,d0
0001C8CA 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C8D0                            ; ===========================================================================
0001C8D0                            
0001C8D0                            Obj09_DOWNblock:
0001C8D0 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C8D4 6600                       		bne.s	Obj09_Rblock
0001C8D6 4A28 0036                  		tst.b	$36(a0)
0001C8DA 6600 0000                  		bne.w	Obj09_NoGlass
0001C8DE 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C8E4 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C8EA 6600                       		bne.s	Obj09_DOWNsnd
0001C8EC E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C8F0 2268 0032                  		movea.l	$32(a0),a1
0001C8F4 5389                       		subq.l	#1,a1
0001C8F6 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C8FA                            
0001C8FA                            Obj09_DOWNsnd:
0001C8FA 303C 00A9                  		move.w	#$A9,d0
0001C8FE 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C904                            ; ===========================================================================
0001C904                            
0001C904                            Obj09_Rblock:
0001C904 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C908 6600                       		bne.s	Obj09_ChkGlass
0001C90A 4A28 0037                  		tst.b	$37(a0)
0001C90E 6600 0000                  		bne.w	Obj09_NoGlass
0001C912 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C918 6100 F502                  		bsr.w	SS_RemoveCollectedItem
0001C91C 6600                       		bne.s	Obj09_RevStage
0001C91E 14BC 0004                  		move.b	#4,(a2)
0001C922 2028 0032                  		move.l	$32(a0),d0
0001C926 5380                       		subq.l	#1,d0
0001C928 2540 0004                  		move.l	d0,4(a2)
0001C92C                            
0001C92C                            Obj09_RevStage:
0001C92C 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C930 303C 00A9                  		move.w	#$A9,d0
0001C934 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play sound
0001C93A                            ; ===========================================================================
0001C93A                            
0001C93A                            Obj09_ChkGlass:
0001C93A 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C93E 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C940 0C00 002E                  		cmpi.b	#$2E,d0
0001C944 6700                       		beq.s	Obj09_Glass
0001C946 0C00 002F                  		cmpi.b	#$2F,d0
0001C94A 6700                       		beq.s	Obj09_Glass
0001C94C 0C00 0030                  		cmpi.b	#$30,d0
0001C950 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C952                            
0001C952                            Obj09_Glass:
0001C952 6100 F4C8                  		bsr.w	SS_RemoveCollectedItem
0001C956 6600                       		bne.s	Obj09_GlassSnd
0001C958 14BC 0006                  		move.b	#6,(a2)
0001C95C 2268 0032                  		movea.l	$32(a0),a1
0001C960 5389                       		subq.l	#1,a1
0001C962 2549 0004                  		move.l	a1,4(a2)
0001C966 1011                       		move.b	(a1),d0
0001C968 5200                       		addq.b	#1,d0		; change glass type when touched
0001C96A 0C00 0030                  		cmpi.b	#$30,d0
0001C96E 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C970 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C972                            
0001C972                            Obj09_GlassUpdate:
0001C972 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C976                            
0001C976                            Obj09_GlassSnd:
0001C976 303C 00BA                  		move.w	#$BA,d0
0001C97A 4EF9 0000 15D2             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C980                            ; ===========================================================================
0001C980                            
0001C980                            Obj09_NoGlass:
0001C980 4E75                       		rts	
0001C982                            ; End of function Obj09_ChkItems2
0001C982                            
0001C982                            ; ===========================================================================
0001C982                            ; ---------------------------------------------------------------------------
0001C982                            ; Object 10 - blank
0001C982                            ; ---------------------------------------------------------------------------
0001C982                            
0001C982                            Obj10:					; XREF: Obj_Index
0001C982 4E75                       		rts	
0001C984                            ; ---------------------------------------------------------------------------
0001C984                            ; Subroutine to	animate	level graphics
0001C984                            ; ---------------------------------------------------------------------------
0001C984                            
0001C984                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C984                            
0001C984                            
0001C984                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C984 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C988 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C98A 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C990 6100 0000                  		bsr.w	AniArt_GiantRing
0001C994 7000                       		moveq	#0,d0
0001C996 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C99A D040                       		add.w	d0,d0
0001C99C 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C9A0 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C9A4                            ; ===========================================================================
0001C9A4                            
0001C9A4                            AniArt_Pause:
0001C9A4 4E75                       		rts	
0001C9A6                            ; End of function AniArt_Load
0001C9A6                            
0001C9A6                            ; ===========================================================================
0001C9A6 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C9AA 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C9AE 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C9B2 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C9B4                            ; ===========================================================================
0001C9B4                            ; ---------------------------------------------------------------------------
0001C9B4                            ; Animated pattern routine - Green Hill
0001C9B4                            ; ---------------------------------------------------------------------------
0001C9B4                            
0001C9B4                            AniArt_GHZ:				; XREF: AniArt_Index
0001C9B4 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C9B8 6A00                       		bpl.s	loc_1C08A
0001C9BA 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C9C0 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C9C6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C9CA 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C9CE 0240 0001                  		andi.w	#1,d0
0001C9D2 6700                       		beq.s	loc_1C078
0001C9D4 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C9D8                            
0001C9D8                            loc_1C078:
0001C9D8 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C9E2 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C9E6 6000 0000                  		bra.w	LoadTiles
0001C9EA                            ; ===========================================================================
0001C9EA                            
0001C9EA                            loc_1C08A:
0001C9EA 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C9EE 6A00                       		bpl.s	loc_1C0C0
0001C9F0 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C9F6 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C9FC 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CA00 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CA04 0240 0001                  		andi.w	#1,d0
0001CA08 6700                       		beq.s	loc_1C0AE
0001CA0A 43E9 0200                  		lea	$200(a1),a1
0001CA0E                            
0001CA0E                            loc_1C0AE:
0001CA0E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CA18 323C 000F                  		move.w	#$F,d1
0001CA1C 6000 0000                  		bra.w	LoadTiles
0001CA20                            ; ===========================================================================
0001CA20                            
0001CA20                            loc_1C0C0:
0001CA20 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CA24 6A00                       		bpl.s	locret_1C10C
0001CA26 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CA2C 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CA30 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CA34 0240 0003                  		andi.w	#3,d0
0001CA38 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001CA3C 0800 0000                  		btst	#0,d0
0001CA40 6600                       		bne.s	loc_1C0E8
0001CA42 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001CA48                            
0001CA48                            loc_1C0E8:
0001CA48 EF48                       		lsl.w	#7,d0
0001CA4A 3200                       		move.w	d0,d1
0001CA4C D040                       		add.w	d0,d0
0001CA4E D041                       		add.w	d1,d0
0001CA50 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CA5A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CA60 43F1 0000                  		lea	(a1,d0.w),a1
0001CA64 323C 000B                  		move.w	#$B,d1
0001CA68 6100 0000                  		bsr.w	LoadTiles
0001CA6C                            
0001CA6C                            locret_1C10C:
0001CA6C 4E75                       		rts	
0001CA6E                            ; ===========================================================================
0001CA6E 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001CA72                            ; ===========================================================================
0001CA72                            ; ---------------------------------------------------------------------------
0001CA72                            ; Animated pattern routine - Marble
0001CA72                            ; ---------------------------------------------------------------------------
0001CA72                            
0001CA72                            AniArt_MZ:				; XREF: AniArt_Index
0001CA72 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CA76 6A00                       		bpl.s	loc_1C150
0001CA78 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001CA7E 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001CA84 7000                       		moveq	#0,d0
0001CA86 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CA8A 5200                       		addq.b	#1,d0
0001CA8C 0C00 0003                  		cmpi.b	#3,d0
0001CA90 6600                       		bne.s	loc_1C134
0001CA92 7000                       		moveq	#0,d0
0001CA94                            
0001CA94                            loc_1C134:
0001CA94 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001CA98 C0FC 0100                  		mulu.w	#$100,d0
0001CA9C D2C0                       		adda.w	d0,a1
0001CA9E 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001CAA8 323C 0007                  		move.w	#7,d1
0001CAAC 6100 0000                  		bsr.w	LoadTiles
0001CAB0                            
0001CAB0                            loc_1C150:
0001CAB0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CAB4 6A00                       		bpl.s	loc_1C1AE
0001CAB6 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001CABC 7000                       		moveq	#0,d0
0001CABE 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CAC2 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001CAC8 EE58                       		ror.w	#7,d0
0001CACA D8C0                       		adda.w	d0,a4
0001CACC 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001CAD6 7600                       		moveq	#0,d3
0001CAD8 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001CADC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CAE0 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001CAE4 343C 0003                  		move.w	#3,d2
0001CAE8                            
0001CAE8                            loc_1C188:
0001CAE8 3003                       		move.w	d3,d0
0001CAEA D040                       		add.w	d0,d0
0001CAEC 0240 001E                  		andi.w	#$1E,d0
0001CAF0 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001CAF6 3033 0000                  		move.w	(a3,d0.w),d0
0001CAFA 47F3 0000                  		lea	(a3,d0.w),a3
0001CAFE 224C                       		movea.l	a4,a1
0001CB00 323C 001F                  		move.w	#$1F,d1
0001CB04 4E93                       		jsr	(a3)
0001CB06 5843                       		addq.w	#4,d3
0001CB08 51CA FFDE                  		dbf	d2,loc_1C188
0001CB0C 4E75                       		rts	
0001CB0E                            ; ===========================================================================
0001CB0E                            
0001CB0E                            loc_1C1AE:
0001CB0E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CB12 6A00 0000                  		bpl.w	locret_1C1EA
0001CB16 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CB1C 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001CB22 7000                       		moveq	#0,d0
0001CB24 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001CB28 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001CB2C 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001CB32 C0FC 00C0                  		mulu.w	#$C0,d0
0001CB36 D2C0                       		adda.w	d0,a1
0001CB38 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001CB42 323C 0005                  		move.w	#5,d1
0001CB46 6000 0000                  		bra.w	LoadTiles
0001CB4A                            ; ===========================================================================
0001CB4A                            
0001CB4A                            locret_1C1EA:
0001CB4A 4E75                       		rts	
0001CB4C                            ; ===========================================================================
0001CB4C                            ; ---------------------------------------------------------------------------
0001CB4C                            ; Animated pattern routine - Scrap Brain
0001CB4C                            ; ---------------------------------------------------------------------------
0001CB4C                            
0001CB4C                            AniArt_SBZ:				; XREF: AniArt_Index
0001CB4C 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001CB50 6700                       		beq.s	loc_1C1F8
0001CB52 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001CB56 6000                       		bra.s	loc_1C250
0001CB58                            ; ===========================================================================
0001CB58                            
0001CB58                            loc_1C1F8:
0001CB58 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001CB5C 6A00                       		bpl.s	loc_1C250
0001CB5E 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001CB64 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001CB6A 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001CB74 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001CB78 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001CB7C 0240 0007                  		andi.w	#7,d0
0001CB80 6700                       		beq.s	loc_1C234
0001CB82 5340                       		subq.w	#1,d0
0001CB84 C0FC 0180                  		mulu.w	#$180,d0
0001CB88 43F1 0000                  		lea	(a1,d0.w),a1
0001CB8C 323C 000B                  		move.w	#$B,d1
0001CB90 6000 0000                  		bra.w	LoadTiles
0001CB94                            ; ===========================================================================
0001CB94                            
0001CB94                            loc_1C234:
0001CB94 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001CB9A                            
0001CB9A                            loc_1C23A:
0001CB9A 323C 0005                  		move.w	#5,d1
0001CB9E 6100 0000                  		bsr.w	LoadTiles
0001CBA2 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CBA8 323C 0005                  		move.w	#5,d1
0001CBAC 6000 0000                  		bra.w	LoadTiles
0001CBB0                            ; ===========================================================================
0001CBB0                            
0001CBB0                            loc_1C250:
0001CBB0 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001CBB4 6700                       		beq.s	loc_1C25C
0001CBB6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CBBA 6000                       		bra.s	locret_1C2A0
0001CBBC                            ; ===========================================================================
0001CBBC                            
0001CBBC                            loc_1C25C:
0001CBBC 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CBC0 6A00                       		bpl.s	locret_1C2A0
0001CBC2 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CBC8 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001CBCE 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001CBD8 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CBDC 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CBE0 0240 0007                  		andi.w	#7,d0
0001CBE4 6700                       		beq.s	loc_1C298
0001CBE6 5340                       		subq.w	#1,d0
0001CBE8 C0FC 0180                  		mulu.w	#$180,d0
0001CBEC 43F1 0000                  		lea	(a1,d0.w),a1
0001CBF0 323C 000B                  		move.w	#$B,d1
0001CBF4 6000 0000                  		bra.w	LoadTiles
0001CBF8                            ; ===========================================================================
0001CBF8                            
0001CBF8                            loc_1C298:
0001CBF8 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001CBFE 609A                       		bra.s	loc_1C23A
0001CC00                            ; ===========================================================================
0001CC00                            
0001CC00                            locret_1C2A0:
0001CC00 4E75                       		rts	
0001CC02                            ; ===========================================================================
0001CC02                            ; ---------------------------------------------------------------------------
0001CC02                            ; Animated pattern routine - ending sequence
0001CC02                            ; ---------------------------------------------------------------------------
0001CC02                            
0001CC02                            AniArt_Ending:				; XREF: AniArt_Index
0001CC02 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001CC06 6A00                       		bpl.s	loc_1C2F4
0001CC08 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001CC0E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001CC14 45F8 9400                  		lea	($FFFF9400).w,a2
0001CC18 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001CC1C 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001CC20 0240 0001                  		andi.w	#1,d0
0001CC24 6700                       		beq.s	loc_1C2CE
0001CC26 43E9 0200                  		lea	$200(a1),a1
0001CC2A 45EA 0200                  		lea	$200(a2),a2
0001CC2E                            
0001CC2E                            loc_1C2CE:
0001CC2E 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001CC38 323C 000F                  		move.w	#$F,d1
0001CC3C 6100 0000                  		bsr.w	LoadTiles
0001CC40 224A                       		movea.l	a2,a1
0001CC42 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001CC4C 323C 000F                  		move.w	#$F,d1
0001CC50 6000 0000                  		bra.w	LoadTiles
0001CC54                            ; ===========================================================================
0001CC54                            
0001CC54                            loc_1C2F4:
0001CC54 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001CC58 6A00                       		bpl.s	loc_1C33C
0001CC5A 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001CC60 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001CC64 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001CC68 0240 0007                  		andi.w	#7,d0
0001CC6C 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001CC70 EF48                       		lsl.w	#7,d0
0001CC72 3200                       		move.w	d0,d1
0001CC74 D040                       		add.w	d0,d0
0001CC76 D041                       		add.w	d1,d0
0001CC78 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001CC82 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001CC88 43F1 0000                  		lea	(a1,d0.w),a1
0001CC8C 323C 000B                  		move.w	#$B,d1
0001CC90 6000 0000                  		bra.w	LoadTiles
0001CC94                            ; ===========================================================================
0001CC94 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001CC9C                            ; ===========================================================================
0001CC9C                            
0001CC9C                            loc_1C33C:
0001CC9C 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001CCA0 6A00                       		bpl.s	loc_1C37A
0001CCA2 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001CCA8 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001CCAC 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001CCB0 0240 0003                  		andi.w	#3,d0
0001CCB4 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001CCB8 E148                       		lsl.w	#8,d0
0001CCBA D040                       		add.w	d0,d0
0001CCBC 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001CCC6 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001CCCA 43F1 0000                  		lea	(a1,d0.w),a1
0001CCCE 323C 000F                  		move.w	#$F,d1
0001CCD2 6000 0000                  		bra.w	LoadTiles
0001CCD6                            ; ===========================================================================
0001CCD6 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001CCDA                            ; ===========================================================================
0001CCDA                            
0001CCDA                            loc_1C37A:
0001CCDA 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001CCDE 6A00                       		bpl.s	locret_1C3B4
0001CCE0 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001CCE6 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001CCEA 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001CCEE 0240 0003                  		andi.w	#3,d0
0001CCF2 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001CCF6 E148                       		lsl.w	#8,d0
0001CCF8 D040                       		add.w	d0,d0
0001CCFA 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001CD04 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001CD08 43F1 0000                  		lea	(a1,d0.w),a1
0001CD0C 323C 000F                  		move.w	#$F,d1
0001CD10 6000 0000                  		bra.w	LoadTiles
0001CD14                            ; ===========================================================================
0001CD14                            
0001CD14                            locret_1C3B4:
0001CD14 4E75                       		rts	
0001CD16                            ; ===========================================================================
0001CD16                            
0001CD16                            AniArt_none:				; XREF: AniArt_Index
0001CD16 4E75                       		rts	
0001CD18                            
0001CD18                            ; ---------------------------------------------------------------------------
0001CD18                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001CD18                            ; ---------------------------------------------------------------------------
0001CD18                            
0001CD18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CD18                            
0001CD18                            
0001CD18                            LoadTiles:
0001CD18 2C99                       		move.l	(a1)+,(a6)
0001CD1A 2C99                       		move.l	(a1)+,(a6)
0001CD1C 2C99                       		move.l	(a1)+,(a6)
0001CD1E 2C99                       		move.l	(a1)+,(a6)
0001CD20 2C99                       		move.l	(a1)+,(a6)
0001CD22 2C99                       		move.l	(a1)+,(a6)
0001CD24 2C99                       		move.l	(a1)+,(a6)
0001CD26 2C99                       		move.l	(a1)+,(a6)
0001CD28 51C9 FFEE                  		dbf	d1,LoadTiles
0001CD2C 4E75                       		rts	
0001CD2E                            ; End of function LoadTiles
0001CD2E                            
0001CD2E                            ; ===========================================================================
0001CD2E                            ; ---------------------------------------------------------------------------
0001CD2E                            ; Animated pattern routine - more Marble Zone
0001CD2E                            ; ---------------------------------------------------------------------------
0001CD2E 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001CD32 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001CD36 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001CD3A 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001CD3E 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001CD42 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001CD46 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001CD4A 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001CD4E                            ; ===========================================================================
0001CD4E                            
0001CD4E                            loc_1C3EE:				; XREF: AniArt_MZextra
0001CD4E 2C91                       		move.l	(a1),(a6)
0001CD50 43E9 0010                  		lea	$10(a1),a1
0001CD54 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001CD58 4E75                       		rts	
0001CD5A                            ; ===========================================================================
0001CD5A                            
0001CD5A                            loc_1C3FA:				; XREF: AniArt_MZextra
0001CD5A 2029 0002                  		move.l	2(a1),d0
0001CD5E 1029 0001                  		move.b	1(a1),d0
0001CD62 E098                       		ror.l	#8,d0
0001CD64 2C80                       		move.l	d0,(a6)
0001CD66 43E9 0010                  		lea	$10(a1),a1
0001CD6A 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001CD6E 4E75                       		rts	
0001CD70                            ; ===========================================================================
0001CD70                            
0001CD70                            loc_1C410:				; XREF: AniArt_MZextra
0001CD70 2CA9 0002                  		move.l	2(a1),(a6)
0001CD74 43E9 0010                  		lea	$10(a1),a1
0001CD78 51C9 FFF6                  		dbf	d1,loc_1C410
0001CD7C 4E75                       		rts	
0001CD7E                            ; ===========================================================================
0001CD7E                            
0001CD7E                            loc_1C41E:				; XREF: AniArt_MZextra
0001CD7E 2029 0004                  		move.l	4(a1),d0
0001CD82 1029 0003                  		move.b	3(a1),d0
0001CD86 E098                       		ror.l	#8,d0
0001CD88 2C80                       		move.l	d0,(a6)
0001CD8A 43E9 0010                  		lea	$10(a1),a1
0001CD8E 51C9 FFEE                  		dbf	d1,loc_1C41E
0001CD92 4E75                       		rts	
0001CD94                            ; ===========================================================================
0001CD94                            
0001CD94                            loc_1C434:				; XREF: AniArt_MZextra
0001CD94 2CA9 0004                  		move.l	4(a1),(a6)
0001CD98 43E9 0010                  		lea	$10(a1),a1
0001CD9C 51C9 FFF6                  		dbf	d1,loc_1C434
0001CDA0 4E75                       		rts	
0001CDA2                            ; ===========================================================================
0001CDA2                            
0001CDA2                            loc_1C442:				; XREF: AniArt_MZextra
0001CDA2 2029 0006                  		move.l	6(a1),d0
0001CDA6 1029 0005                  		move.b	5(a1),d0
0001CDAA E098                       		ror.l	#8,d0
0001CDAC 2C80                       		move.l	d0,(a6)
0001CDAE 43E9 0010                  		lea	$10(a1),a1
0001CDB2 51C9 FFEE                  		dbf	d1,loc_1C442
0001CDB6 4E75                       		rts	
0001CDB8                            ; ===========================================================================
0001CDB8                            
0001CDB8                            loc_1C458:				; XREF: AniArt_MZextra
0001CDB8 2CA9 0006                  		move.l	6(a1),(a6)
0001CDBC 43E9 0010                  		lea	$10(a1),a1
0001CDC0 51C9 FFF6                  		dbf	d1,loc_1C458
0001CDC4 4E75                       		rts	
0001CDC6                            ; ===========================================================================
0001CDC6                            
0001CDC6                            loc_1C466:				; XREF: AniArt_MZextra
0001CDC6 2029 0008                  		move.l	8(a1),d0
0001CDCA 1029 0007                  		move.b	7(a1),d0
0001CDCE E098                       		ror.l	#8,d0
0001CDD0 2C80                       		move.l	d0,(a6)
0001CDD2 43E9 0010                  		lea	$10(a1),a1
0001CDD6 51C9 FFEE                  		dbf	d1,loc_1C466
0001CDDA 4E75                       		rts	
0001CDDC                            ; ===========================================================================
0001CDDC                            
0001CDDC                            loc_1C47C:				; XREF: AniArt_MZextra
0001CDDC 2CA9 0008                  		move.l	8(a1),(a6)
0001CDE0 43E9 0010                  		lea	$10(a1),a1
0001CDE4 51C9 FFF6                  		dbf	d1,loc_1C47C
0001CDE8 4E75                       		rts	
0001CDEA                            ; ===========================================================================
0001CDEA                            
0001CDEA                            loc_1C48A:				; XREF: AniArt_MZextra
0001CDEA 2029 000A                  		move.l	$A(a1),d0
0001CDEE 1029 0009                  		move.b	9(a1),d0
0001CDF2 E098                       		ror.l	#8,d0
0001CDF4 2C80                       		move.l	d0,(a6)
0001CDF6 43E9 0010                  		lea	$10(a1),a1
0001CDFA 51C9 FFEE                  		dbf	d1,loc_1C48A
0001CDFE 4E75                       		rts	
0001CE00                            ; ===========================================================================
0001CE00                            
0001CE00                            loc_1C4A0:				; XREF: AniArt_MZextra
0001CE00 2CA9 000A                  		move.l	$A(a1),(a6)
0001CE04 43E9 0010                  		lea	$10(a1),a1
0001CE08 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001CE0C 4E75                       		rts	
0001CE0E                            ; ===========================================================================
0001CE0E                            
0001CE0E                            loc_1C4AE:				; XREF: AniArt_MZextra
0001CE0E 2029 000C                  		move.l	$C(a1),d0
0001CE12 1029 000B                  		move.b	$B(a1),d0
0001CE16 E098                       		ror.l	#8,d0
0001CE18 2C80                       		move.l	d0,(a6)
0001CE1A 43E9 0010                  		lea	$10(a1),a1
0001CE1E 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001CE22 4E75                       		rts	
0001CE24                            ; ===========================================================================
0001CE24                            
0001CE24                            loc_1C4C4:				; XREF: AniArt_MZextra
0001CE24 2CA9 000C                  		move.l	$C(a1),(a6)
0001CE28 43E9 0010                  		lea	$10(a1),a1
0001CE2C 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001CE30 4E75                       		rts	
0001CE32                            ; ===========================================================================
0001CE32                            
0001CE32                            loc_1C4D2:				; XREF: AniArt_MZextra
0001CE32 2029 000C                  		move.l	$C(a1),d0
0001CE36 E198                       		rol.l	#8,d0
0001CE38 1011                       		move.b	0(a1),d0
0001CE3A 2C80                       		move.l	d0,(a6)
0001CE3C 43E9 0010                  		lea	$10(a1),a1
0001CE40 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001CE44 4E75                       		rts	
0001CE46                            ; ===========================================================================
0001CE46                            
0001CE46                            loc_1C4E8:				; XREF: AniArt_MZextra
0001CE46 3CA9 000E                  		move.w	$E(a1),(a6)
0001CE4A 3C91                       		move.w	0(a1),(a6)
0001CE4C 43E9 0010                  		lea	$10(a1),a1
0001CE50 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001CE54 4E75                       		rts	
0001CE56                            ; ===========================================================================
0001CE56                            
0001CE56                            loc_1C4FA:				; XREF: AniArt_MZextra
0001CE56 2011                       		move.l	0(a1),d0
0001CE58 1029 000F                  		move.b	$F(a1),d0
0001CE5C E098                       		ror.l	#8,d0
0001CE5E 2C80                       		move.l	d0,(a6)
0001CE60 43E9 0010                  		lea	$10(a1),a1
0001CE64 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001CE68 4E75                       		rts	
0001CE6A                            
0001CE6A                            ; ---------------------------------------------------------------------------
0001CE6A                            ; Animated pattern routine - giant ring
0001CE6A                            ; ---------------------------------------------------------------------------
0001CE6A                            
0001CE6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CE6A                            
0001CE6A                            
0001CE6A                            AniArt_GiantRing:			; XREF: AniArt_Load
0001CE6A 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001CE6E 6600                       		bne.s	loc_1C518
0001CE70 4E75                       		rts	
0001CE72                            ; ===========================================================================
0001CE72                            
0001CE72                            loc_1C518:
0001CE72 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001CE78 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001CE7E 7000                       		moveq	#0,d0
0001CE80 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001CE84 43F1 0000                  		lea	(a1,d0.w),a1
0001CE88 0640 8000                  		addi.w	#$8000,d0
0001CE8C E588                       		lsl.l	#2,d0
0001CE8E E448                       		lsr.w	#2,d0
0001CE90 0040 4000                  		ori.w	#$4000,d0
0001CE94 4840                       		swap	d0
0001CE96 2D40 0004                  		move.l	d0,4(a6)
0001CE9A 323C 000D                  		move.w	#$D,d1
0001CE9E 6000 FE78                  		bra.w	LoadTiles
0001CEA2                            ; End of function AniArt_GiantRing
0001CEA2                            
0001CEA2                            ; ===========================================================================
0001CEA2                            ; ---------------------------------------------------------------------------
0001CEA2                            ; Object 21 - SCORE, TIME, RINGS
0001CEA2                            ; ---------------------------------------------------------------------------
0001CEA2                            
0001CEA2                            Obj21:					; XREF: Obj_Index
0001CEA2 7000                       		moveq	#0,d0
0001CEA4 1028 0024                  		move.b	$24(a0),d0
0001CEA8 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001CEAC 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001CEB0                            ; ===========================================================================
0001CEB0 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001CEB2 0000                       		dc.w Obj21_Flash-Obj21_Index
0001CEB4                            ; ===========================================================================
0001CEB4                            
0001CEB4                            Obj21_Main:				; XREF: Obj21_Main
0001CEB4 5428 0024                  		addq.b	#2,$24(a0)
0001CEB8 317C 0090 0008             		move.w	#$90,8(a0)
0001CEBE 317C 0108 000A             		move.w	#$108,$A(a0)
0001CEC4 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001CECC 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001CED2 117C 0000 0001             		move.b	#0,1(a0)
0001CED8 117C 0000 0018             		move.b	#0,$18(a0)
0001CEDE                            
0001CEDE                            Obj21_Flash:				; XREF: Obj21_Main
0001CEDE 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001CEE2 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001CEE4 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001CEE8 4EF9 0000 DE60             		jmp	DisplaySprite
0001CEEE                            ; ===========================================================================
0001CEEE                            
0001CEEE                            Obj21_Flash2:
0001CEEE 7000                       		moveq	#0,d0
0001CEF0 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001CEF6 6600                       		bne.s	Obj21_Display
0001CEF8 5240                       		addq.w	#1,d0		; make ring counter flash red
0001CEFA 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001CF00 6600                       		bne.s	Obj21_Display	; if not, branch
0001CF02 5440                       		addq.w	#2,d0		; make time counter flash red
0001CF04                            
0001CF04                            Obj21_Display:
0001CF04 1140 001A                  		move.b	d0,$1A(a0)
0001CF08 4EF9 0000 DE60             		jmp	DisplaySprite
0001CF0E                            ; ===========================================================================
0001CF0E                            ; ---------------------------------------------------------------------------
0001CF0E                            ; Sprite mappings - SCORE, TIME, RINGS
0001CF0E                            ; ---------------------------------------------------------------------------
0001CF0E                            Map_obj21:
0001CF0E                            	include "_maps\obj21.asm"
0001CF0E                            ; ---------------------------------------------------------------------------
0001CF0E                            ; Sprite mappings - SCORE, TIME, RINGS
0001CF0E                            ; ---------------------------------------------------------------------------
0001CF0E 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001CF12 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001CF16 0A                         byte_1C5BC:	dc.b $A
0001CF17 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF1C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF21 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF26 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CF2B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF30 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CF35 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CF3A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF3F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF44 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF49 00                         		dc.b 0
0001CF4A 0A                         byte_1C5F0:	dc.b $A
0001CF4B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF50 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF55 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF5A 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001CF5F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF64 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CF69 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CF6E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CF73 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CF78 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CF7D 00                         		dc.b 0
0001CF7E 0A                         byte_1C624:	dc.b $A
0001CF7F 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CF84 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CF89 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CF8E 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CF93 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CF98 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001CF9D A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001CFA2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CFA7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CFAC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CFB1 00                         		dc.b 0
0001CFB2 0A                         byte_1C658:	dc.b $A
0001CFB3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001CFB8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001CFBD 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001CFC2 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001CFC7 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001CFCC A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001CFD1 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001CFD6 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001CFDB 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001CFE0 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001CFE6 00                         		even
0001CFE6 00                         		even
0001CFE6                            
0001CFE6                            ; ---------------------------------------------------------------------------
0001CFE6                            ; Add points subroutine
0001CFE6                            ; ---------------------------------------------------------------------------
0001CFE6                            
0001CFE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFE6                            
0001CFE6                            
0001CFE6                            AddPoints:
0001CFE6 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001CFEC 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001CFF0 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001CFF4 D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001CFF6 223C 000F 423F             		move.l	#999999,d1
0001CFFC B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001CFFE 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001D002 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001D004 2481                       		move.l	d1,(a2)
0001D006                            
0001D006                            loc_1C6AC:
0001D006 2013                       		move.l	(a3),d0
0001D008 B092                       		cmp.l	(a2),d0
0001D00A 6500 0000                  		bcs.w	locret_1C6B6
0001D00E 2480                       		move.l	d0,(a2)
0001D010                            
0001D010                            locret_1C6B6:
0001D010 4E75                       		rts	
0001D012                            ; End of function AddPoints
0001D012                            
0001D012                            ; ---------------------------------------------------------------------------
0001D012                            ; Subroutine to	update the HUD
0001D012                            ; ---------------------------------------------------------------------------
0001D012                            
0001D012                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D012                            
0001D012                            
0001D012                            HudUpdate:
0001D012 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001D016 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001D01A 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001D01E 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001D020 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001D024 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001D02A 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001D02E 6100 0000                  		bsr.w	Hud_Score
0001D032                            
0001D032                            Hud_ChkRings:
0001D032 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D036 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001D038 6A00                       		bpl.s	loc_1C6E4
0001D03A 6100 0000                  		bsr.w	Hud_LoadZero
0001D03E                            
0001D03E                            loc_1C6E4:
0001D03E 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D042 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D048 7200                       		moveq	#0,d1
0001D04A 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D04E 6100 0000                  		bsr.w	Hud_Rings
0001D052                            
0001D052                            Hud_ChkTime:
0001D052 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001D056 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001D058 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D05C 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001D05E 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001D062 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001D068 6700                       		beq.s	TimeOver	; if yes, branch
0001D06A 5221                       		addq.b	#1,-(a1)
0001D06C 0C11 003C                  		cmpi.b	#60,(a1)
0001D070 6500                       		bcs.s	Hud_ChkLives
0001D072 12BC 0000                  		move.b	#0,(a1)
0001D076 5221                       		addq.b	#1,-(a1)
0001D078 0C11 003C                  		cmpi.b	#60,(a1)
0001D07C 6500                       		bcs.s	loc_1C734
0001D07E 12BC 0000                  		move.b	#0,(a1)
0001D082 5221                       		addq.b	#1,-(a1)
0001D084 0C11 0009                  		cmpi.b	#9,(a1)
0001D088 6500                       		bcs.s	loc_1C734
0001D08A 12BC 0009                  		move.b	#9,(a1)
0001D08E                            
0001D08E                            loc_1C734:
0001D08E 203C 5E40 0003             		move.l	#$5E400003,d0
0001D094 7200                       		moveq	#0,d1
0001D096 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001D09A 6100 0000                  		bsr.w	Hud_Mins
0001D09E 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001D0A4 7200                       		moveq	#0,d1
0001D0A6 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001D0AA 6100 0000                  		bsr.w	Hud_Secs
0001D0AE                            
0001D0AE                            Hud_ChkLives:
0001D0AE 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D0B2 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001D0B4 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D0B8 6100 0000                  		bsr.w	Hud_Lives
0001D0BC                            
0001D0BC                            Hud_ChkBonus:
0001D0BC 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001D0C0 6700                       		beq.s	Hud_End		; if not, branch
0001D0C2 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D0C6 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001D0D0 7200                       		moveq	#0,d1
0001D0D2 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D0D6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0DA 7200                       		moveq	#0,d1
0001D0DC 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D0E0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D0E4                            
0001D0E4                            Hud_End:
0001D0E4 4E75                       		rts	
0001D0E6                            ; ===========================================================================
0001D0E6                            
0001D0E6                            TimeOver:				; XREF: Hud_ChkTime
0001D0E6 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001D0EA 41F8 D000                  		lea	($FFFFD000).w,a0
0001D0EE 2448                       		movea.l	a0,a2
0001D0F0 6100 E908                  		bsr.w	KillSonic
0001D0F4 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001D0FA 4E75                       		rts	
0001D0FC                            ; ===========================================================================
0001D0FC                            
0001D0FC                            HudDebug:				; XREF: HudUpdate
0001D0FC 6100 0000                  		bsr.w	HudDb_XY
0001D100 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001D104 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001D106 6A00                       		bpl.s	HudDb_Rings
0001D108 6100 0000                  		bsr.w	Hud_LoadZero
0001D10C                            
0001D10C                            HudDb_Rings:
0001D10C 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001D110 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001D116 7200                       		moveq	#0,d1
0001D118 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001D11C 6100 0000                  		bsr.w	Hud_Rings
0001D120                            
0001D120                            HudDb_ObjCount:
0001D120 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001D126 7200                       		moveq	#0,d1
0001D128 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001D12C 6100 0000                  		bsr.w	Hud_Secs
0001D130 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001D134 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001D136 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001D13A 6100 0000                  		bsr.w	Hud_Lives
0001D13E                            
0001D13E                            HudDb_ChkBonus:
0001D13E 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001D142 6700                       		beq.s	HudDb_End	; if not, branch
0001D144 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001D148 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001D152 7200                       		moveq	#0,d1
0001D154 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001D158 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D15C 7200                       		moveq	#0,d1
0001D15E 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001D162 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001D166                            
0001D166                            HudDb_End:
0001D166 4E75                       		rts	
0001D168                            ; End of function HudUpdate
0001D168                            
0001D168                            ; ---------------------------------------------------------------------------
0001D168                            ; Subroutine to	load "0" on the	HUD
0001D168                            ; ---------------------------------------------------------------------------
0001D168                            
0001D168                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D168                            
0001D168                            
0001D168                            Hud_LoadZero:				; XREF: HudUpdate
0001D168 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001D172 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001D176 343C 0002                  		move.w	#2,d2
0001D17A 6000                       		bra.s	loc_1C83E
0001D17C                            ; End of function Hud_LoadZero
0001D17C                            
0001D17C                            ; ---------------------------------------------------------------------------
0001D17C                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001D17C                            ; ---------------------------------------------------------------------------
0001D17C                            
0001D17C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D17C                            
0001D17C                            
0001D17C                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001D17C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D182 6100 0000                  		bsr.w	Hud_Lives
0001D186 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001D190 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001D194 343C 000E                  		move.w	#$E,d2
0001D198                            
0001D198                            loc_1C83E:				; XREF: Hud_LoadZero
0001D198 43FA 0000                  		lea	Art_Hud(pc),a1
0001D19C                            
0001D19C                            loc_1C842:
0001D19C 323C 000F                  		move.w	#$F,d1
0001D1A0 101A                       		move.b	(a2)+,d0
0001D1A2 6B00                       		bmi.s	loc_1C85E
0001D1A4 4880                       		ext.w	d0
0001D1A6 EB48                       		lsl.w	#5,d0
0001D1A8 47F1 0000                  		lea	(a1,d0.w),a3
0001D1AC                            
0001D1AC                            loc_1C852:
0001D1AC 2C9B                       		move.l	(a3)+,(a6)
0001D1AE 51C9 FFFC                  		dbf	d1,loc_1C852
0001D1B2                            
0001D1B2                            loc_1C858:
0001D1B2 51CA FFE8                  		dbf	d2,loc_1C842
0001D1B6                            
0001D1B6 4E75                       		rts	
0001D1B8                            ; ===========================================================================
0001D1B8                            
0001D1B8                            loc_1C85E:
0001D1B8 2CBC 0000 0000             		move.l	#0,(a6)
0001D1BE 51C9 FFF8                  		dbf	d1,loc_1C85E
0001D1C2                            
0001D1C2 60EE                       		bra.s	loc_1C858
0001D1C4                            ; End of function Hud_Base
0001D1C4                            
0001D1C4                            ; ===========================================================================
0001D1C4 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001D1D0 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001D1D4                            ; ---------------------------------------------------------------------------
0001D1D4                            ; Subroutine to	load debug mode	numbers	patterns
0001D1D4                            ; ---------------------------------------------------------------------------
0001D1D4                            
0001D1D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1D4                            
0001D1D4                            
0001D1D4                            HudDb_XY:				; XREF: HudDebug
0001D1D4 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001D1DE 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001D1E2 4841                       		swap	d1
0001D1E4 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001D1E8 6100                       		bsr.s	HudDb_XY2
0001D1EA 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001D1EE 4841                       		swap	d1
0001D1F0 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001D1F4                            ; End of function HudDb_XY
0001D1F4                            
0001D1F4                            
0001D1F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D1F4                            
0001D1F4                            
0001D1F4                            HudDb_XY2:
0001D1F4 7C07                       		moveq	#7,d6
0001D1F6 43F9 0000 0606             		lea	(Art_Text).l,a1
0001D1FC                            
0001D1FC                            HudDb_XYLoop:
0001D1FC E959                       		rol.w	#4,d1
0001D1FE 3401                       		move.w	d1,d2
0001D200 0242 000F                  		andi.w	#$F,d2
0001D204 0C42 000A                  		cmpi.w	#$A,d2
0001D208 6500                       		bcs.s	loc_1C8B2
0001D20A 5E42                       		addq.w	#7,d2
0001D20C                            
0001D20C                            loc_1C8B2:
0001D20C EB4A                       		lsl.w	#5,d2
0001D20E 47F1 2000                  		lea	(a1,d2.w),a3
0001D212 2C9B                       		move.l	(a3)+,(a6)
0001D214 2C9B                       		move.l	(a3)+,(a6)
0001D216 2C9B                       		move.l	(a3)+,(a6)
0001D218 2C9B                       		move.l	(a3)+,(a6)
0001D21A 2C9B                       		move.l	(a3)+,(a6)
0001D21C 2C9B                       		move.l	(a3)+,(a6)
0001D21E 2C9B                       		move.l	(a3)+,(a6)
0001D220 2C9B                       		move.l	(a3)+,(a6)
0001D222 4841                       		swap	d1
0001D224 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001D228                            
0001D228 4E75                       		rts	
0001D22A                            ; End of function HudDb_XY2
0001D22A                            
0001D22A                            ; ---------------------------------------------------------------------------
0001D22A                            ; Subroutine to	load rings numbers patterns
0001D22A                            ; ---------------------------------------------------------------------------
0001D22A                            
0001D22A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D22A                            
0001D22A                            
0001D22A                            Hud_Rings:				; XREF: HudUpdate
0001D22A 45F9 0000 0000             		lea	(Hud_100).l,a2
0001D230 7C02                       		moveq	#2,d6
0001D232 6000                       		bra.s	Hud_LoadArt
0001D234                            ; End of function Hud_Rings
0001D234                            
0001D234                            ; ---------------------------------------------------------------------------
0001D234                            ; Subroutine to	load score numbers patterns
0001D234                            ; ---------------------------------------------------------------------------
0001D234                            
0001D234                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D234                            
0001D234                            
0001D234                            Hud_Score:				; XREF: HudUpdate
0001D234 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001D23A 7C05                       		moveq	#5,d6
0001D23C                            
0001D23C                            Hud_LoadArt:
0001D23C 7800                       		moveq	#0,d4
0001D23E 43FA 0000                  		lea	Art_Hud(pc),a1
0001D242                            
0001D242                            Hud_ScoreLoop:
0001D242 7400                       		moveq	#0,d2
0001D244 261A                       		move.l	(a2)+,d3
0001D246                            
0001D246                            loc_1C8EC:
0001D246 9283                       		sub.l	d3,d1
0001D248 6500                       		bcs.s	loc_1C8F4
0001D24A 5242                       		addq.w	#1,d2
0001D24C 60F8                       		bra.s	loc_1C8EC
0001D24E                            ; ===========================================================================
0001D24E                            
0001D24E                            loc_1C8F4:
0001D24E D283                       		add.l	d3,d1
0001D250 4A42                       		tst.w	d2
0001D252 6700                       		beq.s	loc_1C8FE
0001D254 383C 0001                  		move.w	#1,d4
0001D258                            
0001D258                            loc_1C8FE:
0001D258 4A44                       		tst.w	d4
0001D25A 6700                       		beq.s	loc_1C92C
0001D25C ED4A                       		lsl.w	#6,d2
0001D25E 2D40 0004                  		move.l	d0,4(a6)
0001D262 47F1 2000                  		lea	(a1,d2.w),a3
0001D266 2C9B                       		move.l	(a3)+,(a6)
0001D268 2C9B                       		move.l	(a3)+,(a6)
0001D26A 2C9B                       		move.l	(a3)+,(a6)
0001D26C 2C9B                       		move.l	(a3)+,(a6)
0001D26E 2C9B                       		move.l	(a3)+,(a6)
0001D270 2C9B                       		move.l	(a3)+,(a6)
0001D272 2C9B                       		move.l	(a3)+,(a6)
0001D274 2C9B                       		move.l	(a3)+,(a6)
0001D276 2C9B                       		move.l	(a3)+,(a6)
0001D278 2C9B                       		move.l	(a3)+,(a6)
0001D27A 2C9B                       		move.l	(a3)+,(a6)
0001D27C 2C9B                       		move.l	(a3)+,(a6)
0001D27E 2C9B                       		move.l	(a3)+,(a6)
0001D280 2C9B                       		move.l	(a3)+,(a6)
0001D282 2C9B                       		move.l	(a3)+,(a6)
0001D284 2C9B                       		move.l	(a3)+,(a6)
0001D286                            
0001D286                            loc_1C92C:
0001D286 0680 0040 0000             		addi.l	#$400000,d0
0001D28C 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001D290                            
0001D290 4E75                       		rts	
0001D292                            ; End of function Hud_Score
0001D292                            
0001D292                            ; ---------------------------------------------------------------------------
0001D292                            ; Subroutine to	load countdown numbers on the continue screen
0001D292                            ; ---------------------------------------------------------------------------
0001D292                            
0001D292                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D292                            
0001D292                            
0001D292                            ContScrCounter:				; XREF: ContinueScreen
0001D292 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001D29C 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D2A2 45F9 0000 0000             		lea	(Hud_10).l,a2
0001D2A8 7C01                       		moveq	#1,d6
0001D2AA 7800                       		moveq	#0,d4
0001D2AC 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001D2B0                            
0001D2B0                            ContScr_Loop:
0001D2B0 7400                       		moveq	#0,d2
0001D2B2 261A                       		move.l	(a2)+,d3
0001D2B4                            
0001D2B4                            loc_1C95A:
0001D2B4 9283                       		sub.l	d3,d1
0001D2B6 6500                       		bcs.s	loc_1C962
0001D2B8 5242                       		addq.w	#1,d2
0001D2BA 60F8                       		bra.s	loc_1C95A
0001D2BC                            ; ===========================================================================
0001D2BC                            
0001D2BC                            loc_1C962:
0001D2BC D283                       		add.l	d3,d1
0001D2BE ED4A                       		lsl.w	#6,d2
0001D2C0 47F1 2000                  		lea	(a1,d2.w),a3
0001D2C4 2C9B                       		move.l	(a3)+,(a6)
0001D2C6 2C9B                       		move.l	(a3)+,(a6)
0001D2C8 2C9B                       		move.l	(a3)+,(a6)
0001D2CA 2C9B                       		move.l	(a3)+,(a6)
0001D2CC 2C9B                       		move.l	(a3)+,(a6)
0001D2CE 2C9B                       		move.l	(a3)+,(a6)
0001D2D0 2C9B                       		move.l	(a3)+,(a6)
0001D2D2 2C9B                       		move.l	(a3)+,(a6)
0001D2D4 2C9B                       		move.l	(a3)+,(a6)
0001D2D6 2C9B                       		move.l	(a3)+,(a6)
0001D2D8 2C9B                       		move.l	(a3)+,(a6)
0001D2DA 2C9B                       		move.l	(a3)+,(a6)
0001D2DC 2C9B                       		move.l	(a3)+,(a6)
0001D2DE 2C9B                       		move.l	(a3)+,(a6)
0001D2E0 2C9B                       		move.l	(a3)+,(a6)
0001D2E2 2C9B                       		move.l	(a3)+,(a6)
0001D2E4 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001D2E8                            
0001D2E8 4E75                       		rts	
0001D2EA                            ; End of function ContScrCounter
0001D2EA                            
0001D2EA                            ; ===========================================================================
0001D2EA                            ; ---------------------------------------------------------------------------
0001D2EA                            ; HUD counter sizes
0001D2EA                            ; ---------------------------------------------------------------------------
0001D2EA 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001D2EE 0000 2710                  Hud_10000:	dc.l 10000
0001D2F2 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001D2F6 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001D2FA 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001D2FE 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001D302                            
0001D302                            ; ---------------------------------------------------------------------------
0001D302                            ; Subroutine to	load time numbers patterns
0001D302                            ; ---------------------------------------------------------------------------
0001D302                            
0001D302                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D302                            
0001D302                            
0001D302                            Hud_Mins:				; XREF: Hud_ChkTime
0001D302 45F9 0001 D2FE             		lea	(Hud_1).l,a2
0001D308 7C00                       		moveq	#0,d6
0001D30A 6000                       		bra.s	loc_1C9BA
0001D30C                            ; End of function Hud_Mins
0001D30C                            
0001D30C                            
0001D30C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D30C                            
0001D30C                            
0001D30C                            Hud_Secs:				; XREF: Hud_ChkTime
0001D30C 45F9 0001 D2FA             		lea	(Hud_10).l,a2
0001D312 7C01                       		moveq	#1,d6
0001D314                            
0001D314                            loc_1C9BA:
0001D314 7800                       		moveq	#0,d4
0001D316 43FA 0000                  		lea	Art_Hud(pc),a1
0001D31A                            
0001D31A                            Hud_TimeLoop:
0001D31A 7400                       		moveq	#0,d2
0001D31C 261A                       		move.l	(a2)+,d3
0001D31E                            
0001D31E                            loc_1C9C4:
0001D31E 9283                       		sub.l	d3,d1
0001D320 6500                       		bcs.s	loc_1C9CC
0001D322 5242                       		addq.w	#1,d2
0001D324 60F8                       		bra.s	loc_1C9C4
0001D326                            ; ===========================================================================
0001D326                            
0001D326                            loc_1C9CC:
0001D326 D283                       		add.l	d3,d1
0001D328 4A42                       		tst.w	d2
0001D32A 6700                       		beq.s	loc_1C9D6
0001D32C 383C 0001                  		move.w	#1,d4
0001D330                            
0001D330                            loc_1C9D6:
0001D330 ED4A                       		lsl.w	#6,d2
0001D332 2D40 0004                  		move.l	d0,4(a6)
0001D336 47F1 2000                  		lea	(a1,d2.w),a3
0001D33A 2C9B                       		move.l	(a3)+,(a6)
0001D33C 2C9B                       		move.l	(a3)+,(a6)
0001D33E 2C9B                       		move.l	(a3)+,(a6)
0001D340 2C9B                       		move.l	(a3)+,(a6)
0001D342 2C9B                       		move.l	(a3)+,(a6)
0001D344 2C9B                       		move.l	(a3)+,(a6)
0001D346 2C9B                       		move.l	(a3)+,(a6)
0001D348 2C9B                       		move.l	(a3)+,(a6)
0001D34A 2C9B                       		move.l	(a3)+,(a6)
0001D34C 2C9B                       		move.l	(a3)+,(a6)
0001D34E 2C9B                       		move.l	(a3)+,(a6)
0001D350 2C9B                       		move.l	(a3)+,(a6)
0001D352 2C9B                       		move.l	(a3)+,(a6)
0001D354 2C9B                       		move.l	(a3)+,(a6)
0001D356 2C9B                       		move.l	(a3)+,(a6)
0001D358 2C9B                       		move.l	(a3)+,(a6)
0001D35A 0680 0040 0000             		addi.l	#$400000,d0
0001D360 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001D364                            
0001D364 4E75                       		rts	
0001D366                            ; End of function Hud_Secs
0001D366                            
0001D366                            ; ---------------------------------------------------------------------------
0001D366                            ; Subroutine to	load time/ring bonus numbers patterns
0001D366                            ; ---------------------------------------------------------------------------
0001D366                            
0001D366                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D366                            
0001D366                            
0001D366                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001D366 45F9 0001 D2F2             		lea	(Hud_1000).l,a2
0001D36C 7C03                       		moveq	#3,d6
0001D36E 7800                       		moveq	#0,d4
0001D370 43FA 0000                  		lea	Art_Hud(pc),a1
0001D374                            
0001D374                            Hud_BonusLoop:
0001D374 7400                       		moveq	#0,d2
0001D376 261A                       		move.l	(a2)+,d3
0001D378                            
0001D378                            loc_1CA1E:
0001D378 9283                       		sub.l	d3,d1
0001D37A 6500                       		bcs.s	loc_1CA26
0001D37C 5242                       		addq.w	#1,d2
0001D37E 60F8                       		bra.s	loc_1CA1E
0001D380                            ; ===========================================================================
0001D380                            
0001D380                            loc_1CA26:
0001D380 D283                       		add.l	d3,d1
0001D382 4A42                       		tst.w	d2
0001D384 6700                       		beq.s	loc_1CA30
0001D386 383C 0001                  		move.w	#1,d4
0001D38A                            
0001D38A                            loc_1CA30:
0001D38A 4A44                       		tst.w	d4
0001D38C 6700                       		beq.s	Hud_ClrBonus
0001D38E ED4A                       		lsl.w	#6,d2
0001D390 47F1 2000                  		lea	(a1,d2.w),a3
0001D394 2C9B                       		move.l	(a3)+,(a6)
0001D396 2C9B                       		move.l	(a3)+,(a6)
0001D398 2C9B                       		move.l	(a3)+,(a6)
0001D39A 2C9B                       		move.l	(a3)+,(a6)
0001D39C 2C9B                       		move.l	(a3)+,(a6)
0001D39E 2C9B                       		move.l	(a3)+,(a6)
0001D3A0 2C9B                       		move.l	(a3)+,(a6)
0001D3A2 2C9B                       		move.l	(a3)+,(a6)
0001D3A4 2C9B                       		move.l	(a3)+,(a6)
0001D3A6 2C9B                       		move.l	(a3)+,(a6)
0001D3A8 2C9B                       		move.l	(a3)+,(a6)
0001D3AA 2C9B                       		move.l	(a3)+,(a6)
0001D3AC 2C9B                       		move.l	(a3)+,(a6)
0001D3AE 2C9B                       		move.l	(a3)+,(a6)
0001D3B0 2C9B                       		move.l	(a3)+,(a6)
0001D3B2 2C9B                       		move.l	(a3)+,(a6)
0001D3B4                            
0001D3B4                            loc_1CA5A:
0001D3B4 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001D3B8                            
0001D3B8 4E75                       		rts	
0001D3BA                            ; ===========================================================================
0001D3BA                            
0001D3BA                            Hud_ClrBonus:
0001D3BA 7A0F                       		moveq	#$F,d5
0001D3BC                            
0001D3BC                            Hud_ClrBonusLoop:
0001D3BC 2CBC 0000 0000             		move.l	#0,(a6)
0001D3C2 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001D3C6                            
0001D3C6 60EC                       		bra.s	loc_1CA5A
0001D3C8                            ; End of function Hud_TimeRingBonus
0001D3C8                            
0001D3C8                            ; ---------------------------------------------------------------------------
0001D3C8                            ; Subroutine to	load uncompressed lives	counter	patterns
0001D3C8                            ; ---------------------------------------------------------------------------
0001D3C8                            
0001D3C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D3C8                            
0001D3C8                            
0001D3C8                            Hud_Lives:				; XREF: Hud_ChkLives
0001D3C8 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001D3CE 7200                       		moveq	#0,d1
0001D3D0 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001D3D4 45F9 0001 D2FA             		lea	(Hud_10).l,a2
0001D3DA 7C01                       		moveq	#1,d6
0001D3DC 7800                       		moveq	#0,d4
0001D3DE 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001D3E2                            
0001D3E2                            Hud_LivesLoop:
0001D3E2 2D40 0004                  		move.l	d0,4(a6)
0001D3E6 7400                       		moveq	#0,d2
0001D3E8 261A                       		move.l	(a2)+,d3
0001D3EA                            
0001D3EA                            loc_1CA90:
0001D3EA 9283                       		sub.l	d3,d1
0001D3EC 6500                       		bcs.s	loc_1CA98
0001D3EE 5242                       		addq.w	#1,d2
0001D3F0 60F8                       		bra.s	loc_1CA90
0001D3F2                            ; ===========================================================================
0001D3F2                            
0001D3F2                            loc_1CA98:
0001D3F2 D283                       		add.l	d3,d1
0001D3F4 4A42                       		tst.w	d2
0001D3F6 6700                       		beq.s	loc_1CAA2
0001D3F8 383C 0001                  		move.w	#1,d4
0001D3FC                            
0001D3FC                            loc_1CAA2:
0001D3FC 4A44                       		tst.w	d4
0001D3FE 6700                       		beq.s	Hud_ClrLives
0001D400                            
0001D400                            loc_1CAA6:
0001D400 EB4A                       		lsl.w	#5,d2
0001D402 47F1 2000                  		lea	(a1,d2.w),a3
0001D406 2C9B                       		move.l	(a3)+,(a6)
0001D408 2C9B                       		move.l	(a3)+,(a6)
0001D40A 2C9B                       		move.l	(a3)+,(a6)
0001D40C 2C9B                       		move.l	(a3)+,(a6)
0001D40E 2C9B                       		move.l	(a3)+,(a6)
0001D410 2C9B                       		move.l	(a3)+,(a6)
0001D412 2C9B                       		move.l	(a3)+,(a6)
0001D414 2C9B                       		move.l	(a3)+,(a6)
0001D416                            
0001D416                            loc_1CABC:
0001D416 0680 0040 0000             		addi.l	#$400000,d0
0001D41C 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001D420                            
0001D420 4E75                       		rts	
0001D422                            ; ===========================================================================
0001D422                            
0001D422                            Hud_ClrLives:
0001D422 4A46                       		tst.w	d6
0001D424 67DA                       		beq.s	loc_1CAA6
0001D426 7A07                       		moveq	#7,d5
0001D428                            
0001D428                            Hud_ClrLivesLoop:
0001D428 2CBC 0000 0000             		move.l	#0,(a6)
0001D42E 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001D432 60E2                       		bra.s	loc_1CABC
0001D434                            ; End of function Hud_Lives
0001D434                            
0001D434                            ; ===========================================================================
0001D434                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001D734                            		even
0001D734                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D874                            		even
0001D874                            ; ===========================================================================
0001D874                            ; ---------------------------------------------------------------------------
0001D874                            ; When debug mode is currently in use
0001D874                            ; ---------------------------------------------------------------------------
0001D874                            
0001D874                            DebugMode:				; XREF: Obj01; Obj09
0001D874 7000                       		moveq	#0,d0
0001D876 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D87A 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D87E 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D882                            ; ===========================================================================
0001D882 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D884 0000                       		dc.w Debug_Skip-Debug_Index
0001D886                            ; ===========================================================================
0001D886                            
0001D886                            Debug_Main:				; XREF: Debug_Index
0001D886 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D88A 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D890 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D896 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D89C 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D8A2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D8A8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D8AE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D8B4 117C 0000 001A             		move.b	#0,$1A(a0)
0001D8BA 117C 0000 001C             		move.b	#0,$1C(a0)
0001D8C0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D8C6 6600                       		bne.s	Debug_Zone	; if not, branch
0001D8C8 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D8CE 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D8D4 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D8D6 6000                       		bra.s	Debug_UseList
0001D8D8                            ; ===========================================================================
0001D8D8                            
0001D8D8                            Debug_Zone:
0001D8D8 7000                       		moveq	#0,d0
0001D8DA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D8DE                            
0001D8DE                            Debug_UseList:
0001D8DE 45F9 0000 0000             		lea	(DebugList).l,a2
0001D8E4 D040                       		add.w	d0,d0
0001D8E6 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D8EA 3C1A                       		move.w	(a2)+,d6
0001D8EC BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D8F0 6200                       		bhi.s	loc_1CF9E
0001D8F2 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D8F8                            
0001D8F8                            loc_1CF9E:
0001D8F8 6100 0000                  		bsr.w	Debug_ShowItem
0001D8FC 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D902 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D908                            
0001D908                            Debug_Skip:				; XREF: Debug_Index
0001D908 7006                       		moveq	#6,d0
0001D90A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D910 6700                       		beq.s	loc_1CFBE
0001D912 7000                       		moveq	#0,d0
0001D914 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D918                            
0001D918                            loc_1CFBE:
0001D918 45F9 0000 0000             		lea	(DebugList).l,a2
0001D91E D040                       		add.w	d0,d0
0001D920 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D924 3C1A                       		move.w	(a2)+,d6
0001D926 6100 0000                  		bsr.w	Debug_Control
0001D92A 4EF9 0000 DE60             		jmp	DisplaySprite
0001D930                            
0001D930                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D930                            
0001D930                            
0001D930                            Debug_Control:
0001D930 7800                       		moveq	#0,d4
0001D932 323C 0001                  		move.w	#1,d1
0001D936 1838 F605                  		move.b	($FFFFF605).w,d4
0001D93A 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D93E 6600                       		bne.s	loc_1D018	; if yes, branch
0001D940 1038 F604                  		move.b	($FFFFF604).w,d0
0001D944 0240 000F                  		andi.w	#$F,d0
0001D948 6600                       		bne.s	loc_1D000
0001D94A 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D950 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D956 6000 0000                  		bra.w	Debug_BackItem
0001D95A                            ; ===========================================================================
0001D95A                            
0001D95A                            loc_1D000:
0001D95A 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D95E 6600                       		bne.s	loc_1D01C
0001D960 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D966 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D96A 6600                       		bne.s	loc_1D018
0001D96C 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D972                            
0001D972                            loc_1D018:
0001D972 1838 F604                  		move.b	($FFFFF604).w,d4
0001D976                            
0001D976                            loc_1D01C:
0001D976 7200                       		moveq	#0,d1
0001D978 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D97C 5241                       		addq.w	#1,d1
0001D97E 4841                       		swap	d1
0001D980 E881                       		asr.l	#4,d1
0001D982 2428 000C                  		move.l	$C(a0),d2
0001D986 2628 0008                  		move.l	8(a0),d3
0001D98A 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D98E 6700                       		beq.s	loc_1D03C	; if not, branch
0001D990 9481                       		sub.l	d1,d2
0001D992 6400                       		bcc.s	loc_1D03C
0001D994 7400                       		moveq	#0,d2
0001D996                            
0001D996                            loc_1D03C:
0001D996 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D99A 6700                       		beq.s	loc_1D052	; if not, branch
0001D99C D481                       		add.l	d1,d2
0001D99E 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D9A4 6500                       		bcs.s	loc_1D052
0001D9A6 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D9AC                            
0001D9AC                            loc_1D052:
0001D9AC 0804 0002                  		btst	#2,d4
0001D9B0 6700                       		beq.s	loc_1D05E
0001D9B2 9681                       		sub.l	d1,d3
0001D9B4 6400                       		bcc.s	loc_1D05E
0001D9B6 7600                       		moveq	#0,d3
0001D9B8                            
0001D9B8                            loc_1D05E:
0001D9B8 0804 0003                  		btst	#3,d4
0001D9BC 6700                       		beq.s	loc_1D066
0001D9BE D681                       		add.l	d1,d3
0001D9C0                            
0001D9C0                            loc_1D066:
0001D9C0 2142 000C                  		move.l	d2,$C(a0)
0001D9C4 2143 0008                  		move.l	d3,8(a0)
0001D9C8                            
0001D9C8                            Debug_BackItem:
0001D9C8 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D9CE 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D9D0 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D9D6 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D9D8 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D9DC 6400                       		bcc.s	Debug_NoLoop
0001D9DE DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D9E2 6000                       		bra.s	Debug_NoLoop
0001D9E4                            ; ===========================================================================
0001D9E4                            
0001D9E4                            Debug_NextItem:
0001D9E4 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D9EA 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D9EC 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D9F0 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D9F4 6200                       		bhi.s	Debug_NoLoop
0001D9F6 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D9FC                            
0001D9FC                            Debug_NoLoop:
0001D9FC 6000 0000                  		bra.w	Debug_ShowItem
0001DA00                            ; ===========================================================================
0001DA00                            
0001DA00                            Debug_MakeItem:
0001DA00 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001DA06 6700                       		beq.s	Debug_Exit	; if not, branch
0001DA08 4EB9 0000 E2E6             		jsr	SingleObjLoad
0001DA0E 6600                       		bne.s	Debug_Exit
0001DA10 3368 0008 0008             		move.w	8(a0),8(a1)
0001DA16 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001DA1C 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001DA20 1368 0001 0001             		move.b	1(a0),1(a1)
0001DA26 1368 0001 0022             		move.b	1(a0),$22(a1)
0001DA2C 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001DA32 7000                       		moveq	#0,d0
0001DA34 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DA38 E748                       		lsl.w	#3,d0
0001DA3A 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001DA40 4E75                       		rts	
0001DA42                            ; ===========================================================================
0001DA42                            
0001DA42                            Debug_Exit:
0001DA42 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001DA48 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001DA4A 7000                       		moveq	#0,d0
0001DA4C 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001DA50 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DA58 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DA5E 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001DA62 3140 000A                  		move.w	d0,$A(a0)
0001DA66 3140 000E                  		move.w	d0,$E(a0)
0001DA6A 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001DA70 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001DA76 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001DA7C 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001DA7E 4278 F780                  		clr.w	($FFFFF780).w
0001DA82 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001DA88 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001DA90 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001DA96 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001DA9C 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001DAA2 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001DAA8                            
0001DAA8                            Debug_DoNothing:
0001DAA8 4E75                       		rts	
0001DAAA                            ; End of function Debug_Control
0001DAAA                            
0001DAAA                            
0001DAAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DAAA                            
0001DAAA                            
0001DAAA                            Debug_ShowItem:				; XREF: Debug_Main
0001DAAA 7000                       		moveq	#0,d0
0001DAAC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001DAB0 E748                       		lsl.w	#3,d0
0001DAB2 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001DAB8 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001DABE 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001DAC4 4E75                       		rts	
0001DAC6                            ; End of function Debug_ShowItem
0001DAC6                            
0001DAC6                            ; ===========================================================================
0001DAC6                            ; ---------------------------------------------------------------------------
0001DAC6                            ; Debug	list pointers
0001DAC6                            ; ---------------------------------------------------------------------------
0001DAC6                            DebugList:
0001DAC6                            	include "_inc\Debug list pointers.asm"
0001DAC6                            ; ---------------------------------------------------------------------------
0001DAC6                            ; Debug	list pointers
0001DAC6                            ; ---------------------------------------------------------------------------
0001DAC6 0000                       	dc.w Debug_GHZ-DebugList
0001DAC8 0000                       	dc.w Debug_LZ-DebugList
0001DACA 0000                       	dc.w Debug_MZ-DebugList
0001DACC 0000                       	dc.w Debug_SLZ-DebugList
0001DACE 0000                       	dc.w Debug_SYZ-DebugList
0001DAD0 0000                       	dc.w Debug_SBZ-DebugList
0001DAD2 0000                       	dc.w Debug_Ending-DebugList
0001DAD2 0000                       	dc.w Debug_Ending-DebugList
0001DAD4                            
0001DAD4                            ; ---------------------------------------------------------------------------
0001DAD4                            ; Debug	list - Green Hill
0001DAD4                            ; ---------------------------------------------------------------------------
0001DAD4                            Debug_GHZ:
0001DAD4                            	include "_inc\Debug list - GHZ.asm"
0001DAD4                            ; ---------------------------------------------------------------------------
0001DAD4                            ; Debug	list - Green Hill
0001DAD4                            ; ---------------------------------------------------------------------------
0001DAD4 0010                       	dc.w $10			; number of items in list
0001DAD6 2500 A678                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001DADA 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001DADE 2600 AC7E                  	dc.l Map_obj26+$26000000
0001DAE2 0000 0680                  	dc.b 0,	0, 6, $80
0001DAE6 1F00 9E70                  	dc.l Map_obj1F+$1F000000
0001DAEA 0000 0400                  	dc.b 0,	0, 4, 0
0001DAEE 2200 A12C                  	dc.l Map_obj22+$22000000
0001DAF2 0000 0444                  	dc.b 0,	0, 4, $44
0001DAF6 2B00 B2F2                  	dc.l Map_obj2B+$2B000000
0001DAFA 0000 047B                  	dc.b 0,	0, 4, $7B
0001DAFE 3600 D802                  	dc.l Map_obj36+$36000000
0001DB02 0000 051B                  	dc.b 0,	0, 5, $1B
0001DB06 1800 8782                  	dc.l Map_obj18+$18000000
0001DB0A 0000 4000                  	dc.b 0,	0, $40,	0
0001DB0E 3B00 D928                  	dc.l Map_obj3B+$3B000000
0001DB12 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001DB16 4000 FFFA                  	dc.l Map_obj40+$40000000
0001DB1A 0000 04F0                  	dc.b 0,	0, 4, $F0
0001DB1E 4100 E574                  	dc.l Map_obj41+$41000000
0001DB22 0000 0523                  	dc.b 0,	0, 5, $23
0001DB26 4200 E79A                  	dc.l Map_obj42+$42000000
0001DB2A 0000 249B                  	dc.b 0,	0, $24,	$9B
0001DB2E 4400 EAA8                  	dc.l Map_obj44+$44000000
0001DB32 0000 434C                  	dc.b 0,	0, $43,	$4C
0001DB36 1900 8882                  	dc.l Map_obj48+$19000000
0001DB3A 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001DB3E 7901 7A48                  	dc.l Map_obj79+$79000000
0001DB42 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DB46 4B00 A6B8                  	dc.l Map_obj4B+$4B000000
0001DB4A 0000 2400                  	dc.b 0,	0, $24,	0
0001DB4E 7D01 7B98                  	dc.l Map_obj7D+$7D000000
0001DB52 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001DB56                            	even
0001DB56                            	even
0001DB56                            
0001DB56                            ; ---------------------------------------------------------------------------
0001DB56                            ; Debug	list - Labyrinth
0001DB56                            ; ---------------------------------------------------------------------------
0001DB56                            Debug_LZ:
0001DB56                            	include "_inc\Debug list - LZ.asm"
0001DB56                            ; ---------------------------------------------------------------------------
0001DB56                            ; Debug	list - Labyrinth
0001DB56                            ; ---------------------------------------------------------------------------
0001DB56 0019                       	dc.w $19
0001DB58 2500 A678                  	dc.l Map_obj25+$25000000
0001DB5C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DB60 2600 AC7E                  	dc.l Map_obj26+$26000000
0001DB64 0000 0680                  	dc.b 0,	0, 6, $80
0001DB68 4100 E574                  	dc.l Map_obj41+$41000000
0001DB6C 0000 0523                  	dc.b 0,	0, 5, $23
0001DB70 2C00 B3A2                  	dc.l Map_obj2C+$2C000000
0001DB74 0800 2486                  	dc.b 8,	0, $24,	$86
0001DB78 2D00 B596                  	dc.l Map_obj2D+$2D000000
0001DB7C 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001DB80 1601 27CE                  	dc.l Map_obj16+$16000000
0001DB84 0000 03CC                  	dc.b 0,	0, 3, $CC
0001DB88 1601 27CE                  	dc.l Map_obj16+$16000000
0001DB8C 0203 03CC                  	dc.b 2,	3, 3, $CC
0001DB90 3300 CA4E                  	dc.l Map_obj33+$33000000
0001DB94 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DB98 3200 C60E                  	dc.l Map_obj32+$32000000
0001DB9C 0000 0513                  	dc.b 0,	0, 5, $13
0001DBA0 3600 D802                  	dc.l Map_obj36+$36000000
0001DBA4 0000 051B                  	dc.b 0,	0, 5, $1B
0001DBA8 5201 08F0                  	dc.l Map_obj52a+$52000000
0001DBAC 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001DBB0 6101 29F6                  	dc.l Map_obj61+$61000000
0001DBB4 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001DBB8 6101 29F6                  	dc.l Map_obj61+$61000000
0001DBBC 1301 43E6                  	dc.b $13, 1, $43, $E6
0001DBC0 6101 29F6                  	dc.l Map_obj61+$61000000
0001DBC4 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001DBC8 6201 2B4A                  	dc.l Map_obj62+$62000000
0001DBCC 0000 443E                  	dc.b 0,	0, $44,	$3E
0001DBD0 6101 29F6                  	dc.l Map_obj61+$61000000
0001DBD4 2702 43E6                  	dc.b $27, 2, $43, $E6
0001DBD8 6101 29F6                  	dc.l Map_obj61+$61000000
0001DBDC 3003 43E6                  	dc.b $30, 3, $43, $E6
0001DBE0 6301 2EAC                  	dc.l Map_obj63+$63000000
0001DBE4 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001DBE8 6001 2718                  	dc.l Map_obj60+$60000000
0001DBEC 0000 0467                  	dc.b 0,	0, 4, $67
0001DBF0 6401 31F2                  	dc.l Map_obj64+$64000000
0001DBF4 8413 8348                  	dc.b $84, $13, $83, $48
0001DBF8 6501 337A                  	dc.l Map_obj65+$65000000
0001DBFC 0202 C259                  	dc.b 2,	2, $C2,	$59
0001DC00 6501 337A                  	dc.l Map_obj65+$65000000
0001DC04 0909 C259                  	dc.b 9,	9, $C2,	$59
0001DC08 0B01 1B68                  	dc.l Map_obj0B+$B000000
0001DC0C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001DC10 0C01 1C38                  	dc.l Map_obj0C+$C000000
0001DC14 0200 4328                  	dc.b 2,	0, $43,	$28
0001DC18 7901 7A48                  	dc.l Map_obj79+$79000000
0001DC1C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DC20                            	even
0001DC20                            	even
0001DC20                            
0001DC20                            ; ---------------------------------------------------------------------------
0001DC20                            ; Debug	list - Marble
0001DC20                            ; ---------------------------------------------------------------------------
0001DC20                            Debug_MZ:
0001DC20                            	include "_inc\Debug list - MZ.asm"
0001DC20                            ; ---------------------------------------------------------------------------
0001DC20                            ; Debug	list - Marble
0001DC20                            ; ---------------------------------------------------------------------------
0001DC20 0012                       	dc.w $12
0001DC22 2500 A678                  	dc.l Map_obj25+$25000000
0001DC26 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DC2A 2600 AC7E                  	dc.l Map_obj26+$26000000
0001DC2E 0000 0680                  	dc.b 0,	0, 6, $80
0001DC32 2200 A12C                  	dc.l Map_obj22+$22000000
0001DC36 0000 0444                  	dc.b 0,	0, 4, $44
0001DC3A 3600 D802                  	dc.l Map_obj36+$36000000
0001DC3E 0000 051B                  	dc.b 0,	0, 5, $1B
0001DC42 4100 E574                  	dc.l Map_obj41+$41000000
0001DC46 0000 0523                  	dc.b 0,	0, 5, $23
0001DC4A 1300 BAD8                  	dc.l Map_obj14+$13000000
0001DC4E 0000 0345                  	dc.b 0,	0, 3, $45
0001DC52 4600 F15A                  	dc.l Map_obj46+$46000000
0001DC56 0000 4000                  	dc.b 0,	0, $40,	0
0001DC5A 4C00 FAA6                  	dc.l Map_obj4C+$4C000000
0001DC5E 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DC62 4E00 FD8A                  	dc.l Map_obj4E+$4E000000
0001DC66 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001DC6A 3300 CA4E                  	dc.l Map_obj33+$33000000
0001DC6E 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DC72 5001 0188                  	dc.l Map_obj50+$50000000
0001DC76 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DC7A 5101 0624                  	dc.l Map_obj51+$51000000
0001DC7E 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001DC82 5201 089A                  	dc.l Map_obj52+$52000000
0001DC86 0000 02B8                  	dc.b 0,	0, 2, $B8
0001DC8A 5300 8E1A                  	dc.l Map_obj53+$53000000
0001DC8E 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001DC92 5400 FA6C                  	dc.l Map_obj54+$54000000
0001DC96 0000 8680                  	dc.b 0,	0, $86,	$80
0001DC9A 5501 0A8E                  	dc.l Map_obj55+$55000000
0001DC9E 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DCA2 7801 76C2                  	dc.l Map_obj78+$78000000
0001DCA6 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DCAA 7901 7A48                  	dc.l Map_obj79+$79000000
0001DCAE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DCB2                            	even
0001DCB2                            	even
0001DCB2                            
0001DCB2                            ; ---------------------------------------------------------------------------
0001DCB2                            ; Debug	list - Star Light
0001DCB2                            ; ---------------------------------------------------------------------------
0001DCB2                            Debug_SLZ:
0001DCB2                            	include "_inc\Debug list - SLZ.asm"
0001DCB2                            ; ---------------------------------------------------------------------------
0001DCB2                            ; Debug	list - Star Light
0001DCB2                            ; ---------------------------------------------------------------------------
0001DCB2 000F                       	dc.w $F
0001DCB4 2500 A678                  	dc.l Map_obj25+$25000000
0001DCB8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DCBC 2600 AC7E                  	dc.l Map_obj26+$26000000
0001DCC0 0000 0680                  	dc.b 0,	0, 6, $80
0001DCC4 5901 1590                  	dc.l Map_obj59+$59000000
0001DCC8 0000 4000                  	dc.b 0,	0, $40,	0
0001DCCC 5300 8E1A                  	dc.l Map_obj53+$53000000
0001DCD0 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001DCD4 1800 87E0                  	dc.l Map_obj18b+$18000000
0001DCD8 0000 4000                  	dc.b 0,	0, $40,	0
0001DCDC 5A01 16CA                  	dc.l Map_obj5A+$5A000000
0001DCE0 0000 4000                  	dc.b 0,	0, $40,	0
0001DCE4 5B01 1882                  	dc.l Map_obj5B+$5B000000
0001DCE8 0000 4000                  	dc.b 0,	0, $40,	0
0001DCEC 5D01 1E52                  	dc.l Map_obj5D+$5D000000
0001DCF0 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001DCF4 5E01 21E4                  	dc.l Map_obj5E+$5E000000
0001DCF8 0000 0374                  	dc.b 0,	0, 3, $74
0001DCFC 4100 E574                  	dc.l Map_obj41+$41000000
0001DD00 0000 0523                  	dc.b 0,	0, 5, $23
0001DD04 1300 BAD8                  	dc.l Map_obj14+$13000000
0001DD08 0000 0480                  	dc.b 0,	0, 4, $80
0001DD0C 1C00 8F2A                  	dc.l Map_obj1C+$1C000000
0001DD10 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001DD14 5F01 2462                  	dc.l Map_obj5F+$5F000000
0001DD18 0000 0400                  	dc.b 0,	0, 4, 0
0001DD1C 6001 2718                  	dc.l Map_obj60+$60000000
0001DD20 0000 2429                  	dc.b 0,	0, $24,	$29
0001DD24 7901 7A48                  	dc.l Map_obj79+$79000000
0001DD28 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DD2C                            	even
0001DD2C                            	even
0001DD2C                            
0001DD2C                            ; ---------------------------------------------------------------------------
0001DD2C                            ; Debug	list - Spring Yard
0001DD2C                            ; ---------------------------------------------------------------------------
0001DD2C                            Debug_SYZ:
0001DD2C                            	include "_inc\Debug list - SYZ.asm"
0001DD2C                            ; ---------------------------------------------------------------------------
0001DD2C                            ; Debug	list - Spring Yard
0001DD2C                            ; ---------------------------------------------------------------------------
0001DD2C 000F                       	dc.w $F
0001DD2E 2500 A678                  	dc.l Map_obj25+$25000000
0001DD32 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DD36 2600 AC7E                  	dc.l Map_obj26+$26000000
0001DD3A 0000 0680                  	dc.b 0,	0, 6, $80
0001DD3E 3600 D802                  	dc.l Map_obj36+$36000000
0001DD42 0000 051B                  	dc.b 0,	0, 5, $1B
0001DD46 4100 E574                  	dc.l Map_obj41+$41000000
0001DD4A 0000 0523                  	dc.b 0,	0, 5, $23
0001DD4E 4300 E9FA                  	dc.l Map_obj43+$43000000
0001DD52 0000 04B8                  	dc.b 0,	0, 4, $B8
0001DD56 1200 F1D8                  	dc.l Map_obj12+$12000000
0001DD5A 0000 0000                  	dc.b 0,	0, 0, 0
0001DD5E 4700 F354                  	dc.l Map_obj47+$47000000
0001DD62 0000 0380                  	dc.b 0,	0, 3, $80
0001DD66 1F00 9E70                  	dc.l Map_obj1F+$1F000000
0001DD6A 0000 0400                  	dc.b 0,	0, 4, 0
0001DD6E 2200 A12C                  	dc.l Map_obj22+$22000000
0001DD72 0000 0444                  	dc.b 0,	0, 4, $44
0001DD76 5001 0188                  	dc.l Map_obj50+$50000000
0001DD7A 0000 247B                  	dc.b 0,	0, $24,	$7B
0001DD7E 1800 87CE                  	dc.l Map_obj18a+$18000000
0001DD82 0000 4000                  	dc.b 0,	0, $40,	0
0001DD86 5601 0F50                  	dc.l Map_obj56+$56000000
0001DD8A 0000 4000                  	dc.b 0,	0, $40,	0
0001DD8E 3200 C60E                  	dc.l Map_obj32+$32000000
0001DD92 0000 0513                  	dc.b 0,	0, 5, $13
0001DD96 7801 76C2                  	dc.l Map_obj78+$78000000
0001DD9A 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001DD9E 7901 7A48                  	dc.l Map_obj79+$79000000
0001DDA2 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DDA6                            	even
0001DDA6                            	even
0001DDA6                            
0001DDA6                            ; ---------------------------------------------------------------------------
0001DDA6                            ; Debug	list - Scrap Brain
0001DDA6                            ; ---------------------------------------------------------------------------
0001DDA6                            Debug_SBZ:
0001DDA6                            	include "_inc\Debug list - SBZ.asm"
0001DDA6                            ; ---------------------------------------------------------------------------
0001DDA6                            ; Debug	list - Scrap Brain
0001DDA6                            ; ---------------------------------------------------------------------------
0001DDA6 001D                       	dc.w $1D
0001DDA8 2500 A678                  	dc.l Map_obj25+$25000000
0001DDAC 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DDB0 2600 AC7E                  	dc.l Map_obj26+$26000000
0001DDB4 0000 0680                  	dc.b 0,	0, 6, $80
0001DDB8 5F01 2462                  	dc.l Map_obj5F+$5F000000
0001DDBC 0000 0400                  	dc.b 0,	0, 4, 0
0001DDC0 6001 2718                  	dc.l Map_obj60+$60000000
0001DDC4 0000 0429                  	dc.b 0,	0, 4, $29
0001DDC8 7801 76C2                  	dc.l Map_obj78+$78000000
0001DDCC 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001DDD0 1501 12EC                  	dc.l Map_obj15b+$15000000
0001DDD4 0702 4391                  	dc.b 7,	2, $43,	$91
0001DDD8 6701 5FD6                  	dc.l Map_obj67+$67000000
0001DDDC E000 C344                  	dc.b $E0, 0, $C3, $44
0001DDE0 5201 089A                  	dc.l Map_obj52+$52000000
0001DDE4 2802 22C0                  	dc.b $28, 2, $22, $C0
0001DDE8 3200 C60E                  	dc.l Map_obj32+$32000000
0001DDEC 0000 0513                  	dc.b 0,	0, 5, $13
0001DDF0 6901 6230                  	dc.l Map_obj69+$69000000
0001DDF4 0300 4492                  	dc.b 3,	0, $44,	$92
0001DDF8 6901 628A                  	dc.l Map_obj69a+$69000000
0001DDFC 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001DE00 6A01 64E8                  	dc.l Map_obj6A+$6A000000
0001DE04 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001DE08 5300 8E1A                  	dc.l Map_obj53+$53000000
0001DE0C 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001DE10 5201 089A                  	dc.l Map_obj52+$52000000
0001DE14 3903 4460                  	dc.b $39, 3, $44, $60
0001DE18 6B01 68B8                  	dc.l Map_obj6B+$6B000000
0001DE1C 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001DE20 2A00 90C0                  	dc.l Map_obj2A+$2A000000
0001DE24 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001DE28 6B01 68B8                  	dc.l Map_obj6B+$6B000000
0001DE2C 1301 22C0                  	dc.b $13, 1, $22, $C0
0001DE30 6A01 64E8                  	dc.l Map_obj6A+$6A000000
0001DE34 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001DE38 6B01 68B8                  	dc.l Map_obj6B+$6B000000
0001DE3C 2401 22C0                  	dc.b $24, 1, $22, $C0
0001DE40 6A01 64E8                  	dc.l Map_obj6A+$6A000000
0001DE44 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001DE48 6B01 68B8                  	dc.l Map_obj6B+$6B000000
0001DE4C 3401 22C0                  	dc.b $34, 1, $22, $C0
0001DE50 6C01 6A7A                  	dc.l Map_obj6C+$6C000000
0001DE54 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001DE58 6D00 EE4A                  	dc.l Map_obj6D+$6D000000
0001DE5C 6400 83D9                  	dc.b $64, 0, $83, $D9
0001DE60 6D00 EE4A                  	dc.l Map_obj6D+$6D000000
0001DE64 640B 83D9                  	dc.b $64, $B, $83, $D9
0001DE68 6E01 6B30                  	dc.l Map_obj6E+$6E000000
0001DE6C 0400 047E                  	dc.b 4,	0, 4, $7E
0001DE70 7001 6F86                  	dc.l Map_obj70+$70000000
0001DE74 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001DE78 7101 1CF8                  	dc.l Map_obj71+$71000000
0001DE7C 1100 8680                  	dc.b $11, 0, $86, $80
0001DE80 1E00 957E                  	dc.l Map_obj1E+$1E000000
0001DE84 0400 2302                  	dc.b 4,	0, $23,	2
0001DE88 7901 7A48                  	dc.l Map_obj79+$79000000
0001DE8C 0100 07A0                  	dc.b 1,	0, 7, $A0
0001DE90                            	even
0001DE90                            	even
0001DE90                            
0001DE90                            ; ---------------------------------------------------------------------------
0001DE90                            ; Debug	list - ending sequence / special stage
0001DE90                            ; ---------------------------------------------------------------------------
0001DE90                            Debug_Ending:
0001DE90                            	include "_inc\Debug list - Ending and SS.asm"
0001DE90                            ; ---------------------------------------------------------------------------
0001DE90                            ; Debug	list - ending sequence / special stage
0001DE90                            ; ---------------------------------------------------------------------------
0001DE90 000D                       	dc.w $D
0001DE92 2500 A678                  	dc.l Map_obj25+$25000000
0001DE96 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001DE9A 4700 F354                  	dc.l Map_obj47+$47000000
0001DE9E 0000 0380                  	dc.b 0,	0, 3, $80
0001DEA2 2800 9BA2                  	dc.l Map_obj28a+$28000000
0001DEA6 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001DEAA 2800 9BA2                  	dc.l Map_obj28a+$28000000
0001DEAE 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001DEB2 2800 9BA2                  	dc.l Map_obj28a+$28000000
0001DEB6 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001DEBA 2800 9B8A                  	dc.l Map_obj28+$28000000
0001DEBE 0D00 0553                  	dc.b $D, 0, 5, $53
0001DEC2 2800 9B8A                  	dc.l Map_obj28+$28000000
0001DEC6 0E00 0553                  	dc.b $E, 0, 5, $53
0001DECA 2800 9B8A                  	dc.l Map_obj28+$28000000
0001DECE 0F00 0573                  	dc.b $F, 0, 5, $73
0001DED2 2800 9B8A                  	dc.l Map_obj28+$28000000
0001DED6 1000 0573                  	dc.b $10, 0, 5,	$73
0001DEDA 2800 9BA2                  	dc.l Map_obj28a+$28000000
0001DEDE 1100 0585                  	dc.b $11, 0, 5,	$85
0001DEE2 2800 9BBA                  	dc.l Map_obj28b+$28000000
0001DEE6 1200 0593                  	dc.b $12, 0, 5,	$93
0001DEEA 2800 9BA2                  	dc.l Map_obj28a+$28000000
0001DEEE 1300 0565                  	dc.b $13, 0, 5,	$65
0001DEF2 2800 9BBA                  	dc.l Map_obj28b+$28000000
0001DEF6 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001DEFA                            	even
0001DEFA                            	even
0001DEFA                            
0001DEFA                            ; ---------------------------------------------------------------------------
0001DEFA                            ; Main level load blocks
0001DEFA                            ; ---------------------------------------------------------------------------
0001DEFA                            MainLoadBlocks:
0001DEFA                            	include "_inc\Main level load blocks.asm"
0001DEFA                            ; ---------------------------------------------------------------------------
0001DEFA                            ; Main level load blocks
0001DEFA                            ;
0001DEFA                            ; ===FORMAT===
0001DEFA                            ; level	patterns + (1st	PLC num	* 10^6)
0001DEFA                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001DEFA                            ; 256x256 mappings
0001DEFA                            ; blank, music (unused), pal index (unused), pal index
0001DEFA                            ; ---------------------------------------------------------------------------
0001DEFA 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001DEFE 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001DF02 0000 0000                  	dc.l Blk256_GHZ
0001DF06 0081 0404                  	dc.b 0,	$81, 4,	4
0001DF0A 0000 0000                  	dc.l Nem_LZ+$6000000
0001DF0E 0000 0000                  	dc.l Blk16_LZ+$7000000
0001DF12 0000 0000                  	dc.l Blk256_LZ
0001DF16 0082 0505                  	dc.b 0,	$82, 5,	5
0001DF1A 0000 0000                  	dc.l Nem_MZ+$8000000
0001DF1E 0000 0000                  	dc.l Blk16_MZ+$9000000
0001DF22 0000 0000                  	dc.l Blk256_MZ
0001DF26 0083 0606                  	dc.b 0,	$83, 6,	6
0001DF2A 0000 0000                  	dc.l Nem_SLZ+$A000000
0001DF2E 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001DF32 0000 0000                  	dc.l Blk256_SLZ
0001DF36 0084 0707                  	dc.b 0,	$84, 7,	7
0001DF3A 0000 0000                  	dc.l Nem_SYZ+$C000000
0001DF3E 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001DF42 0000 0000                  	dc.l Blk256_SYZ
0001DF46 0085 0808                  	dc.b 0,	$85, 8,	8
0001DF4A 0000 0000                  	dc.l Nem_SBZ+$E000000
0001DF4E 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001DF52 0000 0000                  	dc.l Blk256_SBZ
0001DF56 0086 0909                  	dc.b 0,	$86, 9,	9
0001DF5A 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001DF5E 0000 0000                  	dc.l Blk16_GHZ
0001DF62 0000 0000                  	dc.l Blk256_GHZ
0001DF66 0086 1313                  	dc.b 0,	$86, $13, $13
0001DF6A                            	even
0001DF6A                            	even
0001DF6A                            
0001DF6A                            ; ---------------------------------------------------------------------------
0001DF6A                            ; Pattern load cues
0001DF6A                            ; ---------------------------------------------------------------------------
0001DF6A                            ArtLoadCues:
0001DF6A                            	include "_inc\Pattern load cues.asm"
0001DF6A                            ; ---------------------------------------------------------------------------
0001DF6A                            ; Pattern load cues - index
0001DF6A                            ; ---------------------------------------------------------------------------
0001DF6A 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001DF6E 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001DF72 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001DF76 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001DF7A 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001DF7E 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001DF82 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001DF86 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001DF8A 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001DF8E 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001DF92 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001DF96 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001DF9A 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001DF9E 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001DFA2 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001DFA6 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001DFAA 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001DFAC                            ; ---------------------------------------------------------------------------
0001DFAC                            ; Pattern load cues - standard block 1
0001DFAC                            ; ---------------------------------------------------------------------------
0001DFAC 0004                       PLC_Main:	dc.w 4
0001DFAE 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001DFB2 F400                       		dc.w $F400
0001DFB4 0000 0000                  		dc.l Nem_Hud		; HUD
0001DFB8 D940                       		dc.w $D940
0001DFBA 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001DFBE FA80                       		dc.w $FA80
0001DFC0 0000 0000                  		dc.l Nem_Ring		; rings
0001DFC4 F640                       		dc.w $F640
0001DFC6 0000 0000                  		dc.l Nem_Points		; points from enemy
0001DFCA F2E0                       		dc.w $F2E0
0001DFCC                            ; ---------------------------------------------------------------------------
0001DFCC                            ; Pattern load cues - standard block 2
0001DFCC                            ; ---------------------------------------------------------------------------
0001DFCC 0002                       PLC_Main2:	dc.w 2
0001DFCE 0000 0000                  		dc.l Nem_Monitors	; monitors
0001DFD2 D000                       		dc.w $D000
0001DFD4 0000 0000                  		dc.l Nem_Shield		; shield
0001DFD8 A820                       		dc.w $A820
0001DFDA 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001DFDE AB80                       		dc.w $AB80
0001DFE0                            ; ---------------------------------------------------------------------------
0001DFE0                            ; Pattern load cues - explosion
0001DFE0                            ; ---------------------------------------------------------------------------
0001DFE0 0000                       PLC_Explode:	dc.w 0
0001DFE2 0000 0000                  		dc.l Nem_Explode	; explosion
0001DFE6 B400                       		dc.w $B400
0001DFE8                            ; ---------------------------------------------------------------------------
0001DFE8                            ; Pattern load cues - game/time	over
0001DFE8                            ; ---------------------------------------------------------------------------
0001DFE8 0000                       PLC_GameOver:	dc.w 0
0001DFEA 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001DFEE ABC0                       		dc.w $ABC0
0001DFF0                            ; ---------------------------------------------------------------------------
0001DFF0                            ; Pattern load cues - Green Hill
0001DFF0                            ; ---------------------------------------------------------------------------
0001DFF0 000B                       PLC_GHZ:	dc.w $B
0001DFF2 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DFF6 0000                       		dc.w 0
0001DFF8 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DFFC 39A0                       		dc.w $39A0
0001DFFE 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E002 6B00                       		dc.w $6B00
0001E004 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001E008 7A00                       		dc.w $7A00
0001E00A 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E00E 8000                       		dc.w $8000
0001E010 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E014 8880                       		dc.w $8880
0001E016 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001E01A 8F60                       		dc.w $8F60
0001E01C 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001E020 9360                       		dc.w $9360
0001E022 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001E026 9E00                       		dc.w $9E00
0001E028 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E02C A360                       		dc.w $A360
0001E02E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E032 A460                       		dc.w $A460
0001E034 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E038 A660                       		dc.w $A660
0001E03A 0005                       PLC_GHZ2:	dc.w 5
0001E03C 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E040 7000                       		dc.w $7000
0001E042 0000 0000                  		dc.l Nem_Bridge		; bridge
0001E046 71C0                       		dc.w $71C0
0001E048 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001E04C 7300                       		dc.w $7300
0001E04E 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001E052 7540                       		dc.w $7540
0001E054 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001E058 A1E0                       		dc.w $A1E0
0001E05A 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001E05E 6980                       		dc.w $6980
0001E060                            ; ---------------------------------------------------------------------------
0001E060                            ; Pattern load cues - Labyrinth
0001E060                            ; ---------------------------------------------------------------------------
0001E060 000B                       PLC_LZ:		dc.w $B
0001E062 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001E066 0000                       		dc.w 0
0001E068 0000 0000                  		dc.l Nem_LzBlock1	; block
0001E06C 3C00                       		dc.w $3C00
0001E06E 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001E072 3E00                       		dc.w $3E00
0001E074 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001E078 4B20                       		dc.w $4B20
0001E07A 0000 0000                  		dc.l Nem_Water		; water	surface
0001E07E 6000                       		dc.w $6000
0001E080 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001E084 6200                       		dc.w $6200
0001E086 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001E08A 6500                       		dc.w $6500
0001E08C 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001E090 6900                       		dc.w $6900
0001E092 0000 0000                  		dc.l Nem_LzBlock3	; block
0001E096 7780                       		dc.w $7780
0001E098 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001E09C 7880                       		dc.w $7880
0001E09E 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001E0A2 7980                       		dc.w $7980
0001E0A4 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001E0A8 94C0                       		dc.w $94C0
0001E0AA 000C                       PLC_LZ2:	dc.w $C
0001E0AC 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001E0B0 7BC0                       		dc.w $7BC0
0001E0B2 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001E0B6 7CC0                       		dc.w $7CC0
0001E0B8 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001E0BC 7EC0                       		dc.w $7EC0
0001E0BE 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001E0C2 5D20                       		dc.w $5D20
0001E0C4 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001E0C8 8800                       		dc.w $8800
0001E0CA 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001E0CE 89E0                       		dc.w $89E0
0001E0D0 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E0D4 8CE0                       		dc.w $8CE0
0001E0D6 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001E0DA 90C0                       		dc.w $90C0
0001E0DC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E0E0 A1E0                       		dc.w $A1E0
0001E0E2 0000 0000                  		dc.l Nem_Cork		; cork block
0001E0E6 A000                       		dc.w $A000
0001E0E8 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E0EC A360                       		dc.w $A360
0001E0EE 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E0F2 A460                       		dc.w $A460
0001E0F4 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E0F8 A660                       		dc.w $A660
0001E0FA                            ; ---------------------------------------------------------------------------
0001E0FA                            ; Pattern load cues - Marble
0001E0FA                            ; ---------------------------------------------------------------------------
0001E0FA 0009                       PLC_MZ:		dc.w 9
0001E0FC 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001E100 0000                       		dc.w 0
0001E102 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001E106 6000                       		dc.w $6000
0001E108 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E10C 68A0                       		dc.w $68A0
0001E10E 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001E112 7000                       		dc.w $7000
0001E114 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001E118 71C0                       		dc.w $71C0
0001E11A 0000 0000                  		dc.l Nem_Lava		; lava
0001E11E 7500                       		dc.w $7500
0001E120 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E124 8880                       		dc.w $8880
0001E126 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E12A 8F60                       		dc.w $8F60
0001E12C 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001E130 9700                       		dc.w $9700
0001E132 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E136 9FE0                       		dc.w $9FE0
0001E138 0004                       PLC_MZ2:	dc.w 4
0001E13A 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001E13E A260                       		dc.w $A260
0001E140 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E144 A360                       		dc.w $A360
0001E146 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E14A A460                       		dc.w $A460
0001E14C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E150 A660                       		dc.w $A660
0001E152 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001E156 5700                       		dc.w $5700
0001E158                            ; ---------------------------------------------------------------------------
0001E158                            ; Pattern load cues - Star Light
0001E158                            ; ---------------------------------------------------------------------------
0001E158 0008                       PLC_SLZ:	dc.w 8
0001E15A 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001E15E 0000                       		dc.w 0
0001E160 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E164 8000                       		dc.w $8000
0001E166 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E16A 8520                       		dc.w $8520
0001E16C 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001E170 9000                       		dc.w $9000
0001E172 0000 0000                  		dc.l Nem_SlzBlock	; block
0001E176 9C00                       		dc.w $9C00
0001E178 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001E17C A260                       		dc.w $A260
0001E17E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E182 A360                       		dc.w $A360
0001E184 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E188 A460                       		dc.w $A460
0001E18A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E18E A660                       		dc.w $A660
0001E190 0005                       PLC_SLZ2:	dc.w 5
0001E192 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001E196 6E80                       		dc.w $6E80
0001E198 0000 0000                  		dc.l Nem_Fan		; fan
0001E19C 7400                       		dc.w $7400
0001E19E 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001E1A2 7980                       		dc.w $7980
0001E1A4 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001E1A8 7B80                       		dc.w $7B80
0001E1AA 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001E1AE 9B00                       		dc.w $9B00
0001E1B0 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001E1B4 9E00                       		dc.w $9E00
0001E1B6                            ; ---------------------------------------------------------------------------
0001E1B6                            ; Pattern load cues - Spring Yard
0001E1B6                            ; ---------------------------------------------------------------------------
0001E1B6 0004                       PLC_SYZ:	dc.w 4
0001E1B8 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001E1BC 0000                       		dc.w 0
0001E1BE 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001E1C2 8000                       		dc.w $8000
0001E1C4 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001E1C8 8880                       		dc.w $8880
0001E1CA 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001E1CE 8F60                       		dc.w $8F60
0001E1D0 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001E1D4 9700                       		dc.w $9700
0001E1D6 0007                       PLC_SYZ2:	dc.w 7
0001E1D8 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E1DC 7000                       		dc.w $7000
0001E1DE 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E1E2 72C0                       		dc.w $72C0
0001E1E4 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001E1E8 7740                       		dc.w $7740
0001E1EA 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E1EE 9FE0                       		dc.w $9FE0
0001E1F0 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E1F4 A1E0                       		dc.w $A1E0
0001E1F6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E1FA A360                       		dc.w $A360
0001E1FC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E200 A460                       		dc.w $A460
0001E202 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E206 A660                       		dc.w $A660
0001E208                            ; ---------------------------------------------------------------------------
0001E208                            ; Pattern load cues - Scrap Brain
0001E208                            ; ---------------------------------------------------------------------------
0001E208 000B                       PLC_SBZ:	dc.w $B
0001E20A 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001E20E 0000                       		dc.w 0
0001E210 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001E214 5800                       		dc.w $5800
0001E216 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001E21A 5D00                       		dc.w $5D00
0001E21C 0000 0000                  		dc.l Nem_Girder		; girder
0001E220 5E00                       		dc.w $5E00
0001E222 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001E226 6040                       		dc.w $6040
0001E228 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001E22C 6880                       		dc.w $6880
0001E22E 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001E232 6900                       		dc.w $6900
0001E234 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001E238 7220                       		dc.w $7220
0001E23A 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001E23E 76A0                       		dc.w $76A0
0001E240 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001E244 7B20                       		dc.w $7B20
0001E246 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E24A 7EA0                       		dc.w $7EA0
0001E24C 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001E250 9860                       		dc.w $9860
0001E252 000C                       PLC_SBZ2:	dc.w $C
0001E254 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001E258 5600                       		dc.w $5600
0001E25A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001E25E 8000                       		dc.w $8000
0001E260 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001E264 8520                       		dc.w $8520
0001E266 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001E26A 8C00                       		dc.w $8C00
0001E26C 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001E270 8DE0                       		dc.w $8DE0
0001E272 0000 0000                  		dc.l Nem_Electric	; electric orb
0001E276 8FC0                       		dc.w $8FC0
0001E278 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001E27C 9240                       		dc.w $9240
0001E27E 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001E282 7F20                       		dc.w $7F20
0001E284 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001E288 9BE0                       		dc.w $9BE0
0001E28A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E28E A1E0                       		dc.w $A1E0
0001E290 0000 0000                  		dc.l Nem_Spikes		; spikes
0001E294 A360                       		dc.w $A360
0001E296 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001E29A A460                       		dc.w $A460
0001E29C 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001E2A0 A660                       		dc.w $A660
0001E2A2                            ; ---------------------------------------------------------------------------
0001E2A2                            ; Pattern load cues - title card
0001E2A2                            ; ---------------------------------------------------------------------------
0001E2A2 0000                       PLC_TitleCard:	dc.w 0
0001E2A4 0000 0000                  		dc.l Nem_TitleCard
0001E2A8 B000                       		dc.w $B000
0001E2AA                            ; ---------------------------------------------------------------------------
0001E2AA                            ; Pattern load cues - act 3 boss
0001E2AA                            ; ---------------------------------------------------------------------------
0001E2AA 0005                       PLC_Boss:	dc.w 5
0001E2AC 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E2B0 8000                       		dc.w $8000
0001E2B2 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001E2B6 8D80                       		dc.w $8D80
0001E2B8 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E2BC 93A0                       		dc.w $93A0
0001E2BE 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001E2C2 A300                       		dc.w $A300
0001E2C4 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001E2C8 A300                       		dc.w $A300
0001E2CA 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E2CE A540                       		dc.w $A540
0001E2D0                            ; ---------------------------------------------------------------------------
0001E2D0                            ; Pattern load cues - act 1/2 signpost
0001E2D0                            ; ---------------------------------------------------------------------------
0001E2D0 0002                       PLC_Signpost:	dc.w 2
0001E2D2 0000 0000                  		dc.l Nem_SignPost	; signpost
0001E2D6 D000                       		dc.w $D000
0001E2D8 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001E2DC 96C0                       		dc.w $96C0
0001E2DE 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001E2E2 8C40                       		dc.w $8C40
0001E2E4                            ; ---------------------------------------------------------------------------
0001E2E4                            ; Pattern load cues - beta special stage warp effect
0001E2E4                            ; ---------------------------------------------------------------------------
0001E2E4 0000                       PLC_Warp:	dc.w 0
0001E2E6 0000 0000                  		dc.l Nem_Warp
0001E2EA A820                       		dc.w $A820
0001E2EC                            ; ---------------------------------------------------------------------------
0001E2EC                            ; Pattern load cues - special stage
0001E2EC                            ; ---------------------------------------------------------------------------
0001E2EC 0010                       PLC_SpeStage:	dc.w $10
0001E2EE 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001E2F2 0000                       		dc.w 0
0001E2F4 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001E2F8 0A20                       		dc.w $A20
0001E2FA 0000 0000                  		dc.l Nem_SSWalls	; walls
0001E2FE 2840                       		dc.w $2840
0001E300 0000 0000                  		dc.l Nem_Bumper		; bumper
0001E304 4760                       		dc.w $4760
0001E306 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001E30A 4A20                       		dc.w $4A20
0001E30C 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001E310 4C60                       		dc.w $4C60
0001E312 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001E316 5E00                       		dc.w $5E00
0001E318 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001E31C 6E00                       		dc.w $6E00
0001E31E 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001E322 7E00                       		dc.w $7E00
0001E324 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001E328 8E00                       		dc.w $8E00
0001E32A 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001E32E 9E00                       		dc.w $9E00
0001E330 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001E334 AE00                       		dc.w $AE00
0001E336 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001E33A BE00                       		dc.w $BE00
0001E33C 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001E340 EE00                       		dc.w $EE00
0001E342 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001E346 F2E0                       		dc.w $F2E0
0001E348 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001E34C F400                       		dc.w $F400
0001E34E 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001E352 F520                       		dc.w $F520
0001E354 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001E358 F2E0                       		dc.w $F2E0
0001E35A 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001E35E F400                       		dc.w $F400
0001E360 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001E364 F520                       		dc.w $F520
0001E366                            ; ---------------------------------------------------------------------------
0001E366                            ; Pattern load cues - GHZ animals
0001E366                            ; ---------------------------------------------------------------------------
0001E366 0001                       PLC_GHZAnimals:	dc.w 1
0001E368 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E36C B000                       		dc.w $B000
0001E36E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E372 B240                       		dc.w $B240
0001E374                            ; ---------------------------------------------------------------------------
0001E374                            ; Pattern load cues - LZ animals
0001E374                            ; ---------------------------------------------------------------------------
0001E374 0001                       PLC_LZAnimals:	dc.w 1
0001E376 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E37A B000                       		dc.w $B000
0001E37C 0000 0000                  		dc.l Nem_Seal		; seal
0001E380 B240                       		dc.w $B240
0001E382                            ; ---------------------------------------------------------------------------
0001E382                            ; Pattern load cues - MZ animals
0001E382                            ; ---------------------------------------------------------------------------
0001E382 0001                       PLC_MZAnimals:	dc.w 1
0001E384 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E388 B000                       		dc.w $B000
0001E38A 0000 0000                  		dc.l Nem_Seal		; seal
0001E38E B240                       		dc.w $B240
0001E390                            ; ---------------------------------------------------------------------------
0001E390                            ; Pattern load cues - SLZ animals
0001E390                            ; ---------------------------------------------------------------------------
0001E390 0001                       PLC_SLZAnimals:	dc.w 1
0001E392 0000 0000                  		dc.l Nem_Pig		; pig
0001E396 B000                       		dc.w $B000
0001E398 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E39C B240                       		dc.w $B240
0001E39E                            ; ---------------------------------------------------------------------------
0001E39E                            ; Pattern load cues - SYZ animals
0001E39E                            ; ---------------------------------------------------------------------------
0001E39E 0001                       PLC_SYZAnimals:	dc.w 1
0001E3A0 0000 0000                  		dc.l Nem_Pig		; pig
0001E3A4 B000                       		dc.w $B000
0001E3A6 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E3AA B240                       		dc.w $B240
0001E3AC                            ; ---------------------------------------------------------------------------
0001E3AC                            ; Pattern load cues - SBZ animals
0001E3AC                            ; ---------------------------------------------------------------------------
0001E3AC 0001                       PLC_SBZAnimals:	dc.w 1
0001E3AE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E3B2 B000                       		dc.w $B000
0001E3B4 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E3B8 B240                       		dc.w $B240
0001E3BA                            ; ---------------------------------------------------------------------------
0001E3BA                            ; Pattern load cues - special stage results screen
0001E3BA                            ; ---------------------------------------------------------------------------
0001E3BA 0001                       PLC_SpeStResult:dc.w 1
0001E3BC 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001E3C0 A820                       		dc.w $A820
0001E3C2 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001E3C6 AA20                       		dc.w $AA20
0001E3C8                            ; ---------------------------------------------------------------------------
0001E3C8                            ; Pattern load cues - ending sequence
0001E3C8                            ; ---------------------------------------------------------------------------
0001E3C8 000E                       PLC_Ending:	dc.w $E
0001E3CA 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001E3CE 0000                       		dc.w 0
0001E3D0 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001E3D4 39A0                       		dc.w $39A0
0001E3D6 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001E3DA 6B00                       		dc.w $6B00
0001E3DC 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001E3E0 7400                       		dc.w $7400
0001E3E2 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E3E6 78A0                       		dc.w $78A0
0001E3E8 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001E3EC 7C20                       		dc.w $7C20
0001E3EE 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001E3F2 A480                       		dc.w $A480
0001E3F4 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001E3F8 AA60                       		dc.w $AA60
0001E3FA 0000 0000                  		dc.l Nem_Chicken	; chicken
0001E3FE ACA0                       		dc.w $ACA0
0001E400 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001E404 AE60                       		dc.w $AE60
0001E406 0000 0000                  		dc.l Nem_Seal		; seal
0001E40A B0A0                       		dc.w $B0A0
0001E40C 0000 0000                  		dc.l Nem_Pig		; pig
0001E410 B260                       		dc.w $B260
0001E412 0000 0000                  		dc.l Nem_Flicky		; flicky
0001E416 B4A0                       		dc.w $B4A0
0001E418 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001E41C B660                       		dc.w $B660
0001E41E 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001E422 B8A0                       		dc.w $B8A0
0001E424                            ; ---------------------------------------------------------------------------
0001E424                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001E424                            ; ---------------------------------------------------------------------------
0001E424 0002                       PLC_TryAgain:	dc.w 2
0001E426 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001E42A 78A0                       		dc.w $78A0
0001E42C 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001E430 7C20                       		dc.w $7C20
0001E432 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001E436 B400                       		dc.w $B400
0001E438                            ; ---------------------------------------------------------------------------
0001E438                            ; Pattern load cues - Eggman on SBZ 2
0001E438                            ; ---------------------------------------------------------------------------
0001E438 0002                       PLC_EggmanSBZ2:	dc.w 2
0001E43A 0000 0000                  		dc.l Nem_SbzBlock	; block
0001E43E A300                       		dc.w $A300
0001E440 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001E444 8000                       		dc.w $8000
0001E446 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001E44A 9400                       		dc.w $9400
0001E44C                            ; ---------------------------------------------------------------------------
0001E44C                            ; Pattern load cues - final boss
0001E44C                            ; ---------------------------------------------------------------------------
0001E44C 0004                       PLC_FZBoss:	dc.w 4
0001E44E 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001E452 7400                       		dc.w $7400
0001E454 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001E458 6000                       		dc.w $6000
0001E45A 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001E45E 8000                       		dc.w $8000
0001E460 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001E464 8E00                       		dc.w $8E00
0001E466 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001E46A A540                       		dc.w $A540
0001E46C                            ; ---------------------------------------------------------------------------
0001E46C                            ; Pattern load cues - Teto boss
0001E46C                            ; ---------------------------------------------------------------------------
0001E46C 0002                       PLC_TetoBoss:	dc.w 2
0001E46E 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001E472 8000                       		dc.w $8000
0001E474 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001E478 93A0                       		dc.w $93A0
0001E47A 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001E47E 9000                       		dc.w $9000
0001E480                            		even
0001E480                            		even
0001E480                            
0001E480                            		incbin	misc\padding.bin
0001E56E                            		even
0001E56E                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E9C4                            		even
0001E9C4                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001EA5C                            		even
0001EA5C                            Nem_Gomer:	incbin	artnem\gomer.bin
0001EB9E                            		even
0001EB9E                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001EBEC                            		even
0001EBEC                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001ED00                            		even
0001ED00                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001FBCA                            		even
0001FBCA                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00023CD0                            		even
00023CD0                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00023D04                            		even
00023D04                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00023DC2                            		even
00023DC2                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
0002426A                            		even
0002426A                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
000242C8                            		even
000242C8                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00024ECE                            		even
00024ECE                            ; ---------------------------------------------------------------------------
00024ECE                            ; Sprite mappings - Sonic
00024ECE                            ; ---------------------------------------------------------------------------
00024ECE                            Map_Sonic:
00024ECE                            	include "_maps\Sonic.asm"
00024ECE                            Map_81b4:
00024ECE 0000                       Map_81b4_0: 	dc.w Map_81b4_B8-Map_81b4
00024ED0 0000                       Map_81b4_2: 	dc.w Map_81b4_B9-Map_81b4
00024ED2 0000                       Map_81b4_4: 	dc.w Map_81b4_C4-Map_81b4
00024ED4 0000                       Map_81b4_6: 	dc.w Map_81b4_D4-Map_81b4
00024ED6 0000                       Map_81b4_8: 	dc.w Map_81b4_E4-Map_81b4
00024ED8 0000                       Map_81b4_A: 	dc.w Map_81b4_F4-Map_81b4
00024EDA 0000                       Map_81b4_C: 	dc.w Map_81b4_104-Map_81b4
00024EDC 0000                       Map_81b4_E: 	dc.w Map_81b4_119-Map_81b4
00024EDE 0000                       Map_81b4_10: 	dc.w Map_81b4_124-Map_81b4
00024EE0 0000                       Map_81b4_12: 	dc.w Map_81b4_12F-Map_81b4
00024EE2 0000                       Map_81b4_14: 	dc.w Map_81b4_144-Map_81b4
00024EE4 0000                       Map_81b4_16: 	dc.w Map_81b4_14F-Map_81b4
00024EE6 0000                       Map_81b4_18: 	dc.w Map_81b4_15F-Map_81b4
00024EE8 0000                       Map_81b4_1A: 	dc.w Map_81b4_179-Map_81b4
00024EEA 0000                       Map_81b4_1C: 	dc.w Map_81b4_198-Map_81b4
00024EEC 0000                       Map_81b4_1E: 	dc.w Map_81b4_1AD-Map_81b4
00024EEE 0000                       Map_81b4_20: 	dc.w Map_81b4_1C7-Map_81b4
00024EF0 0000                       Map_81b4_22: 	dc.w Map_81b4_1DC-Map_81b4
00024EF2 0000                       Map_81b4_24: 	dc.w Map_81b4_1F6-Map_81b4
00024EF4 0000                       Map_81b4_26: 	dc.w Map_81b4_20B-Map_81b4
00024EF6 0000                       Map_81b4_28: 	dc.w Map_81b4_216-Map_81b4
00024EF8 0000                       Map_81b4_2A: 	dc.w Map_81b4_221-Map_81b4
00024EFA 0000                       Map_81b4_2C: 	dc.w Map_81b4_236-Map_81b4
00024EFC 0000                       Map_81b4_2E: 	dc.w Map_81b4_241-Map_81b4
00024EFE 0000                       Map_81b4_30: 	dc.w Map_81b4_251-Map_81b4
00024F00 0000                       Map_81b4_32: 	dc.w Map_81b4_270-Map_81b4
00024F02 0000                       Map_81b4_34: 	dc.w Map_81b4_28F-Map_81b4
00024F04 0000                       Map_81b4_36: 	dc.w Map_81b4_2A4-Map_81b4
00024F06 0000                       Map_81b4_38: 	dc.w Map_81b4_2BE-Map_81b4
00024F08 0000                       Map_81b4_3A: 	dc.w Map_81b4_2D3-Map_81b4
00024F0A 0000                       Map_81b4_3C: 	dc.w Map_81b4_2ED-Map_81b4
00024F0C 0000                       Map_81b4_3E: 	dc.w Map_81b4_2F8-Map_81b4
00024F0E 0000                       Map_81b4_40: 	dc.w Map_81b4_303-Map_81b4
00024F10 0000                       Map_81b4_42: 	dc.w Map_81b4_30E-Map_81b4
00024F12 0000                       Map_81b4_44: 	dc.w Map_81b4_319-Map_81b4
00024F14 0000                       Map_81b4_46: 	dc.w Map_81b4_32E-Map_81b4
00024F16 0000                       Map_81b4_48: 	dc.w Map_81b4_33E-Map_81b4
00024F18 0000                       Map_81b4_4A: 	dc.w Map_81b4_353-Map_81b4
00024F1A 0000                       Map_81b4_4C: 	dc.w Map_81b4_363-Map_81b4
00024F1C 0000                       Map_81b4_4E: 	dc.w Map_81b4_36E-Map_81b4
00024F1E 0000                       Map_81b4_50: 	dc.w Map_81b4_379-Map_81b4
00024F20 0000                       Map_81b4_52: 	dc.w Map_81b4_384-Map_81b4
00024F22 0000                       Map_81b4_54: 	dc.w Map_81b4_38F-Map_81b4
00024F24 0000                       Map_81b4_56: 	dc.w Map_81b4_3A4-Map_81b4
00024F26 0000                       Map_81b4_58: 	dc.w Map_81b4_3AF-Map_81b4
00024F28 0000                       Map_81b4_5A: 	dc.w Map_81b4_3C4-Map_81b4
00024F2A 0000                       Map_81b4_5C: 	dc.w Map_81b4_3CF-Map_81b4
00024F2C 0000                       Map_81b4_5E: 	dc.w Map_81b4_3D5-Map_81b4
00024F2E 0000                       Map_81b4_60: 	dc.w Map_81b4_3DB-Map_81b4
00024F30 0000                       Map_81b4_62: 	dc.w Map_81b4_3E1-Map_81b4
00024F32 0000                       Map_81b4_64: 	dc.w Map_81b4_3E7-Map_81b4
00024F34 0000                       Map_81b4_66: 	dc.w Map_81b4_3ED-Map_81b4
00024F36 0000                       Map_81b4_68: 	dc.w Map_81b4_3F8-Map_81b4
00024F38 0000                       Map_81b4_6A: 	dc.w Map_81b4_3FE-Map_81b4
00024F3A 0000                       Map_81b4_6C: 	dc.w Map_81b4_409-Map_81b4
00024F3C 0000                       Map_81b4_6E: 	dc.w Map_81b4_40F-Map_81b4
00024F3E 0000                       Map_81b4_70: 	dc.w Map_81b4_41A-Map_81b4
00024F40 0000                       Map_81b4_72: 	dc.w Map_81b4_42F-Map_81b4
00024F42 0000                       Map_81b4_74: 	dc.w Map_81b4_44E-Map_81b4
00024F44 0000                       Map_81b4_76: 	dc.w Map_81b4_459-Map_81b4
00024F46 0000                       Map_81b4_78: 	dc.w Map_81b4_464-Map_81b4
00024F48 0000                       Map_81b4_7A: 	dc.w Map_81b4_479-Map_81b4
00024F4A 0000                       Map_81b4_7C: 	dc.w Map_81b4_484-Map_81b4
00024F4C 0000                       Map_81b4_7E: 	dc.w Map_81b4_494-Map_81b4
00024F4E 0000                       Map_81b4_80: 	dc.w Map_81b4_4A9-Map_81b4
00024F50 0000                       Map_81b4_82: 	dc.w Map_81b4_4B4-Map_81b4
00024F52 0000                       Map_81b4_84: 	dc.w Map_81b4_4C9-Map_81b4
00024F54 0000                       Map_81b4_86: 	dc.w Map_81b4_4DE-Map_81b4
00024F56 0000                       Map_81b4_88: 	dc.w Map_81b4_4F8-Map_81b4
00024F58 0000                       Map_81b4_8A: 	dc.w Map_81b4_512-Map_81b4
00024F5A 0000                       Map_81b4_8C: 	dc.w Map_81b4_51D-Map_81b4
00024F5C 0000                       Map_81b4_8E: 	dc.w Map_81b4_52D-Map_81b4
00024F5E 0000                       Map_81b4_90: 	dc.w Map_81b4_538-Map_81b4
00024F60 0000                       Map_81b4_92: 	dc.w Map_81b4_548-Map_81b4
00024F62 0000                       Map_81b4_94: 	dc.w Map_81b4_553-Map_81b4
00024F64 0000                       Map_81b4_96: 	dc.w Map_81b4_563-Map_81b4
00024F66 0000                       Map_81b4_98: 	dc.w Map_81b4_573-Map_81b4
00024F68 0000                       Map_81b4_9A: 	dc.w Map_81b4_58D-Map_81b4
00024F6A 0000                       Map_81b4_9C: 	dc.w Map_81b4_5A7-Map_81b4
00024F6C 0000                       Map_81b4_9E: 	dc.w Map_81b4_5B2-Map_81b4
00024F6E 0000                       Map_81b4_A0: 	dc.w Map_81b4_5C2-Map_81b4
00024F70 0000                       Map_81b4_A2: 	dc.w Map_81b4_5C8-Map_81b4
00024F72 0000                       Map_81b4_A4: 	dc.w Map_81b4_5CE-Map_81b4
00024F74 0000                       Map_81b4_A6: 	dc.w Map_81b4_5D4-Map_81b4
00024F76 0000                       Map_81b4_A8: 	dc.w Map_81b4_5E9-Map_81b4
00024F78 0000                       Map_81b4_AA: 	dc.w Map_81b4_5F9-Map_81b4
00024F7A 0000                       Map_81b4_AC: 	dc.w Map_81b4_609-Map_81b4
00024F7C 0000                       Map_81b4_AE: 	dc.w Map_81b4_619-Map_81b4
00024F7E 0000                       Map_81b4_B0: 	dc.w Map_81b4_624-Map_81b4
00024F80 0000                       Map_81b4_B2: 	dc.w Map_81b4_62F-Map_81b4
00024F82 0000                       Map_81b4_B4: 	dc.w Map_81b4_63F-Map_81b4
00024F84 0000                       Map_81b4_B6: 	dc.w Map_81b4_64A-Map_81b4
00024F86 00                         Map_81b4_B8: 	dc.b $0
00024F87 02                         Map_81b4_B9: 	dc.b $2
00024F88 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00024F8D 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00024F92 03                         Map_81b4_C4: 	dc.b $3
00024F93 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024F98 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024F9D 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024FA2 03                         Map_81b4_D4: 	dc.b $3
00024FA3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024FA8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024FAD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024FB2 03                         Map_81b4_E4: 	dc.b $3
00024FB3 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00024FB8 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00024FBD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024FC2 03                         Map_81b4_F4: 	dc.b $3
00024FC3 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00024FC8 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00024FCD 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00024FD2 04                         Map_81b4_104: 	dc.b $4
00024FD3 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00024FD8 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00024FDD FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00024FE2 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00024FE7 02                         Map_81b4_119: 	dc.b $2
00024FE8 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00024FED FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
00024FF2 02                         Map_81b4_124: 	dc.b $2
00024FF3 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00024FF8 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00024FFD 04                         Map_81b4_12F: 	dc.b $4
00024FFE EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00025003 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00025008 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
0002500D 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
00025012 02                         Map_81b4_144: 	dc.b $2
00025013 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
00025018 EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
0002501D 03                         Map_81b4_14F: 	dc.b $3
0002501E ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
00025023 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00025028 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
0002502D 05                         Map_81b4_15F: 	dc.b $5
0002502E EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025033 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00025038 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
0002503D 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
00025042 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00025047 06                         Map_81b4_179: 	dc.b $6
00025048 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002504D EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00025052 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00025057 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
0002505C FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00025061 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00025066 04                         Map_81b4_198: 	dc.b $4
00025067 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
0002506C ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00025071 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00025076 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
0002507B 05                         Map_81b4_1AD: 	dc.b $5
0002507C EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00025081 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00025086 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
0002508B 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00025090 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00025095 04                         Map_81b4_1C7: 	dc.b $4
00025096 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002509B EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000250A0 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000250A5 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000250AA 05                         Map_81b4_1DC: 	dc.b $5
000250AB ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000250B0 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000250B5 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000250BA FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000250BF 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000250C4 04                         Map_81b4_1F6: 	dc.b $4
000250C5 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000250CA EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000250CF FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000250D4 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000250D9 02                         Map_81b4_20B: 	dc.b $2
000250DA F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000250DF EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000250E4 02                         Map_81b4_216: 	dc.b $2
000250E5 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000250EA F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000250EF 04                         Map_81b4_221: 	dc.b $4
000250F0 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000250F5 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000250FA FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000250FF 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00025104 02                         Map_81b4_236: 	dc.b $2
00025105 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
0002510A F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
0002510F 03                         Map_81b4_241: 	dc.b $3
00025110 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00025115 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
0002511A F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
0002511F 06                         Map_81b4_251: 	dc.b $6
00025120 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025125 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
0002512A F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
0002512F F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00025134 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00025139 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
0002513E 06                         Map_81b4_270: 	dc.b $6
0002513F FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025144 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00025149 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
0002514E F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00025153 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00025158 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
0002515D 04                         Map_81b4_28F: 	dc.b $4
0002515E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00025163 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00025168 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
0002516D 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00025172 05                         Map_81b4_2A4: 	dc.b $5
00025173 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00025178 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
0002517D F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00025182 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00025187 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
0002518C 04                         Map_81b4_2BE: 	dc.b $4
0002518D FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00025192 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00025197 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
0002519C 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000251A1 05                         Map_81b4_2D3: 	dc.b $5
000251A2 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000251A7 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000251AC F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000251B1 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000251B6 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000251BB 02                         Map_81b4_2ED: 	dc.b $2
000251BC EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000251C1 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000251C6 02                         Map_81b4_2F8: 	dc.b $2
000251C7 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000251CC FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000251D1 02                         Map_81b4_303: 	dc.b $2
000251D2 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000251D7 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000251DC 02                         Map_81b4_30E: 	dc.b $2
000251DD EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000251E2 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000251E7 04                         Map_81b4_319: 	dc.b $4
000251E8 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000251ED EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000251F2 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000251F7 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000251FC 03                         Map_81b4_32E: 	dc.b $3
000251FD EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025202 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025207 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002520C 04                         Map_81b4_33E: 	dc.b $4
0002520D EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025212 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00025217 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002521C FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00025221 03                         Map_81b4_353: 	dc.b $3
00025222 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00025227 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002522C FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00025231 02                         Map_81b4_363: 	dc.b $2
00025232 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025237 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002523C 02                         Map_81b4_36E: 	dc.b $2
0002523D F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025242 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025247 02                         Map_81b4_379: 	dc.b $2
00025248 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002524D F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00025252 02                         Map_81b4_384: 	dc.b $2
00025253 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00025258 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002525D 04                         Map_81b4_38F: 	dc.b $4
0002525E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025263 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025268 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002526D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025272 02                         Map_81b4_3A4: 	dc.b $2
00025273 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025278 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002527D 04                         Map_81b4_3AF: 	dc.b $4
0002527E FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00025283 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00025288 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002528D 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00025292 02                         Map_81b4_3C4: 	dc.b $2
00025293 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00025298 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
0002529D 01                         Map_81b4_3CF: 	dc.b $1
0002529E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252A3 01                         Map_81b4_3D5: 	dc.b $1
000252A4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252A9 01                         Map_81b4_3DB: 	dc.b $1
000252AA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252AF 01                         Map_81b4_3E1: 	dc.b $1
000252B0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252B5 01                         Map_81b4_3E7: 	dc.b $1
000252B6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252BB 02                         Map_81b4_3ED: 	dc.b $2
000252BC F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000252C1 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000252C6 01                         Map_81b4_3F8: 	dc.b $1
000252C7 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252CC 02                         Map_81b4_3FE: 	dc.b $2
000252CD EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000252D2 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000252D7 01                         Map_81b4_409: 	dc.b $1
000252D8 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000252DD 02                         Map_81b4_40F: 	dc.b $2
000252DE ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000252E3 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000252E8 04                         Map_81b4_41A: 	dc.b $4
000252E9 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000252EE FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000252F3 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000252F8 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000252FD 06                         Map_81b4_42F: 	dc.b $6
000252FE F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
00025303 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
00025308 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
0002530D 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
00025312 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
00025317 F400 0011 04               	dc.b $F4, $0, $0, $11, $4
0002531C 02                         Map_81b4_44E: 	dc.b $2
0002531D 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
00025322 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
00025327 02                         Map_81b4_459: 	dc.b $2
00025328 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
0002532D EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
00025332 04                         Map_81b4_464: 	dc.b $4
00025333 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025338 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002533D 0408 000C 03               	dc.b $4, $8, $0, $C, $3
00025342 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025347 02                         Map_81b4_479: 	dc.b $2
00025348 F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
0002534D F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00025352 03                         Map_81b4_484: 	dc.b $3
00025353 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
00025358 FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
0002535D 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00025362 04                         Map_81b4_494: 	dc.b $4
00025363 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00025368 F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
0002536D 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00025372 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
00025377 02                         Map_81b4_4A9: 	dc.b $2
00025378 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002537D 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
00025382 04                         Map_81b4_4B4: 	dc.b $4
00025383 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00025388 0005 000C 08               	dc.b $0, $5, $0, $C, $8
0002538D F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00025392 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00025397 04                         Map_81b4_4C9: 	dc.b $4
00025398 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002539D 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000253A2 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000253A7 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000253AC 05                         Map_81b4_4DE: 	dc.b $5
000253AD E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000253B2 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000253B7 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000253BC 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000253C1 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000253C6 05                         Map_81b4_4F8: 	dc.b $5
000253C7 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000253CC E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000253D1 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000253D6 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000253DB 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000253E0 02                         Map_81b4_512: 	dc.b $2
000253E1 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000253E6 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000253EB 03                         Map_81b4_51D: 	dc.b $3
000253EC EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000253F1 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000253F6 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000253FB 02                         Map_81b4_52D: 	dc.b $2
000253FC ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00025401 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00025406 03                         Map_81b4_538: 	dc.b $3
00025407 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
0002540C 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00025411 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00025416 02                         Map_81b4_548: 	dc.b $2
00025417 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002541C FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00025421 03                         Map_81b4_553: 	dc.b $3
00025422 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00025427 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
0002542C E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00025431 03                         Map_81b4_563: 	dc.b $3
00025432 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025437 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002543C F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00025441 05                         Map_81b4_573: 	dc.b $5
00025442 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025447 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002544C F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00025451 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025456 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002545B 05                         Map_81b4_58D: 	dc.b $5
0002545C E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00025461 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00025466 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002546B 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00025470 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00025475 02                         Map_81b4_5A7: 	dc.b $2
00025476 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002547B F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00025480 03                         Map_81b4_5B2: 	dc.b $3
00025481 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00025486 F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
0002548B 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00025490 01                         Map_81b4_5C2: 	dc.b $1
00025491 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
00025496 01                         Map_81b4_5C8: 	dc.b $1
00025497 F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
0002549C 01                         Map_81b4_5CE: 	dc.b $1
0002549D F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000254A2 04                         Map_81b4_5D4: 	dc.b $4
000254A3 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000254A8 F705 0808 04               	dc.b $F7, $5, $8, $8, $4
000254AD 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
000254B2 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
000254B7 03                         Map_81b4_5E9: 	dc.b $3
000254B8 F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
000254BD FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
000254C2 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000254C7 03                         Map_81b4_5F9: 	dc.b $3
000254C8 F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000254CD F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000254D2 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000254D7 03                         Map_81b4_609: 	dc.b $3
000254D8 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000254DD FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000254E2 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000254E7 02                         Map_81b4_619: 	dc.b $2
000254E8 F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000254ED F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000254F2 02                         Map_81b4_624: 	dc.b $2
000254F3 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000254F8 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000254FD 03                         Map_81b4_62F: 	dc.b $3
000254FE ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
00025503 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
00025508 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
0002550D 02                         Map_81b4_63F: 	dc.b $2
0002550E F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
00025513 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
00025518 04                         Map_81b4_64A: 	dc.b $4
00025519 ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
0002551E F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
00025523 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
00025528 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
0002552E 00                         	even
0002552E 00                         	even
0002552E                            
0002552E                            ; ---------------------------------------------------------------------------
0002552E                            ; Uncompressed graphics	loading	array for Sonic
0002552E                            ; ---------------------------------------------------------------------------
0002552E                            SonicDynPLC:
0002552E                            	include "_inc\Sonic dynamic pattern load cues.asm"
0002552E                            DPLC_b4ca:
0002552E 0000                       DPLC_b4ca_0: 	dc.w DPLC_b4ca_B8-DPLC_b4ca
00025530 0000                       DPLC_b4ca_2: 	dc.w DPLC_b4ca_B9-DPLC_b4ca
00025532 0000                       DPLC_b4ca_4: 	dc.w DPLC_b4ca_BE-DPLC_b4ca
00025534 0000                       DPLC_b4ca_6: 	dc.w DPLC_b4ca_C5-DPLC_b4ca
00025536 0000                       DPLC_b4ca_8: 	dc.w DPLC_b4ca_CC-DPLC_b4ca
00025538 0000                       DPLC_b4ca_A: 	dc.w DPLC_b4ca_D3-DPLC_b4ca
0002553A 0000                       DPLC_b4ca_C: 	dc.w DPLC_b4ca_DA-DPLC_b4ca
0002553C 0000                       DPLC_b4ca_E: 	dc.w DPLC_b4ca_E3-DPLC_b4ca
0002553E 0000                       DPLC_b4ca_10: 	dc.w DPLC_b4ca_E8-DPLC_b4ca
00025540 0000                       DPLC_b4ca_12: 	dc.w DPLC_b4ca_ED-DPLC_b4ca
00025542 0000                       DPLC_b4ca_14: 	dc.w DPLC_b4ca_F6-DPLC_b4ca
00025544 0000                       DPLC_b4ca_16: 	dc.w DPLC_b4ca_FB-DPLC_b4ca
00025546 0000                       DPLC_b4ca_18: 	dc.w DPLC_b4ca_102-DPLC_b4ca
00025548 0000                       DPLC_b4ca_1A: 	dc.w DPLC_b4ca_10D-DPLC_b4ca
0002554A 0000                       DPLC_b4ca_1C: 	dc.w DPLC_b4ca_11A-DPLC_b4ca
0002554C 0000                       DPLC_b4ca_1E: 	dc.w DPLC_b4ca_123-DPLC_b4ca
0002554E 0000                       DPLC_b4ca_20: 	dc.w DPLC_b4ca_12E-DPLC_b4ca
00025550 0000                       DPLC_b4ca_22: 	dc.w DPLC_b4ca_137-DPLC_b4ca
00025552 0000                       DPLC_b4ca_24: 	dc.w DPLC_b4ca_142-DPLC_b4ca
00025554 0000                       DPLC_b4ca_26: 	dc.w DPLC_b4ca_14B-DPLC_b4ca
00025556 0000                       DPLC_b4ca_28: 	dc.w DPLC_b4ca_150-DPLC_b4ca
00025558 0000                       DPLC_b4ca_2A: 	dc.w DPLC_b4ca_155-DPLC_b4ca
0002555A 0000                       DPLC_b4ca_2C: 	dc.w DPLC_b4ca_15E-DPLC_b4ca
0002555C 0000                       DPLC_b4ca_2E: 	dc.w DPLC_b4ca_163-DPLC_b4ca
0002555E 0000                       DPLC_b4ca_30: 	dc.w DPLC_b4ca_16A-DPLC_b4ca
00025560 0000                       DPLC_b4ca_32: 	dc.w DPLC_b4ca_177-DPLC_b4ca
00025562 0000                       DPLC_b4ca_34: 	dc.w DPLC_b4ca_184-DPLC_b4ca
00025564 0000                       DPLC_b4ca_36: 	dc.w DPLC_b4ca_18D-DPLC_b4ca
00025566 0000                       DPLC_b4ca_38: 	dc.w DPLC_b4ca_198-DPLC_b4ca
00025568 0000                       DPLC_b4ca_3A: 	dc.w DPLC_b4ca_1A1-DPLC_b4ca
0002556A 0000                       DPLC_b4ca_3C: 	dc.w DPLC_b4ca_1AC-DPLC_b4ca
0002556C 0000                       DPLC_b4ca_3E: 	dc.w DPLC_b4ca_1B1-DPLC_b4ca
0002556E 0000                       DPLC_b4ca_40: 	dc.w DPLC_b4ca_1B6-DPLC_b4ca
00025570 0000                       DPLC_b4ca_42: 	dc.w DPLC_b4ca_1BB-DPLC_b4ca
00025572 0000                       DPLC_b4ca_44: 	dc.w DPLC_b4ca_1C0-DPLC_b4ca
00025574 0000                       DPLC_b4ca_46: 	dc.w DPLC_b4ca_1C9-DPLC_b4ca
00025576 0000                       DPLC_b4ca_48: 	dc.w DPLC_b4ca_1D0-DPLC_b4ca
00025578 0000                       DPLC_b4ca_4A: 	dc.w DPLC_b4ca_1D9-DPLC_b4ca
0002557A 0000                       DPLC_b4ca_4C: 	dc.w DPLC_b4ca_1E0-DPLC_b4ca
0002557C 0000                       DPLC_b4ca_4E: 	dc.w DPLC_b4ca_1E5-DPLC_b4ca
0002557E 0000                       DPLC_b4ca_50: 	dc.w DPLC_b4ca_1EA-DPLC_b4ca
00025580 0000                       DPLC_b4ca_52: 	dc.w DPLC_b4ca_1EF-DPLC_b4ca
00025582 0000                       DPLC_b4ca_54: 	dc.w DPLC_b4ca_1F4-DPLC_b4ca
00025584 0000                       DPLC_b4ca_56: 	dc.w DPLC_b4ca_1FD-DPLC_b4ca
00025586 0000                       DPLC_b4ca_58: 	dc.w DPLC_b4ca_202-DPLC_b4ca
00025588 0000                       DPLC_b4ca_5A: 	dc.w DPLC_b4ca_20B-DPLC_b4ca
0002558A 0000                       DPLC_b4ca_5C: 	dc.w DPLC_b4ca_210-DPLC_b4ca
0002558C 0000                       DPLC_b4ca_5E: 	dc.w DPLC_b4ca_213-DPLC_b4ca
0002558E 0000                       DPLC_b4ca_60: 	dc.w DPLC_b4ca_216-DPLC_b4ca
00025590 0000                       DPLC_b4ca_62: 	dc.w DPLC_b4ca_219-DPLC_b4ca
00025592 0000                       DPLC_b4ca_64: 	dc.w DPLC_b4ca_21C-DPLC_b4ca
00025594 0000                       DPLC_b4ca_66: 	dc.w DPLC_b4ca_21F-DPLC_b4ca
00025596 0000                       DPLC_b4ca_68: 	dc.w DPLC_b4ca_224-DPLC_b4ca
00025598 0000                       DPLC_b4ca_6A: 	dc.w DPLC_b4ca_227-DPLC_b4ca
0002559A 0000                       DPLC_b4ca_6C: 	dc.w DPLC_b4ca_22C-DPLC_b4ca
0002559C 0000                       DPLC_b4ca_6E: 	dc.w DPLC_b4ca_22F-DPLC_b4ca
0002559E 0000                       DPLC_b4ca_70: 	dc.w DPLC_b4ca_234-DPLC_b4ca
000255A0 0000                       DPLC_b4ca_72: 	dc.w DPLC_b4ca_23D-DPLC_b4ca
000255A2 0000                       DPLC_b4ca_74: 	dc.w DPLC_b4ca_242-DPLC_b4ca
000255A4 0000                       DPLC_b4ca_76: 	dc.w DPLC_b4ca_247-DPLC_b4ca
000255A6 0000                       DPLC_b4ca_78: 	dc.w DPLC_b4ca_24C-DPLC_b4ca
000255A8 0000                       DPLC_b4ca_7A: 	dc.w DPLC_b4ca_251-DPLC_b4ca
000255AA 0000                       DPLC_b4ca_7C: 	dc.w DPLC_b4ca_254-DPLC_b4ca
000255AC 0000                       DPLC_b4ca_7E: 	dc.w DPLC_b4ca_25B-DPLC_b4ca
000255AE 0000                       DPLC_b4ca_80: 	dc.w DPLC_b4ca_260-DPLC_b4ca
000255B0 0000                       DPLC_b4ca_82: 	dc.w DPLC_b4ca_263-DPLC_b4ca
000255B2 0000                       DPLC_b4ca_84: 	dc.w DPLC_b4ca_26C-DPLC_b4ca
000255B4 0000                       DPLC_b4ca_86: 	dc.w DPLC_b4ca_275-DPLC_b4ca
000255B6 0000                       DPLC_b4ca_88: 	dc.w DPLC_b4ca_280-DPLC_b4ca
000255B8 0000                       DPLC_b4ca_8A: 	dc.w DPLC_b4ca_28B-DPLC_b4ca
000255BA 0000                       DPLC_b4ca_8C: 	dc.w DPLC_b4ca_290-DPLC_b4ca
000255BC 0000                       DPLC_b4ca_8E: 	dc.w DPLC_b4ca_297-DPLC_b4ca
000255BE 0000                       DPLC_b4ca_90: 	dc.w DPLC_b4ca_29C-DPLC_b4ca
000255C0 0000                       DPLC_b4ca_92: 	dc.w DPLC_b4ca_2A3-DPLC_b4ca
000255C2 0000                       DPLC_b4ca_94: 	dc.w DPLC_b4ca_2A8-DPLC_b4ca
000255C4 0000                       DPLC_b4ca_96: 	dc.w DPLC_b4ca_2AF-DPLC_b4ca
000255C6 0000                       DPLC_b4ca_98: 	dc.w DPLC_b4ca_2B6-DPLC_b4ca
000255C8 0000                       DPLC_b4ca_9A: 	dc.w DPLC_b4ca_2C1-DPLC_b4ca
000255CA 0000                       DPLC_b4ca_9C: 	dc.w DPLC_b4ca_2CC-DPLC_b4ca
000255CC 0000                       DPLC_b4ca_9E: 	dc.w DPLC_b4ca_2D1-DPLC_b4ca
000255CE 0000                       DPLC_b4ca_A0: 	dc.w DPLC_b4ca_2D8-DPLC_b4ca
000255D0 0000                       DPLC_b4ca_A2: 	dc.w DPLC_b4ca_2DB-DPLC_b4ca
000255D2 0000                       DPLC_b4ca_A4: 	dc.w DPLC_b4ca_2DE-DPLC_b4ca
000255D4 0000                       DPLC_b4ca_A6: 	dc.w DPLC_b4ca_2E1-DPLC_b4ca
000255D6 0000                       DPLC_b4ca_A8: 	dc.w DPLC_b4ca_2E6-DPLC_b4ca
000255D8 0000                       DPLC_b4ca_AA: 	dc.w DPLC_b4ca_2ED-DPLC_b4ca
000255DA 0000                       DPLC_b4ca_AC: 	dc.w DPLC_b4ca_2F4-DPLC_b4ca
000255DC 0000                       DPLC_b4ca_AE: 	dc.w DPLC_b4ca_2FB-DPLC_b4ca
000255DE 0000                       DPLC_b4ca_B0: 	dc.w DPLC_b4ca_300-DPLC_b4ca
000255E0 0000                       DPLC_b4ca_B2: 	dc.w DPLC_b4ca_305-DPLC_b4ca
000255E2 0000                       DPLC_b4ca_B4: 	dc.w DPLC_b4ca_30A-DPLC_b4ca
000255E4 0000                       DPLC_b4ca_B6: 	dc.w DPLC_b4ca_30F-DPLC_b4ca
000255E6 00                         DPLC_b4ca_B8: 	dc.b $0
000255E7 02                         DPLC_b4ca_B9: 	dc.b $2
000255E8 F000                       	dc.b $F0, $0
000255EA 1010                       	dc.b $10, $10
000255EC 03                         DPLC_b4ca_BE: 	dc.b $3
000255ED 5012                       	dc.b $50, $12
000255EF 5018                       	dc.b $50, $18
000255F1 201E                       	dc.b $20, $1E
000255F3 03                         DPLC_b4ca_C5: 	dc.b $3
000255F4 5021                       	dc.b $50, $21
000255F6 5018                       	dc.b $50, $18
000255F8 201E                       	dc.b $20, $1E
000255FA 03                         DPLC_b4ca_CC: 	dc.b $3
000255FB 5021                       	dc.b $50, $21
000255FD 5018                       	dc.b $50, $18
000255FF 2027                       	dc.b $20, $27
00025601 03                         DPLC_b4ca_D3: 	dc.b $3
00025602 802A                       	dc.b $80, $2A
00025604 2033                       	dc.b $20, $33
00025606 2036                       	dc.b $20, $36
00025608 04                         DPLC_b4ca_DA: 	dc.b $4
00025609 7039                       	dc.b $70, $39
0002560B 5041                       	dc.b $50, $41
0002560D 5047                       	dc.b $50, $47
0002560F 104D                       	dc.b $10, $4D
00025611 02                         DPLC_b4ca_E3: 	dc.b $2
00025612 7039                       	dc.b $70, $39
00025614 B04F                       	dc.b $B0, $4F
00025616 02                         DPLC_b4ca_E8: 	dc.b $2
00025617 505B                       	dc.b $50, $5B
00025619 8061                       	dc.b $80, $61
0002561B 04                         DPLC_b4ca_ED: 	dc.b $4
0002561C 505B                       	dc.b $50, $5B
0002561E 506A                       	dc.b $50, $6A
00025620 5070                       	dc.b $50, $70
00025622 1076                       	dc.b $10, $76
00025624 02                         DPLC_b4ca_F6: 	dc.b $2
00025625 F4F0                       	dc.b $F4, $F0
00025627 1500                       	dc.b $15, $0
00025629 03                         DPLC_b4ca_FB: 	dc.b $3
0002562A 7039                       	dc.b $70, $39
0002562C 3078                       	dc.b $30, $78
0002562E 507C                       	dc.b $50, $7C
00025630 05                         DPLC_b4ca_102: 	dc.b $5
00025631 5082                       	dc.b $50, $82
00025633 5088                       	dc.b $50, $88
00025635 208E                       	dc.b $20, $8E
00025637 5091                       	dc.b $50, $91
00025639 0097                       	dc.b $0, $97
0002563B 06                         DPLC_b4ca_10D: 	dc.b $6
0002563C 5082                       	dc.b $50, $82
0002563E 1098                       	dc.b $10, $98
00025640 309A                       	dc.b $30, $9A
00025642 509E                       	dc.b $50, $9E
00025644 30A4                       	dc.b $30, $A4
00025646 00A8                       	dc.b $0, $A8
00025648 04                         DPLC_b4ca_11A: 	dc.b $4
00025649 50A9                       	dc.b $50, $A9
0002564B 10AF                       	dc.b $10, $AF
0002564D 70B1                       	dc.b $70, $B1
0002564F 20B9                       	dc.b $20, $B9
00025651 05                         DPLC_b4ca_123: 	dc.b $5
00025652 50BC                       	dc.b $50, $BC
00025654 30C2                       	dc.b $30, $C2
00025656 70C6                       	dc.b $70, $C6
00025658 20CE                       	dc.b $20, $CE
0002565A 10D1                       	dc.b $10, $D1
0002565C 04                         DPLC_b4ca_12E: 	dc.b $4
0002565D 50BC                       	dc.b $50, $BC
0002565F 10D3                       	dc.b $10, $D3
00025661 70D5                       	dc.b $70, $D5
00025663 20DD                       	dc.b $20, $DD
00025665 05                         DPLC_b4ca_137: 	dc.b $5
00025666 5082                       	dc.b $50, $82
00025668 1098                       	dc.b $10, $98
0002566A 008E                       	dc.b $0, $8E
0002566C 70E0                       	dc.b $70, $E0
0002566E 20E8                       	dc.b $20, $E8
00025670 04                         DPLC_b4ca_142: 	dc.b $4
00025671 70EB                       	dc.b $70, $EB
00025673 50F3                       	dc.b $50, $F3
00025675 10F9                       	dc.b $10, $F9
00025677 50FB                       	dc.b $50, $FB
00025679 02                         DPLC_b4ca_14B: 	dc.b $2
0002567A 70EB                       	dc.b $70, $EB
0002567C B101                       	dc.b $B1, $1
0002567E 02                         DPLC_b4ca_150: 	dc.b $2
0002567F 510D                       	dc.b $51, $D
00025681 8113                       	dc.b $81, $13
00025683 04                         DPLC_b4ca_155: 	dc.b $4
00025684 510D                       	dc.b $51, $D
00025686 511C                       	dc.b $51, $1C
00025688 1122                       	dc.b $11, $22
0002568A 5124                       	dc.b $51, $24
0002568C 02                         DPLC_b4ca_15E: 	dc.b $2
0002568D 510D                       	dc.b $51, $D
0002568F B12A                       	dc.b $B1, $2A
00025691 03                         DPLC_b4ca_163: 	dc.b $3
00025692 70EB                       	dc.b $70, $EB
00025694 0101                       	dc.b $1, $1
00025696 8136                       	dc.b $81, $36
00025698 06                         DPLC_b4ca_16A: 	dc.b $6
00025699 513F                       	dc.b $51, $3F
0002569B 1145                       	dc.b $11, $45
0002569D 1147                       	dc.b $11, $47
0002569F 8149                       	dc.b $81, $49
000256A1 0152                       	dc.b $1, $52
000256A3 0153                       	dc.b $1, $53
000256A5 06                         DPLC_b4ca_177: 	dc.b $6
000256A6 513F                       	dc.b $51, $3F
000256A8 2154                       	dc.b $21, $54
000256AA 1157                       	dc.b $11, $57
000256AC 1159                       	dc.b $11, $59
000256AE 815B                       	dc.b $81, $5B
000256B0 0152                       	dc.b $1, $52
000256B2 04                         DPLC_b4ca_184: 	dc.b $4
000256B3 5164                       	dc.b $51, $64
000256B5 116A                       	dc.b $11, $6A
000256B7 816C                       	dc.b $81, $6C
000256B9 1175                       	dc.b $11, $75
000256BB 05                         DPLC_b4ca_18D: 	dc.b $5
000256BC 5177                       	dc.b $51, $77
000256BE 217D                       	dc.b $21, $7D
000256C0 1180                       	dc.b $11, $80
000256C2 7182                       	dc.b $71, $82
000256C4 218A                       	dc.b $21, $8A
000256C6 04                         DPLC_b4ca_198: 	dc.b $4
000256C7 5177                       	dc.b $51, $77
000256C9 118D                       	dc.b $11, $8D
000256CB 818F                       	dc.b $81, $8F
000256CD 1198                       	dc.b $11, $98
000256CF 05                         DPLC_b4ca_1A1: 	dc.b $5
000256D0 513F                       	dc.b $51, $3F
000256D2 819A                       	dc.b $81, $9A
000256D4 1159                       	dc.b $11, $59
000256D6 11A3                       	dc.b $11, $A3
000256D8 0152                       	dc.b $1, $52
000256DA 02                         DPLC_b4ca_1AC: 	dc.b $2
000256DB 51A5                       	dc.b $51, $A5
000256DD B1AB                       	dc.b $B1, $AB
000256DF 02                         DPLC_b4ca_1B1: 	dc.b $2
000256E0 505B                       	dc.b $50, $5B
000256E2 B1B7                       	dc.b $B1, $B7
000256E4 02                         DPLC_b4ca_1B6: 	dc.b $2
000256E5 51A5                       	dc.b $51, $A5
000256E7 B1C3                       	dc.b $B1, $C3
000256E9 02                         DPLC_b4ca_1BB: 	dc.b $2
000256EA 505B                       	dc.b $50, $5B
000256EC B1CF                       	dc.b $B1, $CF
000256EE 04                         DPLC_b4ca_1C0: 	dc.b $4
000256EF 51DB                       	dc.b $51, $DB
000256F1 11E1                       	dc.b $11, $E1
000256F3 B1E3                       	dc.b $B1, $E3
000256F5 01EF                       	dc.b $1, $EF
000256F7 03                         DPLC_b4ca_1C9: 	dc.b $3
000256F8 51F0                       	dc.b $51, $F0
000256FA 11F6                       	dc.b $11, $F6
000256FC B1F8                       	dc.b $B1, $F8
000256FE 04                         DPLC_b4ca_1D0: 	dc.b $4
000256FF 51DB                       	dc.b $51, $DB
00025701 1204                       	dc.b $12, $4
00025703 B206                       	dc.b $B2, $6
00025705 01EF                       	dc.b $1, $EF
00025707 03                         DPLC_b4ca_1D9: 	dc.b $3
00025708 51F0                       	dc.b $51, $F0
0002570A 11F6                       	dc.b $11, $F6
0002570C B212                       	dc.b $B2, $12
0002570E 02                         DPLC_b4ca_1E0: 	dc.b $2
0002570F 521E                       	dc.b $52, $1E
00025711 B224                       	dc.b $B2, $24
00025713 02                         DPLC_b4ca_1E5: 	dc.b $2
00025714 510D                       	dc.b $51, $D
00025716 B230                       	dc.b $B2, $30
00025718 02                         DPLC_b4ca_1EA: 	dc.b $2
00025719 521E                       	dc.b $52, $1E
0002571B B23C                       	dc.b $B2, $3C
0002571D 02                         DPLC_b4ca_1EF: 	dc.b $2
0002571E 510D                       	dc.b $51, $D
00025720 B248                       	dc.b $B2, $48
00025722 04                         DPLC_b4ca_1F4: 	dc.b $4
00025723 5254                       	dc.b $52, $54
00025725 125A                       	dc.b $12, $5A
00025727 B25C                       	dc.b $B2, $5C
00025729 0268                       	dc.b $2, $68
0002572B 02                         DPLC_b4ca_1FD: 	dc.b $2
0002572C 7269                       	dc.b $72, $69
0002572E B271                       	dc.b $B2, $71
00025730 04                         DPLC_b4ca_202: 	dc.b $4
00025731 5254                       	dc.b $52, $54
00025733 127D                       	dc.b $12, $7D
00025735 B27F                       	dc.b $B2, $7F
00025737 0268                       	dc.b $2, $68
00025739 02                         DPLC_b4ca_20B: 	dc.b $2
0002573A 7269                       	dc.b $72, $69
0002573C B28B                       	dc.b $B2, $8B
0002573E 01                         DPLC_b4ca_210: 	dc.b $1
0002573F F297                       	dc.b $F2, $97
00025741 01                         DPLC_b4ca_213: 	dc.b $1
00025742 F2A7                       	dc.b $F2, $A7
00025744 01                         DPLC_b4ca_216: 	dc.b $1
00025745 F2B7                       	dc.b $F2, $B7
00025747 01                         DPLC_b4ca_219: 	dc.b $1
00025748 F2C7                       	dc.b $F2, $C7
0002574A 01                         DPLC_b4ca_21C: 	dc.b $1
0002574B F2D7                       	dc.b $F2, $D7
0002574D 02                         DPLC_b4ca_21F: 	dc.b $2
0002574E B2E7                       	dc.b $B2, $E7
00025750 22F3                       	dc.b $22, $F3
00025752 01                         DPLC_b4ca_224: 	dc.b $1
00025753 F2F6                       	dc.b $F2, $F6
00025755 02                         DPLC_b4ca_227: 	dc.b $2
00025756 B306                       	dc.b $B3, $6
00025758 2312                       	dc.b $23, $12
0002575A 01                         DPLC_b4ca_22C: 	dc.b $1
0002575B F315                       	dc.b $F3, $15
0002575D 02                         DPLC_b4ca_22F: 	dc.b $2
0002575E 5325                       	dc.b $53, $25
00025760 B32B                       	dc.b $B3, $2B
00025762 04                         DPLC_b4ca_234: 	dc.b $4
00025763 5337                       	dc.b $53, $37
00025765 733D                       	dc.b $73, $3D
00025767 1345                       	dc.b $13, $45
00025769 0347                       	dc.b $3, $47
0002576B 02                         DPLC_b4ca_23D: 	dc.b $2
0002576C D348                       	dc.b $D3, $48
0002576E 34EC                       	dc.b $34, $EC
00025770 02                         DPLC_b4ca_242: 	dc.b $2
00025771 F528                       	dc.b $F5, $28
00025773 0538                       	dc.b $5, $38
00025775 02                         DPLC_b4ca_247: 	dc.b $2
00025776 F539                       	dc.b $F5, $39
00025778 0549                       	dc.b $5, $49
0002577A 02                         DPLC_b4ca_24C: 	dc.b $2
0002577B E356                       	dc.b $E3, $56
0002577D 054A                       	dc.b $5, $4A
0002577F 01                         DPLC_b4ca_251: 	dc.b $1
00025780 8365                       	dc.b $83, $65
00025782 03                         DPLC_b4ca_254: 	dc.b $3
00025783 736E                       	dc.b $73, $6E
00025785 0376                       	dc.b $3, $76
00025787 3377                       	dc.b $33, $77
00025789 02                         DPLC_b4ca_25B: 	dc.b $2
0002578A E37B                       	dc.b $E3, $7B
0002578C 054A                       	dc.b $5, $4A
0002578E 01                         DPLC_b4ca_260: 	dc.b $1
0002578F D561                       	dc.b $D5, $61
00025791 04                         DPLC_b4ca_263: 	dc.b $4
00025792 B399                       	dc.b $B3, $99
00025794 33A5                       	dc.b $33, $A5
00025796 03A9                       	dc.b $3, $A9
00025798 03AA                       	dc.b $3, $AA
0002579A 04                         DPLC_b4ca_26C: 	dc.b $4
0002579B B3AB                       	dc.b $B3, $AB
0002579D 33B7                       	dc.b $33, $B7
0002579F 03BB                       	dc.b $3, $BB
000257A1 03BC                       	dc.b $3, $BC
000257A3 05                         DPLC_b4ca_275: 	dc.b $5
000257A4 83BD                       	dc.b $83, $BD
000257A6 13C6                       	dc.b $13, $C6
000257A8 53C8                       	dc.b $53, $C8
000257AA 13CE                       	dc.b $13, $CE
000257AC 03D0                       	dc.b $3, $D0
000257AE 05                         DPLC_b4ca_280: 	dc.b $5
000257AF 83D1                       	dc.b $83, $D1
000257B1 13DA                       	dc.b $13, $DA
000257B3 53C8                       	dc.b $53, $C8
000257B5 13CE                       	dc.b $13, $CE
000257B7 03D0                       	dc.b $3, $D0
000257B9 02                         DPLC_b4ca_28B: 	dc.b $2
000257BA 83DC                       	dc.b $83, $DC
000257BC 73E5                       	dc.b $73, $E5
000257BE 03                         DPLC_b4ca_290: 	dc.b $3
000257BF 83ED                       	dc.b $83, $ED
000257C1 23F6                       	dc.b $23, $F6
000257C3 13F9                       	dc.b $13, $F9
000257C5 02                         DPLC_b4ca_297: 	dc.b $2
000257C6 83FB                       	dc.b $83, $FB
000257C8 7404                       	dc.b $74, $4
000257CA 03                         DPLC_b4ca_29C: 	dc.b $3
000257CB 83ED                       	dc.b $83, $ED
000257CD 240C                       	dc.b $24, $C
000257CF 140F                       	dc.b $14, $F
000257D1 02                         DPLC_b4ca_2A3: 	dc.b $2
000257D2 5411                       	dc.b $54, $11
000257D4 B417                       	dc.b $B4, $17
000257D6 03                         DPLC_b4ca_2A8: 	dc.b $3
000257D7 8423                       	dc.b $84, $23
000257D9 342C                       	dc.b $34, $2C
000257DB 0430                       	dc.b $4, $30
000257DD 03                         DPLC_b4ca_2AF: 	dc.b $3
000257DE 7431                       	dc.b $74, $31
000257E0 1439                       	dc.b $14, $39
000257E2 B43B                       	dc.b $B4, $3B
000257E4 05                         DPLC_b4ca_2B6: 	dc.b $5
000257E5 7447                       	dc.b $74, $47
000257E7 144F                       	dc.b $14, $4F
000257E9 5451                       	dc.b $54, $51
000257EB 3457                       	dc.b $34, $57
000257ED 045B                       	dc.b $4, $5B
000257EF 05                         DPLC_b4ca_2C1: 	dc.b $5
000257F0 745C                       	dc.b $74, $5C
000257F2 144F                       	dc.b $14, $4F
000257F4 5464                       	dc.b $54, $64
000257F6 3457                       	dc.b $34, $57
000257F8 045B                       	dc.b $4, $5B
000257FA 02                         DPLC_b4ca_2CC: 	dc.b $2
000257FB 246A                       	dc.b $24, $6A
000257FD F46D                       	dc.b $F4, $6D
000257FF 03                         DPLC_b4ca_2D1: 	dc.b $3
00025800 247D                       	dc.b $24, $7D
00025802 B480                       	dc.b $B4, $80
00025804 248C                       	dc.b $24, $8C
00025806 01                         DPLC_b4ca_2D8: 	dc.b $1
00025807 B48F                       	dc.b $B4, $8F
00025809 01                         DPLC_b4ca_2DB: 	dc.b $1
0002580A 549B                       	dc.b $54, $9B
0002580C 01                         DPLC_b4ca_2DE: 	dc.b $1
0002580D 14A1                       	dc.b $14, $A1
0002580F 02                         DPLC_b4ca_2E1: 	dc.b $2
00025810 E356                       	dc.b $E3, $56
00025812 054A                       	dc.b $5, $4A
00025814 03                         DPLC_b4ca_2E6: 	dc.b $3
00025815 736E                       	dc.b $73, $6E
00025817 0376                       	dc.b $3, $76
00025819 3377                       	dc.b $33, $77
0002581B 03                         DPLC_b4ca_2ED: 	dc.b $3
0002581C B4A3                       	dc.b $B4, $A3
0002581E 14AF                       	dc.b $14, $AF
00025820 34B1                       	dc.b $34, $B1
00025822 03                         DPLC_b4ca_2F4: 	dc.b $3
00025823 54B5                       	dc.b $54, $B5
00025825 B4BB                       	dc.b $B4, $BB
00025827 1074                       	dc.b $10, $74
00025829 02                         DPLC_b4ca_2FB: 	dc.b $2
0002582A F4C7                       	dc.b $F4, $C7
0002582C 24D7                       	dc.b $24, $D7
0002582E 02                         DPLC_b4ca_300: 	dc.b $2
0002582F F4DA                       	dc.b $F4, $DA
00025831 14EA                       	dc.b $14, $EA
00025833 02                         DPLC_b4ca_305: 	dc.b $2
00025834 F502                       	dc.b $F5, $2
00025836 2512                       	dc.b $25, $12
00025838 02                         DPLC_b4ca_30A: 	dc.b $2
00025839 F515                       	dc.b $F5, $15
0002583B 2525                       	dc.b $25, $25
0002583D 02                         DPLC_b4ca_30F: 	dc.b $2
0002583E F54B                       	dc.b $F5, $4B
00025840 755B                       	dc.b $75, $5B
00025842                            	even
00025842                            	even
00025842                            
00025842                            ; ---------------------------------------------------------------------------
00025842                            ; Uncompressed graphics	- Sonic
00025842                            ; ---------------------------------------------------------------------------
00025842                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
00030622                            		even
00030622                            ; ---------------------------------------------------------------------------
00030622                            ; Compressed graphics - various
00030622                            ; ---------------------------------------------------------------------------
00030622                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
00030726                            		even
00030726                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
00030760                            		even
00030760                            Nem_Shield:	incbin	artnem\shield.bin	; shield
000308F6                            		even
000308F6                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00030A3E                            		even
00030A3E                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00030B48                            		even
00030B48                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00030B9A                            		even
00030B9A                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
00030DE2                            		even
00030DE2                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
00030F68                            		even
00030F68                            ; ---------------------------------------------------------------------------
00030F68                            ; Sprite mappings - walls of the special stage
00030F68                            ; ---------------------------------------------------------------------------
00030F68                            Map_SSWalls:
00030F68                            	include "_maps\SSwalls.asm"
00030F68                            ; ---------------------------------------------------------------------------
00030F68                            ; Sprite mappings - walls of the special stage
00030F68                            ; ---------------------------------------------------------------------------
00030F68 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
00030F6C 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
00030F70 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
00030F74 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
00030F78 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
00030F7C 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
00030F80 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
00030F84 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
00030F88 01                         byte_2C584:	dc.b 1
00030F89 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00030F8E 01                         byte_2C58A:	dc.b 1
00030F8F F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
00030F94 01                         byte_2C590:	dc.b 1
00030F95 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
00030F9A 01                         byte_2C596:	dc.b 1
00030F9B F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
00030FA0 01                         byte_2C59C:	dc.b 1
00030FA1 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
00030FA6 01                         byte_2C5A2:	dc.b 1
00030FA7 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00030FAC 01                         byte_2C5A8:	dc.b 1
00030FAD F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
00030FB2 01                         byte_2C5AE:	dc.b 1
00030FB3 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00030FB8 01                         byte_2C5B4:	dc.b 1
00030FB9 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00030FBE 01                         byte_2C5BA:	dc.b 1
00030FBF F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
00030FC4 01                         byte_2C5C0:	dc.b 1
00030FC5 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00030FCA 01                         byte_2C5C6:	dc.b 1
00030FCB F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00030FD0 01                         byte_2C5CC:	dc.b 1
00030FD1 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
00030FD6 01                         byte_2C5D2:	dc.b 1
00030FD7 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00030FDC 01                         byte_2C5D8:	dc.b 1
00030FDD F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
00030FE2 01                         byte_2C5DE:	dc.b 1
00030FE3 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00030FE8                            		even
00030FE8                            		even
00030FE8                            ; ---------------------------------------------------------------------------
00030FE8                            ; Compressed graphics - special stage
00030FE8                            ; ---------------------------------------------------------------------------
00030FE8                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00031920                            		even
00031920                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00031A6E                            		even
00031A6E                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00032F00                            		even
00032F00                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00033200                            		even
00033200                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
000336F4                            		even
000336F4                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
000337E2                            		even
000337E2                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
000338B2                            		even
000338B2                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
000339A8                            		even
000339A8                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00033A06                            		even
00033A06                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00033A98                            		even
00033A98                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00033B5A                            		even
00033B5A                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00033C28                            		even
00033C28                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00033CF4                            		even
00033CF4                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00033DBC                            		even
00033DBC                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
00033E86                            		even
00033E86                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
00033F56                            		even
00033F56                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0003414A                            		even
0003414A                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
000342B2                            		even
000342B2                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
00034362                            		even
00034362                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0003443C                            		even
0003443C                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
000344C0                            		even
000344C0                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0003463E                            		even
0003463E                            ; ---------------------------------------------------------------------------
0003463E                            ; Compressed graphics - GHZ stuff
0003463E                            ; ---------------------------------------------------------------------------
0003463E                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
00034688                            		even
00034688                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000347A2                            		even
000347A2                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0003488E                            		even
0003488E                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
000348D6                            		even
000348D6                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00034A74                            		even
00034A74                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00034B30                            		even
00034B30                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00034D44                            		even
00034D44                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00034E70                            		even
00034E70                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
00034F9E                            		even
00034F9E                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0003503C                            		even
0003503C                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0003509C                            		even
0003509C                            ; ---------------------------------------------------------------------------
0003509C                            ; Compressed graphics - LZ stuff
0003509C                            ; ---------------------------------------------------------------------------
0003509C                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000351C0                            		even
000351C0                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
000359B4                            		even
000359B4                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00035B34                            		even
00035B34                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00035C9E                            		even
00035C9E                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
000362F4                            		even
000362F4                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
000363AA                            		even
000363AA                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003644C                            		even
0003644C                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000365A8                            		even
000365A8                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003660C                            		even
0003660C                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003675E                            		even
0003675E                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00036C40                            		even
00036C40                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00036DB0                            		even
00036DB0                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00037068                            		even
00037068                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000371A0                            		even
000371A0                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000372CA                            		even
000372CA                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000373DA                            		even
000373DA                            ; ---------------------------------------------------------------------------
000373DA                            ; Compressed graphics - MZ stuff
000373DA                            ; ---------------------------------------------------------------------------
000373DA                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
00037668                            		even
00037668                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00037726                            		even
00037726                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
000377DE                            		even
000377DE                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00037832                            		even
00037832                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00037B04 00                         		even
00037B04                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0003841A                            		even
0003841A                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003857E                            		even
0003857E                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00038606                            		even
00038606                            ; ---------------------------------------------------------------------------
00038606                            ; Compressed graphics - SLZ stuff
00038606                            ; ---------------------------------------------------------------------------
00038606                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00038842                            		even
00038842                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00038988                            		even
00038988                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00038BCC                            		even
00038BCC                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00038C2E                            		even
00038C2E                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00038D10                            		even
00038D10                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00038EF2                            		even
00038EF2                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00038FFE                            		even
00038FFE                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
000390A2                            		even
000390A2                            ; ---------------------------------------------------------------------------
000390A2                            ; Compressed graphics - SYZ stuff
000390A2                            ; ---------------------------------------------------------------------------
000390A2                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003920C                            		even
0003920C                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003926E                            		even
0003926E                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00039350                            		even
00039350                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
000395DE                            		even
000395DE                            ; ---------------------------------------------------------------------------
000395DE                            ; Compressed graphics - SBZ stuff
000395DE                            ; ---------------------------------------------------------------------------
000395DE                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00039632                            		even
00039632                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
000398CE                            		even
000398CE                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00039AD2                            		even
00039AD2                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00039C70                            		even
00039C70                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00039FA0                            		even
00039FA0                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003A17E                            		even
0003A17E                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003A1D6                            		even
0003A1D6                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003A3A0 00                         		even
0003A3A0                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003A49E                            		even
0003A49E                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003A62A                            		even
0003A62A                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003A67A                            		even
0003A67A                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003A6D2                            		even
0003A6D2                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003A7CE                            		even
0003A7CE                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003A8E4                            		even
0003A8E4                            ; ---------------------------------------------------------------------------
0003A8E4                            ; Compressed graphics - enemies
0003A8E4                            ; ---------------------------------------------------------------------------
0003A8E4                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003AD52 00                         		even
0003AD52                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003AEFC 00                         		even
0003AEFC                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003B2BE 00                         		even
0003B2BE                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003B4A6                            		even
0003B4A6                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003B65E 00                         		even
0003B65E                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003B7A8                            		even
0003B7A8                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003BA32                            		even
0003BA32                            Nem_Roller:	incbin	artnem\roller.bin	; roller
0003C056                            		even
0003C056                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
0003C24C                            		even
0003C24C                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
0003C86A                            		even
0003C86A                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
0003CC6A 00                         		even
0003CC6A                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
0003CF66                            		even
0003CF66                            Nem_Splats:	incbin	artnem\splats.bin	; splats
0003D1AE                            		even
0003D1AE                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0003D446                            		even
0003D446                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003D624                            		even
0003D624                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
0003D7B2                            		even
0003D7B2                            ; ---------------------------------------------------------------------------
0003D7B2                            ; Compressed graphics - various
0003D7B2                            ; ---------------------------------------------------------------------------
0003D7B2                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
0003DCFA 00                         		even
0003DCFA                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003DDF0                            		even
0003DDF0                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
0003DEF6                            		even
0003DEF6                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0003DFEA                            		even
0003DFEA                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0003E52E                            		even
0003E52E                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003EB94                            		even
0003EB94                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003EC44                            		even
0003EC44                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003EDD6                            		even
0003EDD6                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003EEEA                            		even
0003EEEA                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003EFBC                            		even
0003EFBC                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003F438                            		even
0003F438                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003F4F8                            		even
0003F4F8                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003F66C                            		even
0003F66C                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003F96E                            		even
0003F96E                            ; ---------------------------------------------------------------------------
0003F96E                            ; Compressed graphics - continue screen
0003F96E                            ; ---------------------------------------------------------------------------
0003F96E                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003FC1E                            		even
0003FC1E                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003FE58                            		even
0003FE58                            ; ---------------------------------------------------------------------------
0003FE58                            ; Compressed graphics - animals
0003FE58                            ; ---------------------------------------------------------------------------
0003FE58                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003FFB0                            		even
0003FFB0                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0004010C                            		even
0004010C                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
00040288                            		even
00040288                            Nem_Seal:	incbin	artnem\seal.bin		; seal
000403A4                            		even
000403A4                            Nem_Pig:	incbin	artnem\pig.bin		; pig
000404DA                            		even
000404DA                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00040614                            		even
00040614                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
00040770                            		even
00040770                            ; ---------------------------------------------------------------------------
00040770                            ; Compressed graphics - primary patterns and block mappings
00040770                            ; ---------------------------------------------------------------------------
00040770                            Blk16_GHZ:	incbin	map16\ghz.bin
00041084                            		even
00041084                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00042992                            		even
00042992                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00043D12                            		even
00043D12                            Blk256_GHZ:	incbin	map256\ghz.bin
00046010                            		even
00046010                            Blk16_LZ:	incbin	map16\lz.bin
0004674A                            		even
0004674A                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00048B50                            		even
00048B50                            Blk256_LZ:	incbin	map256\lz.bin
0004B4D0                            		even
0004B4D0                            Blk16_MZ:	incbin	map16\mz.bin
0004BC38                            		even
0004BC38                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004E574                            		even
0004E574                            Blk256_MZ:	incbin	map256\mz.bin
0004FD18                            		even
0004FD18                            Blk16_SLZ:	incbin	map16\slz.bin
000503E2                            		even
000503E2                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00052336                            		even
00052336                            Blk256_SLZ:	incbin	map256\slz.bin
000529B0                            		even
000529B0                            Blk16_SYZ:	incbin	map16\syz.bin
000535D6                            		even
000535D6                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
00057B68                            		even
00057B68                            Blk256_SYZ:	incbin	map256\syz.bin
00059BC4                            		even
00059BC4                            Blk16_SBZ:	incbin	map16\sbz.bin
0005AB0C                            		even
0005AB0C                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005D4D0                            		even
0005D4D0                            Blk256_SBZ:	incbin	map256\sbz.bin
0005FFC6                            		even
0005FFC6                            ; ---------------------------------------------------------------------------
0005FFC6                            ; Compressed graphics - bosses and ending sequence
0005FFC6                            ; ---------------------------------------------------------------------------
0005FFC6                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
000607E0 00                         		even
000607E0                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
00060E2E                            		even
00060E2E                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
00060EA8                            		even
00060EA8                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
00061192                            		even
00061192                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00061A16                            		even
00061A16                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006276C 00                         		even
0006276C                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
00062ED4                            		even
00062ED4                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
00063454                            		even
00063454                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
00063574                            		even
00063574                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
00063772                            		even
00063772                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00064950                            		even
00064950                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00065294                            		even
00065294                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006566A                            		even
0006566A                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00065BFA                            		even
00065BFA                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00065E82                            		even
00065E82                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00066470 00                         		even
00066470                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000666F8                            		even
000666F8                            		incbin	misc\padding2.bin
000667FC                            		even
000667FC                            ; ---------------------------------------------------------------------------
000667FC                            ; Collision data
000667FC                            ; ---------------------------------------------------------------------------
000667FC                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
000668FC                            		even
000668FC                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
000678FC                            		even
000678FC                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
000688FC                            		even
000688FC                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00068AB4 00                         		even
00068AB4                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00068C1C                            		even
00068C1C                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00068DAC 00                         		even
00068DAC                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00068FA0                            		even
00068FA0                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000691A6                            		even
000691A6                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00069444                            		even
00069444                            ; ---------------------------------------------------------------------------
00069444                            ; Special layouts
00069444                            ; ---------------------------------------------------------------------------
00069444                            SS_1:		incbin	sslayout\1.bin
000696BE                            		even
000696BE                            SS_2:		incbin	sslayout\2.bin
00069AD0                            		even
00069AD0                            SS_3:		incbin	sslayout\3.bin
00069E2C                            		even
00069E2C                            SS_4:		incbin	sslayout\4.bin
0006A306                            		even
0006A306                            SS_5:		incbin	sslayout\5.bin
0006A7D8                            		even
0006A7D8                            SS_6:		incbin	sslayout\6.bin
0006AAE8                            		even
0006AAE8                            ; ---------------------------------------------------------------------------
0006AAE8                            ; Animated uncompressed graphics
0006AAE8                            ; ---------------------------------------------------------------------------
0006AAE8                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0006ACE8                            		even
0006ACE8                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0006B0E8                            		even
0006B0E8                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
0006B568                            		even
0006B568                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0006B868                            		even
0006B868                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0006BE68                            		even
0006BE68                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0006C168                            		even
0006C168                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0006CBE8                            		even
0006CBE8                            
0006CBE8                            ; ---------------------------------------------------------------------------
0006CBE8                            ; Level	layout index
0006CBE8                            ; ---------------------------------------------------------------------------
0006CBE8 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
0006CBEE 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
0006CBF4 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
0006CBFA 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0006CC00 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
0006CC06 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
0006CC0C 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
0006CC12 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
0006CC18 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
0006CC1E 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
0006CC24 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
0006CC2A 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
0006CC30 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CC36 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CC3C 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
0006CC42 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
0006CC48 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
0006CC4E 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0006CC54 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
0006CC5A 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
0006CC60 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0006CC66 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
0006CC6C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
0006CC72 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0006CC78 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006CC7E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0006CC84 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006CC8A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
0006CC90                            
0006CC90                            Level_GHZ1:	incbin	levels\ghz1.bin
0006CD82                            		even
0006CD82 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
0006CD86                            Level_GHZ2:	incbin	levels\ghz2.bin
0006CE4E                            		even
0006CE4E 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
0006CE52                            Level_GHZ3:	incbin	levels\ghz3.bin
0006CF74                            		even
0006CF74                            Level_GHZbg:	incbin	levels\ghzbg.bin
0006CF96                            		even
0006CF96 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
0006CF9A 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0006CF9E                            
0006CF9E                            Level_LZ1:	incbin	levels\lz1.bin
0006D0A0                            		even
0006D0A0                            Level_LZbg:	incbin	levels\lzbg.bin
0006D1A2                            		even
0006D1A2 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
0006D1A6                            Level_LZ2:	incbin	levels\lz2.bin
0006D240                            		even
0006D240 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
0006D244                            Level_LZ3:	incbin	levels\lz3.bin
0006D35E                            		even
0006D35E 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
0006D362                            Level_SBZ3:	incbin	levels\sbz3.bin
0006D41C                            		even
0006D41C 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006D420                            
0006D420                            Level_MZ1:	incbin	levels\mz1.bin
0006D4BE                            		even
0006D4BE                            Level_MZ1bg:	incbin	levels\mz1bg.bin
0006D538                            		even
0006D538                            Level_MZ2:	incbin	levels\mz2.bin
0006D5DC                            		even
0006D5DC                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006D66E                            		even
0006D66E 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
0006D672                            Level_MZ3:	incbin	levels\mz3.bin
0006D754                            		even
0006D754                            Level_MZ3bg:	incbin	levels\mz3bg.bin
0006D7F8 00                         		even
0006D7F8 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006D7FC 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006D800                            
0006D800                            Level_SLZ1:	incbin	levels\slz1.bin
0006D912                            		even
0006D912                            Level_SLZbg:	incbin	levels\slzbg.bin
0006D92C                            		even
0006D92C                            Level_SLZ2:	incbin	levels\slz2.bin
0006DA1C                            		even
0006DA1C                            Level_SLZ3:	incbin	levels\slz3.bin
0006DB36                            		even
0006DB36 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
0006DB3A                            
0006DB3A                            Level_SYZ1:	incbin	levels\syz1.bin
0006DBF6 00                         		even
0006DBF6                            Level_SYZbg:	incbin	levels\syzbg.bin
0006DC30                            		even
0006DC30 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
0006DC34                            Level_SYZ2:	incbin	levels\syz2.bin
0006DD38                            		even
0006DD38 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0006DD3C                            Level_SYZ3:	incbin	levels\syz3.bin
0006DE96 00                         		even
0006DE96 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
0006DE9A 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0006DE9E                            
0006DE9E                            Level_SBZ1:	incbin	levels\sbz1.bin
0006DFC0                            		even
0006DFC0                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006DFFE                            		even
0006DFFE                            Level_SBZ2:	incbin	levels\sbz2.bin
0006E140                            		even
0006E140                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006E2AA                            		even
0006E2AA 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006E2AE 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006E2B2                            Level_End:	incbin	levels\ending.bin
0006E2E2 00                         		even
0006E2E2 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006E2E6                            
0006E2E6                            ; ---------------------------------------------------------------------------
0006E2E6                            ; Animated uncompressed giant ring graphics
0006E2E6                            ; ---------------------------------------------------------------------------
0006E2E6                            Art_BigRing:	incbin	artunc\bigring.bin
0006EF26                            		even
0006EF26                            
0006EF26                            		incbin	misc\padding3.bin
0006EFC2                            		even
0006EFC2                            
0006EFC2                            ; ---------------------------------------------------------------------------
0006EFC2                            ; Sprite locations index
0006EFC2                            ; ---------------------------------------------------------------------------
0006EFC2 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFC6 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFCA 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFCE 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFD2 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFD6 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFDA 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFDE 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFE2 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFE6 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFEA 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFEE 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFF2 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFF6 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFFA 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006EFFE 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F002 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F006 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F00A 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F00E 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F012 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F016 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F01A 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F01E 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F022 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F026 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F02A 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F02E 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006F032 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006F036 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006F03A 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006F03E 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006F042 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006F046 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006F04A 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006F04E 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006F052 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006F058                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006F8A4                            		even
0006F8A4                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006F958                            		even
0006F958                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007039C                            		even
0007039C                            ObjPos_LZ1:	incbin	objpos\lz1.bin
00070744                            		even
00070744                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00070A7A                            		even
00070A7A                            ObjPos_LZ3:	incbin	objpos\lz3.bin
00070F90                            		even
00070F90                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00071428                            		even
00071428                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007145A                            		even
0007145A                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007148C                            		even
0007148C                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
000714BE                            		even
000714BE                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000714F0                            		even
000714F0                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007153A                            		even
0007153A                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00071578                            		even
00071578                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000718E4                            		even
000718E4                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00071D8E                            		even
00071D8E                            ObjPos_MZ3:	incbin	objpos\mz3.bin
00072304                            		even
00072304                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007232E                            		even
0007232E                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00072796                            		even
00072796                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
00072D78                            		even
00072D78                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
000733EA                            		even
000733EA                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
00073954                            		even
00073954                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00073F5A                            		even
00073F5A                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
00074698                            		even
00074698                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00074D76                            		even
00074D76                            ObjPos_FZ:	incbin	objpos\fz.bin
00074D88                            		even
00074D88                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
00074DBA                            		even
00074DBA                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00074DEC                            		even
00074DEC                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00074E1E                            		even
00074E1E                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
00074E50                            		even
00074E50                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
00074E82                            		even
00074E82                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
00074EBA                            		even
00074EBA                            ObjPos_End:	incbin	objpos\ending.bin
00075016                            		even
00075016 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0007501C                            ; ---------------------------------------------------------------------------
0007501C                            		incbin	misc\padding4.bin
00075646                            		even
00075646                            
00075646 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0007564A 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0007564E 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
00075652 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00075656 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0007565A 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0007565E                            ; ---------------------------------------------------------------------------
0007565E                            ; PSG instruments used in music
0007565E                            ; ---------------------------------------------------------------------------
0007565E 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0007566A 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00075676 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
00075682                            PSG1:		incbin	sound\psg1.bin
00075699                            PSG2:		incbin	sound\psg2.bin
000756A0                            PSG3:		incbin	sound\psg3.bin
000756B1                            PSG4:		incbin	sound\psg4.bin
000756BC                            PSG6:		incbin	sound\psg6.bin
000756CB                            PSG5:		incbin	sound\psg5.bin
000756F5                            PSG7:		incbin	sound\psg7.bin
00075711                            PSG8:		incbin	sound\psg8.bin
00075739                            PSG9:		incbin	sound\psg9.bin
0007574A                            
0007574A 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00075752                            ; ---------------------------------------------------------------------------
00075752                            ; Music	Pointers
00075752                            ; ---------------------------------------------------------------------------
00075752 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0007575A 0000 0000 0000 0000        		dc.l Music83, Music84
00075762 0000 0000 0000 0000        		dc.l Music85, Music86
0007576A 0000 0000 0000 0000        		dc.l Music87, Music88
00075772 0000 0000 0000 0000        		dc.l Music89, Music8A
0007577A 0000 0000 0000 0000        		dc.l Music8B, Music8C
00075782 0000 0000 0000 0000        		dc.l Music8D, Music8E
0007578A 0000 0000 0000 0000        		dc.l Music8F, Music90
00075792 0000 0000 0000 0000        		dc.l Music91, Music92
0007579A 0000 0000 0000 0000        		dc.l Music93, Music94
000757A2 0000 0000 0000 0000        		dc.l Music95, Music96
000757AA 0000 0000 0000 0000        		dc.l Music97, Music98
000757B2 0000 0000 0000 0000        		dc.l Music99, Music9A
000757BA 0000 0000 0000 0000        		dc.l Music9B, Music9C
000757C2 0000 0000 0000 0000        		dc.l Music9D, Music9E
000757CA 0000 0000                  		dc.l Music9F
000757CE                            ; ---------------------------------------------------------------------------
000757CE                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
000757CE                            ; ---------------------------------------------------------------------------
000757CE 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
000757DE 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
000757EE 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
000757FE 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0007580E 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0007581E 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0007582E 9090 9090                  		dc.b $90, $90, $90, $90
00075832                            
00075832                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075832                            
00075832                            
00075832                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00075832 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0007583A 4E71                       		nop	
0007583C 4E71                       		nop	
0007583E 4E71                       		nop	
00075840                            
00075840                            loc_71B5A:
00075840 0839 0000 00A1 1100        		btst	#0,($A11100).l
00075848 66F6                       		bne.s	loc_71B5A
0007584A                            
0007584A 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00075852 6700                       		beq.s	loc_71B82
00075854 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0007585C 4E71                       		nop	
0007585E 4E71                       		nop	
00075860 4E71                       		nop	
00075862 4E71                       		nop	
00075864 4E71                       		nop	
00075866 60CA                       		bra.s	sub_71B4C
00075868                            ; ===========================================================================
00075868                            
00075868                            loc_71B82:
00075868 4DF9 00FF F000             		lea	($FFF000).l,a6
0007586E 422E 000E                  		clr.b	$E(a6)
00075872 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00075876 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0007587A 532E 0001                  		subq.b	#1,1(a6)
0007587E 6600                       		bne.s	loc_71B9E
00075880 4EBA 0000                  		jsr	sub_7260C(pc)
00075884                            
00075884                            loc_71B9E:
00075884 102E 0004                  		move.b	4(a6),d0
00075888 6700                       		beq.s	loc_71BA8
0007588A 4EBA 0000                  		jsr	sub_72504(pc)
0007588E                            
0007588E                            loc_71BA8:
0007588E 4A2E 0024                  		tst.b	$24(a6)
00075892 6700                       		beq.s	loc_71BB2
00075894 4EBA 0000                  		jsr	sub_7267C(pc)
00075898                            
00075898                            loc_71BB2:
00075898 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0007589C 6700                       		beq.s	loc_71BBC	; if not, branch
0007589E 4EBA 0000                  		jsr	Sound_Play(pc)
000758A2                            
000758A2                            loc_71BBC:
000758A2 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
000758A8 6700                       		beq.s	loc_71BC8
000758AA 4EBA 0000                  		jsr	Sound_ChkValue(pc)
000758AE                            
000758AE                            loc_71BC8:
000758AE 4BEE 0040                  		lea	$40(a6),a5
000758B2 4A15                       		tst.b	(a5)
000758B4 6A00                       		bpl.s	loc_71BD4
000758B6 4EBA 0000                  		jsr	sub_71C4E(pc)
000758BA                            
000758BA                            loc_71BD4:
000758BA 422E 0008                  		clr.b	8(a6)
000758BE 7E05                       		moveq	#5,d7
000758C0                            
000758C0                            loc_71BDA:
000758C0 DAFC 0030                  		adda.w	#$30,a5
000758C4 4A15                       		tst.b	(a5)
000758C6 6A00                       		bpl.s	loc_71BE6
000758C8 4EBA 0000                  		jsr	sub_71CCA(pc)
000758CC                            
000758CC                            loc_71BE6:
000758CC 51CF FFF2                  		dbf	d7,loc_71BDA
000758D0                            
000758D0 7E02                       		moveq	#2,d7
000758D2                            
000758D2                            loc_71BEC:
000758D2 DAFC 0030                  		adda.w	#$30,a5
000758D6 4A15                       		tst.b	(a5)
000758D8 6A00                       		bpl.s	loc_71BF8
000758DA 4EBA 0000                  		jsr	sub_72850(pc)
000758DE                            
000758DE                            loc_71BF8:
000758DE 51CF FFF2                  		dbf	d7,loc_71BEC
000758E2                            
000758E2 1D7C 0080 000E             		move.b	#$80,$E(a6)
000758E8 7E02                       		moveq	#2,d7
000758EA                            
000758EA                            loc_71C04:
000758EA DAFC 0030                  		adda.w	#$30,a5
000758EE 4A15                       		tst.b	(a5)
000758F0 6A00                       		bpl.s	loc_71C10
000758F2 4EBA 0000                  		jsr	sub_71CCA(pc)
000758F6                            
000758F6                            loc_71C10:
000758F6 51CF FFF2                  		dbf	d7,loc_71C04
000758FA                            
000758FA 7E02                       		moveq	#2,d7
000758FC                            
000758FC                            loc_71C16:
000758FC DAFC 0030                  		adda.w	#$30,a5
00075900 4A15                       		tst.b	(a5)
00075902 6A00                       		bpl.s	loc_71C22
00075904 4EBA 0000                  		jsr	sub_72850(pc)
00075908                            
00075908                            loc_71C22:
00075908 51CF FFF2                  		dbf	d7,loc_71C16
0007590C 1D7C 0040 000E             		move.b	#$40,$E(a6)
00075912 DAFC 0030                  		adda.w	#$30,a5
00075916 4A15                       		tst.b	(a5)
00075918 6A00                       		bpl.s	loc_71C38
0007591A 4EBA 0000                  		jsr	sub_71CCA(pc)
0007591E                            
0007591E                            loc_71C38:
0007591E DAFC 0030                  		adda.w	#$30,a5
00075922 4A15                       		tst.b	(a5)
00075924 6A00                       		bpl.s	loc_71C44
00075926 4EBA 0000                  		jsr	sub_72850(pc)
0007592A                            
0007592A                            loc_71C44:
0007592A 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00075932 4E75                       		rts	
00075934                            ; End of function sub_71B4C
00075934                            
00075934                            
00075934                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075934                            
00075934                            
00075934                            sub_71C4E:				; XREF: sub_71B4C
00075934 532D 000E                  		subq.b	#1,$E(a5)
00075938 6600                       		bne.s	locret_71CAA
0007593A 1D7C 0080 0008             		move.b	#$80,8(a6)
00075940 286D 0004                  		movea.l	4(a5),a4
00075944                            
00075944                            loc_71C5E:
00075944 7A00                       		moveq	#0,d5
00075946 1A1C                       		move.b	(a4)+,d5
00075948 0C05 00E0                  		cmpi.b	#-$20,d5
0007594C 6500                       		bcs.s	loc_71C6E
0007594E 4EBA 0000                  		jsr	sub_72A5A(pc)
00075952 60F0                       		bra.s	loc_71C5E
00075954                            ; ===========================================================================
00075954                            
00075954                            loc_71C6E:
00075954 4A05                       		tst.b	d5
00075956 6A00                       		bpl.s	loc_71C84
00075958 1B45 0010                  		move.b	d5,$10(a5)
0007595C 1A1C                       		move.b	(a4)+,d5
0007595E 6A00                       		bpl.s	loc_71C84
00075960 534C                       		subq.w	#1,a4
00075962 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075968 6000                       		bra.s	loc_71C88
0007596A                            ; ===========================================================================
0007596A                            
0007596A                            loc_71C84:
0007596A 4EBA 0000                  		jsr	sub_71D40(pc)
0007596E                            
0007596E                            loc_71C88:
0007596E 2B4C 0004                  		move.l	a4,4(a5)
00075972 0815 0002                  		btst	#2,(a5)
00075976 6600                       		bne.s	locret_71CAA
00075978 7000                       		moveq	#0,d0
0007597A 102D 0010                  		move.b	$10(a5),d0
0007597E 0C00 0080                  		cmpi.b	#$80,d0
00075982 6700                       		beq.s	locret_71CAA
00075984 0800 0003                  		btst	#3,d0
00075988 6600                       		bne.s	loc_71CAC
0007598A 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00075990                            
00075990                            locret_71CAA:
00075990 4E75                       		rts	
00075992                            ; ===========================================================================
00075992                            
00075992                            loc_71CAC:
00075992 0400 0088                  		subi.b	#$88,d0
00075996 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0007599A 13C0 00A0 00EA             		move.b	d0,($A000EA).l
000759A0 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
000759A8 4E75                       		rts	
000759AA                            ; End of function sub_71C4E
000759AA                            
000759AA                            ; ===========================================================================
000759AA 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000759B0                            
000759B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000759B0                            
000759B0                            
000759B0                            sub_71CCA:				; XREF: sub_71B4C
000759B0 532D 000E                  		subq.b	#1,$E(a5)
000759B4 6600                       		bne.s	loc_71CE0
000759B6 0895 0004                  		bclr	#4,(a5)
000759BA 4EBA 0000                  		jsr	sub_71CEC(pc)
000759BE 4EBA 0000                  		jsr	sub_71E18(pc)
000759C2 6000 0000                  		bra.w	loc_726E2
000759C6                            ; ===========================================================================
000759C6                            
000759C6                            loc_71CE0:
000759C6 4EBA 0000                  		jsr	sub_71D9E(pc)
000759CA 4EBA 0000                  		jsr	sub_71DC6(pc)
000759CE 6000 0000                  		bra.w	loc_71E24
000759D2                            ; End of function sub_71CCA
000759D2                            
000759D2                            
000759D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000759D2                            
000759D2                            
000759D2                            sub_71CEC:				; XREF: sub_71CCA
000759D2 286D 0004                  		movea.l	4(a5),a4
000759D6 0895 0001                  		bclr	#1,(a5)
000759DA                            
000759DA                            loc_71CF4:
000759DA 7A00                       		moveq	#0,d5
000759DC 1A1C                       		move.b	(a4)+,d5
000759DE 0C05 00E0                  		cmpi.b	#-$20,d5
000759E2 6500                       		bcs.s	loc_71D04
000759E4 4EBA 0000                  		jsr	sub_72A5A(pc)
000759E8 60F0                       		bra.s	loc_71CF4
000759EA                            ; ===========================================================================
000759EA                            
000759EA                            loc_71D04:
000759EA 4EBA 0000                  		jsr	sub_726FE(pc)
000759EE 4A05                       		tst.b	d5
000759F0 6A00                       		bpl.s	loc_71D1A
000759F2 4EBA 0000                  		jsr	sub_71D22(pc)
000759F6 1A1C                       		move.b	(a4)+,d5
000759F8 6A00                       		bpl.s	loc_71D1A
000759FA 534C                       		subq.w	#1,a4
000759FC 6000 0000                  		bra.w	sub_71D60
00075A00                            ; ===========================================================================
00075A00                            
00075A00                            loc_71D1A:
00075A00 4EBA 0000                  		jsr	sub_71D40(pc)
00075A04 6000 0000                  		bra.w	sub_71D60
00075A08                            ; End of function sub_71CEC
00075A08                            
00075A08                            
00075A08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A08                            
00075A08                            
00075A08                            sub_71D22:				; XREF: sub_71CEC
00075A08 0405 0080                  		subi.b	#$80,d5
00075A0C 6700                       		beq.s	loc_71D58
00075A0E DA2D 0008                  		add.b	8(a5),d5
00075A12 0245 007F                  		andi.w	#$7F,d5
00075A16 E34D                       		lsl.w	#1,d5
00075A18 41FA 0000                  		lea	word_72790(pc),a0
00075A1C 3C30 5000                  		move.w	(a0,d5.w),d6
00075A20 3B46 0010                  		move.w	d6,$10(a5)
00075A24 4E75                       		rts	
00075A26                            ; End of function sub_71D22
00075A26                            
00075A26                            
00075A26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A26                            
00075A26                            
00075A26                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00075A26 1005                       		move.b	d5,d0
00075A28 122D 0002                  		move.b	2(a5),d1
00075A2C                            
00075A2C                            loc_71D46:
00075A2C 5301                       		subq.b	#1,d1
00075A2E 6700                       		beq.s	loc_71D4E
00075A30 D005                       		add.b	d5,d0
00075A32 60F8                       		bra.s	loc_71D46
00075A34                            ; ===========================================================================
00075A34                            
00075A34                            loc_71D4E:
00075A34 1B40 000F                  		move.b	d0,$F(a5)
00075A38 1B40 000E                  		move.b	d0,$E(a5)
00075A3C 4E75                       		rts	
00075A3E                            ; End of function sub_71D40
00075A3E                            
00075A3E                            ; ===========================================================================
00075A3E                            
00075A3E                            loc_71D58:				; XREF: sub_71D22
00075A3E 08D5 0001                  		bset	#1,(a5)
00075A42 426D 0010                  		clr.w	$10(a5)
00075A46                            
00075A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A46                            
00075A46                            
00075A46                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00075A46 2B4C 0004                  		move.l	a4,4(a5)
00075A4A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00075A50 0815 0004                  		btst	#4,(a5)
00075A54 6600                       		bne.s	locret_71D9C
00075A56 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00075A5C 422D 000C                  		clr.b	$C(a5)
00075A60 0815 0003                  		btst	#3,(a5)
00075A64 6700                       		beq.s	locret_71D9C
00075A66 206D 0014                  		movea.l	$14(a5),a0
00075A6A 1B58 0018                  		move.b	(a0)+,$18(a5)
00075A6E 1B58 0019                  		move.b	(a0)+,$19(a5)
00075A72 1B58 001A                  		move.b	(a0)+,$1A(a5)
00075A76 1018                       		move.b	(a0)+,d0
00075A78 E208                       		lsr.b	#1,d0
00075A7A 1B40 001B                  		move.b	d0,$1B(a5)
00075A7E 426D 001C                  		clr.w	$1C(a5)
00075A82                            
00075A82                            locret_71D9C:
00075A82 4E75                       		rts	
00075A84                            ; End of function sub_71D60
00075A84                            
00075A84                            
00075A84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075A84                            
00075A84                            
00075A84                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00075A84 4A2D 0012                  		tst.b	$12(a5)
00075A88 6700                       		beq.s	locret_71DC4
00075A8A 532D 0012                  		subq.b	#1,$12(a5)
00075A8E 6600                       		bne.s	locret_71DC4
00075A90 08D5 0001                  		bset	#1,(a5)
00075A94 4A2D 0001                  		tst.b	1(a5)
00075A98 6B00 0000                  		bmi.w	loc_71DBE
00075A9C 4EBA 0000                  		jsr	sub_726FE(pc)
00075AA0 584F                       		addq.w	#4,sp
00075AA2 4E75                       		rts	
00075AA4                            ; ===========================================================================
00075AA4                            
00075AA4                            loc_71DBE:
00075AA4 4EBA 0000                  		jsr	sub_729A0(pc)
00075AA8 584F                       		addq.w	#4,sp
00075AAA                            
00075AAA                            locret_71DC4:
00075AAA 4E75                       		rts	
00075AAC                            ; End of function sub_71D9E
00075AAC                            
00075AAC                            
00075AAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075AAC                            
00075AAC                            
00075AAC                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00075AAC 584F                       		addq.w	#4,sp
00075AAE 0815 0003                  		btst	#3,(a5)
00075AB2 6700                       		beq.s	locret_71E16
00075AB4 4A2D 0018                  		tst.b	$18(a5)
00075AB8 6700                       		beq.s	loc_71DDA
00075ABA 532D 0018                  		subq.b	#1,$18(a5)
00075ABE 4E75                       		rts	
00075AC0                            ; ===========================================================================
00075AC0                            
00075AC0                            loc_71DDA:
00075AC0 532D 0019                  		subq.b	#1,$19(a5)
00075AC4 6700                       		beq.s	loc_71DE2
00075AC6 4E75                       		rts	
00075AC8                            ; ===========================================================================
00075AC8                            
00075AC8                            loc_71DE2:
00075AC8 206D 0014                  		movea.l	$14(a5),a0
00075ACC 1B68 0001 0019             		move.b	1(a0),$19(a5)
00075AD2 4A2D 001B                  		tst.b	$1B(a5)
00075AD6 6600                       		bne.s	loc_71DFE
00075AD8 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00075ADE 442D 001A                  		neg.b	$1A(a5)
00075AE2 4E75                       		rts	
00075AE4                            ; ===========================================================================
00075AE4                            
00075AE4                            loc_71DFE:
00075AE4 532D 001B                  		subq.b	#1,$1B(a5)
00075AE8 1C2D 001A                  		move.b	$1A(a5),d6
00075AEC 4886                       		ext.w	d6
00075AEE DC6D 001C                  		add.w	$1C(a5),d6
00075AF2 3B46 001C                  		move.w	d6,$1C(a5)
00075AF6 DC6D 0010                  		add.w	$10(a5),d6
00075AFA 594F                       		subq.w	#4,sp
00075AFC                            
00075AFC                            locret_71E16:
00075AFC 4E75                       		rts	
00075AFE                            ; End of function sub_71DC6
00075AFE                            
00075AFE                            
00075AFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075AFE                            
00075AFE                            
00075AFE                            sub_71E18:				; XREF: sub_71CCA
00075AFE 0815 0001                  		btst	#1,(a5)
00075B02 6600                       		bne.s	locret_71E48
00075B04 3C2D 0010                  		move.w	$10(a5),d6
00075B08 6700                       		beq.s	loc_71E4A
00075B0A                            
00075B0A                            loc_71E24:				; XREF: sub_71CCA
00075B0A 102D 001E                  		move.b	$1E(a5),d0
00075B0E 4880                       		ext.w	d0
00075B10 DC40                       		add.w	d0,d6
00075B12 0815 0002                  		btst	#2,(a5)
00075B16 6600                       		bne.s	locret_71E48
00075B18 3206                       		move.w	d6,d1
00075B1A E049                       		lsr.w	#8,d1
00075B1C 103C 00A4                  		move.b	#-$5C,d0
00075B20 4EBA 0000                  		jsr	sub_72722(pc)
00075B24 1206                       		move.b	d6,d1
00075B26 103C 00A0                  		move.b	#-$60,d0
00075B2A 4EBA 0000                  		jsr	sub_72722(pc)
00075B2E                            
00075B2E                            locret_71E48:
00075B2E 4E75                       		rts	
00075B30                            ; ===========================================================================
00075B30                            
00075B30                            loc_71E4A:
00075B30 08D5 0001                  		bset	#1,(a5)
00075B34 4E75                       		rts	
00075B36                            ; End of function sub_71E18
00075B36                            
00075B36                            ; ===========================================================================
00075B36                            
00075B36                            loc_71E50:				; XREF: sub_71B4C
00075B36 6B00                       		bmi.s	loc_71E94
00075B38 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00075B3E 6700 0000                  		beq.w	loc_71EFE
00075B42 1D7C 0002 0003             		move.b	#2,3(a6)
00075B48 7602                       		moveq	#2,d3
00075B4A 103C 00B4                  		move.b	#-$4C,d0
00075B4E 7200                       		moveq	#0,d1
00075B50                            
00075B50                            loc_71E6A:
00075B50 4EBA 0000                  		jsr	sub_7272E(pc)
00075B54 4EBA 0000                  		jsr	sub_72764(pc)
00075B58 5200                       		addq.b	#1,d0
00075B5A 51CB FFF4                  		dbf	d3,loc_71E6A
00075B5E                            
00075B5E 7602                       		moveq	#2,d3
00075B60 7028                       		moveq	#$28,d0
00075B62                            
00075B62                            loc_71E7C:
00075B62 1203                       		move.b	d3,d1
00075B64 4EBA 0000                  		jsr	sub_7272E(pc)
00075B68 5801                       		addq.b	#4,d1
00075B6A 4EBA 0000                  		jsr	sub_7272E(pc)
00075B6E 51CB FFF2                  		dbf	d3,loc_71E7C
00075B72                            
00075B72 4EBA 0000                  		jsr	sub_729B6(pc)
00075B76 6000 FDB2                  		bra.w	loc_71C44
00075B7A                            ; ===========================================================================
00075B7A                            
00075B7A                            loc_71E94:				; XREF: loc_71E50
00075B7A 422E 0003                  		clr.b	3(a6)
00075B7E 7630                       		moveq	#$30,d3
00075B80 4BEE 0040                  		lea	$40(a6),a5
00075B84 7806                       		moveq	#6,d4
00075B86                            
00075B86                            loc_71EA0:
00075B86 0815 0007                  		btst	#7,(a5)
00075B8A 6700                       		beq.s	loc_71EB8
00075B8C 0815 0002                  		btst	#2,(a5)
00075B90 6600                       		bne.s	loc_71EB8
00075B92 103C 00B4                  		move.b	#-$4C,d0
00075B96 122D 000A                  		move.b	$A(a5),d1
00075B9A 4EBA 0000                  		jsr	sub_72722(pc)
00075B9E                            
00075B9E                            loc_71EB8:
00075B9E DAC3                       		adda.w	d3,a5
00075BA0 51CC FFE4                  		dbf	d4,loc_71EA0
00075BA4                            
00075BA4 4BEE 0220                  		lea	$220(a6),a5
00075BA8 7802                       		moveq	#2,d4
00075BAA                            
00075BAA                            loc_71EC4:
00075BAA 0815 0007                  		btst	#7,(a5)
00075BAE 6700                       		beq.s	loc_71EDC
00075BB0 0815 0002                  		btst	#2,(a5)
00075BB4 6600                       		bne.s	loc_71EDC
00075BB6 103C 00B4                  		move.b	#-$4C,d0
00075BBA 122D 000A                  		move.b	$A(a5),d1
00075BBE 4EBA 0000                  		jsr	sub_72722(pc)
00075BC2                            
00075BC2                            loc_71EDC:
00075BC2 DAC3                       		adda.w	d3,a5
00075BC4 51CC FFE4                  		dbf	d4,loc_71EC4
00075BC8                            
00075BC8 4BEE 0340                  		lea	$340(a6),a5
00075BCC 0815 0007                  		btst	#7,(a5)
00075BD0 6700                       		beq.s	loc_71EFE
00075BD2 0815 0002                  		btst	#2,(a5)
00075BD6 6600                       		bne.s	loc_71EFE
00075BD8 103C 00B4                  		move.b	#-$4C,d0
00075BDC 122D 000A                  		move.b	$A(a5),d1
00075BE0 4EBA 0000                  		jsr	sub_72722(pc)
00075BE4                            
00075BE4                            loc_71EFE:
00075BE4 6000 FD44                  		bra.w	loc_71C44
00075BE8                            
00075BE8                            ; ---------------------------------------------------------------------------
00075BE8                            ; Subroutine to	play a sound or	music track
00075BE8                            ; ---------------------------------------------------------------------------
00075BE8                            
00075BE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075BE8                            
00075BE8                            
00075BE8                            Sound_Play:				; XREF: sub_71B4C
00075BE8 2079 0007 5646             		movea.l	(Go_SoundTypes).l,a0
00075BEE 43EE 000A                  		lea	$A(a6),a1	; load music track number
00075BF2 1616                       		move.b	0(a6),d3
00075BF4 7802                       		moveq	#2,d4
00075BF6                            
00075BF6                            loc_71F12:
00075BF6 1011                       		move.b	(a1),d0		; move track number to d0
00075BF8 1200                       		move.b	d0,d1
00075BFA 4219                       		clr.b	(a1)+
00075BFC 0400 0081                  		subi.b	#$81,d0
00075C00 6500                       		bcs.s	loc_71F3E
00075C02 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00075C08 6700                       		beq.s	loc_71F2C
00075C0A 1D41 000A                  		move.b	d1,$A(a6)
00075C0E 6000                       		bra.s	loc_71F3E
00075C10                            ; ===========================================================================
00075C10                            
00075C10                            loc_71F2C:
00075C10 0240 007F                  		andi.w	#$7F,d0
00075C14 1430 0000                  		move.b	(a0,d0.w),d2
00075C18 B403                       		cmp.b	d3,d2
00075C1A 6500                       		bcs.s	loc_71F3E
00075C1C 1602                       		move.b	d2,d3
00075C1E 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00075C22                            
00075C22                            loc_71F3E:
00075C22 51CC FFD2                  		dbf	d4,loc_71F12
00075C26                            
00075C26 4A03                       		tst.b	d3
00075C28 6B00                       		bmi.s	locret_71F4A
00075C2A 1C83                       		move.b	d3,0(a6)
00075C2C                            
00075C2C                            locret_71F4A:
00075C2C 4E75                       		rts	
00075C2E                            ; End of function Sound_Play
00075C2E                            
00075C2E                            
00075C2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00075C2E                            
00075C2E                            
00075C2E                            Sound_ChkValue:				; XREF: sub_71B4C
00075C2E 7E00                       		moveq	#0,d7
00075C30 1E2E 0009                  		move.b	9(a6),d7
00075C34 6700 0000                  		beq.w	Sound_E4
00075C38 6A00                       		bpl.s	locret_71F8C
00075C3A 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00075C40 0C07 009F                  		cmpi.b	#$9F,d7
00075C44 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00075C48 0C07 00A0                  		cmpi.b	#$A0,d7
00075C4C 6500 0000                  		bcs.w	locret_71F8C
00075C50 0C07 00CF                  		cmpi.b	#$CF,d7
00075C54 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00075C58 0C07 00D0                  		cmpi.b	#$D0,d7
00075C5C 6500 0000                  		bcs.w	locret_71F8C
00075C60 0C07 00E0                  		cmpi.b	#$E0,d7
00075C64 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00075C68 0C07 00E5                  		cmpi.b	#$E5,d7
00075C6C 6300                       		bls.s	Sound_E0toE5	; sound	$E0-$E5
00075C6E                            
00075C6E                            locret_71F8C:
00075C6E 4E75                       		rts	
00075C70                            ; ===========================================================================
00075C70                            
00075C70                            Sound_E0toE5				; XREF: Sound_ChkValue
00075C70 0407 00E0                  		subi.b	#$E0,d7
00075C74 E54F                       		lsl.w	#2,d7
00075C76 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00075C7A                            ; ===========================================================================
00075C7A                            
00075C7A                            Sound_ExIndex:
00075C7A 6000 0000                  		bra.w	Sound_E0
00075C7E                            ; ===========================================================================
00075C7E 6000 0000                  		bra.w	Sound_E1
00075C82                            ; ===========================================================================
00075C82 6000 0000                  		bra.w	Sound_E2
00075C86                            ; ===========================================================================
00075C86 6000 0000                  		bra.w	Sound_E3
00075C8A                            ; ===========================================================================
00075C8A 6000 0000                  		bra.w	Sound_E4
00075C8E                            ; ===========================================================================
00075C8E 6000 0000                  		bra.w	Sound_E5
00075C92                            ; ===========================================================================
00075C92                            ; ---------------------------------------------------------------------------
00075C92                            ; Play "Say-gaa" PCM sound
00075C92                            ; ---------------------------------------------------------------------------
00075C92                            
00075C92                            Sound_E1:				  
00075C92 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075C98 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00075C9E 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075CA6                            PlayPCM_Loop:	  
00075CA6 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075CAC 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00075CB0 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00075CB4 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075CB6 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00075CB8 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00075CBC 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00075CC2 4EB8 142A                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00075CC6 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00075CCC 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00075CCE 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00075CD0                            return_PlayPCM: 
00075CD0 584F                       		addq.w	#4,sp 
00075CD2 4E75                       		rts
00075CD4                            		
00075CD4                            ; ---------------------------------------------------------------------------
00075CD4                            ; Play you are an idiot pcm sound
00075CD4                            ; since the sfx already crashes the game forever load it here :V
00075CD4                            ; ---------------------------------------------------------------------------
00075CD4                            
00075CD4                            Sound_E5: 
00075CD4 4EB8 14FA                  		jsr	ClearScreen
00075CD8                            		;control port on a5
00075CD8 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
00075CDE 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
00075CE4 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
00075CE8 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
00075CEC 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
00075CF0                            		
00075CF0 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
00075CF4                            		
00075CF4 2ABC 4000 0000             		move.l	#$40000000,(a5)
00075CFA 41F9 0002 42C8             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
00075D00 4EB8 1676                  		jsr	NemDec
00075D04 43F9 00FF 0000             		lea	($FF0000).l,a1
00075D0A 41F9 0002 426A             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
00075D10 303C 0000                  		move.w	#0,d0
00075D14 4EB8 1954                  		jsr	EniDec
00075D18 43F9 00FF 0000             		lea	($FF0000).l,a1
00075D1E 203C 4304 0003             		move.l	#$43040003,d0
00075D24 7223                       		moveq	#35,d1
00075D26 740D                       		moveq	#13,d2
00075D28 4EB8 1656                  		jsr	ShowVDPGraphics
00075D2C 7014                       		moveq	#20,d0
00075D2E 4EB8 2314                  		jsr	PalLoad2	; load pallet
00075D32                            		
00075D32                            Sound_E5_StartPCM:
00075D32 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00075D38 263C 0000 0000             		move.l	#(IdiotPCM_End-IdiotPCM),d3			; Load the size of the idiot PCM sample into d3 
00075D3E 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00075D46                            PlayPCM_LoopE5:	  
00075D46                            
00075D46 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00075D4C                            		
00075D4C 5278 FE24                  		addq.w	#1,($FFFFFE24).w
00075D50                            		
00075D50 1038 FE24                  		move.b	($FFFFFE24).w,d0
00075D54 0200 000F                  		andi.b	#$F,d0
00075D58 6700                       		beq.s	SfxE5SwapPalette
00075D5A                            		
00075D5A 303C 0056                  		move.w	#$58-2,d0				; Write the pitch ($58 in this case) to d0  (-28 from the check before)
00075D5E 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
00075D62 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00075D64 67CC                       		beq.s	Sound_E5_StartPCM			; If d3 = 0, we finished playing the PCM sample, DONT STOP
00075D66 60DE                       		bra.s	PlayPCM_LoopE5
00075D68                            		
00075D68                            SfxE5SwapPalette:
00075D68                            		
00075D68 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
00075D6E                            		
00075D6E                            		
00075D6E 0838 0004 FE24             		btst	#4,($FFFFFE24).w
00075D74 6700                       		beq.s	@not_black
00075D76 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
00075D7C 6000                       		bra.s	@merge
00075D7E                            	@not_black:
00075D7E 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
00075D84                            	@merge:
00075D84 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
00075D88 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
00075D8C 31FC 0080 F640             		move.w	#$80+((0&$C000)>>14),($FFFFF640).w ;dest
00075D92 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00075D96                            		
00075D96 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
00075D9A 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
00075D9E 60A6                       		bra.s	PlayPCM_LoopE5
00075DA0                            		
00075DA0                            ; ===========================================================================
00075DA0                            ; ---------------------------------------------------------------------------
00075DA0                            ; Play music track $81-$9F
00075DA0                            ; ---------------------------------------------------------------------------
00075DA0                            
00075DA0                            Sound_81to9F:				; XREF: Sound_ChkValue
00075DA0 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00075DA4 6600                       		bne.s	loc_72024	; if not, branch
00075DA6 4A2E 0027                  		tst.b	$27(a6)
00075DAA 6600 0000                  		bne.w	loc_721B6
00075DAE 4BEE 0040                  		lea	$40(a6),a5
00075DB2 7009                       		moveq	#9,d0
00075DB4                            
00075DB4                            loc_71FE6:
00075DB4 0895 0002                  		bclr	#2,(a5)
00075DB8 DAFC 0030                  		adda.w	#$30,a5
00075DBC 51C8 FFF6                  		dbf	d0,loc_71FE6
00075DC0                            
00075DC0 4BEE 0220                  		lea	$220(a6),a5
00075DC4 7005                       		moveq	#5,d0
00075DC6                            
00075DC6                            loc_71FF8:
00075DC6 0895 0007                  		bclr	#7,(a5)
00075DCA DAFC 0030                  		adda.w	#$30,a5
00075DCE 51C8 FFF6                  		dbf	d0,loc_71FF8
00075DD2 4216                       		clr.b	0(a6)
00075DD4 204E                       		movea.l	a6,a0
00075DD6 43EE 03A0                  		lea	$3A0(a6),a1
00075DDA 303C 0087                  		move.w	#$87,d0
00075DDE                            
00075DDE                            loc_72012:
00075DDE 22D8                       		move.l	(a0)+,(a1)+
00075DE0 51C8 FFFC                  		dbf	d0,loc_72012
00075DE4                            
00075DE4 1D7C 0080 0027             		move.b	#$80,$27(a6)
00075DEA 4216                       		clr.b	0(a6)
00075DEC 6000                       		bra.s	loc_7202C
00075DEE                            ; ===========================================================================
00075DEE                            
00075DEE                            loc_72024:
00075DEE 422E 0027                  		clr.b	$27(a6)
00075DF2 422E 0026                  		clr.b	$26(a6)
00075DF6                            
00075DF6                            loc_7202C:
00075DF6 4EBA 0000                  		jsr	sub_725CA(pc)
00075DFA 2879 0007 5656             		movea.l	(off_719A0).l,a4
00075E00 0407 0081                  		subi.b	#$81,d7
00075E04 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00075E0A 2879 0007 564E             		movea.l	(Go_MusicIndex).l,a4
00075E10 E54F                       		lsl.w	#2,d7
00075E12 2874 7000                  		movea.l	(a4,d7.w),a4
00075E16 7000                       		moveq	#0,d0
00075E18 3014                       		move.w	(a4),d0
00075E1A D08C                       		add.l	a4,d0
00075E1C 2D40 0018                  		move.l	d0,$18(a6)
00075E20 102C 0005                  		move.b	5(a4),d0
00075E24 1D40 0028                  		move.b	d0,$28(a6)
00075E28 4A2E 002A                  		tst.b	$2A(a6)
00075E2C 6700                       		beq.s	loc_72068
00075E2E 102E 0029                  		move.b	$29(a6),d0
00075E32                            
00075E32                            loc_72068:
00075E32 1D40 0002                  		move.b	d0,2(a6)
00075E36 1D40 0001                  		move.b	d0,1(a6)
00075E3A 7200                       		moveq	#0,d1
00075E3C 264C                       		movea.l	a4,a3
00075E3E 5C4C                       		addq.w	#6,a4
00075E40 7E00                       		moveq	#0,d7
00075E42 1E2B 0002                  		move.b	2(a3),d7
00075E46 6700 0000                  		beq.w	loc_72114
00075E4A 5307                       		subq.b	#1,d7
00075E4C 123C 00C0                  		move.b	#-$40,d1
00075E50 182B 0004                  		move.b	4(a3),d4
00075E54 7C30                       		moveq	#$30,d6
00075E56 1A3C 0001                  		move.b	#1,d5
00075E5A 43EE 0040                  		lea	$40(a6),a1
00075E5E 45FA 0000                  		lea	byte_721BA(pc),a2
00075E62                            
00075E62                            loc_72098:
00075E62 08D1 0007                  		bset	#7,(a1)
00075E66 135A 0001                  		move.b	(a2)+,1(a1)
00075E6A 1344 0002                  		move.b	d4,2(a1)
00075E6E 1346 000D                  		move.b	d6,$D(a1)
00075E72 1341 000A                  		move.b	d1,$A(a1)
00075E76 1345 000E                  		move.b	d5,$E(a1)
00075E7A 7000                       		moveq	#0,d0
00075E7C 301C                       		move.w	(a4)+,d0
00075E7E D08B                       		add.l	a3,d0
00075E80 2340 0004                  		move.l	d0,4(a1)
00075E84 335C 0008                  		move.w	(a4)+,8(a1)
00075E88 D2C6                       		adda.w	d6,a1
00075E8A 51CF FFD6                  		dbf	d7,loc_72098
00075E8E 0C2B 0007 0002             		cmpi.b	#7,2(a3)
00075E94 6600                       		bne.s	loc_720D8
00075E96 702B                       		moveq	#$2B,d0
00075E98 7200                       		moveq	#0,d1
00075E9A 4EBA 0000                  		jsr	sub_7272E(pc)
00075E9E 6000 0000                  		bra.w	loc_72114
00075EA2                            ; ===========================================================================
00075EA2                            
00075EA2                            loc_720D8:
00075EA2 7028                       		moveq	#$28,d0
00075EA4 7206                       		moveq	#6,d1
00075EA6 4EBA 0000                  		jsr	sub_7272E(pc)
00075EAA 103C 0042                  		move.b	#$42,d0
00075EAE 727F                       		moveq	#$7F,d1
00075EB0 4EBA 0000                  		jsr	sub_72764(pc)
00075EB4 103C 004A                  		move.b	#$4A,d0
00075EB8 727F                       		moveq	#$7F,d1
00075EBA 4EBA 0000                  		jsr	sub_72764(pc)
00075EBE 103C 0046                  		move.b	#$46,d0
00075EC2 727F                       		moveq	#$7F,d1
00075EC4 4EBA 0000                  		jsr	sub_72764(pc)
00075EC8 103C 004E                  		move.b	#$4E,d0
00075ECC 727F                       		moveq	#$7F,d1
00075ECE 4EBA 0000                  		jsr	sub_72764(pc)
00075ED2 103C 00B6                  		move.b	#-$4A,d0
00075ED6 123C 00C0                  		move.b	#-$40,d1
00075EDA 4EBA 0000                  		jsr	sub_72764(pc)
00075EDE                            
00075EDE                            loc_72114:
00075EDE 7E00                       		moveq	#0,d7
00075EE0 1E2B 0003                  		move.b	3(a3),d7
00075EE4 6700                       		beq.s	loc_72154
00075EE6 5307                       		subq.b	#1,d7
00075EE8 43EE 0190                  		lea	$190(a6),a1
00075EEC 45FA 0000                  		lea	byte_721C2(pc),a2
00075EF0                            
00075EF0                            loc_72126:
00075EF0 08D1 0007                  		bset	#7,(a1)
00075EF4 135A 0001                  		move.b	(a2)+,1(a1)
00075EF8 1344 0002                  		move.b	d4,2(a1)
00075EFC 1346 000D                  		move.b	d6,$D(a1)
00075F00 1345 000E                  		move.b	d5,$E(a1)
00075F04 7000                       		moveq	#0,d0
00075F06 301C                       		move.w	(a4)+,d0
00075F08 D08B                       		add.l	a3,d0
00075F0A 2340 0004                  		move.l	d0,4(a1)
00075F0E 335C 0008                  		move.w	(a4)+,8(a1)
00075F12 101C                       		move.b	(a4)+,d0
00075F14 135C 000B                  		move.b	(a4)+,$B(a1)
00075F18 D2C6                       		adda.w	d6,a1
00075F1A 51CF FFD4                  		dbf	d7,loc_72126
00075F1E                            
00075F1E                            loc_72154:
00075F1E 43EE 0220                  		lea	$220(a6),a1
00075F22 7E05                       		moveq	#5,d7
00075F24                            
00075F24                            loc_7215A:
00075F24 4A11                       		tst.b	(a1)
00075F26 6A00 0000                  		bpl.w	loc_7217C
00075F2A 7000                       		moveq	#0,d0
00075F2C 1029 0001                  		move.b	1(a1),d0
00075F30 6B00                       		bmi.s	loc_7216E
00075F32 5500                       		subq.b	#2,d0
00075F34 E508                       		lsl.b	#2,d0
00075F36 6000                       		bra.s	loc_72170
00075F38                            ; ===========================================================================
00075F38                            
00075F38                            loc_7216E:
00075F38 E608                       		lsr.b	#3,d0
00075F3A                            
00075F3A                            loc_72170:
00075F3A 41FA 0000                  		lea	dword_722CC(pc),a0
00075F3E 2070 0000                  		movea.l	(a0,d0.w),a0
00075F42 08D0 0002                  		bset	#2,(a0)
00075F46                            
00075F46                            loc_7217C:
00075F46 D2C6                       		adda.w	d6,a1
00075F48 51CF FFDA                  		dbf	d7,loc_7215A
00075F4C                            
00075F4C 4A6E 0340                  		tst.w	$340(a6)
00075F50 6A00                       		bpl.s	loc_7218E
00075F52 08EE 0002 0100             		bset	#2,$100(a6)
00075F58                            
00075F58                            loc_7218E:
00075F58 4A6E 0370                  		tst.w	$370(a6)
00075F5C 6A00                       		bpl.s	loc_7219A
00075F5E 08EE 0002 01F0             		bset	#2,$1F0(a6)
00075F64                            
00075F64                            loc_7219A:
00075F64 4BEE 0070                  		lea	$70(a6),a5
00075F68 7805                       		moveq	#5,d4
00075F6A                            
00075F6A                            loc_721A0:
00075F6A 4EBA 0000                  		jsr	sub_726FE(pc)
00075F6E DAC6                       		adda.w	d6,a5
00075F70 51CC FFF8                  		dbf	d4,loc_721A0
00075F74 7802                       		moveq	#2,d4
00075F76                            
00075F76                            loc_721AC:
00075F76 4EBA 0000                  		jsr	sub_729A0(pc)
00075F7A DAC6                       		adda.w	d6,a5
00075F7C 51CC FFF8                  		dbf	d4,loc_721AC
00075F80                            
00075F80                            loc_721B6:
00075F80 584F                       		addq.w	#4,sp
00075F82 4E75                       		rts	
00075F84                            ; ===========================================================================
00075F84 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
00075F8C                            		even
00075F8C 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
00075F90                            		even
00075F90                            ; ===========================================================================
00075F90                            ; ---------------------------------------------------------------------------
00075F90                            ; Play normal sound effect
00075F90                            ; ---------------------------------------------------------------------------
00075F90                            
00075F90                            Sound_A0toCF:				; XREF: Sound_ChkValue
00075F90 4A2E 0027                  		tst.b	$27(a6)
00075F94 6600 0000                  		bne.w	loc_722C6
00075F98 4A2E 0004                  		tst.b	4(a6)
00075F9C 6600 0000                  		bne.w	loc_722C6
00075FA0 4A2E 0024                  		tst.b	$24(a6)
00075FA4 6600 0000                  		bne.w	loc_722C6
00075FA8 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
00075FAC 6600                       		bne.s	Sound_notB5	; if not, branch
00075FAE 4A2E 002B                  		tst.b	$2B(a6)
00075FB2 6600                       		bne.s	loc_721EE
00075FB4 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
00075FB8                            
00075FB8                            loc_721EE:
00075FB8 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
00075FBE                            
00075FBE                            Sound_notB5:
00075FBE 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
00075FC2 6600                       		bne.s	Sound_notA7	; if not, branch
00075FC4 4A2E 002C                  		tst.b	$2C(a6)
00075FC8 6600 0000                  		bne.w	locret_722C4
00075FCC 1D7C 0080 002C             		move.b	#$80,$2C(a6)
00075FD2                            
00075FD2                            Sound_notA7:
00075FD2 2079 0007 5652             		movea.l	(Go_SoundIndex).l,a0
00075FD8 0407 00A0                  		subi.b	#$A0,d7
00075FDC E54F                       		lsl.w	#2,d7
00075FDE 2670 7000                  		movea.l	(a0,d7.w),a3
00075FE2 224B                       		movea.l	a3,a1
00075FE4 7200                       		moveq	#0,d1
00075FE6 3219                       		move.w	(a1)+,d1
00075FE8 D28B                       		add.l	a3,d1
00075FEA 1A19                       		move.b	(a1)+,d5
00075FEC 1E19                       		move.b	(a1)+,d7
00075FEE 5307                       		subq.b	#1,d7
00075FF0 7C30                       		moveq	#$30,d6
00075FF2                            
00075FF2                            loc_72228:
00075FF2 7600                       		moveq	#0,d3
00075FF4 1629 0001                  		move.b	1(a1),d3
00075FF8 1803                       		move.b	d3,d4
00075FFA 6B00                       		bmi.s	loc_72244
00075FFC 5543                       		subq.w	#2,d3
00075FFE E54B                       		lsl.w	#2,d3
00076000 4BFA 0000                  		lea	dword_722CC(pc),a5
00076004 2A75 3000                  		movea.l	(a5,d3.w),a5
00076008 08D5 0002                  		bset	#2,(a5)
0007600C 6000                       		bra.s	loc_7226E
0007600E                            ; ===========================================================================
0007600E                            
0007600E                            loc_72244:
0007600E E64B                       		lsr.w	#3,d3
00076010 4BFA 0000                  		lea	dword_722CC(pc),a5
00076014 2A75 3000                  		movea.l	(a5,d3.w),a5
00076018 08D5 0002                  		bset	#2,(a5)
0007601C 0C04 00C0                  		cmpi.b	#$C0,d4
00076020 6600                       		bne.s	loc_7226E
00076022 1004                       		move.b	d4,d0
00076024 0000 001F                  		ori.b	#$1F,d0
00076028 13C0 00C0 0011             		move.b	d0,($C00011).l
0007602E 0840 0005                  		bchg	#5,d0
00076032 13C0 00C0 0011             		move.b	d0,($C00011).l
00076038                            
00076038                            loc_7226E:
00076038 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0007603C 244D                       		movea.l	a5,a2
0007603E 700B                       		moveq	#$B,d0
00076040                            
00076040                            loc_72276:
00076040 429A                       		clr.l	(a2)+
00076042 51C8 FFFC                  		dbf	d0,loc_72276
00076046                            
00076046 3A99                       		move.w	(a1)+,(a5)
00076048 1B45 0002                  		move.b	d5,2(a5)
0007604C 7000                       		moveq	#0,d0
0007604E 3019                       		move.w	(a1)+,d0
00076050 D08B                       		add.l	a3,d0
00076052 2B40 0004                  		move.l	d0,4(a5)
00076056 3B59 0008                  		move.w	(a1)+,8(a5)
0007605A 1B7C 0001 000E             		move.b	#1,$E(a5)
00076060 1B46 000D                  		move.b	d6,$D(a5)
00076064 4A04                       		tst.b	d4
00076066 6B00                       		bmi.s	loc_722A8
00076068 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007606E 2B41 0020                  		move.l	d1,$20(a5)
00076072                            
00076072                            loc_722A8:
00076072 51CF FF7E                  		dbf	d7,loc_72228
00076076                            
00076076 4A2E 0250                  		tst.b	$250(a6)
0007607A 6A00                       		bpl.s	loc_722B8
0007607C 08EE 0002 0340             		bset	#2,$340(a6)
00076082                            
00076082                            loc_722B8:
00076082 4A2E 0310                  		tst.b	$310(a6)
00076086 6A00                       		bpl.s	locret_722C4
00076088 08EE 0002 0370             		bset	#2,$370(a6)
0007608E                            
0007608E                            locret_722C4:
0007608E 4E75                       		rts	
00076090                            ; ===========================================================================
00076090                            
00076090                            loc_722C6:
00076090 4216                       		clr.b	0(a6)
00076092 4E75                       		rts	
00076094                            ; ===========================================================================
00076094 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
00076098 0000 0000                  		dc.l 0
0007609C 00FF F100                  		dc.l $FFF100
000760A0 00FF F130                  		dc.l $FFF130
000760A4 00FF F190                  		dc.l $FFF190
000760A8 00FF F1C0                  		dc.l $FFF1C0
000760AC 00FF F1F0                  		dc.l $FFF1F0
000760B0 00FF F1F0                  		dc.l $FFF1F0
000760B4 00FF F220                  dword_722EC:	dc.l $FFF220
000760B8 0000 0000                  		dc.l 0
000760BC 00FF F250                  		dc.l $FFF250
000760C0 00FF F280                  		dc.l $FFF280
000760C4 00FF F2B0                  		dc.l $FFF2B0
000760C8 00FF F2E0                  		dc.l $FFF2E0
000760CC 00FF F310                  		dc.l $FFF310
000760D0 00FF F310                  		dc.l $FFF310
000760D4                            ; ===========================================================================
000760D4                            ; ---------------------------------------------------------------------------
000760D4                            ; Play GHZ waterfall sound
000760D4                            ; ---------------------------------------------------------------------------
000760D4                            
000760D4                            Sound_D0toDF:				; XREF: Sound_ChkValue
000760D4 4A2E 0027                  		tst.b	$27(a6)
000760D8 6600 0000                  		bne.w	locret_723C6
000760DC 4A2E 0004                  		tst.b	4(a6)
000760E0 6600 0000                  		bne.w	locret_723C6
000760E4 4A2E 0024                  		tst.b	$24(a6)
000760E8 6600 0000                  		bne.w	locret_723C6
000760EC 2079 0007 564A             		movea.l	(Go_SoundD0).l,a0
000760F2 0407 00D0                  		subi.b	#$D0,d7
000760F6 E54F                       		lsl.w	#2,d7
000760F8 2670 7000                  		movea.l	(a0,d7.w),a3
000760FC 224B                       		movea.l	a3,a1
000760FE 7000                       		moveq	#0,d0
00076100 3019                       		move.w	(a1)+,d0
00076102 D08B                       		add.l	a3,d0
00076104 2D40 0020                  		move.l	d0,$20(a6)
00076108 1A19                       		move.b	(a1)+,d5
0007610A 1E19                       		move.b	(a1)+,d7
0007610C 5307                       		subq.b	#1,d7
0007610E 7C30                       		moveq	#$30,d6
00076110                            
00076110                            loc_72348:
00076110 1829 0001                  		move.b	1(a1),d4
00076114 6B00                       		bmi.s	loc_7235A
00076116 08EE 0002 0100             		bset	#2,$100(a6)
0007611C 4BEE 0340                  		lea	$340(a6),a5
00076120 6000                       		bra.s	loc_72364
00076122                            ; ===========================================================================
00076122                            
00076122                            loc_7235A:
00076122 08EE 0002 01F0             		bset	#2,$1F0(a6)
00076128 4BEE 0370                  		lea	$370(a6),a5
0007612C                            
0007612C                            loc_72364:
0007612C 244D                       		movea.l	a5,a2
0007612E 700B                       		moveq	#$B,d0
00076130                            
00076130                            loc_72368:
00076130 429A                       		clr.l	(a2)+
00076132 51C8 FFFC                  		dbf	d0,loc_72368
00076136                            
00076136 3A99                       		move.w	(a1)+,(a5)
00076138 1B45 0002                  		move.b	d5,2(a5)
0007613C 7000                       		moveq	#0,d0
0007613E 3019                       		move.w	(a1)+,d0
00076140 D08B                       		add.l	a3,d0
00076142 2B40 0004                  		move.l	d0,4(a5)
00076146 3B59 0008                  		move.w	(a1)+,8(a5)
0007614A 1B7C 0001 000E             		move.b	#1,$E(a5)
00076150 1B46 000D                  		move.b	d6,$D(a5)
00076154 4A04                       		tst.b	d4
00076156 6B00                       		bmi.s	loc_72396
00076158 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0007615E                            
0007615E                            loc_72396:
0007615E 51CF FFB0                  		dbf	d7,loc_72348
00076162                            
00076162 4A2E 0250                  		tst.b	$250(a6)
00076166 6A00                       		bpl.s	loc_723A6
00076168 08EE 0002 0340             		bset	#2,$340(a6)
0007616E                            
0007616E                            loc_723A6:
0007616E 4A2E 0310                  		tst.b	$310(a6)
00076172 6A00                       		bpl.s	locret_723C6
00076174 08EE 0002 0370             		bset	#2,$370(a6)
0007617A 0004 001F                  		ori.b	#$1F,d4
0007617E 13C4 00C0 0011             		move.b	d4,($C00011).l
00076184 0844 0005                  		bchg	#5,d4
00076188 13C4 00C0 0011             		move.b	d4,($C00011).l
0007618E                            
0007618E                            locret_723C6:
0007618E 4E75                       		rts	
00076190                            ; End of function Sound_ChkValue
00076190                            
00076190                            ; ===========================================================================
00076190 00FF F100                  		dc.l $FFF100
00076194 00FF F1F0                  		dc.l $FFF1F0
00076198 00FF F250                  		dc.l $FFF250
0007619C 00FF F310                  		dc.l $FFF310
000761A0 00FF F340                  		dc.l $FFF340
000761A4 00FF F370                  		dc.l $FFF370
000761A8                            
000761A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000761A8                            
000761A8                            
000761A8                            Snd_FadeOut1:				; XREF: Sound_E0
000761A8 4216                       		clr.b	0(a6)
000761AA 4BEE 0220                  		lea	$220(a6),a5
000761AE 7E05                       		moveq	#5,d7
000761B0                            
000761B0                            loc_723EA:
000761B0 4A15                       		tst.b	(a5)
000761B2 6A00 0000                  		bpl.w	loc_72472
000761B6 0895 0007                  		bclr	#7,(a5)
000761BA 7600                       		moveq	#0,d3
000761BC 162D 0001                  		move.b	1(a5),d3
000761C0 6B00                       		bmi.s	loc_7243C
000761C2 4EBA 0000                  		jsr	sub_726FE(pc)
000761C6 0C03 0004                  		cmpi.b	#4,d3
000761CA 6600                       		bne.s	loc_72416
000761CC 4A2E 0340                  		tst.b	$340(a6)
000761D0 6A00                       		bpl.s	loc_72416
000761D2 4BEE 0340                  		lea	$340(a6),a5
000761D6 226E 0020                  		movea.l	$20(a6),a1
000761DA 6000                       		bra.s	loc_72428
000761DC                            ; ===========================================================================
000761DC                            
000761DC                            loc_72416:
000761DC 5503                       		subq.b	#2,d3
000761DE E50B                       		lsl.b	#2,d3
000761E0 41FA FEB2                  		lea	dword_722CC(pc),a0
000761E4 264D                       		movea.l	a5,a3
000761E6 2A70 3000                  		movea.l	(a0,d3.w),a5
000761EA 226E 0018                  		movea.l	$18(a6),a1
000761EE                            
000761EE                            loc_72428:
000761EE 0895 0002                  		bclr	#2,(a5)
000761F2 08D5 0001                  		bset	#1,(a5)
000761F6 102D 000B                  		move.b	$B(a5),d0
000761FA 4EBA 0000                  		jsr	sub_72C4E(pc)
000761FE 2A4B                       		movea.l	a3,a5
00076200 6000                       		bra.s	loc_72472
00076202                            ; ===========================================================================
00076202                            
00076202                            loc_7243C:
00076202 4EBA 0000                  		jsr	sub_729A0(pc)
00076206 41EE 0370                  		lea	$370(a6),a0
0007620A 0C03 00E0                  		cmpi.b	#$E0,d3
0007620E 6700                       		beq.s	loc_7245A
00076210 0C03 00C0                  		cmpi.b	#$C0,d3
00076214 6700                       		beq.s	loc_7245A
00076216 E60B                       		lsr.b	#3,d3
00076218 41FA FE7A                  		lea	dword_722CC(pc),a0
0007621C 2070 3000                  		movea.l	(a0,d3.w),a0
00076220                            
00076220                            loc_7245A:
00076220 0890 0002                  		bclr	#2,(a0)
00076224 08D0 0001                  		bset	#1,(a0)
00076228 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0007622E 6600                       		bne.s	loc_72472
00076230 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00076238                            
00076238                            loc_72472:
00076238 DAFC 0030                  		adda.w	#$30,a5
0007623C 51CF FF72                  		dbf	d7,loc_723EA
00076240                            
00076240 4E75                       		rts	
00076242                            ; End of function Snd_FadeOut1
00076242                            
00076242                            
00076242                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076242                            
00076242                            
00076242                            Snd_FadeOut2:				; XREF: Sound_E0
00076242 4BEE 0340                  		lea	$340(a6),a5
00076246 4A15                       		tst.b	(a5)
00076248 6A00                       		bpl.s	loc_724AE
0007624A 0895 0007                  		bclr	#7,(a5)
0007624E 0815 0002                  		btst	#2,(a5)
00076252 6600                       		bne.s	loc_724AE
00076254 4EBA 0000                  		jsr	loc_7270A(pc)
00076258 4BEE 0100                  		lea	$100(a6),a5
0007625C 0895 0002                  		bclr	#2,(a5)
00076260 08D5 0001                  		bset	#1,(a5)
00076264 4A15                       		tst.b	(a5)
00076266 6A00                       		bpl.s	loc_724AE
00076268 226E 0018                  		movea.l	$18(a6),a1
0007626C 102D 000B                  		move.b	$B(a5),d0
00076270 4EBA 0000                  		jsr	sub_72C4E(pc)
00076274                            
00076274                            loc_724AE:
00076274 4BEE 0370                  		lea	$370(a6),a5
00076278 4A15                       		tst.b	(a5)
0007627A 6A00                       		bpl.s	locret_724E4
0007627C 0895 0007                  		bclr	#7,(a5)
00076280 0815 0002                  		btst	#2,(a5)
00076284 6600                       		bne.s	locret_724E4
00076286 4EBA 0000                  		jsr	loc_729A6(pc)
0007628A 4BEE 01F0                  		lea	$1F0(a6),a5
0007628E 0895 0002                  		bclr	#2,(a5)
00076292 08D5 0001                  		bset	#1,(a5)
00076296 4A15                       		tst.b	(a5)
00076298 6A00                       		bpl.s	locret_724E4
0007629A 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000762A0 6600                       		bne.s	locret_724E4
000762A2 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000762AA                            
000762AA                            locret_724E4:
000762AA 4E75                       		rts	
000762AC                            ; End of function Snd_FadeOut2
000762AC                            
000762AC                            ; ===========================================================================
000762AC                            ; ---------------------------------------------------------------------------
000762AC                            ; Fade out music
000762AC                            ; ---------------------------------------------------------------------------
000762AC                            
000762AC                            Sound_E0:				; XREF: Sound_ExIndex
000762AC 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000762B0 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000762B4 1D7C 0003 0006             		move.b	#3,6(a6)
000762BA 1D7C 0028 0004             		move.b	#$28,4(a6)
000762C0 422E 0040                  		clr.b	$40(a6)
000762C4 422E 002A                  		clr.b	$2A(a6)
000762C8 4E75                       		rts	
000762CA                            
000762CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000762CA                            
000762CA                            
000762CA                            sub_72504:				; XREF: sub_71B4C
000762CA 102E 0006                  		move.b	6(a6),d0
000762CE 6700                       		beq.s	loc_72510
000762D0 532E 0006                  		subq.b	#1,6(a6)
000762D4 4E75                       		rts	
000762D6                            ; ===========================================================================
000762D6                            
000762D6                            loc_72510:
000762D6 532E 0004                  		subq.b	#1,4(a6)
000762DA 6700 0000                  		beq.w	Sound_E4
000762DE 1D7C 0003 0006             		move.b	#3,6(a6)
000762E4 4BEE 0070                  		lea	$70(a6),a5
000762E8 7E05                       		moveq	#5,d7
000762EA                            
000762EA                            loc_72524:
000762EA 4A15                       		tst.b	(a5)
000762EC 6A00                       		bpl.s	loc_72538
000762EE 522D 0009                  		addq.b	#1,9(a5)
000762F2 6A00                       		bpl.s	loc_72534
000762F4 0895 0007                  		bclr	#7,(a5)
000762F8 6000                       		bra.s	loc_72538
000762FA                            ; ===========================================================================
000762FA                            
000762FA                            loc_72534:
000762FA 4EBA 0000                  		jsr	sub_72CB4(pc)
000762FE                            
000762FE                            loc_72538:
000762FE DAFC 0030                  		adda.w	#$30,a5
00076302 51CF FFE6                  		dbf	d7,loc_72524
00076306                            
00076306 7E02                       		moveq	#2,d7
00076308                            
00076308                            loc_72542:
00076308 4A15                       		tst.b	(a5)
0007630A 6A00                       		bpl.s	loc_72560
0007630C 522D 0009                  		addq.b	#1,9(a5)
00076310 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00076316 6500                       		bcs.s	loc_72558
00076318 0895 0007                  		bclr	#7,(a5)
0007631C 6000                       		bra.s	loc_72560
0007631E                            ; ===========================================================================
0007631E                            
0007631E                            loc_72558:
0007631E 1C2D 0009                  		move.b	9(a5),d6
00076322 4EBA 0000                  		jsr	sub_7296A(pc)
00076326                            
00076326                            loc_72560:
00076326 DAFC 0030                  		adda.w	#$30,a5
0007632A 51CF FFDC                  		dbf	d7,loc_72542
0007632E                            
0007632E 4E75                       		rts	
00076330                            ; End of function sub_72504
00076330                            
00076330                            
00076330                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076330                            
00076330                            
00076330                            sub_7256A:				; XREF: Sound_E4; sub_725CA
00076330 7602                       		moveq	#2,d3
00076332 7028                       		moveq	#$28,d0
00076334                            
00076334                            loc_7256E:
00076334 1203                       		move.b	d3,d1
00076336 4EBA 0000                  		jsr	sub_7272E(pc)
0007633A 5801                       		addq.b	#4,d1
0007633C 4EBA 0000                  		jsr	sub_7272E(pc)
00076340 51CB FFF2                  		dbf	d3,loc_7256E
00076344                            
00076344 7040                       		moveq	#$40,d0
00076346 727F                       		moveq	#$7F,d1
00076348 7802                       		moveq	#2,d4
0007634A                            
0007634A                            loc_72584:
0007634A 7603                       		moveq	#3,d3
0007634C                            
0007634C                            loc_72586:
0007634C 4EBA 0000                  		jsr	sub_7272E(pc)
00076350 4EBA 0000                  		jsr	sub_72764(pc)
00076354 5840                       		addq.w	#4,d0
00076356 51CB FFF4                  		dbf	d3,loc_72586
0007635A                            
0007635A 0400 000F                  		subi.b	#$F,d0
0007635E 51CC FFEA                  		dbf	d4,loc_72584
00076362                            
00076362 4E75                       		rts	
00076364                            ; End of function sub_7256A
00076364                            
00076364                            ; ===========================================================================
00076364                            ; ---------------------------------------------------------------------------
00076364                            ; Stop music
00076364                            ; ---------------------------------------------------------------------------
00076364                            
00076364                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
00076364 702B                       		moveq	#$2B,d0
00076366 123C 0080                  		move.b	#$80,d1
0007636A 4EBA 0000                  		jsr	sub_7272E(pc)
0007636E 7027                       		moveq	#$27,d0
00076370 7200                       		moveq	#0,d1
00076372 4EBA 0000                  		jsr	sub_7272E(pc)
00076376 204E                       		movea.l	a6,a0
00076378 303C 00E3                  		move.w	#$E3,d0
0007637C                            
0007637C                            loc_725B6:
0007637C 4298                       		clr.l	(a0)+
0007637E 51C8 FFFC                  		dbf	d0,loc_725B6
00076382                            
00076382 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
00076388 4EBA FFA6                  		jsr	sub_7256A(pc)
0007638C 6000 0000                  		bra.w	sub_729B6
00076390                            
00076390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076390                            
00076390                            
00076390                            sub_725CA:				; XREF: Sound_ChkValue
00076390 204E                       		movea.l	a6,a0
00076392 1216                       		move.b	0(a6),d1
00076394 142E 0027                  		move.b	$27(a6),d2
00076398 162E 002A                  		move.b	$2A(a6),d3
0007639C 182E 0026                  		move.b	$26(a6),d4
000763A0 3A2E 000A                  		move.w	$A(a6),d5
000763A4 303C 0087                  		move.w	#$87,d0
000763A8                            
000763A8                            loc_725E4:
000763A8 4298                       		clr.l	(a0)+
000763AA 51C8 FFFC                  		dbf	d0,loc_725E4
000763AE                            
000763AE 1C81                       		move.b	d1,0(a6)
000763B0 1D42 0027                  		move.b	d2,$27(a6)
000763B4 1D43 002A                  		move.b	d3,$2A(a6)
000763B8 1D44 0026                  		move.b	d4,$26(a6)
000763BC 3D45 000A                  		move.w	d5,$A(a6)
000763C0 1D7C 0080 0009             		move.b	#$80,9(a6)
000763C6 4EBA FF68                  		jsr	sub_7256A(pc)
000763CA 6000 0000                  		bra.w	sub_729B6
000763CE                            ; End of function sub_725CA
000763CE                            
000763CE                            
000763CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000763CE                            
000763CE                            
000763CE                            sub_7260C:				; XREF: sub_71B4C
000763CE 1D6E 0002 0001             		move.b	2(a6),1(a6)
000763D4 41EE 004E                  		lea	$4E(a6),a0
000763D8 7030                       		moveq	#$30,d0
000763DA 7209                       		moveq	#9,d1
000763DC                            
000763DC                            loc_7261A:
000763DC 5210                       		addq.b	#1,(a0)
000763DE D0C0                       		adda.w	d0,a0
000763E0 51C9 FFFA                  		dbf	d1,loc_7261A
000763E4                            
000763E4 4E75                       		rts	
000763E6                            ; End of function sub_7260C
000763E6                            
000763E6                            ; ===========================================================================
000763E6                            ; ---------------------------------------------------------------------------
000763E6                            ; Speed	up music
000763E6                            ; ---------------------------------------------------------------------------
000763E6                            
000763E6                            Sound_E2:				; XREF: Sound_ExIndex
000763E6 4A2E 0027                  		tst.b	$27(a6)
000763EA 6600                       		bne.s	loc_7263E
000763EC 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000763F2 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000763F8 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000763FE 4E75                       		rts	
00076400                            ; ===========================================================================
00076400                            
00076400                            loc_7263E:
00076400 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00076406 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0007640C 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
00076412 4E75                       		rts	
00076414                            ; ===========================================================================
00076414                            ; ---------------------------------------------------------------------------
00076414                            ; Change music back to normal speed
00076414                            ; ---------------------------------------------------------------------------
00076414                            
00076414                            Sound_E3:				; XREF: Sound_ExIndex
00076414 4A2E 0027                  		tst.b	$27(a6)
00076418 6600                       		bne.s	loc_7266A
0007641A 1D6E 0028 0002             		move.b	$28(a6),2(a6)
00076420 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00076426 422E 002A                  		clr.b	$2A(a6)
0007642A 4E75                       		rts	
0007642C                            ; ===========================================================================
0007642C                            
0007642C                            loc_7266A:
0007642C 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
00076432 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00076438 422E 03CA                  		clr.b	$3CA(a6)
0007643C 4E75                       		rts	
0007643E                            
0007643E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007643E                            
0007643E                            
0007643E                            sub_7267C:				; XREF: sub_71B4C
0007643E 4A2E 0025                  		tst.b	$25(a6)
00076442 6700                       		beq.s	loc_72688
00076444 532E 0025                  		subq.b	#1,$25(a6)
00076448 4E75                       		rts	
0007644A                            ; ===========================================================================
0007644A                            
0007644A                            loc_72688:
0007644A 4A2E 0026                  		tst.b	$26(a6)
0007644E 6700                       		beq.s	loc_726D6
00076450 532E 0026                  		subq.b	#1,$26(a6)
00076454 1D7C 0002 0025             		move.b	#2,$25(a6)
0007645A 4BEE 0070                  		lea	$70(a6),a5
0007645E 7E05                       		moveq	#5,d7
00076460                            
00076460                            loc_7269E:
00076460 4A15                       		tst.b	(a5)
00076462 6A00                       		bpl.s	loc_726AA
00076464 532D 0009                  		subq.b	#1,9(a5)
00076468 4EBA 0000                  		jsr	sub_72CB4(pc)
0007646C                            
0007646C                            loc_726AA:
0007646C DAFC 0030                  		adda.w	#$30,a5
00076470 51CF FFEE                  		dbf	d7,loc_7269E
00076474 7E02                       		moveq	#2,d7
00076476                            
00076476                            loc_726B4:
00076476 4A15                       		tst.b	(a5)
00076478 6A00                       		bpl.s	loc_726CC
0007647A 532D 0009                  		subq.b	#1,9(a5)
0007647E 1C2D 0009                  		move.b	9(a5),d6
00076482 0C06 0010                  		cmpi.b	#$10,d6
00076486 6500                       		bcs.s	loc_726C8
00076488 7C0F                       		moveq	#$F,d6
0007648A                            
0007648A                            loc_726C8:
0007648A 4EBA 0000                  		jsr	sub_7296A(pc)
0007648E                            
0007648E                            loc_726CC:
0007648E DAFC 0030                  		adda.w	#$30,a5
00076492 51CF FFE2                  		dbf	d7,loc_726B4
00076496 4E75                       		rts	
00076498                            ; ===========================================================================
00076498                            
00076498                            loc_726D6:
00076498 08AE 0002 0040             		bclr	#2,$40(a6)
0007649E 422E 0024                  		clr.b	$24(a6)
000764A2 4E75                       		rts	
000764A4                            ; End of function sub_7267C
000764A4                            
000764A4                            ; ===========================================================================
000764A4                            
000764A4                            loc_726E2:				; XREF: sub_71CCA
000764A4 0815 0001                  		btst	#1,(a5)
000764A8 6600                       		bne.s	locret_726FC
000764AA 0815 0002                  		btst	#2,(a5)
000764AE 6600                       		bne.s	locret_726FC
000764B0 7028                       		moveq	#$28,d0
000764B2 122D 0001                  		move.b	1(a5),d1
000764B6 0001 00F0                  		ori.b	#-$10,d1
000764BA 6000 0000                  		bra.w	sub_7272E
000764BE                            ; ===========================================================================
000764BE                            
000764BE                            locret_726FC:
000764BE 4E75                       		rts	
000764C0                            
000764C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000764C0                            
000764C0                            
000764C0                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000764C0 0815 0004                  		btst	#4,(a5)
000764C4 6600                       		bne.s	locret_72714
000764C6 0815 0002                  		btst	#2,(a5)
000764CA 6600                       		bne.s	locret_72714
000764CC                            
000764CC                            loc_7270A:				; XREF: Snd_FadeOut2
000764CC 7028                       		moveq	#$28,d0
000764CE 122D 0001                  		move.b	1(a5),d1
000764D2 6000 0000                  		bra.w	sub_7272E
000764D6                            ; ===========================================================================
000764D6                            
000764D6                            locret_72714:
000764D6 4E75                       		rts	
000764D8                            ; End of function sub_726FE
000764D8                            
000764D8                            ; ===========================================================================
000764D8                            
000764D8                            loc_72716:				; XREF: sub_72A5A
000764D8 0815 0002                  		btst	#2,(a5)
000764DC 6600                       		bne.s	locret_72720
000764DE 6000 0000                  		bra.w	sub_72722
000764E2                            ; ===========================================================================
000764E2                            
000764E2                            locret_72720:
000764E2 4E75                       		rts	
000764E4                            
000764E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000764E4                            
000764E4                            
000764E4                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000764E4 082D 0002 0001             		btst	#2,1(a5)
000764EA 6600                       		bne.s	loc_7275A
000764EC D02D 0001                  		add.b	1(a5),d0
000764F0                            ; End of function sub_72722
000764F0                            
000764F0                            
000764F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000764F0                            
000764F0                            
000764F0                            sub_7272E:				; XREF: loc_71E6A
000764F0 1439 00A0 4000             		move.b	($A04000).l,d2
000764F6 0802 0007                  		btst	#7,d2
000764FA 66F4                       		bne.s	sub_7272E
000764FC 13C0 00A0 4000             		move.b	d0,($A04000).l
00076502 4E71                       		nop	
00076504 4E71                       		nop	
00076506 4E71                       		nop	
00076508                            
00076508                            loc_72746:
00076508 1439 00A0 4000             		move.b	($A04000).l,d2
0007650E 0802 0007                  		btst	#7,d2
00076512 66F4                       		bne.s	loc_72746
00076514                            
00076514 13C1 00A0 4001             		move.b	d1,($A04001).l
0007651A 4E75                       		rts	
0007651C                            ; End of function sub_7272E
0007651C                            
0007651C                            ; ===========================================================================
0007651C                            
0007651C                            loc_7275A:				; XREF: sub_72722
0007651C 142D 0001                  		move.b	1(a5),d2
00076520 0882 0002                  		bclr	#2,d2
00076524 D002                       		add.b	d2,d0
00076526                            
00076526                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076526                            
00076526                            
00076526                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00076526 1439 00A0 4000             		move.b	($A04000).l,d2
0007652C 0802 0007                  		btst	#7,d2
00076530 66F4                       		bne.s	sub_72764
00076532 13C0 00A0 4002             		move.b	d0,($A04002).l
00076538 4E71                       		nop	
0007653A 4E71                       		nop	
0007653C 4E71                       		nop	
0007653E                            
0007653E                            loc_7277C:
0007653E 1439 00A0 4000             		move.b	($A04000).l,d2
00076544 0802 0007                  		btst	#7,d2
00076548 66F4                       		bne.s	loc_7277C
0007654A                            
0007654A 13C1 00A0 4003             		move.b	d1,($A04003).l
00076550 4E75                       		rts	
00076552                            ; End of function sub_72764
00076552                            
00076552                            ; ===========================================================================
00076552 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
00076564 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00076576 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
00076586 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
00076596 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000765A6 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000765B6 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000765C6 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000765D6 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000765E6 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000765F6 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00076606 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
00076612                            
00076612                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076612                            
00076612                            
00076612                            sub_72850:				; XREF: sub_71B4C
00076612 532D 000E                  		subq.b	#1,$E(a5)
00076616 6600                       		bne.s	loc_72866
00076618 0895 0004                  		bclr	#4,(a5)
0007661C 4EBA 0000                  		jsr	sub_72878(pc)
00076620 4EBA 0000                  		jsr	sub_728DC(pc)
00076624 6000 0000                  		bra.w	loc_7292E
00076628                            ; ===========================================================================
00076628                            
00076628                            loc_72866:
00076628 4EBA F45A                  		jsr	sub_71D9E(pc)
0007662C 4EBA 0000                  		jsr	sub_72926(pc)
00076630 4EBA F47A                  		jsr	sub_71DC6(pc)
00076634 4EBA 0000                  		jsr	sub_728E2(pc)
00076638 4E75                       		rts	
0007663A                            ; End of function sub_72850
0007663A                            
0007663A                            
0007663A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007663A                            
0007663A                            
0007663A                            sub_72878:				; XREF: sub_72850
0007663A 0895 0001                  		bclr	#1,(a5)
0007663E 286D 0004                  		movea.l	4(a5),a4
00076642                            
00076642                            loc_72880:
00076642 7A00                       		moveq	#0,d5
00076644 1A1C                       		move.b	(a4)+,d5
00076646 0C05 00E0                  		cmpi.b	#$E0,d5
0007664A 6500                       		bcs.s	loc_72890
0007664C 4EBA 0000                  		jsr	sub_72A5A(pc)
00076650 60F0                       		bra.s	loc_72880
00076652                            ; ===========================================================================
00076652                            
00076652                            loc_72890:
00076652 4A05                       		tst.b	d5
00076654 6A00                       		bpl.s	loc_728A4
00076656 4EBA 0000                  		jsr	sub_728AC(pc)
0007665A 1A1C                       		move.b	(a4)+,d5
0007665C 4A05                       		tst.b	d5
0007665E 6A00                       		bpl.s	loc_728A4
00076660 534C                       		subq.w	#1,a4
00076662 6000 F3E2                  		bra.w	sub_71D60
00076666                            ; ===========================================================================
00076666                            
00076666                            loc_728A4:
00076666 4EBA F3BE                  		jsr	sub_71D40(pc)
0007666A 6000 F3DA                  		bra.w	sub_71D60
0007666E                            ; End of function sub_72878
0007666E                            
0007666E                            
0007666E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007666E                            
0007666E                            
0007666E                            sub_728AC:				; XREF: sub_72878
0007666E 0405 0081                  		subi.b	#$81,d5
00076672 6500                       		bcs.s	loc_728CA
00076674 DA2D 0008                  		add.b	8(a5),d5
00076678 0245 007F                  		andi.w	#$7F,d5
0007667C E34D                       		lsl.w	#1,d5
0007667E 41FA 0000                  		lea	word_729CE(pc),a0
00076682 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
00076688 6000 F3BC                  		bra.w	sub_71D60
0007668C                            ; ===========================================================================
0007668C                            
0007668C                            loc_728CA:
0007668C 08D5 0001                  		bset	#1,(a5)
00076690 3B7C FFFF 0010             		move.w	#-1,$10(a5)
00076696 4EBA F3AE                  		jsr	sub_71D60(pc)
0007669A 6000 0000                  		bra.w	sub_729A0
0007669E                            ; End of function sub_728AC
0007669E                            
0007669E                            
0007669E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007669E                            
0007669E                            
0007669E                            sub_728DC:				; XREF: sub_72850
0007669E 3C2D 0010                  		move.w	$10(a5),d6
000766A2 6B00                       		bmi.s	loc_72920
000766A4                            ; End of function sub_728DC
000766A4                            
000766A4                            
000766A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000766A4                            
000766A4                            
000766A4                            sub_728E2:				; XREF: sub_72850
000766A4 102D 001E                  		move.b	$1E(a5),d0
000766A8 4880                       		ext.w	d0
000766AA DC40                       		add.w	d0,d6
000766AC 0815 0002                  		btst	#2,(a5)
000766B0 6600                       		bne.s	locret_7291E
000766B2 0815 0001                  		btst	#1,(a5)
000766B6 6600                       		bne.s	locret_7291E
000766B8 102D 0001                  		move.b	1(a5),d0
000766BC 0C00 00E0                  		cmpi.b	#$E0,d0
000766C0 6600                       		bne.s	loc_72904
000766C2 103C 00C0                  		move.b	#$C0,d0
000766C6                            
000766C6                            loc_72904:
000766C6 3206                       		move.w	d6,d1
000766C8 0201 000F                  		andi.b	#$F,d1
000766CC 8001                       		or.b	d1,d0
000766CE E84E                       		lsr.w	#4,d6
000766D0 0206 003F                  		andi.b	#$3F,d6
000766D4 13C0 00C0 0011             		move.b	d0,($C00011).l
000766DA 13C6 00C0 0011             		move.b	d6,($C00011).l
000766E0                            
000766E0                            locret_7291E:
000766E0 4E75                       		rts	
000766E2                            ; End of function sub_728E2
000766E2                            
000766E2                            ; ===========================================================================
000766E2                            
000766E2                            loc_72920:				; XREF: sub_728DC
000766E2 08D5 0001                  		bset	#1,(a5)
000766E6 4E75                       		rts	
000766E8                            
000766E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000766E8                            
000766E8                            
000766E8                            sub_72926:				; XREF: sub_72850
000766E8 4A2D 000B                  		tst.b	$B(a5)
000766EC 6700 0000                  		beq.w	locret_7298A
000766F0                            
000766F0                            loc_7292E:				; XREF: sub_72850
000766F0 1C2D 0009                  		move.b	9(a5),d6
000766F4 7000                       		moveq	#0,d0
000766F6 102D 000B                  		move.b	$B(a5),d0
000766FA 6700                       		beq.s	sub_7296A
000766FC 2079 0007 565A             		movea.l	(Go_PSGIndex).l,a0
00076702 5340                       		subq.w	#1,d0
00076704 E548                       		lsl.w	#2,d0
00076706 2070 0000                  		movea.l	(a0,d0.w),a0
0007670A 102D 000C                  		move.b	$C(a5),d0
0007670E 1030 0000                  		move.b	(a0,d0.w),d0
00076712 522D 000C                  		addq.b	#1,$C(a5)
00076716 0800 0007                  		btst	#7,d0
0007671A 6700                       		beq.s	loc_72960
0007671C 0C00 0080                  		cmpi.b	#$80,d0
00076720 6700                       		beq.s	loc_7299A
00076722                            
00076722                            loc_72960:
00076722 DC40                       		add.w	d0,d6
00076724 0C06 0010                  		cmpi.b	#$10,d6
00076728 6500                       		bcs.s	sub_7296A
0007672A 7C0F                       		moveq	#$F,d6
0007672C                            ; End of function sub_72926
0007672C                            
0007672C                            
0007672C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007672C                            
0007672C                            
0007672C                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0007672C 0815 0001                  		btst	#1,(a5)
00076730 6600                       		bne.s	locret_7298A
00076732 0815 0002                  		btst	#2,(a5)
00076736 6600                       		bne.s	locret_7298A
00076738 0815 0004                  		btst	#4,(a5)
0007673C 6600                       		bne.s	loc_7298C
0007673E                            
0007673E                            loc_7297C:
0007673E 8C2D 0001                  		or.b	1(a5),d6
00076742 0606 0010                  		addi.b	#$10,d6
00076746 13C6 00C0 0011             		move.b	d6,($C00011).l
0007674C                            
0007674C                            locret_7298A:
0007674C 4E75                       		rts	
0007674E                            ; ===========================================================================
0007674E                            
0007674E                            loc_7298C:
0007674E 4A2D 0013                  		tst.b	$13(a5)
00076752 67EA                       		beq.s	loc_7297C
00076754 4A2D 0012                  		tst.b	$12(a5)
00076758 66E4                       		bne.s	loc_7297C
0007675A 4E75                       		rts	
0007675C                            ; End of function sub_7296A
0007675C                            
0007675C                            ; ===========================================================================
0007675C                            
0007675C                            loc_7299A:				; XREF: sub_72926
0007675C 532D 000C                  		subq.b	#1,$C(a5)
00076760 4E75                       		rts	
00076762                            
00076762                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076762                            
00076762                            
00076762                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
00076762 0815 0002                  		btst	#2,(a5)
00076766 6600                       		bne.s	locret_729B4
00076768                            
00076768                            loc_729A6:				; XREF: Snd_FadeOut2
00076768 102D 0001                  		move.b	1(a5),d0
0007676C 0000 001F                  		ori.b	#$1F,d0
00076770 13C0 00C0 0011             		move.b	d0,($C00011).l
00076776                            
00076776                            locret_729B4:
00076776 4E75                       		rts	
00076778                            ; End of function sub_729A0
00076778                            
00076778                            
00076778                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076778                            
00076778                            
00076778                            sub_729B6:				; XREF: loc_71E7C
00076778 41F9 00C0 0011             		lea	($C00011).l,a0
0007677E 10BC 009F                  		move.b	#$9F,(a0)
00076782 10BC 00BF                  		move.b	#$BF,(a0)
00076786 10BC 00DF                  		move.b	#$DF,(a0)
0007678A 10BC 00FF                  		move.b	#$FF,(a0)
0007678E 4E75                       		rts	
00076790                            ; End of function sub_729B6
00076790                            
00076790                            ; ===========================================================================
00076790 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000767A2 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000767B4 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000767C8 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000767DC 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000767F0 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00076804 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00076818 0011 0000                  		dc.w $11, 0
0007681C                            
0007681C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007681C                            
0007681C                            
0007681C                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0007681C 0445 00E0                  		subi.w	#$E0,d5
00076820 E54D                       		lsl.w	#2,d5
00076822 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00076826                            ; End of function sub_72A5A
00076826                            
00076826                            ; ===========================================================================
00076826                            
00076826                            loc_72A64:
00076826 6000 0000                  		bra.w	loc_72ACC
0007682A                            ; ===========================================================================
0007682A 6000 0000                  		bra.w	loc_72AEC
0007682E                            ; ===========================================================================
0007682E 6000 0000                  		bra.w	loc_72AF2
00076832                            ; ===========================================================================
00076832 6000 0000                  		bra.w	loc_72AF8
00076836                            ; ===========================================================================
00076836 6000 0000                  		bra.w	loc_72B14
0007683A                            ; ===========================================================================
0007683A 6000 0000                  		bra.w	loc_72B9E
0007683E                            ; ===========================================================================
0007683E 6000 0000                  		bra.w	loc_72BA4
00076842                            ; ===========================================================================
00076842 6000 0000                  		bra.w	loc_72BAE
00076846                            ; ===========================================================================
00076846 6000 0000                  		bra.w	loc_72BB4
0007684A                            ; ===========================================================================
0007684A 6000 0000                  		bra.w	loc_72BBE
0007684E                            ; ===========================================================================
0007684E 6000 0000                  		bra.w	loc_72BC6
00076852                            ; ===========================================================================
00076852 6000 0000                  		bra.w	loc_72BD0
00076856                            ; ===========================================================================
00076856 6000 0000                  		bra.w	loc_72BE6
0007685A                            ; ===========================================================================
0007685A 6000 0000                  		bra.w	loc_72BEE
0007685E                            ; ===========================================================================
0007685E 6000 0000                  		bra.w	loc_72BF4
00076862                            ; ===========================================================================
00076862 6000 0000                  		bra.w	loc_72C26
00076866                            ; ===========================================================================
00076866 6000 0000                  		bra.w	loc_72D30
0007686A                            ; ===========================================================================
0007686A 6000 0000                  		bra.w	loc_72D52
0007686E                            ; ===========================================================================
0007686E 6000 0000                  		bra.w	loc_72D58
00076872                            ; ===========================================================================
00076872 6000 0000                  		bra.w	loc_72E06
00076876                            ; ===========================================================================
00076876 6000 0000                  		bra.w	loc_72E20
0007687A                            ; ===========================================================================
0007687A 6000 0000                  		bra.w	loc_72E26
0007687E                            ; ===========================================================================
0007687E 6000 0000                  		bra.w	loc_72E2C
00076882                            ; ===========================================================================
00076882 6000 0000                  		bra.w	loc_72E38
00076886                            ; ===========================================================================
00076886 6000 0000                  		bra.w	loc_72E52
0007688A                            ; ===========================================================================
0007688A 6000 0000                  		bra.w	loc_72E64
0007688E                            ; ===========================================================================
0007688E                            
0007688E                            loc_72ACC:				; XREF: loc_72A64
0007688E 121C                       		move.b	(a4)+,d1
00076890 4A2D 0001                  		tst.b	1(a5)
00076894 6B00                       		bmi.s	locret_72AEA
00076896 102D 000A                  		move.b	$A(a5),d0
0007689A 0200 0037                  		andi.b	#$37,d0
0007689E 8200                       		or.b	d0,d1
000768A0 1B41 000A                  		move.b	d1,$A(a5)
000768A4 103C 00B4                  		move.b	#$B4,d0
000768A8 6000 FC2E                  		bra.w	loc_72716
000768AC                            ; ===========================================================================
000768AC                            
000768AC                            locret_72AEA:
000768AC 4E75                       		rts	
000768AE                            ; ===========================================================================
000768AE                            
000768AE                            loc_72AEC:				; XREF: loc_72A64
000768AE 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000768B2 4E75                       		rts	
000768B4                            ; ===========================================================================
000768B4                            
000768B4                            loc_72AF2:				; XREF: loc_72A64
000768B4 1D5C 0007                  		move.b	(a4)+,7(a6)
000768B8 4E75                       		rts	
000768BA                            ; ===========================================================================
000768BA                            
000768BA                            loc_72AF8:				; XREF: loc_72A64
000768BA 7000                       		moveq	#0,d0
000768BC 102D 000D                  		move.b	$D(a5),d0
000768C0 2875 0000                  		movea.l	(a5,d0.w),a4
000768C4 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000768CC 544C                       		addq.w	#2,a4
000768CE 5800                       		addq.b	#4,d0
000768D0 1B40 000D                  		move.b	d0,$D(a5)
000768D4 4E75                       		rts	
000768D6                            ; ===========================================================================
000768D6                            
000768D6                            loc_72B14:				; XREF: loc_72A64
000768D6 204E                       		movea.l	a6,a0
000768D8 43EE 03A0                  		lea	$3A0(a6),a1
000768DC 303C 0087                  		move.w	#$87,d0
000768E0                            
000768E0                            loc_72B1E:
000768E0 20D9                       		move.l	(a1)+,(a0)+
000768E2 51C8 FFFC                  		dbf	d0,loc_72B1E
000768E6                            
000768E6 08EE 0002 0040             		bset	#2,$40(a6)
000768EC 264D                       		movea.l	a5,a3
000768EE 1C3C 0028                  		move.b	#$28,d6
000768F2 9C2E 0026                  		sub.b	$26(a6),d6
000768F6 7E05                       		moveq	#5,d7
000768F8 4BEE 0070                  		lea	$70(a6),a5
000768FC                            
000768FC                            loc_72B3A:
000768FC 0815 0007                  		btst	#7,(a5)
00076900 6700                       		beq.s	loc_72B5C
00076902 08D5 0001                  		bset	#1,(a5)
00076906 DD2D 0009                  		add.b	d6,9(a5)
0007690A 0815 0002                  		btst	#2,(a5)
0007690E 6600                       		bne.s	loc_72B5C
00076910 7000                       		moveq	#0,d0
00076912 102D 000B                  		move.b	$B(a5),d0
00076916 226E 0018                  		movea.l	$18(a6),a1
0007691A 4EBA 0000                  		jsr	sub_72C4E(pc)
0007691E                            
0007691E                            loc_72B5C:
0007691E DAFC 0030                  		adda.w	#$30,a5
00076922 51CF FFD8                  		dbf	d7,loc_72B3A
00076926                            
00076926 7E02                       		moveq	#2,d7
00076928                            
00076928                            loc_72B66:
00076928 0815 0007                  		btst	#7,(a5)
0007692C 6700                       		beq.s	loc_72B78
0007692E 08D5 0001                  		bset	#1,(a5)
00076932 4EBA FE2E                  		jsr	sub_729A0(pc)
00076936 DD2D 0009                  		add.b	d6,9(a5)
0007693A                            
0007693A                            loc_72B78:
0007693A DAFC 0030                  		adda.w	#$30,a5
0007693E 51CF FFE8                  		dbf	d7,loc_72B66
00076942 2A4B                       		movea.l	a3,a5
00076944 1D7C 0080 0024             		move.b	#$80,$24(a6)
0007694A 1D7C 0028 0026             		move.b	#$28,$26(a6)
00076950 422E 0027                  		clr.b	$27(a6)
00076954 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0007695C 504F                       		addq.w	#8,sp
0007695E 4E75                       		rts	
00076960                            ; ===========================================================================
00076960                            
00076960                            loc_72B9E:				; XREF: loc_72A64
00076960 1B5C 0002                  		move.b	(a4)+,2(a5)
00076964 4E75                       		rts	
00076966                            ; ===========================================================================
00076966                            
00076966                            loc_72BA4:				; XREF: loc_72A64
00076966 101C                       		move.b	(a4)+,d0
00076968 D12D 0009                  		add.b	d0,9(a5)
0007696C 6000 0000                  		bra.w	sub_72CB4
00076970                            ; ===========================================================================
00076970                            
00076970                            loc_72BAE:				; XREF: loc_72A64
00076970 08D5 0004                  		bset	#4,(a5)
00076974 4E75                       		rts	
00076976                            ; ===========================================================================
00076976                            
00076976                            loc_72BB4:				; XREF: loc_72A64
00076976 1B54 0012                  		move.b	(a4),$12(a5)
0007697A 1B5C 0013                  		move.b	(a4)+,$13(a5)
0007697E 4E75                       		rts	
00076980                            ; ===========================================================================
00076980                            
00076980                            loc_72BBE:				; XREF: loc_72A64
00076980 101C                       		move.b	(a4)+,d0
00076982 D12D 0008                  		add.b	d0,8(a5)
00076986 4E75                       		rts	
00076988                            ; ===========================================================================
00076988                            
00076988                            loc_72BC6:				; XREF: loc_72A64
00076988 1D54 0002                  		move.b	(a4),2(a6)
0007698C 1D5C 0001                  		move.b	(a4)+,1(a6)
00076990 4E75                       		rts	
00076992                            ; ===========================================================================
00076992                            
00076992                            loc_72BD0:				; XREF: loc_72A64
00076992 41EE 0040                  		lea	$40(a6),a0
00076996 101C                       		move.b	(a4)+,d0
00076998 7230                       		moveq	#$30,d1
0007699A 7409                       		moveq	#9,d2
0007699C                            
0007699C                            loc_72BDA:
0007699C 1140 0002                  		move.b	d0,2(a0)
000769A0 D0C1                       		adda.w	d1,a0
000769A2 51CA FFF8                  		dbf	d2,loc_72BDA
000769A6                            
000769A6 4E75                       		rts	
000769A8                            ; ===========================================================================
000769A8                            
000769A8                            loc_72BE6:				; XREF: loc_72A64
000769A8 101C                       		move.b	(a4)+,d0
000769AA D12D 0009                  		add.b	d0,9(a5)
000769AE 4E75                       		rts	
000769B0                            ; ===========================================================================
000769B0                            
000769B0                            loc_72BEE:				; XREF: loc_72A64
000769B0 422E 002C                  		clr.b	$2C(a6)
000769B4 4E75                       		rts	
000769B6                            ; ===========================================================================
000769B6                            
000769B6                            loc_72BF4:				; XREF: loc_72A64
000769B6 0895 0007                  		bclr	#7,(a5)
000769BA 0895 0004                  		bclr	#4,(a5)
000769BE 4EBA FB00                  		jsr	sub_726FE(pc)
000769C2 4A2E 0250                  		tst.b	$250(a6)
000769C6 6B00                       		bmi.s	loc_72C22
000769C8 264D                       		movea.l	a5,a3
000769CA 4BEE 0100                  		lea	$100(a6),a5
000769CE 226E 0018                  		movea.l	$18(a6),a1
000769D2 0895 0002                  		bclr	#2,(a5)
000769D6 08D5 0001                  		bset	#1,(a5)
000769DA 102D 000B                  		move.b	$B(a5),d0
000769DE 4EBA 0000                  		jsr	sub_72C4E(pc)
000769E2 2A4B                       		movea.l	a3,a5
000769E4                            
000769E4                            loc_72C22:
000769E4 504F                       		addq.w	#8,sp
000769E6 4E75                       		rts	
000769E8                            ; ===========================================================================
000769E8                            
000769E8                            loc_72C26:				; XREF: loc_72A64
000769E8 7000                       		moveq	#0,d0
000769EA 101C                       		move.b	(a4)+,d0
000769EC 1B40 000B                  		move.b	d0,$B(a5)
000769F0 0815 0002                  		btst	#2,(a5)
000769F4 6600 0000                  		bne.w	locret_72CAA
000769F8 226E 0018                  		movea.l	$18(a6),a1
000769FC 4A2E 000E                  		tst.b	$E(a6)
00076A00 6700                       		beq.s	sub_72C4E
00076A02 226D 0020                  		movea.l	$20(a5),a1
00076A06 4A2E 000E                  		tst.b	$E(a6)
00076A0A 6B00                       		bmi.s	sub_72C4E
00076A0C 226E 0020                  		movea.l	$20(a6),a1
00076A10                            
00076A10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076A10                            
00076A10                            
00076A10                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00076A10 5340                       		subq.w	#1,d0
00076A12 6B00                       		bmi.s	loc_72C5C
00076A14 323C 0019                  		move.w	#$19,d1
00076A18                            
00076A18                            loc_72C56:
00076A18 D2C1                       		adda.w	d1,a1
00076A1A 51C8 FFFC                  		dbf	d0,loc_72C56
00076A1E                            
00076A1E                            loc_72C5C:
00076A1E 1219                       		move.b	(a1)+,d1
00076A20 1B41 001F                  		move.b	d1,$1F(a5)
00076A24 1801                       		move.b	d1,d4
00076A26 103C 00B0                  		move.b	#$B0,d0
00076A2A 4EBA FAB8                  		jsr	sub_72722(pc)
00076A2E 45FA 0000                  		lea	byte_72D18(pc),a2
00076A32 7613                       		moveq	#$13,d3
00076A34                            
00076A34                            loc_72C72:
00076A34 101A                       		move.b	(a2)+,d0
00076A36 1219                       		move.b	(a1)+,d1
00076A38 4EBA FAAA                  		jsr	sub_72722(pc)
00076A3C 51CB FFF6                  		dbf	d3,loc_72C72
00076A40 7A03                       		moveq	#3,d5
00076A42 0244 0007                  		andi.w	#7,d4
00076A46 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00076A4A 162D 0009                  		move.b	9(a5),d3
00076A4E                            
00076A4E                            loc_72C8C:
00076A4E 101A                       		move.b	(a2)+,d0
00076A50 1219                       		move.b	(a1)+,d1
00076A52 E20C                       		lsr.b	#1,d4
00076A54 6400                       		bcc.s	loc_72C96
00076A56 D203                       		add.b	d3,d1
00076A58                            
00076A58                            loc_72C96:
00076A58 4EBA FA8A                  		jsr	sub_72722(pc)
00076A5C 51CD FFF0                  		dbf	d5,loc_72C8C
00076A60 103C 00B4                  		move.b	#$B4,d0
00076A64 122D 000A                  		move.b	$A(a5),d1
00076A68 4EBA FA7A                  		jsr	sub_72722(pc)
00076A6C                            
00076A6C                            locret_72CAA:
00076A6C 4E75                       		rts	
00076A6E                            ; End of function sub_72C4E
00076A6E                            
00076A6E                            ; ===========================================================================
00076A6E 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00076A76                            
00076A76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00076A76                            
00076A76                            
00076A76                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00076A76 0815 0002                  		btst	#2,(a5)
00076A7A 6600                       		bne.s	locret_72D16
00076A7C 7000                       		moveq	#0,d0
00076A7E 102D 000B                  		move.b	$B(a5),d0
00076A82 226E 0018                  		movea.l	$18(a6),a1
00076A86 4A2E 000E                  		tst.b	$E(a6)
00076A8A 6700                       		beq.s	loc_72CD8
00076A8C 226E 0020                  		movea.l	$20(a6),a1
00076A90 4A2E 000E                  		tst.b	$E(a6)
00076A94 6B00                       		bmi.s	loc_72CD8
00076A96 226E 0020                  		movea.l	$20(a6),a1
00076A9A                            
00076A9A                            loc_72CD8:
00076A9A 5340                       		subq.w	#1,d0
00076A9C 6B00                       		bmi.s	loc_72CE6
00076A9E 323C 0019                  		move.w	#$19,d1
00076AA2                            
00076AA2                            loc_72CE0:
00076AA2 D2C1                       		adda.w	d1,a1
00076AA4 51C8 FFFC                  		dbf	d0,loc_72CE0
00076AA8                            
00076AA8                            loc_72CE6:
00076AA8 D2FC 0015                  		adda.w	#$15,a1
00076AAC 45FA 0000                  		lea	byte_72D2C(pc),a2
00076AB0 102D 001F                  		move.b	$1F(a5),d0
00076AB4 0240 0007                  		andi.w	#7,d0
00076AB8 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00076ABC 162D 0009                  		move.b	9(a5),d3
00076AC0 6B00                       		bmi.s	locret_72D16
00076AC2 7A03                       		moveq	#3,d5
00076AC4                            
00076AC4                            loc_72D02:
00076AC4 101A                       		move.b	(a2)+,d0
00076AC6 1219                       		move.b	(a1)+,d1
00076AC8 E20C                       		lsr.b	#1,d4
00076ACA 6400                       		bcc.s	loc_72D12
00076ACC D203                       		add.b	d3,d1
00076ACE 6500                       		bcs.s	loc_72D12
00076AD0 4EBA FA12                  		jsr	sub_72722(pc)
00076AD4                            
00076AD4                            loc_72D12:
00076AD4 51CD FFEE                  		dbf	d5,loc_72D02
00076AD8                            
00076AD8                            locret_72D16:
00076AD8 4E75                       		rts	
00076ADA                            ; End of function sub_72CB4
00076ADA                            
00076ADA                            ; ===========================================================================
00076ADA 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00076AE4 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00076AEE 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00076AF2                            ; ===========================================================================
00076AF2                            
00076AF2                            loc_72D30:				; XREF: loc_72A64
00076AF2 08D5 0003                  		bset	#3,(a5)
00076AF6 2B4C 0014                  		move.l	a4,$14(a5)
00076AFA 1B5C 0018                  		move.b	(a4)+,$18(a5)
00076AFE 1B5C 0019                  		move.b	(a4)+,$19(a5)
00076B02 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00076B06 101C                       		move.b	(a4)+,d0
00076B08 E208                       		lsr.b	#1,d0
00076B0A 1B40 001B                  		move.b	d0,$1B(a5)
00076B0E 426D 001C                  		clr.w	$1C(a5)
00076B12 4E75                       		rts	
00076B14                            ; ===========================================================================
00076B14                            
00076B14                            loc_72D52:				; XREF: loc_72A64
00076B14 08D5 0003                  		bset	#3,(a5)
00076B18 4E75                       		rts	
00076B1A                            ; ===========================================================================
00076B1A                            
00076B1A                            loc_72D58:				; XREF: loc_72A64
00076B1A 0895 0007                  		bclr	#7,(a5)
00076B1E 0895 0004                  		bclr	#4,(a5)
00076B22 4A2D 0001                  		tst.b	1(a5)
00076B26 6B00                       		bmi.s	loc_72D74
00076B28 4A2E 0008                  		tst.b	8(a6)
00076B2C 6B00 0000                  		bmi.w	loc_72E02
00076B30 4EBA F98E                  		jsr	sub_726FE(pc)
00076B34 6000                       		bra.s	loc_72D78
00076B36                            ; ===========================================================================
00076B36                            
00076B36                            loc_72D74:
00076B36 4EBA FC2A                  		jsr	sub_729A0(pc)
00076B3A                            
00076B3A                            loc_72D78:
00076B3A 4A2E 000E                  		tst.b	$E(a6)
00076B3E 6A00 0000                  		bpl.w	loc_72E02
00076B42 4216                       		clr.b	0(a6)
00076B44 7000                       		moveq	#0,d0
00076B46 102D 0001                  		move.b	1(a5),d0
00076B4A 6B00                       		bmi.s	loc_72DCC
00076B4C 41FA F546                  		lea	dword_722CC(pc),a0
00076B50 264D                       		movea.l	a5,a3
00076B52 0C00 0004                  		cmpi.b	#4,d0
00076B56 6600                       		bne.s	loc_72DA8
00076B58 4A2E 0340                  		tst.b	$340(a6)
00076B5C 6A00                       		bpl.s	loc_72DA8
00076B5E 4BEE 0340                  		lea	$340(a6),a5
00076B62 226E 0020                  		movea.l	$20(a6),a1
00076B66 6000                       		bra.s	loc_72DB8
00076B68                            ; ===========================================================================
00076B68                            
00076B68                            loc_72DA8:
00076B68 5500                       		subq.b	#2,d0
00076B6A E508                       		lsl.b	#2,d0
00076B6C 2A70 0000                  		movea.l	(a0,d0.w),a5
00076B70 4A15                       		tst.b	(a5)
00076B72 6A00                       		bpl.s	loc_72DC8
00076B74 226E 0018                  		movea.l	$18(a6),a1
00076B78                            
00076B78                            loc_72DB8:
00076B78 0895 0002                  		bclr	#2,(a5)
00076B7C 08D5 0001                  		bset	#1,(a5)
00076B80 102D 000B                  		move.b	$B(a5),d0
00076B84 4EBA FE8A                  		jsr	sub_72C4E(pc)
00076B88                            
00076B88                            loc_72DC8:
00076B88 2A4B                       		movea.l	a3,a5
00076B8A 6000                       		bra.s	loc_72E02
00076B8C                            ; ===========================================================================
00076B8C                            
00076B8C                            loc_72DCC:
00076B8C 41EE 0370                  		lea	$370(a6),a0
00076B90 4A10                       		tst.b	(a0)
00076B92 6A00                       		bpl.s	loc_72DE0
00076B94 0C00 00E0                  		cmpi.b	#$E0,d0
00076B98 6700                       		beq.s	loc_72DEA
00076B9A 0C00 00C0                  		cmpi.b	#$C0,d0
00076B9E 6700                       		beq.s	loc_72DEA
00076BA0                            
00076BA0                            loc_72DE0:
00076BA0 41FA F4F2                  		lea	dword_722CC(pc),a0
00076BA4 E608                       		lsr.b	#3,d0
00076BA6 2070 0000                  		movea.l	(a0,d0.w),a0
00076BAA                            
00076BAA                            loc_72DEA:
00076BAA 0890 0002                  		bclr	#2,(a0)
00076BAE 08D0 0001                  		bset	#1,(a0)
00076BB2 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00076BB8 6600                       		bne.s	loc_72E02
00076BBA 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00076BC2                            
00076BC2                            loc_72E02:
00076BC2 504F                       		addq.w	#8,sp
00076BC4 4E75                       		rts	
00076BC6                            ; ===========================================================================
00076BC6                            
00076BC6                            loc_72E06:				; XREF: loc_72A64
00076BC6 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00076BCC 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00076BD0 0815 0002                  		btst	#2,(a5)
00076BD4 6600                       		bne.s	locret_72E1E
00076BD6 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00076BDE                            
00076BDE                            locret_72E1E:
00076BDE 4E75                       		rts	
00076BE0                            ; ===========================================================================
00076BE0                            
00076BE0                            loc_72E20:				; XREF: loc_72A64
00076BE0 0895 0003                  		bclr	#3,(a5)
00076BE4 4E75                       		rts	
00076BE6                            ; ===========================================================================
00076BE6                            
00076BE6                            loc_72E26:				; XREF: loc_72A64
00076BE6 1B5C 000B                  		move.b	(a4)+,$B(a5)
00076BEA 4E75                       		rts	
00076BEC                            ; ===========================================================================
00076BEC                            
00076BEC                            loc_72E2C:				; XREF: loc_72A64
00076BEC 101C                       		move.b	(a4)+,d0
00076BEE E148                       		lsl.w	#8,d0
00076BF0 101C                       		move.b	(a4)+,d0
00076BF2 D8C0                       		adda.w	d0,a4
00076BF4 534C                       		subq.w	#1,a4
00076BF6 4E75                       		rts	
00076BF8                            ; ===========================================================================
00076BF8                            
00076BF8                            loc_72E38:				; XREF: loc_72A64
00076BF8 7000                       		moveq	#0,d0
00076BFA 101C                       		move.b	(a4)+,d0
00076BFC 121C                       		move.b	(a4)+,d1
00076BFE 4A35 0024                  		tst.b	$24(a5,d0.w)
00076C02 6600                       		bne.s	loc_72E48
00076C04 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00076C08                            
00076C08                            loc_72E48:
00076C08 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00076C0C 66DE                       		bne.s	loc_72E2C
00076C0E 544C                       		addq.w	#2,a4
00076C10 4E75                       		rts	
00076C12                            ; ===========================================================================
00076C12                            
00076C12                            loc_72E52:				; XREF: loc_72A64
00076C12 7000                       		moveq	#0,d0
00076C14 102D 000D                  		move.b	$D(a5),d0
00076C18 5900                       		subq.b	#4,d0
00076C1A 2B8C 0000                  		move.l	a4,(a5,d0.w)
00076C1E 1B40 000D                  		move.b	d0,$D(a5)
00076C22 60C8                       		bra.s	loc_72E2C
00076C24                            ; ===========================================================================
00076C24                            
00076C24                            loc_72E64:				; XREF: loc_72A64
00076C24 103C 0088                  		move.b	#$88,d0
00076C28 123C 000F                  		move.b	#$F,d1
00076C2C 4EBA F8C2                  		jsr	sub_7272E(pc)
00076C30 103C 008C                  		move.b	#$8C,d0
00076C34 123C 000F                  		move.b	#$F,d1
00076C38 6000 F8B6                  		bra.w	sub_7272E
00076C3C                            ; ===========================================================================
00076C3C                            Kos_Z80:	incbin	sound\z80_1.bin
00076CEC 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00076CEE 21                         		dc.b $21
00076CEF 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00076CF1                            		incbin	sound\z80_2.bin
0007839C                            		even
0007839C                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
0007EB9C                            		even
0007EB9C                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
0008843A                            		even
0008843A                            Music83:	incbin	sound\music83.bin ; Marble Act 1
0008C05A 00                         		even
0008C05A                            Music84:	include	sound\music84.asm ; Star Light Act 1
0008C05A                            music84_Header:
0008C05A =00000001                  smpsHeaderStartSong = 1
0008C05A 0000                       	smpsHeaderVoice     music84_Voices
0008C05C 0603                       	smpsHeaderChan      $06, $03
0008C05E 0205                       	smpsHeaderTempo     $02, $05
0008C060                            
0008C064 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
0008C068 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
0008C06C 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
0008C070 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
0008C074 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
0008C078 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
0008C07E 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
0008C084 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
0008C08A                            
0008C08A                            ; FM1 Data
0008C08A                            music84_FM1:
0008C08A E0C0                       	smpsPan             panCenter, $00
0008C08E E107                       	smpsAlterNote       $07
0008C090 9B03 8007                  	dc.b	nD2, $03, nRst, $07
0008C094 E106                       	smpsAlterNote       $06
0008C096 9903 800B                  	dc.b	nC2, $03, nRst, $0B
0008C09A E10B                       	smpsAlterNote       $0B
0008C09C 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
0008C0A2 E10C                       	smpsAlterNote       $0C
0008C0A4 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C0A7 E10B                       	smpsAlterNote       $0B
0008C0A9 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C0AC E109                       	smpsAlterNote       $09
0008C0AE E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
0008C0B3 E108                       	smpsAlterNote       $08
0008C0B5 8001                       	dc.b	nRst, $01
0008C0B7 E10B                       	smpsAlterNote       $0B
0008C0B9 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
0008C0BF E107                       	smpsAlterNote       $07
0008C0C1 9B03                       	dc.b	nD2, $03
0008C0C3                            
0008C0C3                            music84_Jump04:
0008C0C3 E107                       	smpsAlterNote       $07
0008C0C5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C0C9 E10B                       	smpsAlterNote       $0B
0008C0CB A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C0CF E107                       	smpsAlterNote       $07
0008C0D1 9B03                       	dc.b	nD2, $03
0008C0D3 E11A                       	smpsAlterNote       $1A
0008C0D5 A301                       	dc.b	nBb2, $01
0008C0D7 E1F2                       	smpsAlterNote       $F2
0008C0D9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C0DC E1FF                       	smpsAlterNote       $FF
0008C0DE E701                       	dc.b	smpsNoAttack, $01
0008C0E0 E111                       	smpsAlterNote       $11
0008C0E2 E701                       	dc.b	smpsNoAttack, $01
0008C0E4 E106                       	smpsAlterNote       $06
0008C0E6 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C0E9 E107                       	smpsAlterNote       $07
0008C0EB 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C0EF E108                       	smpsAlterNote       $08
0008C0F1 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
0008C0F9 E109                       	smpsAlterNote       $09
0008C0FB A003                       	dc.b	nG2, $03
0008C0FD E10C                       	smpsAlterNote       $0C
0008C0FF A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C103 E1FD                       	smpsAlterNote       $FD
0008C105 A401                       	dc.b	nB2, $01
0008C107 E109                       	smpsAlterNote       $09
0008C109 E701                       	dc.b	smpsNoAttack, $01
0008C10B E106                       	smpsAlterNote       $06
0008C10D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C110 E109                       	smpsAlterNote       $09
0008C112 A007                       	dc.b	nG2, $07
0008C114 E108                       	smpsAlterNote       $08
0008C116 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C11A E107                       	smpsAlterNote       $07
0008C11C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C122 E10B                       	smpsAlterNote       $0B
0008C124 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C128 E107                       	smpsAlterNote       $07
0008C12A 9B03                       	dc.b	nD2, $03
0008C12C E11A                       	smpsAlterNote       $1A
0008C12E A301                       	dc.b	nBb2, $01
0008C130 E1F9                       	smpsAlterNote       $F9
0008C132 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C135 E107                       	smpsAlterNote       $07
0008C137 E701                       	dc.b	smpsNoAttack, $01
0008C139 E111                       	smpsAlterNote       $11
0008C13B E701                       	dc.b	smpsNoAttack, $01
0008C13D E106                       	smpsAlterNote       $06
0008C13F E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008C144 E107                       	smpsAlterNote       $07
0008C146 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C14E E1EC                       	smpsAlterNote       $EC
0008C150 A101                       	dc.b	nAb2, $01
0008C152 E108                       	smpsAlterNote       $08
0008C154 E701                       	dc.b	smpsNoAttack, $01
0008C156 E116                       	smpsAlterNote       $16
0008C158 E701                       	dc.b	smpsNoAttack, $01
0008C15A E1F5                       	smpsAlterNote       $F5
0008C15C E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C15F E10B                       	smpsAlterNote       $0B
0008C161 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C165 E107                       	smpsAlterNote       $07
0008C167 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C16D E109                       	smpsAlterNote       $09
0008C16F 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C173 E10B                       	smpsAlterNote       $0B
0008C175 9603                       	dc.b	nA1, $03
0008C177 E107                       	smpsAlterNote       $07
0008C179 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C17F E10B                       	smpsAlterNote       $0B
0008C181 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C185 E107                       	smpsAlterNote       $07
0008C187 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C18B E11A                       	smpsAlterNote       $1A
0008C18D A301                       	dc.b	nBb2, $01
0008C18F E1F9                       	smpsAlterNote       $F9
0008C191 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C194 E107                       	smpsAlterNote       $07
0008C196 E701                       	dc.b	smpsNoAttack, $01
0008C198 E1FB                       	smpsAlterNote       $FB
0008C19A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C19D E106                       	smpsAlterNote       $06
0008C19F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C1A3 E107                       	smpsAlterNote       $07
0008C1A5 9B03                       	dc.b	nD2, $03
0008C1A7 E108                       	smpsAlterNote       $08
0008C1A9 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C1AF E109                       	smpsAlterNote       $09
0008C1B1 A002 8001                  	dc.b	nG2, $02, nRst, $01
0008C1B5 E10C                       	smpsAlterNote       $0C
0008C1B7 A303                       	dc.b	nBb2, $03
0008C1B9 E1F0                       	smpsAlterNote       $F0
0008C1BB A401                       	dc.b	nB2, $01
0008C1BD E1FD                       	smpsAlterNote       $FD
0008C1BF E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
0008C1C4 E106                       	smpsAlterNote       $06
0008C1C6 8001                       	dc.b	nRst, $01
0008C1C8 E109                       	smpsAlterNote       $09
0008C1CA A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C1CE E108                       	smpsAlterNote       $08
0008C1D0 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
0008C1D4 E107                       	smpsAlterNote       $07
0008C1D6 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C1DC E10B                       	smpsAlterNote       $0B
0008C1DE A203                       	dc.b	nA2, $03
0008C1E0 E107                       	smpsAlterNote       $07
0008C1E2 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C1E6 E1F2                       	smpsAlterNote       $F2
0008C1E8 A401                       	dc.b	nB2, $01
0008C1EA E1FF                       	smpsAlterNote       $FF
0008C1EC E701                       	dc.b	smpsNoAttack, $01
0008C1EE E107                       	smpsAlterNote       $07
0008C1F0 E701                       	dc.b	smpsNoAttack, $01
0008C1F2 E1FB                       	smpsAlterNote       $FB
0008C1F4 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C1F7 E106                       	smpsAlterNote       $06
0008C1F9 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C1FD E107                       	smpsAlterNote       $07
0008C1FF 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
0008C209 E117                       	smpsAlterNote       $17
0008C20B A001                       	dc.b	nG2, $01
0008C20D E1FA                       	smpsAlterNote       $FA
0008C20F E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C212 E108                       	smpsAlterNote       $08
0008C214 E701                       	dc.b	smpsNoAttack, $01
0008C216 E1E7                       	smpsAlterNote       $E7
0008C218 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C21B E103                       	smpsAlterNote       $03
0008C21D E701                       	dc.b	smpsNoAttack, $01
0008C21F E10B                       	smpsAlterNote       $0B
0008C221 E702                       	dc.b	smpsNoAttack, $02
0008C223 E107                       	smpsAlterNote       $07
0008C225 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
0008C22D E106                       	smpsAlterNote       $06
0008C22F 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
0008C235 E10C                       	smpsAlterNote       $0C
0008C237 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
0008C23D E109                       	smpsAlterNote       $09
0008C23F 9E03                       	dc.b	nF2, $03
0008C241 E10C                       	smpsAlterNote       $0C
0008C243 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C247 E1EA                       	smpsAlterNote       $EA
0008C249 A201                       	dc.b	nA2, $01
0008C24B E106                       	smpsAlterNote       $06
0008C24D E701                       	dc.b	smpsNoAttack, $01
0008C24F E1E2                       	smpsAlterNote       $E2
0008C251 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C254 E1F0                       	smpsAlterNote       $F0
0008C256 E701                       	dc.b	smpsNoAttack, $01
0008C258 E10C                       	smpsAlterNote       $0C
0008C25A E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C266 E116                       	smpsAlterNote       $16
0008C268 9C01                       	dc.b	nEb2, $01
0008C26A E105                       	smpsAlterNote       $05
0008C26C E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C26F E1F1                       	smpsAlterNote       $F1
0008C271 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C274 E1FF                       	smpsAlterNote       $FF
0008C276 E701                       	dc.b	smpsNoAttack, $01
0008C278 E109                       	smpsAlterNote       $09
0008C27A E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C27E E10C                       	smpsAlterNote       $0C
0008C280 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C28C 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
0008C292 E109                       	smpsAlterNote       $09
0008C294 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C298 E10C                       	smpsAlterNote       $0C
0008C29A 9703                       	dc.b	nBb1, $03
0008C29C E11A                       	smpsAlterNote       $1A
0008C29E A101                       	dc.b	nAb2, $01
0008C2A0 E1FB                       	smpsAlterNote       $FB
0008C2A2 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C2A5 E10A                       	smpsAlterNote       $0A
0008C2A7 E701                       	dc.b	smpsNoAttack, $01
0008C2A9 E1E8                       	smpsAlterNote       $E8
0008C2AB E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C2AE E106                       	smpsAlterNote       $06
0008C2B0 E701                       	dc.b	smpsNoAttack, $01
0008C2B2 E10C                       	smpsAlterNote       $0C
0008C2B4 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
0008C2C0 E1F9                       	smpsAlterNote       $F9
0008C2C2 9D01                       	dc.b	nE2, $01
0008C2C4 E108                       	smpsAlterNote       $08
0008C2C6 E701                       	dc.b	smpsNoAttack, $01
0008C2C8 E1F6                       	smpsAlterNote       $F6
0008C2CA E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C2CD E109                       	smpsAlterNote       $09
0008C2CF E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
0008C2D3 E10C                       	smpsAlterNote       $0C
0008C2D5 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
0008C2E1 E108                       	smpsAlterNote       $08
0008C2E3 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008C2E9 E106                       	smpsAlterNote       $06
0008C2EB A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C2EF E108                       	smpsAlterNote       $08
0008C2F1 9D03                       	dc.b	nE2, $03
0008C2F3 E1EB                       	smpsAlterNote       $EB
0008C2F5 A801                       	dc.b	nEb3, $01
0008C2F7 E109                       	smpsAlterNote       $09
0008C2F9 E701                       	dc.b	smpsNoAttack, $01
0008C2FB E1FA                       	smpsAlterNote       $FA
0008C2FD E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C300 E108                       	smpsAlterNote       $08
0008C302 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
0008C30E E1E9                       	smpsAlterNote       $E9
0008C310 A301                       	dc.b	nBb2, $01
0008C312 E107                       	smpsAlterNote       $07
0008C314 E701                       	dc.b	smpsNoAttack, $01
0008C316 E1F0                       	smpsAlterNote       $F0
0008C318 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C31B E1F7                       	smpsAlterNote       $F7
0008C31D E701                       	dc.b	smpsNoAttack, $01
0008C31F E107                       	smpsAlterNote       $07
0008C321 E701                       	dc.b	smpsNoAttack, $01
0008C323 E106                       	smpsAlterNote       $06
0008C325 E701                       	dc.b	smpsNoAttack, $01
0008C327 E108                       	smpsAlterNote       $08
0008C329 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
0008C32F E106                       	smpsAlterNote       $06
0008C331 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C335 E108                       	smpsAlterNote       $08
0008C337 9D03                       	dc.b	nE2, $03
0008C339 E10B                       	smpsAlterNote       $0B
0008C33B 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
0008C343 E108                       	smpsAlterNote       $08
0008C345 9D03                       	dc.b	nE2, $03
0008C347 E10B                       	smpsAlterNote       $0B
0008C349 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C34D E113                       	smpsAlterNote       $13
0008C34F A001                       	dc.b	nG2, $01
0008C351 E118                       	smpsAlterNote       $18
0008C353 E701                       	dc.b	smpsNoAttack, $01
0008C355 E1E9                       	smpsAlterNote       $E9
0008C357 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C35A E1F3                       	smpsAlterNote       $F3
0008C35C E701                       	dc.b	smpsNoAttack, $01
0008C35E E1FD                       	smpsAlterNote       $FD
0008C360 E701                       	dc.b	smpsNoAttack, $01
0008C362 E102                       	smpsAlterNote       $02
0008C364 E701                       	dc.b	smpsNoAttack, $01
0008C366 E107                       	smpsAlterNote       $07
0008C368 8001                       	dc.b	nRst, $01
0008C36A E10B                       	smpsAlterNote       $0B
0008C36C 9603                       	dc.b	nA1, $03
0008C36E E10C                       	smpsAlterNote       $0C
0008C370 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
0008C376 E10B                       	smpsAlterNote       $0B
0008C378 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C384 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
0008C38A E107                       	smpsAlterNote       $07
0008C38C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C392 E10B                       	smpsAlterNote       $0B
0008C394 A203                       	dc.b	nA2, $03
0008C396 E107                       	smpsAlterNote       $07
0008C398 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C39C E1F2                       	smpsAlterNote       $F2
0008C39E A401                       	dc.b	nB2, $01
0008C3A0 E1FF                       	smpsAlterNote       $FF
0008C3A2 E701                       	dc.b	smpsNoAttack, $01
0008C3A4 E107                       	smpsAlterNote       $07
0008C3A6 E701                       	dc.b	smpsNoAttack, $01
0008C3A8 E1FB                       	smpsAlterNote       $FB
0008C3AA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C3AD E106                       	smpsAlterNote       $06
0008C3AF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C3B3 E107                       	smpsAlterNote       $07
0008C3B5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C3B9 E108                       	smpsAlterNote       $08
0008C3BB 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C3C1 E109                       	smpsAlterNote       $09
0008C3C3 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C3C7 E10C                       	smpsAlterNote       $0C
0008C3C9 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008C3CD E1F0                       	smpsAlterNote       $F0
0008C3CF A401                       	dc.b	nB2, $01
0008C3D1 E109                       	smpsAlterNote       $09
0008C3D3 E701                       	dc.b	smpsNoAttack, $01
0008C3D5 E106                       	smpsAlterNote       $06
0008C3D7 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C3DA E109                       	smpsAlterNote       $09
0008C3DC A007                       	dc.b	nG2, $07
0008C3DE E108                       	smpsAlterNote       $08
0008C3E0 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C3E4 E107                       	smpsAlterNote       $07
0008C3E6 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C3EC E10B                       	smpsAlterNote       $0B
0008C3EE A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C3F2 E107                       	smpsAlterNote       $07
0008C3F4 9B03                       	dc.b	nD2, $03
0008C3F6 E11A                       	smpsAlterNote       $1A
0008C3F8 A301                       	dc.b	nBb2, $01
0008C3FA E1F2                       	smpsAlterNote       $F2
0008C3FC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C3FF E1FF                       	smpsAlterNote       $FF
0008C401 E701                       	dc.b	smpsNoAttack, $01
0008C403 E111                       	smpsAlterNote       $11
0008C405 E701                       	dc.b	smpsNoAttack, $01
0008C407 E106                       	smpsAlterNote       $06
0008C409 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C40C E107                       	smpsAlterNote       $07
0008C40E 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C41A E117                       	smpsAlterNote       $17
0008C41C A001                       	dc.b	nG2, $01
0008C41E E1FA                       	smpsAlterNote       $FA
0008C420 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C423 E116                       	smpsAlterNote       $16
0008C425 E701                       	dc.b	smpsNoAttack, $01
0008C427 E1F5                       	smpsAlterNote       $F5
0008C429 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C42C E103                       	smpsAlterNote       $03
0008C42E E701                       	dc.b	smpsNoAttack, $01
0008C430 E10B                       	smpsAlterNote       $0B
0008C432 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C436 E107                       	smpsAlterNote       $07
0008C438 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C43E E109                       	smpsAlterNote       $09
0008C440 9E03                       	dc.b	nF2, $03
0008C442 E10B                       	smpsAlterNote       $0B
0008C444 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C448 E107                       	smpsAlterNote       $07
0008C44A 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C450 E10B                       	smpsAlterNote       $0B
0008C452 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C456 E107                       	smpsAlterNote       $07
0008C458 9B03                       	dc.b	nD2, $03
0008C45A E11A                       	smpsAlterNote       $1A
0008C45C A301                       	dc.b	nBb2, $01
0008C45E E1F9                       	smpsAlterNote       $F9
0008C460 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C463 E107                       	smpsAlterNote       $07
0008C465 E701                       	dc.b	smpsNoAttack, $01
0008C467 E111                       	smpsAlterNote       $11
0008C469 E701                       	dc.b	smpsNoAttack, $01
0008C46B E106                       	smpsAlterNote       $06
0008C46D E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
0008C472 E107                       	smpsAlterNote       $07
0008C474 9B03                       	dc.b	nD2, $03
0008C476 E108                       	smpsAlterNote       $08
0008C478 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C47E E109                       	smpsAlterNote       $09
0008C480 A003                       	dc.b	nG2, $03
0008C482 E10C                       	smpsAlterNote       $0C
0008C484 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008C488 E1FD                       	smpsAlterNote       $FD
0008C48A A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
0008C48F E106                       	smpsAlterNote       $06
0008C491 8001                       	dc.b	nRst, $01
0008C493 E109                       	smpsAlterNote       $09
0008C495 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C499 E108                       	smpsAlterNote       $08
0008C49B 9C03                       	dc.b	nEb2, $03
0008C49D E107                       	smpsAlterNote       $07
0008C49F 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C4A5 E10B                       	smpsAlterNote       $0B
0008C4A7 A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C4AB E107                       	smpsAlterNote       $07
0008C4AD 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C4B1 E11A                       	smpsAlterNote       $1A
0008C4B3 A301                       	dc.b	nBb2, $01
0008C4B5 E1F9                       	smpsAlterNote       $F9
0008C4B7 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C4BA E107                       	smpsAlterNote       $07
0008C4BC E701                       	dc.b	smpsNoAttack, $01
0008C4BE E1FB                       	smpsAlterNote       $FB
0008C4C0 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C4C3 E106                       	smpsAlterNote       $06
0008C4C5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C4C9 E107                       	smpsAlterNote       $07
0008C4CB 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C4D3 E1EC                       	smpsAlterNote       $EC
0008C4D5 A101                       	dc.b	nAb2, $01
0008C4D7 E108                       	smpsAlterNote       $08
0008C4D9 E701                       	dc.b	smpsNoAttack, $01
0008C4DB E1E7                       	smpsAlterNote       $E7
0008C4DD E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C4E0 E1F5                       	smpsAlterNote       $F5
0008C4E2 E701                       	dc.b	smpsNoAttack, $01
0008C4E4 E10B                       	smpsAlterNote       $0B
0008C4E6 E702                       	dc.b	smpsNoAttack, $02
0008C4E8 E107                       	smpsAlterNote       $07
0008C4EA 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C4F0 E106                       	smpsAlterNote       $06
0008C4F2 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C4F8 E10C                       	smpsAlterNote       $0C
0008C4FA 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C502 E109                       	smpsAlterNote       $09
0008C504 9E03                       	dc.b	nF2, $03
0008C506 E10C                       	smpsAlterNote       $0C
0008C508 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C50C E1EA                       	smpsAlterNote       $EA
0008C50E A201                       	dc.b	nA2, $01
0008C510 E106                       	smpsAlterNote       $06
0008C512 E701                       	dc.b	smpsNoAttack, $01
0008C514 E114                       	smpsAlterNote       $14
0008C516 E701                       	dc.b	smpsNoAttack, $01
0008C518 E1F0                       	smpsAlterNote       $F0
0008C51A E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C51D E10C                       	smpsAlterNote       $0C
0008C51F E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C52B 9703                       	dc.b	nBb1, $03
0008C52D E116                       	smpsAlterNote       $16
0008C52F 9C01                       	dc.b	nEb2, $01
0008C531 E105                       	smpsAlterNote       $05
0008C533 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C536 E113                       	smpsAlterNote       $13
0008C538 E701                       	dc.b	smpsNoAttack, $01
0008C53A E1FF                       	smpsAlterNote       $FF
0008C53C E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C53F E109                       	smpsAlterNote       $09
0008C541 E703                       	dc.b	smpsNoAttack, $03
0008C543 E10C                       	smpsAlterNote       $0C
0008C545 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C551 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C559 E109                       	smpsAlterNote       $09
0008C55B 9E03                       	dc.b	nF2, $03
0008C55D E10C                       	smpsAlterNote       $0C
0008C55F 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C563 E1EC                       	smpsAlterNote       $EC
0008C565 A201                       	dc.b	nA2, $01
0008C567 E10A                       	smpsAlterNote       $0A
0008C569 E701                       	dc.b	smpsNoAttack, $01
0008C56B E1E8                       	smpsAlterNote       $E8
0008C56D E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C570 E1F7                       	smpsAlterNote       $F7
0008C572 E701                       	dc.b	smpsNoAttack, $01
0008C574 E10C                       	smpsAlterNote       $0C
0008C576 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C582 E1EA                       	smpsAlterNote       $EA
0008C584 9D01                       	dc.b	nE2, $01
0008C586 E108                       	smpsAlterNote       $08
0008C588 E701                       	dc.b	smpsNoAttack, $01
0008C58A E1F6                       	smpsAlterNote       $F6
0008C58C E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C58F E105                       	smpsAlterNote       $05
0008C591 E701                       	dc.b	smpsNoAttack, $01
0008C593 E109                       	smpsAlterNote       $09
0008C595 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C599 E10C                       	smpsAlterNote       $0C
0008C59B 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
0008C5A7 E108                       	smpsAlterNote       $08
0008C5A9 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
0008C5AF E106                       	smpsAlterNote       $06
0008C5B1 A403 8001                  	dc.b	nB2, $03, nRst, $01
0008C5B5 E108                       	smpsAlterNote       $08
0008C5B7 9D03                       	dc.b	nE2, $03
0008C5B9 E1EB                       	smpsAlterNote       $EB
0008C5BB A801                       	dc.b	nEb3, $01
0008C5BD E109                       	smpsAlterNote       $09
0008C5BF E701                       	dc.b	smpsNoAttack, $01
0008C5C1 E1EB                       	smpsAlterNote       $EB
0008C5C3 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
0008C5C6 E108                       	smpsAlterNote       $08
0008C5C8 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
0008C5D4 E1E9                       	smpsAlterNote       $E9
0008C5D6 A301                       	dc.b	nBb2, $01
0008C5D8 E1F8                       	smpsAlterNote       $F8
0008C5DA E701                       	dc.b	smpsNoAttack, $01
0008C5DC E116                       	smpsAlterNote       $16
0008C5DE E701                       	dc.b	smpsNoAttack, $01
0008C5E0 E1F7                       	smpsAlterNote       $F7
0008C5E2 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C5E5 E107                       	smpsAlterNote       $07
0008C5E7 E701                       	dc.b	smpsNoAttack, $01
0008C5E9 E1EE                       	smpsAlterNote       $EE
0008C5EB E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C5EE E106                       	smpsAlterNote       $06
0008C5F0 8001                       	dc.b	nRst, $01
0008C5F2 E108                       	smpsAlterNote       $08
0008C5F4 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
0008C5FA E106                       	smpsAlterNote       $06
0008C5FC A402 8001                  	dc.b	nB2, $02, nRst, $01
0008C600 E108                       	smpsAlterNote       $08
0008C602 9D03                       	dc.b	nE2, $03
0008C604 E10B                       	smpsAlterNote       $0B
0008C606 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
0008C60C E108                       	smpsAlterNote       $08
0008C60E 9D03 8001                  	dc.b	nE2, $03, nRst, $01
0008C612 E10B                       	smpsAlterNote       $0B
0008C614 9603                       	dc.b	nA1, $03
0008C616 E10E                       	smpsAlterNote       $0E
0008C618 A001                       	dc.b	nG2, $01
0008C61A E118                       	smpsAlterNote       $18
0008C61C E701                       	dc.b	smpsNoAttack, $01
0008C61E E1E9                       	smpsAlterNote       $E9
0008C620 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C623 E1EE                       	smpsAlterNote       $EE
0008C625 E701                       	dc.b	smpsNoAttack, $01
0008C627 E1F8                       	smpsAlterNote       $F8
0008C629 E701                       	dc.b	smpsNoAttack, $01
0008C62B E102                       	smpsAlterNote       $02
0008C62D E701                       	dc.b	smpsNoAttack, $01
0008C62F E107                       	smpsAlterNote       $07
0008C631 8001                       	dc.b	nRst, $01
0008C633 E10B                       	smpsAlterNote       $0B
0008C635 9603                       	dc.b	nA1, $03
0008C637 E10C                       	smpsAlterNote       $0C
0008C639 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
0008C63F E10B                       	smpsAlterNote       $0B
0008C641 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0008C64D 8001 9603                  	dc.b	nRst, $01, nA1, $03
0008C651 E10C                       	smpsAlterNote       $0C
0008C653 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
0008C65F 8001                       	dc.b	nRst, $01
0008C661 E10B                       	smpsAlterNote       $0B
0008C663 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C66B E107                       	smpsAlterNote       $07
0008C66D 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C671 E10B                       	smpsAlterNote       $0B
0008C673 9603                       	dc.b	nA1, $03
0008C675 E109                       	smpsAlterNote       $09
0008C677 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C67B E108                       	smpsAlterNote       $08
0008C67D 9D06                       	dc.b	nE2, $06
0008C67F E107                       	smpsAlterNote       $07
0008C681 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C685 E106                       	smpsAlterNote       $06
0008C687 9903                       	dc.b	nC2, $03
0008C689 E10C                       	smpsAlterNote       $0C
0008C68B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C68F E10B                       	smpsAlterNote       $0B
0008C691 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C69D 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C6A7 E10C                       	smpsAlterNote       $0C
0008C6A9 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
0008C6B5 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C6C1 8001                       	dc.b	nRst, $01
0008C6C3 E10B                       	smpsAlterNote       $0B
0008C6C5 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C6D1 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
0008C6DD 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
0008C6E9 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C6F3 E10C                       	smpsAlterNote       $0C
0008C6F5 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
0008C701 E10B                       	smpsAlterNote       $0B
0008C703 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
0008C70B E107                       	smpsAlterNote       $07
0008C70D 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0008C711 E10B                       	smpsAlterNote       $0B
0008C713 9603                       	dc.b	nA1, $03
0008C715 E109                       	smpsAlterNote       $09
0008C717 9E03 8001                  	dc.b	nF2, $03, nRst, $01
0008C71B E108                       	smpsAlterNote       $08
0008C71D 9D06 8001                  	dc.b	nE2, $06, nRst, $01
0008C721 E107                       	smpsAlterNote       $07
0008C723 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C727 E106                       	smpsAlterNote       $06
0008C729 9903                       	dc.b	nC2, $03
0008C72B E10C                       	smpsAlterNote       $0C
0008C72D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C731 E10B                       	smpsAlterNote       $0B
0008C733 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C73F 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C749 E10C                       	smpsAlterNote       $0C
0008C74B 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
0008C757 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
0008C763 8001                       	dc.b	nRst, $01
0008C765 E10B                       	smpsAlterNote       $0B
0008C767 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C773 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0008C77D E10C                       	smpsAlterNote       $0C
0008C77F 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C78B 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
0008C797 E10B                       	smpsAlterNote       $0B
0008C799 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
0008C7A5 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
0008C7AF E10C                       	smpsAlterNote       $0C
0008C7B1 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C7BD 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
0008C7C9 E10B                       	smpsAlterNote       $0B
0008C7CB 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
0008C7D7 8001                       	dc.b	nRst, $01
0008C7D9 E1EC                       	smpsAlterNote       $EC
0008C7DB A101                       	dc.b	nAb2, $01
0008C7DD E1FA                       	smpsAlterNote       $FA
0008C7DF E701                       	dc.b	smpsNoAttack, $01
0008C7E1 E116                       	smpsAlterNote       $16
0008C7E3 E701                       	dc.b	smpsNoAttack, $01
0008C7E5 E1F5                       	smpsAlterNote       $F5
0008C7E7 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C7EA E10B                       	smpsAlterNote       $0B
0008C7EC E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
0008C7F8 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
0008C804 E107                       	smpsAlterNote       $07
0008C806 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C80C E10B                       	smpsAlterNote       $0B
0008C80E A203                       	dc.b	nA2, $03
0008C810 E107                       	smpsAlterNote       $07
0008C812 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008C816 E1F3                       	smpsAlterNote       $F3
0008C818 A401                       	dc.b	nB2, $01
0008C81A E102                       	smpsAlterNote       $02
0008C81C E701                       	dc.b	smpsNoAttack, $01
0008C81E E109                       	smpsAlterNote       $09
0008C820 E701                       	dc.b	smpsNoAttack, $01
0008C822 E102                       	smpsAlterNote       $02
0008C824 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C827 E106                       	smpsAlterNote       $06
0008C829 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C82D E107                       	smpsAlterNote       $07
0008C82F 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C833 E108                       	smpsAlterNote       $08
0008C835 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
0008C83B E109                       	smpsAlterNote       $09
0008C83D A003 8001                  	dc.b	nG2, $03, nRst, $01
0008C841 E1F2                       	smpsAlterNote       $F2
0008C843 A401                       	dc.b	nB2, $01
0008C845 E1FF                       	smpsAlterNote       $FF
0008C847 E701                       	dc.b	smpsNoAttack, $01
0008C849 E111                       	smpsAlterNote       $11
0008C84B E701                       	dc.b	smpsNoAttack, $01
0008C84D E1FB                       	smpsAlterNote       $FB
0008C84F E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C852 E106                       	smpsAlterNote       $06
0008C854 E702                       	dc.b	smpsNoAttack, $02
0008C856 E109                       	smpsAlterNote       $09
0008C858 A007                       	dc.b	nG2, $07
0008C85A E108                       	smpsAlterNote       $08
0008C85C 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0008C860 E107                       	smpsAlterNote       $07
0008C862 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C868 E10B                       	smpsAlterNote       $0B
0008C86A A202 8001                  	dc.b	nA2, $02, nRst, $01
0008C86E E107                       	smpsAlterNote       $07
0008C870 9B03                       	dc.b	nD2, $03
0008C872 E11A                       	smpsAlterNote       $1A
0008C874 A301                       	dc.b	nBb2, $01
0008C876 E1F2                       	smpsAlterNote       $F2
0008C878 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C87B E1FF                       	smpsAlterNote       $FF
0008C87D E701                       	dc.b	smpsNoAttack, $01
0008C87F E111                       	smpsAlterNote       $11
0008C881 E701                       	dc.b	smpsNoAttack, $01
0008C883 E106                       	smpsAlterNote       $06
0008C885 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C888 E107                       	smpsAlterNote       $07
0008C88A 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
0008C896 E117                       	smpsAlterNote       $17
0008C898 A001                       	dc.b	nG2, $01
0008C89A E1FA                       	smpsAlterNote       $FA
0008C89C E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
0008C89F E116                       	smpsAlterNote       $16
0008C8A1 E701                       	dc.b	smpsNoAttack, $01
0008C8A3 E1F5                       	smpsAlterNote       $F5
0008C8A5 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C8A8 E103                       	smpsAlterNote       $03
0008C8AA E701                       	dc.b	smpsNoAttack, $01
0008C8AC E10B                       	smpsAlterNote       $0B
0008C8AE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008C8B2 E107                       	smpsAlterNote       $07
0008C8B4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008C8BA E109                       	smpsAlterNote       $09
0008C8BC 9E03                       	dc.b	nF2, $03
0008C8BE E10B                       	smpsAlterNote       $0B
0008C8C0 9603 8001                  	dc.b	nA1, $03, nRst, $01
0008C8C4 E107                       	smpsAlterNote       $07
0008C8C6 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
0008C8CC E10B                       	smpsAlterNote       $0B
0008C8CE A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C8D2 E107                       	smpsAlterNote       $07
0008C8D4 9B03                       	dc.b	nD2, $03
0008C8D6 E11A                       	smpsAlterNote       $1A
0008C8D8 A301                       	dc.b	nBb2, $01
0008C8DA E1F9                       	smpsAlterNote       $F9
0008C8DC E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C8DF E1FF                       	smpsAlterNote       $FF
0008C8E1 E701                       	dc.b	smpsNoAttack, $01
0008C8E3 E111                       	smpsAlterNote       $11
0008C8E5 E701                       	dc.b	smpsNoAttack, $01
0008C8E7 E106                       	smpsAlterNote       $06
0008C8E9 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008C8EC E107                       	smpsAlterNote       $07
0008C8EE 9B03                       	dc.b	nD2, $03
0008C8F0 E108                       	smpsAlterNote       $08
0008C8F2 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
0008C8F8 E109                       	smpsAlterNote       $09
0008C8FA A003                       	dc.b	nG2, $03
0008C8FC E1F0                       	smpsAlterNote       $F0
0008C8FE A501                       	dc.b	nC3, $01
0008C900 E106                       	smpsAlterNote       $06
0008C902 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
0008C906 E109                       	smpsAlterNote       $09
0008C908 A006 8001                  	dc.b	nG2, $06, nRst, $01
0008C90C E108                       	smpsAlterNote       $08
0008C90E 9C03                       	dc.b	nEb2, $03
0008C910 E107                       	smpsAlterNote       $07
0008C912 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
0008C918 E10B                       	smpsAlterNote       $0B
0008C91A A203 8001                  	dc.b	nA2, $03, nRst, $01
0008C91E E107                       	smpsAlterNote       $07
0008C920 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008C924 E11A                       	smpsAlterNote       $1A
0008C926 A301                       	dc.b	nBb2, $01
0008C928 E1F9                       	smpsAlterNote       $F9
0008C92A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008C92D E107                       	smpsAlterNote       $07
0008C92F E701                       	dc.b	smpsNoAttack, $01
0008C931 E1FB                       	smpsAlterNote       $FB
0008C933 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008C936 E106                       	smpsAlterNote       $06
0008C938 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008C93C E107                       	smpsAlterNote       $07
0008C93E 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
0008C946 E1EC                       	smpsAlterNote       $EC
0008C948 A101                       	dc.b	nAb2, $01
0008C94A E108                       	smpsAlterNote       $08
0008C94C E701                       	dc.b	smpsNoAttack, $01
0008C94E E1E7                       	smpsAlterNote       $E7
0008C950 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
0008C953 E1F5                       	smpsAlterNote       $F5
0008C955 E701                       	dc.b	smpsNoAttack, $01
0008C957 E10B                       	smpsAlterNote       $0B
0008C959 E702                       	dc.b	smpsNoAttack, $02
0008C95B E107                       	smpsAlterNote       $07
0008C95D 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
0008C963 E106                       	smpsAlterNote       $06
0008C965 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
0008C96B E10C                       	smpsAlterNote       $0C
0008C96D 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
0008C975 E109                       	smpsAlterNote       $09
0008C977 9E03                       	dc.b	nF2, $03
0008C979 E10C                       	smpsAlterNote       $0C
0008C97B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C97F E1EA                       	smpsAlterNote       $EA
0008C981 A201                       	dc.b	nA2, $01
0008C983 E106                       	smpsAlterNote       $06
0008C985 E701                       	dc.b	smpsNoAttack, $01
0008C987 E114                       	smpsAlterNote       $14
0008C989 E701                       	dc.b	smpsNoAttack, $01
0008C98B E1F0                       	smpsAlterNote       $F0
0008C98D E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C990 E10C                       	smpsAlterNote       $0C
0008C992 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
0008C99E 9703                       	dc.b	nBb1, $03
0008C9A0 E116                       	smpsAlterNote       $16
0008C9A2 9C01                       	dc.b	nEb2, $01
0008C9A4 E105                       	smpsAlterNote       $05
0008C9A6 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C9A9 E113                       	smpsAlterNote       $13
0008C9AB E701                       	dc.b	smpsNoAttack, $01
0008C9AD E1FF                       	smpsAlterNote       $FF
0008C9AF E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008C9B2 E109                       	smpsAlterNote       $09
0008C9B4 E703                       	dc.b	smpsNoAttack, $03
0008C9B6 E10C                       	smpsAlterNote       $0C
0008C9B8 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
0008C9C4 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
0008C9CC E109                       	smpsAlterNote       $09
0008C9CE 9E03                       	dc.b	nF2, $03
0008C9D0 E10C                       	smpsAlterNote       $0C
0008C9D2 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008C9D6 E1EA                       	smpsAlterNote       $EA
0008C9D8 A201                       	dc.b	nA2, $01
0008C9DA E106                       	smpsAlterNote       $06
0008C9DC E701                       	dc.b	smpsNoAttack, $01
0008C9DE E1E2                       	smpsAlterNote       $E2
0008C9E0 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0008C9E3 E1F0                       	smpsAlterNote       $F0
0008C9E5 E701                       	dc.b	smpsNoAttack, $01
0008C9E7 E10C                       	smpsAlterNote       $0C
0008C9E9 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
0008C9F5 E116                       	smpsAlterNote       $16
0008C9F7 9C01                       	dc.b	nEb2, $01
0008C9F9 E105                       	smpsAlterNote       $05
0008C9FB E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0008C9FE E1F1                       	smpsAlterNote       $F1
0008CA00 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
0008CA03 E1FF                       	smpsAlterNote       $FF
0008CA05 E701                       	dc.b	smpsNoAttack, $01
0008CA07 E109                       	smpsAlterNote       $09
0008CA09 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CA0D E10C                       	smpsAlterNote       $0C
0008CA0F 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
0008CA1B E106                       	smpsAlterNote       $06
0008CA1D 9903                       	dc.b	nC2, $03
0008CA1F E107                       	smpsAlterNote       $07
0008CA21 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CA25 E109                       	smpsAlterNote       $09
0008CA27 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
0008CA2D E107                       	smpsAlterNote       $07
0008CA2F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CA33 E108                       	smpsAlterNote       $08
0008CA35 9D03                       	dc.b	nE2, $03
0008CA37 E10B                       	smpsAlterNote       $0B
0008CA39 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
0008CA3F E109                       	smpsAlterNote       $09
0008CA41 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
0008CA47 E10C                       	smpsAlterNote       $0C
0008CA49 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
0008CA4F E106                       	smpsAlterNote       $06
0008CA51 9903                       	dc.b	nC2, $03
0008CA53 E11A                       	smpsAlterNote       $1A
0008CA55 A301                       	dc.b	nBb2, $01
0008CA57 E1F9                       	smpsAlterNote       $F9
0008CA59 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CA5C E1FF                       	smpsAlterNote       $FF
0008CA5E E701                       	dc.b	smpsNoAttack, $01
0008CA60 E111                       	smpsAlterNote       $11
0008CA62 E701                       	dc.b	smpsNoAttack, $01
0008CA64 E106                       	smpsAlterNote       $06
0008CA66 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
0008CA6D E109                       	smpsAlterNote       $09
0008CA6F A003                       	dc.b	nG2, $03
0008CA71 E106                       	smpsAlterNote       $06
0008CA73 9907                       	dc.b	nC2, $07
0008CA75 E107                       	smpsAlterNote       $07
0008CA77 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
0008CA7F E10B                       	smpsAlterNote       $0B
0008CA81 A203                       	dc.b	nA2, $03
0008CA83 E107                       	smpsAlterNote       $07
0008CA85 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CA89 E1F2                       	smpsAlterNote       $F2
0008CA8B A401                       	dc.b	nB2, $01
0008CA8D E1F9                       	smpsAlterNote       $F9
0008CA8F E701                       	dc.b	smpsNoAttack, $01
0008CA91 E107                       	smpsAlterNote       $07
0008CA93 E701                       	dc.b	smpsNoAttack, $01
0008CA95 E1FB                       	smpsAlterNote       $FB
0008CA97 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CA9A E106                       	smpsAlterNote       $06
0008CA9C E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CAA0 E107                       	smpsAlterNote       $07
0008CAA2 9B03                       	dc.b	nD2, $03
0008CAA4 E108                       	smpsAlterNote       $08
0008CAA6 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008CAAC E109                       	smpsAlterNote       $09
0008CAAE A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CAB2 E1F2                       	smpsAlterNote       $F2
0008CAB4 A401                       	dc.b	nB2, $01
0008CAB6 E1F9                       	smpsAlterNote       $F9
0008CAB8 E701                       	dc.b	smpsNoAttack, $01
0008CABA E107                       	smpsAlterNote       $07
0008CABC E701                       	dc.b	smpsNoAttack, $01
0008CABE E1FB                       	smpsAlterNote       $FB
0008CAC0 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CAC3 E106                       	smpsAlterNote       $06
0008CAC5 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CAC9 E108                       	smpsAlterNote       $08
0008CACB 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
0008CACF E10C                       	smpsAlterNote       $0C
0008CAD1 A302 8001                  	dc.b	nBb2, $02, nRst, $01
0008CAD5 E107                       	smpsAlterNote       $07
0008CAD7 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CADD E10B                       	smpsAlterNote       $0B
0008CADF A203                       	dc.b	nA2, $03
0008CAE1 E107                       	smpsAlterNote       $07
0008CAE3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CAE7 E1F2                       	smpsAlterNote       $F2
0008CAE9 A401                       	dc.b	nB2, $01
0008CAEB E1FF                       	smpsAlterNote       $FF
0008CAED E701                       	dc.b	smpsNoAttack, $01
0008CAEF E107                       	smpsAlterNote       $07
0008CAF1 E701                       	dc.b	smpsNoAttack, $01
0008CAF3 E1FB                       	smpsAlterNote       $FB
0008CAF5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CAF8 E106                       	smpsAlterNote       $06
0008CAFA E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0008CAFE E107                       	smpsAlterNote       $07
0008CB00 9B02 8001                  	dc.b	nD2, $02, nRst, $01
0008CB04 E108                       	smpsAlterNote       $08
0008CB06 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0008CB0C E109                       	smpsAlterNote       $09
0008CB0E A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CB12 E1F2                       	smpsAlterNote       $F2
0008CB14 A401                       	dc.b	nB2, $01
0008CB16 E1FF                       	smpsAlterNote       $FF
0008CB18 E701                       	dc.b	smpsNoAttack, $01
0008CB1A E111                       	smpsAlterNote       $11
0008CB1C E701                       	dc.b	smpsNoAttack, $01
0008CB1E E1FB                       	smpsAlterNote       $FB
0008CB20 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
0008CB23 E106                       	smpsAlterNote       $06
0008CB25 E702                       	dc.b	smpsNoAttack, $02
0008CB27 E108                       	smpsAlterNote       $08
0008CB29 9C07                       	dc.b	nEb2, $07
0008CB2B E10C                       	smpsAlterNote       $0C
0008CB2D A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008CB31 E107                       	smpsAlterNote       $07
0008CB33 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0008CB39 E10B                       	smpsAlterNote       $0B
0008CB3B A202 8001                  	dc.b	nA2, $02, nRst, $01
0008CB3F E107                       	smpsAlterNote       $07
0008CB41 9B03                       	dc.b	nD2, $03
0008CB43 E11A                       	smpsAlterNote       $1A
0008CB45 A301                       	dc.b	nBb2, $01
0008CB47 E1F2                       	smpsAlterNote       $F2
0008CB49 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CB4C E1FF                       	smpsAlterNote       $FF
0008CB4E E701                       	dc.b	smpsNoAttack, $01
0008CB50 E111                       	smpsAlterNote       $11
0008CB52 E701                       	dc.b	smpsNoAttack, $01
0008CB54 E106                       	smpsAlterNote       $06
0008CB56 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CB59 E107                       	smpsAlterNote       $07
0008CB5B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CB5F E108                       	smpsAlterNote       $08
0008CB61 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
0008CB69 E109                       	smpsAlterNote       $09
0008CB6B A003                       	dc.b	nG2, $03
0008CB6D E11A                       	smpsAlterNote       $1A
0008CB6F A301                       	dc.b	nBb2, $01
0008CB71 E1F2                       	smpsAlterNote       $F2
0008CB73 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0008CB76 E1FF                       	smpsAlterNote       $FF
0008CB78 E701                       	dc.b	smpsNoAttack, $01
0008CB7A E111                       	smpsAlterNote       $11
0008CB7C E701                       	dc.b	smpsNoAttack, $01
0008CB7E E106                       	smpsAlterNote       $06
0008CB80 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
0008CB83 E108                       	smpsAlterNote       $08
0008CB85 9C07                       	dc.b	nEb2, $07
0008CB87 E10C                       	smpsAlterNote       $0C
0008CB89 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008CB8D E107                       	smpsAlterNote       $07
0008CB8F 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
0008CB9B 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
0008CBA5 E108                       	smpsAlterNote       $08
0008CBA7 9C06                       	dc.b	nEb2, $06
0008CBA9 E10C                       	smpsAlterNote       $0C
0008CBAB 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0008CBAF E108                       	smpsAlterNote       $08
0008CBB1 9C03                       	dc.b	nEb2, $03
0008CBB3 E109                       	smpsAlterNote       $09
0008CBB5 A003 8001                  	dc.b	nG2, $03, nRst, $01
0008CBB9 E10C                       	smpsAlterNote       $0C
0008CBBB A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
0008CBC3 E107                       	smpsAlterNote       $07
0008CBC5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0008CBC9 F6F4 F8                    	smpsJump            music84_Jump04
0008CBCC                            
0008CBCC                            ; FM2 Data
0008CBCC                            music84_FM2:
0008CBCC E0C0                       	smpsPan             panCenter, $00
0008CBD0 E10B                       	smpsAlterNote       $0B
0008CBD2 C603 8007                  	dc.b	nA5, $03, nRst, $07
0008CBD6 E109                       	smpsAlterNote       $09
0008CBD8 C403 800B                  	dc.b	nG5, $03, nRst, $0B
0008CBDC E108                       	smpsAlterNote       $08
0008CBDE C103 8004                  	dc.b	nE5, $03, nRst, $04
0008CBE4 E080                       	smpsPan             panLeft, $00
0008CBE6 E10C                       	smpsAlterNote       $0C
0008CBE8 E6F9                       	smpsAlterVol        $F9
0008CBEA C703                       	dc.b	nBb5, $03
0008CBEC E10B                       	smpsAlterNote       $0B
0008CBEE C603 8001                  	dc.b	nA5, $03, nRst, $01
0008CBF2 E109                       	smpsAlterNote       $09
0008CBF4 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008CBFA E108                       	smpsAlterNote       $08
0008CBFC C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CC00 E106                       	smpsAlterNote       $06
0008CC02 BD03                       	dc.b	nC5, $03
0008CC04 E10B                       	smpsAlterNote       $0B
0008CC06 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008CC0C E0C0                       	smpsPan             panCenter, $00
0008CC0E E107                       	smpsAlterNote       $07
0008CC10 E606                       	smpsAlterVol        $06
0008CC12 BF03                       	dc.b	nD5, $03
0008CC14                            
0008CC14                            music84_Jump03:
0008CC14 E108                       	smpsAlterNote       $08
0008CC16 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CC1A E109                       	smpsAlterNote       $09
0008CC1C C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
0008CC22 E10B                       	smpsAlterNote       $0B
0008CC24 C607                       	dc.b	nA5, $07
0008CC26 E107                       	smpsAlterNote       $07
0008CC28 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008CC2C E106                       	smpsAlterNote       $06
0008CC2E C90D                       	dc.b	nC6, $0D
0008CC30 E100                       	smpsAlterNote       $00
0008CC32 E701                       	dc.b	smpsNoAttack, $01
0008CC34 E1FF                       	smpsAlterNote       $FF
0008CC36 E701                       	dc.b	smpsNoAttack, $01
0008CC38 E103                       	smpsAlterNote       $03
0008CC3A E701                       	dc.b	smpsNoAttack, $01
0008CC3C E109                       	smpsAlterNote       $09
0008CC3E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC42 E106                       	smpsAlterNote       $06
0008CC44 E701                       	dc.b	smpsNoAttack, $01
0008CC46 E100                       	smpsAlterNote       $00
0008CC48 E701                       	dc.b	smpsNoAttack, $01
0008CC4A E10C                       	smpsAlterNote       $0C
0008CC4C C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008CC50 E10B                       	smpsAlterNote       $0B
0008CC52 C603                       	dc.b	nA5, $03
0008CC54 E109                       	smpsAlterNote       $09
0008CC56 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CC5A E10B                       	smpsAlterNote       $0B
0008CC5C C60D                       	dc.b	nA5, $0D
0008CC5E E105                       	smpsAlterNote       $05
0008CC60 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC64 E10B                       	smpsAlterNote       $0B
0008CC66 E701                       	dc.b	smpsNoAttack, $01
0008CC68 E10E                       	smpsAlterNote       $0E
0008CC6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CC6E E108                       	smpsAlterNote       $08
0008CC70 E701                       	dc.b	smpsNoAttack, $01
0008CC72 E104                       	smpsAlterNote       $04
0008CC74 E701                       	dc.b	smpsNoAttack, $01
0008CC76 E105                       	smpsAlterNote       $05
0008CC78 E701                       	dc.b	smpsNoAttack, $01
0008CC7A E10B                       	smpsAlterNote       $0B
0008CC7C E701                       	dc.b	smpsNoAttack, $01
0008CC7E E10F                       	smpsAlterNote       $0F
0008CC80 E701                       	dc.b	smpsNoAttack, $01
0008CC82 E10B                       	smpsAlterNote       $0B
0008CC84 E701                       	dc.b	smpsNoAttack, $01
0008CC86 E108                       	smpsAlterNote       $08
0008CC88 E701                       	dc.b	smpsNoAttack, $01
0008CC8A E104                       	smpsAlterNote       $04
0008CC8C E701                       	dc.b	smpsNoAttack, $01
0008CC8E E108                       	smpsAlterNote       $08
0008CC90 E701                       	dc.b	smpsNoAttack, $01
0008CC92 E10E                       	smpsAlterNote       $0E
0008CC94 E701                       	dc.b	smpsNoAttack, $01
0008CC96 E10F                       	smpsAlterNote       $0F
0008CC98 E701                       	dc.b	smpsNoAttack, $01
0008CC9A E10B                       	smpsAlterNote       $0B
0008CC9C E701                       	dc.b	smpsNoAttack, $01
0008CC9E E105                       	smpsAlterNote       $05
0008CCA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCA4 E108                       	smpsAlterNote       $08
0008CCA6 E701                       	dc.b	smpsNoAttack, $01
0008CCA8 E10E                       	smpsAlterNote       $0E
0008CCAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCAE E108                       	smpsAlterNote       $08
0008CCB0 E701                       	dc.b	smpsNoAttack, $01
0008CCB2 E105                       	smpsAlterNote       $05
0008CCB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CCB8 E10B                       	smpsAlterNote       $0B
0008CCBA E701                       	dc.b	smpsNoAttack, $01
0008CCBC E10F                       	smpsAlterNote       $0F
0008CCBE E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008CCC2 E107                       	smpsAlterNote       $07
0008CCC4 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008CCC8 E108                       	smpsAlterNote       $08
0008CCCA C103                       	dc.b	nE5, $03
0008CCCC E109                       	smpsAlterNote       $09
0008CCCE C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008CCD6 E10B                       	smpsAlterNote       $0B
0008CCD8 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CCDC E107                       	smpsAlterNote       $07
0008CCDE BF03                       	dc.b	nD5, $03
0008CCE0 E106                       	smpsAlterNote       $06
0008CCE2 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
0008CCE6 E107                       	smpsAlterNote       $07
0008CCE8 CB03                       	dc.b	nD6, $03
0008CCEA E10C                       	smpsAlterNote       $0C
0008CCEC C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008CCF0 E10B                       	smpsAlterNote       $0B
0008CCF2 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CCF6 E109                       	smpsAlterNote       $09
0008CCF8 C404                       	dc.b	nG5, $04
0008CCFA E10B                       	smpsAlterNote       $0B
0008CCFC C60D                       	dc.b	nA5, $0D
0008CCFE E108                       	smpsAlterNote       $08
0008CD00 E701                       	dc.b	smpsNoAttack, $01
0008CD02 E104                       	smpsAlterNote       $04
0008CD04 E701                       	dc.b	smpsNoAttack, $01
0008CD06 E108                       	smpsAlterNote       $08
0008CD08 E701                       	dc.b	smpsNoAttack, $01
0008CD0A E10B                       	smpsAlterNote       $0B
0008CD0C E701                       	dc.b	smpsNoAttack, $01
0008CD0E E10F                       	smpsAlterNote       $0F
0008CD10 E701                       	dc.b	smpsNoAttack, $01
0008CD12 E10B                       	smpsAlterNote       $0B
0008CD14 E701                       	dc.b	smpsNoAttack, $01
0008CD16 E105                       	smpsAlterNote       $05
0008CD18 E701                       	dc.b	smpsNoAttack, $01
0008CD1A E104                       	smpsAlterNote       $04
0008CD1C E701                       	dc.b	smpsNoAttack, $01
0008CD1E E108                       	smpsAlterNote       $08
0008CD20 E701                       	dc.b	smpsNoAttack, $01
0008CD22 E10E                       	smpsAlterNote       $0E
0008CD24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD28 E10B                       	smpsAlterNote       $0B
0008CD2A E701                       	dc.b	smpsNoAttack, $01
0008CD2C E105                       	smpsAlterNote       $05
0008CD2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD32 E10B                       	smpsAlterNote       $0B
0008CD34 E701                       	dc.b	smpsNoAttack, $01
0008CD36 E10E                       	smpsAlterNote       $0E
0008CD38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD3C E108                       	smpsAlterNote       $08
0008CD3E E701                       	dc.b	smpsNoAttack, $01
0008CD40 E104                       	smpsAlterNote       $04
0008CD42 E701                       	dc.b	smpsNoAttack, $01
0008CD44 E105                       	smpsAlterNote       $05
0008CD46 E701                       	dc.b	smpsNoAttack, $01
0008CD48 E10B                       	smpsAlterNote       $0B
0008CD4A E701                       	dc.b	smpsNoAttack, $01
0008CD4C E10F                       	smpsAlterNote       $0F
0008CD4E E701                       	dc.b	smpsNoAttack, $01
0008CD50 E10B                       	smpsAlterNote       $0B
0008CD52 E701                       	dc.b	smpsNoAttack, $01
0008CD54 E108                       	smpsAlterNote       $08
0008CD56 E701                       	dc.b	smpsNoAttack, $01
0008CD58 E105                       	smpsAlterNote       $05
0008CD5A 8001                       	dc.b	nRst, $01
0008CD5C E109                       	smpsAlterNote       $09
0008CD5E C401                       	dc.b	nG5, $01
0008CD60 E10B                       	smpsAlterNote       $0B
0008CD62 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
0008CD6B E109                       	smpsAlterNote       $09
0008CD6D C404 8001                  	dc.b	nG5, $04, nRst, $01
0008CD71 E10B                       	smpsAlterNote       $0B
0008CD73 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CD77 E107                       	smpsAlterNote       $07
0008CD79 BF0D                       	dc.b	nD5, $0D
0008CD7B E101                       	smpsAlterNote       $01
0008CD7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD81 E104                       	smpsAlterNote       $04
0008CD83 E701                       	dc.b	smpsNoAttack, $01
0008CD85 E10A                       	smpsAlterNote       $0A
0008CD87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD8B E104                       	smpsAlterNote       $04
0008CD8D E701                       	dc.b	smpsNoAttack, $01
0008CD8F E101                       	smpsAlterNote       $01
0008CD91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CD95 E107                       	smpsAlterNote       $07
0008CD97 E701                       	dc.b	smpsNoAttack, $01
0008CD99 E10B                       	smpsAlterNote       $0B
0008CD9B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CD9F E108                       	smpsAlterNote       $08
0008CDA1 C101                       	dc.b	nE5, $01
0008CDA3 E109                       	smpsAlterNote       $09
0008CDA5 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008CDAA E10B                       	smpsAlterNote       $0B
0008CDAC C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008CDB4 E108                       	smpsAlterNote       $08
0008CDB6 CD06                       	dc.b	nE6, $06
0008CDB8 E109                       	smpsAlterNote       $09
0008CDBA CE07                       	dc.b	nF6, $07
0008CDBC E108                       	smpsAlterNote       $08
0008CDBE CD03 8001                  	dc.b	nE6, $03, nRst, $01
0008CDC2 E106                       	smpsAlterNote       $06
0008CDC4 C903                       	dc.b	nC6, $03
0008CDC6 E109                       	smpsAlterNote       $09
0008CDC8 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CDCC E10C                       	smpsAlterNote       $0C
0008CDCE C70D                       	dc.b	nBb5, $0D
0008CDD0 E106                       	smpsAlterNote       $06
0008CDD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDD6 E109                       	smpsAlterNote       $09
0008CDD8 E701                       	dc.b	smpsNoAttack, $01
0008CDDA E10F                       	smpsAlterNote       $0F
0008CDDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDE0 E109                       	smpsAlterNote       $09
0008CDE2 E701                       	dc.b	smpsNoAttack, $01
0008CDE4 E106                       	smpsAlterNote       $06
0008CDE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CDEA E10C                       	smpsAlterNote       $0C
0008CDEC E701                       	dc.b	smpsNoAttack, $01
0008CDEE E110                       	smpsAlterNote       $10
0008CDF0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008CDF4 E10B                       	smpsAlterNote       $0B
0008CDF6 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
0008CDFA E105                       	smpsAlterNote       $05
0008CDFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE00 E10B                       	smpsAlterNote       $0B
0008CE02 E701                       	dc.b	smpsNoAttack, $01
0008CE04 E10E                       	smpsAlterNote       $0E
0008CE06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE0A E108                       	smpsAlterNote       $08
0008CE0C E701                       	dc.b	smpsNoAttack, $01
0008CE0E E104                       	smpsAlterNote       $04
0008CE10 E701                       	dc.b	smpsNoAttack, $01
0008CE12 E105                       	smpsAlterNote       $05
0008CE14 E701                       	dc.b	smpsNoAttack, $01
0008CE16 E10B                       	smpsAlterNote       $0B
0008CE18 E701                       	dc.b	smpsNoAttack, $01
0008CE1A E10F                       	smpsAlterNote       $0F
0008CE1C E701                       	dc.b	smpsNoAttack, $01
0008CE1E E10B                       	smpsAlterNote       $0B
0008CE20 E701                       	dc.b	smpsNoAttack, $01
0008CE22 E108                       	smpsAlterNote       $08
0008CE24 E701                       	dc.b	smpsNoAttack, $01
0008CE26 E104                       	smpsAlterNote       $04
0008CE28 E701                       	dc.b	smpsNoAttack, $01
0008CE2A E108                       	smpsAlterNote       $08
0008CE2C E701                       	dc.b	smpsNoAttack, $01
0008CE2E E10E                       	smpsAlterNote       $0E
0008CE30 E701                       	dc.b	smpsNoAttack, $01
0008CE32 E10F                       	smpsAlterNote       $0F
0008CE34 E701                       	dc.b	smpsNoAttack, $01
0008CE36 E10B                       	smpsAlterNote       $0B
0008CE38 E701                       	dc.b	smpsNoAttack, $01
0008CE3A E105                       	smpsAlterNote       $05
0008CE3C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE40 E108                       	smpsAlterNote       $08
0008CE42 E701                       	dc.b	smpsNoAttack, $01
0008CE44 E10E                       	smpsAlterNote       $0E
0008CE46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE4A E108                       	smpsAlterNote       $08
0008CE4C E701                       	dc.b	smpsNoAttack, $01
0008CE4E E105                       	smpsAlterNote       $05
0008CE50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE54 E10B                       	smpsAlterNote       $0B
0008CE56 E701                       	dc.b	smpsNoAttack, $01
0008CE58 E10F                       	smpsAlterNote       $0F
0008CE5A E701                       	dc.b	smpsNoAttack, $01
0008CE5C E10E                       	smpsAlterNote       $0E
0008CE5E E701                       	dc.b	smpsNoAttack, $01
0008CE60 E108                       	smpsAlterNote       $08
0008CE62 E701                       	dc.b	smpsNoAttack, $01
0008CE64 E104                       	smpsAlterNote       $04
0008CE66 E701                       	dc.b	smpsNoAttack, $01
0008CE68 E108                       	smpsAlterNote       $08
0008CE6A E701                       	dc.b	smpsNoAttack, $01
0008CE6C E10E                       	smpsAlterNote       $0E
0008CE6E E701                       	dc.b	smpsNoAttack, $01
0008CE70 E10F                       	smpsAlterNote       $0F
0008CE72 E701                       	dc.b	smpsNoAttack, $01
0008CE74 E10B                       	smpsAlterNote       $0B
0008CE76 E701                       	dc.b	smpsNoAttack, $01
0008CE78 E105                       	smpsAlterNote       $05
0008CE7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE7E E108                       	smpsAlterNote       $08
0008CE80 E701                       	dc.b	smpsNoAttack, $01
0008CE82 E10E                       	smpsAlterNote       $0E
0008CE84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CE88 E108                       	smpsAlterNote       $08
0008CE8A E701                       	dc.b	smpsNoAttack, $01
0008CE8C E105                       	smpsAlterNote       $05
0008CE8E E701                       	dc.b	smpsNoAttack, $01
0008CE90 E10B                       	smpsAlterNote       $0B
0008CE92 C60D                       	dc.b	nA5, $0D
0008CE94 E108                       	smpsAlterNote       $08
0008CE96 E701                       	dc.b	smpsNoAttack, $01
0008CE98 E104                       	smpsAlterNote       $04
0008CE9A E701                       	dc.b	smpsNoAttack, $01
0008CE9C E105                       	smpsAlterNote       $05
0008CE9E E701                       	dc.b	smpsNoAttack, $01
0008CEA0 E10B                       	smpsAlterNote       $0B
0008CEA2 E701                       	dc.b	smpsNoAttack, $01
0008CEA4 E10F                       	smpsAlterNote       $0F
0008CEA6 E701                       	dc.b	smpsNoAttack, $01
0008CEA8 E10B                       	smpsAlterNote       $0B
0008CEAA E701                       	dc.b	smpsNoAttack, $01
0008CEAC E108                       	smpsAlterNote       $08
0008CEAE E701                       	dc.b	smpsNoAttack, $01
0008CEB0 E104                       	smpsAlterNote       $04
0008CEB2 E701                       	dc.b	smpsNoAttack, $01
0008CEB4 E108                       	smpsAlterNote       $08
0008CEB6 E701                       	dc.b	smpsNoAttack, $01
0008CEB8 E10E                       	smpsAlterNote       $0E
0008CEBA E701                       	dc.b	smpsNoAttack, $01
0008CEBC E10F                       	smpsAlterNote       $0F
0008CEBE E701                       	dc.b	smpsNoAttack, $01
0008CEC2 E109                       	smpsAlterNote       $09
0008CEC4 E6FF                       	smpsAlterVol        $FF
0008CEC6 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
0008CED0 E108                       	smpsAlterNote       $08
0008CED2 C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008CED8 E107                       	smpsAlterNote       $07
0008CEDA E601                       	smpsAlterVol        $01
0008CEDC BF03                       	dc.b	nD5, $03
0008CEDE E108                       	smpsAlterNote       $08
0008CEE0 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008CEE4 E109                       	smpsAlterNote       $09
0008CEE6 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008CEEC E10B                       	smpsAlterNote       $0B
0008CEEE C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CEF2 E107                       	smpsAlterNote       $07
0008CEF4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008CEF8 E106                       	smpsAlterNote       $06
0008CEFA C90D                       	dc.b	nC6, $0D
0008CEFC E103                       	smpsAlterNote       $03
0008CEFE E701                       	dc.b	smpsNoAttack, $01
0008CF00 E1FF                       	smpsAlterNote       $FF
0008CF02 E701                       	dc.b	smpsNoAttack, $01
0008CF04 E103                       	smpsAlterNote       $03
0008CF06 E701                       	dc.b	smpsNoAttack, $01
0008CF08 E109                       	smpsAlterNote       $09
0008CF0A E701                       	dc.b	smpsNoAttack, $01
0008CF0C E10A                       	smpsAlterNote       $0A
0008CF0E E701                       	dc.b	smpsNoAttack, $01
0008CF10 E106                       	smpsAlterNote       $06
0008CF12 E701                       	dc.b	smpsNoAttack, $01
0008CF14 E100                       	smpsAlterNote       $00
0008CF16 E701                       	dc.b	smpsNoAttack, $01
0008CF18 E10C                       	smpsAlterNote       $0C
0008CF1A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008CF1E E10B                       	smpsAlterNote       $0B
0008CF20 C603                       	dc.b	nA5, $03
0008CF22 E109                       	smpsAlterNote       $09
0008CF24 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008CF28 E10B                       	smpsAlterNote       $0B
0008CF2A C60D                       	dc.b	nA5, $0D
0008CF2C E105                       	smpsAlterNote       $05
0008CF2E E701                       	dc.b	smpsNoAttack, $01
0008CF30 E104                       	smpsAlterNote       $04
0008CF32 E701                       	dc.b	smpsNoAttack, $01
0008CF34 E108                       	smpsAlterNote       $08
0008CF36 E701                       	dc.b	smpsNoAttack, $01
0008CF38 E10E                       	smpsAlterNote       $0E
0008CF3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF3E E10B                       	smpsAlterNote       $0B
0008CF40 E701                       	dc.b	smpsNoAttack, $01
0008CF42 E105                       	smpsAlterNote       $05
0008CF44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF48 E10B                       	smpsAlterNote       $0B
0008CF4A E701                       	dc.b	smpsNoAttack, $01
0008CF4C E10E                       	smpsAlterNote       $0E
0008CF4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF52 E108                       	smpsAlterNote       $08
0008CF54 E701                       	dc.b	smpsNoAttack, $01
0008CF56 E104                       	smpsAlterNote       $04
0008CF58 E701                       	dc.b	smpsNoAttack, $01
0008CF5A E105                       	smpsAlterNote       $05
0008CF5C E701                       	dc.b	smpsNoAttack, $01
0008CF5E E10B                       	smpsAlterNote       $0B
0008CF60 E701                       	dc.b	smpsNoAttack, $01
0008CF62 E10F                       	smpsAlterNote       $0F
0008CF64 E701                       	dc.b	smpsNoAttack, $01
0008CF66 E10B                       	smpsAlterNote       $0B
0008CF68 E701                       	dc.b	smpsNoAttack, $01
0008CF6A E108                       	smpsAlterNote       $08
0008CF6C E701                       	dc.b	smpsNoAttack, $01
0008CF6E E104                       	smpsAlterNote       $04
0008CF70 E701                       	dc.b	smpsNoAttack, $01
0008CF72 E108                       	smpsAlterNote       $08
0008CF74 E701                       	dc.b	smpsNoAttack, $01
0008CF76 E10E                       	smpsAlterNote       $0E
0008CF78 E701                       	dc.b	smpsNoAttack, $01
0008CF7A E10F                       	smpsAlterNote       $0F
0008CF7C E701                       	dc.b	smpsNoAttack, $01
0008CF7E E10B                       	smpsAlterNote       $0B
0008CF80 E701                       	dc.b	smpsNoAttack, $01
0008CF82 E105                       	smpsAlterNote       $05
0008CF84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CF88 E108                       	smpsAlterNote       $08
0008CF8A E701                       	dc.b	smpsNoAttack, $01
0008CF8C E10E                       	smpsAlterNote       $0E
0008CF8E E701                       	dc.b	smpsNoAttack, $01
0008CF90 E10F                       	smpsAlterNote       $0F
0008CF92 800F                       	dc.b	nRst, $0F
0008CF94 E107                       	smpsAlterNote       $07
0008CF96 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008CF9A E108                       	smpsAlterNote       $08
0008CF9C C103                       	dc.b	nE5, $03
0008CF9E E109                       	smpsAlterNote       $09
0008CFA0 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008CFA6 E10B                       	smpsAlterNote       $0B
0008CFA8 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008CFAC E107                       	smpsAlterNote       $07
0008CFAE BF03                       	dc.b	nD5, $03
0008CFB0 E106                       	smpsAlterNote       $06
0008CFB2 C90E                       	dc.b	nC6, $0E
0008CFB4 E107                       	smpsAlterNote       $07
0008CFB6 CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008CFBA E10C                       	smpsAlterNote       $0C
0008CFBC C704                       	dc.b	nBb5, $04
0008CFBE E10B                       	smpsAlterNote       $0B
0008CFC0 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008CFC4 E109                       	smpsAlterNote       $09
0008CFC6 C404                       	dc.b	nG5, $04
0008CFC8 E10B                       	smpsAlterNote       $0B
0008CFCA C60D                       	dc.b	nA5, $0D
0008CFCC E108                       	smpsAlterNote       $08
0008CFCE E701                       	dc.b	smpsNoAttack, $01
0008CFD0 E105                       	smpsAlterNote       $05
0008CFD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008CFD6 E10B                       	smpsAlterNote       $0B
0008CFD8 E701                       	dc.b	smpsNoAttack, $01
0008CFDA E10F                       	smpsAlterNote       $0F
0008CFDC E701                       	dc.b	smpsNoAttack, $01
0008CFDE E10E                       	smpsAlterNote       $0E
0008CFE0 E701                       	dc.b	smpsNoAttack, $01
0008CFE2 E108                       	smpsAlterNote       $08
0008CFE4 E701                       	dc.b	smpsNoAttack, $01
0008CFE6 E104                       	smpsAlterNote       $04
0008CFE8 E701                       	dc.b	smpsNoAttack, $01
0008CFEA E108                       	smpsAlterNote       $08
0008CFEC E701                       	dc.b	smpsNoAttack, $01
0008CFEE E10B                       	smpsAlterNote       $0B
0008CFF0 E701                       	dc.b	smpsNoAttack, $01
0008CFF2 E10F                       	smpsAlterNote       $0F
0008CFF4 E701                       	dc.b	smpsNoAttack, $01
0008CFF6 E10B                       	smpsAlterNote       $0B
0008CFF8 E701                       	dc.b	smpsNoAttack, $01
0008CFFA E105                       	smpsAlterNote       $05
0008CFFC E701                       	dc.b	smpsNoAttack, $01
0008CFFE E104                       	smpsAlterNote       $04
0008D000 E701                       	dc.b	smpsNoAttack, $01
0008D002 E108                       	smpsAlterNote       $08
0008D004 E701                       	dc.b	smpsNoAttack, $01
0008D006 E10E                       	smpsAlterNote       $0E
0008D008 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D00C E10B                       	smpsAlterNote       $0B
0008D00E E701                       	dc.b	smpsNoAttack, $01
0008D010 E105                       	smpsAlterNote       $05
0008D012 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D016 E10B                       	smpsAlterNote       $0B
0008D018 E701                       	dc.b	smpsNoAttack, $01
0008D01A E10E                       	smpsAlterNote       $0E
0008D01C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D020 E108                       	smpsAlterNote       $08
0008D022 E701                       	dc.b	smpsNoAttack, $01
0008D024 E105                       	smpsAlterNote       $05
0008D026 8001                       	dc.b	nRst, $01
0008D028 E109                       	smpsAlterNote       $09
0008D02A C402                       	dc.b	nG5, $02
0008D02C E10B                       	smpsAlterNote       $0B
0008D02E E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008D037 E109                       	smpsAlterNote       $09
0008D039 C404                       	dc.b	nG5, $04
0008D03B E10B                       	smpsAlterNote       $0B
0008D03D C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D041 E107                       	smpsAlterNote       $07
0008D043 BF0D                       	dc.b	nD5, $0D
0008D045 E101                       	smpsAlterNote       $01
0008D047 E701                       	dc.b	smpsNoAttack, $01
0008D049 E100                       	smpsAlterNote       $00
0008D04B E701                       	dc.b	smpsNoAttack, $01
0008D04D E104                       	smpsAlterNote       $04
0008D04F E701                       	dc.b	smpsNoAttack, $01
0008D051 E10A                       	smpsAlterNote       $0A
0008D053 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D057 E107                       	smpsAlterNote       $07
0008D059 E701                       	dc.b	smpsNoAttack, $01
0008D05B E101                       	smpsAlterNote       $01
0008D05D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D061 E107                       	smpsAlterNote       $07
0008D063 E701                       	dc.b	smpsNoAttack, $01
0008D065 E10A                       	smpsAlterNote       $0A
0008D067 E701                       	dc.b	smpsNoAttack, $01
0008D069 E10B                       	smpsAlterNote       $0B
0008D06B 8001                       	dc.b	nRst, $01
0008D06D E108                       	smpsAlterNote       $08
0008D06F C101                       	dc.b	nE5, $01
0008D071 E109                       	smpsAlterNote       $09
0008D073 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
0008D078 E10B                       	smpsAlterNote       $0B
0008D07A C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008D082 E108                       	smpsAlterNote       $08
0008D084 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008D088 E109                       	smpsAlterNote       $09
0008D08A CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008D08E E108                       	smpsAlterNote       $08
0008D090 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008D094 E106                       	smpsAlterNote       $06
0008D096 C903                       	dc.b	nC6, $03
0008D098 E109                       	smpsAlterNote       $09
0008D09A C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D09E E10C                       	smpsAlterNote       $0C
0008D0A0 C70D                       	dc.b	nBb5, $0D
0008D0A2 E109                       	smpsAlterNote       $09
0008D0A4 E701                       	dc.b	smpsNoAttack, $01
0008D0A6 E105                       	smpsAlterNote       $05
0008D0A8 E701                       	dc.b	smpsNoAttack, $01
0008D0AA E109                       	smpsAlterNote       $09
0008D0AC E701                       	dc.b	smpsNoAttack, $01
0008D0AE E10F                       	smpsAlterNote       $0F
0008D0B0 E701                       	dc.b	smpsNoAttack, $01
0008D0B2 E110                       	smpsAlterNote       $10
0008D0B4 E701                       	dc.b	smpsNoAttack, $01
0008D0B6 E10C                       	smpsAlterNote       $0C
0008D0B8 E701                       	dc.b	smpsNoAttack, $01
0008D0BA E106                       	smpsAlterNote       $06
0008D0BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0C0 E109                       	smpsAlterNote       $09
0008D0C2 E701                       	dc.b	smpsNoAttack, $01
0008D0C4 E10F                       	smpsAlterNote       $0F
0008D0C6 E701                       	dc.b	smpsNoAttack, $01
0008D0C8 E110                       	smpsAlterNote       $10
0008D0CA 8001                       	dc.b	nRst, $01
0008D0CC E10B                       	smpsAlterNote       $0B
0008D0CE C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008D0D4 E105                       	smpsAlterNote       $05
0008D0D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0DA E108                       	smpsAlterNote       $08
0008D0DC E701                       	dc.b	smpsNoAttack, $01
0008D0DE E10E                       	smpsAlterNote       $0E
0008D0E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0E4 E108                       	smpsAlterNote       $08
0008D0E6 E701                       	dc.b	smpsNoAttack, $01
0008D0E8 E105                       	smpsAlterNote       $05
0008D0EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D0EE E10B                       	smpsAlterNote       $0B
0008D0F0 E701                       	dc.b	smpsNoAttack, $01
0008D0F2 E10F                       	smpsAlterNote       $0F
0008D0F4 E701                       	dc.b	smpsNoAttack, $01
0008D0F6 E10E                       	smpsAlterNote       $0E
0008D0F8 E701                       	dc.b	smpsNoAttack, $01
0008D0FA E108                       	smpsAlterNote       $08
0008D0FC E701                       	dc.b	smpsNoAttack, $01
0008D0FE E104                       	smpsAlterNote       $04
0008D100 E701                       	dc.b	smpsNoAttack, $01
0008D102 E108                       	smpsAlterNote       $08
0008D104 E701                       	dc.b	smpsNoAttack, $01
0008D106 E10B                       	smpsAlterNote       $0B
0008D108 E701                       	dc.b	smpsNoAttack, $01
0008D10A E10F                       	smpsAlterNote       $0F
0008D10C E701                       	dc.b	smpsNoAttack, $01
0008D10E E10B                       	smpsAlterNote       $0B
0008D110 E701                       	dc.b	smpsNoAttack, $01
0008D112 E105                       	smpsAlterNote       $05
0008D114 E701                       	dc.b	smpsNoAttack, $01
0008D116 E104                       	smpsAlterNote       $04
0008D118 E701                       	dc.b	smpsNoAttack, $01
0008D11A E108                       	smpsAlterNote       $08
0008D11C E701                       	dc.b	smpsNoAttack, $01
0008D11E E10E                       	smpsAlterNote       $0E
0008D120 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D124 E10B                       	smpsAlterNote       $0B
0008D126 E701                       	dc.b	smpsNoAttack, $01
0008D128 E105                       	smpsAlterNote       $05
0008D12A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D12E E10B                       	smpsAlterNote       $0B
0008D130 E701                       	dc.b	smpsNoAttack, $01
0008D132 E10E                       	smpsAlterNote       $0E
0008D134 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D138 E108                       	smpsAlterNote       $08
0008D13A E701                       	dc.b	smpsNoAttack, $01
0008D13C E104                       	smpsAlterNote       $04
0008D13E E701                       	dc.b	smpsNoAttack, $01
0008D140 E105                       	smpsAlterNote       $05
0008D142 E701                       	dc.b	smpsNoAttack, $01
0008D144 E10B                       	smpsAlterNote       $0B
0008D146 E701                       	dc.b	smpsNoAttack, $01
0008D148 E10F                       	smpsAlterNote       $0F
0008D14A E701                       	dc.b	smpsNoAttack, $01
0008D14C E10B                       	smpsAlterNote       $0B
0008D14E E701                       	dc.b	smpsNoAttack, $01
0008D150 E108                       	smpsAlterNote       $08
0008D152 E701                       	dc.b	smpsNoAttack, $01
0008D154 E104                       	smpsAlterNote       $04
0008D156 E701                       	dc.b	smpsNoAttack, $01
0008D158 E108                       	smpsAlterNote       $08
0008D15A E701                       	dc.b	smpsNoAttack, $01
0008D15C E10E                       	smpsAlterNote       $0E
0008D15E E701                       	dc.b	smpsNoAttack, $01
0008D160 E10F                       	smpsAlterNote       $0F
0008D162 E701                       	dc.b	smpsNoAttack, $01
0008D164 E10B                       	smpsAlterNote       $0B
0008D166 E701                       	dc.b	smpsNoAttack, $01
0008D168 E105                       	smpsAlterNote       $05
0008D16A E701                       	dc.b	smpsNoAttack, $01
0008D16C E10B                       	smpsAlterNote       $0B
0008D16E C60E                       	dc.b	nA5, $0E
0008D170 E105                       	smpsAlterNote       $05
0008D172 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D176 E10B                       	smpsAlterNote       $0B
0008D178 E701                       	dc.b	smpsNoAttack, $01
0008D17A E10E                       	smpsAlterNote       $0E
0008D17C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D180 E108                       	smpsAlterNote       $08
0008D182 E701                       	dc.b	smpsNoAttack, $01
0008D184 E104                       	smpsAlterNote       $04
0008D186 E701                       	dc.b	smpsNoAttack, $01
0008D188 E105                       	smpsAlterNote       $05
0008D18A E701                       	dc.b	smpsNoAttack, $01
0008D18C E10B                       	smpsAlterNote       $0B
0008D18E E701                       	dc.b	smpsNoAttack, $01
0008D190 E10F                       	smpsAlterNote       $0F
0008D192 E701                       	dc.b	smpsNoAttack, $01
0008D194 E10B                       	smpsAlterNote       $0B
0008D196 E701                       	dc.b	smpsNoAttack, $01
0008D198 E108                       	smpsAlterNote       $08
0008D19A E701                       	dc.b	smpsNoAttack, $01
0008D19C E104                       	smpsAlterNote       $04
0008D19E E701                       	dc.b	smpsNoAttack, $01
0008D1A0 E108                       	smpsAlterNote       $08
0008D1A2 E701                       	dc.b	smpsNoAttack, $01
0008D1A4 E10E                       	smpsAlterNote       $0E
0008D1A6 E701                       	dc.b	smpsNoAttack, $01
0008D1A8 E10F                       	smpsAlterNote       $0F
0008D1AA E701                       	dc.b	smpsNoAttack, $01
0008D1AC E10B                       	smpsAlterNote       $0B
0008D1AE E701                       	dc.b	smpsNoAttack, $01
0008D1B0 E105                       	smpsAlterNote       $05
0008D1B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1B6 E108                       	smpsAlterNote       $08
0008D1B8 E701                       	dc.b	smpsNoAttack, $01
0008D1BA E10E                       	smpsAlterNote       $0E
0008D1BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1C0 E108                       	smpsAlterNote       $08
0008D1C2 E701                       	dc.b	smpsNoAttack, $01
0008D1C4 E105                       	smpsAlterNote       $05
0008D1C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1CA E10B                       	smpsAlterNote       $0B
0008D1CC E701                       	dc.b	smpsNoAttack, $01
0008D1CE E10F                       	smpsAlterNote       $0F
0008D1D0 E701                       	dc.b	smpsNoAttack, $01
0008D1D2 E10E                       	smpsAlterNote       $0E
0008D1D4 E701                       	dc.b	smpsNoAttack, $01
0008D1D6 E108                       	smpsAlterNote       $08
0008D1D8 E701                       	dc.b	smpsNoAttack, $01
0008D1DA E104                       	smpsAlterNote       $04
0008D1DC E701                       	dc.b	smpsNoAttack, $01
0008D1DE E108                       	smpsAlterNote       $08
0008D1E0 E701                       	dc.b	smpsNoAttack, $01
0008D1E2 E10E                       	smpsAlterNote       $0E
0008D1E4 E701                       	dc.b	smpsNoAttack, $01
0008D1E6 E10F                       	smpsAlterNote       $0F
0008D1E8 E701                       	dc.b	smpsNoAttack, $01
0008D1EA E10B                       	smpsAlterNote       $0B
0008D1EC E701                       	dc.b	smpsNoAttack, $01
0008D1EE E105                       	smpsAlterNote       $05
0008D1F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1F4 E108                       	smpsAlterNote       $08
0008D1F6 E701                       	dc.b	smpsNoAttack, $01
0008D1F8 E10E                       	smpsAlterNote       $0E
0008D1FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D1FE E108                       	smpsAlterNote       $08
0008D200 E701                       	dc.b	smpsNoAttack, $01
0008D202 E105                       	smpsAlterNote       $05
0008D204 E701                       	dc.b	smpsNoAttack, $01
0008D208 E10B                       	smpsAlterNote       $0B
0008D20A E6FD                       	smpsAlterVol        $FD
0008D20C C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D210 E109                       	smpsAlterNote       $09
0008D212 C404                       	dc.b	nG5, $04
0008D214 E10B                       	smpsAlterNote       $0B
0008D216 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D21A E107                       	smpsAlterNote       $07
0008D21C BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D222 E10B                       	smpsAlterNote       $0B
0008D224 C604                       	dc.b	nA5, $04
0008D226 E109                       	smpsAlterNote       $09
0008D228 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D22C E10B                       	smpsAlterNote       $0B
0008D22E C604                       	dc.b	nA5, $04
0008D230 E108                       	smpsAlterNote       $08
0008D232 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
0008D23A E106                       	smpsAlterNote       $06
0008D23C C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D240 E10C                       	smpsAlterNote       $0C
0008D242 C704                       	dc.b	nBb5, $04
0008D244 E10B                       	smpsAlterNote       $0B
0008D246 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D24A E109                       	smpsAlterNote       $09
0008D24C C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D256 E10B                       	smpsAlterNote       $0B
0008D258 C60D                       	dc.b	nA5, $0D
0008D25A E108                       	smpsAlterNote       $08
0008D25C E701                       	dc.b	smpsNoAttack, $01
0008D25E E104                       	smpsAlterNote       $04
0008D260 E701                       	dc.b	smpsNoAttack, $01
0008D262 E108                       	smpsAlterNote       $08
0008D264 E701                       	dc.b	smpsNoAttack, $01
0008D266 E10E                       	smpsAlterNote       $0E
0008D268 E701                       	dc.b	smpsNoAttack, $01
0008D26A E10F                       	smpsAlterNote       $0F
0008D26C E701                       	dc.b	smpsNoAttack, $01
0008D26E E10B                       	smpsAlterNote       $0B
0008D270 E701                       	dc.b	smpsNoAttack, $01
0008D272 E105                       	smpsAlterNote       $05
0008D274 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D278 E108                       	smpsAlterNote       $08
0008D27A E701                       	dc.b	smpsNoAttack, $01
0008D27C E10E                       	smpsAlterNote       $0E
0008D27E E701                       	dc.b	smpsNoAttack, $01
0008D280 E10F                       	smpsAlterNote       $0F
0008D282 8001                       	dc.b	nRst, $01
0008D284 E109                       	smpsAlterNote       $09
0008D286 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D28C E108                       	smpsAlterNote       $08
0008D28E C10D                       	dc.b	nE5, $0D
0008D290 E102                       	smpsAlterNote       $02
0008D292 E701                       	dc.b	smpsNoAttack, $01
0008D294 E101                       	smpsAlterNote       $01
0008D296 E701                       	dc.b	smpsNoAttack, $01
0008D298 E105                       	smpsAlterNote       $05
0008D29A E701                       	dc.b	smpsNoAttack, $01
0008D29C E10B                       	smpsAlterNote       $0B
0008D29E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2A2 E108                       	smpsAlterNote       $08
0008D2A4 E701                       	dc.b	smpsNoAttack, $01
0008D2A6 E102                       	smpsAlterNote       $02
0008D2A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2AC E108                       	smpsAlterNote       $08
0008D2AE E701                       	dc.b	smpsNoAttack, $01
0008D2B0 E10B                       	smpsAlterNote       $0B
0008D2B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2B6 E105                       	smpsAlterNote       $05
0008D2B8 E701                       	dc.b	smpsNoAttack, $01
0008D2BA E101                       	smpsAlterNote       $01
0008D2BC E701                       	dc.b	smpsNoAttack, $01
0008D2BE E102                       	smpsAlterNote       $02
0008D2C0 E701                       	dc.b	smpsNoAttack, $01
0008D2C2 E108                       	smpsAlterNote       $08
0008D2C4 E701                       	dc.b	smpsNoAttack, $01
0008D2C6 E10C                       	smpsAlterNote       $0C
0008D2C8 E701                       	dc.b	smpsNoAttack, $01
0008D2CA E108                       	smpsAlterNote       $08
0008D2CC E701                       	dc.b	smpsNoAttack, $01
0008D2CE E105                       	smpsAlterNote       $05
0008D2D0 E701                       	dc.b	smpsNoAttack, $01
0008D2D2 E101                       	smpsAlterNote       $01
0008D2D4 E701                       	dc.b	smpsNoAttack, $01
0008D2D6 E105                       	smpsAlterNote       $05
0008D2D8 E701                       	dc.b	smpsNoAttack, $01
0008D2DA E10B                       	smpsAlterNote       $0B
0008D2DC E701                       	dc.b	smpsNoAttack, $01
0008D2DE E10C                       	smpsAlterNote       $0C
0008D2E0 E701                       	dc.b	smpsNoAttack, $01
0008D2E2 E108                       	smpsAlterNote       $08
0008D2E4 E701                       	dc.b	smpsNoAttack, $01
0008D2E6 E102                       	smpsAlterNote       $02
0008D2E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2EC E105                       	smpsAlterNote       $05
0008D2EE E701                       	dc.b	smpsNoAttack, $01
0008D2F0 E10B                       	smpsAlterNote       $0B
0008D2F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D2F6 E105                       	smpsAlterNote       $05
0008D2F8 E701                       	dc.b	smpsNoAttack, $01
0008D2FA E102                       	smpsAlterNote       $02
0008D2FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D300 E108                       	smpsAlterNote       $08
0008D302 E701                       	dc.b	smpsNoAttack, $01
0008D304 E10C                       	smpsAlterNote       $0C
0008D306 E701                       	dc.b	smpsNoAttack, $01
0008D308 E10B                       	smpsAlterNote       $0B
0008D30A E701                       	dc.b	smpsNoAttack, $01
0008D30C E105                       	smpsAlterNote       $05
0008D30E E701                       	dc.b	smpsNoAttack, $01
0008D310 E101                       	smpsAlterNote       $01
0008D312 E701                       	dc.b	smpsNoAttack, $01
0008D314 E105                       	smpsAlterNote       $05
0008D316 E701                       	dc.b	smpsNoAttack, $01
0008D318 E108                       	smpsAlterNote       $08
0008D31A E701                       	dc.b	smpsNoAttack, $01
0008D31C E10C                       	smpsAlterNote       $0C
0008D31E E701                       	dc.b	smpsNoAttack, $01
0008D320 E108                       	smpsAlterNote       $08
0008D322 E701                       	dc.b	smpsNoAttack, $01
0008D324 E102                       	smpsAlterNote       $02
0008D326 E701                       	dc.b	smpsNoAttack, $01
0008D328 E101                       	smpsAlterNote       $01
0008D32A E701                       	dc.b	smpsNoAttack, $01
0008D32C E105                       	smpsAlterNote       $05
0008D32E E701                       	dc.b	smpsNoAttack, $01
0008D330 E10B                       	smpsAlterNote       $0B
0008D332 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D336 E108                       	smpsAlterNote       $08
0008D338 E701                       	dc.b	smpsNoAttack, $01
0008D33A E102                       	smpsAlterNote       $02
0008D33C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D340 E108                       	smpsAlterNote       $08
0008D342 E701                       	dc.b	smpsNoAttack, $01
0008D344 E10B                       	smpsAlterNote       $0B
0008D346 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D34A E105                       	smpsAlterNote       $05
0008D34C E701                       	dc.b	smpsNoAttack, $01
0008D34E E101                       	smpsAlterNote       $01
0008D350 E701                       	dc.b	smpsNoAttack, $01
0008D352 E102                       	smpsAlterNote       $02
0008D354 E701                       	dc.b	smpsNoAttack, $01
0008D356 E108                       	smpsAlterNote       $08
0008D358 E701                       	dc.b	smpsNoAttack, $01
0008D35A E10C                       	smpsAlterNote       $0C
0008D35C E701                       	dc.b	smpsNoAttack, $01
0008D35E E108                       	smpsAlterNote       $08
0008D360 E701                       	dc.b	smpsNoAttack, $01
0008D362 E105                       	smpsAlterNote       $05
0008D364 E701                       	dc.b	smpsNoAttack, $01
0008D366 E101                       	smpsAlterNote       $01
0008D368 E701                       	dc.b	smpsNoAttack, $01
0008D36A E105                       	smpsAlterNote       $05
0008D36C E701                       	dc.b	smpsNoAttack, $01
0008D36E E10B                       	smpsAlterNote       $0B
0008D370 E701                       	dc.b	smpsNoAttack, $01
0008D372 E10C                       	smpsAlterNote       $0C
0008D374 E701                       	dc.b	smpsNoAttack, $01
0008D376 E108                       	smpsAlterNote       $08
0008D378 E701                       	dc.b	smpsNoAttack, $01
0008D37A E102                       	smpsAlterNote       $02
0008D37C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D380 E105                       	smpsAlterNote       $05
0008D382 E701                       	dc.b	smpsNoAttack, $01
0008D384 E10B                       	smpsAlterNote       $0B
0008D386 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D38A E105                       	smpsAlterNote       $05
0008D38C E701                       	dc.b	smpsNoAttack, $01
0008D38E E101                       	smpsAlterNote       $01
0008D390 E701                       	dc.b	smpsNoAttack, $01
0008D392 E102                       	smpsAlterNote       $02
0008D394 E701                       	dc.b	smpsNoAttack, $01
0008D396 E108                       	smpsAlterNote       $08
0008D398 E701                       	dc.b	smpsNoAttack, $01
0008D39A E10C                       	smpsAlterNote       $0C
0008D39C E701                       	dc.b	smpsNoAttack, $01
0008D39E E108                       	smpsAlterNote       $08
0008D3A0 E701                       	dc.b	smpsNoAttack, $01
0008D3A2 E105                       	smpsAlterNote       $05
0008D3A4 E701                       	dc.b	smpsNoAttack, $01
0008D3A6 E101                       	smpsAlterNote       $01
0008D3A8 E701                       	dc.b	smpsNoAttack, $01
0008D3AA E105                       	smpsAlterNote       $05
0008D3AC E701                       	dc.b	smpsNoAttack, $01
0008D3AE E10B                       	smpsAlterNote       $0B
0008D3B0 E701                       	dc.b	smpsNoAttack, $01
0008D3B2 E10C                       	smpsAlterNote       $0C
0008D3B4 E701                       	dc.b	smpsNoAttack, $01
0008D3B6 E108                       	smpsAlterNote       $08
0008D3B8 E701                       	dc.b	smpsNoAttack, $01
0008D3BA E102                       	smpsAlterNote       $02
0008D3BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3C0 E105                       	smpsAlterNote       $05
0008D3C2 E701                       	dc.b	smpsNoAttack, $01
0008D3C4 E10B                       	smpsAlterNote       $0B
0008D3C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3CA E105                       	smpsAlterNote       $05
0008D3CC E701                       	dc.b	smpsNoAttack, $01
0008D3CE E102                       	smpsAlterNote       $02
0008D3D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D3D4 E108                       	smpsAlterNote       $08
0008D3D6 E701                       	dc.b	smpsNoAttack, $01
0008D3D8 E10C                       	smpsAlterNote       $0C
0008D3DA E701                       	dc.b	smpsNoAttack, $01
0008D3DC E10B                       	smpsAlterNote       $0B
0008D3DE E701                       	dc.b	smpsNoAttack, $01
0008D3E0 E105                       	smpsAlterNote       $05
0008D3E2 E701                       	dc.b	smpsNoAttack, $01
0008D3E4 E101                       	smpsAlterNote       $01
0008D3E6 E701                       	dc.b	smpsNoAttack, $01
0008D3E8 E105                       	smpsAlterNote       $05
0008D3EA E701                       	dc.b	smpsNoAttack, $01
0008D3EC E108                       	smpsAlterNote       $08
0008D3EE E701                       	dc.b	smpsNoAttack, $01
0008D3F0 E10C                       	smpsAlterNote       $0C
0008D3F2 E701                       	dc.b	smpsNoAttack, $01
0008D3F6 E10B                       	smpsAlterNote       $0B
0008D3F8 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D3FC E109                       	smpsAlterNote       $09
0008D3FE C404                       	dc.b	nG5, $04
0008D400 E10B                       	smpsAlterNote       $0B
0008D402 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D406 E107                       	smpsAlterNote       $07
0008D408 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
0008D40E E10B                       	smpsAlterNote       $0B
0008D410 C604                       	dc.b	nA5, $04
0008D412 E109                       	smpsAlterNote       $09
0008D414 C404 8001                  	dc.b	nG5, $04, nRst, $01
0008D418 E10B                       	smpsAlterNote       $0B
0008D41A C604                       	dc.b	nA5, $04
0008D41C E108                       	smpsAlterNote       $08
0008D41E C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
0008D424 E106                       	smpsAlterNote       $06
0008D426 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008D42A E10C                       	smpsAlterNote       $0C
0008D42C C704                       	dc.b	nBb5, $04
0008D42E E10B                       	smpsAlterNote       $0B
0008D430 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D434 E109                       	smpsAlterNote       $09
0008D436 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
0008D440 E10B                       	smpsAlterNote       $0B
0008D442 C60D                       	dc.b	nA5, $0D
0008D444 E108                       	smpsAlterNote       $08
0008D446 E701                       	dc.b	smpsNoAttack, $01
0008D448 E104                       	smpsAlterNote       $04
0008D44A E701                       	dc.b	smpsNoAttack, $01
0008D44C E108                       	smpsAlterNote       $08
0008D44E E701                       	dc.b	smpsNoAttack, $01
0008D450 E10B                       	smpsAlterNote       $0B
0008D452 E701                       	dc.b	smpsNoAttack, $01
0008D454 E10F                       	smpsAlterNote       $0F
0008D456 E701                       	dc.b	smpsNoAttack, $01
0008D458 E10B                       	smpsAlterNote       $0B
0008D45A E701                       	dc.b	smpsNoAttack, $01
0008D45C E105                       	smpsAlterNote       $05
0008D45E E701                       	dc.b	smpsNoAttack, $01
0008D460 E104                       	smpsAlterNote       $04
0008D462 E701                       	dc.b	smpsNoAttack, $01
0008D464 E108                       	smpsAlterNote       $08
0008D466 E701                       	dc.b	smpsNoAttack, $01
0008D468 E10E                       	smpsAlterNote       $0E
0008D46A E701                       	dc.b	smpsNoAttack, $01
0008D46C E10F                       	smpsAlterNote       $0F
0008D46E 8001                       	dc.b	nRst, $01
0008D470 E109                       	smpsAlterNote       $09
0008D472 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008D478 E108                       	smpsAlterNote       $08
0008D47A C10D                       	dc.b	nE5, $0D
0008D47C E105                       	smpsAlterNote       $05
0008D47E E701                       	dc.b	smpsNoAttack, $01
0008D480 E101                       	smpsAlterNote       $01
0008D482 E701                       	dc.b	smpsNoAttack, $01
0008D484 E105                       	smpsAlterNote       $05
0008D486 E701                       	dc.b	smpsNoAttack, $01
0008D488 E10B                       	smpsAlterNote       $0B
0008D48A E701                       	dc.b	smpsNoAttack, $01
0008D48C E10C                       	smpsAlterNote       $0C
0008D48E E701                       	dc.b	smpsNoAttack, $01
0008D490 E108                       	smpsAlterNote       $08
0008D492 E701                       	dc.b	smpsNoAttack, $01
0008D494 E102                       	smpsAlterNote       $02
0008D496 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D49A E105                       	smpsAlterNote       $05
0008D49C E701                       	dc.b	smpsNoAttack, $01
0008D49E E10B                       	smpsAlterNote       $0B
0008D4A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4A4 E105                       	smpsAlterNote       $05
0008D4A6 E701                       	dc.b	smpsNoAttack, $01
0008D4A8 E102                       	smpsAlterNote       $02
0008D4AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4AE E108                       	smpsAlterNote       $08
0008D4B0 E701                       	dc.b	smpsNoAttack, $01
0008D4B2 E10C                       	smpsAlterNote       $0C
0008D4B4 E701                       	dc.b	smpsNoAttack, $01
0008D4B6 E10B                       	smpsAlterNote       $0B
0008D4B8 E701                       	dc.b	smpsNoAttack, $01
0008D4BA E105                       	smpsAlterNote       $05
0008D4BC E701                       	dc.b	smpsNoAttack, $01
0008D4BE E101                       	smpsAlterNote       $01
0008D4C0 E701                       	dc.b	smpsNoAttack, $01
0008D4C2 E105                       	smpsAlterNote       $05
0008D4C4 E701                       	dc.b	smpsNoAttack, $01
0008D4C6 E108                       	smpsAlterNote       $08
0008D4C8 E701                       	dc.b	smpsNoAttack, $01
0008D4CA E10C                       	smpsAlterNote       $0C
0008D4CC E701                       	dc.b	smpsNoAttack, $01
0008D4CE E108                       	smpsAlterNote       $08
0008D4D0 E701                       	dc.b	smpsNoAttack, $01
0008D4D2 E102                       	smpsAlterNote       $02
0008D4D4 E701                       	dc.b	smpsNoAttack, $01
0008D4D6 E101                       	smpsAlterNote       $01
0008D4D8 E701                       	dc.b	smpsNoAttack, $01
0008D4DA E105                       	smpsAlterNote       $05
0008D4DC E701                       	dc.b	smpsNoAttack, $01
0008D4DE E10B                       	smpsAlterNote       $0B
0008D4E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4E4 E108                       	smpsAlterNote       $08
0008D4E6 E701                       	dc.b	smpsNoAttack, $01
0008D4E8 E102                       	smpsAlterNote       $02
0008D4EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4EE E108                       	smpsAlterNote       $08
0008D4F0 E701                       	dc.b	smpsNoAttack, $01
0008D4F2 E10B                       	smpsAlterNote       $0B
0008D4F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D4F8 E105                       	smpsAlterNote       $05
0008D4FA E701                       	dc.b	smpsNoAttack, $01
0008D4FC E101                       	smpsAlterNote       $01
0008D4FE E701                       	dc.b	smpsNoAttack, $01
0008D500 E102                       	smpsAlterNote       $02
0008D502 E701                       	dc.b	smpsNoAttack, $01
0008D504 E108                       	smpsAlterNote       $08
0008D506 E701                       	dc.b	smpsNoAttack, $01
0008D508 E10C                       	smpsAlterNote       $0C
0008D50A E701                       	dc.b	smpsNoAttack, $01
0008D50C E108                       	smpsAlterNote       $08
0008D50E E701                       	dc.b	smpsNoAttack, $01
0008D510 E105                       	smpsAlterNote       $05
0008D512 E701                       	dc.b	smpsNoAttack, $01
0008D514 E101                       	smpsAlterNote       $01
0008D516 E701                       	dc.b	smpsNoAttack, $01
0008D518 E105                       	smpsAlterNote       $05
0008D51A E701                       	dc.b	smpsNoAttack, $01
0008D51C E10B                       	smpsAlterNote       $0B
0008D51E E701                       	dc.b	smpsNoAttack, $01
0008D520 E10C                       	smpsAlterNote       $0C
0008D522 E701                       	dc.b	smpsNoAttack, $01
0008D524 E108                       	smpsAlterNote       $08
0008D526 E701                       	dc.b	smpsNoAttack, $01
0008D528 E102                       	smpsAlterNote       $02
0008D52A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D52E E108                       	smpsAlterNote       $08
0008D530 E701                       	dc.b	smpsNoAttack, $01
0008D532 E10B                       	smpsAlterNote       $0B
0008D534 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D538 E105                       	smpsAlterNote       $05
0008D53A E701                       	dc.b	smpsNoAttack, $01
0008D53C E101                       	smpsAlterNote       $01
0008D53E E701                       	dc.b	smpsNoAttack, $01
0008D540 E102                       	smpsAlterNote       $02
0008D542 E701                       	dc.b	smpsNoAttack, $01
0008D544 E108                       	smpsAlterNote       $08
0008D546 E701                       	dc.b	smpsNoAttack, $01
0008D548 E10C                       	smpsAlterNote       $0C
0008D54A E701                       	dc.b	smpsNoAttack, $01
0008D54C E108                       	smpsAlterNote       $08
0008D54E E701                       	dc.b	smpsNoAttack, $01
0008D550 E105                       	smpsAlterNote       $05
0008D552 E701                       	dc.b	smpsNoAttack, $01
0008D554 E101                       	smpsAlterNote       $01
0008D556 E701                       	dc.b	smpsNoAttack, $01
0008D558 E105                       	smpsAlterNote       $05
0008D55A E701                       	dc.b	smpsNoAttack, $01
0008D55C E10B                       	smpsAlterNote       $0B
0008D55E E701                       	dc.b	smpsNoAttack, $01
0008D560 E10C                       	smpsAlterNote       $0C
0008D562 E701                       	dc.b	smpsNoAttack, $01
0008D564 E108                       	smpsAlterNote       $08
0008D566 E701                       	dc.b	smpsNoAttack, $01
0008D568 E102                       	smpsAlterNote       $02
0008D56A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D56E E105                       	smpsAlterNote       $05
0008D570 E701                       	dc.b	smpsNoAttack, $01
0008D572 E10B                       	smpsAlterNote       $0B
0008D574 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D578 E105                       	smpsAlterNote       $05
0008D57A E701                       	dc.b	smpsNoAttack, $01
0008D57C E102                       	smpsAlterNote       $02
0008D57E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D582 E108                       	smpsAlterNote       $08
0008D584 E701                       	dc.b	smpsNoAttack, $01
0008D586 E10C                       	smpsAlterNote       $0C
0008D588 E701                       	dc.b	smpsNoAttack, $01
0008D58A E10B                       	smpsAlterNote       $0B
0008D58C E701                       	dc.b	smpsNoAttack, $01
0008D58E E105                       	smpsAlterNote       $05
0008D590 E701                       	dc.b	smpsNoAttack, $01
0008D592 E101                       	smpsAlterNote       $01
0008D594 E701                       	dc.b	smpsNoAttack, $01
0008D596 E105                       	smpsAlterNote       $05
0008D598 E701                       	dc.b	smpsNoAttack, $01
0008D59A E108                       	smpsAlterNote       $08
0008D59C E701                       	dc.b	smpsNoAttack, $01
0008D59E E10C                       	smpsAlterNote       $0C
0008D5A0 E701                       	dc.b	smpsNoAttack, $01
0008D5A2 E108                       	smpsAlterNote       $08
0008D5A4 E701                       	dc.b	smpsNoAttack, $01
0008D5A6 E102                       	smpsAlterNote       $02
0008D5A8 E701                       	dc.b	smpsNoAttack, $01
0008D5AA E101                       	smpsAlterNote       $01
0008D5AC E701                       	dc.b	smpsNoAttack, $01
0008D5AE E105                       	smpsAlterNote       $05
0008D5B0 E701                       	dc.b	smpsNoAttack, $01
0008D5B2 E10B                       	smpsAlterNote       $0B
0008D5B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5B8 E108                       	smpsAlterNote       $08
0008D5BA E701                       	dc.b	smpsNoAttack, $01
0008D5BC E102                       	smpsAlterNote       $02
0008D5BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5C2 E108                       	smpsAlterNote       $08
0008D5C4 E701                       	dc.b	smpsNoAttack, $01
0008D5C6 E10B                       	smpsAlterNote       $0B
0008D5C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5CC E105                       	smpsAlterNote       $05
0008D5CE E701                       	dc.b	smpsNoAttack, $01
0008D5D0 E102                       	smpsAlterNote       $02
0008D5D2 8001                       	dc.b	nRst, $01
0008D5D4 E107                       	smpsAlterNote       $07
0008D5D6 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008D5DA E108                       	smpsAlterNote       $08
0008D5DC C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
0008D5E0 E102                       	smpsAlterNote       $02
0008D5E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5E6 E108                       	smpsAlterNote       $08
0008D5E8 E701                       	dc.b	smpsNoAttack, $01
0008D5EA E10B                       	smpsAlterNote       $0B
0008D5EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D5F0 E105                       	smpsAlterNote       $05
0008D5F2 E701                       	dc.b	smpsNoAttack, $01
0008D5F4 E101                       	smpsAlterNote       $01
0008D5F6 E701                       	dc.b	smpsNoAttack, $01
0008D5F8 E102                       	smpsAlterNote       $02
0008D5FA E701                       	dc.b	smpsNoAttack, $01
0008D5FC E108                       	smpsAlterNote       $08
0008D5FE E701                       	dc.b	smpsNoAttack, $01
0008D600 E10C                       	smpsAlterNote       $0C
0008D602 E701                       	dc.b	smpsNoAttack, $01
0008D604 E108                       	smpsAlterNote       $08
0008D606 E701                       	dc.b	smpsNoAttack, $01
0008D608 E105                       	smpsAlterNote       $05
0008D60A E701                       	dc.b	smpsNoAttack, $01
0008D60C E101                       	smpsAlterNote       $01
0008D60E E701                       	dc.b	smpsNoAttack, $01
0008D610 E105                       	smpsAlterNote       $05
0008D612 E701                       	dc.b	smpsNoAttack, $01
0008D614 E10B                       	smpsAlterNote       $0B
0008D616 E701                       	dc.b	smpsNoAttack, $01
0008D618 E10C                       	smpsAlterNote       $0C
0008D61A E701                       	dc.b	smpsNoAttack, $01
0008D61C E108                       	smpsAlterNote       $08
0008D61E E701                       	dc.b	smpsNoAttack, $01
0008D620 E102                       	smpsAlterNote       $02
0008D622 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D626 E105                       	smpsAlterNote       $05
0008D628 E701                       	dc.b	smpsNoAttack, $01
0008D62A E10B                       	smpsAlterNote       $0B
0008D62C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D630 E105                       	smpsAlterNote       $05
0008D632 E701                       	dc.b	smpsNoAttack, $01
0008D634 E102                       	smpsAlterNote       $02
0008D636 E701                       	dc.b	smpsNoAttack, $01
0008D638 E109                       	smpsAlterNote       $09
0008D63A C40A C207                  	dc.b	nG5, $0A, nF5, $07
0008D63E E108                       	smpsAlterNote       $08
0008D640 C10D                       	dc.b	nE5, $0D
0008D642 E105                       	smpsAlterNote       $05
0008D644 E701                       	dc.b	smpsNoAttack, $01
0008D646 E101                       	smpsAlterNote       $01
0008D648 E701                       	dc.b	smpsNoAttack, $01
0008D64A E102                       	smpsAlterNote       $02
0008D64C E701                       	dc.b	smpsNoAttack, $01
0008D64E E108                       	smpsAlterNote       $08
0008D650 E701                       	dc.b	smpsNoAttack, $01
0008D652 E10C                       	smpsAlterNote       $0C
0008D654 E701                       	dc.b	smpsNoAttack, $01
0008D656 E108                       	smpsAlterNote       $08
0008D658 E701                       	dc.b	smpsNoAttack, $01
0008D65A E105                       	smpsAlterNote       $05
0008D65C E701                       	dc.b	smpsNoAttack, $01
0008D65E E101                       	smpsAlterNote       $01
0008D660 E701                       	dc.b	smpsNoAttack, $01
0008D662 E105                       	smpsAlterNote       $05
0008D664 E701                       	dc.b	smpsNoAttack, $01
0008D666 E10B                       	smpsAlterNote       $0B
0008D668 E701                       	dc.b	smpsNoAttack, $01
0008D66A E10C                       	smpsAlterNote       $0C
0008D66C E701                       	dc.b	smpsNoAttack, $01
0008D66E E108                       	smpsAlterNote       $08
0008D670 E701                       	dc.b	smpsNoAttack, $01
0008D672 E102                       	smpsAlterNote       $02
0008D674 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0008D67C E10B                       	smpsAlterNote       $0B
0008D67E BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008D682 E10C                       	smpsAlterNote       $0C
0008D684 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008D688 E10B                       	smpsAlterNote       $0B
0008D68A BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0008D690 E107                       	smpsAlterNote       $07
0008D692 BF03                       	dc.b	nD5, $03
0008D694 E108                       	smpsAlterNote       $08
0008D696 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008D69A E109                       	smpsAlterNote       $09
0008D69C C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
0008D6A2 E10B                       	smpsAlterNote       $0B
0008D6A4 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D6A8 E107                       	smpsAlterNote       $07
0008D6AA BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D6AE E106                       	smpsAlterNote       $06
0008D6B0 C90D                       	dc.b	nC6, $0D
0008D6B2 E103                       	smpsAlterNote       $03
0008D6B4 E701                       	dc.b	smpsNoAttack, $01
0008D6B6 E1FF                       	smpsAlterNote       $FF
0008D6B8 E701                       	dc.b	smpsNoAttack, $01
0008D6BA E103                       	smpsAlterNote       $03
0008D6BC E701                       	dc.b	smpsNoAttack, $01
0008D6BE E109                       	smpsAlterNote       $09
0008D6C0 E701                       	dc.b	smpsNoAttack, $01
0008D6C2 E10A                       	smpsAlterNote       $0A
0008D6C4 E701                       	dc.b	smpsNoAttack, $01
0008D6C6 E106                       	smpsAlterNote       $06
0008D6C8 E701                       	dc.b	smpsNoAttack, $01
0008D6CA E100                       	smpsAlterNote       $00
0008D6CC E701                       	dc.b	smpsNoAttack, $01
0008D6CE E10C                       	smpsAlterNote       $0C
0008D6D0 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008D6D4 E10B                       	smpsAlterNote       $0B
0008D6D6 C603                       	dc.b	nA5, $03
0008D6D8 E109                       	smpsAlterNote       $09
0008D6DA C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D6DE E10B                       	smpsAlterNote       $0B
0008D6E0 C60D                       	dc.b	nA5, $0D
0008D6E2 E105                       	smpsAlterNote       $05
0008D6E4 E701                       	dc.b	smpsNoAttack, $01
0008D6E6 E104                       	smpsAlterNote       $04
0008D6E8 E701                       	dc.b	smpsNoAttack, $01
0008D6EA E108                       	smpsAlterNote       $08
0008D6EC E701                       	dc.b	smpsNoAttack, $01
0008D6EE E10E                       	smpsAlterNote       $0E
0008D6F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6F4 E10B                       	smpsAlterNote       $0B
0008D6F6 E701                       	dc.b	smpsNoAttack, $01
0008D6F8 E105                       	smpsAlterNote       $05
0008D6FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D6FE E10B                       	smpsAlterNote       $0B
0008D700 E701                       	dc.b	smpsNoAttack, $01
0008D702 E10E                       	smpsAlterNote       $0E
0008D704 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D708 E108                       	smpsAlterNote       $08
0008D70A E701                       	dc.b	smpsNoAttack, $01
0008D70C E104                       	smpsAlterNote       $04
0008D70E E701                       	dc.b	smpsNoAttack, $01
0008D710 E105                       	smpsAlterNote       $05
0008D712 E701                       	dc.b	smpsNoAttack, $01
0008D714 E10B                       	smpsAlterNote       $0B
0008D716 E701                       	dc.b	smpsNoAttack, $01
0008D718 E10F                       	smpsAlterNote       $0F
0008D71A E701                       	dc.b	smpsNoAttack, $01
0008D71C E10B                       	smpsAlterNote       $0B
0008D71E E701                       	dc.b	smpsNoAttack, $01
0008D720 E108                       	smpsAlterNote       $08
0008D722 E701                       	dc.b	smpsNoAttack, $01
0008D724 E104                       	smpsAlterNote       $04
0008D726 E701                       	dc.b	smpsNoAttack, $01
0008D728 E108                       	smpsAlterNote       $08
0008D72A E701                       	dc.b	smpsNoAttack, $01
0008D72C E10E                       	smpsAlterNote       $0E
0008D72E E701                       	dc.b	smpsNoAttack, $01
0008D730 E10F                       	smpsAlterNote       $0F
0008D732 E701                       	dc.b	smpsNoAttack, $01
0008D734 E10B                       	smpsAlterNote       $0B
0008D736 E701                       	dc.b	smpsNoAttack, $01
0008D738 E105                       	smpsAlterNote       $05
0008D73A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D73E E108                       	smpsAlterNote       $08
0008D740 E701                       	dc.b	smpsNoAttack, $01
0008D742 E10E                       	smpsAlterNote       $0E
0008D744 E701                       	dc.b	smpsNoAttack, $01
0008D746 E10F                       	smpsAlterNote       $0F
0008D748 800F                       	dc.b	nRst, $0F
0008D74A E107                       	smpsAlterNote       $07
0008D74C BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008D750 E108                       	smpsAlterNote       $08
0008D752 C103                       	dc.b	nE5, $03
0008D754 E109                       	smpsAlterNote       $09
0008D756 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0008D75C E10B                       	smpsAlterNote       $0B
0008D75E C607                       	dc.b	nA5, $07
0008D760 E107                       	smpsAlterNote       $07
0008D762 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008D766 E106                       	smpsAlterNote       $06
0008D768 C90D                       	dc.b	nC6, $0D
0008D76A E107                       	smpsAlterNote       $07
0008D76C CB03 8001                  	dc.b	nD6, $03, nRst, $01
0008D770 E10C                       	smpsAlterNote       $0C
0008D772 C704                       	dc.b	nBb5, $04
0008D774 E10B                       	smpsAlterNote       $0B
0008D776 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D77A E109                       	smpsAlterNote       $09
0008D77C C404                       	dc.b	nG5, $04
0008D77E E10B                       	smpsAlterNote       $0B
0008D780 C60D                       	dc.b	nA5, $0D
0008D782 E108                       	smpsAlterNote       $08
0008D784 E701                       	dc.b	smpsNoAttack, $01
0008D786 E105                       	smpsAlterNote       $05
0008D788 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D78C E10B                       	smpsAlterNote       $0B
0008D78E E701                       	dc.b	smpsNoAttack, $01
0008D790 E10F                       	smpsAlterNote       $0F
0008D792 E701                       	dc.b	smpsNoAttack, $01
0008D794 E10E                       	smpsAlterNote       $0E
0008D796 E701                       	dc.b	smpsNoAttack, $01
0008D798 E108                       	smpsAlterNote       $08
0008D79A E701                       	dc.b	smpsNoAttack, $01
0008D79C E104                       	smpsAlterNote       $04
0008D79E E701                       	dc.b	smpsNoAttack, $01
0008D7A0 E108                       	smpsAlterNote       $08
0008D7A2 E701                       	dc.b	smpsNoAttack, $01
0008D7A4 E10B                       	smpsAlterNote       $0B
0008D7A6 E701                       	dc.b	smpsNoAttack, $01
0008D7A8 E10F                       	smpsAlterNote       $0F
0008D7AA E701                       	dc.b	smpsNoAttack, $01
0008D7AC E10B                       	smpsAlterNote       $0B
0008D7AE E701                       	dc.b	smpsNoAttack, $01
0008D7B0 E105                       	smpsAlterNote       $05
0008D7B2 E701                       	dc.b	smpsNoAttack, $01
0008D7B4 E104                       	smpsAlterNote       $04
0008D7B6 E701                       	dc.b	smpsNoAttack, $01
0008D7B8 E108                       	smpsAlterNote       $08
0008D7BA E701                       	dc.b	smpsNoAttack, $01
0008D7BC E10E                       	smpsAlterNote       $0E
0008D7BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7C2 E10B                       	smpsAlterNote       $0B
0008D7C4 E701                       	dc.b	smpsNoAttack, $01
0008D7C6 E105                       	smpsAlterNote       $05
0008D7C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7CC E10B                       	smpsAlterNote       $0B
0008D7CE E701                       	dc.b	smpsNoAttack, $01
0008D7D0 E10E                       	smpsAlterNote       $0E
0008D7D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D7D6 E108                       	smpsAlterNote       $08
0008D7D8 E701                       	dc.b	smpsNoAttack, $01
0008D7DA E105                       	smpsAlterNote       $05
0008D7DC 8001                       	dc.b	nRst, $01
0008D7DE E109                       	smpsAlterNote       $09
0008D7E0 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008D7E4 E10B                       	smpsAlterNote       $0B
0008D7E6 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
0008D7EE E109                       	smpsAlterNote       $09
0008D7F0 C404                       	dc.b	nG5, $04
0008D7F2 E10B                       	smpsAlterNote       $0B
0008D7F4 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008D7F8 E107                       	smpsAlterNote       $07
0008D7FA BF0D                       	dc.b	nD5, $0D
0008D7FC E101                       	smpsAlterNote       $01
0008D7FE E701                       	dc.b	smpsNoAttack, $01
0008D800 E100                       	smpsAlterNote       $00
0008D802 E701                       	dc.b	smpsNoAttack, $01
0008D804 E104                       	smpsAlterNote       $04
0008D806 E701                       	dc.b	smpsNoAttack, $01
0008D808 E10A                       	smpsAlterNote       $0A
0008D80A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D80E E107                       	smpsAlterNote       $07
0008D810 E701                       	dc.b	smpsNoAttack, $01
0008D812 E101                       	smpsAlterNote       $01
0008D814 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D818 E107                       	smpsAlterNote       $07
0008D81A E701                       	dc.b	smpsNoAttack, $01
0008D81C E10A                       	smpsAlterNote       $0A
0008D81E E701                       	dc.b	smpsNoAttack, $01
0008D820 E10B                       	smpsAlterNote       $0B
0008D822 8001                       	dc.b	nRst, $01
0008D824 E108                       	smpsAlterNote       $08
0008D826 8001                       	dc.b	nRst, $01
0008D828 E109                       	smpsAlterNote       $09
0008D82A 8001 C401                  	dc.b	nRst, $01, nG5, $01
0008D82E E10B                       	smpsAlterNote       $0B
0008D830 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
0008D838 E108                       	smpsAlterNote       $08
0008D83A CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008D83E E109                       	smpsAlterNote       $09
0008D840 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008D844 E108                       	smpsAlterNote       $08
0008D846 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008D84A E106                       	smpsAlterNote       $06
0008D84C C903                       	dc.b	nC6, $03
0008D84E E109                       	smpsAlterNote       $09
0008D850 C403 8001                  	dc.b	nG5, $03, nRst, $01
0008D854 E10C                       	smpsAlterNote       $0C
0008D856 C70D                       	dc.b	nBb5, $0D
0008D858 E109                       	smpsAlterNote       $09
0008D85A E701                       	dc.b	smpsNoAttack, $01
0008D85C E105                       	smpsAlterNote       $05
0008D85E E701                       	dc.b	smpsNoAttack, $01
0008D860 E109                       	smpsAlterNote       $09
0008D862 E701                       	dc.b	smpsNoAttack, $01
0008D864 E10F                       	smpsAlterNote       $0F
0008D866 E701                       	dc.b	smpsNoAttack, $01
0008D868 E110                       	smpsAlterNote       $10
0008D86A E701                       	dc.b	smpsNoAttack, $01
0008D86C E10C                       	smpsAlterNote       $0C
0008D86E E701                       	dc.b	smpsNoAttack, $01
0008D870 E106                       	smpsAlterNote       $06
0008D872 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D876 E109                       	smpsAlterNote       $09
0008D878 E701                       	dc.b	smpsNoAttack, $01
0008D87A E10F                       	smpsAlterNote       $0F
0008D87C E701                       	dc.b	smpsNoAttack, $01
0008D87E E110                       	smpsAlterNote       $10
0008D880 8001                       	dc.b	nRst, $01
0008D882 E10B                       	smpsAlterNote       $0B
0008D884 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008D888 E109                       	smpsAlterNote       $09
0008D88A C40D                       	dc.b	nG5, $0D
0008D88C E103                       	smpsAlterNote       $03
0008D88E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D892 E106                       	smpsAlterNote       $06
0008D894 E701                       	dc.b	smpsNoAttack, $01
0008D896 E10C                       	smpsAlterNote       $0C
0008D898 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D89C E106                       	smpsAlterNote       $06
0008D89E E701                       	dc.b	smpsNoAttack, $01
0008D8A0 E103                       	smpsAlterNote       $03
0008D8A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8A6 E109                       	smpsAlterNote       $09
0008D8A8 E701                       	dc.b	smpsNoAttack, $01
0008D8AA E10D                       	smpsAlterNote       $0D
0008D8AC E701                       	dc.b	smpsNoAttack, $01
0008D8AE E10C                       	smpsAlterNote       $0C
0008D8B0 E701                       	dc.b	smpsNoAttack, $01
0008D8B2 E106                       	smpsAlterNote       $06
0008D8B4 E701                       	dc.b	smpsNoAttack, $01
0008D8B6 E102                       	smpsAlterNote       $02
0008D8B8 E701                       	dc.b	smpsNoAttack, $01
0008D8BA E103                       	smpsAlterNote       $03
0008D8BC 8001                       	dc.b	nRst, $01
0008D8BE E10B                       	smpsAlterNote       $0B
0008D8C0 C60D                       	dc.b	nA5, $0D
0008D8C2 E108                       	smpsAlterNote       $08
0008D8C4 E701                       	dc.b	smpsNoAttack, $01
0008D8C6 E104                       	smpsAlterNote       $04
0008D8C8 E701                       	dc.b	smpsNoAttack, $01
0008D8CA E108                       	smpsAlterNote       $08
0008D8CC E701                       	dc.b	smpsNoAttack, $01
0008D8CE E10B                       	smpsAlterNote       $0B
0008D8D0 E701                       	dc.b	smpsNoAttack, $01
0008D8D2 E10F                       	smpsAlterNote       $0F
0008D8D4 E701                       	dc.b	smpsNoAttack, $01
0008D8D6 E10B                       	smpsAlterNote       $0B
0008D8D8 E701                       	dc.b	smpsNoAttack, $01
0008D8DA E105                       	smpsAlterNote       $05
0008D8DC E701                       	dc.b	smpsNoAttack, $01
0008D8DE E104                       	smpsAlterNote       $04
0008D8E0 E701                       	dc.b	smpsNoAttack, $01
0008D8E2 E108                       	smpsAlterNote       $08
0008D8E4 E701                       	dc.b	smpsNoAttack, $01
0008D8E6 E10E                       	smpsAlterNote       $0E
0008D8E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8EC E10B                       	smpsAlterNote       $0B
0008D8EE E701                       	dc.b	smpsNoAttack, $01
0008D8F0 E105                       	smpsAlterNote       $05
0008D8F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D8F6 E10C                       	smpsAlterNote       $0C
0008D8F8 C70E                       	dc.b	nBb5, $0E
0008D8FA E106                       	smpsAlterNote       $06
0008D8FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D900 E10C                       	smpsAlterNote       $0C
0008D902 E701                       	dc.b	smpsNoAttack, $01
0008D904 E10F                       	smpsAlterNote       $0F
0008D906 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D90A E109                       	smpsAlterNote       $09
0008D90C E701                       	dc.b	smpsNoAttack, $01
0008D90E E105                       	smpsAlterNote       $05
0008D910 E701                       	dc.b	smpsNoAttack, $01
0008D912 E106                       	smpsAlterNote       $06
0008D914 E701                       	dc.b	smpsNoAttack, $01
0008D916 E10C                       	smpsAlterNote       $0C
0008D918 E701                       	dc.b	smpsNoAttack, $01
0008D91A E110                       	smpsAlterNote       $10
0008D91C E701                       	dc.b	smpsNoAttack, $01
0008D91E E10C                       	smpsAlterNote       $0C
0008D920 E701                       	dc.b	smpsNoAttack, $01
0008D922 E109                       	smpsAlterNote       $09
0008D924 E701                       	dc.b	smpsNoAttack, $01
0008D926 E105                       	smpsAlterNote       $05
0008D928 E701                       	dc.b	smpsNoAttack, $01
0008D92A E106                       	smpsAlterNote       $06
0008D92C 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
0008D930 E107                       	smpsAlterNote       $07
0008D932 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
0008D937 E108                       	smpsAlterNote       $08
0008D939 CD0D                       	dc.b	nE6, $0D
0008D93B E107                       	smpsAlterNote       $07
0008D93D CB0D                       	dc.b	nD6, $0D
0008D93F E104                       	smpsAlterNote       $04
0008D941 E701                       	dc.b	smpsNoAttack, $01
0008D943 E100                       	smpsAlterNote       $00
0008D945 E701                       	dc.b	smpsNoAttack, $01
0008D947 E101                       	smpsAlterNote       $01
0008D949 E701                       	dc.b	smpsNoAttack, $01
0008D94B E107                       	smpsAlterNote       $07
0008D94D E701                       	dc.b	smpsNoAttack, $01
0008D94F E10B                       	smpsAlterNote       $0B
0008D951 E701                       	dc.b	smpsNoAttack, $01
0008D953 E107                       	smpsAlterNote       $07
0008D955 E701                       	dc.b	smpsNoAttack, $01
0008D957 E104                       	smpsAlterNote       $04
0008D959 E701                       	dc.b	smpsNoAttack, $01
0008D95B E100                       	smpsAlterNote       $00
0008D95D E701                       	dc.b	smpsNoAttack, $01
0008D95F E104                       	smpsAlterNote       $04
0008D961 E701                       	dc.b	smpsNoAttack, $01
0008D963 E10A                       	smpsAlterNote       $0A
0008D965 E701                       	dc.b	smpsNoAttack, $01
0008D967 E10B                       	smpsAlterNote       $0B
0008D969 E701                       	dc.b	smpsNoAttack, $01
0008D96B E108                       	smpsAlterNote       $08
0008D96D CC0D                       	dc.b	nEb6, $0D
0008D96F E105                       	smpsAlterNote       $05
0008D971 E701                       	dc.b	smpsNoAttack, $01
0008D973 E101                       	smpsAlterNote       $01
0008D975 E701                       	dc.b	smpsNoAttack, $01
0008D977 E102                       	smpsAlterNote       $02
0008D979 E701                       	dc.b	smpsNoAttack, $01
0008D97B E108                       	smpsAlterNote       $08
0008D97D E701                       	dc.b	smpsNoAttack, $01
0008D97F E106                       	smpsAlterNote       $06
0008D981 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
0008D98D 8001                       	dc.b	nRst, $01
0008D98F E107                       	smpsAlterNote       $07
0008D991 CB0D                       	dc.b	nD6, $0D
0008D993 E104                       	smpsAlterNote       $04
0008D995 E701                       	dc.b	smpsNoAttack, $01
0008D997 E100                       	smpsAlterNote       $00
0008D999 E701                       	dc.b	smpsNoAttack, $01
0008D99B E104                       	smpsAlterNote       $04
0008D99D E701                       	dc.b	smpsNoAttack, $01
0008D99F E107                       	smpsAlterNote       $07
0008D9A1 E701                       	dc.b	smpsNoAttack, $01
0008D9A3 E10B                       	smpsAlterNote       $0B
0008D9A5 E701                       	dc.b	smpsNoAttack, $01
0008D9A7 E107                       	smpsAlterNote       $07
0008D9A9 E701                       	dc.b	smpsNoAttack, $01
0008D9AB E101                       	smpsAlterNote       $01
0008D9AD E701                       	dc.b	smpsNoAttack, $01
0008D9AF E100                       	smpsAlterNote       $00
0008D9B1 E701                       	dc.b	smpsNoAttack, $01
0008D9B3 E104                       	smpsAlterNote       $04
0008D9B5 E701                       	dc.b	smpsNoAttack, $01
0008D9B7 E10A                       	smpsAlterNote       $0A
0008D9B9 E701                       	dc.b	smpsNoAttack, $01
0008D9BB E10B                       	smpsAlterNote       $0B
0008D9BD 8001                       	dc.b	nRst, $01
0008D9BF E109                       	smpsAlterNote       $09
0008D9C1 CE0A                       	dc.b	nF6, $0A
0008D9C3 E108                       	smpsAlterNote       $08
0008D9C5 CC07                       	dc.b	nEb6, $07
0008D9C7 E106                       	smpsAlterNote       $06
0008D9C9 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
0008D9D5 E107                       	smpsAlterNote       $07
0008D9D7 CB0D                       	dc.b	nD6, $0D
0008D9D9 E101                       	smpsAlterNote       $01
0008D9DB E701                       	dc.b	smpsNoAttack, $01
0008D9DD E100                       	smpsAlterNote       $00
0008D9DF E701                       	dc.b	smpsNoAttack, $01
0008D9E1 E104                       	smpsAlterNote       $04
0008D9E3 E701                       	dc.b	smpsNoAttack, $01
0008D9E5 E10A                       	smpsAlterNote       $0A
0008D9E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9EB E107                       	smpsAlterNote       $07
0008D9ED E701                       	dc.b	smpsNoAttack, $01
0008D9EF E101                       	smpsAlterNote       $01
0008D9F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008D9F5 E107                       	smpsAlterNote       $07
0008D9F7 E701                       	dc.b	smpsNoAttack, $01
0008D9F9 E10A                       	smpsAlterNote       $0A
0008D9FB E701                       	dc.b	smpsNoAttack, $01
0008D9FD E10B                       	smpsAlterNote       $0B
0008D9FF 8001                       	dc.b	nRst, $01
0008DA01 E108                       	smpsAlterNote       $08
0008DA03 CC0D                       	dc.b	nEb6, $0D
0008DA05 E102                       	smpsAlterNote       $02
0008DA07 E701                       	dc.b	smpsNoAttack, $01
0008DA09 E101                       	smpsAlterNote       $01
0008DA0B E701                       	dc.b	smpsNoAttack, $01
0008DA0D E105                       	smpsAlterNote       $05
0008DA0F E701                       	dc.b	smpsNoAttack, $01
0008DA11 E108                       	smpsAlterNote       $08
0008DA13 8001                       	dc.b	nRst, $01
0008DA15 E106                       	smpsAlterNote       $06
0008DA17 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008DA23 8001                       	dc.b	nRst, $01
0008DA25 E107                       	smpsAlterNote       $07
0008DA27 CB0D                       	dc.b	nD6, $0D
0008DA29 E101                       	smpsAlterNote       $01
0008DA2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA2F E104                       	smpsAlterNote       $04
0008DA31 E701                       	dc.b	smpsNoAttack, $01
0008DA33 E10A                       	smpsAlterNote       $0A
0008DA35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA39 E104                       	smpsAlterNote       $04
0008DA3B E701                       	dc.b	smpsNoAttack, $01
0008DA3D E101                       	smpsAlterNote       $01
0008DA3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DA43 E107                       	smpsAlterNote       $07
0008DA45 E701                       	dc.b	smpsNoAttack, $01
0008DA47 E10B                       	smpsAlterNote       $0B
0008DA49 E701                       	dc.b	smpsNoAttack, $01
0008DA4B E10A                       	smpsAlterNote       $0A
0008DA4D E701                       	dc.b	smpsNoAttack, $01
0008DA4F E104                       	smpsAlterNote       $04
0008DA51 E701                       	dc.b	smpsNoAttack, $01
0008DA53 E100                       	smpsAlterNote       $00
0008DA55 E701                       	dc.b	smpsNoAttack, $01
0008DA57 E101                       	smpsAlterNote       $01
0008DA59 801C                       	dc.b	nRst, $1C
0008DA5D E107                       	smpsAlterNote       $07
0008DA5F BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008DA63 E603                       	smpsAlterVol        $03
0008DA65 F6F1 AD                    	smpsJump            music84_Jump03
0008DA68                            
0008DA68                            ; FM3 Data
0008DA68                            music84_FM3:
0008DA68 E0C0                       	smpsPan             panCenter, $00
0008DA6C E109                       	smpsAlterNote       $09
0008DA6E C203 8007                  	dc.b	nF5, $03, nRst, $07
0008DA72 E108                       	smpsAlterNote       $08
0008DA74 C103 800B                  	dc.b	nE5, $03, nRst, $0B
0008DA78 E10B                       	smpsAlterNote       $0B
0008DA7A BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008DA80 E040                       	smpsPan             panRight, $00
0008DA82 E110                       	smpsAlterNote       $10
0008DA84 E6F9                       	smpsAlterVol        $F9
0008DA86 C702 8001                  	dc.b	nBb5, $02, nRst, $01
0008DA8A E10F                       	smpsAlterNote       $0F
0008DA8C C603                       	dc.b	nA5, $03
0008DA8E E10D                       	smpsAlterNote       $0D
0008DA90 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008DA96 E10C                       	smpsAlterNote       $0C
0008DA98 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008DA9C E10A                       	smpsAlterNote       $0A
0008DA9E BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008DAA2 E10F                       	smpsAlterNote       $0F
0008DAA4 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008DAA8 E0C0                       	smpsPan             panCenter, $00
0008DAAC E109                       	smpsAlterNote       $09
0008DAAE E609                       	smpsAlterVol        $09
0008DAB0 B603                       	dc.b	nF4, $03
0008DAB2                            
0008DAB2                            music84_Jump02:
0008DAB2 E70A                       	dc.b	smpsNoAttack, $0A
0008DAB4 E103                       	smpsAlterNote       $03
0008DAB6 E701                       	dc.b	smpsNoAttack, $01
0008DAB8 E102                       	smpsAlterNote       $02
0008DABA E701                       	dc.b	smpsNoAttack, $01
0008DABC E106                       	smpsAlterNote       $06
0008DABE E701                       	dc.b	smpsNoAttack, $01
0008DAC0 E10C                       	smpsAlterNote       $0C
0008DAC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAC6 E109                       	smpsAlterNote       $09
0008DAC8 E701                       	dc.b	smpsNoAttack, $01
0008DACA E103                       	smpsAlterNote       $03
0008DACC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAD0 E109                       	smpsAlterNote       $09
0008DAD2 E701                       	dc.b	smpsNoAttack, $01
0008DAD4 E10C                       	smpsAlterNote       $0C
0008DAD6 E701                       	dc.b	smpsNoAttack, $01
0008DAD8 E10D                       	smpsAlterNote       $0D
0008DADA 8001                       	dc.b	nRst, $01
0008DADC E109                       	smpsAlterNote       $09
0008DADE B80D                       	dc.b	nG4, $0D
0008DAE0 E103                       	smpsAlterNote       $03
0008DAE2 E701                       	dc.b	smpsNoAttack, $01
0008DAE4 E102                       	smpsAlterNote       $02
0008DAE6 E701                       	dc.b	smpsNoAttack, $01
0008DAE8 E106                       	smpsAlterNote       $06
0008DAEA E701                       	dc.b	smpsNoAttack, $01
0008DAEC E10C                       	smpsAlterNote       $0C
0008DAEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAF2 E109                       	smpsAlterNote       $09
0008DAF4 E701                       	dc.b	smpsNoAttack, $01
0008DAF6 E103                       	smpsAlterNote       $03
0008DAF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DAFC E109                       	smpsAlterNote       $09
0008DAFE E701                       	dc.b	smpsNoAttack, $01
0008DB00 E10C                       	smpsAlterNote       $0C
0008DB02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB06 E106                       	smpsAlterNote       $06
0008DB08 E701                       	dc.b	smpsNoAttack, $01
0008DB0A E102                       	smpsAlterNote       $02
0008DB0C E701                       	dc.b	smpsNoAttack, $01
0008DB0E E103                       	smpsAlterNote       $03
0008DB10 E701                       	dc.b	smpsNoAttack, $01
0008DB12 E109                       	smpsAlterNote       $09
0008DB14 E701                       	dc.b	smpsNoAttack, $01
0008DB16 E10D                       	smpsAlterNote       $0D
0008DB18 E701                       	dc.b	smpsNoAttack, $01
0008DB1A E109                       	smpsAlterNote       $09
0008DB1C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008DB20 E10B                       	smpsAlterNote       $0B
0008DB22 BA0D                       	dc.b	nA4, $0D
0008DB24 E105                       	smpsAlterNote       $05
0008DB26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB2A E108                       	smpsAlterNote       $08
0008DB2C E701                       	dc.b	smpsNoAttack, $01
0008DB2E E10E                       	smpsAlterNote       $0E
0008DB30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB34 E108                       	smpsAlterNote       $08
0008DB36 E701                       	dc.b	smpsNoAttack, $01
0008DB38 E104                       	smpsAlterNote       $04
0008DB3A E701                       	dc.b	smpsNoAttack, $01
0008DB3C E105                       	smpsAlterNote       $05
0008DB3E E701                       	dc.b	smpsNoAttack, $01
0008DB40 E10B                       	smpsAlterNote       $0B
0008DB42 E701                       	dc.b	smpsNoAttack, $01
0008DB44 E10F                       	smpsAlterNote       $0F
0008DB46 E701                       	dc.b	smpsNoAttack, $01
0008DB48 E10B                       	smpsAlterNote       $0B
0008DB4A E701                       	dc.b	smpsNoAttack, $01
0008DB4C E108                       	smpsAlterNote       $08
0008DB4E E701                       	dc.b	smpsNoAttack, $01
0008DB50 E104                       	smpsAlterNote       $04
0008DB52 E701                       	dc.b	smpsNoAttack, $01
0008DB54 E108                       	smpsAlterNote       $08
0008DB56 E701                       	dc.b	smpsNoAttack, $01
0008DB58 E10E                       	smpsAlterNote       $0E
0008DB5A E701                       	dc.b	smpsNoAttack, $01
0008DB5C E10F                       	smpsAlterNote       $0F
0008DB5E E701                       	dc.b	smpsNoAttack, $01
0008DB60 E10B                       	smpsAlterNote       $0B
0008DB62 E701                       	dc.b	smpsNoAttack, $01
0008DB64 E105                       	smpsAlterNote       $05
0008DB66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB6A E108                       	smpsAlterNote       $08
0008DB6C E701                       	dc.b	smpsNoAttack, $01
0008DB6E E10E                       	smpsAlterNote       $0E
0008DB70 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB74 E108                       	smpsAlterNote       $08
0008DB76 E701                       	dc.b	smpsNoAttack, $01
0008DB78 E105                       	smpsAlterNote       $05
0008DB7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DB7E E10B                       	smpsAlterNote       $0B
0008DB80 E701                       	dc.b	smpsNoAttack, $01
0008DB82 E10F                       	smpsAlterNote       $0F
0008DB84 E701                       	dc.b	smpsNoAttack, $01
0008DB86 E10E                       	smpsAlterNote       $0E
0008DB88 E701                       	dc.b	smpsNoAttack, $01
0008DB8A E108                       	smpsAlterNote       $08
0008DB8C E701                       	dc.b	smpsNoAttack, $01
0008DB8E E104                       	smpsAlterNote       $04
0008DB90 E701                       	dc.b	smpsNoAttack, $01
0008DB92 E105                       	smpsAlterNote       $05
0008DB94 8001                       	dc.b	nRst, $01
0008DB96 E108                       	smpsAlterNote       $08
0008DB98 B50A                       	dc.b	nE4, $0A
0008DB9A E109                       	smpsAlterNote       $09
0008DB9C B60D                       	dc.b	nF4, $0D
0008DB9E E106                       	smpsAlterNote       $06
0008DBA0 E701                       	dc.b	smpsNoAttack, $01
0008DBA2 E103                       	smpsAlterNote       $03
0008DBA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBA8 E109                       	smpsAlterNote       $09
0008DBAA E701                       	dc.b	smpsNoAttack, $01
0008DBAC E10D                       	smpsAlterNote       $0D
0008DBAE E701                       	dc.b	smpsNoAttack, $01
0008DBB0 E10C                       	smpsAlterNote       $0C
0008DBB2 E701                       	dc.b	smpsNoAttack, $01
0008DBB4 E106                       	smpsAlterNote       $06
0008DBB6 E701                       	dc.b	smpsNoAttack, $01
0008DBB8 E102                       	smpsAlterNote       $02
0008DBBA E701                       	dc.b	smpsNoAttack, $01
0008DBBC E106                       	smpsAlterNote       $06
0008DBBE E701                       	dc.b	smpsNoAttack, $01
0008DBC0 E109                       	smpsAlterNote       $09
0008DBC2 E701                       	dc.b	smpsNoAttack, $01
0008DBC4 E10D                       	smpsAlterNote       $0D
0008DBC6 E701                       	dc.b	smpsNoAttack, $01
0008DBC8 E109                       	smpsAlterNote       $09
0008DBCA B80D                       	dc.b	nG4, $0D
0008DBCC E106                       	smpsAlterNote       $06
0008DBCE E701                       	dc.b	smpsNoAttack, $01
0008DBD0 E103                       	smpsAlterNote       $03
0008DBD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DBD6 E109                       	smpsAlterNote       $09
0008DBD8 E701                       	dc.b	smpsNoAttack, $01
0008DBDA E10D                       	smpsAlterNote       $0D
0008DBDC E701                       	dc.b	smpsNoAttack, $01
0008DBDE E10C                       	smpsAlterNote       $0C
0008DBE0 E701                       	dc.b	smpsNoAttack, $01
0008DBE2 E106                       	smpsAlterNote       $06
0008DBE4 E701                       	dc.b	smpsNoAttack, $01
0008DBE6 E102                       	smpsAlterNote       $02
0008DBE8 E701                       	dc.b	smpsNoAttack, $01
0008DBEA E106                       	smpsAlterNote       $06
0008DBEC E701                       	dc.b	smpsNoAttack, $01
0008DBEE E109                       	smpsAlterNote       $09
0008DBF0 E701                       	dc.b	smpsNoAttack, $01
0008DBF2 E10D                       	smpsAlterNote       $0D
0008DBF4 E701                       	dc.b	smpsNoAttack, $01
0008DBF6 E109                       	smpsAlterNote       $09
0008DBF8 E701                       	dc.b	smpsNoAttack, $01
0008DBFA E103                       	smpsAlterNote       $03
0008DBFC E701                       	dc.b	smpsNoAttack, $01
0008DBFE E102                       	smpsAlterNote       $02
0008DC00 E701                       	dc.b	smpsNoAttack, $01
0008DC02 E106                       	smpsAlterNote       $06
0008DC04 E701                       	dc.b	smpsNoAttack, $01
0008DC06 E10C                       	smpsAlterNote       $0C
0008DC08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC0C E109                       	smpsAlterNote       $09
0008DC0E E701                       	dc.b	smpsNoAttack, $01
0008DC10 E10B                       	smpsAlterNote       $0B
0008DC12 BA0D                       	dc.b	nA4, $0D
0008DC14 E108                       	smpsAlterNote       $08
0008DC16 E701                       	dc.b	smpsNoAttack, $01
0008DC18 E104                       	smpsAlterNote       $04
0008DC1A E701                       	dc.b	smpsNoAttack, $01
0008DC1C E108                       	smpsAlterNote       $08
0008DC1E E701                       	dc.b	smpsNoAttack, $01
0008DC20 E10B                       	smpsAlterNote       $0B
0008DC22 E701                       	dc.b	smpsNoAttack, $01
0008DC24 E10F                       	smpsAlterNote       $0F
0008DC26 E701                       	dc.b	smpsNoAttack, $01
0008DC28 E10B                       	smpsAlterNote       $0B
0008DC2A E701                       	dc.b	smpsNoAttack, $01
0008DC2C E105                       	smpsAlterNote       $05
0008DC2E E701                       	dc.b	smpsNoAttack, $01
0008DC30 E104                       	smpsAlterNote       $04
0008DC32 E701                       	dc.b	smpsNoAttack, $01
0008DC34 E108                       	smpsAlterNote       $08
0008DC36 E701                       	dc.b	smpsNoAttack, $01
0008DC38 E10E                       	smpsAlterNote       $0E
0008DC3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC3E E10B                       	smpsAlterNote       $0B
0008DC40 E701                       	dc.b	smpsNoAttack, $01
0008DC42 E105                       	smpsAlterNote       $05
0008DC44 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC48 E10B                       	smpsAlterNote       $0B
0008DC4A E701                       	dc.b	smpsNoAttack, $01
0008DC4C E10E                       	smpsAlterNote       $0E
0008DC4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DC52 E108                       	smpsAlterNote       $08
0008DC54 E701                       	dc.b	smpsNoAttack, $01
0008DC56 E104                       	smpsAlterNote       $04
0008DC58 E701                       	dc.b	smpsNoAttack, $01
0008DC5A E105                       	smpsAlterNote       $05
0008DC5C E701                       	dc.b	smpsNoAttack, $01
0008DC5E E10B                       	smpsAlterNote       $0B
0008DC60 E701                       	dc.b	smpsNoAttack, $01
0008DC62 E10F                       	smpsAlterNote       $0F
0008DC64 E701                       	dc.b	smpsNoAttack, $01
0008DC66 E10B                       	smpsAlterNote       $0B
0008DC68 E701                       	dc.b	smpsNoAttack, $01
0008DC6A E108                       	smpsAlterNote       $08
0008DC6C E701                       	dc.b	smpsNoAttack, $01
0008DC6E E105                       	smpsAlterNote       $05
0008DC70 8001                       	dc.b	nRst, $01
0008DC72 E109                       	smpsAlterNote       $09
0008DC74 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008DC78 E108                       	smpsAlterNote       $08
0008DC7A B506 8001                  	dc.b	nE4, $06, nRst, $01
0008DC7E E107                       	smpsAlterNote       $07
0008DC80 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008DC84 E108                       	smpsAlterNote       $08
0008DC86 B502 8001                  	dc.b	nE4, $02, nRst, $01
0008DC8A E109                       	smpsAlterNote       $09
0008DC8C B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
0008DC92 E10B                       	smpsAlterNote       $0B
0008DC94 BA0D                       	dc.b	nA4, $0D
0008DC96 E108                       	smpsAlterNote       $08
0008DC98 E701                       	dc.b	smpsNoAttack, $01
0008DC9A E104                       	smpsAlterNote       $04
0008DC9C E701                       	dc.b	smpsNoAttack, $01
0008DC9E E108                       	smpsAlterNote       $08
0008DCA0 E701                       	dc.b	smpsNoAttack, $01
0008DCA2 E10E                       	smpsAlterNote       $0E
0008DCA4 E701                       	dc.b	smpsNoAttack, $01
0008DCA6 E10F                       	smpsAlterNote       $0F
0008DCA8 E701                       	dc.b	smpsNoAttack, $01
0008DCAA E10B                       	smpsAlterNote       $0B
0008DCAC E701                       	dc.b	smpsNoAttack, $01
0008DCAE E105                       	smpsAlterNote       $05
0008DCB0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCB4 E108                       	smpsAlterNote       $08
0008DCB6 E701                       	dc.b	smpsNoAttack, $01
0008DCB8 E10E                       	smpsAlterNote       $0E
0008DCBA E701                       	dc.b	smpsNoAttack, $01
0008DCBC E10F                       	smpsAlterNote       $0F
0008DCBE 8001                       	dc.b	nRst, $01
0008DCC0 E109                       	smpsAlterNote       $09
0008DCC2 C20D                       	dc.b	nF5, $0D
0008DCC4 E103                       	smpsAlterNote       $03
0008DCC6 E701                       	dc.b	smpsNoAttack, $01
0008DCC8 E102                       	smpsAlterNote       $02
0008DCCA E701                       	dc.b	smpsNoAttack, $01
0008DCCC E106                       	smpsAlterNote       $06
0008DCCE E701                       	dc.b	smpsNoAttack, $01
0008DCD0 E10C                       	smpsAlterNote       $0C
0008DCD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCD6 E109                       	smpsAlterNote       $09
0008DCD8 E701                       	dc.b	smpsNoAttack, $01
0008DCDA E103                       	smpsAlterNote       $03
0008DCDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCE0 E109                       	smpsAlterNote       $09
0008DCE2 E701                       	dc.b	smpsNoAttack, $01
0008DCE4 E10C                       	smpsAlterNote       $0C
0008DCE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DCEA E106                       	smpsAlterNote       $06
0008DCEC E701                       	dc.b	smpsNoAttack, $01
0008DCEE E102                       	smpsAlterNote       $02
0008DCF0 E701                       	dc.b	smpsNoAttack, $01
0008DCF2 E103                       	smpsAlterNote       $03
0008DCF4 E701                       	dc.b	smpsNoAttack, $01
0008DCF6 E109                       	smpsAlterNote       $09
0008DCF8 E701                       	dc.b	smpsNoAttack, $01
0008DCFA E10D                       	smpsAlterNote       $0D
0008DCFC E701                       	dc.b	smpsNoAttack, $01
0008DCFE E109                       	smpsAlterNote       $09
0008DD00 E701                       	dc.b	smpsNoAttack, $01
0008DD02 E106                       	smpsAlterNote       $06
0008DD04 E701                       	dc.b	smpsNoAttack, $01
0008DD06 E102                       	smpsAlterNote       $02
0008DD08 E701                       	dc.b	smpsNoAttack, $01
0008DD0A E106                       	smpsAlterNote       $06
0008DD0C E701                       	dc.b	smpsNoAttack, $01
0008DD0E E10C                       	smpsAlterNote       $0C
0008DD10 E701                       	dc.b	smpsNoAttack, $01
0008DD12 E10D                       	smpsAlterNote       $0D
0008DD14 E701                       	dc.b	smpsNoAttack, $01
0008DD16 E109                       	smpsAlterNote       $09
0008DD18 E701                       	dc.b	smpsNoAttack, $01
0008DD1A E103                       	smpsAlterNote       $03
0008DD1C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD20 E106                       	smpsAlterNote       $06
0008DD22 E701                       	dc.b	smpsNoAttack, $01
0008DD24 E10C                       	smpsAlterNote       $0C
0008DD26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD2A E106                       	smpsAlterNote       $06
0008DD2C E701                       	dc.b	smpsNoAttack, $01
0008DD2E E103                       	smpsAlterNote       $03
0008DD30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD34 E109                       	smpsAlterNote       $09
0008DD36 E701                       	dc.b	smpsNoAttack, $01
0008DD38 E10D                       	smpsAlterNote       $0D
0008DD3A E701                       	dc.b	smpsNoAttack, $01
0008DD3C E10C                       	smpsAlterNote       $0C
0008DD3E E701                       	dc.b	smpsNoAttack, $01
0008DD40 E106                       	smpsAlterNote       $06
0008DD42 E701                       	dc.b	smpsNoAttack, $01
0008DD44 E102                       	smpsAlterNote       $02
0008DD46 E701                       	dc.b	smpsNoAttack, $01
0008DD48 E106                       	smpsAlterNote       $06
0008DD4A E701                       	dc.b	smpsNoAttack, $01
0008DD4C E109                       	smpsAlterNote       $09
0008DD4E E701                       	dc.b	smpsNoAttack, $01
0008DD50 E10D                       	smpsAlterNote       $0D
0008DD52 E701                       	dc.b	smpsNoAttack, $01
0008DD54 E109                       	smpsAlterNote       $09
0008DD56 E701                       	dc.b	smpsNoAttack, $01
0008DD58 E103                       	smpsAlterNote       $03
0008DD5A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008DD5E E109                       	smpsAlterNote       $09
0008DD60 C206                       	dc.b	nF5, $06
0008DD62 E108                       	smpsAlterNote       $08
0008DD64 C10E                       	dc.b	nE5, $0E
0008DD66 E102                       	smpsAlterNote       $02
0008DD68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD6C E108                       	smpsAlterNote       $08
0008DD6E E701                       	dc.b	smpsNoAttack, $01
0008DD70 E10B                       	smpsAlterNote       $0B
0008DD72 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD76 E105                       	smpsAlterNote       $05
0008DD78 E701                       	dc.b	smpsNoAttack, $01
0008DD7A E101                       	smpsAlterNote       $01
0008DD7C E701                       	dc.b	smpsNoAttack, $01
0008DD7E E102                       	smpsAlterNote       $02
0008DD80 E701                       	dc.b	smpsNoAttack, $01
0008DD82 E108                       	smpsAlterNote       $08
0008DD84 E701                       	dc.b	smpsNoAttack, $01
0008DD86 E10C                       	smpsAlterNote       $0C
0008DD88 E701                       	dc.b	smpsNoAttack, $01
0008DD8A E107                       	smpsAlterNote       $07
0008DD8C BF0E                       	dc.b	nD5, $0E
0008DD8E E101                       	smpsAlterNote       $01
0008DD90 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD94 E107                       	smpsAlterNote       $07
0008DD96 E701                       	dc.b	smpsNoAttack, $01
0008DD98 E10A                       	smpsAlterNote       $0A
0008DD9A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DD9E E104                       	smpsAlterNote       $04
0008DDA0 E701                       	dc.b	smpsNoAttack, $01
0008DDA2 E100                       	smpsAlterNote       $00
0008DDA4 E701                       	dc.b	smpsNoAttack, $01
0008DDA6 E104                       	smpsAlterNote       $04
0008DDA8 E701                       	dc.b	smpsNoAttack, $01
0008DDAA E107                       	smpsAlterNote       $07
0008DDAC E701                       	dc.b	smpsNoAttack, $01
0008DDAE E10B                       	smpsAlterNote       $0B
0008DDB0 E701                       	dc.b	smpsNoAttack, $01
0008DDB2 E107                       	smpsAlterNote       $07
0008DDB4 E701                       	dc.b	smpsNoAttack, $01
0008DDB6 E101                       	smpsAlterNote       $01
0008DDB8 E701                       	dc.b	smpsNoAttack, $01
0008DDBA E100                       	smpsAlterNote       $00
0008DDBC E701                       	dc.b	smpsNoAttack, $01
0008DDBE E104                       	smpsAlterNote       $04
0008DDC0 E701                       	dc.b	smpsNoAttack, $01
0008DDC2 E10A                       	smpsAlterNote       $0A
0008DDC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDC8 E107                       	smpsAlterNote       $07
0008DDCA E701                       	dc.b	smpsNoAttack, $01
0008DDCC E101                       	smpsAlterNote       $01
0008DDCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDD2 E107                       	smpsAlterNote       $07
0008DDD4 E701                       	dc.b	smpsNoAttack, $01
0008DDD6 E10A                       	smpsAlterNote       $0A
0008DDD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DDDC E104                       	smpsAlterNote       $04
0008DDDE E701                       	dc.b	smpsNoAttack, $01
0008DDE0 E100                       	smpsAlterNote       $00
0008DDE2 E701                       	dc.b	smpsNoAttack, $01
0008DDE4 E101                       	smpsAlterNote       $01
0008DDE6 E701                       	dc.b	smpsNoAttack, $01
0008DDE8 E107                       	smpsAlterNote       $07
0008DDEA E701                       	dc.b	smpsNoAttack, $01
0008DDEC E10B                       	smpsAlterNote       $0B
0008DDEE E701                       	dc.b	smpsNoAttack, $01
0008DDF0 E107                       	smpsAlterNote       $07
0008DDF2 E701                       	dc.b	smpsNoAttack, $01
0008DDF4 E104                       	smpsAlterNote       $04
0008DDF6 E701                       	dc.b	smpsNoAttack, $01
0008DDF8 E100                       	smpsAlterNote       $00
0008DDFA E701                       	dc.b	smpsNoAttack, $01
0008DDFC E104                       	smpsAlterNote       $04
0008DDFE E701                       	dc.b	smpsNoAttack, $01
0008DE00 E10A                       	smpsAlterNote       $0A
0008DE02 E701                       	dc.b	smpsNoAttack, $01
0008DE04 E10B                       	smpsAlterNote       $0B
0008DE06 E701                       	dc.b	smpsNoAttack, $01
0008DE08 E107                       	smpsAlterNote       $07
0008DE0A E701                       	dc.b	smpsNoAttack, $01
0008DE0C E101                       	smpsAlterNote       $01
0008DE0E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE12 E104                       	smpsAlterNote       $04
0008DE14 E701                       	dc.b	smpsNoAttack, $01
0008DE16 E10A                       	smpsAlterNote       $0A
0008DE18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE1C E104                       	smpsAlterNote       $04
0008DE1E E701                       	dc.b	smpsNoAttack, $01
0008DE20 E101                       	smpsAlterNote       $01
0008DE22 E701                       	dc.b	smpsNoAttack, $01
0008DE26 E107                       	smpsAlterNote       $07
0008DE28 E6FF                       	smpsAlterVol        $FF
0008DE2A BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008DE36 8004                       	dc.b	nRst, $04
0008DE3A E109                       	smpsAlterNote       $09
0008DE3C E602                       	smpsAlterVol        $02
0008DE3E B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
0008DE44 E108                       	smpsAlterNote       $08
0008DE46 B502 8001                  	dc.b	nE4, $02, nRst, $01
0008DE4A E109                       	smpsAlterNote       $09
0008DE4C B60D                       	dc.b	nF4, $0D
0008DE4E E106                       	smpsAlterNote       $06
0008DE50 E701                       	dc.b	smpsNoAttack, $01
0008DE52 E102                       	smpsAlterNote       $02
0008DE54 E701                       	dc.b	smpsNoAttack, $01
0008DE56 E106                       	smpsAlterNote       $06
0008DE58 E701                       	dc.b	smpsNoAttack, $01
0008DE5A E109                       	smpsAlterNote       $09
0008DE5C E701                       	dc.b	smpsNoAttack, $01
0008DE5E E10D                       	smpsAlterNote       $0D
0008DE60 E701                       	dc.b	smpsNoAttack, $01
0008DE62 E109                       	smpsAlterNote       $09
0008DE64 E701                       	dc.b	smpsNoAttack, $01
0008DE66 E103                       	smpsAlterNote       $03
0008DE68 E701                       	dc.b	smpsNoAttack, $01
0008DE6A E102                       	smpsAlterNote       $02
0008DE6C E701                       	dc.b	smpsNoAttack, $01
0008DE6E E106                       	smpsAlterNote       $06
0008DE70 E701                       	dc.b	smpsNoAttack, $01
0008DE72 E10C                       	smpsAlterNote       $0C
0008DE74 E701                       	dc.b	smpsNoAttack, $01
0008DE76 E10D                       	smpsAlterNote       $0D
0008DE78 8001                       	dc.b	nRst, $01
0008DE7A E109                       	smpsAlterNote       $09
0008DE7C B80D                       	dc.b	nG4, $0D
0008DE7E E106                       	smpsAlterNote       $06
0008DE80 E701                       	dc.b	smpsNoAttack, $01
0008DE82 E102                       	smpsAlterNote       $02
0008DE84 E701                       	dc.b	smpsNoAttack, $01
0008DE86 E106                       	smpsAlterNote       $06
0008DE88 E701                       	dc.b	smpsNoAttack, $01
0008DE8A E10C                       	smpsAlterNote       $0C
0008DE8C E701                       	dc.b	smpsNoAttack, $01
0008DE8E E10D                       	smpsAlterNote       $0D
0008DE90 E701                       	dc.b	smpsNoAttack, $01
0008DE92 E109                       	smpsAlterNote       $09
0008DE94 E701                       	dc.b	smpsNoAttack, $01
0008DE96 E103                       	smpsAlterNote       $03
0008DE98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DE9C E106                       	smpsAlterNote       $06
0008DE9E E701                       	dc.b	smpsNoAttack, $01
0008DEA0 E10C                       	smpsAlterNote       $0C
0008DEA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEA6 E106                       	smpsAlterNote       $06
0008DEA8 E701                       	dc.b	smpsNoAttack, $01
0008DEAA E103                       	smpsAlterNote       $03
0008DEAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DEB0 E109                       	smpsAlterNote       $09
0008DEB2 E701                       	dc.b	smpsNoAttack, $01
0008DEB4 E10D                       	smpsAlterNote       $0D
0008DEB6 E701                       	dc.b	smpsNoAttack, $01
0008DEB8 E10C                       	smpsAlterNote       $0C
0008DEBA E701                       	dc.b	smpsNoAttack, $01
0008DEBC E109                       	smpsAlterNote       $09
0008DEBE 8001                       	dc.b	nRst, $01
0008DEC0 E10B                       	smpsAlterNote       $0B
0008DEC2 BA03                       	dc.b	nA4, $03
0008DEC4 E10C                       	smpsAlterNote       $0C
0008DEC6 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
0008DECA E10B                       	smpsAlterNote       $0B
0008DECC BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
0008DED2 E10C                       	smpsAlterNote       $0C
0008DED4 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008DED8 E10B                       	smpsAlterNote       $0B
0008DEDA C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008DEE0 E10C                       	smpsAlterNote       $0C
0008DEE2 D303                       	dc.b	nBb6, $03
0008DEE4 E10B                       	smpsAlterNote       $0B
0008DEE6 D20D                       	dc.b	nA6, $0D
0008DEE8 E108                       	smpsAlterNote       $08
0008DEEA E701                       	dc.b	smpsNoAttack, $01
0008DEEC E104                       	smpsAlterNote       $04
0008DEEE E701                       	dc.b	smpsNoAttack, $01
0008DEF0 E105                       	smpsAlterNote       $05
0008DEF2 E701                       	dc.b	smpsNoAttack, $01
0008DEF4 E10B                       	smpsAlterNote       $0B
0008DEF6 E701                       	dc.b	smpsNoAttack, $01
0008DEF8 E10F                       	smpsAlterNote       $0F
0008DEFA E701                       	dc.b	smpsNoAttack, $01
0008DEFC E10B                       	smpsAlterNote       $0B
0008DEFE E701                       	dc.b	smpsNoAttack, $01
0008DF00 E108                       	smpsAlterNote       $08
0008DF02 E701                       	dc.b	smpsNoAttack, $01
0008DF04 E104                       	smpsAlterNote       $04
0008DF06 E701                       	dc.b	smpsNoAttack, $01
0008DF08 E108                       	smpsAlterNote       $08
0008DF0A E701                       	dc.b	smpsNoAttack, $01
0008DF0C E10E                       	smpsAlterNote       $0E
0008DF0E E701                       	dc.b	smpsNoAttack, $01
0008DF10 E10F                       	smpsAlterNote       $0F
0008DF12 E701                       	dc.b	smpsNoAttack, $01
0008DF14 E10B                       	smpsAlterNote       $0B
0008DF16 E701                       	dc.b	smpsNoAttack, $01
0008DF18 E105                       	smpsAlterNote       $05
0008DF1A E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008DF20 E109                       	smpsAlterNote       $09
0008DF22 CE07                       	dc.b	nF6, $07
0008DF24 E108                       	smpsAlterNote       $08
0008DF26 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008DF2A E109                       	smpsAlterNote       $09
0008DF2C CE03 8001                  	dc.b	nF6, $03, nRst, $01
0008DF30 E108                       	smpsAlterNote       $08
0008DF32 CC0D                       	dc.b	nEb6, $0D
0008DF34 E102                       	smpsAlterNote       $02
0008DF36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF3A E108                       	smpsAlterNote       $08
0008DF3C E701                       	dc.b	smpsNoAttack, $01
0008DF3E E10B                       	smpsAlterNote       $0B
0008DF40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DF44 E105                       	smpsAlterNote       $05
0008DF46 E701                       	dc.b	smpsNoAttack, $01
0008DF48 E101                       	smpsAlterNote       $01
0008DF4A E701                       	dc.b	smpsNoAttack, $01
0008DF4C E102                       	smpsAlterNote       $02
0008DF4E E701                       	dc.b	smpsNoAttack, $01
0008DF50 E108                       	smpsAlterNote       $08
0008DF52 E701                       	dc.b	smpsNoAttack, $01
0008DF54 E10C                       	smpsAlterNote       $0C
0008DF56 E701                       	dc.b	smpsNoAttack, $01
0008DF58 E108                       	smpsAlterNote       $08
0008DF5A E701                       	dc.b	smpsNoAttack, $01
0008DF5C E105                       	smpsAlterNote       $05
0008DF5E E701                       	dc.b	smpsNoAttack, $01
0008DF60 E101                       	smpsAlterNote       $01
0008DF62 E701                       	dc.b	smpsNoAttack, $01
0008DF64 E105                       	smpsAlterNote       $05
0008DF66 E701                       	dc.b	smpsNoAttack, $01
0008DF68 E10B                       	smpsAlterNote       $0B
0008DF6A E701                       	dc.b	smpsNoAttack, $01
0008DF6C E10C                       	smpsAlterNote       $0C
0008DF6E E701                       	dc.b	smpsNoAttack, $01
0008DF70 E108                       	smpsAlterNote       $08
0008DF72 E701                       	dc.b	smpsNoAttack, $01
0008DF74 E107                       	smpsAlterNote       $07
0008DF76 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0008DF80 E10B                       	smpsAlterNote       $0B
0008DF82 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008DF8C E109                       	smpsAlterNote       $09
0008DF8E C203                       	dc.b	nF5, $03
0008DF90 E108                       	smpsAlterNote       $08
0008DF92 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008DF96 E109                       	smpsAlterNote       $09
0008DF98 C20D                       	dc.b	nF5, $0D
0008DF9A E108                       	smpsAlterNote       $08
0008DF9C C10E                       	dc.b	nE5, $0E
0008DF9E E107                       	smpsAlterNote       $07
0008DFA0 BF0D                       	dc.b	nD5, $0D
0008DFA2 E104                       	smpsAlterNote       $04
0008DFA4 E701                       	dc.b	smpsNoAttack, $01
0008DFA6 E100                       	smpsAlterNote       $00
0008DFA8 E701                       	dc.b	smpsNoAttack, $01
0008DFAA E104                       	smpsAlterNote       $04
0008DFAC E701                       	dc.b	smpsNoAttack, $01
0008DFAE E107                       	smpsAlterNote       $07
0008DFB0 E701                       	dc.b	smpsNoAttack, $01
0008DFB2 E10B                       	smpsAlterNote       $0B
0008DFB4 E701                       	dc.b	smpsNoAttack, $01
0008DFB6 E107                       	smpsAlterNote       $07
0008DFB8 E701                       	dc.b	smpsNoAttack, $01
0008DFBA E101                       	smpsAlterNote       $01
0008DFBC E701                       	dc.b	smpsNoAttack, $01
0008DFBE E100                       	smpsAlterNote       $00
0008DFC0 E701                       	dc.b	smpsNoAttack, $01
0008DFC2 E104                       	smpsAlterNote       $04
0008DFC4 E701                       	dc.b	smpsNoAttack, $01
0008DFC6 E10A                       	smpsAlterNote       $0A
0008DFC8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFCC E107                       	smpsAlterNote       $07
0008DFCE E701                       	dc.b	smpsNoAttack, $01
0008DFD0 E101                       	smpsAlterNote       $01
0008DFD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFD6 E107                       	smpsAlterNote       $07
0008DFD8 E701                       	dc.b	smpsNoAttack, $01
0008DFDA E10A                       	smpsAlterNote       $0A
0008DFDC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008DFE0 E104                       	smpsAlterNote       $04
0008DFE2 E701                       	dc.b	smpsNoAttack, $01
0008DFE4 E100                       	smpsAlterNote       $00
0008DFE6 E701                       	dc.b	smpsNoAttack, $01
0008DFE8 E101                       	smpsAlterNote       $01
0008DFEA E701                       	dc.b	smpsNoAttack, $01
0008DFEC E107                       	smpsAlterNote       $07
0008DFEE E701                       	dc.b	smpsNoAttack, $01
0008DFF0 E10B                       	smpsAlterNote       $0B
0008DFF2 E701                       	dc.b	smpsNoAttack, $01
0008DFF4 E107                       	smpsAlterNote       $07
0008DFF6 E701                       	dc.b	smpsNoAttack, $01
0008DFF8 E104                       	smpsAlterNote       $04
0008DFFA E701                       	dc.b	smpsNoAttack, $01
0008DFFC E100                       	smpsAlterNote       $00
0008DFFE E701                       	dc.b	smpsNoAttack, $01
0008E000 E104                       	smpsAlterNote       $04
0008E002 E701                       	dc.b	smpsNoAttack, $01
0008E004 E10A                       	smpsAlterNote       $0A
0008E006 E701                       	dc.b	smpsNoAttack, $01
0008E008 E10B                       	smpsAlterNote       $0B
0008E00A E701                       	dc.b	smpsNoAttack, $01
0008E00C E107                       	smpsAlterNote       $07
0008E00E E701                       	dc.b	smpsNoAttack, $01
0008E010 E101                       	smpsAlterNote       $01
0008E012 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E016 E104                       	smpsAlterNote       $04
0008E018 E701                       	dc.b	smpsNoAttack, $01
0008E01A E10A                       	smpsAlterNote       $0A
0008E01C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E020 E104                       	smpsAlterNote       $04
0008E022 E701                       	dc.b	smpsNoAttack, $01
0008E024 E101                       	smpsAlterNote       $01
0008E026 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E02A E107                       	smpsAlterNote       $07
0008E02C E701                       	dc.b	smpsNoAttack, $01
0008E02E E10B                       	smpsAlterNote       $0B
0008E030 E701                       	dc.b	smpsNoAttack, $01
0008E032 E10A                       	smpsAlterNote       $0A
0008E034 E701                       	dc.b	smpsNoAttack, $01
0008E036 E104                       	smpsAlterNote       $04
0008E038 E701                       	dc.b	smpsNoAttack, $01
0008E03A E100                       	smpsAlterNote       $00
0008E03C E701                       	dc.b	smpsNoAttack, $01
0008E03E E104                       	smpsAlterNote       $04
0008E040 E701                       	dc.b	smpsNoAttack, $01
0008E042 E107                       	smpsAlterNote       $07
0008E044 E701                       	dc.b	smpsNoAttack, $01
0008E046 E10B                       	smpsAlterNote       $0B
0008E048 E701                       	dc.b	smpsNoAttack, $01
0008E04A E107                       	smpsAlterNote       $07
0008E04C E701                       	dc.b	smpsNoAttack, $01
0008E04E E101                       	smpsAlterNote       $01
0008E050 E701                       	dc.b	smpsNoAttack, $01
0008E052 E100                       	smpsAlterNote       $00
0008E054 E701                       	dc.b	smpsNoAttack, $01
0008E056 E104                       	smpsAlterNote       $04
0008E058 E701                       	dc.b	smpsNoAttack, $01
0008E05A E10A                       	smpsAlterNote       $0A
0008E05C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E060 E107                       	smpsAlterNote       $07
0008E062 E701                       	dc.b	smpsNoAttack, $01
0008E064 E101                       	smpsAlterNote       $01
0008E066 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E06A E107                       	smpsAlterNote       $07
0008E06C E701                       	dc.b	smpsNoAttack, $01
0008E06E E10A                       	smpsAlterNote       $0A
0008E070 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E074 E104                       	smpsAlterNote       $04
0008E076 E701                       	dc.b	smpsNoAttack, $01
0008E078 E100                       	smpsAlterNote       $00
0008E07A E701                       	dc.b	smpsNoAttack, $01
0008E07C E101                       	smpsAlterNote       $01
0008E07E E701                       	dc.b	smpsNoAttack, $01
0008E080 E107                       	smpsAlterNote       $07
0008E082 E701                       	dc.b	smpsNoAttack, $01
0008E084 E10B                       	smpsAlterNote       $0B
0008E086 E701                       	dc.b	smpsNoAttack, $01
0008E088 E107                       	smpsAlterNote       $07
0008E08A E701                       	dc.b	smpsNoAttack, $01
0008E08C E104                       	smpsAlterNote       $04
0008E08E E701                       	dc.b	smpsNoAttack, $01
0008E090 E100                       	smpsAlterNote       $00
0008E092 E701                       	dc.b	smpsNoAttack, $01
0008E094 E101                       	smpsAlterNote       $01
0008E096 8001                       	dc.b	nRst, $01
0008E098 E109                       	smpsAlterNote       $09
0008E09A C20D                       	dc.b	nF5, $0D
0008E09C E106                       	smpsAlterNote       $06
0008E09E E701                       	dc.b	smpsNoAttack, $01
0008E0A0 E102                       	smpsAlterNote       $02
0008E0A2 E701                       	dc.b	smpsNoAttack, $01
0008E0A4 E106                       	smpsAlterNote       $06
0008E0A6 E701                       	dc.b	smpsNoAttack, $01
0008E0A8 E10C                       	smpsAlterNote       $0C
0008E0AA E701                       	dc.b	smpsNoAttack, $01
0008E0AC E10D                       	smpsAlterNote       $0D
0008E0AE E701                       	dc.b	smpsNoAttack, $01
0008E0B0 E109                       	smpsAlterNote       $09
0008E0B2 E701                       	dc.b	smpsNoAttack, $01
0008E0B4 E103                       	smpsAlterNote       $03
0008E0B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0BA E106                       	smpsAlterNote       $06
0008E0BC E701                       	dc.b	smpsNoAttack, $01
0008E0BE E10C                       	smpsAlterNote       $0C
0008E0C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0C4 E106                       	smpsAlterNote       $06
0008E0C6 E701                       	dc.b	smpsNoAttack, $01
0008E0C8 E103                       	smpsAlterNote       $03
0008E0CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0CE E109                       	smpsAlterNote       $09
0008E0D0 E701                       	dc.b	smpsNoAttack, $01
0008E0D2 E10D                       	smpsAlterNote       $0D
0008E0D4 E701                       	dc.b	smpsNoAttack, $01
0008E0D6 E10C                       	smpsAlterNote       $0C
0008E0D8 E701                       	dc.b	smpsNoAttack, $01
0008E0DA E109                       	smpsAlterNote       $09
0008E0DC 8001                       	dc.b	nRst, $01
0008E0DE E108                       	smpsAlterNote       $08
0008E0E0 C10D                       	dc.b	nE5, $0D
0008E0E2 E109                       	smpsAlterNote       $09
0008E0E4 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
0008E0E8 E108                       	smpsAlterNote       $08
0008E0EA C10D                       	dc.b	nE5, $0D
0008E0EC E102                       	smpsAlterNote       $02
0008E0EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E0F2 E105                       	smpsAlterNote       $05
0008E0F4 E701                       	dc.b	smpsNoAttack, $01
0008E0F6 E108                       	smpsAlterNote       $08
0008E0F8 8001                       	dc.b	nRst, $01
0008E0FA E107                       	smpsAlterNote       $07
0008E0FC BF0D                       	dc.b	nD5, $0D
0008E0FE E108                       	smpsAlterNote       $08
0008E100 C107                       	dc.b	nE5, $07
0008E102 E109                       	smpsAlterNote       $09
0008E104 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
0008E10A E10B                       	smpsAlterNote       $0B
0008E10C C603                       	dc.b	nA5, $03
0008E10E E10C                       	smpsAlterNote       $0C
0008E110 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008E116 E10B                       	smpsAlterNote       $0B
0008E118 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
0008E11E E109                       	smpsAlterNote       $09
0008E120 D003                       	dc.b	nG6, $03
0008E122 E108                       	smpsAlterNote       $08
0008E124 CD02 8001                  	dc.b	nE6, $02, nRst, $01
0008E128 E10B                       	smpsAlterNote       $0B
0008E12A C601 8001                  	dc.b	nA5, $01, nRst, $01
0008E12E E108                       	smpsAlterNote       $08
0008E130 C102                       	dc.b	nE5, $02
0008E134 E10C                       	smpsAlterNote       $0C
0008E136 E6FB                       	smpsAlterVol        $FB
0008E138 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
0008E144 8001                       	dc.b	nRst, $01
0008E146 E10B                       	smpsAlterNote       $0B
0008E148 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008E150 E107                       	smpsAlterNote       $07
0008E152 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008E156 E10B                       	smpsAlterNote       $0B
0008E158 A203                       	dc.b	nA2, $03
0008E15A E109                       	smpsAlterNote       $09
0008E15C AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008E160 E108                       	smpsAlterNote       $08
0008E162 A906                       	dc.b	nE3, $06
0008E164 E107                       	smpsAlterNote       $07
0008E166 A703 8001                  	dc.b	nD3, $03, nRst, $01
0008E16A E106                       	smpsAlterNote       $06
0008E16C A503                       	dc.b	nC3, $03
0008E16E E10C                       	smpsAlterNote       $0C
0008E170 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E174 E10B                       	smpsAlterNote       $0B
0008E176 A203 8004                  	dc.b	nA2, $03, nRst, $04
0008E17A E11B                       	smpsAlterNote       $1B
0008E17C C401                       	dc.b	nG5, $01
0008E17E E1F4                       	smpsAlterNote       $F4
0008E180 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008E183 E106                       	smpsAlterNote       $06
0008E185 E701                       	dc.b	smpsNoAttack, $01
0008E187 E10F                       	smpsAlterNote       $0F
0008E189 E701                       	dc.b	smpsNoAttack, $01
0008E18B E1E4                       	smpsAlterNote       $E4
0008E18D E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008E190 E1F6                       	smpsAlterNote       $F6
0008E192 E701                       	dc.b	smpsNoAttack, $01
0008E194 E108                       	smpsAlterNote       $08
0008E196 E701                       	dc.b	smpsNoAttack, $01
0008E198 E10B                       	smpsAlterNote       $0B
0008E19A E706                       	dc.b	smpsNoAttack, $06
0008E19C E105                       	smpsAlterNote       $05
0008E19E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1A2 E108                       	smpsAlterNote       $08
0008E1A4 E701                       	dc.b	smpsNoAttack, $01
0008E1A6 E10E                       	smpsAlterNote       $0E
0008E1A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1AC E108                       	smpsAlterNote       $08
0008E1AE E701                       	dc.b	smpsNoAttack, $01
0008E1B0 E105                       	smpsAlterNote       $05
0008E1B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1B6 E10B                       	smpsAlterNote       $0B
0008E1B8 E701                       	dc.b	smpsNoAttack, $01
0008E1BA E10F                       	smpsAlterNote       $0F
0008E1BC E701                       	dc.b	smpsNoAttack, $01
0008E1BE E10E                       	smpsAlterNote       $0E
0008E1C0 E701                       	dc.b	smpsNoAttack, $01
0008E1C2 E108                       	smpsAlterNote       $08
0008E1C4 E701                       	dc.b	smpsNoAttack, $01
0008E1C6 E104                       	smpsAlterNote       $04
0008E1C8 E701                       	dc.b	smpsNoAttack, $01
0008E1CA E108                       	smpsAlterNote       $08
0008E1CC E701                       	dc.b	smpsNoAttack, $01
0008E1CE E10B                       	smpsAlterNote       $0B
0008E1D0 E701                       	dc.b	smpsNoAttack, $01
0008E1D2 E10F                       	smpsAlterNote       $0F
0008E1D4 E701                       	dc.b	smpsNoAttack, $01
0008E1D6 E10B                       	smpsAlterNote       $0B
0008E1D8 E701                       	dc.b	smpsNoAttack, $01
0008E1DA E105                       	smpsAlterNote       $05
0008E1DC E701                       	dc.b	smpsNoAttack, $01
0008E1DE E104                       	smpsAlterNote       $04
0008E1E0 E701                       	dc.b	smpsNoAttack, $01
0008E1E2 E108                       	smpsAlterNote       $08
0008E1E4 E701                       	dc.b	smpsNoAttack, $01
0008E1E6 E10E                       	smpsAlterNote       $0E
0008E1E8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1EC E10B                       	smpsAlterNote       $0B
0008E1EE E701                       	dc.b	smpsNoAttack, $01
0008E1F0 E105                       	smpsAlterNote       $05
0008E1F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E1F6 E10B                       	smpsAlterNote       $0B
0008E1F8 E701                       	dc.b	smpsNoAttack, $01
0008E1FA E10E                       	smpsAlterNote       $0E
0008E1FC E701                       	dc.b	smpsNoAttack, $01
0008E1FE E10F                       	smpsAlterNote       $0F
0008E200 8001                       	dc.b	nRst, $01
0008E202 E109                       	smpsAlterNote       $09
0008E204 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008E20A E108                       	smpsAlterNote       $08
0008E20C C101 8001                  	dc.b	nE5, $01, nRst, $01
0008E210 E109                       	smpsAlterNote       $09
0008E212 C202                       	dc.b	nF5, $02
0008E214 E108                       	smpsAlterNote       $08
0008E216 C102                       	dc.b	nE5, $02
0008E218 E107                       	smpsAlterNote       $07
0008E21A BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008E21E E108                       	smpsAlterNote       $08
0008E220 C101 8001                  	dc.b	nE5, $01, nRst, $01
0008E224 E107                       	smpsAlterNote       $07
0008E226 BF02                       	dc.b	nD5, $02
0008E228 E106                       	smpsAlterNote       $06
0008E22A BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008E22E E107                       	smpsAlterNote       $07
0008E230 BF01 8001                  	dc.b	nD5, $01, nRst, $01
0008E234 E106                       	smpsAlterNote       $06
0008E236 BD02                       	dc.b	nC5, $02
0008E238 E10C                       	smpsAlterNote       $0C
0008E23A BB02                       	dc.b	nBb4, $02
0008E23C E106                       	smpsAlterNote       $06
0008E23E BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008E242 E10C                       	smpsAlterNote       $0C
0008E244 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008E248 E10B                       	smpsAlterNote       $0B
0008E24A BA02                       	dc.b	nA4, $02
0008E24C E10C                       	smpsAlterNote       $0C
0008E24E BB02                       	dc.b	nBb4, $02
0008E250 E10B                       	smpsAlterNote       $0B
0008E252 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008E25C E108                       	smpsAlterNote       $08
0008E25E B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
0008E266 E107                       	smpsAlterNote       $07
0008E268 BE02                       	dc.b	nCs5, $02
0008E26A E10B                       	smpsAlterNote       $0B
0008E26C BA02                       	dc.b	nA4, $02
0008E26E E109                       	smpsAlterNote       $09
0008E270 B802 8001                  	dc.b	nG4, $02, nRst, $01
0008E274 E108                       	smpsAlterNote       $08
0008E276 B501 8001                  	dc.b	nE4, $01, nRst, $01
0008E27A E10B                       	smpsAlterNote       $0B
0008E27C AE02                       	dc.b	nA3, $02
0008E27E E10C                       	smpsAlterNote       $0C
0008E280 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
0008E28C E10B                       	smpsAlterNote       $0B
0008E28E A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
0008E296 E107                       	smpsAlterNote       $07
0008E298 A706 8001                  	dc.b	nD3, $06, nRst, $01
0008E29C E10B                       	smpsAlterNote       $0B
0008E29E A203                       	dc.b	nA2, $03
0008E2A0 E109                       	smpsAlterNote       $09
0008E2A2 AA03 8001                  	dc.b	nF3, $03, nRst, $01
0008E2A6 E108                       	smpsAlterNote       $08
0008E2A8 A906 8001                  	dc.b	nE3, $06, nRst, $01
0008E2AC E107                       	smpsAlterNote       $07
0008E2AE A702 8001                  	dc.b	nD3, $02, nRst, $01
0008E2B2 E106                       	smpsAlterNote       $06
0008E2B4 A503                       	dc.b	nC3, $03
0008E2B6 E10C                       	smpsAlterNote       $0C
0008E2B8 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E2BE E107                       	smpsAlterNote       $07
0008E2C0 B20D                       	dc.b	nCs4, $0D
0008E2C2 E104                       	smpsAlterNote       $04
0008E2C4 E701                       	dc.b	smpsNoAttack, $01
0008E2C6 E100                       	smpsAlterNote       $00
0008E2C8 E701                       	dc.b	smpsNoAttack, $01
0008E2CA E104                       	smpsAlterNote       $04
0008E2CC E701                       	dc.b	smpsNoAttack, $01
0008E2CE E10A                       	smpsAlterNote       $0A
0008E2D0 E701                       	dc.b	smpsNoAttack, $01
0008E2D2 E10B                       	smpsAlterNote       $0B
0008E2D4 E701                       	dc.b	smpsNoAttack, $01
0008E2D6 E107                       	smpsAlterNote       $07
0008E2D8 E701                       	dc.b	smpsNoAttack, $01
0008E2DA E101                       	smpsAlterNote       $01
0008E2DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E2E0 E104                       	smpsAlterNote       $04
0008E2E2 E701                       	dc.b	smpsNoAttack, $01
0008E2E4 E10A                       	smpsAlterNote       $0A
0008E2E6 E701                       	dc.b	smpsNoAttack, $01
0008E2E8 E10B                       	smpsAlterNote       $0B
0008E2EA 8001                       	dc.b	nRst, $01
0008E2EC E107                       	smpsAlterNote       $07
0008E2EE B30D                       	dc.b	nD4, $0D
0008E2F0 E104                       	smpsAlterNote       $04
0008E2F2 E701                       	dc.b	smpsNoAttack, $01
0008E2F4 E100                       	smpsAlterNote       $00
0008E2F6 E701                       	dc.b	smpsNoAttack, $01
0008E2F8 E104                       	smpsAlterNote       $04
0008E2FA E701                       	dc.b	smpsNoAttack, $01
0008E2FC E10A                       	smpsAlterNote       $0A
0008E2FE E701                       	dc.b	smpsNoAttack, $01
0008E300 E10B                       	smpsAlterNote       $0B
0008E302 E701                       	dc.b	smpsNoAttack, $01
0008E304 E107                       	smpsAlterNote       $07
0008E306 E701                       	dc.b	smpsNoAttack, $01
0008E308 E101                       	smpsAlterNote       $01
0008E30A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E30E E104                       	smpsAlterNote       $04
0008E310 E701                       	dc.b	smpsNoAttack, $01
0008E312 E10A                       	smpsAlterNote       $0A
0008E314 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E318 E104                       	smpsAlterNote       $04
0008E31A E701                       	dc.b	smpsNoAttack, $01
0008E31C E101                       	smpsAlterNote       $01
0008E31E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E322 E107                       	smpsAlterNote       $07
0008E324 E701                       	dc.b	smpsNoAttack, $01
0008E326 E10B                       	smpsAlterNote       $0B
0008E328 E701                       	dc.b	smpsNoAttack, $01
0008E32A E10A                       	smpsAlterNote       $0A
0008E32C E701                       	dc.b	smpsNoAttack, $01
0008E32E E107                       	smpsAlterNote       $07
0008E330 8001                       	dc.b	nRst, $01
0008E332 E108                       	smpsAlterNote       $08
0008E334 B50D                       	dc.b	nE4, $0D
0008E336 E102                       	smpsAlterNote       $02
0008E338 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E33C E105                       	smpsAlterNote       $05
0008E33E E701                       	dc.b	smpsNoAttack, $01
0008E340 E10B                       	smpsAlterNote       $0B
0008E342 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E346 E105                       	smpsAlterNote       $05
0008E348 E701                       	dc.b	smpsNoAttack, $01
0008E34A E102                       	smpsAlterNote       $02
0008E34C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E350 E108                       	smpsAlterNote       $08
0008E352 E701                       	dc.b	smpsNoAttack, $01
0008E354 E10C                       	smpsAlterNote       $0C
0008E356 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E35A E107                       	smpsAlterNote       $07
0008E35C B30D                       	dc.b	nD4, $0D
0008E35E E101                       	smpsAlterNote       $01
0008E360 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E364 E104                       	smpsAlterNote       $04
0008E366 E701                       	dc.b	smpsNoAttack, $01
0008E368 E10A                       	smpsAlterNote       $0A
0008E36A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E36E E104                       	smpsAlterNote       $04
0008E370 E701                       	dc.b	smpsNoAttack, $01
0008E372 E101                       	smpsAlterNote       $01
0008E374 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E378 E107                       	smpsAlterNote       $07
0008E37A E701                       	dc.b	smpsNoAttack, $01
0008E37C E10B                       	smpsAlterNote       $0B
0008E37E E701                       	dc.b	smpsNoAttack, $01
0008E380 E10A                       	smpsAlterNote       $0A
0008E382 E701                       	dc.b	smpsNoAttack, $01
0008E384 E104                       	smpsAlterNote       $04
0008E386 E701                       	dc.b	smpsNoAttack, $01
0008E388 E100                       	smpsAlterNote       $00
0008E38A E701                       	dc.b	smpsNoAttack, $01
0008E38C E104                       	smpsAlterNote       $04
0008E38E E701                       	dc.b	smpsNoAttack, $01
0008E390 E107                       	smpsAlterNote       $07
0008E392 E701                       	dc.b	smpsNoAttack, $01
0008E394 E10B                       	smpsAlterNote       $0B
0008E396 E701                       	dc.b	smpsNoAttack, $01
0008E398 E107                       	smpsAlterNote       $07
0008E39A E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
0008E39E E101                       	smpsAlterNote       $01
0008E3A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3A4 E107                       	smpsAlterNote       $07
0008E3A6 E701                       	dc.b	smpsNoAttack, $01
0008E3A8 E10A                       	smpsAlterNote       $0A
0008E3AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3AE E104                       	smpsAlterNote       $04
0008E3B0 E701                       	dc.b	smpsNoAttack, $01
0008E3B2 E100                       	smpsAlterNote       $00
0008E3B4 E701                       	dc.b	smpsNoAttack, $01
0008E3B6 E101                       	smpsAlterNote       $01
0008E3B8 E701                       	dc.b	smpsNoAttack, $01
0008E3BA E107                       	smpsAlterNote       $07
0008E3BC E701                       	dc.b	smpsNoAttack, $01
0008E3BE E10B                       	smpsAlterNote       $0B
0008E3C0 E701                       	dc.b	smpsNoAttack, $01
0008E3C2 E107                       	smpsAlterNote       $07
0008E3C4 B30E                       	dc.b	nD4, $0E
0008E3C6 E101                       	smpsAlterNote       $01
0008E3C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3CC E107                       	smpsAlterNote       $07
0008E3CE E701                       	dc.b	smpsNoAttack, $01
0008E3D0 E10A                       	smpsAlterNote       $0A
0008E3D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E3D6 E104                       	smpsAlterNote       $04
0008E3D8 E701                       	dc.b	smpsNoAttack, $01
0008E3DA E100                       	smpsAlterNote       $00
0008E3DC E701                       	dc.b	smpsNoAttack, $01
0008E3DE E101                       	smpsAlterNote       $01
0008E3E0 E701                       	dc.b	smpsNoAttack, $01
0008E3E2 E107                       	smpsAlterNote       $07
0008E3E4 E701                       	dc.b	smpsNoAttack, $01
0008E3E6 E10B                       	smpsAlterNote       $0B
0008E3E8 E701                       	dc.b	smpsNoAttack, $01
0008E3EA E107                       	smpsAlterNote       $07
0008E3EC E701                       	dc.b	smpsNoAttack, $01
0008E3EE E104                       	smpsAlterNote       $04
0008E3F0 E701                       	dc.b	smpsNoAttack, $01
0008E3F2 E100                       	smpsAlterNote       $00
0008E3F4 E701                       	dc.b	smpsNoAttack, $01
0008E3F6 E104                       	smpsAlterNote       $04
0008E3F8 E701                       	dc.b	smpsNoAttack, $01
0008E3FA E10A                       	smpsAlterNote       $0A
0008E3FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E400 E107                       	smpsAlterNote       $07
0008E402 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0008E406 E104                       	smpsAlterNote       $04
0008E408 E701                       	dc.b	smpsNoAttack, $01
0008E40A E100                       	smpsAlterNote       $00
0008E40C E701                       	dc.b	smpsNoAttack, $01
0008E40E E101                       	smpsAlterNote       $01
0008E410 E701                       	dc.b	smpsNoAttack, $01
0008E412 E107                       	smpsAlterNote       $07
0008E414 E701                       	dc.b	smpsNoAttack, $01
0008E416 E10B                       	smpsAlterNote       $0B
0008E418 E701                       	dc.b	smpsNoAttack, $01
0008E41A E107                       	smpsAlterNote       $07
0008E41C E701                       	dc.b	smpsNoAttack, $01
0008E41E E104                       	smpsAlterNote       $04
0008E420 E701                       	dc.b	smpsNoAttack, $01
0008E422 E100                       	smpsAlterNote       $00
0008E424 E701                       	dc.b	smpsNoAttack, $01
0008E426 E104                       	smpsAlterNote       $04
0008E428 E701                       	dc.b	smpsNoAttack, $01
0008E42A E10A                       	smpsAlterNote       $0A
0008E42C E701                       	dc.b	smpsNoAttack, $01
0008E42E E10B                       	smpsAlterNote       $0B
0008E430 E701                       	dc.b	smpsNoAttack, $01
0008E434 E6FF                       	smpsAlterVol        $FF
0008E436 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
0008E442 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
0008E44A E109                       	smpsAlterNote       $09
0008E44C E601                       	smpsAlterVol        $01
0008E44E B60D                       	dc.b	nF4, $0D
0008E450 E106                       	smpsAlterNote       $06
0008E452 E701                       	dc.b	smpsNoAttack, $01
0008E454 E102                       	smpsAlterNote       $02
0008E456 E701                       	dc.b	smpsNoAttack, $01
0008E458 E106                       	smpsAlterNote       $06
0008E45A E701                       	dc.b	smpsNoAttack, $01
0008E45C E109                       	smpsAlterNote       $09
0008E45E E701                       	dc.b	smpsNoAttack, $01
0008E460 E10D                       	smpsAlterNote       $0D
0008E462 E701                       	dc.b	smpsNoAttack, $01
0008E464 E109                       	smpsAlterNote       $09
0008E466 E701                       	dc.b	smpsNoAttack, $01
0008E468 E103                       	smpsAlterNote       $03
0008E46A E701                       	dc.b	smpsNoAttack, $01
0008E46C E102                       	smpsAlterNote       $02
0008E46E E701                       	dc.b	smpsNoAttack, $01
0008E470 E106                       	smpsAlterNote       $06
0008E472 E701                       	dc.b	smpsNoAttack, $01
0008E474 E10C                       	smpsAlterNote       $0C
0008E476 E701                       	dc.b	smpsNoAttack, $01
0008E478 E10D                       	smpsAlterNote       $0D
0008E47A 8001                       	dc.b	nRst, $01
0008E47C E109                       	smpsAlterNote       $09
0008E47E B80D                       	dc.b	nG4, $0D
0008E480 E106                       	smpsAlterNote       $06
0008E482 E701                       	dc.b	smpsNoAttack, $01
0008E484 E102                       	smpsAlterNote       $02
0008E486 E701                       	dc.b	smpsNoAttack, $01
0008E488 E106                       	smpsAlterNote       $06
0008E48A E701                       	dc.b	smpsNoAttack, $01
0008E48C E109                       	smpsAlterNote       $09
0008E48E E701                       	dc.b	smpsNoAttack, $01
0008E490 E10D                       	smpsAlterNote       $0D
0008E492 E701                       	dc.b	smpsNoAttack, $01
0008E494 E109                       	smpsAlterNote       $09
0008E496 E701                       	dc.b	smpsNoAttack, $01
0008E498 E103                       	smpsAlterNote       $03
0008E49A E701                       	dc.b	smpsNoAttack, $01
0008E49C E102                       	smpsAlterNote       $02
0008E49E E701                       	dc.b	smpsNoAttack, $01
0008E4A0 E106                       	smpsAlterNote       $06
0008E4A2 E701                       	dc.b	smpsNoAttack, $01
0008E4A4 E10C                       	smpsAlterNote       $0C
0008E4A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E4AA E106                       	smpsAlterNote       $06
0008E4AC E701                       	dc.b	smpsNoAttack, $01
0008E4AE E103                       	smpsAlterNote       $03
0008E4B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E4B4 E109                       	smpsAlterNote       $09
0008E4B6 E701                       	dc.b	smpsNoAttack, $01
0008E4B8 E10D                       	smpsAlterNote       $0D
0008E4BA E701                       	dc.b	smpsNoAttack, $01
0008E4BC E10C                       	smpsAlterNote       $0C
0008E4BE E701                       	dc.b	smpsNoAttack, $01
0008E4C0 E109                       	smpsAlterNote       $09
0008E4C2 8001                       	dc.b	nRst, $01
0008E4C4 E10B                       	smpsAlterNote       $0B
0008E4C6 BA0D                       	dc.b	nA4, $0D
0008E4C8 E105                       	smpsAlterNote       $05
0008E4CA E701                       	dc.b	smpsNoAttack, $01
0008E4CC E104                       	smpsAlterNote       $04
0008E4CE E701                       	dc.b	smpsNoAttack, $01
0008E4D0 E108                       	smpsAlterNote       $08
0008E4D2 E701                       	dc.b	smpsNoAttack, $01
0008E4D4 E10E                       	smpsAlterNote       $0E
0008E4D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E4DA E10B                       	smpsAlterNote       $0B
0008E4DC E701                       	dc.b	smpsNoAttack, $01
0008E4DE E105                       	smpsAlterNote       $05
0008E4E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E4E4 E10B                       	smpsAlterNote       $0B
0008E4E6 E701                       	dc.b	smpsNoAttack, $01
0008E4E8 E10E                       	smpsAlterNote       $0E
0008E4EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E4EE E108                       	smpsAlterNote       $08
0008E4F0 E701                       	dc.b	smpsNoAttack, $01
0008E4F2 E104                       	smpsAlterNote       $04
0008E4F4 E701                       	dc.b	smpsNoAttack, $01
0008E4F6 E105                       	smpsAlterNote       $05
0008E4F8 E701                       	dc.b	smpsNoAttack, $01
0008E4FA E10B                       	smpsAlterNote       $0B
0008E4FC E701                       	dc.b	smpsNoAttack, $01
0008E4FE E10F                       	smpsAlterNote       $0F
0008E500 E701                       	dc.b	smpsNoAttack, $01
0008E502 E10B                       	smpsAlterNote       $0B
0008E504 E701                       	dc.b	smpsNoAttack, $01
0008E506 E108                       	smpsAlterNote       $08
0008E508 E701                       	dc.b	smpsNoAttack, $01
0008E50A E104                       	smpsAlterNote       $04
0008E50C E701                       	dc.b	smpsNoAttack, $01
0008E50E E108                       	smpsAlterNote       $08
0008E510 E701                       	dc.b	smpsNoAttack, $01
0008E512 E10E                       	smpsAlterNote       $0E
0008E514 E701                       	dc.b	smpsNoAttack, $01
0008E516 E10F                       	smpsAlterNote       $0F
0008E518 E701                       	dc.b	smpsNoAttack, $01
0008E51A E10B                       	smpsAlterNote       $0B
0008E51C E701                       	dc.b	smpsNoAttack, $01
0008E51E E105                       	smpsAlterNote       $05
0008E520 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E524 E108                       	smpsAlterNote       $08
0008E526 E701                       	dc.b	smpsNoAttack, $01
0008E528 E10E                       	smpsAlterNote       $0E
0008E52A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E52E E108                       	smpsAlterNote       $08
0008E530 E701                       	dc.b	smpsNoAttack, $01
0008E532 E105                       	smpsAlterNote       $05
0008E534 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E538 E108                       	smpsAlterNote       $08
0008E53A B50A 8001                  	dc.b	nE4, $0A, nRst, $01
0008E53E E109                       	smpsAlterNote       $09
0008E540 B60D                       	dc.b	nF4, $0D
0008E542 E103                       	smpsAlterNote       $03
0008E544 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E548 E106                       	smpsAlterNote       $06
0008E54A E701                       	dc.b	smpsNoAttack, $01
0008E54C E10C                       	smpsAlterNote       $0C
0008E54E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E552 E106                       	smpsAlterNote       $06
0008E554 E701                       	dc.b	smpsNoAttack, $01
0008E556 E103                       	smpsAlterNote       $03
0008E558 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E55C E109                       	smpsAlterNote       $09
0008E55E E701                       	dc.b	smpsNoAttack, $01
0008E560 E10D                       	smpsAlterNote       $0D
0008E562 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E566 E109                       	smpsAlterNote       $09
0008E568 B80D                       	dc.b	nG4, $0D
0008E56A E103                       	smpsAlterNote       $03
0008E56C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E570 E109                       	smpsAlterNote       $09
0008E572 E701                       	dc.b	smpsNoAttack, $01
0008E574 E10C                       	smpsAlterNote       $0C
0008E576 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E57A E106                       	smpsAlterNote       $06
0008E57C E701                       	dc.b	smpsNoAttack, $01
0008E57E E102                       	smpsAlterNote       $02
0008E580 E701                       	dc.b	smpsNoAttack, $01
0008E582 E103                       	smpsAlterNote       $03
0008E584 E701                       	dc.b	smpsNoAttack, $01
0008E586 E109                       	smpsAlterNote       $09
0008E588 E701                       	dc.b	smpsNoAttack, $01
0008E58A E10D                       	smpsAlterNote       $0D
0008E58C E701                       	dc.b	smpsNoAttack, $01
0008E58E E109                       	smpsAlterNote       $09
0008E590 E701                       	dc.b	smpsNoAttack, $01
0008E592 E106                       	smpsAlterNote       $06
0008E594 E701                       	dc.b	smpsNoAttack, $01
0008E596 E102                       	smpsAlterNote       $02
0008E598 E701                       	dc.b	smpsNoAttack, $01
0008E59A E106                       	smpsAlterNote       $06
0008E59C E701                       	dc.b	smpsNoAttack, $01
0008E59E E10C                       	smpsAlterNote       $0C
0008E5A0 E701                       	dc.b	smpsNoAttack, $01
0008E5A2 E10D                       	smpsAlterNote       $0D
0008E5A4 E701                       	dc.b	smpsNoAttack, $01
0008E5A6 E109                       	smpsAlterNote       $09
0008E5A8 E701                       	dc.b	smpsNoAttack, $01
0008E5AA E10B                       	smpsAlterNote       $0B
0008E5AC BA0D                       	dc.b	nA4, $0D
0008E5AE E108                       	smpsAlterNote       $08
0008E5B0 E701                       	dc.b	smpsNoAttack, $01
0008E5B2 E105                       	smpsAlterNote       $05
0008E5B4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5B8 E10B                       	smpsAlterNote       $0B
0008E5BA E701                       	dc.b	smpsNoAttack, $01
0008E5BC E10F                       	smpsAlterNote       $0F
0008E5BE E701                       	dc.b	smpsNoAttack, $01
0008E5C0 E10E                       	smpsAlterNote       $0E
0008E5C2 E701                       	dc.b	smpsNoAttack, $01
0008E5C4 E108                       	smpsAlterNote       $08
0008E5C6 E701                       	dc.b	smpsNoAttack, $01
0008E5C8 E104                       	smpsAlterNote       $04
0008E5CA E701                       	dc.b	smpsNoAttack, $01
0008E5CC E108                       	smpsAlterNote       $08
0008E5CE E701                       	dc.b	smpsNoAttack, $01
0008E5D0 E10B                       	smpsAlterNote       $0B
0008E5D2 E701                       	dc.b	smpsNoAttack, $01
0008E5D4 E10F                       	smpsAlterNote       $0F
0008E5D6 E701                       	dc.b	smpsNoAttack, $01
0008E5D8 E10B                       	smpsAlterNote       $0B
0008E5DA E701                       	dc.b	smpsNoAttack, $01
0008E5DC E105                       	smpsAlterNote       $05
0008E5DE E701                       	dc.b	smpsNoAttack, $01
0008E5E0 E104                       	smpsAlterNote       $04
0008E5E2 E701                       	dc.b	smpsNoAttack, $01
0008E5E4 E108                       	smpsAlterNote       $08
0008E5E6 E701                       	dc.b	smpsNoAttack, $01
0008E5E8 E10E                       	smpsAlterNote       $0E
0008E5EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5EE E10B                       	smpsAlterNote       $0B
0008E5F0 E701                       	dc.b	smpsNoAttack, $01
0008E5F2 E105                       	smpsAlterNote       $05
0008E5F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E5F8 E10B                       	smpsAlterNote       $0B
0008E5FA E701                       	dc.b	smpsNoAttack, $01
0008E5FC E10E                       	smpsAlterNote       $0E
0008E5FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E602 E108                       	smpsAlterNote       $08
0008E604 E701                       	dc.b	smpsNoAttack, $01
0008E606 E105                       	smpsAlterNote       $05
0008E608 8001                       	dc.b	nRst, $01
0008E60A E109                       	smpsAlterNote       $09
0008E60C B60A                       	dc.b	nF4, $0A
0008E60E E108                       	smpsAlterNote       $08
0008E610 B507                       	dc.b	nE4, $07
0008E612 E107                       	smpsAlterNote       $07
0008E614 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0008E618 E108                       	smpsAlterNote       $08
0008E61A B503                       	dc.b	nE4, $03
0008E61C E109                       	smpsAlterNote       $09
0008E61E B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
0008E626 E10B                       	smpsAlterNote       $0B
0008E628 BA0D                       	dc.b	nA4, $0D
0008E62A E108                       	smpsAlterNote       $08
0008E62C E701                       	dc.b	smpsNoAttack, $01
0008E62E E104                       	smpsAlterNote       $04
0008E630 E701                       	dc.b	smpsNoAttack, $01
0008E632 E108                       	smpsAlterNote       $08
0008E634 E701                       	dc.b	smpsNoAttack, $01
0008E636 E10B                       	smpsAlterNote       $0B
0008E638 E701                       	dc.b	smpsNoAttack, $01
0008E63A E10F                       	smpsAlterNote       $0F
0008E63C E701                       	dc.b	smpsNoAttack, $01
0008E63E E10B                       	smpsAlterNote       $0B
0008E640 E701                       	dc.b	smpsNoAttack, $01
0008E642 E105                       	smpsAlterNote       $05
0008E644 E701                       	dc.b	smpsNoAttack, $01
0008E646 E104                       	smpsAlterNote       $04
0008E648 E701                       	dc.b	smpsNoAttack, $01
0008E64A E108                       	smpsAlterNote       $08
0008E64C E701                       	dc.b	smpsNoAttack, $01
0008E64E E10E                       	smpsAlterNote       $0E
0008E650 E701                       	dc.b	smpsNoAttack, $01
0008E652 E10F                       	smpsAlterNote       $0F
0008E654 8001                       	dc.b	nRst, $01
0008E656 E109                       	smpsAlterNote       $09
0008E658 C20D                       	dc.b	nF5, $0D
0008E65A E106                       	smpsAlterNote       $06
0008E65C E701                       	dc.b	smpsNoAttack, $01
0008E65E E102                       	smpsAlterNote       $02
0008E660 E701                       	dc.b	smpsNoAttack, $01
0008E662 E106                       	smpsAlterNote       $06
0008E664 E701                       	dc.b	smpsNoAttack, $01
0008E666 E109                       	smpsAlterNote       $09
0008E668 E701                       	dc.b	smpsNoAttack, $01
0008E66A E10D                       	smpsAlterNote       $0D
0008E66C E701                       	dc.b	smpsNoAttack, $01
0008E66E E109                       	smpsAlterNote       $09
0008E670 E701                       	dc.b	smpsNoAttack, $01
0008E672 E103                       	smpsAlterNote       $03
0008E674 E701                       	dc.b	smpsNoAttack, $01
0008E676 E102                       	smpsAlterNote       $02
0008E678 E701                       	dc.b	smpsNoAttack, $01
0008E67A E106                       	smpsAlterNote       $06
0008E67C E701                       	dc.b	smpsNoAttack, $01
0008E67E E10C                       	smpsAlterNote       $0C
0008E680 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E684 E109                       	smpsAlterNote       $09
0008E686 E701                       	dc.b	smpsNoAttack, $01
0008E688 E103                       	smpsAlterNote       $03
0008E68A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E68E E109                       	smpsAlterNote       $09
0008E690 E701                       	dc.b	smpsNoAttack, $01
0008E692 E10C                       	smpsAlterNote       $0C
0008E694 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E698 E106                       	smpsAlterNote       $06
0008E69A E701                       	dc.b	smpsNoAttack, $01
0008E69C E102                       	smpsAlterNote       $02
0008E69E E701                       	dc.b	smpsNoAttack, $01
0008E6A0 E103                       	smpsAlterNote       $03
0008E6A2 E701                       	dc.b	smpsNoAttack, $01
0008E6A4 E109                       	smpsAlterNote       $09
0008E6A6 E701                       	dc.b	smpsNoAttack, $01
0008E6A8 E10D                       	smpsAlterNote       $0D
0008E6AA E701                       	dc.b	smpsNoAttack, $01
0008E6AC E109                       	smpsAlterNote       $09
0008E6AE E701                       	dc.b	smpsNoAttack, $01
0008E6B0 E106                       	smpsAlterNote       $06
0008E6B2 E701                       	dc.b	smpsNoAttack, $01
0008E6B4 E102                       	smpsAlterNote       $02
0008E6B6 E701                       	dc.b	smpsNoAttack, $01
0008E6B8 E106                       	smpsAlterNote       $06
0008E6BA E701                       	dc.b	smpsNoAttack, $01
0008E6BC E10C                       	smpsAlterNote       $0C
0008E6BE E701                       	dc.b	smpsNoAttack, $01
0008E6C0 E10D                       	smpsAlterNote       $0D
0008E6C2 E701                       	dc.b	smpsNoAttack, $01
0008E6C4 E109                       	smpsAlterNote       $09
0008E6C6 E701                       	dc.b	smpsNoAttack, $01
0008E6C8 E103                       	smpsAlterNote       $03
0008E6CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6CE E106                       	smpsAlterNote       $06
0008E6D0 E701                       	dc.b	smpsNoAttack, $01
0008E6D2 E10C                       	smpsAlterNote       $0C
0008E6D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6D8 E106                       	smpsAlterNote       $06
0008E6DA E701                       	dc.b	smpsNoAttack, $01
0008E6DC E103                       	smpsAlterNote       $03
0008E6DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E6E2 E109                       	smpsAlterNote       $09
0008E6E4 E701                       	dc.b	smpsNoAttack, $01
0008E6E6 E10D                       	smpsAlterNote       $0D
0008E6E8 E701                       	dc.b	smpsNoAttack, $01
0008E6EA E10C                       	smpsAlterNote       $0C
0008E6EC E701                       	dc.b	smpsNoAttack, $01
0008E6EE E106                       	smpsAlterNote       $06
0008E6F0 E701                       	dc.b	smpsNoAttack, $01
0008E6F2 E103                       	smpsAlterNote       $03
0008E6F4 8001                       	dc.b	nRst, $01
0008E6F6 E109                       	smpsAlterNote       $09
0008E6F8 C206 8001                  	dc.b	nF5, $06, nRst, $01
0008E6FE E10C                       	smpsAlterNote       $0C
0008E700 E601                       	smpsAlterVol        $01
0008E702 BB0D                       	dc.b	nBb4, $0D
0008E704 E106                       	smpsAlterNote       $06
0008E706 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E70A E109                       	smpsAlterNote       $09
0008E70C E701                       	dc.b	smpsNoAttack, $01
0008E70E E10F                       	smpsAlterNote       $0F
0008E710 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E714 E109                       	smpsAlterNote       $09
0008E716 E701                       	dc.b	smpsNoAttack, $01
0008E718 E106                       	smpsAlterNote       $06
0008E71A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E71E E10C                       	smpsAlterNote       $0C
0008E720 E701                       	dc.b	smpsNoAttack, $01
0008E722 E110                       	smpsAlterNote       $10
0008E724 E701                       	dc.b	smpsNoAttack, $01
0008E726 E10F                       	smpsAlterNote       $0F
0008E728 E701                       	dc.b	smpsNoAttack, $01
0008E72A E109                       	smpsAlterNote       $09
0008E72C E701                       	dc.b	smpsNoAttack, $01
0008E72E E105                       	smpsAlterNote       $05
0008E730 E701                       	dc.b	smpsNoAttack, $01
0008E732 E106                       	smpsAlterNote       $06
0008E734 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0008E738 E103                       	smpsAlterNote       $03
0008E73A E701                       	dc.b	smpsNoAttack, $01
0008E73C E1FF                       	smpsAlterNote       $FF
0008E73E E701                       	dc.b	smpsNoAttack, $01
0008E740 E103                       	smpsAlterNote       $03
0008E742 E701                       	dc.b	smpsNoAttack, $01
0008E744 E106                       	smpsAlterNote       $06
0008E746 E701                       	dc.b	smpsNoAttack, $01
0008E748 E10A                       	smpsAlterNote       $0A
0008E74A E701                       	dc.b	smpsNoAttack, $01
0008E74C E106                       	smpsAlterNote       $06
0008E74E E701                       	dc.b	smpsNoAttack, $01
0008E750 E100                       	smpsAlterNote       $00
0008E752 E701                       	dc.b	smpsNoAttack, $01
0008E754 E1FF                       	smpsAlterNote       $FF
0008E756 E701                       	dc.b	smpsNoAttack, $01
0008E758 E103                       	smpsAlterNote       $03
0008E75A E701                       	dc.b	smpsNoAttack, $01
0008E75C E109                       	smpsAlterNote       $09
0008E75E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E762 E106                       	smpsAlterNote       $06
0008E764 E701                       	dc.b	smpsNoAttack, $01
0008E766 E100                       	smpsAlterNote       $00
0008E768 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E76C E107                       	smpsAlterNote       $07
0008E76E BF0E                       	dc.b	nD5, $0E
0008E770 E101                       	smpsAlterNote       $01
0008E772 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E776 E107                       	smpsAlterNote       $07
0008E778 E701                       	dc.b	smpsNoAttack, $01
0008E77A E10A                       	smpsAlterNote       $0A
0008E77C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E780 E104                       	smpsAlterNote       $04
0008E782 E701                       	dc.b	smpsNoAttack, $01
0008E784 E100                       	smpsAlterNote       $00
0008E786 E701                       	dc.b	smpsNoAttack, $01
0008E788 E101                       	smpsAlterNote       $01
0008E78A E701                       	dc.b	smpsNoAttack, $01
0008E78C E107                       	smpsAlterNote       $07
0008E78E E701                       	dc.b	smpsNoAttack, $01
0008E790 E10B                       	smpsAlterNote       $0B
0008E792 E701                       	dc.b	smpsNoAttack, $01
0008E794 E107                       	smpsAlterNote       $07
0008E796 E701                       	dc.b	smpsNoAttack, $01
0008E798 E104                       	smpsAlterNote       $04
0008E79A E701                       	dc.b	smpsNoAttack, $01
0008E79C E100                       	smpsAlterNote       $00
0008E79E E701                       	dc.b	smpsNoAttack, $01
0008E7A0 E101                       	smpsAlterNote       $01
0008E7A2 8001                       	dc.b	nRst, $01
0008E7A4 E108                       	smpsAlterNote       $08
0008E7A6 C10C                       	dc.b	nE5, $0C
0008E7A8 E109                       	smpsAlterNote       $09
0008E7AA C201 8001                  	dc.b	nF5, $01, nRst, $01
0008E7AE E10A                       	smpsAlterNote       $0A
0008E7B0 8001                       	dc.b	nRst, $01
0008E7B2 E109                       	smpsAlterNote       $09
0008E7B4 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0008E7B8 E106                       	smpsAlterNote       $06
0008E7BA E701                       	dc.b	smpsNoAttack, $01
0008E7BC E102                       	smpsAlterNote       $02
0008E7BE E701                       	dc.b	smpsNoAttack, $01
0008E7C0 E103                       	smpsAlterNote       $03
0008E7C2 E701                       	dc.b	smpsNoAttack, $01
0008E7C4 E109                       	smpsAlterNote       $09
0008E7C6 E701                       	dc.b	smpsNoAttack, $01
0008E7C8 E10D                       	smpsAlterNote       $0D
0008E7CA E701                       	dc.b	smpsNoAttack, $01
0008E7CC E109                       	smpsAlterNote       $09
0008E7CE E701                       	dc.b	smpsNoAttack, $01
0008E7D0 E106                       	smpsAlterNote       $06
0008E7D2 E701                       	dc.b	smpsNoAttack, $01
0008E7D4 E102                       	smpsAlterNote       $02
0008E7D6 E701                       	dc.b	smpsNoAttack, $01
0008E7D8 E106                       	smpsAlterNote       $06
0008E7DA E701                       	dc.b	smpsNoAttack, $01
0008E7DC E10C                       	smpsAlterNote       $0C
0008E7DE E701                       	dc.b	smpsNoAttack, $01
0008E7E0 E10D                       	smpsAlterNote       $0D
0008E7E2 E701                       	dc.b	smpsNoAttack, $01
0008E7E4 E109                       	smpsAlterNote       $09
0008E7E6 C40D                       	dc.b	nG5, $0D
0008E7E8 E106                       	smpsAlterNote       $06
0008E7EA E701                       	dc.b	smpsNoAttack, $01
0008E7EC E102                       	smpsAlterNote       $02
0008E7EE E701                       	dc.b	smpsNoAttack, $01
0008E7F0 E103                       	smpsAlterNote       $03
0008E7F2 E701                       	dc.b	smpsNoAttack, $01
0008E7F4 E109                       	smpsAlterNote       $09
0008E7F6 E701                       	dc.b	smpsNoAttack, $01
0008E7F8 E108                       	smpsAlterNote       $08
0008E7FA C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
0008E806 E109                       	smpsAlterNote       $09
0008E808 C20D                       	dc.b	nF5, $0D
0008E80A E106                       	smpsAlterNote       $06
0008E80C E701                       	dc.b	smpsNoAttack, $01
0008E80E E102                       	smpsAlterNote       $02
0008E810 E701                       	dc.b	smpsNoAttack, $01
0008E812 E106                       	smpsAlterNote       $06
0008E814 E701                       	dc.b	smpsNoAttack, $01
0008E816 E109                       	smpsAlterNote       $09
0008E818 E701                       	dc.b	smpsNoAttack, $01
0008E81A E10D                       	smpsAlterNote       $0D
0008E81C E701                       	dc.b	smpsNoAttack, $01
0008E81E E109                       	smpsAlterNote       $09
0008E820 E701                       	dc.b	smpsNoAttack, $01
0008E822 E103                       	smpsAlterNote       $03
0008E824 E701                       	dc.b	smpsNoAttack, $01
0008E826 E102                       	smpsAlterNote       $02
0008E828 E701                       	dc.b	smpsNoAttack, $01
0008E82A E106                       	smpsAlterNote       $06
0008E82C E701                       	dc.b	smpsNoAttack, $01
0008E82E E10C                       	smpsAlterNote       $0C
0008E830 E701                       	dc.b	smpsNoAttack, $01
0008E832 E10D                       	smpsAlterNote       $0D
0008E834 8001                       	dc.b	nRst, $01
0008E836 E112                       	smpsAlterNote       $12
0008E838 C401                       	dc.b	nG5, $01
0008E83A E1EB                       	smpsAlterNote       $EB
0008E83C E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0008E83F E1FD                       	smpsAlterNote       $FD
0008E841 E701                       	dc.b	smpsNoAttack, $01
0008E843 E10F                       	smpsAlterNote       $0F
0008E845 E701                       	dc.b	smpsNoAttack, $01
0008E847 E118                       	smpsAlterNote       $18
0008E849 E701                       	dc.b	smpsNoAttack, $01
0008E84B E1ED                       	smpsAlterNote       $ED
0008E84D E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008E850 E1FF                       	smpsAlterNote       $FF
0008E852 E701                       	dc.b	smpsNoAttack, $01
0008E854 E10B                       	smpsAlterNote       $0B
0008E856 E703                       	dc.b	smpsNoAttack, $03
0008E858 E109                       	smpsAlterNote       $09
0008E85A C407                       	dc.b	nG5, $07
0008E85C E108                       	smpsAlterNote       $08
0008E85E C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
0008E86A E109                       	smpsAlterNote       $09
0008E86C C20D                       	dc.b	nF5, $0D
0008E86E E103                       	smpsAlterNote       $03
0008E870 E701                       	dc.b	smpsNoAttack, $01
0008E872 E102                       	smpsAlterNote       $02
0008E874 E701                       	dc.b	smpsNoAttack, $01
0008E876 E106                       	smpsAlterNote       $06
0008E878 E701                       	dc.b	smpsNoAttack, $01
0008E87A E10C                       	smpsAlterNote       $0C
0008E87C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E880 E109                       	smpsAlterNote       $09
0008E882 E701                       	dc.b	smpsNoAttack, $01
0008E884 E103                       	smpsAlterNote       $03
0008E886 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E88A E109                       	smpsAlterNote       $09
0008E88C E701                       	dc.b	smpsNoAttack, $01
0008E88E E10C                       	smpsAlterNote       $0C
0008E890 E701                       	dc.b	smpsNoAttack, $01
0008E892 E10D                       	smpsAlterNote       $0D
0008E894 8001                       	dc.b	nRst, $01
0008E896 E10B                       	smpsAlterNote       $0B
0008E898 C609 8001                  	dc.b	nA5, $09, nRst, $01
0008E89C E109                       	smpsAlterNote       $09
0008E89E B806 8001                  	dc.b	nG4, $06, nRst, $01
0008E8A2 E108                       	smpsAlterNote       $08
0008E8A4 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0008E8B0 8001                       	dc.b	nRst, $01
0008E8B2 E109                       	smpsAlterNote       $09
0008E8B4 C20D                       	dc.b	nF5, $0D
0008E8B6 E103                       	smpsAlterNote       $03
0008E8B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8BC E106                       	smpsAlterNote       $06
0008E8BE E701                       	dc.b	smpsNoAttack, $01
0008E8C0 E10C                       	smpsAlterNote       $0C
0008E8C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8C6 E106                       	smpsAlterNote       $06
0008E8C8 E701                       	dc.b	smpsNoAttack, $01
0008E8CA E103                       	smpsAlterNote       $03
0008E8CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E8D0 E109                       	smpsAlterNote       $09
0008E8D2 E701                       	dc.b	smpsNoAttack, $01
0008E8D4 E10D                       	smpsAlterNote       $0D
0008E8D6 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008E8DC E108                       	smpsAlterNote       $08
0008E8DE E6FF                       	smpsAlterVol        $FF
0008E8E0 A806                       	dc.b	nEb3, $06
0008E8E2 E10C                       	smpsAlterNote       $0C
0008E8E4 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0008E8E8 E108                       	smpsAlterNote       $08
0008E8EA A803                       	dc.b	nEb3, $03
0008E8EC E109                       	smpsAlterNote       $09
0008E8EE AC03 8001                  	dc.b	nG3, $03, nRst, $01
0008E8F2 E10C                       	smpsAlterNote       $0C
0008E8F4 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0008E8FE E109                       	smpsAlterNote       $09
0008E900 E602                       	smpsAlterVol        $02
0008E902 B604                       	dc.b	nF4, $04
0008E904 E602                       	smpsAlterVol        $02
0008E906 F6F1 AA                    	smpsJump            music84_Jump02
0008E909                            
0008E909                            ; FM4 Data
0008E909                            music84_FM4:
0008E90B E040                       	smpsPan             panRight, $00
0008E90D 8003                       	dc.b	nRst, $03
0008E90F E10F                       	smpsAlterNote       $0F
0008E911 C603 8008                  	dc.b	nA5, $03, nRst, $08
0008E915 E10D                       	smpsAlterNote       $0D
0008E917 C403 800A                  	dc.b	nG5, $03, nRst, $0A
0008E91B E10C                       	smpsAlterNote       $0C
0008E91D C103 8004                  	dc.b	nE5, $03, nRst, $04
0008E923 E6FE                       	smpsAlterVol        $FE
0008E925 E110                       	smpsAlterNote       $10
0008E927 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008E92B E10F                       	smpsAlterNote       $0F
0008E92D C602 8001                  	dc.b	nA5, $02, nRst, $01
0008E931 E10D                       	smpsAlterNote       $0D
0008E933 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0008E93C E10C                       	smpsAlterNote       $0C
0008E93E C103                       	dc.b	nE5, $03
0008E940 E10A                       	smpsAlterNote       $0A
0008E942 BD03 8001                  	dc.b	nC5, $03, nRst, $01
0008E948 03                         	dc.b	$03
0008E949                            
0008E949                            music84_Jump01:
0008E949 E10B                       	smpsAlterNote       $0B
0008E94B BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008E94F E10C                       	smpsAlterNote       $0C
0008E951 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008E955 E10D                       	smpsAlterNote       $0D
0008E957 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008E961 E10B                       	smpsAlterNote       $0B
0008E963 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008E967 E107                       	smpsAlterNote       $07
0008E969 E701                       	dc.b	smpsNoAttack, $01
0008E96B E103                       	smpsAlterNote       $03
0008E96D E701                       	dc.b	smpsNoAttack, $01
0008E96F E104                       	smpsAlterNote       $04
0008E971 E701                       	dc.b	smpsNoAttack, $01
0008E973 E10A                       	smpsAlterNote       $0A
0008E975 E701                       	dc.b	smpsNoAttack, $01
0008E977 E10E                       	smpsAlterNote       $0E
0008E979 E701                       	dc.b	smpsNoAttack, $01
0008E97B E10A                       	smpsAlterNote       $0A
0008E97D E701                       	dc.b	smpsNoAttack, $01
0008E97F E107                       	smpsAlterNote       $07
0008E981 E701                       	dc.b	smpsNoAttack, $01
0008E983 E104                       	smpsAlterNote       $04
0008E985 8001                       	dc.b	nRst, $01
0008E987 E110                       	smpsAlterNote       $10
0008E989 C703                       	dc.b	nBb5, $03
0008E98B E10F                       	smpsAlterNote       $0F
0008E98D C603 8001                  	dc.b	nA5, $03, nRst, $01
0008E991 E10D                       	smpsAlterNote       $0D
0008E993 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
0008E999 E10C                       	smpsAlterNote       $0C
0008E99B E701                       	dc.b	smpsNoAttack, $01
0008E99D E108                       	smpsAlterNote       $08
0008E99F E701                       	dc.b	smpsNoAttack, $01
0008E9A1 E10C                       	smpsAlterNote       $0C
0008E9A3 E701                       	dc.b	smpsNoAttack, $01
0008E9A5 E10F                       	smpsAlterNote       $0F
0008E9A7 E701                       	dc.b	smpsNoAttack, $01
0008E9A9 E113                       	smpsAlterNote       $13
0008E9AB E701                       	dc.b	smpsNoAttack, $01
0008E9AD E10F                       	smpsAlterNote       $0F
0008E9AF E701                       	dc.b	smpsNoAttack, $01
0008E9B1 E109                       	smpsAlterNote       $09
0008E9B3 E701                       	dc.b	smpsNoAttack, $01
0008E9B5 E108                       	smpsAlterNote       $08
0008E9B7 E701                       	dc.b	smpsNoAttack, $01
0008E9B9 E10C                       	smpsAlterNote       $0C
0008E9BB E701                       	dc.b	smpsNoAttack, $01
0008E9BD E112                       	smpsAlterNote       $12
0008E9BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9C3 E10C                       	smpsAlterNote       $0C
0008E9C5 E701                       	dc.b	smpsNoAttack, $01
0008E9C7 E109                       	smpsAlterNote       $09
0008E9C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008E9CD E10F                       	smpsAlterNote       $0F
0008E9CF E701                       	dc.b	smpsNoAttack, $01
0008E9D1 E113                       	smpsAlterNote       $13
0008E9D3 E701                       	dc.b	smpsNoAttack, $01
0008E9D5 E112                       	smpsAlterNote       $12
0008E9D7 E701                       	dc.b	smpsNoAttack, $01
0008E9D9 E10C                       	smpsAlterNote       $0C
0008E9DB E701                       	dc.b	smpsNoAttack, $01
0008E9DD E108                       	smpsAlterNote       $08
0008E9DF E701                       	dc.b	smpsNoAttack, $01
0008E9E1 E10C                       	smpsAlterNote       $0C
0008E9E3 E701                       	dc.b	smpsNoAttack, $01
0008E9E5 E10F                       	smpsAlterNote       $0F
0008E9E7 E701                       	dc.b	smpsNoAttack, $01
0008E9E9 E113                       	smpsAlterNote       $13
0008E9EB E701                       	dc.b	smpsNoAttack, $01
0008E9ED E10F                       	smpsAlterNote       $0F
0008E9EF E701                       	dc.b	smpsNoAttack, $01
0008E9F1 E109                       	smpsAlterNote       $09
0008E9F3 E701                       	dc.b	smpsNoAttack, $01
0008E9F5 E108                       	smpsAlterNote       $08
0008E9F7 E701                       	dc.b	smpsNoAttack, $01
0008E9F9 E10C                       	smpsAlterNote       $0C
0008E9FB E701                       	dc.b	smpsNoAttack, $01
0008E9FD E112                       	smpsAlterNote       $12
0008E9FF E701                       	dc.b	smpsNoAttack, $01
0008EA01 E113                       	smpsAlterNote       $13
0008EA03 800F                       	dc.b	nRst, $0F
0008EA05 E10B                       	smpsAlterNote       $0B
0008EA07 BF03                       	dc.b	nD5, $03
0008EA09 E10C                       	smpsAlterNote       $0C
0008EA0B C103 8001                  	dc.b	nE5, $03, nRst, $01
0008EA0F E10D                       	smpsAlterNote       $0D
0008EA11 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
0008EA19 E10B                       	smpsAlterNote       $0B
0008EA1B BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
0008EA25 E110                       	smpsAlterNote       $10
0008EA27 C704                       	dc.b	nBb5, $04
0008EA29 E10F                       	smpsAlterNote       $0F
0008EA2B C604 8001                  	dc.b	nA5, $04, nRst, $01
0008EA2F E10D                       	smpsAlterNote       $0D
0008EA31 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008EA37 E109                       	smpsAlterNote       $09
0008EA39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA3D E10F                       	smpsAlterNote       $0F
0008EA3F E701                       	dc.b	smpsNoAttack, $01
0008EA41 E112                       	smpsAlterNote       $12
0008EA43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA47 E10C                       	smpsAlterNote       $0C
0008EA49 E701                       	dc.b	smpsNoAttack, $01
0008EA4B E108                       	smpsAlterNote       $08
0008EA4D E701                       	dc.b	smpsNoAttack, $01
0008EA4F E109                       	smpsAlterNote       $09
0008EA51 E701                       	dc.b	smpsNoAttack, $01
0008EA53 E10F                       	smpsAlterNote       $0F
0008EA55 E701                       	dc.b	smpsNoAttack, $01
0008EA57 E113                       	smpsAlterNote       $13
0008EA59 E701                       	dc.b	smpsNoAttack, $01
0008EA5B E10F                       	smpsAlterNote       $0F
0008EA5D E701                       	dc.b	smpsNoAttack, $01
0008EA5F E10C                       	smpsAlterNote       $0C
0008EA61 E701                       	dc.b	smpsNoAttack, $01
0008EA63 E108                       	smpsAlterNote       $08
0008EA65 E701                       	dc.b	smpsNoAttack, $01
0008EA67 E10C                       	smpsAlterNote       $0C
0008EA69 E701                       	dc.b	smpsNoAttack, $01
0008EA6B E112                       	smpsAlterNote       $12
0008EA6D E701                       	dc.b	smpsNoAttack, $01
0008EA6F E113                       	smpsAlterNote       $13
0008EA71 E701                       	dc.b	smpsNoAttack, $01
0008EA73 E10F                       	smpsAlterNote       $0F
0008EA75 E701                       	dc.b	smpsNoAttack, $01
0008EA77 E109                       	smpsAlterNote       $09
0008EA79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA7D E10C                       	smpsAlterNote       $0C
0008EA7F E701                       	dc.b	smpsNoAttack, $01
0008EA81 E112                       	smpsAlterNote       $12
0008EA83 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EA87 E10C                       	smpsAlterNote       $0C
0008EA89 E701                       	dc.b	smpsNoAttack, $01
0008EA8B E109                       	smpsAlterNote       $09
0008EA8D E701                       	dc.b	smpsNoAttack, $01
0008EA8F E10D                       	smpsAlterNote       $0D
0008EA91 C401 8001                  	dc.b	nG5, $01, nRst, $01
0008EA95 E10F                       	smpsAlterNote       $0F
0008EA97 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
0008EAA1 E10D                       	smpsAlterNote       $0D
0008EAA3 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008EAA9 E10B                       	smpsAlterNote       $0B
0008EAAB BF0D                       	dc.b	nD5, $0D
0008EAAD E108                       	smpsAlterNote       $08
0008EAAF E701                       	dc.b	smpsNoAttack, $01
0008EAB1 E104                       	smpsAlterNote       $04
0008EAB3 E701                       	dc.b	smpsNoAttack, $01
0008EAB5 E108                       	smpsAlterNote       $08
0008EAB7 E701                       	dc.b	smpsNoAttack, $01
0008EAB9 E10B                       	smpsAlterNote       $0B
0008EABB E701                       	dc.b	smpsNoAttack, $01
0008EABD E10F                       	smpsAlterNote       $0F
0008EABF E701                       	dc.b	smpsNoAttack, $01
0008EAC1 E10B                       	smpsAlterNote       $0B
0008EAC3 E701                       	dc.b	smpsNoAttack, $01
0008EAC5 E105                       	smpsAlterNote       $05
0008EAC7 E701                       	dc.b	smpsNoAttack, $01
0008EAC9 E104                       	smpsAlterNote       $04
0008EACB E701                       	dc.b	smpsNoAttack, $01
0008EACD E108                       	smpsAlterNote       $08
0008EACF E701                       	dc.b	smpsNoAttack, $01
0008EAD1 E10E                       	smpsAlterNote       $0E
0008EAD3 E701                       	dc.b	smpsNoAttack, $01
0008EAD5 E10F                       	smpsAlterNote       $0F
0008EAD7 8001                       	dc.b	nRst, $01
0008EAD9 E10C                       	smpsAlterNote       $0C
0008EADB C101                       	dc.b	nE5, $01
0008EADD E10D                       	smpsAlterNote       $0D
0008EADF C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
0008EAE5 E10F                       	smpsAlterNote       $0F
0008EAE7 C606 8001                  	dc.b	nA5, $06, nRst, $01
0008EAEB E10C                       	smpsAlterNote       $0C
0008EAED CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008EAF1 E10D                       	smpsAlterNote       $0D
0008EAF3 CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008EAF7 E10C                       	smpsAlterNote       $0C
0008EAF9 CD03                       	dc.b	nE6, $03
0008EAFB E10A                       	smpsAlterNote       $0A
0008EAFD C903 8001                  	dc.b	nC6, $03, nRst, $01
0008EB01 E10D                       	smpsAlterNote       $0D
0008EB03 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
0008EB0B E109                       	smpsAlterNote       $09
0008EB0D E701                       	dc.b	smpsNoAttack, $01
0008EB0F E10D                       	smpsAlterNote       $0D
0008EB11 E701                       	dc.b	smpsNoAttack, $01
0008EB13 E110                       	smpsAlterNote       $10
0008EB15 E701                       	dc.b	smpsNoAttack, $01
0008EB17 E114                       	smpsAlterNote       $14
0008EB19 E701                       	dc.b	smpsNoAttack, $01
0008EB1B E110                       	smpsAlterNote       $10
0008EB1D E701                       	dc.b	smpsNoAttack, $01
0008EB1F E10A                       	smpsAlterNote       $0A
0008EB21 E701                       	dc.b	smpsNoAttack, $01
0008EB23 E109                       	smpsAlterNote       $09
0008EB25 E701                       	dc.b	smpsNoAttack, $01
0008EB27 E10D                       	smpsAlterNote       $0D
0008EB29 E701                       	dc.b	smpsNoAttack, $01
0008EB2B E113                       	smpsAlterNote       $13
0008EB2D E701                       	dc.b	smpsNoAttack, $01
0008EB2F E114                       	smpsAlterNote       $14
0008EB31 8001                       	dc.b	nRst, $01
0008EB33 E10F                       	smpsAlterNote       $0F
0008EB35 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
0008EB3B E10C                       	smpsAlterNote       $0C
0008EB3D E701                       	dc.b	smpsNoAttack, $01
0008EB3F E108                       	smpsAlterNote       $08
0008EB41 E701                       	dc.b	smpsNoAttack, $01
0008EB43 E10C                       	smpsAlterNote       $0C
0008EB45 E701                       	dc.b	smpsNoAttack, $01
0008EB47 E112                       	smpsAlterNote       $12
0008EB49 E701                       	dc.b	smpsNoAttack, $01
0008EB4B E113                       	smpsAlterNote       $13
0008EB4D E701                       	dc.b	smpsNoAttack, $01
0008EB4F E10F                       	smpsAlterNote       $0F
0008EB51 E701                       	dc.b	smpsNoAttack, $01
0008EB53 E109                       	smpsAlterNote       $09
0008EB55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB59 E10C                       	smpsAlterNote       $0C
0008EB5B E701                       	dc.b	smpsNoAttack, $01
0008EB5D E112                       	smpsAlterNote       $12
0008EB5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB63 E10C                       	smpsAlterNote       $0C
0008EB65 E701                       	dc.b	smpsNoAttack, $01
0008EB67 E109                       	smpsAlterNote       $09
0008EB69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EB6D E10F                       	smpsAlterNote       $0F
0008EB6F E701                       	dc.b	smpsNoAttack, $01
0008EB71 E113                       	smpsAlterNote       $13
0008EB73 E701                       	dc.b	smpsNoAttack, $01
0008EB75 E112                       	smpsAlterNote       $12
0008EB77 E701                       	dc.b	smpsNoAttack, $01
0008EB79 E10C                       	smpsAlterNote       $0C
0008EB7B E701                       	dc.b	smpsNoAttack, $01
0008EB7D E108                       	smpsAlterNote       $08
0008EB7F E701                       	dc.b	smpsNoAttack, $01
0008EB81 E10C                       	smpsAlterNote       $0C
0008EB83 E701                       	dc.b	smpsNoAttack, $01
0008EB85 E10F                       	smpsAlterNote       $0F
0008EB87 E701                       	dc.b	smpsNoAttack, $01
0008EB89 E113                       	smpsAlterNote       $13
0008EB8B E701                       	dc.b	smpsNoAttack, $01
0008EB8D E10F                       	smpsAlterNote       $0F
0008EB8F E701                       	dc.b	smpsNoAttack, $01
0008EB91 E109                       	smpsAlterNote       $09
0008EB93 E701                       	dc.b	smpsNoAttack, $01
0008EB95 E108                       	smpsAlterNote       $08
0008EB97 E701                       	dc.b	smpsNoAttack, $01
0008EB99 E10C                       	smpsAlterNote       $0C
0008EB9B E701                       	dc.b	smpsNoAttack, $01
0008EB9D E112                       	smpsAlterNote       $12
0008EB9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBA3 E10F                       	smpsAlterNote       $0F
0008EBA5 E701                       	dc.b	smpsNoAttack, $01
0008EBA7 E109                       	smpsAlterNote       $09
0008EBA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBAD E10F                       	smpsAlterNote       $0F
0008EBAF E701                       	dc.b	smpsNoAttack, $01
0008EBB1 E113                       	smpsAlterNote       $13
0008EBB3 E701                       	dc.b	smpsNoAttack, $01
0008EBB5 E112                       	smpsAlterNote       $12
0008EBB7 E701                       	dc.b	smpsNoAttack, $01
0008EBB9 E10C                       	smpsAlterNote       $0C
0008EBBB E701                       	dc.b	smpsNoAttack, $01
0008EBBD E108                       	smpsAlterNote       $08
0008EBBF E701                       	dc.b	smpsNoAttack, $01
0008EBC1 E10C                       	smpsAlterNote       $0C
0008EBC3 E701                       	dc.b	smpsNoAttack, $01
0008EBC5 E10F                       	smpsAlterNote       $0F
0008EBC7 E701                       	dc.b	smpsNoAttack, $01
0008EBC9 E113                       	smpsAlterNote       $13
0008EBCB E701                       	dc.b	smpsNoAttack, $01
0008EBCD E10F                       	smpsAlterNote       $0F
0008EBCF E701                       	dc.b	smpsNoAttack, $01
0008EBD1 E109                       	smpsAlterNote       $09
0008EBD3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EBD7 E10F                       	smpsAlterNote       $0F
0008EBD9 C60D                       	dc.b	nA5, $0D
0008EBDB E109                       	smpsAlterNote       $09
0008EBDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBE1 E10C                       	smpsAlterNote       $0C
0008EBE3 E701                       	dc.b	smpsNoAttack, $01
0008EBE5 E112                       	smpsAlterNote       $12
0008EBE7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBEB E10C                       	smpsAlterNote       $0C
0008EBED E701                       	dc.b	smpsNoAttack, $01
0008EBEF E109                       	smpsAlterNote       $09
0008EBF1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EBF5 E10F                       	smpsAlterNote       $0F
0008EBF7 E701                       	dc.b	smpsNoAttack, $01
0008EBF9 E113                       	smpsAlterNote       $13
0008EBFB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EC01 E10D                       	smpsAlterNote       $0D
0008EC03 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
0008EC0B E10C                       	smpsAlterNote       $0C
0008EC0D C103 800E                  	dc.b	nE5, $03, nRst, $0E
0008EC13 E6FF                       	smpsAlterVol        $FF
0008EC15 E10B                       	smpsAlterNote       $0B
0008EC17 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008EC1B E10C                       	smpsAlterNote       $0C
0008EC1D C103                       	dc.b	nE5, $03
0008EC1F E10D                       	smpsAlterNote       $0D
0008EC21 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008EC2B E10B                       	smpsAlterNote       $0B
0008EC2D BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0008EC31 E107                       	smpsAlterNote       $07
0008EC33 E701                       	dc.b	smpsNoAttack, $01
0008EC35 E104                       	smpsAlterNote       $04
0008EC37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC3B E10A                       	smpsAlterNote       $0A
0008EC3D E701                       	dc.b	smpsNoAttack, $01
0008EC3F E10D                       	smpsAlterNote       $0D
0008EC41 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC45 E107                       	smpsAlterNote       $07
0008EC47 E701                       	dc.b	smpsNoAttack, $01
0008EC49 E104                       	smpsAlterNote       $04
0008EC4B 8001                       	dc.b	nRst, $01
0008EC4D E110                       	smpsAlterNote       $10
0008EC4F C703                       	dc.b	nBb5, $03
0008EC51 E10F                       	smpsAlterNote       $0F
0008EC53 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008EC57 E10D                       	smpsAlterNote       $0D
0008EC59 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008EC5D E10C                       	smpsAlterNote       $0C
0008EC5F E701                       	dc.b	smpsNoAttack, $01
0008EC61 E108                       	smpsAlterNote       $08
0008EC63 E701                       	dc.b	smpsNoAttack, $01
0008EC65 E109                       	smpsAlterNote       $09
0008EC67 E701                       	dc.b	smpsNoAttack, $01
0008EC69 E10F                       	smpsAlterNote       $0F
0008EC6B E701                       	dc.b	smpsNoAttack, $01
0008EC6D E113                       	smpsAlterNote       $13
0008EC6F E701                       	dc.b	smpsNoAttack, $01
0008EC71 E10F                       	smpsAlterNote       $0F
0008EC73 E701                       	dc.b	smpsNoAttack, $01
0008EC75 E10C                       	smpsAlterNote       $0C
0008EC77 E701                       	dc.b	smpsNoAttack, $01
0008EC79 E108                       	smpsAlterNote       $08
0008EC7B E701                       	dc.b	smpsNoAttack, $01
0008EC7D E10C                       	smpsAlterNote       $0C
0008EC7F E701                       	dc.b	smpsNoAttack, $01
0008EC81 E112                       	smpsAlterNote       $12
0008EC83 E701                       	dc.b	smpsNoAttack, $01
0008EC85 E113                       	smpsAlterNote       $13
0008EC87 E701                       	dc.b	smpsNoAttack, $01
0008EC89 E10F                       	smpsAlterNote       $0F
0008EC8B E701                       	dc.b	smpsNoAttack, $01
0008EC8D E109                       	smpsAlterNote       $09
0008EC8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC93 E10C                       	smpsAlterNote       $0C
0008EC95 E701                       	dc.b	smpsNoAttack, $01
0008EC97 E112                       	smpsAlterNote       $12
0008EC99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EC9D E10C                       	smpsAlterNote       $0C
0008EC9F E701                       	dc.b	smpsNoAttack, $01
0008ECA1 E109                       	smpsAlterNote       $09
0008ECA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ECA7 E10F                       	smpsAlterNote       $0F
0008ECA9 E701                       	dc.b	smpsNoAttack, $01
0008ECAB E113                       	smpsAlterNote       $13
0008ECAD E701                       	dc.b	smpsNoAttack, $01
0008ECAF E112                       	smpsAlterNote       $12
0008ECB1 E701                       	dc.b	smpsNoAttack, $01
0008ECB3 E10C                       	smpsAlterNote       $0C
0008ECB5 E701                       	dc.b	smpsNoAttack, $01
0008ECB7 E108                       	smpsAlterNote       $08
0008ECB9 E701                       	dc.b	smpsNoAttack, $01
0008ECBB E10C                       	smpsAlterNote       $0C
0008ECBD E701                       	dc.b	smpsNoAttack, $01
0008ECBF E10F                       	smpsAlterNote       $0F
0008ECC1 E701                       	dc.b	smpsNoAttack, $01
0008ECC3 E113                       	smpsAlterNote       $13
0008ECC5 E701                       	dc.b	smpsNoAttack, $01
0008ECC7 E10F                       	smpsAlterNote       $0F
0008ECC9 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0008ECCD E110                       	smpsAlterNote       $10
0008ECCF BB03                       	dc.b	nBb4, $03
0008ECD1 E10F                       	smpsAlterNote       $0F
0008ECD3 BA06 8001                  	dc.b	nA4, $06, nRst, $01
0008ECD7 E10B                       	smpsAlterNote       $0B
0008ECD9 BF03                       	dc.b	nD5, $03
0008ECDB E10C                       	smpsAlterNote       $0C
0008ECDD C103 8001                  	dc.b	nE5, $03, nRst, $01
0008ECE1 E10D                       	smpsAlterNote       $0D
0008ECE3 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008ECED E10B                       	smpsAlterNote       $0B
0008ECEF BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008ECFB E110                       	smpsAlterNote       $10
0008ECFD C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008ED01 E10F                       	smpsAlterNote       $0F
0008ED03 C604                       	dc.b	nA5, $04
0008ED05 E10D                       	smpsAlterNote       $0D
0008ED07 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008ED0D E109                       	smpsAlterNote       $09
0008ED0F E701                       	dc.b	smpsNoAttack, $01
0008ED11 E108                       	smpsAlterNote       $08
0008ED13 E701                       	dc.b	smpsNoAttack, $01
0008ED15 E10C                       	smpsAlterNote       $0C
0008ED17 E701                       	dc.b	smpsNoAttack, $01
0008ED19 E112                       	smpsAlterNote       $12
0008ED1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED1F E10F                       	smpsAlterNote       $0F
0008ED21 E701                       	dc.b	smpsNoAttack, $01
0008ED23 E109                       	smpsAlterNote       $09
0008ED25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED29 E10F                       	smpsAlterNote       $0F
0008ED2B E701                       	dc.b	smpsNoAttack, $01
0008ED2D E112                       	smpsAlterNote       $12
0008ED2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED33 E10C                       	smpsAlterNote       $0C
0008ED35 E701                       	dc.b	smpsNoAttack, $01
0008ED37 E108                       	smpsAlterNote       $08
0008ED39 E701                       	dc.b	smpsNoAttack, $01
0008ED3B E109                       	smpsAlterNote       $09
0008ED3D E701                       	dc.b	smpsNoAttack, $01
0008ED3F E10F                       	smpsAlterNote       $0F
0008ED41 E701                       	dc.b	smpsNoAttack, $01
0008ED43 E113                       	smpsAlterNote       $13
0008ED45 E701                       	dc.b	smpsNoAttack, $01
0008ED47 E10F                       	smpsAlterNote       $0F
0008ED49 E701                       	dc.b	smpsNoAttack, $01
0008ED4B E10C                       	smpsAlterNote       $0C
0008ED4D E701                       	dc.b	smpsNoAttack, $01
0008ED4F E108                       	smpsAlterNote       $08
0008ED51 E701                       	dc.b	smpsNoAttack, $01
0008ED53 E10C                       	smpsAlterNote       $0C
0008ED55 E701                       	dc.b	smpsNoAttack, $01
0008ED57 E112                       	smpsAlterNote       $12
0008ED59 E701                       	dc.b	smpsNoAttack, $01
0008ED5B E113                       	smpsAlterNote       $13
0008ED5D E701                       	dc.b	smpsNoAttack, $01
0008ED5F E10F                       	smpsAlterNote       $0F
0008ED61 E701                       	dc.b	smpsNoAttack, $01
0008ED63 E109                       	smpsAlterNote       $09
0008ED65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008ED69 E10C                       	smpsAlterNote       $0C
0008ED6B E701                       	dc.b	smpsNoAttack, $01
0008ED6D E112                       	smpsAlterNote       $12
0008ED6F E701                       	dc.b	smpsNoAttack, $01
0008ED71 E113                       	smpsAlterNote       $13
0008ED73 8001                       	dc.b	nRst, $01
0008ED75 E10F                       	smpsAlterNote       $0F
0008ED77 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
0008ED83 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
0008ED8B E10D                       	smpsAlterNote       $0D
0008ED8D C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008ED93 E10B                       	smpsAlterNote       $0B
0008ED95 BF0D                       	dc.b	nD5, $0D
0008ED97 E108                       	smpsAlterNote       $08
0008ED99 E701                       	dc.b	smpsNoAttack, $01
0008ED9B E104                       	smpsAlterNote       $04
0008ED9D E701                       	dc.b	smpsNoAttack, $01
0008ED9F E105                       	smpsAlterNote       $05
0008EDA1 E701                       	dc.b	smpsNoAttack, $01
0008EDA3 E10B                       	smpsAlterNote       $0B
0008EDA5 E701                       	dc.b	smpsNoAttack, $01
0008EDA7 E10F                       	smpsAlterNote       $0F
0008EDA9 E701                       	dc.b	smpsNoAttack, $01
0008EDAB E10B                       	smpsAlterNote       $0B
0008EDAD E701                       	dc.b	smpsNoAttack, $01
0008EDAF E108                       	smpsAlterNote       $08
0008EDB1 E701                       	dc.b	smpsNoAttack, $01
0008EDB3 E104                       	smpsAlterNote       $04
0008EDB5 E701                       	dc.b	smpsNoAttack, $01
0008EDB7 E108                       	smpsAlterNote       $08
0008EDB9 E701                       	dc.b	smpsNoAttack, $01
0008EDBB E10E                       	smpsAlterNote       $0E
0008EDBD E701                       	dc.b	smpsNoAttack, $01
0008EDBF E10F                       	smpsAlterNote       $0F
0008EDC1 E701                       	dc.b	smpsNoAttack, $01
0008EDC3 E10C                       	smpsAlterNote       $0C
0008EDC5 C101                       	dc.b	nE5, $01
0008EDC7 E10D                       	smpsAlterNote       $0D
0008EDC9 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008EDD1 E10F                       	smpsAlterNote       $0F
0008EDD3 C607                       	dc.b	nA5, $07
0008EDD5 E10C                       	smpsAlterNote       $0C
0008EDD7 CD07                       	dc.b	nE6, $07
0008EDD9 E10D                       	smpsAlterNote       $0D
0008EDDB CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008EDDF E10C                       	smpsAlterNote       $0C
0008EDE1 CD03                       	dc.b	nE6, $03
0008EDE3 E10A                       	smpsAlterNote       $0A
0008EDE5 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008EDE9 E10D                       	smpsAlterNote       $0D
0008EDEB C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008EDF1 E10A                       	smpsAlterNote       $0A
0008EDF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EDF7 E110                       	smpsAlterNote       $10
0008EDF9 E701                       	dc.b	smpsNoAttack, $01
0008EDFB E114                       	smpsAlterNote       $14
0008EDFD E701                       	dc.b	smpsNoAttack, $01
0008EDFF E113                       	smpsAlterNote       $13
0008EE01 E701                       	dc.b	smpsNoAttack, $01
0008EE03 E10D                       	smpsAlterNote       $0D
0008EE05 E701                       	dc.b	smpsNoAttack, $01
0008EE07 E109                       	smpsAlterNote       $09
0008EE09 E701                       	dc.b	smpsNoAttack, $01
0008EE0B E10D                       	smpsAlterNote       $0D
0008EE0D E701                       	dc.b	smpsNoAttack, $01
0008EE0F E110                       	smpsAlterNote       $10
0008EE11 E701                       	dc.b	smpsNoAttack, $01
0008EE13 E114                       	smpsAlterNote       $14
0008EE15 E701                       	dc.b	smpsNoAttack, $01
0008EE17 E10F                       	smpsAlterNote       $0F
0008EE19 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0008EE1D E10C                       	smpsAlterNote       $0C
0008EE1F E701                       	dc.b	smpsNoAttack, $01
0008EE21 E108                       	smpsAlterNote       $08
0008EE23 E701                       	dc.b	smpsNoAttack, $01
0008EE25 E10C                       	smpsAlterNote       $0C
0008EE27 E701                       	dc.b	smpsNoAttack, $01
0008EE29 E10F                       	smpsAlterNote       $0F
0008EE2B E701                       	dc.b	smpsNoAttack, $01
0008EE2D E113                       	smpsAlterNote       $13
0008EE2F E701                       	dc.b	smpsNoAttack, $01
0008EE31 E10F                       	smpsAlterNote       $0F
0008EE33 E701                       	dc.b	smpsNoAttack, $01
0008EE35 E109                       	smpsAlterNote       $09
0008EE37 E701                       	dc.b	smpsNoAttack, $01
0008EE39 E108                       	smpsAlterNote       $08
0008EE3B E701                       	dc.b	smpsNoAttack, $01
0008EE3D E10C                       	smpsAlterNote       $0C
0008EE3F E701                       	dc.b	smpsNoAttack, $01
0008EE41 E112                       	smpsAlterNote       $12
0008EE43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE47 E10F                       	smpsAlterNote       $0F
0008EE49 E701                       	dc.b	smpsNoAttack, $01
0008EE4B E109                       	smpsAlterNote       $09
0008EE4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE51 E10F                       	smpsAlterNote       $0F
0008EE53 E701                       	dc.b	smpsNoAttack, $01
0008EE55 E112                       	smpsAlterNote       $12
0008EE57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE5B E10C                       	smpsAlterNote       $0C
0008EE5D E701                       	dc.b	smpsNoAttack, $01
0008EE5F E108                       	smpsAlterNote       $08
0008EE61 E701                       	dc.b	smpsNoAttack, $01
0008EE63 E109                       	smpsAlterNote       $09
0008EE65 E701                       	dc.b	smpsNoAttack, $01
0008EE67 E10F                       	smpsAlterNote       $0F
0008EE69 E701                       	dc.b	smpsNoAttack, $01
0008EE6B E113                       	smpsAlterNote       $13
0008EE6D E701                       	dc.b	smpsNoAttack, $01
0008EE6F E10F                       	smpsAlterNote       $0F
0008EE71 E701                       	dc.b	smpsNoAttack, $01
0008EE73 E10C                       	smpsAlterNote       $0C
0008EE75 E701                       	dc.b	smpsNoAttack, $01
0008EE77 E108                       	smpsAlterNote       $08
0008EE79 E701                       	dc.b	smpsNoAttack, $01
0008EE7B E10C                       	smpsAlterNote       $0C
0008EE7D E701                       	dc.b	smpsNoAttack, $01
0008EE7F E112                       	smpsAlterNote       $12
0008EE81 E701                       	dc.b	smpsNoAttack, $01
0008EE83 E113                       	smpsAlterNote       $13
0008EE85 E701                       	dc.b	smpsNoAttack, $01
0008EE87 E10F                       	smpsAlterNote       $0F
0008EE89 E701                       	dc.b	smpsNoAttack, $01
0008EE8B E109                       	smpsAlterNote       $09
0008EE8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE91 E10C                       	smpsAlterNote       $0C
0008EE93 E701                       	dc.b	smpsNoAttack, $01
0008EE95 E112                       	smpsAlterNote       $12
0008EE97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EE9B E10C                       	smpsAlterNote       $0C
0008EE9D E701                       	dc.b	smpsNoAttack, $01
0008EE9F E109                       	smpsAlterNote       $09
0008EEA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEA5 E10F                       	smpsAlterNote       $0F
0008EEA7 E701                       	dc.b	smpsNoAttack, $01
0008EEA9 E113                       	smpsAlterNote       $13
0008EEAB E701                       	dc.b	smpsNoAttack, $01
0008EEAD E112                       	smpsAlterNote       $12
0008EEAF E701                       	dc.b	smpsNoAttack, $01
0008EEB1 E10C                       	smpsAlterNote       $0C
0008EEB3 E701                       	dc.b	smpsNoAttack, $01
0008EEB5 E109                       	smpsAlterNote       $09
0008EEB7 8001                       	dc.b	nRst, $01
0008EEB9 E10F                       	smpsAlterNote       $0F
0008EEBB C60D                       	dc.b	nA5, $0D
0008EEBD E10C                       	smpsAlterNote       $0C
0008EEBF E701                       	dc.b	smpsNoAttack, $01
0008EEC1 E108                       	smpsAlterNote       $08
0008EEC3 E701                       	dc.b	smpsNoAttack, $01
0008EEC5 E10C                       	smpsAlterNote       $0C
0008EEC7 E701                       	dc.b	smpsNoAttack, $01
0008EEC9 E112                       	smpsAlterNote       $12
0008EECB E701                       	dc.b	smpsNoAttack, $01
0008EECD E113                       	smpsAlterNote       $13
0008EECF E701                       	dc.b	smpsNoAttack, $01
0008EED1 E10F                       	smpsAlterNote       $0F
0008EED3 E701                       	dc.b	smpsNoAttack, $01
0008EED5 E109                       	smpsAlterNote       $09
0008EED7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEDB E10C                       	smpsAlterNote       $0C
0008EEDD E701                       	dc.b	smpsNoAttack, $01
0008EEDF E112                       	smpsAlterNote       $12
0008EEE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEE5 E10C                       	smpsAlterNote       $0C
0008EEE7 E701                       	dc.b	smpsNoAttack, $01
0008EEE9 E109                       	smpsAlterNote       $09
0008EEEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EEEF E10F                       	smpsAlterNote       $0F
0008EEF1 E701                       	dc.b	smpsNoAttack, $01
0008EEF3 E113                       	smpsAlterNote       $13
0008EEF5 E701                       	dc.b	smpsNoAttack, $01
0008EEF7 E112                       	smpsAlterNote       $12
0008EEF9 E701                       	dc.b	smpsNoAttack, $01
0008EEFB E10C                       	smpsAlterNote       $0C
0008EEFD E701                       	dc.b	smpsNoAttack, $01
0008EEFF E108                       	smpsAlterNote       $08
0008EF01 E701                       	dc.b	smpsNoAttack, $01
0008EF03 E10C                       	smpsAlterNote       $0C
0008EF05 E701                       	dc.b	smpsNoAttack, $01
0008EF07 E10F                       	smpsAlterNote       $0F
0008EF09 E701                       	dc.b	smpsNoAttack, $01
0008EF0B E113                       	smpsAlterNote       $13
0008EF0D E701                       	dc.b	smpsNoAttack, $01
0008EF0F E10F                       	smpsAlterNote       $0F
0008EF11 E701                       	dc.b	smpsNoAttack, $01
0008EF13 E109                       	smpsAlterNote       $09
0008EF15 E701                       	dc.b	smpsNoAttack, $01
0008EF17 E108                       	smpsAlterNote       $08
0008EF19 E701                       	dc.b	smpsNoAttack, $01
0008EF1B E10C                       	smpsAlterNote       $0C
0008EF1D E701                       	dc.b	smpsNoAttack, $01
0008EF1F E112                       	smpsAlterNote       $12
0008EF21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF25 E10F                       	smpsAlterNote       $0F
0008EF27 E701                       	dc.b	smpsNoAttack, $01
0008EF29 E109                       	smpsAlterNote       $09
0008EF2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF2F E10F                       	smpsAlterNote       $0F
0008EF31 E701                       	dc.b	smpsNoAttack, $01
0008EF33 E112                       	smpsAlterNote       $12
0008EF35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EF39 E10C                       	smpsAlterNote       $0C
0008EF3B E701                       	dc.b	smpsNoAttack, $01
0008EF3D E108                       	smpsAlterNote       $08
0008EF3F E701                       	dc.b	smpsNoAttack, $01
0008EF41 E10C                       	smpsAlterNote       $0C
0008EF43 E701                       	dc.b	smpsNoAttack, $01
0008EF45 E10F                       	smpsAlterNote       $0F
0008EF47 E701                       	dc.b	smpsNoAttack, $01
0008EF49 E113                       	smpsAlterNote       $13
0008EF4B E701                       	dc.b	smpsNoAttack, $01
0008EF4D E10F                       	smpsAlterNote       $0F
0008EF4F E701                       	dc.b	smpsNoAttack, $01
0008EF51 E109                       	smpsAlterNote       $09
0008EF53 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008EF59 E601                       	smpsAlterVol        $01
0008EF5B E10F                       	smpsAlterNote       $0F
0008EF5D C604                       	dc.b	nA5, $04
0008EF5F E10D                       	smpsAlterNote       $0D
0008EF61 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008EF67 E10B                       	smpsAlterNote       $0B
0008EF69 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0008EF71 E10F                       	smpsAlterNote       $0F
0008EF73 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008EF77 E10D                       	smpsAlterNote       $0D
0008EF79 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008EF7F E10C                       	smpsAlterNote       $0C
0008EF81 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
0008EF87 E10A                       	smpsAlterNote       $0A
0008EF89 C904 8001                  	dc.b	nC6, $04, nRst, $01
0008EF8D E110                       	smpsAlterNote       $10
0008EF8F C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008EF93 E10F                       	smpsAlterNote       $0F
0008EF95 C604                       	dc.b	nA5, $04
0008EF97 E10D                       	smpsAlterNote       $0D
0008EF99 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008EFA5 E109                       	smpsAlterNote       $09
0008EFA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFAB E10F                       	smpsAlterNote       $0F
0008EFAD E701                       	dc.b	smpsNoAttack, $01
0008EFAF E112                       	smpsAlterNote       $12
0008EFB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008EFB5 E10C                       	smpsAlterNote       $0C
0008EFB7 E701                       	dc.b	smpsNoAttack, $01
0008EFB9 E108                       	smpsAlterNote       $08
0008EFBB E701                       	dc.b	smpsNoAttack, $01
0008EFBD E10C                       	smpsAlterNote       $0C
0008EFBF E701                       	dc.b	smpsNoAttack, $01
0008EFC1 E10F                       	smpsAlterNote       $0F
0008EFC3 E701                       	dc.b	smpsNoAttack, $01
0008EFC5 E113                       	smpsAlterNote       $13
0008EFC7 E701                       	dc.b	smpsNoAttack, $01
0008EFC9 E10D                       	smpsAlterNote       $0D
0008EFCB C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008EFD1 E10C                       	smpsAlterNote       $0C
0008EFD3 C10D                       	dc.b	nE5, $0D
0008EFD5 E109                       	smpsAlterNote       $09
0008EFD7 E701                       	dc.b	smpsNoAttack, $01
0008EFD9 E105                       	smpsAlterNote       $05
0008EFDB E701                       	dc.b	smpsNoAttack, $01
0008EFDD E106                       	smpsAlterNote       $06
0008EFDF E701                       	dc.b	smpsNoAttack, $01
0008EFE1 E10C                       	smpsAlterNote       $0C
0008EFE3 E701                       	dc.b	smpsNoAttack, $01
0008EFE5 E110                       	smpsAlterNote       $10
0008EFE7 E701                       	dc.b	smpsNoAttack, $01
0008EFE9 E10C                       	smpsAlterNote       $0C
0008EFEB E701                       	dc.b	smpsNoAttack, $01
0008EFED E109                       	smpsAlterNote       $09
0008EFEF E701                       	dc.b	smpsNoAttack, $01
0008EFF1 E105                       	smpsAlterNote       $05
0008EFF3 E701                       	dc.b	smpsNoAttack, $01
0008EFF5 E109                       	smpsAlterNote       $09
0008EFF7 E701                       	dc.b	smpsNoAttack, $01
0008EFF9 E10F                       	smpsAlterNote       $0F
0008EFFB E701                       	dc.b	smpsNoAttack, $01
0008EFFD E110                       	smpsAlterNote       $10
0008EFFF E701                       	dc.b	smpsNoAttack, $01
0008F001 E10C                       	smpsAlterNote       $0C
0008F003 E701                       	dc.b	smpsNoAttack, $01
0008F005 E106                       	smpsAlterNote       $06
0008F007 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F00B E109                       	smpsAlterNote       $09
0008F00D E701                       	dc.b	smpsNoAttack, $01
0008F00F E10F                       	smpsAlterNote       $0F
0008F011 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F015 E109                       	smpsAlterNote       $09
0008F017 E701                       	dc.b	smpsNoAttack, $01
0008F019 E106                       	smpsAlterNote       $06
0008F01B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F01F E10C                       	smpsAlterNote       $0C
0008F021 E701                       	dc.b	smpsNoAttack, $01
0008F023 E110                       	smpsAlterNote       $10
0008F025 E701                       	dc.b	smpsNoAttack, $01
0008F027 E10F                       	smpsAlterNote       $0F
0008F029 E701                       	dc.b	smpsNoAttack, $01
0008F02B E109                       	smpsAlterNote       $09
0008F02D E701                       	dc.b	smpsNoAttack, $01
0008F02F E105                       	smpsAlterNote       $05
0008F031 E701                       	dc.b	smpsNoAttack, $01
0008F033 E109                       	smpsAlterNote       $09
0008F035 E701                       	dc.b	smpsNoAttack, $01
0008F037 E10C                       	smpsAlterNote       $0C
0008F039 E701                       	dc.b	smpsNoAttack, $01
0008F03B E110                       	smpsAlterNote       $10
0008F03D E701                       	dc.b	smpsNoAttack, $01
0008F03F E10C                       	smpsAlterNote       $0C
0008F041 E701                       	dc.b	smpsNoAttack, $01
0008F043 E106                       	smpsAlterNote       $06
0008F045 E701                       	dc.b	smpsNoAttack, $01
0008F047 E105                       	smpsAlterNote       $05
0008F049 E701                       	dc.b	smpsNoAttack, $01
0008F04B E109                       	smpsAlterNote       $09
0008F04D E701                       	dc.b	smpsNoAttack, $01
0008F04F E10F                       	smpsAlterNote       $0F
0008F051 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F055 E10C                       	smpsAlterNote       $0C
0008F057 E701                       	dc.b	smpsNoAttack, $01
0008F059 E106                       	smpsAlterNote       $06
0008F05B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F05F E10C                       	smpsAlterNote       $0C
0008F061 E701                       	dc.b	smpsNoAttack, $01
0008F063 E10F                       	smpsAlterNote       $0F
0008F065 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F069 E109                       	smpsAlterNote       $09
0008F06B E701                       	dc.b	smpsNoAttack, $01
0008F06D E105                       	smpsAlterNote       $05
0008F06F E701                       	dc.b	smpsNoAttack, $01
0008F071 E106                       	smpsAlterNote       $06
0008F073 E701                       	dc.b	smpsNoAttack, $01
0008F075 E10C                       	smpsAlterNote       $0C
0008F077 E701                       	dc.b	smpsNoAttack, $01
0008F079 E110                       	smpsAlterNote       $10
0008F07B E701                       	dc.b	smpsNoAttack, $01
0008F07D E10C                       	smpsAlterNote       $0C
0008F07F E701                       	dc.b	smpsNoAttack, $01
0008F081 E109                       	smpsAlterNote       $09
0008F083 E701                       	dc.b	smpsNoAttack, $01
0008F085 E105                       	smpsAlterNote       $05
0008F087 E701                       	dc.b	smpsNoAttack, $01
0008F089 E109                       	smpsAlterNote       $09
0008F08B E701                       	dc.b	smpsNoAttack, $01
0008F08D E10F                       	smpsAlterNote       $0F
0008F08F E701                       	dc.b	smpsNoAttack, $01
0008F091 E110                       	smpsAlterNote       $10
0008F093 E701                       	dc.b	smpsNoAttack, $01
0008F095 E10C                       	smpsAlterNote       $0C
0008F097 E701                       	dc.b	smpsNoAttack, $01
0008F099 E106                       	smpsAlterNote       $06
0008F09B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F09F E109                       	smpsAlterNote       $09
0008F0A1 E701                       	dc.b	smpsNoAttack, $01
0008F0A3 E10F                       	smpsAlterNote       $0F
0008F0A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0A9 E109                       	smpsAlterNote       $09
0008F0AB E701                       	dc.b	smpsNoAttack, $01
0008F0AD E106                       	smpsAlterNote       $06
0008F0AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0B3 E10C                       	smpsAlterNote       $0C
0008F0B5 E701                       	dc.b	smpsNoAttack, $01
0008F0B7 E110                       	smpsAlterNote       $10
0008F0B9 E701                       	dc.b	smpsNoAttack, $01
0008F0BB E10F                       	smpsAlterNote       $0F
0008F0BD E701                       	dc.b	smpsNoAttack, $01
0008F0BF E109                       	smpsAlterNote       $09
0008F0C1 E701                       	dc.b	smpsNoAttack, $01
0008F0C3 E105                       	smpsAlterNote       $05
0008F0C5 E701                       	dc.b	smpsNoAttack, $01
0008F0C7 E109                       	smpsAlterNote       $09
0008F0C9 E701                       	dc.b	smpsNoAttack, $01
0008F0CB E10C                       	smpsAlterNote       $0C
0008F0CD E701                       	dc.b	smpsNoAttack, $01
0008F0CF E110                       	smpsAlterNote       $10
0008F0D1 E701                       	dc.b	smpsNoAttack, $01
0008F0D3 E10C                       	smpsAlterNote       $0C
0008F0D5 E701                       	dc.b	smpsNoAttack, $01
0008F0D7 E106                       	smpsAlterNote       $06
0008F0D9 E701                       	dc.b	smpsNoAttack, $01
0008F0DB E105                       	smpsAlterNote       $05
0008F0DD E701                       	dc.b	smpsNoAttack, $01
0008F0DF E109                       	smpsAlterNote       $09
0008F0E1 E701                       	dc.b	smpsNoAttack, $01
0008F0E3 E10F                       	smpsAlterNote       $0F
0008F0E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0E9 E109                       	smpsAlterNote       $09
0008F0EB E701                       	dc.b	smpsNoAttack, $01
0008F0ED E106                       	smpsAlterNote       $06
0008F0EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F0F3 E10C                       	smpsAlterNote       $0C
0008F0F5 E701                       	dc.b	smpsNoAttack, $01
0008F0F7 E110                       	smpsAlterNote       $10
0008F0F9 E701                       	dc.b	smpsNoAttack, $01
0008F0FB E10F                       	smpsAlterNote       $0F
0008F0FD E701                       	dc.b	smpsNoAttack, $01
0008F0FF E109                       	smpsAlterNote       $09
0008F101 E701                       	dc.b	smpsNoAttack, $01
0008F103 E105                       	smpsAlterNote       $05
0008F105 E701                       	dc.b	smpsNoAttack, $01
0008F107 E109                       	smpsAlterNote       $09
0008F109 E701                       	dc.b	smpsNoAttack, $01
0008F10B E10C                       	smpsAlterNote       $0C
0008F10D E701                       	dc.b	smpsNoAttack, $01
0008F10F E110                       	smpsAlterNote       $10
0008F111 E701                       	dc.b	smpsNoAttack, $01
0008F113 E10C                       	smpsAlterNote       $0C
0008F115 E701                       	dc.b	smpsNoAttack, $01
0008F117 E106                       	smpsAlterNote       $06
0008F119 E701                       	dc.b	smpsNoAttack, $01
0008F11B E105                       	smpsAlterNote       $05
0008F11D E701                       	dc.b	smpsNoAttack, $01
0008F11F E109                       	smpsAlterNote       $09
0008F121 E701                       	dc.b	smpsNoAttack, $01
0008F123 E10F                       	smpsAlterNote       $0F
0008F125 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F129 E10C                       	smpsAlterNote       $0C
0008F12B E701                       	dc.b	smpsNoAttack, $01
0008F12D E106                       	smpsAlterNote       $06
0008F12F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F133 E10C                       	smpsAlterNote       $0C
0008F135 E701                       	dc.b	smpsNoAttack, $01
0008F137 E10F                       	smpsAlterNote       $0F
0008F139 E701                       	dc.b	smpsNoAttack, $01
0008F13B E110                       	smpsAlterNote       $10
0008F13D 8001                       	dc.b	nRst, $01
0008F13F E10F                       	smpsAlterNote       $0F
0008F141 C604                       	dc.b	nA5, $04
0008F143 E10D                       	smpsAlterNote       $0D
0008F145 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F14B E10B                       	smpsAlterNote       $0B
0008F14D BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
0008F153 E10F                       	smpsAlterNote       $0F
0008F155 C604 8001                  	dc.b	nA5, $04, nRst, $01
0008F159 E10D                       	smpsAlterNote       $0D
0008F15B C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0008F161 E10C                       	smpsAlterNote       $0C
0008F163 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
0008F169 E10A                       	smpsAlterNote       $0A
0008F16B C904                       	dc.b	nC6, $04
0008F16D E110                       	smpsAlterNote       $10
0008F16F C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F173 E10F                       	smpsAlterNote       $0F
0008F175 C604                       	dc.b	nA5, $04
0008F177 E10D                       	smpsAlterNote       $0D
0008F179 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
0008F185 E109                       	smpsAlterNote       $09
0008F187 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F18B E10F                       	smpsAlterNote       $0F
0008F18D E701                       	dc.b	smpsNoAttack, $01
0008F18F E112                       	smpsAlterNote       $12
0008F191 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F195 E10C                       	smpsAlterNote       $0C
0008F197 E701                       	dc.b	smpsNoAttack, $01
0008F199 E108                       	smpsAlterNote       $08
0008F19B E701                       	dc.b	smpsNoAttack, $01
0008F19D E109                       	smpsAlterNote       $09
0008F19F E701                       	dc.b	smpsNoAttack, $01
0008F1A1 E10F                       	smpsAlterNote       $0F
0008F1A3 E701                       	dc.b	smpsNoAttack, $01
0008F1A5 E113                       	smpsAlterNote       $13
0008F1A7 E701                       	dc.b	smpsNoAttack, $01
0008F1A9 E10D                       	smpsAlterNote       $0D
0008F1AB C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
0008F1B1 E10C                       	smpsAlterNote       $0C
0008F1B3 C10D                       	dc.b	nE5, $0D
0008F1B5 E109                       	smpsAlterNote       $09
0008F1B7 E701                       	dc.b	smpsNoAttack, $01
0008F1B9 E106                       	smpsAlterNote       $06
0008F1BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1BF E10C                       	smpsAlterNote       $0C
0008F1C1 E701                       	dc.b	smpsNoAttack, $01
0008F1C3 E110                       	smpsAlterNote       $10
0008F1C5 E701                       	dc.b	smpsNoAttack, $01
0008F1C7 E10F                       	smpsAlterNote       $0F
0008F1C9 E701                       	dc.b	smpsNoAttack, $01
0008F1CB E109                       	smpsAlterNote       $09
0008F1CD E701                       	dc.b	smpsNoAttack, $01
0008F1CF E105                       	smpsAlterNote       $05
0008F1D1 E701                       	dc.b	smpsNoAttack, $01
0008F1D3 E109                       	smpsAlterNote       $09
0008F1D5 E701                       	dc.b	smpsNoAttack, $01
0008F1D7 E10C                       	smpsAlterNote       $0C
0008F1D9 E701                       	dc.b	smpsNoAttack, $01
0008F1DB E110                       	smpsAlterNote       $10
0008F1DD E701                       	dc.b	smpsNoAttack, $01
0008F1DF E10C                       	smpsAlterNote       $0C
0008F1E1 E701                       	dc.b	smpsNoAttack, $01
0008F1E3 E106                       	smpsAlterNote       $06
0008F1E5 E701                       	dc.b	smpsNoAttack, $01
0008F1E7 E105                       	smpsAlterNote       $05
0008F1E9 E701                       	dc.b	smpsNoAttack, $01
0008F1EB E109                       	smpsAlterNote       $09
0008F1ED E701                       	dc.b	smpsNoAttack, $01
0008F1EF E10F                       	smpsAlterNote       $0F
0008F1F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1F5 E10C                       	smpsAlterNote       $0C
0008F1F7 E701                       	dc.b	smpsNoAttack, $01
0008F1F9 E106                       	smpsAlterNote       $06
0008F1FB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F1FF E10C                       	smpsAlterNote       $0C
0008F201 E701                       	dc.b	smpsNoAttack, $01
0008F203 E10F                       	smpsAlterNote       $0F
0008F205 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F209 E109                       	smpsAlterNote       $09
0008F20B E701                       	dc.b	smpsNoAttack, $01
0008F20D E105                       	smpsAlterNote       $05
0008F20F E701                       	dc.b	smpsNoAttack, $01
0008F211 E106                       	smpsAlterNote       $06
0008F213 E701                       	dc.b	smpsNoAttack, $01
0008F215 E10C                       	smpsAlterNote       $0C
0008F217 E701                       	dc.b	smpsNoAttack, $01
0008F219 E110                       	smpsAlterNote       $10
0008F21B E701                       	dc.b	smpsNoAttack, $01
0008F21D E10C                       	smpsAlterNote       $0C
0008F21F E701                       	dc.b	smpsNoAttack, $01
0008F221 E109                       	smpsAlterNote       $09
0008F223 E701                       	dc.b	smpsNoAttack, $01
0008F225 E105                       	smpsAlterNote       $05
0008F227 E701                       	dc.b	smpsNoAttack, $01
0008F229 E109                       	smpsAlterNote       $09
0008F22B E701                       	dc.b	smpsNoAttack, $01
0008F22D E10F                       	smpsAlterNote       $0F
0008F22F E701                       	dc.b	smpsNoAttack, $01
0008F231 E110                       	smpsAlterNote       $10
0008F233 E701                       	dc.b	smpsNoAttack, $01
0008F235 E10C                       	smpsAlterNote       $0C
0008F237 E701                       	dc.b	smpsNoAttack, $01
0008F239 E106                       	smpsAlterNote       $06
0008F23B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F23F E109                       	smpsAlterNote       $09
0008F241 E701                       	dc.b	smpsNoAttack, $01
0008F243 E10F                       	smpsAlterNote       $0F
0008F245 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F249 E109                       	smpsAlterNote       $09
0008F24B E701                       	dc.b	smpsNoAttack, $01
0008F24D E106                       	smpsAlterNote       $06
0008F24F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F253 E10C                       	smpsAlterNote       $0C
0008F255 E701                       	dc.b	smpsNoAttack, $01
0008F257 E110                       	smpsAlterNote       $10
0008F259 E701                       	dc.b	smpsNoAttack, $01
0008F25B E10F                       	smpsAlterNote       $0F
0008F25D E701                       	dc.b	smpsNoAttack, $01
0008F25F E109                       	smpsAlterNote       $09
0008F261 E701                       	dc.b	smpsNoAttack, $01
0008F263 E105                       	smpsAlterNote       $05
0008F265 E701                       	dc.b	smpsNoAttack, $01
0008F267 E109                       	smpsAlterNote       $09
0008F269 E701                       	dc.b	smpsNoAttack, $01
0008F26B E10F                       	smpsAlterNote       $0F
0008F26D E701                       	dc.b	smpsNoAttack, $01
0008F26F E110                       	smpsAlterNote       $10
0008F271 E701                       	dc.b	smpsNoAttack, $01
0008F273 E10C                       	smpsAlterNote       $0C
0008F275 E701                       	dc.b	smpsNoAttack, $01
0008F277 E106                       	smpsAlterNote       $06
0008F279 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F27D E109                       	smpsAlterNote       $09
0008F27F E701                       	dc.b	smpsNoAttack, $01
0008F281 E10F                       	smpsAlterNote       $0F
0008F283 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F287 E109                       	smpsAlterNote       $09
0008F289 E701                       	dc.b	smpsNoAttack, $01
0008F28B E106                       	smpsAlterNote       $06
0008F28D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F291 E10C                       	smpsAlterNote       $0C
0008F293 E701                       	dc.b	smpsNoAttack, $01
0008F295 E110                       	smpsAlterNote       $10
0008F297 E701                       	dc.b	smpsNoAttack, $01
0008F299 E10F                       	smpsAlterNote       $0F
0008F29B E701                       	dc.b	smpsNoAttack, $01
0008F29D E109                       	smpsAlterNote       $09
0008F29F E701                       	dc.b	smpsNoAttack, $01
0008F2A1 E105                       	smpsAlterNote       $05
0008F2A3 E701                       	dc.b	smpsNoAttack, $01
0008F2A5 E109                       	smpsAlterNote       $09
0008F2A7 E701                       	dc.b	smpsNoAttack, $01
0008F2A9 E10C                       	smpsAlterNote       $0C
0008F2AB E701                       	dc.b	smpsNoAttack, $01
0008F2AD E110                       	smpsAlterNote       $10
0008F2AF E701                       	dc.b	smpsNoAttack, $01
0008F2B1 E10C                       	smpsAlterNote       $0C
0008F2B3 E701                       	dc.b	smpsNoAttack, $01
0008F2B5 E106                       	smpsAlterNote       $06
0008F2B7 E701                       	dc.b	smpsNoAttack, $01
0008F2B9 E105                       	smpsAlterNote       $05
0008F2BB E701                       	dc.b	smpsNoAttack, $01
0008F2BD E109                       	smpsAlterNote       $09
0008F2BF E701                       	dc.b	smpsNoAttack, $01
0008F2C1 E10F                       	smpsAlterNote       $0F
0008F2C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2C7 E10C                       	smpsAlterNote       $0C
0008F2C9 E701                       	dc.b	smpsNoAttack, $01
0008F2CB E106                       	smpsAlterNote       $06
0008F2CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2D1 E10C                       	smpsAlterNote       $0C
0008F2D3 E701                       	dc.b	smpsNoAttack, $01
0008F2D5 E10F                       	smpsAlterNote       $0F
0008F2D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F2DB E109                       	smpsAlterNote       $09
0008F2DD E701                       	dc.b	smpsNoAttack, $01
0008F2DF E105                       	smpsAlterNote       $05
0008F2E1 E701                       	dc.b	smpsNoAttack, $01
0008F2E3 E106                       	smpsAlterNote       $06
0008F2E5 E701                       	dc.b	smpsNoAttack, $01
0008F2E7 E10C                       	smpsAlterNote       $0C
0008F2E9 E701                       	dc.b	smpsNoAttack, $01
0008F2EB E110                       	smpsAlterNote       $10
0008F2ED E701                       	dc.b	smpsNoAttack, $01
0008F2EF E10C                       	smpsAlterNote       $0C
0008F2F1 E701                       	dc.b	smpsNoAttack, $01
0008F2F3 E109                       	smpsAlterNote       $09
0008F2F5 E701                       	dc.b	smpsNoAttack, $01
0008F2F7 E105                       	smpsAlterNote       $05
0008F2F9 E701                       	dc.b	smpsNoAttack, $01
0008F2FB E109                       	smpsAlterNote       $09
0008F2FD E701                       	dc.b	smpsNoAttack, $01
0008F2FF E10F                       	smpsAlterNote       $0F
0008F301 E701                       	dc.b	smpsNoAttack, $01
0008F303 E110                       	smpsAlterNote       $10
0008F305 E701                       	dc.b	smpsNoAttack, $01
0008F307 E10C                       	smpsAlterNote       $0C
0008F309 E701                       	dc.b	smpsNoAttack, $01
0008F30B E106                       	smpsAlterNote       $06
0008F30D E701                       	dc.b	smpsNoAttack, $01
0008F30F E10B                       	smpsAlterNote       $0B
0008F311 BF02                       	dc.b	nD5, $02
0008F313 E10C                       	smpsAlterNote       $0C
0008F315 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
0008F31B E109                       	smpsAlterNote       $09
0008F31D E701                       	dc.b	smpsNoAttack, $01
0008F31F E105                       	smpsAlterNote       $05
0008F321 E701                       	dc.b	smpsNoAttack, $01
0008F323 E109                       	smpsAlterNote       $09
0008F325 E701                       	dc.b	smpsNoAttack, $01
0008F327 E10F                       	smpsAlterNote       $0F
0008F329 E701                       	dc.b	smpsNoAttack, $01
0008F32B E110                       	smpsAlterNote       $10
0008F32D E701                       	dc.b	smpsNoAttack, $01
0008F32F E10C                       	smpsAlterNote       $0C
0008F331 E701                       	dc.b	smpsNoAttack, $01
0008F333 E106                       	smpsAlterNote       $06
0008F335 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F339 E109                       	smpsAlterNote       $09
0008F33B E701                       	dc.b	smpsNoAttack, $01
0008F33D E10F                       	smpsAlterNote       $0F
0008F33F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F343 E109                       	smpsAlterNote       $09
0008F345 E701                       	dc.b	smpsNoAttack, $01
0008F347 E106                       	smpsAlterNote       $06
0008F349 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F34D E10C                       	smpsAlterNote       $0C
0008F34F E701                       	dc.b	smpsNoAttack, $01
0008F351 E110                       	smpsAlterNote       $10
0008F353 E701                       	dc.b	smpsNoAttack, $01
0008F355 E10F                       	smpsAlterNote       $0F
0008F357 E701                       	dc.b	smpsNoAttack, $01
0008F359 E109                       	smpsAlterNote       $09
0008F35B E701                       	dc.b	smpsNoAttack, $01
0008F35D E105                       	smpsAlterNote       $05
0008F35F E701                       	dc.b	smpsNoAttack, $01
0008F361 E109                       	smpsAlterNote       $09
0008F363 E701                       	dc.b	smpsNoAttack, $01
0008F365 E10C                       	smpsAlterNote       $0C
0008F367 E701                       	dc.b	smpsNoAttack, $01
0008F369 E110                       	smpsAlterNote       $10
0008F36B E701                       	dc.b	smpsNoAttack, $01
0008F36D E10C                       	smpsAlterNote       $0C
0008F36F E701                       	dc.b	smpsNoAttack, $01
0008F371 E106                       	smpsAlterNote       $06
0008F373 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F377 E10D                       	smpsAlterNote       $0D
0008F379 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
0008F381 E10C                       	smpsAlterNote       $0C
0008F383 C10D                       	dc.b	nE5, $0D
0008F385 E106                       	smpsAlterNote       $06
0008F387 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F38B E109                       	smpsAlterNote       $09
0008F38D E701                       	dc.b	smpsNoAttack, $01
0008F38F E10F                       	smpsAlterNote       $0F
0008F391 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F395 E109                       	smpsAlterNote       $09
0008F397 E701                       	dc.b	smpsNoAttack, $01
0008F399 E106                       	smpsAlterNote       $06
0008F39B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F39F E10C                       	smpsAlterNote       $0C
0008F3A1 E701                       	dc.b	smpsNoAttack, $01
0008F3A3 E110                       	smpsAlterNote       $10
0008F3A5 E701                       	dc.b	smpsNoAttack, $01
0008F3A7 E10F                       	smpsAlterNote       $0F
0008F3A9 E701                       	dc.b	smpsNoAttack, $01
0008F3AB E109                       	smpsAlterNote       $09
0008F3AD E701                       	dc.b	smpsNoAttack, $01
0008F3AF E105                       	smpsAlterNote       $05
0008F3B1 E701                       	dc.b	smpsNoAttack, $01
0008F3B3 E106                       	smpsAlterNote       $06
0008F3B5 800F                       	dc.b	nRst, $0F
0008F3B9 E6FF                       	smpsAlterVol        $FF
0008F3BB E10F                       	smpsAlterNote       $0F
0008F3BD BA01                       	dc.b	nA4, $01
0008F3BF E110                       	smpsAlterNote       $10
0008F3C1 BB02                       	dc.b	nBb4, $02
0008F3C3 E10F                       	smpsAlterNote       $0F
0008F3C5 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
0008F3CB E10B                       	smpsAlterNote       $0B
0008F3CD BF03 8001                  	dc.b	nD5, $03, nRst, $01
0008F3D1 E10C                       	smpsAlterNote       $0C
0008F3D3 C103                       	dc.b	nE5, $03
0008F3D5 E10D                       	smpsAlterNote       $0D
0008F3D7 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
0008F3E1 E10B                       	smpsAlterNote       $0B
0008F3E3 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
0008F3E7 E104                       	smpsAlterNote       $04
0008F3E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F3ED E10A                       	smpsAlterNote       $0A
0008F3EF E701                       	dc.b	smpsNoAttack, $01
0008F3F1 E10D                       	smpsAlterNote       $0D
0008F3F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F3F7 E107                       	smpsAlterNote       $07
0008F3F9 E701                       	dc.b	smpsNoAttack, $01
0008F3FB E104                       	smpsAlterNote       $04
0008F3FD 8001                       	dc.b	nRst, $01
0008F3FF E110                       	smpsAlterNote       $10
0008F401 C703                       	dc.b	nBb5, $03
0008F403 E10F                       	smpsAlterNote       $0F
0008F405 C603 8001                  	dc.b	nA5, $03, nRst, $01
0008F409 E10D                       	smpsAlterNote       $0D
0008F40B C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0008F40F E10C                       	smpsAlterNote       $0C
0008F411 E701                       	dc.b	smpsNoAttack, $01
0008F413 E108                       	smpsAlterNote       $08
0008F415 E701                       	dc.b	smpsNoAttack, $01
0008F417 E109                       	smpsAlterNote       $09
0008F419 E701                       	dc.b	smpsNoAttack, $01
0008F41B E10F                       	smpsAlterNote       $0F
0008F41D E701                       	dc.b	smpsNoAttack, $01
0008F41F E113                       	smpsAlterNote       $13
0008F421 E701                       	dc.b	smpsNoAttack, $01
0008F423 E10F                       	smpsAlterNote       $0F
0008F425 E701                       	dc.b	smpsNoAttack, $01
0008F427 E10C                       	smpsAlterNote       $0C
0008F429 E701                       	dc.b	smpsNoAttack, $01
0008F42B E108                       	smpsAlterNote       $08
0008F42D E701                       	dc.b	smpsNoAttack, $01
0008F42F E10C                       	smpsAlterNote       $0C
0008F431 E701                       	dc.b	smpsNoAttack, $01
0008F433 E112                       	smpsAlterNote       $12
0008F435 E701                       	dc.b	smpsNoAttack, $01
0008F437 E113                       	smpsAlterNote       $13
0008F439 E701                       	dc.b	smpsNoAttack, $01
0008F43B E10F                       	smpsAlterNote       $0F
0008F43D E701                       	dc.b	smpsNoAttack, $01
0008F43F E109                       	smpsAlterNote       $09
0008F441 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F445 E10C                       	smpsAlterNote       $0C
0008F447 E701                       	dc.b	smpsNoAttack, $01
0008F449 E112                       	smpsAlterNote       $12
0008F44B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F44F E10C                       	smpsAlterNote       $0C
0008F451 E701                       	dc.b	smpsNoAttack, $01
0008F453 E109                       	smpsAlterNote       $09
0008F455 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F459 E10F                       	smpsAlterNote       $0F
0008F45B E701                       	dc.b	smpsNoAttack, $01
0008F45D E113                       	smpsAlterNote       $13
0008F45F E701                       	dc.b	smpsNoAttack, $01
0008F461 E112                       	smpsAlterNote       $12
0008F463 E701                       	dc.b	smpsNoAttack, $01
0008F465 E10C                       	smpsAlterNote       $0C
0008F467 E701                       	dc.b	smpsNoAttack, $01
0008F469 E108                       	smpsAlterNote       $08
0008F46B E701                       	dc.b	smpsNoAttack, $01
0008F46D E10C                       	smpsAlterNote       $0C
0008F46F E701                       	dc.b	smpsNoAttack, $01
0008F471 E10F                       	smpsAlterNote       $0F
0008F473 E701                       	dc.b	smpsNoAttack, $01
0008F475 E113                       	smpsAlterNote       $13
0008F477 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
0008F47B E10B                       	smpsAlterNote       $0B
0008F47D BF03                       	dc.b	nD5, $03
0008F47F E10C                       	smpsAlterNote       $0C
0008F481 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008F485 E10D                       	smpsAlterNote       $0D
0008F487 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0008F491 E10B                       	smpsAlterNote       $0B
0008F493 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
0008F49F E110                       	smpsAlterNote       $10
0008F4A1 C704 8001                  	dc.b	nBb5, $04, nRst, $01
0008F4A5 E10F                       	smpsAlterNote       $0F
0008F4A7 C604                       	dc.b	nA5, $04
0008F4A9 E10D                       	smpsAlterNote       $0D
0008F4AB C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0008F4B1 E109                       	smpsAlterNote       $09
0008F4B3 E701                       	dc.b	smpsNoAttack, $01
0008F4B5 E108                       	smpsAlterNote       $08
0008F4B7 E701                       	dc.b	smpsNoAttack, $01
0008F4B9 E10C                       	smpsAlterNote       $0C
0008F4BB E701                       	dc.b	smpsNoAttack, $01
0008F4BD E112                       	smpsAlterNote       $12
0008F4BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4C3 E10F                       	smpsAlterNote       $0F
0008F4C5 E701                       	dc.b	smpsNoAttack, $01
0008F4C7 E109                       	smpsAlterNote       $09
0008F4C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4CD E10F                       	smpsAlterNote       $0F
0008F4CF E701                       	dc.b	smpsNoAttack, $01
0008F4D1 E112                       	smpsAlterNote       $12
0008F4D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F4D7 E10C                       	smpsAlterNote       $0C
0008F4D9 E701                       	dc.b	smpsNoAttack, $01
0008F4DB E108                       	smpsAlterNote       $08
0008F4DD E701                       	dc.b	smpsNoAttack, $01
0008F4DF E109                       	smpsAlterNote       $09
0008F4E1 E701                       	dc.b	smpsNoAttack, $01
0008F4E3 E10F                       	smpsAlterNote       $0F
0008F4E5 E701                       	dc.b	smpsNoAttack, $01
0008F4E7 E113                       	smpsAlterNote       $13
0008F4E9 E701                       	dc.b	smpsNoAttack, $01
0008F4EB E10F                       	smpsAlterNote       $0F
0008F4ED E701                       	dc.b	smpsNoAttack, $01
0008F4EF E10C                       	smpsAlterNote       $0C
0008F4F1 E701                       	dc.b	smpsNoAttack, $01
0008F4F3 E108                       	smpsAlterNote       $08
0008F4F5 E701                       	dc.b	smpsNoAttack, $01
0008F4F7 E10C                       	smpsAlterNote       $0C
0008F4F9 E701                       	dc.b	smpsNoAttack, $01
0008F4FB E112                       	smpsAlterNote       $12
0008F4FD E701                       	dc.b	smpsNoAttack, $01
0008F4FF E113                       	smpsAlterNote       $13
0008F501 E701                       	dc.b	smpsNoAttack, $01
0008F503 E10F                       	smpsAlterNote       $0F
0008F505 E701                       	dc.b	smpsNoAttack, $01
0008F507 E109                       	smpsAlterNote       $09
0008F509 E701                       	dc.b	smpsNoAttack, $01
0008F50B E10D                       	smpsAlterNote       $0D
0008F50D C402                       	dc.b	nG5, $02
0008F50F E10F                       	smpsAlterNote       $0F
0008F511 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
0008F51B E10D                       	smpsAlterNote       $0D
0008F51D C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
0008F523 E10B                       	smpsAlterNote       $0B
0008F525 BF0D                       	dc.b	nD5, $0D
0008F527 E108                       	smpsAlterNote       $08
0008F529 E701                       	dc.b	smpsNoAttack, $01
0008F52B E104                       	smpsAlterNote       $04
0008F52D E701                       	dc.b	smpsNoAttack, $01
0008F52F E105                       	smpsAlterNote       $05
0008F531 E701                       	dc.b	smpsNoAttack, $01
0008F533 E10B                       	smpsAlterNote       $0B
0008F535 E701                       	dc.b	smpsNoAttack, $01
0008F537 E10F                       	smpsAlterNote       $0F
0008F539 E701                       	dc.b	smpsNoAttack, $01
0008F53B E10B                       	smpsAlterNote       $0B
0008F53D E701                       	dc.b	smpsNoAttack, $01
0008F53F E108                       	smpsAlterNote       $08
0008F541 E701                       	dc.b	smpsNoAttack, $01
0008F543 E104                       	smpsAlterNote       $04
0008F545 E701                       	dc.b	smpsNoAttack, $01
0008F547 E108                       	smpsAlterNote       $08
0008F549 E701                       	dc.b	smpsNoAttack, $01
0008F54B E10E                       	smpsAlterNote       $0E
0008F54D E701                       	dc.b	smpsNoAttack, $01
0008F54F E10F                       	smpsAlterNote       $0F
0008F551 E701                       	dc.b	smpsNoAttack, $01
0008F553 E10C                       	smpsAlterNote       $0C
0008F555 C101                       	dc.b	nE5, $01
0008F557 E10D                       	smpsAlterNote       $0D
0008F559 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
0008F561 E10F                       	smpsAlterNote       $0F
0008F563 C607                       	dc.b	nA5, $07
0008F565 E10C                       	smpsAlterNote       $0C
0008F567 CD07                       	dc.b	nE6, $07
0008F569 E10D                       	smpsAlterNote       $0D
0008F56B CE06 8001                  	dc.b	nF6, $06, nRst, $01
0008F56F E10C                       	smpsAlterNote       $0C
0008F571 CD03                       	dc.b	nE6, $03
0008F573 E10A                       	smpsAlterNote       $0A
0008F575 C903 8001                  	dc.b	nC6, $03, nRst, $01
0008F579 E10D                       	smpsAlterNote       $0D
0008F57B C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
0008F581 E10A                       	smpsAlterNote       $0A
0008F583 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F587 E110                       	smpsAlterNote       $10
0008F589 E701                       	dc.b	smpsNoAttack, $01
0008F58B E114                       	smpsAlterNote       $14
0008F58D E701                       	dc.b	smpsNoAttack, $01
0008F58F E113                       	smpsAlterNote       $13
0008F591 E701                       	dc.b	smpsNoAttack, $01
0008F593 E10D                       	smpsAlterNote       $0D
0008F595 E701                       	dc.b	smpsNoAttack, $01
0008F597 E109                       	smpsAlterNote       $09
0008F599 E701                       	dc.b	smpsNoAttack, $01
0008F59B E10D                       	smpsAlterNote       $0D
0008F59D E701                       	dc.b	smpsNoAttack, $01
0008F59F E110                       	smpsAlterNote       $10
0008F5A1 E701                       	dc.b	smpsNoAttack, $01
0008F5A3 E114                       	smpsAlterNote       $14
0008F5A5 E701                       	dc.b	smpsNoAttack, $01
0008F5A7 E10F                       	smpsAlterNote       $0F
0008F5A9 C607                       	dc.b	nA5, $07
0008F5AB E10D                       	smpsAlterNote       $0D
0008F5AD C40D                       	dc.b	nG5, $0D
0008F5AF E10A                       	smpsAlterNote       $0A
0008F5B1 E701                       	dc.b	smpsNoAttack, $01
0008F5B3 E106                       	smpsAlterNote       $06
0008F5B5 E701                       	dc.b	smpsNoAttack, $01
0008F5B7 E10A                       	smpsAlterNote       $0A
0008F5B9 E701                       	dc.b	smpsNoAttack, $01
0008F5BB E10D                       	smpsAlterNote       $0D
0008F5BD E701                       	dc.b	smpsNoAttack, $01
0008F5BF E111                       	smpsAlterNote       $11
0008F5C1 E701                       	dc.b	smpsNoAttack, $01
0008F5C3 E10D                       	smpsAlterNote       $0D
0008F5C5 E701                       	dc.b	smpsNoAttack, $01
0008F5C7 E107                       	smpsAlterNote       $07
0008F5C9 E701                       	dc.b	smpsNoAttack, $01
0008F5CB E106                       	smpsAlterNote       $06
0008F5CD E701                       	dc.b	smpsNoAttack, $01
0008F5CF E10A                       	smpsAlterNote       $0A
0008F5D1 E701                       	dc.b	smpsNoAttack, $01
0008F5D3 E110                       	smpsAlterNote       $10
0008F5D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5D9 E10D                       	smpsAlterNote       $0D
0008F5DB E701                       	dc.b	smpsNoAttack, $01
0008F5DD E107                       	smpsAlterNote       $07
0008F5DF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5E3 E10F                       	smpsAlterNote       $0F
0008F5E5 C60E                       	dc.b	nA5, $0E
0008F5E7 E109                       	smpsAlterNote       $09
0008F5E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5ED E10F                       	smpsAlterNote       $0F
0008F5EF E701                       	dc.b	smpsNoAttack, $01
0008F5F1 E112                       	smpsAlterNote       $12
0008F5F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F5F7 E10C                       	smpsAlterNote       $0C
0008F5F9 E701                       	dc.b	smpsNoAttack, $01
0008F5FB E108                       	smpsAlterNote       $08
0008F5FD E701                       	dc.b	smpsNoAttack, $01
0008F5FF E109                       	smpsAlterNote       $09
0008F601 E701                       	dc.b	smpsNoAttack, $01
0008F603 E10F                       	smpsAlterNote       $0F
0008F605 E701                       	dc.b	smpsNoAttack, $01
0008F607 E113                       	smpsAlterNote       $13
0008F609 E701                       	dc.b	smpsNoAttack, $01
0008F60B E10F                       	smpsAlterNote       $0F
0008F60D E701                       	dc.b	smpsNoAttack, $01
0008F60F E10C                       	smpsAlterNote       $0C
0008F611 E701                       	dc.b	smpsNoAttack, $01
0008F613 E108                       	smpsAlterNote       $08
0008F615 E701                       	dc.b	smpsNoAttack, $01
0008F617 E109                       	smpsAlterNote       $09
0008F619 8001                       	dc.b	nRst, $01
0008F61B E110                       	smpsAlterNote       $10
0008F61D C70D                       	dc.b	nBb5, $0D
0008F61F E10D                       	smpsAlterNote       $0D
0008F621 E701                       	dc.b	smpsNoAttack, $01
0008F623 E109                       	smpsAlterNote       $09
0008F625 E701                       	dc.b	smpsNoAttack, $01
0008F627 E10D                       	smpsAlterNote       $0D
0008F629 E701                       	dc.b	smpsNoAttack, $01
0008F62B E113                       	smpsAlterNote       $13
0008F62D E701                       	dc.b	smpsNoAttack, $01
0008F62F E114                       	smpsAlterNote       $14
0008F631 E701                       	dc.b	smpsNoAttack, $01
0008F633 E110                       	smpsAlterNote       $10
0008F635 E701                       	dc.b	smpsNoAttack, $01
0008F637 E10A                       	smpsAlterNote       $0A
0008F639 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F63D E10D                       	smpsAlterNote       $0D
0008F63F E701                       	dc.b	smpsNoAttack, $01
0008F641 E113                       	smpsAlterNote       $13
0008F643 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F647 E10D                       	smpsAlterNote       $0D
0008F649 E701                       	dc.b	smpsNoAttack, $01
0008F64B E10A                       	smpsAlterNote       $0A
0008F64D E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0008F657 E10B                       	smpsAlterNote       $0B
0008F659 8001                       	dc.b	nRst, $01
0008F65B E10C                       	smpsAlterNote       $0C
0008F65D CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0008F661 E10B                       	smpsAlterNote       $0B
0008F663 CB0D                       	dc.b	nD6, $0D
0008F665 E105                       	smpsAlterNote       $05
0008F667 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F66B E108                       	smpsAlterNote       $08
0008F66D E701                       	dc.b	smpsNoAttack, $01
0008F66F E10E                       	smpsAlterNote       $0E
0008F671 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F675 E108                       	smpsAlterNote       $08
0008F677 E701                       	dc.b	smpsNoAttack, $01
0008F679 E105                       	smpsAlterNote       $05
0008F67B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F67F E10B                       	smpsAlterNote       $0B
0008F681 E701                       	dc.b	smpsNoAttack, $01
0008F683 E10F                       	smpsAlterNote       $0F
0008F685 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F689 E10C                       	smpsAlterNote       $0C
0008F68B CC0D                       	dc.b	nEb6, $0D
0008F68D E106                       	smpsAlterNote       $06
0008F68F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F693 E109                       	smpsAlterNote       $09
0008F695 E701                       	dc.b	smpsNoAttack, $01
0008F697 E10C                       	smpsAlterNote       $0C
0008F699 8001                       	dc.b	nRst, $01
0008F69B E10A                       	smpsAlterNote       $0A
0008F69D C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0008F6A9 CB0E                       	dc.b	nD6, $0E
0008F6AB E105                       	smpsAlterNote       $05
0008F6AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6B1 E10B                       	smpsAlterNote       $0B
0008F6B3 E701                       	dc.b	smpsNoAttack, $01
0008F6B5 E10E                       	smpsAlterNote       $0E
0008F6B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F6BB E108                       	smpsAlterNote       $08
0008F6BD E701                       	dc.b	smpsNoAttack, $01
0008F6BF E104                       	smpsAlterNote       $04
0008F6C1 E701                       	dc.b	smpsNoAttack, $01
0008F6C3 E105                       	smpsAlterNote       $05
0008F6C5 E701                       	dc.b	smpsNoAttack, $01
0008F6C7 E10B                       	smpsAlterNote       $0B
0008F6C9 E701                       	dc.b	smpsNoAttack, $01
0008F6CB E10F                       	smpsAlterNote       $0F
0008F6CD E701                       	dc.b	smpsNoAttack, $01
0008F6CF E10D                       	smpsAlterNote       $0D
0008F6D1 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0008F6D5 E10C                       	smpsAlterNote       $0C
0008F6D7 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0008F6DB E10A                       	smpsAlterNote       $0A
0008F6DD C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0008F6E9 CB0D                       	dc.b	nD6, $0D
0008F6EB E108                       	smpsAlterNote       $08
0008F6ED E701                       	dc.b	smpsNoAttack, $01
0008F6EF E104                       	smpsAlterNote       $04
0008F6F1 E701                       	dc.b	smpsNoAttack, $01
0008F6F3 E105                       	smpsAlterNote       $05
0008F6F5 E701                       	dc.b	smpsNoAttack, $01
0008F6F7 E10B                       	smpsAlterNote       $0B
0008F6F9 E701                       	dc.b	smpsNoAttack, $01
0008F6FB E10F                       	smpsAlterNote       $0F
0008F6FD E701                       	dc.b	smpsNoAttack, $01
0008F6FF E10B                       	smpsAlterNote       $0B
0008F701 E701                       	dc.b	smpsNoAttack, $01
0008F703 E108                       	smpsAlterNote       $08
0008F705 E701                       	dc.b	smpsNoAttack, $01
0008F707 E104                       	smpsAlterNote       $04
0008F709 E701                       	dc.b	smpsNoAttack, $01
0008F70B E108                       	smpsAlterNote       $08
0008F70D E701                       	dc.b	smpsNoAttack, $01
0008F70F E10E                       	smpsAlterNote       $0E
0008F711 E701                       	dc.b	smpsNoAttack, $01
0008F713 E10F                       	smpsAlterNote       $0F
0008F715 E701                       	dc.b	smpsNoAttack, $01
0008F717 E10C                       	smpsAlterNote       $0C
0008F719 CC0D                       	dc.b	nEb6, $0D
0008F71B E109                       	smpsAlterNote       $09
0008F71D E701                       	dc.b	smpsNoAttack, $01
0008F71F E105                       	smpsAlterNote       $05
0008F721 E701                       	dc.b	smpsNoAttack, $01
0008F723 E106                       	smpsAlterNote       $06
0008F725 E701                       	dc.b	smpsNoAttack, $01
0008F727 E10C                       	smpsAlterNote       $0C
0008F729 E701                       	dc.b	smpsNoAttack, $01
0008F72B E10A                       	smpsAlterNote       $0A
0008F72D C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0008F739 CB0D                       	dc.b	nD6, $0D
0008F73B E108                       	smpsAlterNote       $08
0008F73D E701                       	dc.b	smpsNoAttack, $01
0008F73F E104                       	smpsAlterNote       $04
0008F741 E701                       	dc.b	smpsNoAttack, $01
0008F743 E108                       	smpsAlterNote       $08
0008F745 E701                       	dc.b	smpsNoAttack, $01
0008F747 E10B                       	smpsAlterNote       $0B
0008F749 E701                       	dc.b	smpsNoAttack, $01
0008F74B E10F                       	smpsAlterNote       $0F
0008F74D E701                       	dc.b	smpsNoAttack, $01
0008F74F E10B                       	smpsAlterNote       $0B
0008F751 E701                       	dc.b	smpsNoAttack, $01
0008F753 E105                       	smpsAlterNote       $05
0008F755 E701                       	dc.b	smpsNoAttack, $01
0008F757 E104                       	smpsAlterNote       $04
0008F759 E701                       	dc.b	smpsNoAttack, $01
0008F75B E108                       	smpsAlterNote       $08
0008F75D E701                       	dc.b	smpsNoAttack, $01
0008F75F E10E                       	smpsAlterNote       $0E
0008F761 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F765 E10B                       	smpsAlterNote       $0B
0008F767 E701                       	dc.b	smpsNoAttack, $01
0008F769 E105                       	smpsAlterNote       $05
0008F76B E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0008F773 03                         	dc.b	$03
0008F774 E601                       	smpsAlterVol        $01
0008F776 F6F1 D1                    	smpsJump            music84_Jump01
0008F779                            
0008F779                            ; FM5 Data
0008F779                            music84_FM5:
0008F77B E080                       	smpsPan             panLeft, $00
0008F77D 8003                       	dc.b	nRst, $03
0008F77F E10D                       	smpsAlterNote       $0D
0008F781 C203 8008                  	dc.b	nF5, $03, nRst, $08
0008F785 E10C                       	smpsAlterNote       $0C
0008F787 C103 800A                  	dc.b	nE5, $03, nRst, $0A
0008F78B E10F                       	smpsAlterNote       $0F
0008F78D BA03 8006                  	dc.b	nA4, $03, nRst, $06
0008F793 E6FE                       	smpsAlterVol        $FE
0008F795 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0008F79B E10D                       	smpsAlterNote       $0D
0008F79D C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0008F7A3 E10C                       	smpsAlterNote       $0C
0008F7A5 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008F7A9 E10A                       	smpsAlterNote       $0A
0008F7AB BD01 8001                  	dc.b	nC5, $01, nRst, $01
0008F7B1 03                         	dc.b	$03
0008F7B2                            
0008F7B2                            music84_Jump00:
0008F7B2 8004                       	dc.b	nRst, $04
0008F7B4 E602                       	smpsAlterVol        $02
0008F7B6 E10D                       	smpsAlterNote       $0D
0008F7B8 B60D                       	dc.b	nF4, $0D
0008F7BA E107                       	smpsAlterNote       $07
0008F7BC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7C0 E10A                       	smpsAlterNote       $0A
0008F7C2 E701                       	dc.b	smpsNoAttack, $01
0008F7C4 E110                       	smpsAlterNote       $10
0008F7C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7CA E10A                       	smpsAlterNote       $0A
0008F7CC E701                       	dc.b	smpsNoAttack, $01
0008F7CE E107                       	smpsAlterNote       $07
0008F7D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7D4 E10D                       	smpsAlterNote       $0D
0008F7D6 E701                       	dc.b	smpsNoAttack, $01
0008F7D8 E111                       	smpsAlterNote       $11
0008F7DA E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F7DE E10D                       	smpsAlterNote       $0D
0008F7E0 B80D                       	dc.b	nG4, $0D
0008F7E2 E107                       	smpsAlterNote       $07
0008F7E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7E8 E10A                       	smpsAlterNote       $0A
0008F7EA E701                       	dc.b	smpsNoAttack, $01
0008F7EC E110                       	smpsAlterNote       $10
0008F7EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7F2 E10A                       	smpsAlterNote       $0A
0008F7F4 E701                       	dc.b	smpsNoAttack, $01
0008F7F6 E107                       	smpsAlterNote       $07
0008F7F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F7FC E10D                       	smpsAlterNote       $0D
0008F7FE E701                       	dc.b	smpsNoAttack, $01
0008F800 E111                       	smpsAlterNote       $11
0008F802 E701                       	dc.b	smpsNoAttack, $01
0008F804 E110                       	smpsAlterNote       $10
0008F806 E701                       	dc.b	smpsNoAttack, $01
0008F808 E10A                       	smpsAlterNote       $0A
0008F80A E701                       	dc.b	smpsNoAttack, $01
0008F80C E106                       	smpsAlterNote       $06
0008F80E E701                       	dc.b	smpsNoAttack, $01
0008F810 E10A                       	smpsAlterNote       $0A
0008F812 E701                       	dc.b	smpsNoAttack, $01
0008F814 E10D                       	smpsAlterNote       $0D
0008F816 E701                       	dc.b	smpsNoAttack, $01
0008F818 E111                       	smpsAlterNote       $11
0008F81A E701                       	dc.b	smpsNoAttack, $01
0008F81C E10D                       	smpsAlterNote       $0D
0008F81E E701                       	dc.b	smpsNoAttack, $01
0008F820 E10F                       	smpsAlterNote       $0F
0008F822 BA0E                       	dc.b	nA4, $0E
0008F824 E109                       	smpsAlterNote       $09
0008F826 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F82A E10F                       	smpsAlterNote       $0F
0008F82C E701                       	dc.b	smpsNoAttack, $01
0008F82E E112                       	smpsAlterNote       $12
0008F830 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F834 E10C                       	smpsAlterNote       $0C
0008F836 E701                       	dc.b	smpsNoAttack, $01
0008F838 E108                       	smpsAlterNote       $08
0008F83A E701                       	dc.b	smpsNoAttack, $01
0008F83C E109                       	smpsAlterNote       $09
0008F83E E701                       	dc.b	smpsNoAttack, $01
0008F840 E10F                       	smpsAlterNote       $0F
0008F842 E701                       	dc.b	smpsNoAttack, $01
0008F844 E113                       	smpsAlterNote       $13
0008F846 E701                       	dc.b	smpsNoAttack, $01
0008F848 E10F                       	smpsAlterNote       $0F
0008F84A E701                       	dc.b	smpsNoAttack, $01
0008F84C E109                       	smpsAlterNote       $09
0008F84E E701                       	dc.b	smpsNoAttack, $01
0008F850 E108                       	smpsAlterNote       $08
0008F852 E701                       	dc.b	smpsNoAttack, $01
0008F854 E10C                       	smpsAlterNote       $0C
0008F856 E701                       	dc.b	smpsNoAttack, $01
0008F858 E112                       	smpsAlterNote       $12
0008F85A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F85E E10F                       	smpsAlterNote       $0F
0008F860 E701                       	dc.b	smpsNoAttack, $01
0008F862 E109                       	smpsAlterNote       $09
0008F864 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F868 E10F                       	smpsAlterNote       $0F
0008F86A E701                       	dc.b	smpsNoAttack, $01
0008F86C E112                       	smpsAlterNote       $12
0008F86E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F872 E10C                       	smpsAlterNote       $0C
0008F874 E701                       	dc.b	smpsNoAttack, $01
0008F876 E108                       	smpsAlterNote       $08
0008F878 E701                       	dc.b	smpsNoAttack, $01
0008F87A E109                       	smpsAlterNote       $09
0008F87C E701                       	dc.b	smpsNoAttack, $01
0008F87E E10F                       	smpsAlterNote       $0F
0008F880 E701                       	dc.b	smpsNoAttack, $01
0008F882 E113                       	smpsAlterNote       $13
0008F884 E701                       	dc.b	smpsNoAttack, $01
0008F886 E10F                       	smpsAlterNote       $0F
0008F888 E701                       	dc.b	smpsNoAttack, $01
0008F88A E10C                       	smpsAlterNote       $0C
0008F88C E701                       	dc.b	smpsNoAttack, $01
0008F88E E108                       	smpsAlterNote       $08
0008F890 E701                       	dc.b	smpsNoAttack, $01
0008F892 E109                       	smpsAlterNote       $09
0008F894 8001                       	dc.b	nRst, $01
0008F896 E10C                       	smpsAlterNote       $0C
0008F898 B50A                       	dc.b	nE4, $0A
0008F89A E10D                       	smpsAlterNote       $0D
0008F89C B60D                       	dc.b	nF4, $0D
0008F89E E10A                       	smpsAlterNote       $0A
0008F8A0 E701                       	dc.b	smpsNoAttack, $01
0008F8A2 E106                       	smpsAlterNote       $06
0008F8A4 E701                       	dc.b	smpsNoAttack, $01
0008F8A6 E107                       	smpsAlterNote       $07
0008F8A8 E701                       	dc.b	smpsNoAttack, $01
0008F8AA E10D                       	smpsAlterNote       $0D
0008F8AC E701                       	dc.b	smpsNoAttack, $01
0008F8AE E111                       	smpsAlterNote       $11
0008F8B0 E701                       	dc.b	smpsNoAttack, $01
0008F8B2 E10D                       	smpsAlterNote       $0D
0008F8B4 E701                       	dc.b	smpsNoAttack, $01
0008F8B6 E10A                       	smpsAlterNote       $0A
0008F8B8 E701                       	dc.b	smpsNoAttack, $01
0008F8BA E106                       	smpsAlterNote       $06
0008F8BC E701                       	dc.b	smpsNoAttack, $01
0008F8BE E10A                       	smpsAlterNote       $0A
0008F8C0 E701                       	dc.b	smpsNoAttack, $01
0008F8C2 E110                       	smpsAlterNote       $10
0008F8C4 E701                       	dc.b	smpsNoAttack, $01
0008F8C6 E111                       	smpsAlterNote       $11
0008F8C8 E701                       	dc.b	smpsNoAttack, $01
0008F8CA E10D                       	smpsAlterNote       $0D
0008F8CC B80D                       	dc.b	nG4, $0D
0008F8CE E10A                       	smpsAlterNote       $0A
0008F8D0 E701                       	dc.b	smpsNoAttack, $01
0008F8D2 E106                       	smpsAlterNote       $06
0008F8D4 E701                       	dc.b	smpsNoAttack, $01
0008F8D6 E107                       	smpsAlterNote       $07
0008F8D8 E701                       	dc.b	smpsNoAttack, $01
0008F8DA E10D                       	smpsAlterNote       $0D
0008F8DC E701                       	dc.b	smpsNoAttack, $01
0008F8DE E111                       	smpsAlterNote       $11
0008F8E0 E701                       	dc.b	smpsNoAttack, $01
0008F8E2 E10D                       	smpsAlterNote       $0D
0008F8E4 E701                       	dc.b	smpsNoAttack, $01
0008F8E6 E10A                       	smpsAlterNote       $0A
0008F8E8 E701                       	dc.b	smpsNoAttack, $01
0008F8EA E106                       	smpsAlterNote       $06
0008F8EC E701                       	dc.b	smpsNoAttack, $01
0008F8EE E10A                       	smpsAlterNote       $0A
0008F8F0 E701                       	dc.b	smpsNoAttack, $01
0008F8F2 E110                       	smpsAlterNote       $10
0008F8F4 E701                       	dc.b	smpsNoAttack, $01
0008F8F6 E111                       	smpsAlterNote       $11
0008F8F8 E701                       	dc.b	smpsNoAttack, $01
0008F8FA E10D                       	smpsAlterNote       $0D
0008F8FC E701                       	dc.b	smpsNoAttack, $01
0008F8FE E107                       	smpsAlterNote       $07
0008F900 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F904 E10A                       	smpsAlterNote       $0A
0008F906 E701                       	dc.b	smpsNoAttack, $01
0008F908 E110                       	smpsAlterNote       $10
0008F90A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F90E E10D                       	smpsAlterNote       $0D
0008F910 8001                       	dc.b	nRst, $01
0008F912 E10F                       	smpsAlterNote       $0F
0008F914 BA0D                       	dc.b	nA4, $0D
0008F916 E10C                       	smpsAlterNote       $0C
0008F918 E701                       	dc.b	smpsNoAttack, $01
0008F91A E108                       	smpsAlterNote       $08
0008F91C E701                       	dc.b	smpsNoAttack, $01
0008F91E E10C                       	smpsAlterNote       $0C
0008F920 E701                       	dc.b	smpsNoAttack, $01
0008F922 E112                       	smpsAlterNote       $12
0008F924 E701                       	dc.b	smpsNoAttack, $01
0008F926 E113                       	smpsAlterNote       $13
0008F928 E701                       	dc.b	smpsNoAttack, $01
0008F92A E10F                       	smpsAlterNote       $0F
0008F92C E701                       	dc.b	smpsNoAttack, $01
0008F92E E109                       	smpsAlterNote       $09
0008F930 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F934 E10C                       	smpsAlterNote       $0C
0008F936 E701                       	dc.b	smpsNoAttack, $01
0008F938 E112                       	smpsAlterNote       $12
0008F93A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F93E E10C                       	smpsAlterNote       $0C
0008F940 E701                       	dc.b	smpsNoAttack, $01
0008F942 E109                       	smpsAlterNote       $09
0008F944 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F948 E10F                       	smpsAlterNote       $0F
0008F94A E701                       	dc.b	smpsNoAttack, $01
0008F94C E113                       	smpsAlterNote       $13
0008F94E E701                       	dc.b	smpsNoAttack, $01
0008F950 E112                       	smpsAlterNote       $12
0008F952 E701                       	dc.b	smpsNoAttack, $01
0008F954 E10C                       	smpsAlterNote       $0C
0008F956 E701                       	dc.b	smpsNoAttack, $01
0008F958 E108                       	smpsAlterNote       $08
0008F95A E701                       	dc.b	smpsNoAttack, $01
0008F95C E10C                       	smpsAlterNote       $0C
0008F95E E701                       	dc.b	smpsNoAttack, $01
0008F960 E10F                       	smpsAlterNote       $0F
0008F962 E701                       	dc.b	smpsNoAttack, $01
0008F964 E113                       	smpsAlterNote       $13
0008F966 E701                       	dc.b	smpsNoAttack, $01
0008F968 E10F                       	smpsAlterNote       $0F
0008F96A E701                       	dc.b	smpsNoAttack, $01
0008F96C E109                       	smpsAlterNote       $09
0008F96E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008F972 E10D                       	smpsAlterNote       $0D
0008F974 B609 8001                  	dc.b	nF4, $09, nRst, $01
0008F978 E10C                       	smpsAlterNote       $0C
0008F97A B506 8001                  	dc.b	nE4, $06, nRst, $01
0008F97E E10B                       	smpsAlterNote       $0B
0008F980 B30D                       	dc.b	nD4, $0D
0008F982 E10C                       	smpsAlterNote       $0C
0008F984 B503 8001                  	dc.b	nE4, $03, nRst, $01
0008F988 E10D                       	smpsAlterNote       $0D
0008F98A B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0008F992 E109                       	smpsAlterNote       $09
0008F994 E701                       	dc.b	smpsNoAttack, $01
0008F996 E108                       	smpsAlterNote       $08
0008F998 E701                       	dc.b	smpsNoAttack, $01
0008F99A E10C                       	smpsAlterNote       $0C
0008F99C E701                       	dc.b	smpsNoAttack, $01
0008F99E E112                       	smpsAlterNote       $12
0008F9A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9A4 E10F                       	smpsAlterNote       $0F
0008F9A6 E701                       	dc.b	smpsNoAttack, $01
0008F9A8 E109                       	smpsAlterNote       $09
0008F9AA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9AE E10F                       	smpsAlterNote       $0F
0008F9B0 E701                       	dc.b	smpsNoAttack, $01
0008F9B2 E112                       	smpsAlterNote       $12
0008F9B4 E701                       	dc.b	smpsNoAttack, $01
0008F9B6 E113                       	smpsAlterNote       $13
0008F9B8 8001                       	dc.b	nRst, $01
0008F9BA E10D                       	smpsAlterNote       $0D
0008F9BC C20D                       	dc.b	nF5, $0D
0008F9BE E107                       	smpsAlterNote       $07
0008F9C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9C4 E10A                       	smpsAlterNote       $0A
0008F9C6 E701                       	dc.b	smpsNoAttack, $01
0008F9C8 E110                       	smpsAlterNote       $10
0008F9CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9CE E10A                       	smpsAlterNote       $0A
0008F9D0 E701                       	dc.b	smpsNoAttack, $01
0008F9D2 E107                       	smpsAlterNote       $07
0008F9D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008F9D8 E10D                       	smpsAlterNote       $0D
0008F9DA E701                       	dc.b	smpsNoAttack, $01
0008F9DC E111                       	smpsAlterNote       $11
0008F9DE E701                       	dc.b	smpsNoAttack, $01
0008F9E0 E110                       	smpsAlterNote       $10
0008F9E2 E701                       	dc.b	smpsNoAttack, $01
0008F9E4 E10A                       	smpsAlterNote       $0A
0008F9E6 E701                       	dc.b	smpsNoAttack, $01
0008F9E8 E106                       	smpsAlterNote       $06
0008F9EA E701                       	dc.b	smpsNoAttack, $01
0008F9EC E10A                       	smpsAlterNote       $0A
0008F9EE E701                       	dc.b	smpsNoAttack, $01
0008F9F0 E10D                       	smpsAlterNote       $0D
0008F9F2 E701                       	dc.b	smpsNoAttack, $01
0008F9F4 E111                       	smpsAlterNote       $11
0008F9F6 E701                       	dc.b	smpsNoAttack, $01
0008F9F8 E10D                       	smpsAlterNote       $0D
0008F9FA E701                       	dc.b	smpsNoAttack, $01
0008F9FC E107                       	smpsAlterNote       $07
0008F9FE E701                       	dc.b	smpsNoAttack, $01
0008FA00 E106                       	smpsAlterNote       $06
0008FA02 E701                       	dc.b	smpsNoAttack, $01
0008FA04 E10A                       	smpsAlterNote       $0A
0008FA06 E701                       	dc.b	smpsNoAttack, $01
0008FA08 E110                       	smpsAlterNote       $10
0008FA0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA0E E10D                       	smpsAlterNote       $0D
0008FA10 E701                       	dc.b	smpsNoAttack, $01
0008FA12 E107                       	smpsAlterNote       $07
0008FA14 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA18 E10D                       	smpsAlterNote       $0D
0008FA1A E701                       	dc.b	smpsNoAttack, $01
0008FA1C E110                       	smpsAlterNote       $10
0008FA1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA22 E10A                       	smpsAlterNote       $0A
0008FA24 E701                       	dc.b	smpsNoAttack, $01
0008FA26 E106                       	smpsAlterNote       $06
0008FA28 E701                       	dc.b	smpsNoAttack, $01
0008FA2A E107                       	smpsAlterNote       $07
0008FA2C E701                       	dc.b	smpsNoAttack, $01
0008FA2E E10D                       	smpsAlterNote       $0D
0008FA30 E701                       	dc.b	smpsNoAttack, $01
0008FA32 E111                       	smpsAlterNote       $11
0008FA34 E701                       	dc.b	smpsNoAttack, $01
0008FA36 E10D                       	smpsAlterNote       $0D
0008FA38 E701                       	dc.b	smpsNoAttack, $01
0008FA3A E10A                       	smpsAlterNote       $0A
0008FA3C E701                       	dc.b	smpsNoAttack, $01
0008FA3E E106                       	smpsAlterNote       $06
0008FA40 E701                       	dc.b	smpsNoAttack, $01
0008FA42 E10A                       	smpsAlterNote       $0A
0008FA44 E701                       	dc.b	smpsNoAttack, $01
0008FA46 E110                       	smpsAlterNote       $10
0008FA48 E701                       	dc.b	smpsNoAttack, $01
0008FA4A E111                       	smpsAlterNote       $11
0008FA4C E701                       	dc.b	smpsNoAttack, $01
0008FA4E E10D                       	smpsAlterNote       $0D
0008FA50 E701                       	dc.b	smpsNoAttack, $01
0008FA52 E107                       	smpsAlterNote       $07
0008FA54 E701                       	dc.b	smpsNoAttack, $01
0008FA56 E10D                       	smpsAlterNote       $0D
0008FA58 C207                       	dc.b	nF5, $07
0008FA5A E10C                       	smpsAlterNote       $0C
0008FA5C C10D                       	dc.b	nE5, $0D
0008FA5E E109                       	smpsAlterNote       $09
0008FA60 E701                       	dc.b	smpsNoAttack, $01
0008FA62 E106                       	smpsAlterNote       $06
0008FA64 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA68 E10C                       	smpsAlterNote       $0C
0008FA6A E701                       	dc.b	smpsNoAttack, $01
0008FA6C E110                       	smpsAlterNote       $10
0008FA6E E701                       	dc.b	smpsNoAttack, $01
0008FA70 E10F                       	smpsAlterNote       $0F
0008FA72 E701                       	dc.b	smpsNoAttack, $01
0008FA74 E109                       	smpsAlterNote       $09
0008FA76 E701                       	dc.b	smpsNoAttack, $01
0008FA78 E105                       	smpsAlterNote       $05
0008FA7A E701                       	dc.b	smpsNoAttack, $01
0008FA7C E109                       	smpsAlterNote       $09
0008FA7E E701                       	dc.b	smpsNoAttack, $01
0008FA80 E10C                       	smpsAlterNote       $0C
0008FA82 E701                       	dc.b	smpsNoAttack, $01
0008FA84 E110                       	smpsAlterNote       $10
0008FA86 E701                       	dc.b	smpsNoAttack, $01
0008FA88 E10B                       	smpsAlterNote       $0B
0008FA8A BF0D                       	dc.b	nD5, $0D
0008FA8C E108                       	smpsAlterNote       $08
0008FA8E E701                       	dc.b	smpsNoAttack, $01
0008FA90 E105                       	smpsAlterNote       $05
0008FA92 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FA96 E10B                       	smpsAlterNote       $0B
0008FA98 E701                       	dc.b	smpsNoAttack, $01
0008FA9A E10F                       	smpsAlterNote       $0F
0008FA9C E701                       	dc.b	smpsNoAttack, $01
0008FA9E E10E                       	smpsAlterNote       $0E
0008FAA0 E701                       	dc.b	smpsNoAttack, $01
0008FAA2 E108                       	smpsAlterNote       $08
0008FAA4 E701                       	dc.b	smpsNoAttack, $01
0008FAA6 E104                       	smpsAlterNote       $04
0008FAA8 E701                       	dc.b	smpsNoAttack, $01
0008FAAA E108                       	smpsAlterNote       $08
0008FAAC E701                       	dc.b	smpsNoAttack, $01
0008FAAE E10E                       	smpsAlterNote       $0E
0008FAB0 E701                       	dc.b	smpsNoAttack, $01
0008FAB2 E10F                       	smpsAlterNote       $0F
0008FAB4 E701                       	dc.b	smpsNoAttack, $01
0008FAB6 E10B                       	smpsAlterNote       $0B
0008FAB8 E701                       	dc.b	smpsNoAttack, $01
0008FABA E105                       	smpsAlterNote       $05
0008FABC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAC0 E108                       	smpsAlterNote       $08
0008FAC2 E701                       	dc.b	smpsNoAttack, $01
0008FAC4 E10E                       	smpsAlterNote       $0E
0008FAC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FACA E108                       	smpsAlterNote       $08
0008FACC E701                       	dc.b	smpsNoAttack, $01
0008FACE E105                       	smpsAlterNote       $05
0008FAD0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FAD4 E10B                       	smpsAlterNote       $0B
0008FAD6 E701                       	dc.b	smpsNoAttack, $01
0008FAD8 E10F                       	smpsAlterNote       $0F
0008FADA E701                       	dc.b	smpsNoAttack, $01
0008FADC E10E                       	smpsAlterNote       $0E
0008FADE E701                       	dc.b	smpsNoAttack, $01
0008FAE0 E108                       	smpsAlterNote       $08
0008FAE2 E701                       	dc.b	smpsNoAttack, $01
0008FAE4 E104                       	smpsAlterNote       $04
0008FAE6 E701                       	dc.b	smpsNoAttack, $01
0008FAE8 E108                       	smpsAlterNote       $08
0008FAEA E701                       	dc.b	smpsNoAttack, $01
0008FAEC E10B                       	smpsAlterNote       $0B
0008FAEE E701                       	dc.b	smpsNoAttack, $01
0008FAF0 E10F                       	smpsAlterNote       $0F
0008FAF2 E701                       	dc.b	smpsNoAttack, $01
0008FAF4 E10B                       	smpsAlterNote       $0B
0008FAF6 E701                       	dc.b	smpsNoAttack, $01
0008FAF8 E105                       	smpsAlterNote       $05
0008FAFA E701                       	dc.b	smpsNoAttack, $01
0008FAFC E104                       	smpsAlterNote       $04
0008FAFE E701                       	dc.b	smpsNoAttack, $01
0008FB00 E108                       	smpsAlterNote       $08
0008FB02 E701                       	dc.b	smpsNoAttack, $01
0008FB04 E10E                       	smpsAlterNote       $0E
0008FB06 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB0A E10B                       	smpsAlterNote       $0B
0008FB0C E701                       	dc.b	smpsNoAttack, $01
0008FB0E E105                       	smpsAlterNote       $05
0008FB10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB14 E10B                       	smpsAlterNote       $0B
0008FB16 E701                       	dc.b	smpsNoAttack, $01
0008FB18 E10E                       	smpsAlterNote       $0E
0008FB1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB1E E108                       	smpsAlterNote       $08
0008FB20 E701                       	dc.b	smpsNoAttack, $01
0008FB22 E105                       	smpsAlterNote       $05
0008FB24 8001                       	dc.b	nRst, $01
0008FB28 E601                       	smpsAlterVol        $01
0008FB2A E10B                       	smpsAlterNote       $0B
0008FB2C BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0008FB38 8004                       	dc.b	nRst, $04
0008FB3C E6FF                       	smpsAlterVol        $FF
0008FB3E E10D                       	smpsAlterNote       $0D
0008FB40 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0008FB48 E10C                       	smpsAlterNote       $0C
0008FB4A E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0008FB4F E10D                       	smpsAlterNote       $0D
0008FB51 B60D                       	dc.b	nF4, $0D
0008FB53 E10A                       	smpsAlterNote       $0A
0008FB55 E701                       	dc.b	smpsNoAttack, $01
0008FB57 E106                       	smpsAlterNote       $06
0008FB59 E701                       	dc.b	smpsNoAttack, $01
0008FB5B E10A                       	smpsAlterNote       $0A
0008FB5D E701                       	dc.b	smpsNoAttack, $01
0008FB5F E110                       	smpsAlterNote       $10
0008FB61 E701                       	dc.b	smpsNoAttack, $01
0008FB63 E111                       	smpsAlterNote       $11
0008FB65 E701                       	dc.b	smpsNoAttack, $01
0008FB67 E10D                       	smpsAlterNote       $0D
0008FB69 E701                       	dc.b	smpsNoAttack, $01
0008FB6B E107                       	smpsAlterNote       $07
0008FB6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB71 E10A                       	smpsAlterNote       $0A
0008FB73 E701                       	dc.b	smpsNoAttack, $01
0008FB75 E110                       	smpsAlterNote       $10
0008FB77 E701                       	dc.b	smpsNoAttack, $01
0008FB79 E111                       	smpsAlterNote       $11
0008FB7B 8001                       	dc.b	nRst, $01
0008FB7D E10D                       	smpsAlterNote       $0D
0008FB7F B80D                       	dc.b	nG4, $0D
0008FB81 E10A                       	smpsAlterNote       $0A
0008FB83 E701                       	dc.b	smpsNoAttack, $01
0008FB85 E106                       	smpsAlterNote       $06
0008FB87 E701                       	dc.b	smpsNoAttack, $01
0008FB89 E10A                       	smpsAlterNote       $0A
0008FB8B E701                       	dc.b	smpsNoAttack, $01
0008FB8D E110                       	smpsAlterNote       $10
0008FB8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB93 E10D                       	smpsAlterNote       $0D
0008FB95 E701                       	dc.b	smpsNoAttack, $01
0008FB97 E107                       	smpsAlterNote       $07
0008FB99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FB9D E10D                       	smpsAlterNote       $0D
0008FB9F E701                       	dc.b	smpsNoAttack, $01
0008FBA1 E110                       	smpsAlterNote       $10
0008FBA3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FBA7 E10A                       	smpsAlterNote       $0A
0008FBA9 E701                       	dc.b	smpsNoAttack, $01
0008FBAB E106                       	smpsAlterNote       $06
0008FBAD E701                       	dc.b	smpsNoAttack, $01
0008FBAF E107                       	smpsAlterNote       $07
0008FBB1 E701                       	dc.b	smpsNoAttack, $01
0008FBB3 E10D                       	smpsAlterNote       $0D
0008FBB5 E701                       	dc.b	smpsNoAttack, $01
0008FBB7 E111                       	smpsAlterNote       $11
0008FBB9 E701                       	dc.b	smpsNoAttack, $01
0008FBBB E10D                       	smpsAlterNote       $0D
0008FBBD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FBC1 E10F                       	smpsAlterNote       $0F
0008FBC3 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0008FBC7 E110                       	smpsAlterNote       $10
0008FBC9 BB03                       	dc.b	nBb4, $03
0008FBCB E10F                       	smpsAlterNote       $0F
0008FBCD BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0008FBD3 E110                       	smpsAlterNote       $10
0008FBD5 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0008FBD9 E10F                       	smpsAlterNote       $0F
0008FBDB C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0008FBE1 E110                       	smpsAlterNote       $10
0008FBE3 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0008FBE7 E10F                       	smpsAlterNote       $0F
0008FBE9 D20D                       	dc.b	nA6, $0D
0008FBEB E10C                       	smpsAlterNote       $0C
0008FBED E701                       	dc.b	smpsNoAttack, $01
0008FBEF E108                       	smpsAlterNote       $08
0008FBF1 E701                       	dc.b	smpsNoAttack, $01
0008FBF3 E10C                       	smpsAlterNote       $0C
0008FBF5 E701                       	dc.b	smpsNoAttack, $01
0008FBF7 E10F                       	smpsAlterNote       $0F
0008FBF9 E701                       	dc.b	smpsNoAttack, $01
0008FBFB E113                       	smpsAlterNote       $13
0008FBFD E701                       	dc.b	smpsNoAttack, $01
0008FBFF E10F                       	smpsAlterNote       $0F
0008FC01 E701                       	dc.b	smpsNoAttack, $01
0008FC03 E109                       	smpsAlterNote       $09
0008FC05 E701                       	dc.b	smpsNoAttack, $01
0008FC07 E108                       	smpsAlterNote       $08
0008FC09 E701                       	dc.b	smpsNoAttack, $01
0008FC0B E10C                       	smpsAlterNote       $0C
0008FC0D E701                       	dc.b	smpsNoAttack, $01
0008FC0F E112                       	smpsAlterNote       $12
0008FC11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC15 E10F                       	smpsAlterNote       $0F
0008FC17 E701                       	dc.b	smpsNoAttack, $01
0008FC19 E109                       	smpsAlterNote       $09
0008FC1B E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0008FC21 E10D                       	smpsAlterNote       $0D
0008FC23 CE07                       	dc.b	nF6, $07
0008FC25 E10C                       	smpsAlterNote       $0C
0008FC27 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0008FC2B E10D                       	smpsAlterNote       $0D
0008FC2D CE03                       	dc.b	nF6, $03
0008FC2F E10C                       	smpsAlterNote       $0C
0008FC31 CC0D                       	dc.b	nEb6, $0D
0008FC33 E109                       	smpsAlterNote       $09
0008FC35 E701                       	dc.b	smpsNoAttack, $01
0008FC37 E106                       	smpsAlterNote       $06
0008FC39 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC3D E10C                       	smpsAlterNote       $0C
0008FC3F E701                       	dc.b	smpsNoAttack, $01
0008FC41 E110                       	smpsAlterNote       $10
0008FC43 E701                       	dc.b	smpsNoAttack, $01
0008FC45 E10F                       	smpsAlterNote       $0F
0008FC47 E701                       	dc.b	smpsNoAttack, $01
0008FC49 E109                       	smpsAlterNote       $09
0008FC4B E701                       	dc.b	smpsNoAttack, $01
0008FC4D E105                       	smpsAlterNote       $05
0008FC4F E701                       	dc.b	smpsNoAttack, $01
0008FC51 E109                       	smpsAlterNote       $09
0008FC53 E701                       	dc.b	smpsNoAttack, $01
0008FC55 E10C                       	smpsAlterNote       $0C
0008FC57 E701                       	dc.b	smpsNoAttack, $01
0008FC59 E110                       	smpsAlterNote       $10
0008FC5B E701                       	dc.b	smpsNoAttack, $01
0008FC5D E10C                       	smpsAlterNote       $0C
0008FC5F E701                       	dc.b	smpsNoAttack, $01
0008FC61 E106                       	smpsAlterNote       $06
0008FC63 E701                       	dc.b	smpsNoAttack, $01
0008FC65 E105                       	smpsAlterNote       $05
0008FC67 E701                       	dc.b	smpsNoAttack, $01
0008FC69 E109                       	smpsAlterNote       $09
0008FC6B E701                       	dc.b	smpsNoAttack, $01
0008FC6D E10F                       	smpsAlterNote       $0F
0008FC6F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FC73 E10C                       	smpsAlterNote       $0C
0008FC75 E701                       	dc.b	smpsNoAttack, $01
0008FC77 E10B                       	smpsAlterNote       $0B
0008FC79 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0008FC83 E10F                       	smpsAlterNote       $0F
0008FC85 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0008FC8F E10D                       	smpsAlterNote       $0D
0008FC91 C203                       	dc.b	nF5, $03
0008FC93 E10C                       	smpsAlterNote       $0C
0008FC95 C103 8001                  	dc.b	nE5, $03, nRst, $01
0008FC99 E10D                       	smpsAlterNote       $0D
0008FC9B C20D                       	dc.b	nF5, $0D
0008FC9D E10C                       	smpsAlterNote       $0C
0008FC9F C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0008FCA3 E10B                       	smpsAlterNote       $0B
0008FCA5 BF0D                       	dc.b	nD5, $0D
0008FCA7 E108                       	smpsAlterNote       $08
0008FCA9 E701                       	dc.b	smpsNoAttack, $01
0008FCAB E104                       	smpsAlterNote       $04
0008FCAD E701                       	dc.b	smpsNoAttack, $01
0008FCAF E108                       	smpsAlterNote       $08
0008FCB1 E701                       	dc.b	smpsNoAttack, $01
0008FCB3 E10E                       	smpsAlterNote       $0E
0008FCB5 E701                       	dc.b	smpsNoAttack, $01
0008FCB7 E10F                       	smpsAlterNote       $0F
0008FCB9 E701                       	dc.b	smpsNoAttack, $01
0008FCBB E10B                       	smpsAlterNote       $0B
0008FCBD E701                       	dc.b	smpsNoAttack, $01
0008FCBF E105                       	smpsAlterNote       $05
0008FCC1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCC5 E108                       	smpsAlterNote       $08
0008FCC7 E701                       	dc.b	smpsNoAttack, $01
0008FCC9 E10E                       	smpsAlterNote       $0E
0008FCCB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCCF E108                       	smpsAlterNote       $08
0008FCD1 E701                       	dc.b	smpsNoAttack, $01
0008FCD3 E105                       	smpsAlterNote       $05
0008FCD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FCD9 E10B                       	smpsAlterNote       $0B
0008FCDB E701                       	dc.b	smpsNoAttack, $01
0008FCDD E10F                       	smpsAlterNote       $0F
0008FCDF E701                       	dc.b	smpsNoAttack, $01
0008FCE1 E10E                       	smpsAlterNote       $0E
0008FCE3 E701                       	dc.b	smpsNoAttack, $01
0008FCE5 E108                       	smpsAlterNote       $08
0008FCE7 E701                       	dc.b	smpsNoAttack, $01
0008FCE9 E104                       	smpsAlterNote       $04
0008FCEB E701                       	dc.b	smpsNoAttack, $01
0008FCED E108                       	smpsAlterNote       $08
0008FCEF E701                       	dc.b	smpsNoAttack, $01
0008FCF1 E10B                       	smpsAlterNote       $0B
0008FCF3 E701                       	dc.b	smpsNoAttack, $01
0008FCF5 E10F                       	smpsAlterNote       $0F
0008FCF7 E701                       	dc.b	smpsNoAttack, $01
0008FCF9 E10B                       	smpsAlterNote       $0B
0008FCFB E701                       	dc.b	smpsNoAttack, $01
0008FCFD E105                       	smpsAlterNote       $05
0008FCFF E701                       	dc.b	smpsNoAttack, $01
0008FD01 E104                       	smpsAlterNote       $04
0008FD03 E701                       	dc.b	smpsNoAttack, $01
0008FD05 E108                       	smpsAlterNote       $08
0008FD07 E701                       	dc.b	smpsNoAttack, $01
0008FD09 E10E                       	smpsAlterNote       $0E
0008FD0B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD0F E10B                       	smpsAlterNote       $0B
0008FD11 E701                       	dc.b	smpsNoAttack, $01
0008FD13 E105                       	smpsAlterNote       $05
0008FD15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD19 E10B                       	smpsAlterNote       $0B
0008FD1B E701                       	dc.b	smpsNoAttack, $01
0008FD1D E10E                       	smpsAlterNote       $0E
0008FD1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD23 E108                       	smpsAlterNote       $08
0008FD25 E701                       	dc.b	smpsNoAttack, $01
0008FD27 E104                       	smpsAlterNote       $04
0008FD29 E701                       	dc.b	smpsNoAttack, $01
0008FD2B E105                       	smpsAlterNote       $05
0008FD2D E701                       	dc.b	smpsNoAttack, $01
0008FD2F E10B                       	smpsAlterNote       $0B
0008FD31 E701                       	dc.b	smpsNoAttack, $01
0008FD33 E10F                       	smpsAlterNote       $0F
0008FD35 E701                       	dc.b	smpsNoAttack, $01
0008FD37 E10B                       	smpsAlterNote       $0B
0008FD39 E701                       	dc.b	smpsNoAttack, $01
0008FD3B E108                       	smpsAlterNote       $08
0008FD3D E701                       	dc.b	smpsNoAttack, $01
0008FD3F E104                       	smpsAlterNote       $04
0008FD41 E701                       	dc.b	smpsNoAttack, $01
0008FD43 E108                       	smpsAlterNote       $08
0008FD45 E701                       	dc.b	smpsNoAttack, $01
0008FD47 E10E                       	smpsAlterNote       $0E
0008FD49 E701                       	dc.b	smpsNoAttack, $01
0008FD4B E10F                       	smpsAlterNote       $0F
0008FD4D E701                       	dc.b	smpsNoAttack, $01
0008FD4F E10B                       	smpsAlterNote       $0B
0008FD51 E701                       	dc.b	smpsNoAttack, $01
0008FD53 E105                       	smpsAlterNote       $05
0008FD55 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD59 E108                       	smpsAlterNote       $08
0008FD5B E701                       	dc.b	smpsNoAttack, $01
0008FD5D E10E                       	smpsAlterNote       $0E
0008FD5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD63 E108                       	smpsAlterNote       $08
0008FD65 E701                       	dc.b	smpsNoAttack, $01
0008FD67 E105                       	smpsAlterNote       $05
0008FD69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FD6D E10B                       	smpsAlterNote       $0B
0008FD6F E701                       	dc.b	smpsNoAttack, $01
0008FD71 E10F                       	smpsAlterNote       $0F
0008FD73 E701                       	dc.b	smpsNoAttack, $01
0008FD75 E10E                       	smpsAlterNote       $0E
0008FD77 E701                       	dc.b	smpsNoAttack, $01
0008FD79 E108                       	smpsAlterNote       $08
0008FD7B E701                       	dc.b	smpsNoAttack, $01
0008FD7D E104                       	smpsAlterNote       $04
0008FD7F E701                       	dc.b	smpsNoAttack, $01
0008FD81 E108                       	smpsAlterNote       $08
0008FD83 E701                       	dc.b	smpsNoAttack, $01
0008FD85 E10B                       	smpsAlterNote       $0B
0008FD87 E701                       	dc.b	smpsNoAttack, $01
0008FD89 E10F                       	smpsAlterNote       $0F
0008FD8B E701                       	dc.b	smpsNoAttack, $01
0008FD8D E10B                       	smpsAlterNote       $0B
0008FD8F E701                       	dc.b	smpsNoAttack, $01
0008FD91 E105                       	smpsAlterNote       $05
0008FD93 E701                       	dc.b	smpsNoAttack, $01
0008FD95 E104                       	smpsAlterNote       $04
0008FD97 E701                       	dc.b	smpsNoAttack, $01
0008FD99 E105                       	smpsAlterNote       $05
0008FD9B 8001                       	dc.b	nRst, $01
0008FD9D E10D                       	smpsAlterNote       $0D
0008FD9F C20D                       	dc.b	nF5, $0D
0008FDA1 E107                       	smpsAlterNote       $07
0008FDA3 E701                       	dc.b	smpsNoAttack, $01
0008FDA5 E106                       	smpsAlterNote       $06
0008FDA7 E701                       	dc.b	smpsNoAttack, $01
0008FDA9 E10A                       	smpsAlterNote       $0A
0008FDAB E701                       	dc.b	smpsNoAttack, $01
0008FDAD E110                       	smpsAlterNote       $10
0008FDAF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDB3 E10D                       	smpsAlterNote       $0D
0008FDB5 E701                       	dc.b	smpsNoAttack, $01
0008FDB7 E107                       	smpsAlterNote       $07
0008FDB9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDBD E10D                       	smpsAlterNote       $0D
0008FDBF E701                       	dc.b	smpsNoAttack, $01
0008FDC1 E110                       	smpsAlterNote       $10
0008FDC3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDC7 E10A                       	smpsAlterNote       $0A
0008FDC9 E701                       	dc.b	smpsNoAttack, $01
0008FDCB E106                       	smpsAlterNote       $06
0008FDCD E701                       	dc.b	smpsNoAttack, $01
0008FDCF E107                       	smpsAlterNote       $07
0008FDD1 E701                       	dc.b	smpsNoAttack, $01
0008FDD3 E10D                       	smpsAlterNote       $0D
0008FDD5 E701                       	dc.b	smpsNoAttack, $01
0008FDD7 E111                       	smpsAlterNote       $11
0008FDD9 E701                       	dc.b	smpsNoAttack, $01
0008FDDB E10D                       	smpsAlterNote       $0D
0008FDDD E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FDE1 E10C                       	smpsAlterNote       $0C
0008FDE3 C10D                       	dc.b	nE5, $0D
0008FDE5 E10D                       	smpsAlterNote       $0D
0008FDE7 C20A                       	dc.b	nF5, $0A
0008FDE9 E10C                       	smpsAlterNote       $0C
0008FDEB C10E                       	dc.b	nE5, $0E
0008FDED E106                       	smpsAlterNote       $06
0008FDEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FDF3 E10C                       	smpsAlterNote       $0C
0008FDF5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FDF9 E10B                       	smpsAlterNote       $0B
0008FDFB BF0D                       	dc.b	nD5, $0D
0008FDFD E10C                       	smpsAlterNote       $0C
0008FDFF C107                       	dc.b	nE5, $07
0008FE01 E10D                       	smpsAlterNote       $0D
0008FE03 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0008FE0D E110                       	smpsAlterNote       $10
0008FE0F C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0008FE15 E10F                       	smpsAlterNote       $0F
0008FE17 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0008FE1F E10D                       	smpsAlterNote       $0D
0008FE21 D003                       	dc.b	nG6, $03
0008FE25 E0C0                       	smpsPan             panCenter, $00
0008FE27 E6FF                       	smpsAlterVol        $FF
0008FE29 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0008FE35 8001                       	dc.b	nRst, $01
0008FE37 E10C                       	smpsAlterNote       $0C
0008FE39 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0008FE43 E604                       	smpsAlterVol        $04
0008FE45 E10B                       	smpsAlterNote       $0B
0008FE47 B306 8001                  	dc.b	nD4, $06, nRst, $01
0008FE4B E10F                       	smpsAlterNote       $0F
0008FE4D AE03                       	dc.b	nA3, $03
0008FE4F E10D                       	smpsAlterNote       $0D
0008FE51 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008FE55 E10C                       	smpsAlterNote       $0C
0008FE57 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FE5B E10B                       	smpsAlterNote       $0B
0008FE5D B302 8001                  	dc.b	nD4, $02, nRst, $01
0008FE61 E10A                       	smpsAlterNote       $0A
0008FE63 B103                       	dc.b	nC4, $03
0008FE65 E110                       	smpsAlterNote       $10
0008FE67 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008FE6B E10F                       	smpsAlterNote       $0F
0008FE6D AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0008FE71 E080                       	smpsPan             panLeft, $00
0008FE73 01                         	dc.b	$01
0008FE76 E6FB                       	smpsAlterVol        $FB
0008FE78 E1E4                       	smpsAlterNote       $E4
0008FE7A C501                       	dc.b	nAb5, $01
0008FE7C E1F4                       	smpsAlterNote       $F4
0008FE7E E701                       	dc.b	smpsNoAttack, $01
0008FE80 E104                       	smpsAlterNote       $04
0008FE82 E701                       	dc.b	smpsNoAttack, $01
0008FE84 E114                       	smpsAlterNote       $14
0008FE86 E701                       	dc.b	smpsNoAttack, $01
0008FE88 E11C                       	smpsAlterNote       $1C
0008FE8A E701                       	dc.b	smpsNoAttack, $01
0008FE8C E1EF                       	smpsAlterNote       $EF
0008FE8E E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0008FE91 E1FF                       	smpsAlterNote       $FF
0008FE93 E701                       	dc.b	smpsNoAttack, $01
0008FE95 E10F                       	smpsAlterNote       $0F
0008FE97 C606                       	dc.b	nA5, $06
0008FE99 E109                       	smpsAlterNote       $09
0008FE9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FE9F E10F                       	smpsAlterNote       $0F
0008FEA1 E701                       	dc.b	smpsNoAttack, $01
0008FEA3 E112                       	smpsAlterNote       $12
0008FEA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEA9 E10C                       	smpsAlterNote       $0C
0008FEAB E701                       	dc.b	smpsNoAttack, $01
0008FEAD E108                       	smpsAlterNote       $08
0008FEAF E701                       	dc.b	smpsNoAttack, $01
0008FEB1 E109                       	smpsAlterNote       $09
0008FEB3 E701                       	dc.b	smpsNoAttack, $01
0008FEB5 E10F                       	smpsAlterNote       $0F
0008FEB7 E701                       	dc.b	smpsNoAttack, $01
0008FEB9 E113                       	smpsAlterNote       $13
0008FEBB E701                       	dc.b	smpsNoAttack, $01
0008FEBD E10F                       	smpsAlterNote       $0F
0008FEBF E701                       	dc.b	smpsNoAttack, $01
0008FEC1 E10C                       	smpsAlterNote       $0C
0008FEC3 E701                       	dc.b	smpsNoAttack, $01
0008FEC5 E108                       	smpsAlterNote       $08
0008FEC7 E701                       	dc.b	smpsNoAttack, $01
0008FEC9 E10C                       	smpsAlterNote       $0C
0008FECB E701                       	dc.b	smpsNoAttack, $01
0008FECD E112                       	smpsAlterNote       $12
0008FECF E701                       	dc.b	smpsNoAttack, $01
0008FED1 E113                       	smpsAlterNote       $13
0008FED3 E701                       	dc.b	smpsNoAttack, $01
0008FED5 E10F                       	smpsAlterNote       $0F
0008FED7 E701                       	dc.b	smpsNoAttack, $01
0008FED9 E109                       	smpsAlterNote       $09
0008FEDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEDF E10C                       	smpsAlterNote       $0C
0008FEE1 E701                       	dc.b	smpsNoAttack, $01
0008FEE3 E112                       	smpsAlterNote       $12
0008FEE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEE9 E10C                       	smpsAlterNote       $0C
0008FEEB E701                       	dc.b	smpsNoAttack, $01
0008FEED E109                       	smpsAlterNote       $09
0008FEEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FEF3 E10F                       	smpsAlterNote       $0F
0008FEF5 E701                       	dc.b	smpsNoAttack, $01
0008FEF7 E113                       	smpsAlterNote       $13
0008FEF9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0008FEFD E10D                       	smpsAlterNote       $0D
0008FEFF C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0008FF05 E10C                       	smpsAlterNote       $0C
0008FF07 C102 8001                  	dc.b	nE5, $02, nRst, $01
0008FF0B E10D                       	smpsAlterNote       $0D
0008FF0D C201 8001                  	dc.b	nF5, $01, nRst, $01
0008FF11 E10C                       	smpsAlterNote       $0C
0008FF13 C102                       	dc.b	nE5, $02
0008FF15 E10B                       	smpsAlterNote       $0B
0008FF17 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0008FF1B E10C                       	smpsAlterNote       $0C
0008FF1D C101 8001                  	dc.b	nE5, $01, nRst, $01
0008FF21 E10B                       	smpsAlterNote       $0B
0008FF23 BF02                       	dc.b	nD5, $02
0008FF25 E10A                       	smpsAlterNote       $0A
0008FF27 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0008FF31 E110                       	smpsAlterNote       $10
0008FF33 BB02                       	dc.b	nBb4, $02
0008FF35 E10A                       	smpsAlterNote       $0A
0008FF37 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0008FF3B E110                       	smpsAlterNote       $10
0008FF3D BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0008FF41 E10F                       	smpsAlterNote       $0F
0008FF43 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0008FF47 E110                       	smpsAlterNote       $10
0008FF49 BB02                       	dc.b	nBb4, $02
0008FF4B E10F                       	smpsAlterNote       $0F
0008FF4D BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0008FF57 E10C                       	smpsAlterNote       $0C
0008FF59 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0008FF61 E10B                       	smpsAlterNote       $0B
0008FF63 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0008FF67 E10F                       	smpsAlterNote       $0F
0008FF69 BA02                       	dc.b	nA4, $02
0008FF6D E0C0                       	smpsPan             panCenter, $00
0008FF6F E601                       	smpsAlterVol        $01
0008FF71 E109                       	smpsAlterNote       $09
0008FF73 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0008FF7F E108                       	smpsAlterNote       $08
0008FF81 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0008FF87 E107                       	smpsAlterNote       $07
0008FF89 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0008FF8F E109                       	smpsAlterNote       $09
0008FF91 B603 8001                  	dc.b	nF4, $03, nRst, $01
0008FF95 E108                       	smpsAlterNote       $08
0008FF97 B506 8001                  	dc.b	nE4, $06, nRst, $01
0008FF9B E107                       	smpsAlterNote       $07
0008FF9D B302 8001                  	dc.b	nD4, $02, nRst, $01
0008FFA1 E106                       	smpsAlterNote       $06
0008FFA3 B103                       	dc.b	nC4, $03
0008FFA5 E10C                       	smpsAlterNote       $0C
0008FFA7 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0008FFAD E080                       	smpsPan             panLeft, $00
0008FFAF 07                         	dc.b	$07
0008FFB0 E6FE                       	smpsAlterVol        $FE
0008FFB2 E10B                       	smpsAlterNote       $0B
0008FFB4 B20D                       	dc.b	nCs4, $0D
0008FFB6 E105                       	smpsAlterNote       $05
0008FFB8 E701                       	dc.b	smpsNoAttack, $01
0008FFBA E104                       	smpsAlterNote       $04
0008FFBC E701                       	dc.b	smpsNoAttack, $01
0008FFBE E108                       	smpsAlterNote       $08
0008FFC0 E701                       	dc.b	smpsNoAttack, $01
0008FFC2 E10E                       	smpsAlterNote       $0E
0008FFC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFC8 E10B                       	smpsAlterNote       $0B
0008FFCA E701                       	dc.b	smpsNoAttack, $01
0008FFCC E105                       	smpsAlterNote       $05
0008FFCE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFD2 E10B                       	smpsAlterNote       $0B
0008FFD4 E701                       	dc.b	smpsNoAttack, $01
0008FFD6 E10E                       	smpsAlterNote       $0E
0008FFD8 E701                       	dc.b	smpsNoAttack, $01
0008FFDA E10F                       	smpsAlterNote       $0F
0008FFDC 8001                       	dc.b	nRst, $01
0008FFDE E10B                       	smpsAlterNote       $0B
0008FFE0 B30D                       	dc.b	nD4, $0D
0008FFE2 E105                       	smpsAlterNote       $05
0008FFE4 E701                       	dc.b	smpsNoAttack, $01
0008FFE6 E104                       	smpsAlterNote       $04
0008FFE8 E701                       	dc.b	smpsNoAttack, $01
0008FFEA E108                       	smpsAlterNote       $08
0008FFEC E701                       	dc.b	smpsNoAttack, $01
0008FFEE E10E                       	smpsAlterNote       $0E
0008FFF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFF4 E10B                       	smpsAlterNote       $0B
0008FFF6 E701                       	dc.b	smpsNoAttack, $01
0008FFF8 E105                       	smpsAlterNote       $05
0008FFFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0008FFFE E10B                       	smpsAlterNote       $0B
00090000 E701                       	dc.b	smpsNoAttack, $01
00090002 E10E                       	smpsAlterNote       $0E
00090004 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090008 E108                       	smpsAlterNote       $08
0009000A E701                       	dc.b	smpsNoAttack, $01
0009000C E104                       	smpsAlterNote       $04
0009000E E701                       	dc.b	smpsNoAttack, $01
00090010 E105                       	smpsAlterNote       $05
00090012 E701                       	dc.b	smpsNoAttack, $01
00090014 E10B                       	smpsAlterNote       $0B
00090016 E701                       	dc.b	smpsNoAttack, $01
00090018 E10F                       	smpsAlterNote       $0F
0009001A E701                       	dc.b	smpsNoAttack, $01
0009001C E10B                       	smpsAlterNote       $0B
0009001E E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090022 E10C                       	smpsAlterNote       $0C
00090024 B50D                       	dc.b	nE4, $0D
00090026 E106                       	smpsAlterNote       $06
00090028 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009002C E10C                       	smpsAlterNote       $0C
0009002E E701                       	dc.b	smpsNoAttack, $01
00090030 E10F                       	smpsAlterNote       $0F
00090032 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090036 E109                       	smpsAlterNote       $09
00090038 E701                       	dc.b	smpsNoAttack, $01
0009003A E105                       	smpsAlterNote       $05
0009003C E701                       	dc.b	smpsNoAttack, $01
0009003E E106                       	smpsAlterNote       $06
00090040 E701                       	dc.b	smpsNoAttack, $01
00090042 E10C                       	smpsAlterNote       $0C
00090044 E701                       	dc.b	smpsNoAttack, $01
00090046 E110                       	smpsAlterNote       $10
00090048 E701                       	dc.b	smpsNoAttack, $01
0009004A E10B                       	smpsAlterNote       $0B
0009004C B30E                       	dc.b	nD4, $0E
0009004E E105                       	smpsAlterNote       $05
00090050 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090054 E10B                       	smpsAlterNote       $0B
00090056 E701                       	dc.b	smpsNoAttack, $01
00090058 E10E                       	smpsAlterNote       $0E
0009005A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009005E E108                       	smpsAlterNote       $08
00090060 E701                       	dc.b	smpsNoAttack, $01
00090062 E104                       	smpsAlterNote       $04
00090064 E701                       	dc.b	smpsNoAttack, $01
00090066 E105                       	smpsAlterNote       $05
00090068 E701                       	dc.b	smpsNoAttack, $01
0009006A E10B                       	smpsAlterNote       $0B
0009006C E701                       	dc.b	smpsNoAttack, $01
0009006E E10F                       	smpsAlterNote       $0F
00090070 E701                       	dc.b	smpsNoAttack, $01
00090072 E10B                       	smpsAlterNote       $0B
00090074 E701                       	dc.b	smpsNoAttack, $01
00090076 E108                       	smpsAlterNote       $08
00090078 E701                       	dc.b	smpsNoAttack, $01
0009007A E104                       	smpsAlterNote       $04
0009007C E701                       	dc.b	smpsNoAttack, $01
0009007E E108                       	smpsAlterNote       $08
00090080 E701                       	dc.b	smpsNoAttack, $01
00090082 E10E                       	smpsAlterNote       $0E
00090084 E701                       	dc.b	smpsNoAttack, $01
00090086 E10F                       	smpsAlterNote       $0F
00090088 E701                       	dc.b	smpsNoAttack, $01
0009008A E10B                       	smpsAlterNote       $0B
0009008C E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00090090 E108                       	smpsAlterNote       $08
00090092 E701                       	dc.b	smpsNoAttack, $01
00090094 E105                       	smpsAlterNote       $05
00090096 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009009A E10B                       	smpsAlterNote       $0B
0009009C E701                       	dc.b	smpsNoAttack, $01
0009009E E10F                       	smpsAlterNote       $0F
000900A0 E701                       	dc.b	smpsNoAttack, $01
000900A2 E10E                       	smpsAlterNote       $0E
000900A4 E701                       	dc.b	smpsNoAttack, $01
000900A6 E108                       	smpsAlterNote       $08
000900A8 E701                       	dc.b	smpsNoAttack, $01
000900AA E104                       	smpsAlterNote       $04
000900AC E701                       	dc.b	smpsNoAttack, $01
000900AE E108                       	smpsAlterNote       $08
000900B0 E701                       	dc.b	smpsNoAttack, $01
000900B2 E10B                       	smpsAlterNote       $0B
000900B4 E701                       	dc.b	smpsNoAttack, $01
000900B6 E10F                       	smpsAlterNote       $0F
000900B8 E701                       	dc.b	smpsNoAttack, $01
000900BA E10B                       	smpsAlterNote       $0B
000900BC B30D                       	dc.b	nD4, $0D
000900BE E108                       	smpsAlterNote       $08
000900C0 E701                       	dc.b	smpsNoAttack, $01
000900C2 E105                       	smpsAlterNote       $05
000900C4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900C8 E10B                       	smpsAlterNote       $0B
000900CA E701                       	dc.b	smpsNoAttack, $01
000900CC E10F                       	smpsAlterNote       $0F
000900CE E701                       	dc.b	smpsNoAttack, $01
000900D0 E10E                       	smpsAlterNote       $0E
000900D2 E701                       	dc.b	smpsNoAttack, $01
000900D4 E108                       	smpsAlterNote       $08
000900D6 E701                       	dc.b	smpsNoAttack, $01
000900D8 E104                       	smpsAlterNote       $04
000900DA E701                       	dc.b	smpsNoAttack, $01
000900DC E108                       	smpsAlterNote       $08
000900DE E701                       	dc.b	smpsNoAttack, $01
000900E0 E10B                       	smpsAlterNote       $0B
000900E2 E701                       	dc.b	smpsNoAttack, $01
000900E4 E10F                       	smpsAlterNote       $0F
000900E6 E701                       	dc.b	smpsNoAttack, $01
000900E8 E10B                       	smpsAlterNote       $0B
000900EA E701                       	dc.b	smpsNoAttack, $01
000900EC E105                       	smpsAlterNote       $05
000900EE E701                       	dc.b	smpsNoAttack, $01
000900F0 E104                       	smpsAlterNote       $04
000900F2 E701                       	dc.b	smpsNoAttack, $01
000900F4 E108                       	smpsAlterNote       $08
000900F6 E701                       	dc.b	smpsNoAttack, $01
000900F8 E10E                       	smpsAlterNote       $0E
000900FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000900FE E10B                       	smpsAlterNote       $0B
00090100 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
00090104 E108                       	smpsAlterNote       $08
00090106 E701                       	dc.b	smpsNoAttack, $01
00090108 E104                       	smpsAlterNote       $04
0009010A E701                       	dc.b	smpsNoAttack, $01
0009010C E108                       	smpsAlterNote       $08
0009010E E701                       	dc.b	smpsNoAttack, $01
00090110 E10B                       	smpsAlterNote       $0B
00090112 E701                       	dc.b	smpsNoAttack, $01
00090116 E0C0                       	smpsPan             panCenter, $00
00090118 E601                       	smpsAlterVol        $01
0009011A E108                       	smpsAlterNote       $08
0009011C A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
00090128 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
00090130 E080                       	smpsPan             panLeft, $00
00090132 07                         	dc.b	$07
00090133 E6FF                       	smpsAlterVol        $FF
00090135 E10D                       	smpsAlterNote       $0D
00090137 B60D                       	dc.b	nF4, $0D
00090139 E10A                       	smpsAlterNote       $0A
0009013B E701                       	dc.b	smpsNoAttack, $01
0009013D E106                       	smpsAlterNote       $06
0009013F E701                       	dc.b	smpsNoAttack, $01
00090141 E10A                       	smpsAlterNote       $0A
00090143 E701                       	dc.b	smpsNoAttack, $01
00090145 E110                       	smpsAlterNote       $10
00090147 E701                       	dc.b	smpsNoAttack, $01
00090149 E111                       	smpsAlterNote       $11
0009014B E701                       	dc.b	smpsNoAttack, $01
0009014D E10D                       	smpsAlterNote       $0D
0009014F E701                       	dc.b	smpsNoAttack, $01
00090151 E107                       	smpsAlterNote       $07
00090153 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090157 E10A                       	smpsAlterNote       $0A
00090159 E701                       	dc.b	smpsNoAttack, $01
0009015B E110                       	smpsAlterNote       $10
0009015D E701                       	dc.b	smpsNoAttack, $01
0009015F E111                       	smpsAlterNote       $11
00090161 8001                       	dc.b	nRst, $01
00090163 E10D                       	smpsAlterNote       $0D
00090165 B80D                       	dc.b	nG4, $0D
00090167 E10A                       	smpsAlterNote       $0A
00090169 E701                       	dc.b	smpsNoAttack, $01
0009016B E106                       	smpsAlterNote       $06
0009016D E701                       	dc.b	smpsNoAttack, $01
0009016F E10A                       	smpsAlterNote       $0A
00090171 E701                       	dc.b	smpsNoAttack, $01
00090173 E110                       	smpsAlterNote       $10
00090175 E701                       	dc.b	smpsNoAttack, $01
00090177 E111                       	smpsAlterNote       $11
00090179 E701                       	dc.b	smpsNoAttack, $01
0009017B E10D                       	smpsAlterNote       $0D
0009017D E701                       	dc.b	smpsNoAttack, $01
0009017F E107                       	smpsAlterNote       $07
00090181 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090185 E10D                       	smpsAlterNote       $0D
00090187 E701                       	dc.b	smpsNoAttack, $01
00090189 E110                       	smpsAlterNote       $10
0009018B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009018F E10A                       	smpsAlterNote       $0A
00090191 E701                       	dc.b	smpsNoAttack, $01
00090193 E106                       	smpsAlterNote       $06
00090195 E701                       	dc.b	smpsNoAttack, $01
00090197 E107                       	smpsAlterNote       $07
00090199 E701                       	dc.b	smpsNoAttack, $01
0009019B E10D                       	smpsAlterNote       $0D
0009019D E701                       	dc.b	smpsNoAttack, $01
0009019F E111                       	smpsAlterNote       $11
000901A1 E701                       	dc.b	smpsNoAttack, $01
000901A3 E10D                       	smpsAlterNote       $0D
000901A5 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000901A9 E10F                       	smpsAlterNote       $0F
000901AB BA0D                       	dc.b	nA4, $0D
000901AD E109                       	smpsAlterNote       $09
000901AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901B3 E10C                       	smpsAlterNote       $0C
000901B5 E701                       	dc.b	smpsNoAttack, $01
000901B7 E112                       	smpsAlterNote       $12
000901B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901BD E10C                       	smpsAlterNote       $0C
000901BF E701                       	dc.b	smpsNoAttack, $01
000901C1 E109                       	smpsAlterNote       $09
000901C3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901C7 E10F                       	smpsAlterNote       $0F
000901C9 E701                       	dc.b	smpsNoAttack, $01
000901CB E113                       	smpsAlterNote       $13
000901CD E701                       	dc.b	smpsNoAttack, $01
000901CF E112                       	smpsAlterNote       $12
000901D1 E701                       	dc.b	smpsNoAttack, $01
000901D3 E10C                       	smpsAlterNote       $0C
000901D5 E701                       	dc.b	smpsNoAttack, $01
000901D7 E108                       	smpsAlterNote       $08
000901D9 E701                       	dc.b	smpsNoAttack, $01
000901DB E10C                       	smpsAlterNote       $0C
000901DD E701                       	dc.b	smpsNoAttack, $01
000901DF E10F                       	smpsAlterNote       $0F
000901E1 E701                       	dc.b	smpsNoAttack, $01
000901E3 E113                       	smpsAlterNote       $13
000901E5 E701                       	dc.b	smpsNoAttack, $01
000901E7 E10F                       	smpsAlterNote       $0F
000901E9 E701                       	dc.b	smpsNoAttack, $01
000901EB E109                       	smpsAlterNote       $09
000901ED E701                       	dc.b	smpsNoAttack, $01
000901EF E108                       	smpsAlterNote       $08
000901F1 E701                       	dc.b	smpsNoAttack, $01
000901F3 E10C                       	smpsAlterNote       $0C
000901F5 E701                       	dc.b	smpsNoAttack, $01
000901F7 E112                       	smpsAlterNote       $12
000901F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000901FD E10F                       	smpsAlterNote       $0F
000901FF E701                       	dc.b	smpsNoAttack, $01
00090201 E109                       	smpsAlterNote       $09
00090203 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090207 E10F                       	smpsAlterNote       $0F
00090209 E701                       	dc.b	smpsNoAttack, $01
0009020B E112                       	smpsAlterNote       $12
0009020D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090211 E10C                       	smpsAlterNote       $0C
00090213 E701                       	dc.b	smpsNoAttack, $01
00090215 E108                       	smpsAlterNote       $08
00090217 E701                       	dc.b	smpsNoAttack, $01
00090219 E109                       	smpsAlterNote       $09
0009021B E701                       	dc.b	smpsNoAttack, $01
0009021D E10C                       	smpsAlterNote       $0C
0009021F B50A                       	dc.b	nE4, $0A
00090221 E10D                       	smpsAlterNote       $0D
00090223 B60E                       	dc.b	nF4, $0E
00090225 E107                       	smpsAlterNote       $07
00090227 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009022B E10D                       	smpsAlterNote       $0D
0009022D E701                       	dc.b	smpsNoAttack, $01
0009022F E110                       	smpsAlterNote       $10
00090231 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090235 E10A                       	smpsAlterNote       $0A
00090237 E701                       	dc.b	smpsNoAttack, $01
00090239 E106                       	smpsAlterNote       $06
0009023B E701                       	dc.b	smpsNoAttack, $01
0009023D E107                       	smpsAlterNote       $07
0009023F E701                       	dc.b	smpsNoAttack, $01
00090241 E10D                       	smpsAlterNote       $0D
00090243 E701                       	dc.b	smpsNoAttack, $01
00090245 E111                       	smpsAlterNote       $11
00090247 E701                       	dc.b	smpsNoAttack, $01
00090249 E10D                       	smpsAlterNote       $0D
0009024B B80D                       	dc.b	nG4, $0D
0009024D E10A                       	smpsAlterNote       $0A
0009024F E701                       	dc.b	smpsNoAttack, $01
00090251 E107                       	smpsAlterNote       $07
00090253 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090257 E10D                       	smpsAlterNote       $0D
00090259 E701                       	dc.b	smpsNoAttack, $01
0009025B E111                       	smpsAlterNote       $11
0009025D E701                       	dc.b	smpsNoAttack, $01
0009025F E110                       	smpsAlterNote       $10
00090261 E701                       	dc.b	smpsNoAttack, $01
00090263 E10A                       	smpsAlterNote       $0A
00090265 E701                       	dc.b	smpsNoAttack, $01
00090267 E106                       	smpsAlterNote       $06
00090269 E701                       	dc.b	smpsNoAttack, $01
0009026B E10A                       	smpsAlterNote       $0A
0009026D E701                       	dc.b	smpsNoAttack, $01
0009026F E10D                       	smpsAlterNote       $0D
00090271 E701                       	dc.b	smpsNoAttack, $01
00090273 E111                       	smpsAlterNote       $11
00090275 E701                       	dc.b	smpsNoAttack, $01
00090277 E10D                       	smpsAlterNote       $0D
00090279 E701                       	dc.b	smpsNoAttack, $01
0009027B E107                       	smpsAlterNote       $07
0009027D E701                       	dc.b	smpsNoAttack, $01
0009027F E106                       	smpsAlterNote       $06
00090281 E701                       	dc.b	smpsNoAttack, $01
00090283 E10A                       	smpsAlterNote       $0A
00090285 E701                       	dc.b	smpsNoAttack, $01
00090287 E110                       	smpsAlterNote       $10
00090289 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009028D E10D                       	smpsAlterNote       $0D
0009028F E701                       	dc.b	smpsNoAttack, $01
00090291 E10F                       	smpsAlterNote       $0F
00090293 BA0D                       	dc.b	nA4, $0D
00090295 E10C                       	smpsAlterNote       $0C
00090297 E701                       	dc.b	smpsNoAttack, $01
00090299 E108                       	smpsAlterNote       $08
0009029B E701                       	dc.b	smpsNoAttack, $01
0009029D E109                       	smpsAlterNote       $09
0009029F E701                       	dc.b	smpsNoAttack, $01
000902A1 E10F                       	smpsAlterNote       $0F
000902A3 E701                       	dc.b	smpsNoAttack, $01
000902A5 E113                       	smpsAlterNote       $13
000902A7 E701                       	dc.b	smpsNoAttack, $01
000902A9 E10F                       	smpsAlterNote       $0F
000902AB E701                       	dc.b	smpsNoAttack, $01
000902AD E10C                       	smpsAlterNote       $0C
000902AF E701                       	dc.b	smpsNoAttack, $01
000902B1 E108                       	smpsAlterNote       $08
000902B3 E701                       	dc.b	smpsNoAttack, $01
000902B5 E10C                       	smpsAlterNote       $0C
000902B7 E701                       	dc.b	smpsNoAttack, $01
000902B9 E112                       	smpsAlterNote       $12
000902BB E701                       	dc.b	smpsNoAttack, $01
000902BD E113                       	smpsAlterNote       $13
000902BF E701                       	dc.b	smpsNoAttack, $01
000902C1 E10F                       	smpsAlterNote       $0F
000902C3 E701                       	dc.b	smpsNoAttack, $01
000902C5 E109                       	smpsAlterNote       $09
000902C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902CB E10C                       	smpsAlterNote       $0C
000902CD E701                       	dc.b	smpsNoAttack, $01
000902CF E112                       	smpsAlterNote       $12
000902D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902D5 E10C                       	smpsAlterNote       $0C
000902D7 E701                       	dc.b	smpsNoAttack, $01
000902D9 E109                       	smpsAlterNote       $09
000902DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000902DF E10F                       	smpsAlterNote       $0F
000902E1 E701                       	dc.b	smpsNoAttack, $01
000902E3 E113                       	smpsAlterNote       $13
000902E5 E701                       	dc.b	smpsNoAttack, $01
000902E7 E112                       	smpsAlterNote       $12
000902E9 E701                       	dc.b	smpsNoAttack, $01
000902EB E10C                       	smpsAlterNote       $0C
000902ED E701                       	dc.b	smpsNoAttack, $01
000902EF E109                       	smpsAlterNote       $09
000902F1 8001                       	dc.b	nRst, $01
000902F3 E10D                       	smpsAlterNote       $0D
000902F5 B60A                       	dc.b	nF4, $0A
000902F7 E10C                       	smpsAlterNote       $0C
000902F9 B506 8001                  	dc.b	nE4, $06, nRst, $01
000902FD E10B                       	smpsAlterNote       $0B
000902FF B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00090303 E10C                       	smpsAlterNote       $0C
00090305 B503                       	dc.b	nE4, $03
00090307 E10D                       	smpsAlterNote       $0D
00090309 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
00090313 E10C                       	smpsAlterNote       $0C
00090315 E701                       	dc.b	smpsNoAttack, $01
00090317 E108                       	smpsAlterNote       $08
00090319 E701                       	dc.b	smpsNoAttack, $01
0009031B E10C                       	smpsAlterNote       $0C
0009031D E701                       	dc.b	smpsNoAttack, $01
0009031F E112                       	smpsAlterNote       $12
00090321 E701                       	dc.b	smpsNoAttack, $01
00090323 E113                       	smpsAlterNote       $13
00090325 E701                       	dc.b	smpsNoAttack, $01
00090327 E10F                       	smpsAlterNote       $0F
00090329 E701                       	dc.b	smpsNoAttack, $01
0009032B E109                       	smpsAlterNote       $09
0009032D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090331 E10C                       	smpsAlterNote       $0C
00090333 E701                       	dc.b	smpsNoAttack, $01
00090335 E112                       	smpsAlterNote       $12
00090337 E701                       	dc.b	smpsNoAttack, $01
00090339 E113                       	smpsAlterNote       $13
0009033B 8001                       	dc.b	nRst, $01
0009033D E10D                       	smpsAlterNote       $0D
0009033F C20D                       	dc.b	nF5, $0D
00090341 E10A                       	smpsAlterNote       $0A
00090343 E701                       	dc.b	smpsNoAttack, $01
00090345 E106                       	smpsAlterNote       $06
00090347 E701                       	dc.b	smpsNoAttack, $01
00090349 E10A                       	smpsAlterNote       $0A
0009034B E701                       	dc.b	smpsNoAttack, $01
0009034D E110                       	smpsAlterNote       $10
0009034F E701                       	dc.b	smpsNoAttack, $01
00090351 E111                       	smpsAlterNote       $11
00090353 E701                       	dc.b	smpsNoAttack, $01
00090355 E10D                       	smpsAlterNote       $0D
00090357 E701                       	dc.b	smpsNoAttack, $01
00090359 E107                       	smpsAlterNote       $07
0009035B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009035F E10A                       	smpsAlterNote       $0A
00090361 E701                       	dc.b	smpsNoAttack, $01
00090363 E110                       	smpsAlterNote       $10
00090365 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090369 E10A                       	smpsAlterNote       $0A
0009036B E701                       	dc.b	smpsNoAttack, $01
0009036D E107                       	smpsAlterNote       $07
0009036F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090373 E10D                       	smpsAlterNote       $0D
00090375 E701                       	dc.b	smpsNoAttack, $01
00090377 E111                       	smpsAlterNote       $11
00090379 E701                       	dc.b	smpsNoAttack, $01
0009037B E110                       	smpsAlterNote       $10
0009037D E701                       	dc.b	smpsNoAttack, $01
0009037F E10A                       	smpsAlterNote       $0A
00090381 E701                       	dc.b	smpsNoAttack, $01
00090383 E106                       	smpsAlterNote       $06
00090385 E701                       	dc.b	smpsNoAttack, $01
00090387 E10A                       	smpsAlterNote       $0A
00090389 E701                       	dc.b	smpsNoAttack, $01
0009038B E10D                       	smpsAlterNote       $0D
0009038D E701                       	dc.b	smpsNoAttack, $01
0009038F E111                       	smpsAlterNote       $11
00090391 E701                       	dc.b	smpsNoAttack, $01
00090393 E10D                       	smpsAlterNote       $0D
00090395 E701                       	dc.b	smpsNoAttack, $01
00090397 E107                       	smpsAlterNote       $07
00090399 E701                       	dc.b	smpsNoAttack, $01
0009039B E106                       	smpsAlterNote       $06
0009039D E701                       	dc.b	smpsNoAttack, $01
0009039F E10A                       	smpsAlterNote       $0A
000903A1 E701                       	dc.b	smpsNoAttack, $01
000903A3 E110                       	smpsAlterNote       $10
000903A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903A9 E10D                       	smpsAlterNote       $0D
000903AB E701                       	dc.b	smpsNoAttack, $01
000903AD E107                       	smpsAlterNote       $07
000903AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903B3 E10D                       	smpsAlterNote       $0D
000903B5 E701                       	dc.b	smpsNoAttack, $01
000903B7 E110                       	smpsAlterNote       $10
000903B9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903BD E10A                       	smpsAlterNote       $0A
000903BF E701                       	dc.b	smpsNoAttack, $01
000903C1 E106                       	smpsAlterNote       $06
000903C3 E701                       	dc.b	smpsNoAttack, $01
000903C5 E107                       	smpsAlterNote       $07
000903C7 E701                       	dc.b	smpsNoAttack, $01
000903C9 E10D                       	smpsAlterNote       $0D
000903CB E701                       	dc.b	smpsNoAttack, $01
000903CD E111                       	smpsAlterNote       $11
000903CF E701                       	dc.b	smpsNoAttack, $01
000903D1 E10D                       	smpsAlterNote       $0D
000903D3 E701                       	dc.b	smpsNoAttack, $01
000903D5 E10A                       	smpsAlterNote       $0A
000903D7 E701                       	dc.b	smpsNoAttack, $01
000903D9 E107                       	smpsAlterNote       $07
000903DB 8001                       	dc.b	nRst, $01
000903DD E10D                       	smpsAlterNote       $0D
000903DF C206 8001                  	dc.b	nF5, $06, nRst, $01
000903E5 E601                       	smpsAlterVol        $01
000903E7 E110                       	smpsAlterNote       $10
000903E9 BB0D                       	dc.b	nBb4, $0D
000903EB E10A                       	smpsAlterNote       $0A
000903ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903F1 E110                       	smpsAlterNote       $10
000903F3 E701                       	dc.b	smpsNoAttack, $01
000903F5 E113                       	smpsAlterNote       $13
000903F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000903FB E10D                       	smpsAlterNote       $0D
000903FD E701                       	dc.b	smpsNoAttack, $01
000903FF E109                       	smpsAlterNote       $09
00090401 E701                       	dc.b	smpsNoAttack, $01
00090403 E10A                       	smpsAlterNote       $0A
00090405 E701                       	dc.b	smpsNoAttack, $01
00090407 E110                       	smpsAlterNote       $10
00090409 E701                       	dc.b	smpsNoAttack, $01
0009040B E114                       	smpsAlterNote       $14
0009040D E701                       	dc.b	smpsNoAttack, $01
0009040F E110                       	smpsAlterNote       $10
00090411 E701                       	dc.b	smpsNoAttack, $01
00090413 E10D                       	smpsAlterNote       $0D
00090415 E701                       	dc.b	smpsNoAttack, $01
00090417 E109                       	smpsAlterNote       $09
00090419 E701                       	dc.b	smpsNoAttack, $01
0009041B E10A                       	smpsAlterNote       $0A
0009041D 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00090421 E107                       	smpsAlterNote       $07
00090423 E701                       	dc.b	smpsNoAttack, $01
00090425 E103                       	smpsAlterNote       $03
00090427 E701                       	dc.b	smpsNoAttack, $01
00090429 E107                       	smpsAlterNote       $07
0009042B E701                       	dc.b	smpsNoAttack, $01
0009042D E10D                       	smpsAlterNote       $0D
0009042F E701                       	dc.b	smpsNoAttack, $01
00090431 E10E                       	smpsAlterNote       $0E
00090433 E701                       	dc.b	smpsNoAttack, $01
00090435 E10A                       	smpsAlterNote       $0A
00090437 E701                       	dc.b	smpsNoAttack, $01
00090439 E104                       	smpsAlterNote       $04
0009043B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009043F E107                       	smpsAlterNote       $07
00090441 E701                       	dc.b	smpsNoAttack, $01
00090443 E10D                       	smpsAlterNote       $0D
00090445 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090449 E107                       	smpsAlterNote       $07
0009044B E701                       	dc.b	smpsNoAttack, $01
0009044D E104                       	smpsAlterNote       $04
0009044F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090453 E10B                       	smpsAlterNote       $0B
00090455 BF0D                       	dc.b	nD5, $0D
00090457 E108                       	smpsAlterNote       $08
00090459 E701                       	dc.b	smpsNoAttack, $01
0009045B E105                       	smpsAlterNote       $05
0009045D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090461 E10B                       	smpsAlterNote       $0B
00090463 E701                       	dc.b	smpsNoAttack, $01
00090465 E10F                       	smpsAlterNote       $0F
00090467 E701                       	dc.b	smpsNoAttack, $01
00090469 E10E                       	smpsAlterNote       $0E
0009046B E701                       	dc.b	smpsNoAttack, $01
0009046D E108                       	smpsAlterNote       $08
0009046F E701                       	dc.b	smpsNoAttack, $01
00090471 E104                       	smpsAlterNote       $04
00090473 E701                       	dc.b	smpsNoAttack, $01
00090475 E108                       	smpsAlterNote       $08
00090477 E701                       	dc.b	smpsNoAttack, $01
00090479 E10B                       	smpsAlterNote       $0B
0009047B E701                       	dc.b	smpsNoAttack, $01
0009047D E10F                       	smpsAlterNote       $0F
0009047F E701                       	dc.b	smpsNoAttack, $01
00090481 E10B                       	smpsAlterNote       $0B
00090483 E701                       	dc.b	smpsNoAttack, $01
00090485 E105                       	smpsAlterNote       $05
00090487 E701                       	dc.b	smpsNoAttack, $01
00090489 E104                       	smpsAlterNote       $04
0009048B E701                       	dc.b	smpsNoAttack, $01
0009048D E105                       	smpsAlterNote       $05
0009048F 8001                       	dc.b	nRst, $01
00090491 E10C                       	smpsAlterNote       $0C
00090493 C10C                       	dc.b	nE5, $0C
00090495 E10D                       	smpsAlterNote       $0D
00090497 C201                       	dc.b	nF5, $01
00090499 E10E                       	smpsAlterNote       $0E
0009049B C301 8001                  	dc.b	nFs5, $01, nRst, $01
0009049F E10D                       	smpsAlterNote       $0D
000904A1 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000904A5 E10A                       	smpsAlterNote       $0A
000904A7 E701                       	dc.b	smpsNoAttack, $01
000904A9 E106                       	smpsAlterNote       $06
000904AB E701                       	dc.b	smpsNoAttack, $01
000904AD E10A                       	smpsAlterNote       $0A
000904AF E701                       	dc.b	smpsNoAttack, $01
000904B1 E10D                       	smpsAlterNote       $0D
000904B3 E701                       	dc.b	smpsNoAttack, $01
000904B5 E111                       	smpsAlterNote       $11
000904B7 E701                       	dc.b	smpsNoAttack, $01
000904B9 E10D                       	smpsAlterNote       $0D
000904BB E701                       	dc.b	smpsNoAttack, $01
000904BD E107                       	smpsAlterNote       $07
000904BF E701                       	dc.b	smpsNoAttack, $01
000904C1 E106                       	smpsAlterNote       $06
000904C3 E701                       	dc.b	smpsNoAttack, $01
000904C5 E10A                       	smpsAlterNote       $0A
000904C7 E701                       	dc.b	smpsNoAttack, $01
000904C9 E110                       	smpsAlterNote       $10
000904CB E701                       	dc.b	smpsNoAttack, $01
000904CD E111                       	smpsAlterNote       $11
000904CF 8001                       	dc.b	nRst, $01
000904D1 E10D                       	smpsAlterNote       $0D
000904D3 C40D                       	dc.b	nG5, $0D
000904D5 E10A                       	smpsAlterNote       $0A
000904D7 E701                       	dc.b	smpsNoAttack, $01
000904D9 E106                       	smpsAlterNote       $06
000904DB E701                       	dc.b	smpsNoAttack, $01
000904DD E10A                       	smpsAlterNote       $0A
000904DF E701                       	dc.b	smpsNoAttack, $01
000904E1 E10D                       	smpsAlterNote       $0D
000904E3 E701                       	dc.b	smpsNoAttack, $01
000904E5 E10C                       	smpsAlterNote       $0C
000904E7 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
000904F3 8001                       	dc.b	nRst, $01
000904F5 E10D                       	smpsAlterNote       $0D
000904F7 C20D                       	dc.b	nF5, $0D
000904F9 E10A                       	smpsAlterNote       $0A
000904FB E701                       	dc.b	smpsNoAttack, $01
000904FD E106                       	smpsAlterNote       $06
000904FF E701                       	dc.b	smpsNoAttack, $01
00090501 E10A                       	smpsAlterNote       $0A
00090503 E701                       	dc.b	smpsNoAttack, $01
00090505 E110                       	smpsAlterNote       $10
00090507 E701                       	dc.b	smpsNoAttack, $01
00090509 E111                       	smpsAlterNote       $11
0009050B E701                       	dc.b	smpsNoAttack, $01
0009050D E10D                       	smpsAlterNote       $0D
0009050F E701                       	dc.b	smpsNoAttack, $01
00090511 E107                       	smpsAlterNote       $07
00090513 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090517 E10A                       	smpsAlterNote       $0A
00090519 E701                       	dc.b	smpsNoAttack, $01
0009051B E110                       	smpsAlterNote       $10
0009051D E701                       	dc.b	smpsNoAttack, $01
0009051F E111                       	smpsAlterNote       $11
00090521 8001                       	dc.b	nRst, $01
00090523 E10F                       	smpsAlterNote       $0F
00090525 C60A                       	dc.b	nA5, $0A
00090527 E10D                       	smpsAlterNote       $0D
00090529 C406 8001                  	dc.b	nG5, $06, nRst, $01
0009052D E10C                       	smpsAlterNote       $0C
0009052F C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0009053B 8001                       	dc.b	nRst, $01
0009053D E10D                       	smpsAlterNote       $0D
0009053F C20D                       	dc.b	nF5, $0D
00090541 E107                       	smpsAlterNote       $07
00090543 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090547 E10A                       	smpsAlterNote       $0A
00090549 E701                       	dc.b	smpsNoAttack, $01
0009054B E110                       	smpsAlterNote       $10
0009054D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090551 E10A                       	smpsAlterNote       $0A
00090553 E701                       	dc.b	smpsNoAttack, $01
00090555 E107                       	smpsAlterNote       $07
00090557 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009055B E10D                       	smpsAlterNote       $0D
0009055D E701                       	dc.b	smpsNoAttack, $01
0009055F E111                       	smpsAlterNote       $11
00090561 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090565 E10D                       	smpsAlterNote       $0D
00090567 C40D                       	dc.b	nG5, $0D
00090569 E107                       	smpsAlterNote       $07
0009056B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009056F E10A                       	smpsAlterNote       $0A
00090571 E701                       	dc.b	smpsNoAttack, $01
00090573 E10D                       	smpsAlterNote       $0D
00090575 8001                       	dc.b	nRst, $01
00090577 E10C                       	smpsAlterNote       $0C
00090579 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
00090585 E10D                       	smpsAlterNote       $0D
00090587 C20E                       	dc.b	nF5, $0E
00090589 E107                       	smpsAlterNote       $07
0009058B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009058F E10D                       	smpsAlterNote       $0D
00090591 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00090597 E0C0                       	smpsPan             panCenter, $00
00090599 E603                       	smpsAlterVol        $03
0009059B E108                       	smpsAlterNote       $08
0009059D B406                       	dc.b	nEb4, $06
0009059F E10C                       	smpsAlterNote       $0C
000905A1 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000905A5 E108                       	smpsAlterNote       $08
000905A7 B403                       	dc.b	nEb4, $03
000905A9 E109                       	smpsAlterNote       $09
000905AB B803 8001                  	dc.b	nG4, $03, nRst, $01
000905AF E10C                       	smpsAlterNote       $0C
000905B1 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
000905B9 03                         	dc.b	$03
000905BA E6FD                       	smpsAlterVol        $FD
000905BC F6F1 F4                    	smpsJump            music84_Jump00
000905BF                            
000905BF                            ; PSG1 Data
000905BF                            music84_PSG1:
000905BF E1FD                       	smpsAlterNote       $FD
000905C1 EC04                       	smpsPSGAlterVol     $04
000905C3 9203                       	dc.b	nF1, $03
000905C5 E1FE                       	smpsAlterNote       $FE
000905C7 9603                       	dc.b	nA1, $03
000905C9 EC04                       	smpsPSGAlterVol     $04
000905CB E701                       	dc.b	smpsNoAttack, $01
000905CD E1FF                       	smpsAlterNote       $FF
000905CF ECFC                       	smpsPSGAlterVol     $FC
000905D1 9B03                       	dc.b	nD2, $03
000905D3 E1FD                       	smpsAlterNote       $FD
000905D5 9403                       	dc.b	nG1, $03
000905D7 EC04                       	smpsPSGAlterVol     $04
000905D9 E701                       	dc.b	smpsNoAttack, $01
000905DB E1FE                       	smpsAlterNote       $FE
000905DD ECFC                       	smpsPSGAlterVol     $FC
000905DF 9703                       	dc.b	nBb1, $03
000905E1 E1FF                       	smpsAlterNote       $FF
000905E3 9B03                       	dc.b	nD2, $03
000905E5 EC04                       	smpsPSGAlterVol     $04
000905E7 E701                       	dc.b	smpsNoAttack, $01
000905E9 E1FE                       	smpsAlterNote       $FE
000905EB ECFC                       	smpsPSGAlterVol     $FC
000905ED A002                       	dc.b	nG2, $02
000905EF EC04                       	smpsPSGAlterVol     $04
000905F1 E701                       	dc.b	smpsNoAttack, $01
000905F3 E1FF                       	smpsAlterNote       $FF
000905F5 ECFC                       	smpsPSGAlterVol     $FC
000905F7 A203                       	dc.b	nA2, $03
000905F9 EC0B                       	smpsPSGAlterVol     $0B
000905FB 800A                       	dc.b	nRst, $0A
000905FD E105                       	smpsAlterNote       $05
000905FF 01                         	dc.b	$01
00090600 E1FC                       	smpsAlterNote       $FC
00090602 01                         	dc.b	$01
00090603 E105                       	smpsAlterNote       $05
00090605 01                         	dc.b	$01
00090606 E1FD                       	smpsAlterNote       $FD
00090608 01                         	dc.b	$01
00090609 E105                       	smpsAlterNote       $05
0009060B 01                         	dc.b	$01
0009060C E1FD                       	smpsAlterNote       $FD
0009060E 01                         	dc.b	$01
0009060F E1FA                       	smpsAlterNote       $FA
00090611 01                         	dc.b	$01
00090612 E1FC                       	smpsAlterNote       $FC
00090614 01                         	dc.b	$01
00090615 E105                       	smpsAlterNote       $05
00090617 01                         	dc.b	$01
00090618 E108                       	smpsAlterNote       $08
0009061A 0101                       	dc.b	$01, $01
0009061C E105                       	smpsAlterNote       $05
0009061E 01                         	dc.b	$01
0009061F E1FA                       	smpsAlterNote       $FA
00090621 0101                       	dc.b	$01, $01
00090623 E1FD                       	smpsAlterNote       $FD
00090625 01                         	dc.b	$01
00090626 E105                       	smpsAlterNote       $05
00090628 01                         	dc.b	$01
00090629 E108                       	smpsAlterNote       $08
0009062B 01                         	dc.b	$01
0009062C E105                       	smpsAlterNote       $05
0009062E 01                         	dc.b	$01
0009062F E1FC                       	smpsAlterNote       $FC
00090631 01                         	dc.b	$01
00090632 E105                       	smpsAlterNote       $05
00090634 01                         	dc.b	$01
00090635 E1FD                       	smpsAlterNote       $FD
00090637 01                         	dc.b	$01
00090638                            
00090638                            music84_Jump07:
00090638 E105                       	smpsAlterNote       $05
0009063A 8001                       	dc.b	nRst, $01
0009063C E1FD                       	smpsAlterNote       $FD
0009063E 01                         	dc.b	$01
0009063F E1FA                       	smpsAlterNote       $FA
00090641 01                         	dc.b	$01
00090642 E1FC                       	smpsAlterNote       $FC
00090644 01                         	dc.b	$01
00090645 E1FD                       	smpsAlterNote       $FD
00090647 ECF5                       	smpsPSGAlterVol     $F5
00090649 9206                       	dc.b	nF1, $06
0009064B EC04                       	smpsPSGAlterVol     $04
0009064D E701                       	dc.b	smpsNoAttack, $01
0009064F EC07                       	smpsPSGAlterVol     $07
00090651 8003                       	dc.b	nRst, $03
00090653 ECF5                       	smpsPSGAlterVol     $F5
00090655 9206                       	dc.b	nF1, $06
00090657 EC04                       	smpsPSGAlterVol     $04
00090659 E701                       	dc.b	smpsNoAttack, $01
0009065B EC07                       	smpsPSGAlterVol     $07
0009065D 8006                       	dc.b	nRst, $06
0009065F E100                       	smpsAlterNote       $00
00090661 01                         	dc.b	$01
00090662 E104                       	smpsAlterNote       $04
00090664 01                         	dc.b	$01
00090665 E100                       	smpsAlterNote       $00
00090667 01                         	dc.b	$01
00090668 E1FB                       	smpsAlterNote       $FB
0009066A 01                         	dc.b	$01
0009066B E1FD                       	smpsAlterNote       $FD
0009066D ECF5                       	smpsPSGAlterVol     $F5
0009066F 9406                       	dc.b	nG1, $06
00090671 EC04                       	smpsPSGAlterVol     $04
00090673 E701                       	dc.b	smpsNoAttack, $01
00090675 EC07                       	smpsPSGAlterVol     $07
00090677 8003                       	dc.b	nRst, $03
00090679 ECF5                       	smpsPSGAlterVol     $F5
0009067B 9407                       	dc.b	nG1, $07
0009067D EC0B                       	smpsPSGAlterVol     $0B
0009067F 8006                       	dc.b	nRst, $06
00090681 E100                       	smpsAlterNote       $00
00090683 01                         	dc.b	$01
00090684 E103                       	smpsAlterNote       $03
00090686 0101                       	dc.b	$01, $01
00090688 E1FD                       	smpsAlterNote       $FD
0009068A 01                         	dc.b	$01
0009068B ECF5                       	smpsPSGAlterVol     $F5
0009068D 9207                       	dc.b	nF1, $07
0009068F EC0B                       	smpsPSGAlterVol     $0B
00090691 8004                       	dc.b	nRst, $04
00090693 ECF5                       	smpsPSGAlterVol     $F5
00090695 9206                       	dc.b	nF1, $06
00090697 EC04                       	smpsPSGAlterVol     $04
00090699 E701                       	dc.b	smpsNoAttack, $01
0009069B EC07                       	smpsPSGAlterVol     $07
0009069D 8006                       	dc.b	nRst, $06
0009069F E103                       	smpsAlterNote       $03
000906A1 01                         	dc.b	$01
000906A2 E104                       	smpsAlterNote       $04
000906A4 01                         	dc.b	$01
000906A5 E100                       	smpsAlterNote       $00
000906A7 01                         	dc.b	$01
000906A8 E1FA                       	smpsAlterNote       $FA
000906AA 01                         	dc.b	$01
000906AB E1FD                       	smpsAlterNote       $FD
000906AD ECF5                       	smpsPSGAlterVol     $F5
000906AF 9206                       	dc.b	nF1, $06
000906B1 EC04                       	smpsPSGAlterVol     $04
000906B3 E701                       	dc.b	smpsNoAttack, $01
000906B5 EC07                       	smpsPSGAlterVol     $07
000906B7 8003                       	dc.b	nRst, $03
000906B9 ECF5                       	smpsPSGAlterVol     $F5
000906BB 9106                       	dc.b	nE1, $06
000906BD EC04                       	smpsPSGAlterVol     $04
000906BF E701                       	dc.b	smpsNoAttack, $01
000906C1 EC07                       	smpsPSGAlterVol     $07
000906C3 8006                       	dc.b	nRst, $06
000906C5 E100                       	smpsAlterNote       $00
000906C7 01                         	dc.b	$01
000906C8 E104                       	smpsAlterNote       $04
000906CA 01                         	dc.b	$01
000906CB E100                       	smpsAlterNote       $00
000906CD 01                         	dc.b	$01
000906CE E1FD                       	smpsAlterNote       $FD
000906D0 01                         	dc.b	$01
000906D1 ECF5                       	smpsPSGAlterVol     $F5
000906D3 9206                       	dc.b	nF1, $06
000906D5 EC04                       	smpsPSGAlterVol     $04
000906D7 E701                       	dc.b	smpsNoAttack, $01
000906D9 EC07                       	smpsPSGAlterVol     $07
000906DB 8003                       	dc.b	nRst, $03
000906DD ECF5                       	smpsPSGAlterVol     $F5
000906DF 9207                       	dc.b	nF1, $07
000906E1 EC0B                       	smpsPSGAlterVol     $0B
000906E3 8007                       	dc.b	nRst, $07
000906E5 E103                       	smpsAlterNote       $03
000906E7 0101                       	dc.b	$01, $01
000906E9 E1FD                       	smpsAlterNote       $FD
000906EB 01                         	dc.b	$01
000906EC E1FB                       	smpsAlterNote       $FB
000906EE 01                         	dc.b	$01
000906EF E1FD                       	smpsAlterNote       $FD
000906F1 ECF5                       	smpsPSGAlterVol     $F5
000906F3 9406                       	dc.b	nG1, $06
000906F5 EC0B                       	smpsPSGAlterVol     $0B
000906F7 8004                       	dc.b	nRst, $04
000906F9 ECF5                       	smpsPSGAlterVol     $F5
000906FB 9406                       	dc.b	nG1, $06
000906FD EC04                       	smpsPSGAlterVol     $04
000906FF E701                       	dc.b	smpsNoAttack, $01
00090701 EC07                       	smpsPSGAlterVol     $07
00090703 8006                       	dc.b	nRst, $06
00090705 E100                       	smpsAlterNote       $00
00090707 01                         	dc.b	$01
00090708 E104                       	smpsAlterNote       $04
0009070A 01                         	dc.b	$01
0009070B E100                       	smpsAlterNote       $00
0009070D 01                         	dc.b	$01
0009070E E1F9                       	smpsAlterNote       $F9
00090710 01                         	dc.b	$01
00090711 E1FD                       	smpsAlterNote       $FD
00090713 ECF5                       	smpsPSGAlterVol     $F5
00090715 9206                       	dc.b	nF1, $06
00090717 EC04                       	smpsPSGAlterVol     $04
00090719 E701                       	dc.b	smpsNoAttack, $01
0009071B EC07                       	smpsPSGAlterVol     $07
0009071D 8003                       	dc.b	nRst, $03
0009071F ECF5                       	smpsPSGAlterVol     $F5
00090721 9207                       	dc.b	nF1, $07
00090723 EC0B                       	smpsPSGAlterVol     $0B
00090725 8006                       	dc.b	nRst, $06
00090727 E100                       	smpsAlterNote       $00
00090729 01                         	dc.b	$01
0009072A E104                       	smpsAlterNote       $04
0009072C 01                         	dc.b	$01
0009072D E103                       	smpsAlterNote       $03
0009072F 01                         	dc.b	$01
00090730 E1FD                       	smpsAlterNote       $FD
00090732 01                         	dc.b	$01
00090733 ECF5                       	smpsPSGAlterVol     $F5
00090735 9207                       	dc.b	nF1, $07
00090737 EC0B                       	smpsPSGAlterVol     $0B
00090739 8004                       	dc.b	nRst, $04
0009073B ECF5                       	smpsPSGAlterVol     $F5
0009073D 9206                       	dc.b	nF1, $06
0009073F EC0B                       	smpsPSGAlterVol     $0B
00090741 8007                       	dc.b	nRst, $07
00090743 E103                       	smpsAlterNote       $03
00090745 0101                       	dc.b	$01, $01
00090747 E100                       	smpsAlterNote       $00
00090749 01                         	dc.b	$01
0009074A E1FA                       	smpsAlterNote       $FA
0009074C 01                         	dc.b	$01
0009074D E1FD                       	smpsAlterNote       $FD
0009074F ECF5                       	smpsPSGAlterVol     $F5
00090751 9206                       	dc.b	nF1, $06
00090753 EC04                       	smpsPSGAlterVol     $04
00090755 E701                       	dc.b	smpsNoAttack, $01
00090757 EC07                       	smpsPSGAlterVol     $07
00090759 8003                       	dc.b	nRst, $03
0009075B ECF5                       	smpsPSGAlterVol     $F5
0009075D 9206                       	dc.b	nF1, $06
0009075F EC04                       	smpsPSGAlterVol     $04
00090761 E701                       	dc.b	smpsNoAttack, $01
00090763 EC07                       	smpsPSGAlterVol     $07
00090765 8006                       	dc.b	nRst, $06
00090767 E100                       	smpsAlterNote       $00
00090769 01                         	dc.b	$01
0009076A E104                       	smpsAlterNote       $04
0009076C 01                         	dc.b	$01
0009076D E100                       	smpsAlterNote       $00
0009076F 01                         	dc.b	$01
00090770 E1FD                       	smpsAlterNote       $FD
00090772 01                         	dc.b	$01
00090773 ECF5                       	smpsPSGAlterVol     $F5
00090775 9206                       	dc.b	nF1, $06
00090777 EC04                       	smpsPSGAlterVol     $04
00090779 E701                       	dc.b	smpsNoAttack, $01
0009077B EC07                       	smpsPSGAlterVol     $07
0009077D 8003                       	dc.b	nRst, $03
0009077F ECF5                       	smpsPSGAlterVol     $F5
00090781 9207                       	dc.b	nF1, $07
00090783 EC0B                       	smpsPSGAlterVol     $0B
00090785 8007                       	dc.b	nRst, $07
00090787 E103                       	smpsAlterNote       $03
00090789 0101                       	dc.b	$01, $01
0009078B E1FD                       	smpsAlterNote       $FD
0009078D 01                         	dc.b	$01
0009078E E1FA                       	smpsAlterNote       $FA
00090790 01                         	dc.b	$01
00090791 E1FD                       	smpsAlterNote       $FD
00090793 ECF5                       	smpsPSGAlterVol     $F5
00090795 9206                       	dc.b	nF1, $06
00090797 EC0B                       	smpsPSGAlterVol     $0B
00090799 8004                       	dc.b	nRst, $04
0009079B ECF5                       	smpsPSGAlterVol     $F5
0009079D 9206                       	dc.b	nF1, $06
0009079F EC04                       	smpsPSGAlterVol     $04
000907A1 E701                       	dc.b	smpsNoAttack, $01
000907A3 EC07                       	smpsPSGAlterVol     $07
000907A5 8006                       	dc.b	nRst, $06
000907A7 E103                       	smpsAlterNote       $03
000907A9 01                         	dc.b	$01
000907AA E104                       	smpsAlterNote       $04
000907AC 01                         	dc.b	$01
000907AD E100                       	smpsAlterNote       $00
000907AF 01                         	dc.b	$01
000907B0 E1FA                       	smpsAlterNote       $FA
000907B2 01                         	dc.b	$01
000907B3 E1FD                       	smpsAlterNote       $FD
000907B5 ECF5                       	smpsPSGAlterVol     $F5
000907B7 9206                       	dc.b	nF1, $06
000907B9 EC04                       	smpsPSGAlterVol     $04
000907BB E701                       	dc.b	smpsNoAttack, $01
000907BD EC07                       	smpsPSGAlterVol     $07
000907BF 8003                       	dc.b	nRst, $03
000907C1 ECF5                       	smpsPSGAlterVol     $F5
000907C3 9206                       	dc.b	nF1, $06
000907C5 EC04                       	smpsPSGAlterVol     $04
000907C7 E701                       	dc.b	smpsNoAttack, $01
000907C9 EC07                       	smpsPSGAlterVol     $07
000907CB 8006                       	dc.b	nRst, $06
000907CD E100                       	smpsAlterNote       $00
000907CF 01                         	dc.b	$01
000907D0 E104                       	smpsAlterNote       $04
000907D2 01                         	dc.b	$01
000907D3 E103                       	smpsAlterNote       $03
000907D5 01                         	dc.b	$01
000907D6 E1FD                       	smpsAlterNote       $FD
000907D8 01                         	dc.b	$01
000907D9 ECF5                       	smpsPSGAlterVol     $F5
000907DB 9107                       	dc.b	nE1, $07
000907DD EC0B                       	smpsPSGAlterVol     $0B
000907DF 8004                       	dc.b	nRst, $04
000907E1 ECF5                       	smpsPSGAlterVol     $F5
000907E3 9106                       	dc.b	nE1, $06
000907E5 EC0B                       	smpsPSGAlterVol     $0B
000907E7 8007                       	dc.b	nRst, $07
000907E9 E103                       	smpsAlterNote       $03
000907EB 0101                       	dc.b	$01, $01
000907ED E100                       	smpsAlterNote       $00
000907EF 01                         	dc.b	$01
000907F0 E1FA                       	smpsAlterNote       $FA
000907F2 01                         	dc.b	$01
000907F3 E1FD                       	smpsAlterNote       $FD
000907F5 ECF5                       	smpsPSGAlterVol     $F5
000907F7 9106                       	dc.b	nE1, $06
000907F9 EC04                       	smpsPSGAlterVol     $04
000907FB E701                       	dc.b	smpsNoAttack, $01
000907FD EC07                       	smpsPSGAlterVol     $07
000907FF 8003                       	dc.b	nRst, $03
00090801 ECF5                       	smpsPSGAlterVol     $F5
00090803 9106                       	dc.b	nE1, $06
00090805 EC04                       	smpsPSGAlterVol     $04
00090807 E701                       	dc.b	smpsNoAttack, $01
00090809 EC07                       	smpsPSGAlterVol     $07
0009080B 8006                       	dc.b	nRst, $06
0009080D E100                       	smpsAlterNote       $00
0009080F 01                         	dc.b	$01
00090810 E104                       	smpsAlterNote       $04
00090812 01                         	dc.b	$01
00090813 E100                       	smpsAlterNote       $00
00090815 01                         	dc.b	$01
00090816 E1FA                       	smpsAlterNote       $FA
00090818 01                         	dc.b	$01
00090819 E1FD                       	smpsAlterNote       $FD
0009081B ECF5                       	smpsPSGAlterVol     $F5
0009081D 9106                       	dc.b	nE1, $06
0009081F EC04                       	smpsPSGAlterVol     $04
00090821 E701                       	dc.b	smpsNoAttack, $01
00090823 EC07                       	smpsPSGAlterVol     $07
00090825 8003                       	dc.b	nRst, $03
00090827 ECF5                       	smpsPSGAlterVol     $F5
00090829 9107 9106                  	dc.b	nE1, $07, nE1, $06
0009082D EC04                       	smpsPSGAlterVol     $04
0009082F E701                       	dc.b	smpsNoAttack, $01
00090831 ECFC                       	smpsPSGAlterVol     $FC
00090833 9103 9103                  	dc.b	nE1, $03, nE1, $03
00090837 EC04                       	smpsPSGAlterVol     $04
00090839 E701                       	dc.b	smpsNoAttack, $01
0009083B ECFC                       	smpsPSGAlterVol     $FC
0009083D 9106                       	dc.b	nE1, $06
0009083F EC04                       	smpsPSGAlterVol     $04
00090841 E701                       	dc.b	smpsNoAttack, $01
00090843 EC07                       	smpsPSGAlterVol     $07
00090845 8006                       	dc.b	nRst, $06
00090847 E100                       	smpsAlterNote       $00
00090849 01                         	dc.b	$01
0009084A E104                       	smpsAlterNote       $04
0009084C 01                         	dc.b	$01
0009084D E100                       	smpsAlterNote       $00
0009084F 01                         	dc.b	$01
00090850 E1FA                       	smpsAlterNote       $FA
00090852 01                         	dc.b	$01
00090853 E1F9                       	smpsAlterNote       $F9
00090855 01                         	dc.b	$01
00090856 E1FD                       	smpsAlterNote       $FD
00090858 01                         	dc.b	$01
00090859 E103                       	smpsAlterNote       $03
0009085B 01                         	dc.b	$01
0009085C E104                       	smpsAlterNote       $04
0009085E 01                         	dc.b	$01
0009085F E100                       	smpsAlterNote       $00
00090861 01                         	dc.b	$01
00090862 E1FA                       	smpsAlterNote       $FA
00090864 0101                       	dc.b	$01, $01
00090866 E1FD                       	smpsAlterNote       $FD
00090868 ECF5                       	smpsPSGAlterVol     $F5
0009086A 9206                       	dc.b	nF1, $06
0009086C EC04                       	smpsPSGAlterVol     $04
0009086E E701                       	dc.b	smpsNoAttack, $01
00090870 EC07                       	smpsPSGAlterVol     $07
00090872 8003                       	dc.b	nRst, $03
00090874 ECF5                       	smpsPSGAlterVol     $F5
00090876 9206                       	dc.b	nF1, $06
00090878 EC04                       	smpsPSGAlterVol     $04
0009087A E701                       	dc.b	smpsNoAttack, $01
0009087C EC07                       	smpsPSGAlterVol     $07
0009087E 8006                       	dc.b	nRst, $06
00090880 E100                       	smpsAlterNote       $00
00090882 01                         	dc.b	$01
00090883 E104                       	smpsAlterNote       $04
00090885 01                         	dc.b	$01
00090886 E103                       	smpsAlterNote       $03
00090888 01                         	dc.b	$01
00090889 E1FD                       	smpsAlterNote       $FD
0009088B 01                         	dc.b	$01
0009088C ECF5                       	smpsPSGAlterVol     $F5
0009088E 9407                       	dc.b	nG1, $07
00090890 EC0B                       	smpsPSGAlterVol     $0B
00090892 8004                       	dc.b	nRst, $04
00090894 ECF5                       	smpsPSGAlterVol     $F5
00090896 9406                       	dc.b	nG1, $06
00090898 EC0B                       	smpsPSGAlterVol     $0B
0009089A 8007                       	dc.b	nRst, $07
0009089C E103                       	smpsAlterNote       $03
0009089E 0101                       	dc.b	$01, $01
000908A0 E1FD                       	smpsAlterNote       $FD
000908A2 01                         	dc.b	$01
000908A3 E1F9                       	smpsAlterNote       $F9
000908A5 01                         	dc.b	$01
000908A6 E1FD                       	smpsAlterNote       $FD
000908A8 ECF5                       	smpsPSGAlterVol     $F5
000908AA 9206                       	dc.b	nF1, $06
000908AC EC04                       	smpsPSGAlterVol     $04
000908AE E701                       	dc.b	smpsNoAttack, $01
000908B0 EC07                       	smpsPSGAlterVol     $07
000908B2 8003                       	dc.b	nRst, $03
000908B4 ECF5                       	smpsPSGAlterVol     $F5
000908B6 9206                       	dc.b	nF1, $06
000908B8 EC04                       	smpsPSGAlterVol     $04
000908BA E701                       	dc.b	smpsNoAttack, $01
000908BC EC07                       	smpsPSGAlterVol     $07
000908BE 8006                       	dc.b	nRst, $06
000908C0 E100                       	smpsAlterNote       $00
000908C2 01                         	dc.b	$01
000908C3 E104                       	smpsAlterNote       $04
000908C5 01                         	dc.b	$01
000908C6 E100                       	smpsAlterNote       $00
000908C8 01                         	dc.b	$01
000908C9 E1FA                       	smpsAlterNote       $FA
000908CB 01                         	dc.b	$01
000908CC E1FD                       	smpsAlterNote       $FD
000908CE ECF5                       	smpsPSGAlterVol     $F5
000908D0 9206                       	dc.b	nF1, $06
000908D2 EC04                       	smpsPSGAlterVol     $04
000908D4 E701                       	dc.b	smpsNoAttack, $01
000908D6 EC07                       	smpsPSGAlterVol     $07
000908D8 8003                       	dc.b	nRst, $03
000908DA ECF5                       	smpsPSGAlterVol     $F5
000908DC 9107                       	dc.b	nE1, $07
000908DE EC0B                       	smpsPSGAlterVol     $0B
000908E0 8006                       	dc.b	nRst, $06
000908E2 E100                       	smpsAlterNote       $00
000908E4 01                         	dc.b	$01
000908E5 E103                       	smpsAlterNote       $03
000908E7 0101                       	dc.b	$01, $01
000908E9 E1FD                       	smpsAlterNote       $FD
000908EB 01                         	dc.b	$01
000908EC ECF5                       	smpsPSGAlterVol     $F5
000908EE 9207                       	dc.b	nF1, $07
000908F0 EC0B                       	smpsPSGAlterVol     $0B
000908F2 8004                       	dc.b	nRst, $04
000908F4 ECF5                       	smpsPSGAlterVol     $F5
000908F6 9206                       	dc.b	nF1, $06
000908F8 EC04                       	smpsPSGAlterVol     $04
000908FA E701                       	dc.b	smpsNoAttack, $01
000908FC EC07                       	smpsPSGAlterVol     $07
000908FE 8006                       	dc.b	nRst, $06
00090900 E103                       	smpsAlterNote       $03
00090902 01                         	dc.b	$01
00090903 E104                       	smpsAlterNote       $04
00090905 01                         	dc.b	$01
00090906 E100                       	smpsAlterNote       $00
00090908 01                         	dc.b	$01
00090909 E1FB                       	smpsAlterNote       $FB
0009090B 01                         	dc.b	$01
0009090C E1FD                       	smpsAlterNote       $FD
0009090E ECF5                       	smpsPSGAlterVol     $F5
00090910 9406                       	dc.b	nG1, $06
00090912 EC04                       	smpsPSGAlterVol     $04
00090914 E701                       	dc.b	smpsNoAttack, $01
00090916 EC07                       	smpsPSGAlterVol     $07
00090918 8003                       	dc.b	nRst, $03
0009091A ECF5                       	smpsPSGAlterVol     $F5
0009091C 9406                       	dc.b	nG1, $06
0009091E EC04                       	smpsPSGAlterVol     $04
00090920 E701                       	dc.b	smpsNoAttack, $01
00090922 EC07                       	smpsPSGAlterVol     $07
00090924 8006                       	dc.b	nRst, $06
00090926 E100                       	smpsAlterNote       $00
00090928 01                         	dc.b	$01
00090929 E104                       	smpsAlterNote       $04
0009092B 01                         	dc.b	$01
0009092C E100                       	smpsAlterNote       $00
0009092E 01                         	dc.b	$01
0009092F E1FD                       	smpsAlterNote       $FD
00090931 01                         	dc.b	$01
00090932 ECF5                       	smpsPSGAlterVol     $F5
00090934 9206                       	dc.b	nF1, $06
00090936 EC04                       	smpsPSGAlterVol     $04
00090938 E701                       	dc.b	smpsNoAttack, $01
0009093A EC07                       	smpsPSGAlterVol     $07
0009093C 8003                       	dc.b	nRst, $03
0009093E ECF5                       	smpsPSGAlterVol     $F5
00090940 9207                       	dc.b	nF1, $07
00090942 EC0B                       	smpsPSGAlterVol     $0B
00090944 8007                       	dc.b	nRst, $07
00090946 E103                       	smpsAlterNote       $03
00090948 0101                       	dc.b	$01, $01
0009094A E1FD                       	smpsAlterNote       $FD
0009094C 01                         	dc.b	$01
0009094D E1FA                       	smpsAlterNote       $FA
0009094F 01                         	dc.b	$01
00090950 E1FD                       	smpsAlterNote       $FD
00090952 ECF5                       	smpsPSGAlterVol     $F5
00090954 9206                       	dc.b	nF1, $06
00090956 EC0B                       	smpsPSGAlterVol     $0B
00090958 8004                       	dc.b	nRst, $04
0009095A ECF5                       	smpsPSGAlterVol     $F5
0009095C 9206                       	dc.b	nF1, $06
0009095E EC04                       	smpsPSGAlterVol     $04
00090960 E701                       	dc.b	smpsNoAttack, $01
00090962 EC07                       	smpsPSGAlterVol     $07
00090964 8006                       	dc.b	nRst, $06
00090966 E100                       	smpsAlterNote       $00
00090968 01                         	dc.b	$01
00090969 E104                       	smpsAlterNote       $04
0009096B 01                         	dc.b	$01
0009096C E100                       	smpsAlterNote       $00
0009096E 01                         	dc.b	$01
0009096F E1FA                       	smpsAlterNote       $FA
00090971 01                         	dc.b	$01
00090972 E1FD                       	smpsAlterNote       $FD
00090974 ECF5                       	smpsPSGAlterVol     $F5
00090976 9206                       	dc.b	nF1, $06
00090978 EC04                       	smpsPSGAlterVol     $04
0009097A E704                       	dc.b	smpsNoAttack, $04
0009097C ECFC                       	smpsPSGAlterVol     $FC
0009097E 9207                       	dc.b	nF1, $07
00090980 EC0B                       	smpsPSGAlterVol     $0B
00090982 8006                       	dc.b	nRst, $06
00090984 E100                       	smpsAlterNote       $00
00090986 01                         	dc.b	$01
00090987 E104                       	smpsAlterNote       $04
00090989 01                         	dc.b	$01
0009098A E103                       	smpsAlterNote       $03
0009098C 01                         	dc.b	$01
0009098D E1FD                       	smpsAlterNote       $FD
0009098F 01                         	dc.b	$01
00090990 ECF5                       	smpsPSGAlterVol     $F5
00090992 9207                       	dc.b	nF1, $07
00090994 EC0B                       	smpsPSGAlterVol     $0B
00090996 8004                       	dc.b	nRst, $04
00090998 ECF5                       	smpsPSGAlterVol     $F5
0009099A 9206                       	dc.b	nF1, $06
0009099C EC0B                       	smpsPSGAlterVol     $0B
0009099E 8007                       	dc.b	nRst, $07
000909A0 E103                       	smpsAlterNote       $03
000909A2 0101                       	dc.b	$01, $01
000909A4 E100                       	smpsAlterNote       $00
000909A6 01                         	dc.b	$01
000909A7 E1FA                       	smpsAlterNote       $FA
000909A9 01                         	dc.b	$01
000909AA E1FD                       	smpsAlterNote       $FD
000909AC ECF5                       	smpsPSGAlterVol     $F5
000909AE 9206                       	dc.b	nF1, $06
000909B0 EC04                       	smpsPSGAlterVol     $04
000909B2 E704                       	dc.b	smpsNoAttack, $04
000909B4 ECFC                       	smpsPSGAlterVol     $FC
000909B6 9206                       	dc.b	nF1, $06
000909B8 EC04                       	smpsPSGAlterVol     $04
000909BA E701                       	dc.b	smpsNoAttack, $01
000909BC EC07                       	smpsPSGAlterVol     $07
000909BE 8006                       	dc.b	nRst, $06
000909C0 E100                       	smpsAlterNote       $00
000909C2 01                         	dc.b	$01
000909C3 E104                       	smpsAlterNote       $04
000909C5 01                         	dc.b	$01
000909C6 E100                       	smpsAlterNote       $00
000909C8 01                         	dc.b	$01
000909C9 E1FD                       	smpsAlterNote       $FD
000909CB 01                         	dc.b	$01
000909CC ECF5                       	smpsPSGAlterVol     $F5
000909CE 9206                       	dc.b	nF1, $06
000909D0 EC04                       	smpsPSGAlterVol     $04
000909D2 E701                       	dc.b	smpsNoAttack, $01
000909D4 EC07                       	smpsPSGAlterVol     $07
000909D6 8003                       	dc.b	nRst, $03
000909D8 ECF5                       	smpsPSGAlterVol     $F5
000909DA 9207                       	dc.b	nF1, $07
000909DC EC0B                       	smpsPSGAlterVol     $0B
000909DE 8007                       	dc.b	nRst, $07
000909E0 E103                       	smpsAlterNote       $03
000909E2 0101                       	dc.b	$01, $01
000909E4 E1FD                       	smpsAlterNote       $FD
000909E6 01                         	dc.b	$01
000909E7 E1FA                       	smpsAlterNote       $FA
000909E9 01                         	dc.b	$01
000909EA E1FD                       	smpsAlterNote       $FD
000909EC ECF5                       	smpsPSGAlterVol     $F5
000909EE 9106                       	dc.b	nE1, $06
000909F0 EC0B                       	smpsPSGAlterVol     $0B
000909F2 8004                       	dc.b	nRst, $04
000909F4 ECF5                       	smpsPSGAlterVol     $F5
000909F6 9106                       	dc.b	nE1, $06
000909F8 EC04                       	smpsPSGAlterVol     $04
000909FA E701                       	dc.b	smpsNoAttack, $01
000909FC EC07                       	smpsPSGAlterVol     $07
000909FE 8006                       	dc.b	nRst, $06
00090A00 E100                       	smpsAlterNote       $00
00090A02 01                         	dc.b	$01
00090A03 E104                       	smpsAlterNote       $04
00090A05 01                         	dc.b	$01
00090A06 E100                       	smpsAlterNote       $00
00090A08 01                         	dc.b	$01
00090A09 E1FA                       	smpsAlterNote       $FA
00090A0B 01                         	dc.b	$01
00090A0C E1FD                       	smpsAlterNote       $FD
00090A0E ECF5                       	smpsPSGAlterVol     $F5
00090A10 9106                       	dc.b	nE1, $06
00090A12 EC04                       	smpsPSGAlterVol     $04
00090A14 E701                       	dc.b	smpsNoAttack, $01
00090A16 EC07                       	smpsPSGAlterVol     $07
00090A18 8003                       	dc.b	nRst, $03
00090A1A ECF5                       	smpsPSGAlterVol     $F5
00090A1C 9106                       	dc.b	nE1, $06
00090A1E EC04                       	smpsPSGAlterVol     $04
00090A20 E701                       	dc.b	smpsNoAttack, $01
00090A22 EC07                       	smpsPSGAlterVol     $07
00090A24 8006                       	dc.b	nRst, $06
00090A26 E100                       	smpsAlterNote       $00
00090A28 01                         	dc.b	$01
00090A29 E104                       	smpsAlterNote       $04
00090A2B 01                         	dc.b	$01
00090A2C E103                       	smpsAlterNote       $03
00090A2E 01                         	dc.b	$01
00090A2F E1FD                       	smpsAlterNote       $FD
00090A31 01                         	dc.b	$01
00090A32 ECF5                       	smpsPSGAlterVol     $F5
00090A34 9107                       	dc.b	nE1, $07
00090A36 EC0B                       	smpsPSGAlterVol     $0B
00090A38 8004                       	dc.b	nRst, $04
00090A3A ECF5                       	smpsPSGAlterVol     $F5
00090A3C 9106                       	dc.b	nE1, $06
00090A3E EC0B                       	smpsPSGAlterVol     $0B
00090A40 8007                       	dc.b	nRst, $07
00090A42 E103                       	smpsAlterNote       $03
00090A44 0101                       	dc.b	$01, $01
00090A46 E100                       	smpsAlterNote       $00
00090A48 01                         	dc.b	$01
00090A49 E1FA                       	smpsAlterNote       $FA
00090A4B 01                         	dc.b	$01
00090A4C E1FD                       	smpsAlterNote       $FD
00090A4E ECF5                       	smpsPSGAlterVol     $F5
00090A50 9106                       	dc.b	nE1, $06
00090A52 EC04                       	smpsPSGAlterVol     $04
00090A54 E701                       	dc.b	smpsNoAttack, $01
00090A56 EC07                       	smpsPSGAlterVol     $07
00090A58 8003                       	dc.b	nRst, $03
00090A5A ECF5                       	smpsPSGAlterVol     $F5
00090A5C 9106                       	dc.b	nE1, $06
00090A5E EC04                       	smpsPSGAlterVol     $04
00090A60 E701                       	dc.b	smpsNoAttack, $01
00090A62 EC07                       	smpsPSGAlterVol     $07
00090A64 8003                       	dc.b	nRst, $03
00090A66 ECF5                       	smpsPSGAlterVol     $F5
00090A68 9207                       	dc.b	nF1, $07
00090A6A EC0B                       	smpsPSGAlterVol     $0B
00090A6C 8006                       	dc.b	nRst, $06
00090A6E E100                       	smpsAlterNote       $00
00090A70 01                         	dc.b	$01
00090A71 E104                       	smpsAlterNote       $04
00090A73 01                         	dc.b	$01
00090A74 E103                       	smpsAlterNote       $03
00090A76 01                         	dc.b	$01
00090A77 E1FD                       	smpsAlterNote       $FD
00090A79 01                         	dc.b	$01
00090A7A E1F9                       	smpsAlterNote       $F9
00090A7C 01                         	dc.b	$01
00090A7D E1FD                       	smpsAlterNote       $FD
00090A7F 01                         	dc.b	$01
00090A80 E100                       	smpsAlterNote       $00
00090A82 01                         	dc.b	$01
00090A83 E104                       	smpsAlterNote       $04
00090A85 01                         	dc.b	$01
00090A86 E1FD                       	smpsAlterNote       $FD
00090A88 ECF5                       	smpsPSGAlterVol     $F5
00090A8A 9203 9203                  	dc.b	nF1, $03, nF1, $03
00090A8E EC04                       	smpsPSGAlterVol     $04
00090A90 E701                       	dc.b	smpsNoAttack, $01
00090A92 EC07                       	smpsPSGAlterVol     $07
00090A94 8009                       	dc.b	nRst, $09
00090A96 E100                       	smpsAlterNote       $00
00090A98 01                         	dc.b	$01
00090A99 E104                       	smpsAlterNote       $04
00090A9B 01                         	dc.b	$01
00090A9C E103                       	smpsAlterNote       $03
00090A9E 01                         	dc.b	$01
00090A9F E1FD                       	smpsAlterNote       $FD
00090AA1 01                         	dc.b	$01
00090AA2 E1F9                       	smpsAlterNote       $F9
00090AA4 01                         	dc.b	$01
00090AA5 E1FD                       	smpsAlterNote       $FD
00090AA7 01                         	dc.b	$01
00090AA8 E100                       	smpsAlterNote       $00
00090AAA 01                         	dc.b	$01
00090AAB E104                       	smpsAlterNote       $04
00090AAD 01                         	dc.b	$01
00090AAE E100                       	smpsAlterNote       $00
00090AB0 01                         	dc.b	$01
00090AB1 E1FA                       	smpsAlterNote       $FA
00090AB3 01                         	dc.b	$01
00090AB4 E1F9                       	smpsAlterNote       $F9
00090AB6 01                         	dc.b	$01
00090AB7 E1FD                       	smpsAlterNote       $FD
00090AB9 01                         	dc.b	$01
00090ABA E103                       	smpsAlterNote       $03
00090ABC 0101                       	dc.b	$01, $01
00090ABE E100                       	smpsAlterNote       $00
00090AC0 01                         	dc.b	$01
00090AC1 E1FD                       	smpsAlterNote       $FD
00090AC3 ECF5                       	smpsPSGAlterVol     $F5
00090AC5 9202                       	dc.b	nF1, $02
00090AC7 EC04                       	smpsPSGAlterVol     $04
00090AC9 E701                       	dc.b	smpsNoAttack, $01
00090ACB ECFC                       	smpsPSGAlterVol     $FC
00090ACD 9106                       	dc.b	nE1, $06
00090ACF EC04                       	smpsPSGAlterVol     $04
00090AD1 E701                       	dc.b	smpsNoAttack, $01
00090AD3 EC07                       	smpsPSGAlterVol     $07
00090AD5 8006                       	dc.b	nRst, $06
00090AD7 E100                       	smpsAlterNote       $00
00090AD9 01                         	dc.b	$01
00090ADA E104                       	smpsAlterNote       $04
00090ADC 01                         	dc.b	$01
00090ADD E100                       	smpsAlterNote       $00
00090ADF 01                         	dc.b	$01
00090AE0 E1FD                       	smpsAlterNote       $FD
00090AE2 01                         	dc.b	$01
00090AE3 E1F9                       	smpsAlterNote       $F9
00090AE5 01                         	dc.b	$01
00090AE6 E1FD                       	smpsAlterNote       $FD
00090AE8 01                         	dc.b	$01
00090AE9 E103                       	smpsAlterNote       $03
00090AEB 01                         	dc.b	$01
00090AEC E104                       	smpsAlterNote       $04
00090AEE 01                         	dc.b	$01
00090AEF E1FD                       	smpsAlterNote       $FD
00090AF1 ECF5                       	smpsPSGAlterVol     $F5
00090AF3 9102                       	dc.b	nE1, $02
00090AF5 EC04                       	smpsPSGAlterVol     $04
00090AF7 E701                       	dc.b	smpsNoAttack, $01
00090AF9 ECFC                       	smpsPSGAlterVol     $FC
00090AFB 920D                       	dc.b	nF1, $0D
00090AFD E100                       	smpsAlterNote       $00
00090AFF E701                       	dc.b	smpsNoAttack, $01
00090B01 E104                       	smpsAlterNote       $04
00090B03 E701                       	dc.b	smpsNoAttack, $01
00090B05 E100                       	smpsAlterNote       $00
00090B07 E701                       	dc.b	smpsNoAttack, $01
00090B09 E1FD                       	smpsAlterNote       $FD
00090B0B E701                       	dc.b	smpsNoAttack, $01
00090B0D E1F9                       	smpsAlterNote       $F9
00090B0F E701                       	dc.b	smpsNoAttack, $01
00090B11 E1FD                       	smpsAlterNote       $FD
00090B13 E701                       	dc.b	smpsNoAttack, $01
00090B15 E103                       	smpsAlterNote       $03
00090B17 E701                       	dc.b	smpsNoAttack, $01
00090B19 E104                       	smpsAlterNote       $04
00090B1B E701                       	dc.b	smpsNoAttack, $01
00090B1D E100                       	smpsAlterNote       $00
00090B1F E701                       	dc.b	smpsNoAttack, $01
00090B21 E1FA                       	smpsAlterNote       $FA
00090B23 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090B27 E1FD                       	smpsAlterNote       $FD
00090B29 E701                       	dc.b	smpsNoAttack, $01
00090B2B E103                       	smpsAlterNote       $03
00090B2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090B31 E1FD                       	smpsAlterNote       $FD
00090B33 E701                       	dc.b	smpsNoAttack, $01
00090B35 E1F9                       	smpsAlterNote       $F9
00090B37 E701                       	dc.b	smpsNoAttack, $01
00090B39 E1FA                       	smpsAlterNote       $FA
00090B3B E701                       	dc.b	smpsNoAttack, $01
00090B3D E100                       	smpsAlterNote       $00
00090B3F EC04                       	smpsPSGAlterVol     $04
00090B41 E701                       	dc.b	smpsNoAttack, $01
00090B43 EC07                       	smpsPSGAlterVol     $07
00090B45 E104                       	smpsAlterNote       $04
00090B47 8001                       	dc.b	nRst, $01
00090B49 E100                       	smpsAlterNote       $00
00090B4B 01                         	dc.b	$01
00090B4C E1FD                       	smpsAlterNote       $FD
00090B4E 01                         	dc.b	$01
00090B4F E1F9                       	smpsAlterNote       $F9
00090B51 01                         	dc.b	$01
00090B52 E1FD                       	smpsAlterNote       $FD
00090B54 01                         	dc.b	$01
00090B55 E103                       	smpsAlterNote       $03
00090B57 01                         	dc.b	$01
00090B58 E104                       	smpsAlterNote       $04
00090B5A 01                         	dc.b	$01
00090B5B E1FD                       	smpsAlterNote       $FD
00090B5D ECF5                       	smpsPSGAlterVol     $F5
00090B5F 9106                       	dc.b	nE1, $06
00090B61 EC04                       	smpsPSGAlterVol     $04
00090B63 E701                       	dc.b	smpsNoAttack, $01
00090B65 EC07                       	smpsPSGAlterVol     $07
00090B67 8003                       	dc.b	nRst, $03
00090B69 ECF5                       	smpsPSGAlterVol     $F5
00090B6B 9106                       	dc.b	nE1, $06
00090B6D EC04                       	smpsPSGAlterVol     $04
00090B6F E701                       	dc.b	smpsNoAttack, $01
00090B71 EC07                       	smpsPSGAlterVol     $07
00090B73 8006                       	dc.b	nRst, $06
00090B75 E100                       	smpsAlterNote       $00
00090B77 01                         	dc.b	$01
00090B78 E104                       	smpsAlterNote       $04
00090B7A 01                         	dc.b	$01
00090B7B E100                       	smpsAlterNote       $00
00090B7D 01                         	dc.b	$01
00090B7E E1FA                       	smpsAlterNote       $FA
00090B80 01                         	dc.b	$01
00090B81 E1FD                       	smpsAlterNote       $FD
00090B83 ECF5                       	smpsPSGAlterVol     $F5
00090B85 9206                       	dc.b	nF1, $06
00090B87 EC04                       	smpsPSGAlterVol     $04
00090B89 E701                       	dc.b	smpsNoAttack, $01
00090B8B EC07                       	smpsPSGAlterVol     $07
00090B8D 8003                       	dc.b	nRst, $03
00090B8F ECF5                       	smpsPSGAlterVol     $F5
00090B91 9207                       	dc.b	nF1, $07
00090B93 EC0B                       	smpsPSGAlterVol     $0B
00090B95 8006                       	dc.b	nRst, $06
00090B97 E100                       	smpsAlterNote       $00
00090B99 01                         	dc.b	$01
00090B9A E103                       	smpsAlterNote       $03
00090B9C 0101                       	dc.b	$01, $01
00090B9E E1FD                       	smpsAlterNote       $FD
00090BA0 01                         	dc.b	$01
00090BA1 ECF5                       	smpsPSGAlterVol     $F5
00090BA3 9107                       	dc.b	nE1, $07
00090BA5 EC0B                       	smpsPSGAlterVol     $0B
00090BA7 8004                       	dc.b	nRst, $04
00090BA9 ECF5                       	smpsPSGAlterVol     $F5
00090BAB 9106                       	dc.b	nE1, $06
00090BAD EC04                       	smpsPSGAlterVol     $04
00090BAF E701                       	dc.b	smpsNoAttack, $01
00090BB1 EC07                       	smpsPSGAlterVol     $07
00090BB3 8006                       	dc.b	nRst, $06
00090BB5 E103                       	smpsAlterNote       $03
00090BB7 01                         	dc.b	$01
00090BB8 E104                       	smpsAlterNote       $04
00090BBA 01                         	dc.b	$01
00090BBB E100                       	smpsAlterNote       $00
00090BBD 01                         	dc.b	$01
00090BBE E1FA                       	smpsAlterNote       $FA
00090BC0 01                         	dc.b	$01
00090BC1 E1FD                       	smpsAlterNote       $FD
00090BC3 ECF5                       	smpsPSGAlterVol     $F5
00090BC5 9106                       	dc.b	nE1, $06
00090BC7 EC04                       	smpsPSGAlterVol     $04
00090BC9 E701                       	dc.b	smpsNoAttack, $01
00090BCB EC07                       	smpsPSGAlterVol     $07
00090BCD 8003                       	dc.b	nRst, $03
00090BCF ECF5                       	smpsPSGAlterVol     $F5
00090BD1 9106                       	dc.b	nE1, $06
00090BD3 EC04                       	smpsPSGAlterVol     $04
00090BD5 E701                       	dc.b	smpsNoAttack, $01
00090BD7 EC07                       	smpsPSGAlterVol     $07
00090BD9 8003                       	dc.b	nRst, $03
00090BDB ECF5                       	smpsPSGAlterVol     $F5
00090BDD 9207                       	dc.b	nF1, $07
00090BDF EC0B                       	smpsPSGAlterVol     $0B
00090BE1 8006                       	dc.b	nRst, $06
00090BE3 E100                       	smpsAlterNote       $00
00090BE5 01                         	dc.b	$01
00090BE6 E103                       	smpsAlterNote       $03
00090BE8 0101                       	dc.b	$01, $01
00090BEA E1FD                       	smpsAlterNote       $FD
00090BEC 01                         	dc.b	$01
00090BED E1F9                       	smpsAlterNote       $F9
00090BEF 01                         	dc.b	$01
00090BF0 E1FA                       	smpsAlterNote       $FA
00090BF2 01                         	dc.b	$01
00090BF3 E100                       	smpsAlterNote       $00
00090BF5 01                         	dc.b	$01
00090BF6 E104                       	smpsAlterNote       $04
00090BF8 01                         	dc.b	$01
00090BF9 E1FD                       	smpsAlterNote       $FD
00090BFB ECF5                       	smpsPSGAlterVol     $F5
00090BFD 9203 9203                  	dc.b	nF1, $03, nF1, $03
00090C01 EC04                       	smpsPSGAlterVol     $04
00090C03 E701                       	dc.b	smpsNoAttack, $01
00090C05 EC07                       	smpsPSGAlterVol     $07
00090C07 8009                       	dc.b	nRst, $09
00090C09 E100                       	smpsAlterNote       $00
00090C0B 01                         	dc.b	$01
00090C0C E103                       	smpsAlterNote       $03
00090C0E 0101                       	dc.b	$01, $01
00090C10 E1FD                       	smpsAlterNote       $FD
00090C12 01                         	dc.b	$01
00090C13 E1F9                       	smpsAlterNote       $F9
00090C15 01                         	dc.b	$01
00090C16 E1FA                       	smpsAlterNote       $FA
00090C18 01                         	dc.b	$01
00090C19 E100                       	smpsAlterNote       $00
00090C1B 01                         	dc.b	$01
00090C1C E104                       	smpsAlterNote       $04
00090C1E 01                         	dc.b	$01
00090C1F E100                       	smpsAlterNote       $00
00090C21 01                         	dc.b	$01
00090C22 E1FD                       	smpsAlterNote       $FD
00090C24 01                         	dc.b	$01
00090C25 E1F9                       	smpsAlterNote       $F9
00090C27 01                         	dc.b	$01
00090C28 E1FD                       	smpsAlterNote       $FD
00090C2A 01                         	dc.b	$01
00090C2B E103                       	smpsAlterNote       $03
00090C2D 01                         	dc.b	$01
00090C2E E104                       	smpsAlterNote       $04
00090C30 01                         	dc.b	$01
00090C31 E100                       	smpsAlterNote       $00
00090C33 01                         	dc.b	$01
00090C34 E1FD                       	smpsAlterNote       $FD
00090C36 ECF5                       	smpsPSGAlterVol     $F5
00090C38 9203 9106                  	dc.b	nF1, $03, nE1, $06
00090C3C EC04                       	smpsPSGAlterVol     $04
00090C3E E701                       	dc.b	smpsNoAttack, $01
00090C40 EC07                       	smpsPSGAlterVol     $07
00090C42 8006                       	dc.b	nRst, $06
00090C44 E100                       	smpsAlterNote       $00
00090C46 01                         	dc.b	$01
00090C47 E104                       	smpsAlterNote       $04
00090C49 01                         	dc.b	$01
00090C4A E103                       	smpsAlterNote       $03
00090C4C 01                         	dc.b	$01
00090C4D E1FD                       	smpsAlterNote       $FD
00090C4F 01                         	dc.b	$01
00090C50 E1F9                       	smpsAlterNote       $F9
00090C52 01                         	dc.b	$01
00090C53 E1FD                       	smpsAlterNote       $FD
00090C55 01                         	dc.b	$01
00090C56 E100                       	smpsAlterNote       $00
00090C58 01                         	dc.b	$01
00090C59 E104                       	smpsAlterNote       $04
00090C5B 01                         	dc.b	$01
00090C5C E1FD                       	smpsAlterNote       $FD
00090C5E ECF5                       	smpsPSGAlterVol     $F5
00090C60 9103 920D                  	dc.b	nE1, $03, nF1, $0D
00090C64 E100                       	smpsAlterNote       $00
00090C66 E701                       	dc.b	smpsNoAttack, $01
00090C68 E104                       	smpsAlterNote       $04
00090C6A E701                       	dc.b	smpsNoAttack, $01
00090C6C E100                       	smpsAlterNote       $00
00090C6E E701                       	dc.b	smpsNoAttack, $01
00090C70 E1FD                       	smpsAlterNote       $FD
00090C72 E701                       	dc.b	smpsNoAttack, $01
00090C74 E1F9                       	smpsAlterNote       $F9
00090C76 E701                       	dc.b	smpsNoAttack, $01
00090C78 E1FD                       	smpsAlterNote       $FD
00090C7A E701                       	dc.b	smpsNoAttack, $01
00090C7C E103                       	smpsAlterNote       $03
00090C7E E701                       	dc.b	smpsNoAttack, $01
00090C80 E104                       	smpsAlterNote       $04
00090C82 E701                       	dc.b	smpsNoAttack, $01
00090C84 E100                       	smpsAlterNote       $00
00090C86 E701                       	dc.b	smpsNoAttack, $01
00090C88 E1FA                       	smpsAlterNote       $FA
00090C8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090C8E E1FD                       	smpsAlterNote       $FD
00090C90 E701                       	dc.b	smpsNoAttack, $01
00090C92 E103                       	smpsAlterNote       $03
00090C94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090C98 E100                       	smpsAlterNote       $00
00090C9A E701                       	dc.b	smpsNoAttack, $01
00090C9C E1FA                       	smpsAlterNote       $FA
00090C9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00090CA2 E100                       	smpsAlterNote       $00
00090CA4 EC04                       	smpsPSGAlterVol     $04
00090CA6 E701                       	dc.b	smpsNoAttack, $01
00090CA8 EC07                       	smpsPSGAlterVol     $07
00090CAA E104                       	smpsAlterNote       $04
00090CAC 8001                       	dc.b	nRst, $01
00090CAE E103                       	smpsAlterNote       $03
00090CB0 01                         	dc.b	$01
00090CB1 E1FD                       	smpsAlterNote       $FD
00090CB3 01                         	dc.b	$01
00090CB4 E1F9                       	smpsAlterNote       $F9
00090CB6 01                         	dc.b	$01
00090CB7 E1FD                       	smpsAlterNote       $FD
00090CB9 01                         	dc.b	$01
00090CBA E100                       	smpsAlterNote       $00
00090CBC 01                         	dc.b	$01
00090CBD E104                       	smpsAlterNote       $04
00090CBF 01                         	dc.b	$01
00090CC0 E1FD                       	smpsAlterNote       $FD
00090CC2 ECF5                       	smpsPSGAlterVol     $F5
00090CC4 9106                       	dc.b	nE1, $06
00090CC6 EC04                       	smpsPSGAlterVol     $04
00090CC8 E701                       	dc.b	smpsNoAttack, $01
00090CCA EC07                       	smpsPSGAlterVol     $07
00090CCC 8003                       	dc.b	nRst, $03
00090CCE ECF5                       	smpsPSGAlterVol     $F5
00090CD0 9106                       	dc.b	nE1, $06
00090CD2 EC04                       	smpsPSGAlterVol     $04
00090CD4 E701                       	dc.b	smpsNoAttack, $01
00090CD6 EC07                       	smpsPSGAlterVol     $07
00090CD8 8006                       	dc.b	nRst, $06
00090CDA E100                       	smpsAlterNote       $00
00090CDC 01                         	dc.b	$01
00090CDD E104                       	smpsAlterNote       $04
00090CDF 01                         	dc.b	$01
00090CE0 E100                       	smpsAlterNote       $00
00090CE2 01                         	dc.b	$01
00090CE3 E1FD                       	smpsAlterNote       $FD
00090CE5 01                         	dc.b	$01
00090CE6 ECF5                       	smpsPSGAlterVol     $F5
00090CE8 9206                       	dc.b	nF1, $06
00090CEA EC04                       	smpsPSGAlterVol     $04
00090CEC E701                       	dc.b	smpsNoAttack, $01
00090CEE EC07                       	smpsPSGAlterVol     $07
00090CF0 8003                       	dc.b	nRst, $03
00090CF2 ECF5                       	smpsPSGAlterVol     $F5
00090CF4 9207                       	dc.b	nF1, $07
00090CF6 EC0B                       	smpsPSGAlterVol     $0B
00090CF8 8007                       	dc.b	nRst, $07
00090CFA E103                       	smpsAlterNote       $03
00090CFC 0101                       	dc.b	$01, $01
00090CFE E1FD                       	smpsAlterNote       $FD
00090D00 01                         	dc.b	$01
00090D01 E1FA                       	smpsAlterNote       $FA
00090D03 01                         	dc.b	$01
00090D04 E1FD                       	smpsAlterNote       $FD
00090D06 ECF5                       	smpsPSGAlterVol     $F5
00090D08 9106                       	dc.b	nE1, $06
00090D0A EC0B                       	smpsPSGAlterVol     $0B
00090D0C 8004                       	dc.b	nRst, $04
00090D0E ECF5                       	smpsPSGAlterVol     $F5
00090D10 9106                       	dc.b	nE1, $06
00090D12 EC04                       	smpsPSGAlterVol     $04
00090D14 E701                       	dc.b	smpsNoAttack, $01
00090D16 EC07                       	smpsPSGAlterVol     $07
00090D18 8006                       	dc.b	nRst, $06
00090D1A E100                       	smpsAlterNote       $00
00090D1C 01                         	dc.b	$01
00090D1D E104                       	smpsAlterNote       $04
00090D1F 01                         	dc.b	$01
00090D20 E100                       	smpsAlterNote       $00
00090D22 01                         	dc.b	$01
00090D23 E1FA                       	smpsAlterNote       $FA
00090D25 01                         	dc.b	$01
00090D26 E1FD                       	smpsAlterNote       $FD
00090D28 ECF5                       	smpsPSGAlterVol     $F5
00090D2A 9206                       	dc.b	nF1, $06
00090D2C EC04                       	smpsPSGAlterVol     $04
00090D2E E701                       	dc.b	smpsNoAttack, $01
00090D30 EC07                       	smpsPSGAlterVol     $07
00090D32 8003                       	dc.b	nRst, $03
00090D34 ECF5                       	smpsPSGAlterVol     $F5
00090D36 9206                       	dc.b	nF1, $06
00090D38 EC04                       	smpsPSGAlterVol     $04
00090D3A E701                       	dc.b	smpsNoAttack, $01
00090D3C EC07                       	smpsPSGAlterVol     $07
00090D3E 8006                       	dc.b	nRst, $06
00090D40 E100                       	smpsAlterNote       $00
00090D42 01                         	dc.b	$01
00090D43 E104                       	smpsAlterNote       $04
00090D45 01                         	dc.b	$01
00090D46 E103                       	smpsAlterNote       $03
00090D48 01                         	dc.b	$01
00090D49 E1FD                       	smpsAlterNote       $FD
00090D4B 01                         	dc.b	$01
00090D4C ECF5                       	smpsPSGAlterVol     $F5
00090D4E 9107                       	dc.b	nE1, $07
00090D50 EC0B                       	smpsPSGAlterVol     $0B
00090D52 8004                       	dc.b	nRst, $04
00090D54 ECF5                       	smpsPSGAlterVol     $F5
00090D56 9106                       	dc.b	nE1, $06
00090D58 EC0B                       	smpsPSGAlterVol     $0B
00090D5A 8007                       	dc.b	nRst, $07
00090D5C E103                       	smpsAlterNote       $03
00090D5E 0101                       	dc.b	$01, $01
00090D60 E100                       	smpsAlterNote       $00
00090D62 01                         	dc.b	$01
00090D63 E1FA                       	smpsAlterNote       $FA
00090D65 01                         	dc.b	$01
00090D66 E1FD                       	smpsAlterNote       $FD
00090D68 ECF5                       	smpsPSGAlterVol     $F5
00090D6A 9206                       	dc.b	nF1, $06
00090D6C EC04                       	smpsPSGAlterVol     $04
00090D6E E701                       	dc.b	smpsNoAttack, $01
00090D70 EC07                       	smpsPSGAlterVol     $07
00090D72 8003                       	dc.b	nRst, $03
00090D74 ECF5                       	smpsPSGAlterVol     $F5
00090D76 9206                       	dc.b	nF1, $06
00090D78 EC04                       	smpsPSGAlterVol     $04
00090D7A E701                       	dc.b	smpsNoAttack, $01
00090D7C EC07                       	smpsPSGAlterVol     $07
00090D7E 8006                       	dc.b	nRst, $06
00090D80 E100                       	smpsAlterNote       $00
00090D82 01                         	dc.b	$01
00090D83 E104                       	smpsAlterNote       $04
00090D85 01                         	dc.b	$01
00090D86 E100                       	smpsAlterNote       $00
00090D88 01                         	dc.b	$01
00090D89 E1FD                       	smpsAlterNote       $FD
00090D8B 01                         	dc.b	$01
00090D8C ECF5                       	smpsPSGAlterVol     $F5
00090D8E 9106                       	dc.b	nE1, $06
00090D90 EC04                       	smpsPSGAlterVol     $04
00090D92 E701                       	dc.b	smpsNoAttack, $01
00090D94 EC07                       	smpsPSGAlterVol     $07
00090D96 8003                       	dc.b	nRst, $03
00090D98 ECF5                       	smpsPSGAlterVol     $F5
00090D9A 9107 9106                  	dc.b	nE1, $07, nE1, $06
00090D9E EC04                       	smpsPSGAlterVol     $04
00090DA0 E701                       	dc.b	smpsNoAttack, $01
00090DA2 ECFC                       	smpsPSGAlterVol     $FC
00090DA4 9103                       	dc.b	nE1, $03
00090DA6 EC04                       	smpsPSGAlterVol     $04
00090DA8 E701                       	dc.b	smpsNoAttack, $01
00090DAA ECFC                       	smpsPSGAlterVol     $FC
00090DAC 9102                       	dc.b	nE1, $02
00090DAE EC04                       	smpsPSGAlterVol     $04
00090DB0 E701                       	dc.b	smpsNoAttack, $01
00090DB2 ECFC                       	smpsPSGAlterVol     $FC
00090DB4 9103                       	dc.b	nE1, $03
00090DB6 EC0B                       	smpsPSGAlterVol     $0B
00090DB8 800A                       	dc.b	nRst, $0A
00090DBA E100                       	smpsAlterNote       $00
00090DBC 01                         	dc.b	$01
00090DBD E104                       	smpsAlterNote       $04
00090DBF 01                         	dc.b	$01
00090DC0 E100                       	smpsAlterNote       $00
00090DC2 01                         	dc.b	$01
00090DC3 E1FA                       	smpsAlterNote       $FA
00090DC5 01                         	dc.b	$01
00090DC6 E1F9                       	smpsAlterNote       $F9
00090DC8 01                         	dc.b	$01
00090DC9 E1FD                       	smpsAlterNote       $FD
00090DCB 01                         	dc.b	$01
00090DCC E103                       	smpsAlterNote       $03
00090DCE 0101                       	dc.b	$01, $01
00090DD0 E100                       	smpsAlterNote       $00
00090DD2 01                         	dc.b	$01
00090DD3 E1FA                       	smpsAlterNote       $FA
00090DD5 0101                       	dc.b	$01, $01
00090DD7 E1FD                       	smpsAlterNote       $FD
00090DD9 ECF5                       	smpsPSGAlterVol     $F5
00090DDB 9206                       	dc.b	nF1, $06
00090DDD EC04                       	smpsPSGAlterVol     $04
00090DDF E704                       	dc.b	smpsNoAttack, $04
00090DE1 ECFC                       	smpsPSGAlterVol     $FC
00090DE3 9206                       	dc.b	nF1, $06
00090DE5 EC04                       	smpsPSGAlterVol     $04
00090DE7 E701                       	dc.b	smpsNoAttack, $01
00090DE9 EC07                       	smpsPSGAlterVol     $07
00090DEB 8006                       	dc.b	nRst, $06
00090DED E100                       	smpsAlterNote       $00
00090DEF 01                         	dc.b	$01
00090DF0 E104                       	smpsAlterNote       $04
00090DF2 01                         	dc.b	$01
00090DF3 E103                       	smpsAlterNote       $03
00090DF5 01                         	dc.b	$01
00090DF6 E1FD                       	smpsAlterNote       $FD
00090DF8 01                         	dc.b	$01
00090DF9 ECF5                       	smpsPSGAlterVol     $F5
00090DFB 9407                       	dc.b	nG1, $07
00090DFD EC0B                       	smpsPSGAlterVol     $0B
00090DFF 8004                       	dc.b	nRst, $04
00090E01 ECF5                       	smpsPSGAlterVol     $F5
00090E03 9406                       	dc.b	nG1, $06
00090E05 EC0B                       	smpsPSGAlterVol     $0B
00090E07 8007                       	dc.b	nRst, $07
00090E09 E103                       	smpsAlterNote       $03
00090E0B 0101                       	dc.b	$01, $01
00090E0D E1FD                       	smpsAlterNote       $FD
00090E0F 01                         	dc.b	$01
00090E10 E1F9                       	smpsAlterNote       $F9
00090E12 01                         	dc.b	$01
00090E13 E1FD                       	smpsAlterNote       $FD
00090E15 ECF5                       	smpsPSGAlterVol     $F5
00090E17 9206                       	dc.b	nF1, $06
00090E19 EC04                       	smpsPSGAlterVol     $04
00090E1B E701                       	dc.b	smpsNoAttack, $01
00090E1D EC07                       	smpsPSGAlterVol     $07
00090E1F 8003                       	dc.b	nRst, $03
00090E21 ECF5                       	smpsPSGAlterVol     $F5
00090E23 9206                       	dc.b	nF1, $06
00090E25 EC04                       	smpsPSGAlterVol     $04
00090E27 E701                       	dc.b	smpsNoAttack, $01
00090E29 EC07                       	smpsPSGAlterVol     $07
00090E2B 8006                       	dc.b	nRst, $06
00090E2D E100                       	smpsAlterNote       $00
00090E2F 01                         	dc.b	$01
00090E30 E104                       	smpsAlterNote       $04
00090E32 01                         	dc.b	$01
00090E33 E100                       	smpsAlterNote       $00
00090E35 01                         	dc.b	$01
00090E36 E1FA                       	smpsAlterNote       $FA
00090E38 01                         	dc.b	$01
00090E39 E1FD                       	smpsAlterNote       $FD
00090E3B ECF5                       	smpsPSGAlterVol     $F5
00090E3D 9206                       	dc.b	nF1, $06
00090E3F EC04                       	smpsPSGAlterVol     $04
00090E41 E701                       	dc.b	smpsNoAttack, $01
00090E43 EC07                       	smpsPSGAlterVol     $07
00090E45 8003                       	dc.b	nRst, $03
00090E47 ECF5                       	smpsPSGAlterVol     $F5
00090E49 9107                       	dc.b	nE1, $07
00090E4B EC0B                       	smpsPSGAlterVol     $0B
00090E4D 8006                       	dc.b	nRst, $06
00090E4F E100                       	smpsAlterNote       $00
00090E51 01                         	dc.b	$01
00090E52 E103                       	smpsAlterNote       $03
00090E54 0101                       	dc.b	$01, $01
00090E56 E1FD                       	smpsAlterNote       $FD
00090E58 01                         	dc.b	$01
00090E59 ECF5                       	smpsPSGAlterVol     $F5
00090E5B 9207                       	dc.b	nF1, $07
00090E5D EC0B                       	smpsPSGAlterVol     $0B
00090E5F 8004                       	dc.b	nRst, $04
00090E61 ECF5                       	smpsPSGAlterVol     $F5
00090E63 9206                       	dc.b	nF1, $06
00090E65 EC04                       	smpsPSGAlterVol     $04
00090E67 E701                       	dc.b	smpsNoAttack, $01
00090E69 EC07                       	smpsPSGAlterVol     $07
00090E6B 8006                       	dc.b	nRst, $06
00090E6D E103                       	smpsAlterNote       $03
00090E6F 01                         	dc.b	$01
00090E70 E104                       	smpsAlterNote       $04
00090E72 01                         	dc.b	$01
00090E73 E100                       	smpsAlterNote       $00
00090E75 01                         	dc.b	$01
00090E76 E1FB                       	smpsAlterNote       $FB
00090E78 01                         	dc.b	$01
00090E79 E1FD                       	smpsAlterNote       $FD
00090E7B ECF5                       	smpsPSGAlterVol     $F5
00090E7D 9406                       	dc.b	nG1, $06
00090E7F EC04                       	smpsPSGAlterVol     $04
00090E81 E701                       	dc.b	smpsNoAttack, $01
00090E83 EC07                       	smpsPSGAlterVol     $07
00090E85 8003                       	dc.b	nRst, $03
00090E87 ECF5                       	smpsPSGAlterVol     $F5
00090E89 9406                       	dc.b	nG1, $06
00090E8B EC04                       	smpsPSGAlterVol     $04
00090E8D E701                       	dc.b	smpsNoAttack, $01
00090E8F EC07                       	smpsPSGAlterVol     $07
00090E91 8006                       	dc.b	nRst, $06
00090E93 E100                       	smpsAlterNote       $00
00090E95 01                         	dc.b	$01
00090E96 E104                       	smpsAlterNote       $04
00090E98 01                         	dc.b	$01
00090E99 E100                       	smpsAlterNote       $00
00090E9B 01                         	dc.b	$01
00090E9C E1FD                       	smpsAlterNote       $FD
00090E9E 01                         	dc.b	$01
00090E9F ECF5                       	smpsPSGAlterVol     $F5
00090EA1 9206                       	dc.b	nF1, $06
00090EA3 EC04                       	smpsPSGAlterVol     $04
00090EA5 E701                       	dc.b	smpsNoAttack, $01
00090EA7 EC07                       	smpsPSGAlterVol     $07
00090EA9 8003                       	dc.b	nRst, $03
00090EAB ECF5                       	smpsPSGAlterVol     $F5
00090EAD 9207                       	dc.b	nF1, $07
00090EAF EC0B                       	smpsPSGAlterVol     $0B
00090EB1 8007                       	dc.b	nRst, $07
00090EB3 E103                       	smpsAlterNote       $03
00090EB5 0101                       	dc.b	$01, $01
00090EB7 E1FD                       	smpsAlterNote       $FD
00090EB9 01                         	dc.b	$01
00090EBA E1FA                       	smpsAlterNote       $FA
00090EBC 01                         	dc.b	$01
00090EBD E1FD                       	smpsAlterNote       $FD
00090EBF ECF5                       	smpsPSGAlterVol     $F5
00090EC1 9206                       	dc.b	nF1, $06
00090EC3 EC0B                       	smpsPSGAlterVol     $0B
00090EC5 8004                       	dc.b	nRst, $04
00090EC7 ECF5                       	smpsPSGAlterVol     $F5
00090EC9 9206                       	dc.b	nF1, $06
00090ECB EC04                       	smpsPSGAlterVol     $04
00090ECD E701                       	dc.b	smpsNoAttack, $01
00090ECF EC07                       	smpsPSGAlterVol     $07
00090ED1 8006                       	dc.b	nRst, $06
00090ED3 E100                       	smpsAlterNote       $00
00090ED5 01                         	dc.b	$01
00090ED6 E104                       	smpsAlterNote       $04
00090ED8 01                         	dc.b	$01
00090ED9 E100                       	smpsAlterNote       $00
00090EDB 01                         	dc.b	$01
00090EDC E1FA                       	smpsAlterNote       $FA
00090EDE 01                         	dc.b	$01
00090EDF E1FD                       	smpsAlterNote       $FD
00090EE1 ECF5                       	smpsPSGAlterVol     $F5
00090EE3 9206                       	dc.b	nF1, $06
00090EE5 EC04                       	smpsPSGAlterVol     $04
00090EE7 E701                       	dc.b	smpsNoAttack, $01
00090EE9 EC07                       	smpsPSGAlterVol     $07
00090EEB 8003                       	dc.b	nRst, $03
00090EED ECF5                       	smpsPSGAlterVol     $F5
00090EEF 9207                       	dc.b	nF1, $07
00090EF1 EC0B                       	smpsPSGAlterVol     $0B
00090EF3 8006                       	dc.b	nRst, $06
00090EF5 E100                       	smpsAlterNote       $00
00090EF7 01                         	dc.b	$01
00090EF8 E103                       	smpsAlterNote       $03
00090EFA 0101                       	dc.b	$01, $01
00090EFC E1FD                       	smpsAlterNote       $FD
00090EFE 01                         	dc.b	$01
00090EFF ECF5                       	smpsPSGAlterVol     $F5
00090F01 9207                       	dc.b	nF1, $07
00090F03 EC0B                       	smpsPSGAlterVol     $0B
00090F05 8004                       	dc.b	nRst, $04
00090F07 ECF5                       	smpsPSGAlterVol     $F5
00090F09 9206                       	dc.b	nF1, $06
00090F0B EC0B                       	smpsPSGAlterVol     $0B
00090F0D 8007                       	dc.b	nRst, $07
00090F0F E103                       	smpsAlterNote       $03
00090F11 0101                       	dc.b	$01, $01
00090F13 E100                       	smpsAlterNote       $00
00090F15 01                         	dc.b	$01
00090F16 E1FA                       	smpsAlterNote       $FA
00090F18 01                         	dc.b	$01
00090F19 E1FD                       	smpsAlterNote       $FD
00090F1B ECF5                       	smpsPSGAlterVol     $F5
00090F1D 9206                       	dc.b	nF1, $06
00090F1F EC04                       	smpsPSGAlterVol     $04
00090F21 E701                       	dc.b	smpsNoAttack, $01
00090F23 EC07                       	smpsPSGAlterVol     $07
00090F25 8003                       	dc.b	nRst, $03
00090F27 ECF5                       	smpsPSGAlterVol     $F5
00090F29 9206                       	dc.b	nF1, $06
00090F2B EC04                       	smpsPSGAlterVol     $04
00090F2D E701                       	dc.b	smpsNoAttack, $01
00090F2F EC07                       	smpsPSGAlterVol     $07
00090F31 8006                       	dc.b	nRst, $06
00090F33 E100                       	smpsAlterNote       $00
00090F35 01                         	dc.b	$01
00090F36 E104                       	smpsAlterNote       $04
00090F38 01                         	dc.b	$01
00090F39 E100                       	smpsAlterNote       $00
00090F3B 01                         	dc.b	$01
00090F3C E1FD                       	smpsAlterNote       $FD
00090F3E 01                         	dc.b	$01
00090F3F ECF5                       	smpsPSGAlterVol     $F5
00090F41 9206                       	dc.b	nF1, $06
00090F43 EC04                       	smpsPSGAlterVol     $04
00090F45 E701                       	dc.b	smpsNoAttack, $01
00090F47 EC07                       	smpsPSGAlterVol     $07
00090F49 8003                       	dc.b	nRst, $03
00090F4B ECF5                       	smpsPSGAlterVol     $F5
00090F4D 9207                       	dc.b	nF1, $07
00090F4F EC0B                       	smpsPSGAlterVol     $0B
00090F51 8007                       	dc.b	nRst, $07
00090F53 E104                       	smpsAlterNote       $04
00090F55 0101                       	dc.b	$01, $01
00090F57 E1FB                       	smpsAlterNote       $FB
00090F59 01                         	dc.b	$01
00090F5A E1F6                       	smpsAlterNote       $F6
00090F5C 0101                       	dc.b	$01, $01
00090F5E E1FF                       	smpsAlterNote       $FF
00090F60 01                         	dc.b	$01
00090F61 E105                       	smpsAlterNote       $05
00090F63 01                         	dc.b	$01
00090F64 E104                       	smpsAlterNote       $04
00090F66 01                         	dc.b	$01
00090F67 E1FB                       	smpsAlterNote       $FB
00090F69 01                         	dc.b	$01
00090F6A E1F5                       	smpsAlterNote       $F5
00090F6C 01                         	dc.b	$01
00090F6D E1FC                       	smpsAlterNote       $FC
00090F6F ECF5                       	smpsPSGAlterVol     $F5
00090F71 8B0E                       	dc.b	nBb0, $0E
00090F73 E102                       	smpsAlterNote       $02
00090F75 EC0B                       	smpsPSGAlterVol     $0B
00090F77 8001                       	dc.b	nRst, $01
00090F79 E101                       	smpsAlterNote       $01
00090F7B 01                         	dc.b	$01
00090F7C E1FC                       	smpsAlterNote       $FC
00090F7E 01                         	dc.b	$01
00090F7F E1F9                       	smpsAlterNote       $F9
00090F81 0101                       	dc.b	$01, $01
00090F83 E1FF                       	smpsAlterNote       $FF
00090F85 01                         	dc.b	$01
00090F86 E102                       	smpsAlterNote       $02
00090F88 01                         	dc.b	$01
00090F89 E1FF                       	smpsAlterNote       $FF
00090F8B 01                         	dc.b	$01
00090F8C E1FC                       	smpsAlterNote       $FC
00090F8E 01                         	dc.b	$01
00090F8F E1F8                       	smpsAlterNote       $F8
00090F91 01                         	dc.b	$01
00090F92 E1FC                       	smpsAlterNote       $FC
00090F94 01                         	dc.b	$01
00090F95 E101                       	smpsAlterNote       $01
00090F97 01                         	dc.b	$01
00090F98 E102                       	smpsAlterNote       $02
00090F9A 01                         	dc.b	$01
00090F9B E1FF                       	smpsAlterNote       $FF
00090F9D 01                         	dc.b	$01
00090F9E E1FB                       	smpsAlterNote       $FB
00090FA0 ECF5                       	smpsPSGAlterVol     $F5
00090FA2 8D0D                       	dc.b	nC1, $0D
00090FA4 E101                       	smpsAlterNote       $01
00090FA6 EC0B                       	smpsPSGAlterVol     $0B
00090FA8 8001                       	dc.b	nRst, $01
00090FAA E102                       	smpsAlterNote       $02
00090FAC 01                         	dc.b	$01
00090FAD E1FF                       	smpsAlterNote       $FF
00090FAF 01                         	dc.b	$01
00090FB0 E1F9                       	smpsAlterNote       $F9
00090FB2 0101                       	dc.b	$01, $01
00090FB4 E1FC                       	smpsAlterNote       $FC
00090FB6 01                         	dc.b	$01
00090FB7 E101                       	smpsAlterNote       $01
00090FB9 0101                       	dc.b	$01, $01
00090FBB E1FC                       	smpsAlterNote       $FC
00090FBD 01                         	dc.b	$01
00090FBE E1F9                       	smpsAlterNote       $F9
00090FC0 0101                       	dc.b	$01, $01
00090FC2 E1FF                       	smpsAlterNote       $FF
00090FC4 01                         	dc.b	$01
00090FC5 E102                       	smpsAlterNote       $02
00090FC7 01                         	dc.b	$01
00090FC8 E101                       	smpsAlterNote       $01
00090FCA 01                         	dc.b	$01
00090FCB E1FC                       	smpsAlterNote       $FC
00090FCD ECF5                       	smpsPSGAlterVol     $F5
00090FCF 8F0D                       	dc.b	nD1, $0D
00090FD1 E1FF                       	smpsAlterNote       $FF
00090FD3 EC04                       	smpsPSGAlterVol     $04
00090FD5 E701                       	dc.b	smpsNoAttack, $01
00090FD7 EC07                       	smpsPSGAlterVol     $07
00090FD9 E103                       	smpsAlterNote       $03
00090FDB 8001                       	dc.b	nRst, $01
00090FDD E102                       	smpsAlterNote       $02
00090FDF 01                         	dc.b	$01
00090FE0 E1FD                       	smpsAlterNote       $FD
00090FE2 01                         	dc.b	$01
00090FE3 E1F9                       	smpsAlterNote       $F9
00090FE5 01                         	dc.b	$01
00090FE6 E1FD                       	smpsAlterNote       $FD
00090FE8 01                         	dc.b	$01
00090FE9 E100                       	smpsAlterNote       $00
00090FEB 01                         	dc.b	$01
00090FEC E103                       	smpsAlterNote       $03
00090FEE 01                         	dc.b	$01
00090FEF E100                       	smpsAlterNote       $00
00090FF1 01                         	dc.b	$01
00090FF2 E1FA                       	smpsAlterNote       $FA
00090FF4 01                         	dc.b	$01
00090FF5 E1F9                       	smpsAlterNote       $F9
00090FF7 01                         	dc.b	$01
00090FF8 E1FD                       	smpsAlterNote       $FD
00090FFA 01                         	dc.b	$01
00090FFB E102                       	smpsAlterNote       $02
00090FFD 0101                       	dc.b	$01, $01
00090FFF E100                       	smpsAlterNote       $00
00091001 01                         	dc.b	$01
00091002 E1FD                       	smpsAlterNote       $FD
00091004 ECF5                       	smpsPSGAlterVol     $F5
00091006 910D                       	dc.b	nE1, $0D
00091008 E103                       	smpsAlterNote       $03
0009100A EC0B                       	smpsPSGAlterVol     $0B
0009100C 8001 01                    	dc.b	nRst, $01, $01
0009100F E100                       	smpsAlterNote       $00
00091011 01                         	dc.b	$01
00091012 E1FA                       	smpsAlterNote       $FA
00091014 0101                       	dc.b	$01, $01
00091016 E100                       	smpsAlterNote       $00
00091018 01                         	dc.b	$01
00091019 E103                       	smpsAlterNote       $03
0009101B 01                         	dc.b	$01
0009101C E1FD                       	smpsAlterNote       $FD
0009101E ECF5                       	smpsPSGAlterVol     $F5
00091020 9206                       	dc.b	nF1, $06
00091022 EC04                       	smpsPSGAlterVol     $04
00091024 E701                       	dc.b	smpsNoAttack, $01
00091026 EC07                       	smpsPSGAlterVol     $07
00091028 8003                       	dc.b	nRst, $03
0009102A ECF5                       	smpsPSGAlterVol     $F5
0009102C 9207                       	dc.b	nF1, $07
0009102E EC0B                       	smpsPSGAlterVol     $0B
00091030 8006                       	dc.b	nRst, $06
00091032 E100                       	smpsAlterNote       $00
00091034 01                         	dc.b	$01
00091035 E103                       	smpsAlterNote       $03
00091037 0101                       	dc.b	$01, $01
00091039 E1FD                       	smpsAlterNote       $FD
0009103B 01                         	dc.b	$01
0009103C ECF5                       	smpsPSGAlterVol     $F5
0009103E 9407                       	dc.b	nG1, $07
00091040 EC0B                       	smpsPSGAlterVol     $0B
00091042 8004                       	dc.b	nRst, $04
00091044 ECF5                       	smpsPSGAlterVol     $F5
00091046 9406                       	dc.b	nG1, $06
00091048 EC04                       	smpsPSGAlterVol     $04
0009104A E701                       	dc.b	smpsNoAttack, $01
0009104C EC07                       	smpsPSGAlterVol     $07
0009104E 8006                       	dc.b	nRst, $06
00091050 E103                       	smpsAlterNote       $03
00091052 01                         	dc.b	$01
00091053 E104                       	smpsAlterNote       $04
00091055 01                         	dc.b	$01
00091056 E100                       	smpsAlterNote       $00
00091058 01                         	dc.b	$01
00091059 E1F9                       	smpsAlterNote       $F9
0009105B 01                         	dc.b	$01
0009105C E1FD                       	smpsAlterNote       $FD
0009105E ECF5                       	smpsPSGAlterVol     $F5
00091060 9206                       	dc.b	nF1, $06
00091062 EC04                       	smpsPSGAlterVol     $04
00091064 E701                       	dc.b	smpsNoAttack, $01
00091066 EC07                       	smpsPSGAlterVol     $07
00091068 8003                       	dc.b	nRst, $03
0009106A ECF5                       	smpsPSGAlterVol     $F5
0009106C 9206                       	dc.b	nF1, $06
0009106E EC04                       	smpsPSGAlterVol     $04
00091070 E701                       	dc.b	smpsNoAttack, $01
00091072 EC07                       	smpsPSGAlterVol     $07
00091074 8006                       	dc.b	nRst, $06
00091076 E100                       	smpsAlterNote       $00
00091078 01                         	dc.b	$01
00091079 E104                       	smpsAlterNote       $04
0009107B 01                         	dc.b	$01
0009107C E103                       	smpsAlterNote       $03
0009107E 01                         	dc.b	$01
0009107F E1FD                       	smpsAlterNote       $FD
00091081 01                         	dc.b	$01
00091082 ECF5                       	smpsPSGAlterVol     $F5
00091084 9407                       	dc.b	nG1, $07
00091086 EC0B                       	smpsPSGAlterVol     $0B
00091088 8004                       	dc.b	nRst, $04
0009108A ECF5                       	smpsPSGAlterVol     $F5
0009108C 9406                       	dc.b	nG1, $06
0009108E EC0B                       	smpsPSGAlterVol     $0B
00091090 8007                       	dc.b	nRst, $07
00091092 E103                       	smpsAlterNote       $03
00091094 0101                       	dc.b	$01, $01
00091096 E100                       	smpsAlterNote       $00
00091098 01                         	dc.b	$01
00091099 E1F9                       	smpsAlterNote       $F9
0009109B 01                         	dc.b	$01
0009109C E1FD                       	smpsAlterNote       $FD
0009109E ECF5                       	smpsPSGAlterVol     $F5
000910A0 9206                       	dc.b	nF1, $06
000910A2 EC04                       	smpsPSGAlterVol     $04
000910A4 E701                       	dc.b	smpsNoAttack, $01
000910A6 EC07                       	smpsPSGAlterVol     $07
000910A8 8003                       	dc.b	nRst, $03
000910AA ECF5                       	smpsPSGAlterVol     $F5
000910AC 9206                       	dc.b	nF1, $06
000910AE EC04                       	smpsPSGAlterVol     $04
000910B0 E701                       	dc.b	smpsNoAttack, $01
000910B2 EC07                       	smpsPSGAlterVol     $07
000910B4 8006                       	dc.b	nRst, $06
000910B6 E100                       	smpsAlterNote       $00
000910B8 01                         	dc.b	$01
000910B9 E104                       	smpsAlterNote       $04
000910BB 01                         	dc.b	$01
000910BC E100                       	smpsAlterNote       $00
000910BE 01                         	dc.b	$01
000910BF E1FB                       	smpsAlterNote       $FB
000910C1 01                         	dc.b	$01
000910C2 E1FD                       	smpsAlterNote       $FD
000910C4 ECF5                       	smpsPSGAlterVol     $F5
000910C6 9406                       	dc.b	nG1, $06
000910C8 EC04                       	smpsPSGAlterVol     $04
000910CA E701                       	dc.b	smpsNoAttack, $01
000910CC EC07                       	smpsPSGAlterVol     $07
000910CE 8003                       	dc.b	nRst, $03
000910D0 ECF5                       	smpsPSGAlterVol     $F5
000910D2 9407                       	dc.b	nG1, $07
000910D4 EC0B                       	smpsPSGAlterVol     $0B
000910D6 8006                       	dc.b	nRst, $06
000910D8 E100                       	smpsAlterNote       $00
000910DA 01                         	dc.b	$01
000910DB E103                       	smpsAlterNote       $03
000910DD 0101                       	dc.b	$01, $01
000910DF E1FD                       	smpsAlterNote       $FD
000910E1 01                         	dc.b	$01
000910E2 ECF5                       	smpsPSGAlterVol     $F5
000910E4 9207                       	dc.b	nF1, $07
000910E6 EC0B                       	smpsPSGAlterVol     $0B
000910E8 8004                       	dc.b	nRst, $04
000910EA ECF5                       	smpsPSGAlterVol     $F5
000910EC 9206                       	dc.b	nF1, $06
000910EE EC04                       	smpsPSGAlterVol     $04
000910F0 E701                       	dc.b	smpsNoAttack, $01
000910F2 ECFC                       	smpsPSGAlterVol     $FC
000910F4 E1FC                       	smpsAlterNote       $FC
000910F6 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
000910FA EC04                       	smpsPSGAlterVol     $04
000910FC E701                       	dc.b	smpsNoAttack, $01
000910FE ECFC                       	smpsPSGAlterVol     $FC
00091100 9003                       	dc.b	nEb1, $03
00091102 E1FD                       	smpsAlterNote       $FD
00091104 9403                       	dc.b	nG1, $03
00091106 EC04                       	smpsPSGAlterVol     $04
00091108 E701                       	dc.b	smpsNoAttack, $01
0009110A E1FE                       	smpsAlterNote       $FE
0009110C ECFC                       	smpsPSGAlterVol     $FC
0009110E 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00091112 EC04                       	smpsPSGAlterVol     $04
00091114 E701                       	dc.b	smpsNoAttack, $01
00091116 EC07                       	smpsPSGAlterVol     $07
00091118 8009                       	dc.b	nRst, $09
0009111A E100                       	smpsAlterNote       $00
0009111C 01                         	dc.b	$01
0009111D F6F5 19                    	smpsJump            music84_Jump07
00091120                            
00091120                            ; PSG2 Data
00091120                            music84_PSG2:
00091120 E1FC                       	smpsAlterNote       $FC
00091122 EC04                       	smpsPSGAlterVol     $04
00091124 8F03                       	dc.b	nD1, $03
00091126 E1FD                       	smpsAlterNote       $FD
00091128 9203                       	dc.b	nF1, $03
0009112A EC04                       	smpsPSGAlterVol     $04
0009112C E701                       	dc.b	smpsNoAttack, $01
0009112E E1FE                       	smpsAlterNote       $FE
00091130 ECFC                       	smpsPSGAlterVol     $FC
00091132 9603                       	dc.b	nA1, $03
00091134 E1FD                       	smpsAlterNote       $FD
00091136 9103                       	dc.b	nE1, $03
00091138 EC04                       	smpsPSGAlterVol     $04
0009113A E701                       	dc.b	smpsNoAttack, $01
0009113C ECFC                       	smpsPSGAlterVol     $FC
0009113E 9403                       	dc.b	nG1, $03
00091140 E1FE                       	smpsAlterNote       $FE
00091142 9703                       	dc.b	nBb1, $03
00091144 EC04                       	smpsPSGAlterVol     $04
00091146 E701                       	dc.b	smpsNoAttack, $01
00091148 E1FF                       	smpsAlterNote       $FF
0009114A ECFC                       	smpsPSGAlterVol     $FC
0009114C 9B02                       	dc.b	nD2, $02
0009114E EC04                       	smpsPSGAlterVol     $04
00091150 E701                       	dc.b	smpsNoAttack, $01
00091152 ECFC                       	smpsPSGAlterVol     $FC
00091154 E1FE                       	smpsAlterNote       $FE
00091156 9A03                       	dc.b	nCs2, $03
00091158 EC0B                       	smpsPSGAlterVol     $0B
0009115A 800A                       	dc.b	nRst, $0A
0009115C E102                       	smpsAlterNote       $02
0009115E 01                         	dc.b	$01
0009115F E10A                       	smpsAlterNote       $0A
00091161 01                         	dc.b	$01
00091162 E102                       	smpsAlterNote       $02
00091164 01                         	dc.b	$01
00091165 E1FC                       	smpsAlterNote       $FC
00091167 01                         	dc.b	$01
00091168 E10A                       	smpsAlterNote       $0A
0009116A 01                         	dc.b	$01
0009116B E1FC                       	smpsAlterNote       $FC
0009116D 01                         	dc.b	$01
0009116E E108                       	smpsAlterNote       $08
00091170 01                         	dc.b	$01
00091171 E10A                       	smpsAlterNote       $0A
00091173 01                         	dc.b	$01
00091174 E102                       	smpsAlterNote       $02
00091176 01                         	dc.b	$01
00091177 E1F7                       	smpsAlterNote       $F7
00091179 0101                       	dc.b	$01, $01
0009117B E102                       	smpsAlterNote       $02
0009117D 01                         	dc.b	$01
0009117E E108                       	smpsAlterNote       $08
00091180 0101                       	dc.b	$01, $01
00091182 E1FC                       	smpsAlterNote       $FC
00091184 01                         	dc.b	$01
00091185 E10A                       	smpsAlterNote       $0A
00091187 01                         	dc.b	$01
00091188 E1F7                       	smpsAlterNote       $F7
0009118A 01                         	dc.b	$01
0009118B E102                       	smpsAlterNote       $02
0009118D 01                         	dc.b	$01
0009118E E10A                       	smpsAlterNote       $0A
00091190 01                         	dc.b	$01
00091191 E102                       	smpsAlterNote       $02
00091193 01                         	dc.b	$01
00091194 E1FC                       	smpsAlterNote       $FC
00091196 01                         	dc.b	$01
00091197                            
00091197                            music84_Jump06:
00091197 E10A                       	smpsAlterNote       $0A
00091199 8001                       	dc.b	nRst, $01
0009119B E1FC                       	smpsAlterNote       $FC
0009119D 01                         	dc.b	$01
0009119E E108                       	smpsAlterNote       $08
000911A0 01                         	dc.b	$01
000911A1 E10A                       	smpsAlterNote       $0A
000911A3 01                         	dc.b	$01
000911A4 E1FC                       	smpsAlterNote       $FC
000911A6 ECF5                       	smpsPSGAlterVol     $F5
000911A8 8F06                       	dc.b	nD1, $06
000911AA EC04                       	smpsPSGAlterVol     $04
000911AC E701                       	dc.b	smpsNoAttack, $01
000911AE EC07                       	smpsPSGAlterVol     $07
000911B0 8003                       	dc.b	nRst, $03
000911B2 ECF5                       	smpsPSGAlterVol     $F5
000911B4 8F06                       	dc.b	nD1, $06
000911B6 EC04                       	smpsPSGAlterVol     $04
000911B8 E701                       	dc.b	smpsNoAttack, $01
000911BA EC07                       	smpsPSGAlterVol     $07
000911BC 8006                       	dc.b	nRst, $06
000911BE E1FF                       	smpsAlterNote       $FF
000911C0 01                         	dc.b	$01
000911C1 E102                       	smpsAlterNote       $02
000911C3 01                         	dc.b	$01
000911C4 E1FF                       	smpsAlterNote       $FF
000911C6 01                         	dc.b	$01
000911C7 E1F9                       	smpsAlterNote       $F9
000911C9 01                         	dc.b	$01
000911CA E1FC                       	smpsAlterNote       $FC
000911CC ECF5                       	smpsPSGAlterVol     $F5
000911CE 9006                       	dc.b	nEb1, $06
000911D0 EC04                       	smpsPSGAlterVol     $04
000911D2 E701                       	dc.b	smpsNoAttack, $01
000911D4 EC07                       	smpsPSGAlterVol     $07
000911D6 8003                       	dc.b	nRst, $03
000911D8 ECF5                       	smpsPSGAlterVol     $F5
000911DA 9007                       	dc.b	nEb1, $07
000911DC EC0B                       	smpsPSGAlterVol     $0B
000911DE 8006                       	dc.b	nRst, $06
000911E0 E1FF                       	smpsAlterNote       $FF
000911E2 01                         	dc.b	$01
000911E3 E103                       	smpsAlterNote       $03
000911E5 0101                       	dc.b	$01, $01
000911E7 E1FC                       	smpsAlterNote       $FC
000911E9 01                         	dc.b	$01
000911EA ECF5                       	smpsPSGAlterVol     $F5
000911EC 8F07                       	dc.b	nD1, $07
000911EE EC0B                       	smpsPSGAlterVol     $0B
000911F0 8004                       	dc.b	nRst, $04
000911F2 ECF5                       	smpsPSGAlterVol     $F5
000911F4 8F06                       	dc.b	nD1, $06
000911F6 EC04                       	smpsPSGAlterVol     $04
000911F8 E701                       	dc.b	smpsNoAttack, $01
000911FA EC07                       	smpsPSGAlterVol     $07
000911FC 8006                       	dc.b	nRst, $06
000911FE E102                       	smpsAlterNote       $02
00091200 01                         	dc.b	$01
00091201 E103                       	smpsAlterNote       $03
00091203 01                         	dc.b	$01
00091204 E1FF                       	smpsAlterNote       $FF
00091206 01                         	dc.b	$01
00091207 E1F9                       	smpsAlterNote       $F9
00091209 01                         	dc.b	$01
0009120A E1FC                       	smpsAlterNote       $FC
0009120C ECF5                       	smpsPSGAlterVol     $F5
0009120E 8F06                       	dc.b	nD1, $06
00091210 EC04                       	smpsPSGAlterVol     $04
00091212 E701                       	dc.b	smpsNoAttack, $01
00091214 EC07                       	smpsPSGAlterVol     $07
00091216 8003                       	dc.b	nRst, $03
00091218 ECF5                       	smpsPSGAlterVol     $F5
0009121A 8F06                       	dc.b	nD1, $06
0009121C EC04                       	smpsPSGAlterVol     $04
0009121E E701                       	dc.b	smpsNoAttack, $01
00091220 EC07                       	smpsPSGAlterVol     $07
00091222 8006                       	dc.b	nRst, $06
00091224 E1FF                       	smpsAlterNote       $FF
00091226 01                         	dc.b	$01
00091227 E103                       	smpsAlterNote       $03
00091229 01                         	dc.b	$01
0009122A E1FF                       	smpsAlterNote       $FF
0009122C 01                         	dc.b	$01
0009122D E1FC                       	smpsAlterNote       $FC
0009122F 01                         	dc.b	$01
00091230 ECF5                       	smpsPSGAlterVol     $F5
00091232 8F06                       	dc.b	nD1, $06
00091234 EC04                       	smpsPSGAlterVol     $04
00091236 E701                       	dc.b	smpsNoAttack, $01
00091238 EC07                       	smpsPSGAlterVol     $07
0009123A 8003                       	dc.b	nRst, $03
0009123C ECF5                       	smpsPSGAlterVol     $F5
0009123E 8F07                       	dc.b	nD1, $07
00091240 EC0B                       	smpsPSGAlterVol     $0B
00091242 8007                       	dc.b	nRst, $07
00091244 E101                       	smpsAlterNote       $01
00091246 0101                       	dc.b	$01, $01
00091248 E1FC                       	smpsAlterNote       $FC
0009124A 01                         	dc.b	$01
0009124B E1F9                       	smpsAlterNote       $F9
0009124D 01                         	dc.b	$01
0009124E E1FC                       	smpsAlterNote       $FC
00091250 ECF5                       	smpsPSGAlterVol     $F5
00091252 9006                       	dc.b	nEb1, $06
00091254 EC0B                       	smpsPSGAlterVol     $0B
00091256 8004                       	dc.b	nRst, $04
00091258 ECF5                       	smpsPSGAlterVol     $F5
0009125A 9006                       	dc.b	nEb1, $06
0009125C EC04                       	smpsPSGAlterVol     $04
0009125E E701                       	dc.b	smpsNoAttack, $01
00091260 EC07                       	smpsPSGAlterVol     $07
00091262 8006                       	dc.b	nRst, $06
00091264 E100                       	smpsAlterNote       $00
00091266 01                         	dc.b	$01
00091267 E102                       	smpsAlterNote       $02
00091269 01                         	dc.b	$01
0009126A E100                       	smpsAlterNote       $00
0009126C 01                         	dc.b	$01
0009126D E1FD                       	smpsAlterNote       $FD
0009126F 01                         	dc.b	$01
00091270 E1FF                       	smpsAlterNote       $FF
00091272 ECF5                       	smpsPSGAlterVol     $F5
00091274 9B06                       	dc.b	nD2, $06
00091276 EC04                       	smpsPSGAlterVol     $04
00091278 E701                       	dc.b	smpsNoAttack, $01
0009127A EC07                       	smpsPSGAlterVol     $07
0009127C 8003                       	dc.b	nRst, $03
0009127E ECF5                       	smpsPSGAlterVol     $F5
00091280 9B07                       	dc.b	nD2, $07
00091282 EC0B                       	smpsPSGAlterVol     $0B
00091284 8006                       	dc.b	nRst, $06
00091286 E102                       	smpsAlterNote       $02
00091288 01                         	dc.b	$01
00091289 E106                       	smpsAlterNote       $06
0009128B 01                         	dc.b	$01
0009128C E105                       	smpsAlterNote       $05
0009128E 01                         	dc.b	$01
0009128F E1FF                       	smpsAlterNote       $FF
00091291 01                         	dc.b	$01
00091292 ECF5                       	smpsPSGAlterVol     $F5
00091294 9B07                       	dc.b	nD2, $07
00091296 EC0B                       	smpsPSGAlterVol     $0B
00091298 8004                       	dc.b	nRst, $04
0009129A ECF5                       	smpsPSGAlterVol     $F5
0009129C 9B06                       	dc.b	nD2, $06
0009129E EC0B                       	smpsPSGAlterVol     $0B
000912A0 8007                       	dc.b	nRst, $07
000912A2 E105                       	smpsAlterNote       $05
000912A4 0101                       	dc.b	$01, $01
000912A6 E102                       	smpsAlterNote       $02
000912A8 01                         	dc.b	$01
000912A9 E1FC                       	smpsAlterNote       $FC
000912AB 01                         	dc.b	$01
000912AC E1FF                       	smpsAlterNote       $FF
000912AE ECF5                       	smpsPSGAlterVol     $F5
000912B0 9B06                       	dc.b	nD2, $06
000912B2 EC04                       	smpsPSGAlterVol     $04
000912B4 E701                       	dc.b	smpsNoAttack, $01
000912B6 EC07                       	smpsPSGAlterVol     $07
000912B8 8003                       	dc.b	nRst, $03
000912BA ECF5                       	smpsPSGAlterVol     $F5
000912BC 9B06                       	dc.b	nD2, $06
000912BE EC04                       	smpsPSGAlterVol     $04
000912C0 E701                       	dc.b	smpsNoAttack, $01
000912C2 EC07                       	smpsPSGAlterVol     $07
000912C4 8006                       	dc.b	nRst, $06
000912C6 E102                       	smpsAlterNote       $02
000912C8 01                         	dc.b	$01
000912C9 E106                       	smpsAlterNote       $06
000912CB 01                         	dc.b	$01
000912CC E102                       	smpsAlterNote       $02
000912CE 01                         	dc.b	$01
000912CF E1FF                       	smpsAlterNote       $FF
000912D1 01                         	dc.b	$01
000912D2 ECF5                       	smpsPSGAlterVol     $F5
000912D4 9B06                       	dc.b	nD2, $06
000912D6 EC04                       	smpsPSGAlterVol     $04
000912D8 E701                       	dc.b	smpsNoAttack, $01
000912DA EC07                       	smpsPSGAlterVol     $07
000912DC 8003                       	dc.b	nRst, $03
000912DE ECF5                       	smpsPSGAlterVol     $F5
000912E0 9B07                       	dc.b	nD2, $07
000912E2 EC0B                       	smpsPSGAlterVol     $0B
000912E4 8007                       	dc.b	nRst, $07
000912E6 E105                       	smpsAlterNote       $05
000912E8 0101                       	dc.b	$01, $01
000912EA E1FF                       	smpsAlterNote       $FF
000912EC 01                         	dc.b	$01
000912ED E1FC                       	smpsAlterNote       $FC
000912EF 01                         	dc.b	$01
000912F0 E1FF                       	smpsAlterNote       $FF
000912F2 ECF5                       	smpsPSGAlterVol     $F5
000912F4 9B06                       	dc.b	nD2, $06
000912F6 EC0B                       	smpsPSGAlterVol     $0B
000912F8 8004                       	dc.b	nRst, $04
000912FA ECF5                       	smpsPSGAlterVol     $F5
000912FC 9B06                       	dc.b	nD2, $06
000912FE EC04                       	smpsPSGAlterVol     $04
00091300 E701                       	dc.b	smpsNoAttack, $01
00091302 EC07                       	smpsPSGAlterVol     $07
00091304 8006                       	dc.b	nRst, $06
00091306 E105                       	smpsAlterNote       $05
00091308 01                         	dc.b	$01
00091309 E106                       	smpsAlterNote       $06
0009130B 01                         	dc.b	$01
0009130C E102                       	smpsAlterNote       $02
0009130E 01                         	dc.b	$01
0009130F E1FC                       	smpsAlterNote       $FC
00091311 01                         	dc.b	$01
00091312 E1FF                       	smpsAlterNote       $FF
00091314 ECF5                       	smpsPSGAlterVol     $F5
00091316 9B06                       	dc.b	nD2, $06
00091318 EC04                       	smpsPSGAlterVol     $04
0009131A E701                       	dc.b	smpsNoAttack, $01
0009131C EC07                       	smpsPSGAlterVol     $07
0009131E 8003                       	dc.b	nRst, $03
00091320 ECF5                       	smpsPSGAlterVol     $F5
00091322 9B06                       	dc.b	nD2, $06
00091324 EC04                       	smpsPSGAlterVol     $04
00091326 E701                       	dc.b	smpsNoAttack, $01
00091328 EC07                       	smpsPSGAlterVol     $07
0009132A 8006                       	dc.b	nRst, $06
0009132C E102                       	smpsAlterNote       $02
0009132E 01                         	dc.b	$01
0009132F E106                       	smpsAlterNote       $06
00091331 01                         	dc.b	$01
00091332 E105                       	smpsAlterNote       $05
00091334 01                         	dc.b	$01
00091335 E1FF                       	smpsAlterNote       $FF
00091337 01                         	dc.b	$01
00091338 ECF5                       	smpsPSGAlterVol     $F5
0009133A 9B07                       	dc.b	nD2, $07
0009133C EC0B                       	smpsPSGAlterVol     $0B
0009133E 8004                       	dc.b	nRst, $04
00091340 ECF5                       	smpsPSGAlterVol     $F5
00091342 9B06                       	dc.b	nD2, $06
00091344 EC0B                       	smpsPSGAlterVol     $0B
00091346 8007                       	dc.b	nRst, $07
00091348 E105                       	smpsAlterNote       $05
0009134A 0101                       	dc.b	$01, $01
0009134C E102                       	smpsAlterNote       $02
0009134E 01                         	dc.b	$01
0009134F E1FC                       	smpsAlterNote       $FC
00091351 01                         	dc.b	$01
00091352 E1FF                       	smpsAlterNote       $FF
00091354 ECF5                       	smpsPSGAlterVol     $F5
00091356 9B06                       	dc.b	nD2, $06
00091358 EC04                       	smpsPSGAlterVol     $04
0009135A E701                       	dc.b	smpsNoAttack, $01
0009135C EC07                       	smpsPSGAlterVol     $07
0009135E 8003                       	dc.b	nRst, $03
00091360 ECF5                       	smpsPSGAlterVol     $F5
00091362 9B06                       	dc.b	nD2, $06
00091364 EC04                       	smpsPSGAlterVol     $04
00091366 E701                       	dc.b	smpsNoAttack, $01
00091368 EC07                       	smpsPSGAlterVol     $07
0009136A 8006                       	dc.b	nRst, $06
0009136C E102                       	smpsAlterNote       $02
0009136E 01                         	dc.b	$01
0009136F E106                       	smpsAlterNote       $06
00091371 01                         	dc.b	$01
00091372 E102                       	smpsAlterNote       $02
00091374 01                         	dc.b	$01
00091375 E1FF                       	smpsAlterNote       $FF
00091377 01                         	dc.b	$01
00091378 ECF5                       	smpsPSGAlterVol     $F5
0009137A 9B06                       	dc.b	nD2, $06
0009137C EC04                       	smpsPSGAlterVol     $04
0009137E E701                       	dc.b	smpsNoAttack, $01
00091380 EC07                       	smpsPSGAlterVol     $07
00091382 8003                       	dc.b	nRst, $03
00091384 ECF5                       	smpsPSGAlterVol     $F5
00091386 9B07                       	dc.b	nD2, $07
00091388 E1FE                       	smpsAlterNote       $FE
0009138A 9706                       	dc.b	nBb1, $06
0009138C EC04                       	smpsPSGAlterVol     $04
0009138E E701                       	dc.b	smpsNoAttack, $01
00091390 ECFC                       	smpsPSGAlterVol     $FC
00091392 9703                       	dc.b	nBb1, $03
00091394 EC04                       	smpsPSGAlterVol     $04
00091396 E701                       	dc.b	smpsNoAttack, $01
00091398 ECFC                       	smpsPSGAlterVol     $FC
0009139A 9702                       	dc.b	nBb1, $02
0009139C EC04                       	smpsPSGAlterVol     $04
0009139E E701                       	dc.b	smpsNoAttack, $01
000913A0 ECFC                       	smpsPSGAlterVol     $FC
000913A2 9606                       	dc.b	nA1, $06
000913A4 EC04                       	smpsPSGAlterVol     $04
000913A6 E701                       	dc.b	smpsNoAttack, $01
000913A8 EC07                       	smpsPSGAlterVol     $07
000913AA 8006                       	dc.b	nRst, $06
000913AC E101                       	smpsAlterNote       $01
000913AE 01                         	dc.b	$01
000913AF E107                       	smpsAlterNote       $07
000913B1 01                         	dc.b	$01
000913B2 E101                       	smpsAlterNote       $01
000913B4 01                         	dc.b	$01
000913B5 E1F8                       	smpsAlterNote       $F8
000913B7 01                         	dc.b	$01
000913B8 E1F7                       	smpsAlterNote       $F7
000913BA 01                         	dc.b	$01
000913BB E1FC                       	smpsAlterNote       $FC
000913BD 01                         	dc.b	$01
000913BE E106                       	smpsAlterNote       $06
000913C0 01                         	dc.b	$01
000913C1 E107                       	smpsAlterNote       $07
000913C3 01                         	dc.b	$01
000913C4 E101                       	smpsAlterNote       $01
000913C6 01                         	dc.b	$01
000913C7 E1F8                       	smpsAlterNote       $F8
000913C9 0101                       	dc.b	$01, $01
000913CB E1FC                       	smpsAlterNote       $FC
000913CD ECF5                       	smpsPSGAlterVol     $F5
000913CF 8F06                       	dc.b	nD1, $06
000913D1 EC04                       	smpsPSGAlterVol     $04
000913D3 E701                       	dc.b	smpsNoAttack, $01
000913D5 EC07                       	smpsPSGAlterVol     $07
000913D7 8003                       	dc.b	nRst, $03
000913D9 ECF5                       	smpsPSGAlterVol     $F5
000913DB 8F06                       	dc.b	nD1, $06
000913DD EC04                       	smpsPSGAlterVol     $04
000913DF E701                       	dc.b	smpsNoAttack, $01
000913E1 EC07                       	smpsPSGAlterVol     $07
000913E3 8006                       	dc.b	nRst, $06
000913E5 E1FF                       	smpsAlterNote       $FF
000913E7 01                         	dc.b	$01
000913E8 E102                       	smpsAlterNote       $02
000913EA 01                         	dc.b	$01
000913EB E101                       	smpsAlterNote       $01
000913ED 01                         	dc.b	$01
000913EE E1FC                       	smpsAlterNote       $FC
000913F0 01                         	dc.b	$01
000913F1 ECF5                       	smpsPSGAlterVol     $F5
000913F3 9007                       	dc.b	nEb1, $07
000913F5 EC0B                       	smpsPSGAlterVol     $0B
000913F7 8004                       	dc.b	nRst, $04
000913F9 ECF5                       	smpsPSGAlterVol     $F5
000913FB 9006                       	dc.b	nEb1, $06
000913FD EC0B                       	smpsPSGAlterVol     $0B
000913FF 8007                       	dc.b	nRst, $07
00091401 E103                       	smpsAlterNote       $03
00091403 0101                       	dc.b	$01, $01
00091405 E1FC                       	smpsAlterNote       $FC
00091407 01                         	dc.b	$01
00091408 E1F9                       	smpsAlterNote       $F9
0009140A 01                         	dc.b	$01
0009140B E1FC                       	smpsAlterNote       $FC
0009140D ECF5                       	smpsPSGAlterVol     $F5
0009140F 8F06                       	dc.b	nD1, $06
00091411 EC04                       	smpsPSGAlterVol     $04
00091413 E701                       	dc.b	smpsNoAttack, $01
00091415 EC07                       	smpsPSGAlterVol     $07
00091417 8003                       	dc.b	nRst, $03
00091419 ECF5                       	smpsPSGAlterVol     $F5
0009141B 8F06                       	dc.b	nD1, $06
0009141D EC04                       	smpsPSGAlterVol     $04
0009141F E701                       	dc.b	smpsNoAttack, $01
00091421 EC07                       	smpsPSGAlterVol     $07
00091423 8006                       	dc.b	nRst, $06
00091425 E1FF                       	smpsAlterNote       $FF
00091427 01                         	dc.b	$01
00091428 E103                       	smpsAlterNote       $03
0009142A 01                         	dc.b	$01
0009142B E1FF                       	smpsAlterNote       $FF
0009142D 01                         	dc.b	$01
0009142E E1F9                       	smpsAlterNote       $F9
00091430 01                         	dc.b	$01
00091431 E1FC                       	smpsAlterNote       $FC
00091433 ECF5                       	smpsPSGAlterVol     $F5
00091435 8F06                       	dc.b	nD1, $06
00091437 EC04                       	smpsPSGAlterVol     $04
00091439 E701                       	dc.b	smpsNoAttack, $01
0009143B EC07                       	smpsPSGAlterVol     $07
0009143D 8003                       	dc.b	nRst, $03
0009143F ECF5                       	smpsPSGAlterVol     $F5
00091441 8F07                       	dc.b	nD1, $07
00091443 EC0B                       	smpsPSGAlterVol     $0B
00091445 8006                       	dc.b	nRst, $06
00091447 E1FF                       	smpsAlterNote       $FF
00091449 01                         	dc.b	$01
0009144A E102                       	smpsAlterNote       $02
0009144C 0101                       	dc.b	$01, $01
0009144E E1FC                       	smpsAlterNote       $FC
00091450 01                         	dc.b	$01
00091451 ECF5                       	smpsPSGAlterVol     $F5
00091453 8F07                       	dc.b	nD1, $07
00091455 EC0B                       	smpsPSGAlterVol     $0B
00091457 8004                       	dc.b	nRst, $04
00091459 ECF5                       	smpsPSGAlterVol     $F5
0009145B 8F06                       	dc.b	nD1, $06
0009145D EC04                       	smpsPSGAlterVol     $04
0009145F E701                       	dc.b	smpsNoAttack, $01
00091461 EC07                       	smpsPSGAlterVol     $07
00091463 8006                       	dc.b	nRst, $06
00091465 E101                       	smpsAlterNote       $01
00091467 01                         	dc.b	$01
00091468 E102                       	smpsAlterNote       $02
0009146A 01                         	dc.b	$01
0009146B E1FF                       	smpsAlterNote       $FF
0009146D 01                         	dc.b	$01
0009146E E1F9                       	smpsAlterNote       $F9
00091470 01                         	dc.b	$01
00091471 E1FC                       	smpsAlterNote       $FC
00091473 ECF5                       	smpsPSGAlterVol     $F5
00091475 9006                       	dc.b	nEb1, $06
00091477 EC04                       	smpsPSGAlterVol     $04
00091479 E701                       	dc.b	smpsNoAttack, $01
0009147B EC07                       	smpsPSGAlterVol     $07
0009147D 8003                       	dc.b	nRst, $03
0009147F ECF5                       	smpsPSGAlterVol     $F5
00091481 9006                       	dc.b	nEb1, $06
00091483 EC04                       	smpsPSGAlterVol     $04
00091485 E701                       	dc.b	smpsNoAttack, $01
00091487 EC07                       	smpsPSGAlterVol     $07
00091489 8006                       	dc.b	nRst, $06
0009148B E100                       	smpsAlterNote       $00
0009148D 01                         	dc.b	$01
0009148E E102                       	smpsAlterNote       $02
00091490 01                         	dc.b	$01
00091491 E100                       	smpsAlterNote       $00
00091493 01                         	dc.b	$01
00091494 E1FF                       	smpsAlterNote       $FF
00091496 01                         	dc.b	$01
00091497 ECF5                       	smpsPSGAlterVol     $F5
00091499 9B06                       	dc.b	nD2, $06
0009149B EC04                       	smpsPSGAlterVol     $04
0009149D E701                       	dc.b	smpsNoAttack, $01
0009149F EC07                       	smpsPSGAlterVol     $07
000914A1 8003                       	dc.b	nRst, $03
000914A3 ECF5                       	smpsPSGAlterVol     $F5
000914A5 9B07                       	dc.b	nD2, $07
000914A7 EC0B                       	smpsPSGAlterVol     $0B
000914A9 8007                       	dc.b	nRst, $07
000914AB E105                       	smpsAlterNote       $05
000914AD 0101                       	dc.b	$01, $01
000914AF E1FF                       	smpsAlterNote       $FF
000914B1 01                         	dc.b	$01
000914B2 E1FC                       	smpsAlterNote       $FC
000914B4 01                         	dc.b	$01
000914B5 E1FF                       	smpsAlterNote       $FF
000914B7 ECF5                       	smpsPSGAlterVol     $F5
000914B9 9B06                       	dc.b	nD2, $06
000914BB EC0B                       	smpsPSGAlterVol     $0B
000914BD 8004                       	dc.b	nRst, $04
000914BF ECF5                       	smpsPSGAlterVol     $F5
000914C1 9B06                       	dc.b	nD2, $06
000914C3 EC04                       	smpsPSGAlterVol     $04
000914C5 E701                       	dc.b	smpsNoAttack, $01
000914C7 EC07                       	smpsPSGAlterVol     $07
000914C9 8006                       	dc.b	nRst, $06
000914CB E102                       	smpsAlterNote       $02
000914CD 01                         	dc.b	$01
000914CE E106                       	smpsAlterNote       $06
000914D0 01                         	dc.b	$01
000914D1 E102                       	smpsAlterNote       $02
000914D3 01                         	dc.b	$01
000914D4 E1FC                       	smpsAlterNote       $FC
000914D6 01                         	dc.b	$01
000914D7 E1FF                       	smpsAlterNote       $FF
000914D9 ECF5                       	smpsPSGAlterVol     $F5
000914DB 9B06                       	dc.b	nD2, $06
000914DD EC04                       	smpsPSGAlterVol     $04
000914DF E701                       	dc.b	smpsNoAttack, $01
000914E1 EC07                       	smpsPSGAlterVol     $07
000914E3 8003                       	dc.b	nRst, $03
000914E5 ECF5                       	smpsPSGAlterVol     $F5
000914E7 9B07                       	dc.b	nD2, $07
000914E9 EC0B                       	smpsPSGAlterVol     $0B
000914EB 8006                       	dc.b	nRst, $06
000914ED E102                       	smpsAlterNote       $02
000914EF 01                         	dc.b	$01
000914F0 E105                       	smpsAlterNote       $05
000914F2 0101                       	dc.b	$01, $01
000914F4 E1FF                       	smpsAlterNote       $FF
000914F6 01                         	dc.b	$01
000914F7 ECF5                       	smpsPSGAlterVol     $F5
000914F9 9B07                       	dc.b	nD2, $07
000914FB EC0B                       	smpsPSGAlterVol     $0B
000914FD 8004                       	dc.b	nRst, $04
000914FF ECF5                       	smpsPSGAlterVol     $F5
00091501 9B06                       	dc.b	nD2, $06
00091503 EC0B                       	smpsPSGAlterVol     $0B
00091505 8007                       	dc.b	nRst, $07
00091507 E105                       	smpsAlterNote       $05
00091509 0101                       	dc.b	$01, $01
0009150B E102                       	smpsAlterNote       $02
0009150D 01                         	dc.b	$01
0009150E E1FC                       	smpsAlterNote       $FC
00091510 01                         	dc.b	$01
00091511 E1FF                       	smpsAlterNote       $FF
00091513 ECF5                       	smpsPSGAlterVol     $F5
00091515 9B06                       	dc.b	nD2, $06
00091517 EC04                       	smpsPSGAlterVol     $04
00091519 E701                       	dc.b	smpsNoAttack, $01
0009151B EC07                       	smpsPSGAlterVol     $07
0009151D 8003                       	dc.b	nRst, $03
0009151F ECF5                       	smpsPSGAlterVol     $F5
00091521 9B06                       	dc.b	nD2, $06
00091523 EC04                       	smpsPSGAlterVol     $04
00091525 E701                       	dc.b	smpsNoAttack, $01
00091527 EC07                       	smpsPSGAlterVol     $07
00091529 8006                       	dc.b	nRst, $06
0009152B E102                       	smpsAlterNote       $02
0009152D 01                         	dc.b	$01
0009152E E106                       	smpsAlterNote       $06
00091530 01                         	dc.b	$01
00091531 E102                       	smpsAlterNote       $02
00091533 01                         	dc.b	$01
00091534 E1FF                       	smpsAlterNote       $FF
00091536 01                         	dc.b	$01
00091537 ECF5                       	smpsPSGAlterVol     $F5
00091539 9B06                       	dc.b	nD2, $06
0009153B EC04                       	smpsPSGAlterVol     $04
0009153D E701                       	dc.b	smpsNoAttack, $01
0009153F EC07                       	smpsPSGAlterVol     $07
00091541 8003                       	dc.b	nRst, $03
00091543 ECF5                       	smpsPSGAlterVol     $F5
00091545 9B07                       	dc.b	nD2, $07
00091547 EC0B                       	smpsPSGAlterVol     $0B
00091549 8007                       	dc.b	nRst, $07
0009154B E105                       	smpsAlterNote       $05
0009154D 0101                       	dc.b	$01, $01
0009154F E1FF                       	smpsAlterNote       $FF
00091551 01                         	dc.b	$01
00091552 E1FC                       	smpsAlterNote       $FC
00091554 01                         	dc.b	$01
00091555 E1FF                       	smpsAlterNote       $FF
00091557 ECF5                       	smpsPSGAlterVol     $F5
00091559 9B06                       	dc.b	nD2, $06
0009155B EC0B                       	smpsPSGAlterVol     $0B
0009155D 8004                       	dc.b	nRst, $04
0009155F ECF5                       	smpsPSGAlterVol     $F5
00091561 9B06                       	dc.b	nD2, $06
00091563 EC04                       	smpsPSGAlterVol     $04
00091565 E701                       	dc.b	smpsNoAttack, $01
00091567 EC07                       	smpsPSGAlterVol     $07
00091569 8006                       	dc.b	nRst, $06
0009156B E102                       	smpsAlterNote       $02
0009156D 01                         	dc.b	$01
0009156E E106                       	smpsAlterNote       $06
00091570 01                         	dc.b	$01
00091571 E102                       	smpsAlterNote       $02
00091573 01                         	dc.b	$01
00091574 E1FC                       	smpsAlterNote       $FC
00091576 01                         	dc.b	$01
00091577 E1FF                       	smpsAlterNote       $FF
00091579 ECF5                       	smpsPSGAlterVol     $F5
0009157B 9B06                       	dc.b	nD2, $06
0009157D EC04                       	smpsPSGAlterVol     $04
0009157F E701                       	dc.b	smpsNoAttack, $01
00091581 EC07                       	smpsPSGAlterVol     $07
00091583 8003                       	dc.b	nRst, $03
00091585 ECF5                       	smpsPSGAlterVol     $F5
00091587 9B06                       	dc.b	nD2, $06
00091589 EC04                       	smpsPSGAlterVol     $04
0009158B E701                       	dc.b	smpsNoAttack, $01
0009158D EC07                       	smpsPSGAlterVol     $07
0009158F 8006                       	dc.b	nRst, $06
00091591 E102                       	smpsAlterNote       $02
00091593 01                         	dc.b	$01
00091594 E106                       	smpsAlterNote       $06
00091596 01                         	dc.b	$01
00091597 E105                       	smpsAlterNote       $05
00091599 01                         	dc.b	$01
0009159A E1FF                       	smpsAlterNote       $FF
0009159C 01                         	dc.b	$01
0009159D ECF5                       	smpsPSGAlterVol     $F5
0009159F 9B07                       	dc.b	nD2, $07
000915A1 EC0B                       	smpsPSGAlterVol     $0B
000915A3 8004                       	dc.b	nRst, $04
000915A5 ECF5                       	smpsPSGAlterVol     $F5
000915A7 9B06                       	dc.b	nD2, $06
000915A9 EC0B                       	smpsPSGAlterVol     $0B
000915AB 8007                       	dc.b	nRst, $07
000915AD E105                       	smpsAlterNote       $05
000915AF 0101                       	dc.b	$01, $01
000915B1 E101                       	smpsAlterNote       $01
000915B3 01                         	dc.b	$01
000915B4 E1FB                       	smpsAlterNote       $FB
000915B6 01                         	dc.b	$01
000915B7 E1FE                       	smpsAlterNote       $FE
000915B9 ECF5                       	smpsPSGAlterVol     $F5
000915BB 9A06                       	dc.b	nCs2, $06
000915BD EC04                       	smpsPSGAlterVol     $04
000915BF E701                       	dc.b	smpsNoAttack, $01
000915C1 EC07                       	smpsPSGAlterVol     $07
000915C3 8003                       	dc.b	nRst, $03
000915C5 ECF5                       	smpsPSGAlterVol     $F5
000915C7 9A06                       	dc.b	nCs2, $06
000915C9 EC04                       	smpsPSGAlterVol     $04
000915CB E701                       	dc.b	smpsNoAttack, $01
000915CD EC07                       	smpsPSGAlterVol     $07
000915CF 8003                       	dc.b	nRst, $03
000915D1 E1FC                       	smpsAlterNote       $FC
000915D3 ECF5                       	smpsPSGAlterVol     $F5
000915D5 8F07                       	dc.b	nD1, $07
000915D7 EC0B                       	smpsPSGAlterVol     $0B
000915D9 8006                       	dc.b	nRst, $06
000915DB E1FF                       	smpsAlterNote       $FF
000915DD 01                         	dc.b	$01
000915DE E103                       	smpsAlterNote       $03
000915E0 01                         	dc.b	$01
000915E1 E102                       	smpsAlterNote       $02
000915E3 01                         	dc.b	$01
000915E4 E1FC                       	smpsAlterNote       $FC
000915E6 01                         	dc.b	$01
000915E7 E1F8                       	smpsAlterNote       $F8
000915E9 01                         	dc.b	$01
000915EA E1FC                       	smpsAlterNote       $FC
000915EC 01                         	dc.b	$01
000915ED E1FF                       	smpsAlterNote       $FF
000915EF 01                         	dc.b	$01
000915F0 E103                       	smpsAlterNote       $03
000915F2 01                         	dc.b	$01
000915F3 E1FC                       	smpsAlterNote       $FC
000915F5 ECF5                       	smpsPSGAlterVol     $F5
000915F7 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000915FB EC04                       	smpsPSGAlterVol     $04
000915FD E701                       	dc.b	smpsNoAttack, $01
000915FF EC07                       	smpsPSGAlterVol     $07
00091601 8009                       	dc.b	nRst, $09
00091603 E1FF                       	smpsAlterNote       $FF
00091605 01                         	dc.b	$01
00091606 E103                       	smpsAlterNote       $03
00091608 01                         	dc.b	$01
00091609 E102                       	smpsAlterNote       $02
0009160B 01                         	dc.b	$01
0009160C E1FC                       	smpsAlterNote       $FC
0009160E 01                         	dc.b	$01
0009160F E1F8                       	smpsAlterNote       $F8
00091611 01                         	dc.b	$01
00091612 E1FC                       	smpsAlterNote       $FC
00091614 01                         	dc.b	$01
00091615 E1FF                       	smpsAlterNote       $FF
00091617 01                         	dc.b	$01
00091618 E103                       	smpsAlterNote       $03
0009161A 01                         	dc.b	$01
0009161B E1FF                       	smpsAlterNote       $FF
0009161D 01                         	dc.b	$01
0009161E E1F9                       	smpsAlterNote       $F9
00091620 01                         	dc.b	$01
00091621 E1F8                       	smpsAlterNote       $F8
00091623 01                         	dc.b	$01
00091624 E1FC                       	smpsAlterNote       $FC
00091626 01                         	dc.b	$01
00091627 E102                       	smpsAlterNote       $02
00091629 0101                       	dc.b	$01, $01
0009162B E1FF                       	smpsAlterNote       $FF
0009162D 01                         	dc.b	$01
0009162E E1FC                       	smpsAlterNote       $FC
00091630 ECF5                       	smpsPSGAlterVol     $F5
00091632 8F02                       	dc.b	nD1, $02
00091634 EC04                       	smpsPSGAlterVol     $04
00091636 E701                       	dc.b	smpsNoAttack, $01
00091638 ECFC                       	smpsPSGAlterVol     $FC
0009163A E1FB                       	smpsAlterNote       $FB
0009163C 8D06                       	dc.b	nC1, $06
0009163E EC04                       	smpsPSGAlterVol     $04
00091640 E701                       	dc.b	smpsNoAttack, $01
00091642 EC07                       	smpsPSGAlterVol     $07
00091644 8006                       	dc.b	nRst, $06
00091646 E1FE                       	smpsAlterNote       $FE
00091648 01                         	dc.b	$01
00091649 E102                       	smpsAlterNote       $02
0009164B 01                         	dc.b	$01
0009164C E1FE                       	smpsAlterNote       $FE
0009164E 01                         	dc.b	$01
0009164F E1FB                       	smpsAlterNote       $FB
00091651 01                         	dc.b	$01
00091652 E1F7                       	smpsAlterNote       $F7
00091654 01                         	dc.b	$01
00091655 E1FB                       	smpsAlterNote       $FB
00091657 01                         	dc.b	$01
00091658 E101                       	smpsAlterNote       $01
0009165A 01                         	dc.b	$01
0009165B E102                       	smpsAlterNote       $02
0009165D 01                         	dc.b	$01
0009165E E1FB                       	smpsAlterNote       $FB
00091660 ECF5                       	smpsPSGAlterVol     $F5
00091662 8D02                       	dc.b	nC1, $02
00091664 EC04                       	smpsPSGAlterVol     $04
00091666 E701                       	dc.b	smpsNoAttack, $01
00091668 E1FC                       	smpsAlterNote       $FC
0009166A ECFC                       	smpsPSGAlterVol     $FC
0009166C 8F0D                       	dc.b	nD1, $0D
0009166E E1FF                       	smpsAlterNote       $FF
00091670 E701                       	dc.b	smpsNoAttack, $01
00091672 E103                       	smpsAlterNote       $03
00091674 E701                       	dc.b	smpsNoAttack, $01
00091676 E1FF                       	smpsAlterNote       $FF
00091678 E701                       	dc.b	smpsNoAttack, $01
0009167A E1FC                       	smpsAlterNote       $FC
0009167C E701                       	dc.b	smpsNoAttack, $01
0009167E E1F8                       	smpsAlterNote       $F8
00091680 E701                       	dc.b	smpsNoAttack, $01
00091682 E1FC                       	smpsAlterNote       $FC
00091684 E701                       	dc.b	smpsNoAttack, $01
00091686 E102                       	smpsAlterNote       $02
00091688 E701                       	dc.b	smpsNoAttack, $01
0009168A E103                       	smpsAlterNote       $03
0009168C E701                       	dc.b	smpsNoAttack, $01
0009168E E1FF                       	smpsAlterNote       $FF
00091690 E701                       	dc.b	smpsNoAttack, $01
00091692 E1F9                       	smpsAlterNote       $F9
00091694 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091698 E1FC                       	smpsAlterNote       $FC
0009169A E701                       	dc.b	smpsNoAttack, $01
0009169C E102                       	smpsAlterNote       $02
0009169E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000916A2 E1FC                       	smpsAlterNote       $FC
000916A4 E701                       	dc.b	smpsNoAttack, $01
000916A6 E1F9                       	smpsAlterNote       $F9
000916A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000916AC E1FF                       	smpsAlterNote       $FF
000916AE EC04                       	smpsPSGAlterVol     $04
000916B0 E701                       	dc.b	smpsNoAttack, $01
000916B2 EC07                       	smpsPSGAlterVol     $07
000916B4 E103                       	smpsAlterNote       $03
000916B6 8001                       	dc.b	nRst, $01
000916B8 E102                       	smpsAlterNote       $02
000916BA 01                         	dc.b	$01
000916BB E1FB                       	smpsAlterNote       $FB
000916BD 01                         	dc.b	$01
000916BE E1F7                       	smpsAlterNote       $F7
000916C0 01                         	dc.b	$01
000916C1 E1FB                       	smpsAlterNote       $FB
000916C3 01                         	dc.b	$01
000916C4 E102                       	smpsAlterNote       $02
000916C6 01                         	dc.b	$01
000916C7 E103                       	smpsAlterNote       $03
000916C9 01                         	dc.b	$01
000916CA E1FB                       	smpsAlterNote       $FB
000916CC ECF5                       	smpsPSGAlterVol     $F5
000916CE 8E06                       	dc.b	nCs1, $06
000916D0 EC04                       	smpsPSGAlterVol     $04
000916D2 E701                       	dc.b	smpsNoAttack, $01
000916D4 EC07                       	smpsPSGAlterVol     $07
000916D6 8003                       	dc.b	nRst, $03
000916D8 ECF5                       	smpsPSGAlterVol     $F5
000916DA 8E06                       	dc.b	nCs1, $06
000916DC EC04                       	smpsPSGAlterVol     $04
000916DE E701                       	dc.b	smpsNoAttack, $01
000916E0 EC07                       	smpsPSGAlterVol     $07
000916E2 8006                       	dc.b	nRst, $06
000916E4 E1FE                       	smpsAlterNote       $FE
000916E6 01                         	dc.b	$01
000916E7 E102                       	smpsAlterNote       $02
000916E9 01                         	dc.b	$01
000916EA E1FE                       	smpsAlterNote       $FE
000916EC 01                         	dc.b	$01
000916ED E1F9                       	smpsAlterNote       $F9
000916EF 01                         	dc.b	$01
000916F0 E1FC                       	smpsAlterNote       $FC
000916F2 ECF5                       	smpsPSGAlterVol     $F5
000916F4 8F06                       	dc.b	nD1, $06
000916F6 EC04                       	smpsPSGAlterVol     $04
000916F8 E701                       	dc.b	smpsNoAttack, $01
000916FA EC07                       	smpsPSGAlterVol     $07
000916FC 8003                       	dc.b	nRst, $03
000916FE ECF5                       	smpsPSGAlterVol     $F5
00091700 8F07                       	dc.b	nD1, $07
00091702 EC0B                       	smpsPSGAlterVol     $0B
00091704 8006                       	dc.b	nRst, $06
00091706 E1FF                       	smpsAlterNote       $FF
00091708 01                         	dc.b	$01
00091709 E102                       	smpsAlterNote       $02
0009170B 0101                       	dc.b	$01, $01
0009170D E1FB                       	smpsAlterNote       $FB
0009170F 01                         	dc.b	$01
00091710 ECF5                       	smpsPSGAlterVol     $F5
00091712 8E07                       	dc.b	nCs1, $07
00091714 EC0B                       	smpsPSGAlterVol     $0B
00091716 8004                       	dc.b	nRst, $04
00091718 ECF5                       	smpsPSGAlterVol     $F5
0009171A 8E06                       	dc.b	nCs1, $06
0009171C EC04                       	smpsPSGAlterVol     $04
0009171E E701                       	dc.b	smpsNoAttack, $01
00091720 EC07                       	smpsPSGAlterVol     $07
00091722 8006                       	dc.b	nRst, $06
00091724 E101                       	smpsAlterNote       $01
00091726 01                         	dc.b	$01
00091727 E102                       	smpsAlterNote       $02
00091729 01                         	dc.b	$01
0009172A E1FE                       	smpsAlterNote       $FE
0009172C 01                         	dc.b	$01
0009172D E1F8                       	smpsAlterNote       $F8
0009172F 01                         	dc.b	$01
00091730 E1FB                       	smpsAlterNote       $FB
00091732 ECF5                       	smpsPSGAlterVol     $F5
00091734 8E06                       	dc.b	nCs1, $06
00091736 EC04                       	smpsPSGAlterVol     $04
00091738 E701                       	dc.b	smpsNoAttack, $01
0009173A EC07                       	smpsPSGAlterVol     $07
0009173C 8003                       	dc.b	nRst, $03
0009173E ECF5                       	smpsPSGAlterVol     $F5
00091740 8E06                       	dc.b	nCs1, $06
00091742 EC04                       	smpsPSGAlterVol     $04
00091744 E701                       	dc.b	smpsNoAttack, $01
00091746 EC07                       	smpsPSGAlterVol     $07
00091748 8004                       	dc.b	nRst, $04
0009174A E1FC                       	smpsAlterNote       $FC
0009174C ECF5                       	smpsPSGAlterVol     $F5
0009174E 8F06                       	dc.b	nD1, $06
00091750 EC0B                       	smpsPSGAlterVol     $0B
00091752 8006                       	dc.b	nRst, $06
00091754 E1FF                       	smpsAlterNote       $FF
00091756 01                         	dc.b	$01
00091757 E102                       	smpsAlterNote       $02
00091759 0101                       	dc.b	$01, $01
0009175B E1FC                       	smpsAlterNote       $FC
0009175D 01                         	dc.b	$01
0009175E E1F8                       	smpsAlterNote       $F8
00091760 01                         	dc.b	$01
00091761 E1F9                       	smpsAlterNote       $F9
00091763 01                         	dc.b	$01
00091764 E1FF                       	smpsAlterNote       $FF
00091766 01                         	dc.b	$01
00091767 E103                       	smpsAlterNote       $03
00091769 01                         	dc.b	$01
0009176A E1FC                       	smpsAlterNote       $FC
0009176C ECF5                       	smpsPSGAlterVol     $F5
0009176E 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
00091772 EC04                       	smpsPSGAlterVol     $04
00091774 E701                       	dc.b	smpsNoAttack, $01
00091776 EC07                       	smpsPSGAlterVol     $07
00091778 8009                       	dc.b	nRst, $09
0009177A E1FF                       	smpsAlterNote       $FF
0009177C 01                         	dc.b	$01
0009177D E102                       	smpsAlterNote       $02
0009177F 0101                       	dc.b	$01, $01
00091781 E1FC                       	smpsAlterNote       $FC
00091783 01                         	dc.b	$01
00091784 E1F8                       	smpsAlterNote       $F8
00091786 01                         	dc.b	$01
00091787 E1F9                       	smpsAlterNote       $F9
00091789 01                         	dc.b	$01
0009178A E1FF                       	smpsAlterNote       $FF
0009178C 01                         	dc.b	$01
0009178D E103                       	smpsAlterNote       $03
0009178F 01                         	dc.b	$01
00091790 E1FF                       	smpsAlterNote       $FF
00091792 01                         	dc.b	$01
00091793 E1FC                       	smpsAlterNote       $FC
00091795 01                         	dc.b	$01
00091796 E1F8                       	smpsAlterNote       $F8
00091798 01                         	dc.b	$01
00091799 E1FC                       	smpsAlterNote       $FC
0009179B 01                         	dc.b	$01
0009179C E102                       	smpsAlterNote       $02
0009179E 01                         	dc.b	$01
0009179F E103                       	smpsAlterNote       $03
000917A1 01                         	dc.b	$01
000917A2 E1FF                       	smpsAlterNote       $FF
000917A4 01                         	dc.b	$01
000917A5 E1FC                       	smpsAlterNote       $FC
000917A7 ECF5                       	smpsPSGAlterVol     $F5
000917A9 8F03                       	dc.b	nD1, $03
000917AB E1FB                       	smpsAlterNote       $FB
000917AD 8D06                       	dc.b	nC1, $06
000917AF EC04                       	smpsPSGAlterVol     $04
000917B1 E701                       	dc.b	smpsNoAttack, $01
000917B3 EC07                       	smpsPSGAlterVol     $07
000917B5 8006                       	dc.b	nRst, $06
000917B7 E1FE                       	smpsAlterNote       $FE
000917B9 01                         	dc.b	$01
000917BA E102                       	smpsAlterNote       $02
000917BC 01                         	dc.b	$01
000917BD E101                       	smpsAlterNote       $01
000917BF 01                         	dc.b	$01
000917C0 E1FB                       	smpsAlterNote       $FB
000917C2 01                         	dc.b	$01
000917C3 E1F7                       	smpsAlterNote       $F7
000917C5 01                         	dc.b	$01
000917C6 E1FB                       	smpsAlterNote       $FB
000917C8 01                         	dc.b	$01
000917C9 E1FE                       	smpsAlterNote       $FE
000917CB 01                         	dc.b	$01
000917CC E102                       	smpsAlterNote       $02
000917CE 01                         	dc.b	$01
000917CF E1FB                       	smpsAlterNote       $FB
000917D1 ECF5                       	smpsPSGAlterVol     $F5
000917D3 8D03                       	dc.b	nC1, $03
000917D5 E1FC                       	smpsAlterNote       $FC
000917D7 8F0D                       	dc.b	nD1, $0D
000917D9 E1FF                       	smpsAlterNote       $FF
000917DB E701                       	dc.b	smpsNoAttack, $01
000917DD E103                       	smpsAlterNote       $03
000917DF E701                       	dc.b	smpsNoAttack, $01
000917E1 E1FF                       	smpsAlterNote       $FF
000917E3 E701                       	dc.b	smpsNoAttack, $01
000917E5 E1FC                       	smpsAlterNote       $FC
000917E7 E701                       	dc.b	smpsNoAttack, $01
000917E9 E1F8                       	smpsAlterNote       $F8
000917EB E701                       	dc.b	smpsNoAttack, $01
000917ED E1FC                       	smpsAlterNote       $FC
000917EF E701                       	dc.b	smpsNoAttack, $01
000917F1 E102                       	smpsAlterNote       $02
000917F3 E701                       	dc.b	smpsNoAttack, $01
000917F5 E103                       	smpsAlterNote       $03
000917F7 E701                       	dc.b	smpsNoAttack, $01
000917F9 E1FF                       	smpsAlterNote       $FF
000917FB E701                       	dc.b	smpsNoAttack, $01
000917FD E1F9                       	smpsAlterNote       $F9
000917FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091803 E1FC                       	smpsAlterNote       $FC
00091805 E701                       	dc.b	smpsNoAttack, $01
00091807 E102                       	smpsAlterNote       $02
00091809 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0009180D E1FF                       	smpsAlterNote       $FF
0009180F E701                       	dc.b	smpsNoAttack, $01
00091811 E1F9                       	smpsAlterNote       $F9
00091813 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00091817 E1FF                       	smpsAlterNote       $FF
00091819 EC04                       	smpsPSGAlterVol     $04
0009181B E701                       	dc.b	smpsNoAttack, $01
0009181D EC07                       	smpsPSGAlterVol     $07
0009181F E103                       	smpsAlterNote       $03
00091821 8001                       	dc.b	nRst, $01
00091823 E102                       	smpsAlterNote       $02
00091825 01                         	dc.b	$01
00091826 E1FB                       	smpsAlterNote       $FB
00091828 01                         	dc.b	$01
00091829 E1F7                       	smpsAlterNote       $F7
0009182B 01                         	dc.b	$01
0009182C E1FB                       	smpsAlterNote       $FB
0009182E 01                         	dc.b	$01
0009182F E1FF                       	smpsAlterNote       $FF
00091831 01                         	dc.b	$01
00091832 E103                       	smpsAlterNote       $03
00091834 01                         	dc.b	$01
00091835 E1FB                       	smpsAlterNote       $FB
00091837 ECF5                       	smpsPSGAlterVol     $F5
00091839 8E06                       	dc.b	nCs1, $06
0009183B EC04                       	smpsPSGAlterVol     $04
0009183D E701                       	dc.b	smpsNoAttack, $01
0009183F EC07                       	smpsPSGAlterVol     $07
00091841 8003                       	dc.b	nRst, $03
00091843 ECF5                       	smpsPSGAlterVol     $F5
00091845 8E06                       	dc.b	nCs1, $06
00091847 EC04                       	smpsPSGAlterVol     $04
00091849 E701                       	dc.b	smpsNoAttack, $01
0009184B EC07                       	smpsPSGAlterVol     $07
0009184D 8006                       	dc.b	nRst, $06
0009184F E1FE                       	smpsAlterNote       $FE
00091851 01                         	dc.b	$01
00091852 E102                       	smpsAlterNote       $02
00091854 01                         	dc.b	$01
00091855 E1FE                       	smpsAlterNote       $FE
00091857 01                         	dc.b	$01
00091858 E1FC                       	smpsAlterNote       $FC
0009185A 01                         	dc.b	$01
0009185B ECF5                       	smpsPSGAlterVol     $F5
0009185D 8F06                       	dc.b	nD1, $06
0009185F EC04                       	smpsPSGAlterVol     $04
00091861 E701                       	dc.b	smpsNoAttack, $01
00091863 EC07                       	smpsPSGAlterVol     $07
00091865 8003                       	dc.b	nRst, $03
00091867 ECF5                       	smpsPSGAlterVol     $F5
00091869 8F07                       	dc.b	nD1, $07
0009186B EC0B                       	smpsPSGAlterVol     $0B
0009186D 8007                       	dc.b	nRst, $07
0009186F E102                       	smpsAlterNote       $02
00091871 0101                       	dc.b	$01, $01
00091873 E1FB                       	smpsAlterNote       $FB
00091875 01                         	dc.b	$01
00091876 E1F8                       	smpsAlterNote       $F8
00091878 01                         	dc.b	$01
00091879 E1FB                       	smpsAlterNote       $FB
0009187B ECF5                       	smpsPSGAlterVol     $F5
0009187D 8E06                       	dc.b	nCs1, $06
0009187F EC0B                       	smpsPSGAlterVol     $0B
00091881 8004                       	dc.b	nRst, $04
00091883 ECF5                       	smpsPSGAlterVol     $F5
00091885 8E06                       	dc.b	nCs1, $06
00091887 EC04                       	smpsPSGAlterVol     $04
00091889 E701                       	dc.b	smpsNoAttack, $01
0009188B EC07                       	smpsPSGAlterVol     $07
0009188D 8006                       	dc.b	nRst, $06
0009188F E1FE                       	smpsAlterNote       $FE
00091891 01                         	dc.b	$01
00091892 E102                       	smpsAlterNote       $02
00091894 01                         	dc.b	$01
00091895 E1FE                       	smpsAlterNote       $FE
00091897 01                         	dc.b	$01
00091898 E1F9                       	smpsAlterNote       $F9
0009189A 01                         	dc.b	$01
0009189B E1FC                       	smpsAlterNote       $FC
0009189D ECF5                       	smpsPSGAlterVol     $F5
0009189F 8F06                       	dc.b	nD1, $06
000918A1 EC04                       	smpsPSGAlterVol     $04
000918A3 E701                       	dc.b	smpsNoAttack, $01
000918A5 EC07                       	smpsPSGAlterVol     $07
000918A7 8003                       	dc.b	nRst, $03
000918A9 ECF5                       	smpsPSGAlterVol     $F5
000918AB 8F06                       	dc.b	nD1, $06
000918AD EC04                       	smpsPSGAlterVol     $04
000918AF E701                       	dc.b	smpsNoAttack, $01
000918B1 EC07                       	smpsPSGAlterVol     $07
000918B3 8006                       	dc.b	nRst, $06
000918B5 E1FF                       	smpsAlterNote       $FF
000918B7 01                         	dc.b	$01
000918B8 E103                       	smpsAlterNote       $03
000918BA 01                         	dc.b	$01
000918BB E102                       	smpsAlterNote       $02
000918BD 01                         	dc.b	$01
000918BE E1FB                       	smpsAlterNote       $FB
000918C0 01                         	dc.b	$01
000918C1 ECF5                       	smpsPSGAlterVol     $F5
000918C3 8E07                       	dc.b	nCs1, $07
000918C5 EC0B                       	smpsPSGAlterVol     $0B
000918C7 8004                       	dc.b	nRst, $04
000918C9 ECF5                       	smpsPSGAlterVol     $F5
000918CB 8E06                       	dc.b	nCs1, $06
000918CD EC0B                       	smpsPSGAlterVol     $0B
000918CF 8007                       	dc.b	nRst, $07
000918D1 E101                       	smpsAlterNote       $01
000918D3 0101                       	dc.b	$01, $01
000918D5 E1FE                       	smpsAlterNote       $FE
000918D7 01                         	dc.b	$01
000918D8 E1F9                       	smpsAlterNote       $F9
000918DA 01                         	dc.b	$01
000918DB E1FC                       	smpsAlterNote       $FC
000918DD ECF5                       	smpsPSGAlterVol     $F5
000918DF 8F06                       	dc.b	nD1, $06
000918E1 EC04                       	smpsPSGAlterVol     $04
000918E3 E701                       	dc.b	smpsNoAttack, $01
000918E5 EC07                       	smpsPSGAlterVol     $07
000918E7 8003                       	dc.b	nRst, $03
000918E9 ECF5                       	smpsPSGAlterVol     $F5
000918EB 8F06                       	dc.b	nD1, $06
000918ED EC04                       	smpsPSGAlterVol     $04
000918EF E701                       	dc.b	smpsNoAttack, $01
000918F1 EC07                       	smpsPSGAlterVol     $07
000918F3 8006                       	dc.b	nRst, $06
000918F5 E1FF                       	smpsAlterNote       $FF
000918F7 01                         	dc.b	$01
000918F8 E103                       	smpsAlterNote       $03
000918FA 01                         	dc.b	$01
000918FB E1FF                       	smpsAlterNote       $FF
000918FD 01                         	dc.b	$01
000918FE E1FB                       	smpsAlterNote       $FB
00091900 01                         	dc.b	$01
00091901 ECF5                       	smpsPSGAlterVol     $F5
00091903 8E06                       	dc.b	nCs1, $06
00091905 EC04                       	smpsPSGAlterVol     $04
00091907 E701                       	dc.b	smpsNoAttack, $01
00091909 EC07                       	smpsPSGAlterVol     $07
0009190B 8003                       	dc.b	nRst, $03
0009190D ECF5                       	smpsPSGAlterVol     $F5
0009190F 8E07                       	dc.b	nCs1, $07
00091911 E1FF                       	smpsAlterNote       $FF
00091913 9B06                       	dc.b	nD2, $06
00091915 EC04                       	smpsPSGAlterVol     $04
00091917 E701                       	dc.b	smpsNoAttack, $01
00091919 ECFC                       	smpsPSGAlterVol     $FC
0009191B 9B03                       	dc.b	nD2, $03
0009191D EC04                       	smpsPSGAlterVol     $04
0009191F E701                       	dc.b	smpsNoAttack, $01
00091921 ECFC                       	smpsPSGAlterVol     $FC
00091923 9B02                       	dc.b	nD2, $02
00091925 EC04                       	smpsPSGAlterVol     $04
00091927 E701                       	dc.b	smpsNoAttack, $01
00091929 ECFC                       	smpsPSGAlterVol     $FC
0009192B E1FE                       	smpsAlterNote       $FE
0009192D 9A03                       	dc.b	nCs2, $03
0009192F EC0B                       	smpsPSGAlterVol     $0B
00091931 800A                       	dc.b	nRst, $0A
00091933 E102                       	smpsAlterNote       $02
00091935 01                         	dc.b	$01
00091936 E10A                       	smpsAlterNote       $0A
00091938 01                         	dc.b	$01
00091939 E102                       	smpsAlterNote       $02
0009193B 01                         	dc.b	$01
0009193C E1F7                       	smpsAlterNote       $F7
0009193E 01                         	dc.b	$01
0009193F E10A                       	smpsAlterNote       $0A
00091941 01                         	dc.b	$01
00091942 E1FC                       	smpsAlterNote       $FC
00091944 01                         	dc.b	$01
00091945 E108                       	smpsAlterNote       $08
00091947 0101                       	dc.b	$01, $01
00091949 E102                       	smpsAlterNote       $02
0009194B 01                         	dc.b	$01
0009194C E1F7                       	smpsAlterNote       $F7
0009194E 0101                       	dc.b	$01, $01
00091950 E1FC                       	smpsAlterNote       $FC
00091952 ECF5                       	smpsPSGAlterVol     $F5
00091954 8F06                       	dc.b	nD1, $06
00091956 EC04                       	smpsPSGAlterVol     $04
00091958 E701                       	dc.b	smpsNoAttack, $01
0009195A EC07                       	smpsPSGAlterVol     $07
0009195C 8003                       	dc.b	nRst, $03
0009195E ECF5                       	smpsPSGAlterVol     $F5
00091960 8F06                       	dc.b	nD1, $06
00091962 EC04                       	smpsPSGAlterVol     $04
00091964 E701                       	dc.b	smpsNoAttack, $01
00091966 EC07                       	smpsPSGAlterVol     $07
00091968 8006                       	dc.b	nRst, $06
0009196A E1FF                       	smpsAlterNote       $FF
0009196C 01                         	dc.b	$01
0009196D E102                       	smpsAlterNote       $02
0009196F 01                         	dc.b	$01
00091970 E101                       	smpsAlterNote       $01
00091972 01                         	dc.b	$01
00091973 E1FC                       	smpsAlterNote       $FC
00091975 01                         	dc.b	$01
00091976 ECF5                       	smpsPSGAlterVol     $F5
00091978 9007                       	dc.b	nEb1, $07
0009197A EC0B                       	smpsPSGAlterVol     $0B
0009197C 8004                       	dc.b	nRst, $04
0009197E ECF5                       	smpsPSGAlterVol     $F5
00091980 9006                       	dc.b	nEb1, $06
00091982 EC0B                       	smpsPSGAlterVol     $0B
00091984 8007                       	dc.b	nRst, $07
00091986 E103                       	smpsAlterNote       $03
00091988 0101                       	dc.b	$01, $01
0009198A E1FF                       	smpsAlterNote       $FF
0009198C 01                         	dc.b	$01
0009198D E1F9                       	smpsAlterNote       $F9
0009198F 01                         	dc.b	$01
00091990 E1FC                       	smpsAlterNote       $FC
00091992 ECF5                       	smpsPSGAlterVol     $F5
00091994 8F06                       	dc.b	nD1, $06
00091996 EC04                       	smpsPSGAlterVol     $04
00091998 E701                       	dc.b	smpsNoAttack, $01
0009199A EC07                       	smpsPSGAlterVol     $07
0009199C 8003                       	dc.b	nRst, $03
0009199E ECF5                       	smpsPSGAlterVol     $F5
000919A0 8F06                       	dc.b	nD1, $06
000919A2 EC04                       	smpsPSGAlterVol     $04
000919A4 E701                       	dc.b	smpsNoAttack, $01
000919A6 EC07                       	smpsPSGAlterVol     $07
000919A8 8006                       	dc.b	nRst, $06
000919AA E1FF                       	smpsAlterNote       $FF
000919AC 01                         	dc.b	$01
000919AD E103                       	smpsAlterNote       $03
000919AF 01                         	dc.b	$01
000919B0 E1FF                       	smpsAlterNote       $FF
000919B2 01                         	dc.b	$01
000919B3 E1F9                       	smpsAlterNote       $F9
000919B5 01                         	dc.b	$01
000919B6 E1FC                       	smpsAlterNote       $FC
000919B8 ECF5                       	smpsPSGAlterVol     $F5
000919BA 8F06                       	dc.b	nD1, $06
000919BC EC04                       	smpsPSGAlterVol     $04
000919BE E701                       	dc.b	smpsNoAttack, $01
000919C0 EC07                       	smpsPSGAlterVol     $07
000919C2 8003                       	dc.b	nRst, $03
000919C4 ECF5                       	smpsPSGAlterVol     $F5
000919C6 8F07                       	dc.b	nD1, $07
000919C8 EC0B                       	smpsPSGAlterVol     $0B
000919CA 8006                       	dc.b	nRst, $06
000919CC E1FF                       	smpsAlterNote       $FF
000919CE 01                         	dc.b	$01
000919CF E102                       	smpsAlterNote       $02
000919D1 0101                       	dc.b	$01, $01
000919D3 E1FC                       	smpsAlterNote       $FC
000919D5 01                         	dc.b	$01
000919D6 ECF5                       	smpsPSGAlterVol     $F5
000919D8 8F07                       	dc.b	nD1, $07
000919DA EC0B                       	smpsPSGAlterVol     $0B
000919DC 8004                       	dc.b	nRst, $04
000919DE ECF5                       	smpsPSGAlterVol     $F5
000919E0 8F06                       	dc.b	nD1, $06
000919E2 EC04                       	smpsPSGAlterVol     $04
000919E4 E701                       	dc.b	smpsNoAttack, $01
000919E6 EC07                       	smpsPSGAlterVol     $07
000919E8 8006                       	dc.b	nRst, $06
000919EA E101                       	smpsAlterNote       $01
000919EC 01                         	dc.b	$01
000919ED E102                       	smpsAlterNote       $02
000919EF 01                         	dc.b	$01
000919F0 E1FF                       	smpsAlterNote       $FF
000919F2 01                         	dc.b	$01
000919F3 E1F9                       	smpsAlterNote       $F9
000919F5 01                         	dc.b	$01
000919F6 E1FC                       	smpsAlterNote       $FC
000919F8 ECF5                       	smpsPSGAlterVol     $F5
000919FA 9006                       	dc.b	nEb1, $06
000919FC EC04                       	smpsPSGAlterVol     $04
000919FE E701                       	dc.b	smpsNoAttack, $01
00091A00 EC07                       	smpsPSGAlterVol     $07
00091A02 8003                       	dc.b	nRst, $03
00091A04 ECF5                       	smpsPSGAlterVol     $F5
00091A06 9006                       	dc.b	nEb1, $06
00091A08 EC04                       	smpsPSGAlterVol     $04
00091A0A E701                       	dc.b	smpsNoAttack, $01
00091A0C EC07                       	smpsPSGAlterVol     $07
00091A0E 8006                       	dc.b	nRst, $06
00091A10 E100                       	smpsAlterNote       $00
00091A12 01                         	dc.b	$01
00091A13 E102                       	smpsAlterNote       $02
00091A15 01                         	dc.b	$01
00091A16 E100                       	smpsAlterNote       $00
00091A18 01                         	dc.b	$01
00091A19 E1FF                       	smpsAlterNote       $FF
00091A1B 01                         	dc.b	$01
00091A1C ECF5                       	smpsPSGAlterVol     $F5
00091A1E 9B06                       	dc.b	nD2, $06
00091A20 EC04                       	smpsPSGAlterVol     $04
00091A22 E701                       	dc.b	smpsNoAttack, $01
00091A24 EC07                       	smpsPSGAlterVol     $07
00091A26 8003                       	dc.b	nRst, $03
00091A28 ECF5                       	smpsPSGAlterVol     $F5
00091A2A 9B07                       	dc.b	nD2, $07
00091A2C EC0B                       	smpsPSGAlterVol     $0B
00091A2E 8007                       	dc.b	nRst, $07
00091A30 E105                       	smpsAlterNote       $05
00091A32 0101                       	dc.b	$01, $01
00091A34 E1FF                       	smpsAlterNote       $FF
00091A36 01                         	dc.b	$01
00091A37 E1FC                       	smpsAlterNote       $FC
00091A39 01                         	dc.b	$01
00091A3A E1FF                       	smpsAlterNote       $FF
00091A3C ECF5                       	smpsPSGAlterVol     $F5
00091A3E 9B06                       	dc.b	nD2, $06
00091A40 EC0B                       	smpsPSGAlterVol     $0B
00091A42 8004                       	dc.b	nRst, $04
00091A44 ECF5                       	smpsPSGAlterVol     $F5
00091A46 9B06                       	dc.b	nD2, $06
00091A48 EC04                       	smpsPSGAlterVol     $04
00091A4A E701                       	dc.b	smpsNoAttack, $01
00091A4C EC07                       	smpsPSGAlterVol     $07
00091A4E 8006                       	dc.b	nRst, $06
00091A50 E102                       	smpsAlterNote       $02
00091A52 01                         	dc.b	$01
00091A53 E106                       	smpsAlterNote       $06
00091A55 01                         	dc.b	$01
00091A56 E102                       	smpsAlterNote       $02
00091A58 01                         	dc.b	$01
00091A59 E1FC                       	smpsAlterNote       $FC
00091A5B 01                         	dc.b	$01
00091A5C E1FF                       	smpsAlterNote       $FF
00091A5E ECF5                       	smpsPSGAlterVol     $F5
00091A60 9B06                       	dc.b	nD2, $06
00091A62 EC04                       	smpsPSGAlterVol     $04
00091A64 E701                       	dc.b	smpsNoAttack, $01
00091A66 EC07                       	smpsPSGAlterVol     $07
00091A68 8003                       	dc.b	nRst, $03
00091A6A ECF5                       	smpsPSGAlterVol     $F5
00091A6C 9B07                       	dc.b	nD2, $07
00091A6E EC0B                       	smpsPSGAlterVol     $0B
00091A70 8006                       	dc.b	nRst, $06
00091A72 E102                       	smpsAlterNote       $02
00091A74 01                         	dc.b	$01
00091A75 E105                       	smpsAlterNote       $05
00091A77 0101                       	dc.b	$01, $01
00091A79 E1FF                       	smpsAlterNote       $FF
00091A7B 01                         	dc.b	$01
00091A7C ECF5                       	smpsPSGAlterVol     $F5
00091A7E 9B07                       	dc.b	nD2, $07
00091A80 EC0B                       	smpsPSGAlterVol     $0B
00091A82 8004                       	dc.b	nRst, $04
00091A84 ECF5                       	smpsPSGAlterVol     $F5
00091A86 9B06                       	dc.b	nD2, $06
00091A88 EC04                       	smpsPSGAlterVol     $04
00091A8A E701                       	dc.b	smpsNoAttack, $01
00091A8C EC07                       	smpsPSGAlterVol     $07
00091A8E 8006                       	dc.b	nRst, $06
00091A90 E105                       	smpsAlterNote       $05
00091A92 0101                       	dc.b	$01, $01
00091A94 E102                       	smpsAlterNote       $02
00091A96 01                         	dc.b	$01
00091A97 E1FC                       	smpsAlterNote       $FC
00091A99 01                         	dc.b	$01
00091A9A E1FF                       	smpsAlterNote       $FF
00091A9C ECF5                       	smpsPSGAlterVol     $F5
00091A9E 9B06                       	dc.b	nD2, $06
00091AA0 EC04                       	smpsPSGAlterVol     $04
00091AA2 E701                       	dc.b	smpsNoAttack, $01
00091AA4 EC07                       	smpsPSGAlterVol     $07
00091AA6 8003                       	dc.b	nRst, $03
00091AA8 ECF5                       	smpsPSGAlterVol     $F5
00091AAA 9B06                       	dc.b	nD2, $06
00091AAC EC04                       	smpsPSGAlterVol     $04
00091AAE E701                       	dc.b	smpsNoAttack, $01
00091AB0 EC07                       	smpsPSGAlterVol     $07
00091AB2 8006                       	dc.b	nRst, $06
00091AB4 E102                       	smpsAlterNote       $02
00091AB6 01                         	dc.b	$01
00091AB7 E106                       	smpsAlterNote       $06
00091AB9 01                         	dc.b	$01
00091ABA E102                       	smpsAlterNote       $02
00091ABC 01                         	dc.b	$01
00091ABD E1FF                       	smpsAlterNote       $FF
00091ABF 01                         	dc.b	$01
00091AC0 ECF5                       	smpsPSGAlterVol     $F5
00091AC2 9B06                       	dc.b	nD2, $06
00091AC4 EC04                       	smpsPSGAlterVol     $04
00091AC6 E701                       	dc.b	smpsNoAttack, $01
00091AC8 EC07                       	smpsPSGAlterVol     $07
00091ACA 8003                       	dc.b	nRst, $03
00091ACC ECF5                       	smpsPSGAlterVol     $F5
00091ACE 9B07                       	dc.b	nD2, $07
00091AD0 EC0B                       	smpsPSGAlterVol     $0B
00091AD2 8007                       	dc.b	nRst, $07
00091AD4 E107                       	smpsAlterNote       $07
00091AD6 0101                       	dc.b	$01, $01
00091AD8 E1FE                       	smpsAlterNote       $FE
00091ADA 01                         	dc.b	$01
00091ADB E1FA                       	smpsAlterNote       $FA
00091ADD 0101                       	dc.b	$01, $01
00091ADF E103                       	smpsAlterNote       $03
00091AE1 01                         	dc.b	$01
00091AE2 E109                       	smpsAlterNote       $09
00091AE4 01                         	dc.b	$01
00091AE5 E107                       	smpsAlterNote       $07
00091AE7 01                         	dc.b	$01
00091AE8 E1FE                       	smpsAlterNote       $FE
00091AEA 01                         	dc.b	$01
00091AEB E108                       	smpsAlterNote       $08
00091AED 01                         	dc.b	$01
00091AEE E1FD                       	smpsAlterNote       $FD
00091AF0 ECF5                       	smpsPSGAlterVol     $F5
00091AF2 940E                       	dc.b	nG1, $0E
00091AF4 E103                       	smpsAlterNote       $03
00091AF6 EC0B                       	smpsPSGAlterVol     $0B
00091AF8 8001 01                    	dc.b	nRst, $01, $01
00091AFB E1FD                       	smpsAlterNote       $FD
00091AFD 01                         	dc.b	$01
00091AFE E1FB                       	smpsAlterNote       $FB
00091B00 0101                       	dc.b	$01, $01
00091B02 E100                       	smpsAlterNote       $00
00091B04 01                         	dc.b	$01
00091B05 E103                       	smpsAlterNote       $03
00091B07 01                         	dc.b	$01
00091B08 E100                       	smpsAlterNote       $00
00091B0A 01                         	dc.b	$01
00091B0B E1FD                       	smpsAlterNote       $FD
00091B0D 01                         	dc.b	$01
00091B0E E1FA                       	smpsAlterNote       $FA
00091B10 01                         	dc.b	$01
00091B11 E1FD                       	smpsAlterNote       $FD
00091B13 01                         	dc.b	$01
00091B14 E103                       	smpsAlterNote       $03
00091B16 0101                       	dc.b	$01, $01
00091B18 E100                       	smpsAlterNote       $00
00091B1A 01                         	dc.b	$01
00091B1B E1FE                       	smpsAlterNote       $FE
00091B1D ECF5                       	smpsPSGAlterVol     $F5
00091B1F 960D                       	dc.b	nA1, $0D
00091B21 E104                       	smpsAlterNote       $04
00091B23 EC0B                       	smpsPSGAlterVol     $0B
00091B25 8001 01                    	dc.b	nRst, $01, $01
00091B28 E101                       	smpsAlterNote       $01
00091B2A 01                         	dc.b	$01
00091B2B E1FB                       	smpsAlterNote       $FB
00091B2D 0101                       	dc.b	$01, $01
00091B2F E1FE                       	smpsAlterNote       $FE
00091B31 01                         	dc.b	$01
00091B32 E104                       	smpsAlterNote       $04
00091B34 0101                       	dc.b	$01, $01
00091B36 E1FE                       	smpsAlterNote       $FE
00091B38 01                         	dc.b	$01
00091B39 E1FB                       	smpsAlterNote       $FB
00091B3B 0101                       	dc.b	$01, $01
00091B3D E101                       	smpsAlterNote       $01
00091B3F 01                         	dc.b	$01
00091B40 E104                       	smpsAlterNote       $04
00091B42 0101                       	dc.b	$01, $01
00091B44 E1FE                       	smpsAlterNote       $FE
00091B46 ECF5                       	smpsPSGAlterVol     $F5
00091B48 970D                       	dc.b	nBb1, $0D
00091B4A E101                       	smpsAlterNote       $01
00091B4C EC04                       	smpsPSGAlterVol     $04
00091B4E E701                       	dc.b	smpsNoAttack, $01
00091B50 EC07                       	smpsPSGAlterVol     $07
00091B52 E104                       	smpsAlterNote       $04
00091B54 8001                       	dc.b	nRst, $01
00091B56 E103                       	smpsAlterNote       $03
00091B58 01                         	dc.b	$01
00091B59 E1FE                       	smpsAlterNote       $FE
00091B5B 01                         	dc.b	$01
00091B5C E1FA                       	smpsAlterNote       $FA
00091B5E 01                         	dc.b	$01
00091B5F E1FE                       	smpsAlterNote       $FE
00091B61 01                         	dc.b	$01
00091B62 E101                       	smpsAlterNote       $01
00091B64 01                         	dc.b	$01
00091B65 E104                       	smpsAlterNote       $04
00091B67 01                         	dc.b	$01
00091B68 E101                       	smpsAlterNote       $01
00091B6A 01                         	dc.b	$01
00091B6B E1FB                       	smpsAlterNote       $FB
00091B6D 01                         	dc.b	$01
00091B6E E1FA                       	smpsAlterNote       $FA
00091B70 01                         	dc.b	$01
00091B71 E1FE                       	smpsAlterNote       $FE
00091B73 01                         	dc.b	$01
00091B74 E103                       	smpsAlterNote       $03
00091B76 0101                       	dc.b	$01, $01
00091B78 E101                       	smpsAlterNote       $01
00091B7A 01                         	dc.b	$01
00091B7B E1FE                       	smpsAlterNote       $FE
00091B7D ECF5                       	smpsPSGAlterVol     $F5
00091B7F 990D                       	dc.b	nC2, $0D
00091B81 E104                       	smpsAlterNote       $04
00091B83 EC0B                       	smpsPSGAlterVol     $0B
00091B85 8001 01                    	dc.b	nRst, $01, $01
00091B88 E102                       	smpsAlterNote       $02
00091B8A 01                         	dc.b	$01
00091B8B E1FC                       	smpsAlterNote       $FC
00091B8D 0101                       	dc.b	$01, $01
00091B8F E102                       	smpsAlterNote       $02
00091B91 01                         	dc.b	$01
00091B92 E104                       	smpsAlterNote       $04
00091B94 01                         	dc.b	$01
00091B95 E1FF                       	smpsAlterNote       $FF
00091B97 ECF5                       	smpsPSGAlterVol     $F5
00091B99 9B06                       	dc.b	nD2, $06
00091B9B EC04                       	smpsPSGAlterVol     $04
00091B9D E701                       	dc.b	smpsNoAttack, $01
00091B9F EC07                       	smpsPSGAlterVol     $07
00091BA1 8003                       	dc.b	nRst, $03
00091BA3 ECF5                       	smpsPSGAlterVol     $F5
00091BA5 9B07                       	dc.b	nD2, $07
00091BA7 EC0B                       	smpsPSGAlterVol     $0B
00091BA9 8006                       	dc.b	nRst, $06
00091BAB E101                       	smpsAlterNote       $01
00091BAD 01                         	dc.b	$01
00091BAE E104                       	smpsAlterNote       $04
00091BB0 0101                       	dc.b	$01, $01
00091BB2 E1FE                       	smpsAlterNote       $FE
00091BB4 01                         	dc.b	$01
00091BB5 E1FC                       	smpsAlterNote       $FC
00091BB7 01                         	dc.b	$01
00091BB8 E1FE                       	smpsAlterNote       $FE
00091BBA ECF5                       	smpsPSGAlterVol     $F5
00091BBC 9C06                       	dc.b	nEb2, $06
00091BBE EC0B                       	smpsPSGAlterVol     $0B
00091BC0 8004                       	dc.b	nRst, $04
00091BC2 ECF5                       	smpsPSGAlterVol     $F5
00091BC4 9C06                       	dc.b	nEb2, $06
00091BC6 EC04                       	smpsPSGAlterVol     $04
00091BC8 E701                       	dc.b	smpsNoAttack, $01
00091BCA EC07                       	smpsPSGAlterVol     $07
00091BCC 8006                       	dc.b	nRst, $06
00091BCE E105                       	smpsAlterNote       $05
00091BD0 01                         	dc.b	$01
00091BD1 E106                       	smpsAlterNote       $06
00091BD3 01                         	dc.b	$01
00091BD4 E102                       	smpsAlterNote       $02
00091BD6 01                         	dc.b	$01
00091BD7 E1FB                       	smpsAlterNote       $FB
00091BD9 01                         	dc.b	$01
00091BDA E1FF                       	smpsAlterNote       $FF
00091BDC ECF5                       	smpsPSGAlterVol     $F5
00091BDE 9B06                       	dc.b	nD2, $06
00091BE0 EC04                       	smpsPSGAlterVol     $04
00091BE2 E701                       	dc.b	smpsNoAttack, $01
00091BE4 EC07                       	smpsPSGAlterVol     $07
00091BE6 8003                       	dc.b	nRst, $03
00091BE8 ECF5                       	smpsPSGAlterVol     $F5
00091BEA 9B06                       	dc.b	nD2, $06
00091BEC EC04                       	smpsPSGAlterVol     $04
00091BEE E701                       	dc.b	smpsNoAttack, $01
00091BF0 EC07                       	smpsPSGAlterVol     $07
00091BF2 8006                       	dc.b	nRst, $06
00091BF4 E101                       	smpsAlterNote       $01
00091BF6 01                         	dc.b	$01
00091BF7 E105                       	smpsAlterNote       $05
00091BF9 01                         	dc.b	$01
00091BFA E104                       	smpsAlterNote       $04
00091BFC 01                         	dc.b	$01
00091BFD E1FE                       	smpsAlterNote       $FE
00091BFF 01                         	dc.b	$01
00091C00 ECF5                       	smpsPSGAlterVol     $F5
00091C02 9C07                       	dc.b	nEb2, $07
00091C04 EC0B                       	smpsPSGAlterVol     $0B
00091C06 8004                       	dc.b	nRst, $04
00091C08 ECF5                       	smpsPSGAlterVol     $F5
00091C0A 9C06                       	dc.b	nEb2, $06
00091C0C EC0B                       	smpsPSGAlterVol     $0B
00091C0E 8007                       	dc.b	nRst, $07
00091C10 E105                       	smpsAlterNote       $05
00091C12 0101                       	dc.b	$01, $01
00091C14 E102                       	smpsAlterNote       $02
00091C16 01                         	dc.b	$01
00091C17 E1FB                       	smpsAlterNote       $FB
00091C19 01                         	dc.b	$01
00091C1A E1FF                       	smpsAlterNote       $FF
00091C1C ECF5                       	smpsPSGAlterVol     $F5
00091C1E 9B06                       	dc.b	nD2, $06
00091C20 EC04                       	smpsPSGAlterVol     $04
00091C22 E701                       	dc.b	smpsNoAttack, $01
00091C24 EC07                       	smpsPSGAlterVol     $07
00091C26 8003                       	dc.b	nRst, $03
00091C28 ECF5                       	smpsPSGAlterVol     $F5
00091C2A 9B06                       	dc.b	nD2, $06
00091C2C EC04                       	smpsPSGAlterVol     $04
00091C2E E701                       	dc.b	smpsNoAttack, $01
00091C30 EC07                       	smpsPSGAlterVol     $07
00091C32 8006                       	dc.b	nRst, $06
00091C34 E101                       	smpsAlterNote       $01
00091C36 01                         	dc.b	$01
00091C37 E105                       	smpsAlterNote       $05
00091C39 01                         	dc.b	$01
00091C3A E101                       	smpsAlterNote       $01
00091C3C 01                         	dc.b	$01
00091C3D E1FC                       	smpsAlterNote       $FC
00091C3F 01                         	dc.b	$01
00091C40 E1FE                       	smpsAlterNote       $FE
00091C42 ECF5                       	smpsPSGAlterVol     $F5
00091C44 9C06                       	dc.b	nEb2, $06
00091C46 EC04                       	smpsPSGAlterVol     $04
00091C48 E701                       	dc.b	smpsNoAttack, $01
00091C4A EC07                       	smpsPSGAlterVol     $07
00091C4C 8003                       	dc.b	nRst, $03
00091C4E ECF5                       	smpsPSGAlterVol     $F5
00091C50 9C07                       	dc.b	nEb2, $07
00091C52 EC0B                       	smpsPSGAlterVol     $0B
00091C54 8006                       	dc.b	nRst, $06
00091C56 E102                       	smpsAlterNote       $02
00091C58 01                         	dc.b	$01
00091C59 E105                       	smpsAlterNote       $05
00091C5B 0101                       	dc.b	$01, $01
00091C5D E1FF                       	smpsAlterNote       $FF
00091C5F 01                         	dc.b	$01
00091C60 ECF5                       	smpsPSGAlterVol     $F5
00091C62 9B07                       	dc.b	nD2, $07
00091C64 EC0B                       	smpsPSGAlterVol     $0B
00091C66 8004                       	dc.b	nRst, $04
00091C68 ECF5                       	smpsPSGAlterVol     $F5
00091C6A 9B06                       	dc.b	nD2, $06
00091C6C EC04                       	smpsPSGAlterVol     $04
00091C6E E701                       	dc.b	smpsNoAttack, $01
00091C70 EC07                       	smpsPSGAlterVol     $07
00091C72 8002                       	dc.b	nRst, $02
00091C74 E1FC                       	smpsAlterNote       $FC
00091C76 ECF5                       	smpsPSGAlterVol     $F5
00091C78 9006                       	dc.b	nEb1, $06
00091C7A EC04                       	smpsPSGAlterVol     $04
00091C7C E701                       	dc.b	smpsNoAttack, $01
00091C7E ECFC                       	smpsPSGAlterVol     $FC
00091C80 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
00091C84 EC04                       	smpsPSGAlterVol     $04
00091C86 E701                       	dc.b	smpsNoAttack, $01
00091C88 E1FD                       	smpsAlterNote       $FD
00091C8A ECFC                       	smpsPSGAlterVol     $FC
00091C8C 9402                       	dc.b	nG1, $02
00091C8E EC04                       	smpsPSGAlterVol     $04
00091C90 E701                       	dc.b	smpsNoAttack, $01
00091C92 E1FE                       	smpsAlterNote       $FE
00091C94 ECFC                       	smpsPSGAlterVol     $FC
00091C96 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
00091C9A EC04                       	smpsPSGAlterVol     $04
00091C9C E701                       	dc.b	smpsNoAttack, $01
00091C9E EC07                       	smpsPSGAlterVol     $07
00091CA0 8008                       	dc.b	nRst, $08
00091CA2 F6F4 F3                    	smpsJump            music84_Jump06
00091CA5                            
00091CA5                            ; PSG3 Data
00091CA5                            music84_PSG3:
00091CA5 F500                       	smpsPSGvoice        $00
00091CA7 E1FF                       	smpsAlterNote       $FF
00091CA9 EC0F                       	smpsPSGAlterVol     $0F
00091CAB 803A                       	dc.b	nRst, $3A
00091CAD                            
00091CAD                            music84_Jump05:
00091CAD 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
00091CB9 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
00091CC3 F6FF E8                    	smpsJump            music84_Jump05
00091CC6                            
00091CC6                            ; DAC Data
00091CC6                            music84_DAC:
00091CC6 E0C0                       	smpsPan             panCenter, $00
00091CC8 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
00091CD4 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
00091CE0 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
00091CEC 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00091CF8 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00091D04 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
00091D10 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00091D1C 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
00091D28 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00091D34 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
00091D40 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00091D4C 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
00091D58 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
00091D64 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
00091D70 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
00091D7C 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
00091D88 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
00091D94 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
00091DA0 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
00091DAC 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00091DB8 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091DC4 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00091DD0 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
00091DDC 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
00091DE8 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
00091DF4 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
00091E00 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
00091E0C 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091E18 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00091E24 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00091E30 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091E3C 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00091E48 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
00091E54 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
00091E60 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
00091E6C 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091E78 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
00091E84 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
00091E90 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
00091E9C 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
00091EA8 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
00091EB4 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
00091EC0 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00091ECC 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
00091ED8 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
00091EE4 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091EF0 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
00091EFC 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
00091F08 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
00091F14 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
00091F20 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
00091F2C 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
00091F38 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
00091F44 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
00091F50 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
00091F5C 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
00091F68 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
00091F74 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
00091F80 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
00091F8C 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
00091F98 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
00091FA4 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
00091FB0 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
00091FBC 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
00091FC8 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
00091FD4 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
00091FE0 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
00091FEC 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
00091FF8 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
00092004 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
00092010 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0009201C 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
00092028 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
00092034 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
00092040 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0009204C E0C0                       	smpsPan             panCenter, $00
0009204E F2                         	smpsStop
0009204F                            
0009204F                            music84_Voices:
0009204F                            ;	Voice $00
0009204F                            ;	$3D
0009204F                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0009204F                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0009204F                            	smpsVcAlgorithm     $05
0009204F                            	smpsVcFeedback      $07
0009204F                            	smpsVcUnusedBits    $00
0009204F                            	smpsVcDetune        $05, $04, $03, $04
0009204F                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009204F                            	smpsVcRateScale     $00, $00, $00, $00
0009204F                            	smpsVcAttackRate    $11, $11, $11, $11
0009204F                            	smpsVcAmpMod        $00, $00, $00, $00
0009204F                            	smpsVcDecayRate1    $00, $00, $00, $0A
0009204F                            	smpsVcDecayRate2    $00, $00, $00, $0B
0009204F                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0009204F                            	smpsVcReleaseRate   $08, $08, $08, $07
0009204F 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
00092068                            
00092068                            ;	Voice $01
00092068                            ;	$04
00092068                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
00092068                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
00092068                            	smpsVcAlgorithm     $04
00092068                            	smpsVcFeedback      $00
00092068                            	smpsVcUnusedBits    $00
00092068                            	smpsVcDetune        $04, $03, $04, $05
00092068                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
00092068                            	smpsVcRateScale     $00, $01, $00, $01
00092068                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
00092068                            	smpsVcAmpMod        $00, $00, $00, $00
00092068                            	smpsVcDecayRate1    $0E, $00, $0E, $00
00092068                            	smpsVcDecayRate2    $05, $00, $05, $00
00092068                            	smpsVcDecayLevel    $08, $0E, $08, $0E
00092068                            	smpsVcReleaseRate   $06, $06, $06, $06
00092068 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
00092081                            
00092081                            ;	Voice $02
00092081                            ;	$30
00092081                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
00092081                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
00092081                            	smpsVcAlgorithm     $00
00092081                            	smpsVcFeedback      $06
00092081                            	smpsVcUnusedBits    $00
00092081                            	smpsVcDetune        $04, $02, $00, $06
00092081                            	smpsVcCoarseFreq    $01, $01, $03, $0C
00092081                            	smpsVcRateScale     $00, $00, $00, $00
00092081                            	smpsVcAttackRate    $1F, $1F, $1F, $14
00092081                            	smpsVcAmpMod        $00, $00, $00, $00
00092081                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
00092081                            	smpsVcDecayRate2    $01, $01, $01, $01
00092081                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
00092081                            	smpsVcReleaseRate   $09, $0B, $08, $0F
00092081 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0009209A                            
0009209A                            ;	Voice $03
0009209A                            ;	$3A
0009209A                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0009209A                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0009209A                            	smpsVcAlgorithm     $02
0009209A                            	smpsVcFeedback      $07
0009209A                            	smpsVcUnusedBits    $00
0009209A                            	smpsVcDetune        $04, $06, $02, $00
0009209A                            	smpsVcCoarseFreq    $01, $01, $01, $01
0009209A                            	smpsVcRateScale     $00, $00, $00, $00
0009209A                            	smpsVcAttackRate    $18, $19, $14, $14
0009209A                            	smpsVcAmpMod        $00, $00, $00, $00
0009209A                            	smpsVcDecayRate1    $09, $0D, $09, $09
0009209A                            	smpsVcDecayRate2    $00, $00, $00, $00
0009209A                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0009209A                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0009209A 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
000920B3                            
000920B3                            ;	Voice $04
000920B3                            ;	$3C
000920B3                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
000920B3                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
000920B3                            	smpsVcAlgorithm     $04
000920B3                            	smpsVcFeedback      $07
000920B3                            	smpsVcUnusedBits    $00
000920B3                            	smpsVcDetune        $07, $00, $00, $03
000920B3                            	smpsVcCoarseFreq    $00, $00, $02, $0A
000920B3                            	smpsVcRateScale     $00, $00, $00, $00
000920B3                            	smpsVcAttackRate    $10, $1F, $10, $1F
000920B3                            	smpsVcAmpMod        $00, $00, $00, $00
000920B3                            	smpsVcDecayRate1    $00, $00, $00, $00
000920B3                            	smpsVcDecayRate2    $00, $00, $00, $00
000920B3                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000920B3                            	smpsVcReleaseRate   $0A, $02, $0A, $02
000920B3 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
000920CC                            
000920CC                            ;	Voice $05
000920CC                            ;	$38
000920CC                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
000920CC                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
000920CC                            	smpsVcAlgorithm     $00
000920CC                            	smpsVcFeedback      $07
000920CC                            	smpsVcUnusedBits    $00
000920CC                            	smpsVcDetune        $04, $06, $02, $00
000920CC                            	smpsVcCoarseFreq    $01, $01, $01, $00
000920CC                            	smpsVcRateScale     $00, $00, $00, $00
000920CC                            	smpsVcAttackRate    $1F, $1F, $1F, $10
000920CC                            	smpsVcAmpMod        $00, $00, $00, $00
000920CC                            	smpsVcDecayRate1    $00, $03, $00, $17
000920CC                            	smpsVcDecayRate2    $00, $08, $08, $0B
000920CC                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
000920CC                            	smpsVcReleaseRate   $08, $05, $05, $05
000920CC 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
000920E5                            
000920E5                            
000920E6 00                         		even
000920E6                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
000962F6                            		even
000962F6                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
00099E4E 00                         		even
00099E4E                            Music87:	include	sound\music87.asm; Invincibility
00099E4E                            triple_Header:
00099E4E =00000001                  smpsHeaderStartSong = 1
00099E4E 0000                       	smpsHeaderVoice     triple_Voices
00099E50 0501                       	smpsHeaderChan      $05, $01
00099E52 0200                       	smpsHeaderTempo     $02, $00
00099E54                            
00099E58 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00099E5C 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00099E60 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
00099E64 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
00099E68 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00099E6E                            
00099E6E                            ; DAC Data
00099E6E                            triple_DAC:
00099E6E E0C0                       	smpsPan             panCenter, $00
00099E70 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
00099E76                            
00099E76                            triple_Loop01:
00099E76 8282 82                    	dc.b	dSnare, dSnare, dSnare
00099E79                            
00099E79                            triple_Loop00:
00099E79 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
00099E85 06                         	dc.b	$06
00099E86 F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00099E8B 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
00099E97 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
00099E9E F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
00099EA3 0303 1B                    	dc.b	$03, $03, $1B
00099EA6 E0C0                       	smpsPan             panCenter, $00
00099EA8 F6FF C4                    	smpsJump triple_DAC
00099EAB                            
00099EAB                            ; FM1 Data
00099EAB                            triple_FM1:
00099EAB E0C0                       	smpsPan             panCenter, $00
00099EAF 8018                       	dc.b	nRst, $18
00099EB1                            
00099EB1                            triple_Loop0B:
00099EB1 AC06 B8                    	dc.b	nG3, $06, nG4
00099EB4 F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
00099EB9                            
00099EB9                            triple_Loop0C:
00099EB9 A7B3                       	dc.b	nD3, nD4
00099EBB F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
00099EC0                            
00099EC0                            triple_Loop0D:
00099EC0 A9B5                       	dc.b	nE3, nE4
00099EC2 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
00099EC7 A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
00099ECF F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
00099ED4 A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
00099EE0 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
00099EEC AD                         	dc.b	nAb3
00099EED F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
00099EF2 8018                       	dc.b	nRst, $18
00099EF4 E0C0                       	smpsPan             panCenter, $00
00099EF8 F6FF B1                    	smpsJump triple_FM1
00099EFB                            
00099EFB                            ; FM2 Data
00099EFB                            triple_FM2:
00099EFB E0C0                       	smpsPan             panCenter, $00
00099EFF 8018                       	dc.b	nRst, $18
00099F01                            
00099F01                            triple_Loop07:
00099F01 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099F0D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099F19 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00099F1E 8003                       	dc.b	nRst, $03
00099F20                            
00099F20                            triple_Loop08:
00099F20 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099F26 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00099F2B B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00099F31                            
00099F31                            triple_Loop09:
00099F31 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099F3D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099F49 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00099F4E 8003                       	dc.b	nRst, $03
00099F50                            
00099F50                            triple_Loop0A:
00099F50 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099F56 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00099F5B B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00099F61 E0C0                       	smpsPan             panCenter, $00
00099F65 F6FF 94                    	smpsJump triple_FM2
00099F68                            
00099F68                            ; FM3 Data
00099F68                            triple_FM3:
00099F68 E0C0                       	smpsPan             panCenter, $00
00099F6C 8018                       	dc.b	nRst, $18
00099F6E                            
00099F6E                            triple_Loop06:
00099F6E B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
00099F75 F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00099F7A 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
00099F86 BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00099F92 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
00099F95 F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
00099F9A 8018                       	dc.b	nRst, $18
00099F9C E0C0                       	smpsPan             panCenter, $00
00099FA0 F6FF C6                    	smpsJump triple_FM3
00099FA3                            
00099FA3                            ; FM4 Data
00099FA3                            triple_FM4:
00099FA3 E103                       	smpsAlterNote       $03
00099FA7 E0C0                       	smpsPan             panCenter, $00
00099FA9 8018                       	dc.b	nRst, $18
00099FAB                            
00099FAB                            triple_Loop02:
00099FAB C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099FB7 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099FC3 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
00099FC8 8003                       	dc.b	nRst, $03
00099FCA                            
00099FCA                            triple_Loop03:
00099FCA B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00099FD0 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
00099FD5 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00099FDB                            
00099FDB                            triple_Loop04:
00099FDB C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00099FE7 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
00099FF3 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
00099FF8 8003                       	dc.b	nRst, $03
00099FFA                            
00099FFA                            triple_Loop05:
00099FFA B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0009A000 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
0009A005 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
0009A00B E0C0                       	smpsPan             panCenter, $00
0009A00D F6FF 94                    	smpsJump triple_FM4
0009A010                            
0009A010                            ; PSG1 Data
0009A010                            triple_PSG1:
0009A010 8018                       	dc.b	nRst, $18
0009A012                            
0009A012                            triple_Loop0E:
0009A012 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A01E 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A02A 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A036 9402 8004                  	dc.b	nG1, $02, nRst, $04
0009A03A F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
0009A03F A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A04B 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A057 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A063 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009A067                            
0009A067                            triple_Loop0F:
0009A067 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009A06D F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
0009A072 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
0009A078                            
0009A078                            triple_Loop10:
0009A078 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A084 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A090 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A09C 9402 8004                  	dc.b	nG1, $02, nRst, $04
0009A0A0 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
0009A0A5 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0009A0B1 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0009A0BD 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0009A0C9 9402 8007                  	dc.b	nG1, $02, nRst, $07
0009A0CD                            
0009A0CD                            triple_Loop11:
0009A0CD 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
0009A0D3 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
0009A0D8 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
0009A0DE F500                       	smpsPSGvoice        $00
0009A0E0 F6FF 2E                    	smpsJump triple_PSG1
0009A0E3                            
0009A0E3                            triple_Voices:
0009A0E3                            ;	Voice $00
0009A0E3                            ;	$3A
0009A0E3                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
0009A0E3                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
0009A0E3                            	smpsVcAlgorithm     $02
0009A0E3                            	smpsVcFeedback      $07
0009A0E3                            	smpsVcUnusedBits    $00
0009A0E3                            	smpsVcDetune        $00, $00, $00, $00
0009A0E3                            	smpsVcCoarseFreq    $01, $01, $07, $01
0009A0E3                            	smpsVcRateScale     $01, $02, $02, $02
0009A0E3                            	smpsVcAttackRate    $13, $0D, $0E, $0E
0009A0E3                            	smpsVcAmpMod        $00, $00, $00, $00
0009A0E3                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
0009A0E3                            	smpsVcDecayRate2    $00, $00, $00, $00
0009A0E3                            	smpsVcDecayLevel    $00, $01, $0F, $01
0009A0E3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009A0E3 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
0009A0FC                            
0009A0FC                            ;	Voice $01
0009A0FC                            ;	$20
0009A0FC                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
0009A0FC                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
0009A0FC                            	smpsVcAlgorithm     $00
0009A0FC                            	smpsVcFeedback      $04
0009A0FC                            	smpsVcUnusedBits    $00
0009A0FC                            	smpsVcDetune        $00, $00, $03, $07
0009A0FC                            	smpsVcCoarseFreq    $00, $00, $01, $0A
0009A0FC                            	smpsVcRateScale     $03, $03, $03, $02
0009A0FC                            	smpsVcAttackRate    $1F, $1C, $18, $1F
0009A0FC                            	smpsVcAmpMod        $00, $00, $00, $00
0009A0FC                            	smpsVcDecayRate1    $04, $04, $0A, $10
0009A0FC                            	smpsVcDecayRate2    $08, $08, $08, $0F
0009A0FC                            	smpsVcDecayLevel    $0B, $0B, $05, $05
0009A0FC                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
0009A0FC 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009A0FC 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0009A116 00                         		even
0009A116                            Music88:	incbin	sound\music88.bin; Extra Life
0009A204                            		even
0009A204                            Music89:	incbin	sound\music89.bin; Special Stage
0009E0CC 00                         		even
0009E0CC                            Music8A:	incbin	sound\music8A.bin; Title Screen
0009E296                            		even
0009E296                            Music8B:	incbin	sound\music8B.bin; Ending Theme
0009E530                            		even
0009E530                            Music8C:	incbin	sound\music8C.bin; VS Boss
0009E7CE                            		even
0009E7CE                            Music8D:	incbin	sound\music8D.bin; Final Zone
0009E9EA                            		even
0009E9EA                            Music8E:	incbin	sound\fle.bin ;		Act Clear
0009EE58 00                         		even
0009EE58                            Music8F:	incbin	sound\music8F.bin ; Game Over
0009F498 00                         		even
0009F498                            Music90:	incbin	sound\music90.bin ; Continue
0009F832 00                         		even
0009F832                            Music91:	incbin	sound\music91.bin ; Credits
000A0B00                            		even
000A0B00                            Music92:	incbin	sound\music92.bin ; Drowning
000A0E42 00                         		even
000A0E42                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000A0F12                            		even
000A0F12                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000A1BE8 00                         		even
000A1BE8                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000A1D38 00                         		even
000A1D38                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000A1D72 00                         		even
000A1D72                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000A1DAC 00                         		even
000A1DAC                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000A1DE6 00                         		even
000A1DE6                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000A1E20 00                         		even
000A1E20                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000A1E5A 00                         		even
000A1E5A                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000A1E94 00                         		even
000A1E94                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000A1ECE 00                         		even
000A1ECE                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000A1F08 00                         		even
000A1F08                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000A23F8                            		even
000A23F8                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000A23F8                            GentleBreeze_Header:
000A23F8 =00000001                  smpsHeaderStartSong = 1
000A23F8 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000A23FA 0603                       	smpsHeaderChan      $06, $03
000A23FC 0100                       	smpsHeaderTempo     $01, $00
000A23FE                            
000A2402 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000A2406 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000A240A 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000A240E 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000A2412 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000A2416 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000A241C 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000A2422 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000A2428                            
000A2428                            ; PSG3 Data
000A2428                            GentleBreeze_PSG3:
000A2428 F2                         	smpsStop
000A2429                            
000A2429                            ; FM1 Data
000A2429                            GentleBreeze_FM1:
000A242B E0C0                       	smpsPan             panCenter, $00
000A242D E1FF                       	smpsAlterNote       $FF
000A242F C410                       	dc.b	nG5, $10
000A2431 E60F                       	smpsAlterVol        $0F
000A2433 C4                         	dc.b	nG5
000A2434 E6F1                       	smpsAlterVol        $F1
000A2436 E100                       	smpsAlterNote       $00
000A2438 C2                         	dc.b	nF5
000A2439 E60F                       	smpsAlterVol        $0F
000A243B 08                         	dc.b	$08
000A243C E6F1                       	smpsAlterVol        $F1
000A243E C010                       	dc.b	nEb5, $10
000A2440 E60F                       	smpsAlterVol        $0F
000A2442 C0                         	dc.b	nEb5
000A2443 E6F1                       	smpsAlterVol        $F1
000A2445 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A244B E60F                       	smpsAlterVol        $0F
000A244D C9                         	dc.b	nC6
000A244E E6F1                       	smpsAlterVol        $F1
000A2450 C5                         	dc.b	nAb5
000A2451 E60F                       	smpsAlterVol        $0F
000A2453 08                         	dc.b	$08
000A2454 E6F1                       	smpsAlterVol        $F1
000A2456 C010                       	dc.b	nEb5, $10
000A2458 E60F                       	smpsAlterVol        $0F
000A245A C0                         	dc.b	nEb5
000A245B E6F1                       	smpsAlterVol        $F1
000A245D C208                       	dc.b	nF5, $08
000A245F E1FF                       	smpsAlterNote       $FF
000A2461 C410                       	dc.b	nG5, $10
000A2463 E100                       	smpsAlterNote       $00
000A2465 C5C7                       	dc.b	nAb5, nBb5
000A2467 E60F                       	smpsAlterVol        $0F
000A2469 C7                         	dc.b	nBb5
000A246A E6F1                       	smpsAlterVol        $F1
000A246C C5                         	dc.b	nAb5
000A246D E60F                       	smpsAlterVol        $0F
000A246F 08                         	dc.b	$08
000A2470 E6F1                       	smpsAlterVol        $F1
000A2472 E1FF                       	smpsAlterNote       $FF
000A2474 C410                       	dc.b	nG5, $10
000A2476 E60F                       	smpsAlterVol        $0F
000A2478 C4                         	dc.b	nG5
000A2479 E6F1                       	smpsAlterVol        $F1
000A247B C4                         	dc.b	nG5
000A247C E100                       	smpsAlterNote       $00
000A247E C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A2483 E60F                       	smpsAlterVol        $0F
000A2485 C2                         	dc.b	nF5
000A2486 E6F1                       	smpsAlterVol        $F1
000A2488 E1FF                       	smpsAlterNote       $FF
000A248A C4                         	dc.b	nG5
000A248B E60F                       	smpsAlterVol        $0F
000A248D 08                         	dc.b	$08
000A248E E6F1                       	smpsAlterVol        $F1
000A2490 10                         	dc.b	$10
000A2491 E60F                       	smpsAlterVol        $0F
000A2493 38                         	dc.b	$38
000A2494 E6F1                       	smpsAlterVol        $F1
000A2496 10                         	dc.b	$10
000A2497 E60F                       	smpsAlterVol        $0F
000A2499 C4                         	dc.b	nG5
000A249A E6F1                       	smpsAlterVol        $F1
000A249C E100                       	smpsAlterNote       $00
000A249E C2                         	dc.b	nF5
000A249F E60F                       	smpsAlterVol        $0F
000A24A1 08                         	dc.b	$08
000A24A2 E6F1                       	smpsAlterVol        $F1
000A24A4 C010                       	dc.b	nEb5, $10
000A24A6 E60F                       	smpsAlterVol        $0F
000A24A8 C0                         	dc.b	nEb5
000A24A9 E6F1                       	smpsAlterVol        $F1
000A24AB BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A24B1 E60F                       	smpsAlterVol        $0F
000A24B3 C9                         	dc.b	nC6
000A24B4 E6F1                       	smpsAlterVol        $F1
000A24B6 C5                         	dc.b	nAb5
000A24B7 E60F                       	smpsAlterVol        $0F
000A24B9 08                         	dc.b	$08
000A24BA E6F1                       	smpsAlterVol        $F1
000A24BC C010                       	dc.b	nEb5, $10
000A24BE E60F                       	smpsAlterVol        $0F
000A24C0 C0                         	dc.b	nEb5
000A24C1 E6F1                       	smpsAlterVol        $F1
000A24C3 C208                       	dc.b	nF5, $08
000A24C5 E1FF                       	smpsAlterNote       $FF
000A24C7 C410                       	dc.b	nG5, $10
000A24C9 E100                       	smpsAlterNote       $00
000A24CB C5C7                       	dc.b	nAb5, nBb5
000A24CD E60F                       	smpsAlterVol        $0F
000A24CF C7                         	dc.b	nBb5
000A24D0 E6F1                       	smpsAlterVol        $F1
000A24D2 C5                         	dc.b	nAb5
000A24D3 E60F                       	smpsAlterVol        $0F
000A24D5 08                         	dc.b	$08
000A24D6 E6F1                       	smpsAlterVol        $F1
000A24D8 E1FF                       	smpsAlterNote       $FF
000A24DA C410                       	dc.b	nG5, $10
000A24DC E60F                       	smpsAlterVol        $0F
000A24DE C4                         	dc.b	nG5
000A24DF E6F1                       	smpsAlterVol        $F1
000A24E1 C4                         	dc.b	nG5
000A24E2 E100                       	smpsAlterNote       $00
000A24E4 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A24E9 E60F                       	smpsAlterVol        $0F
000A24EB 28                         	dc.b	$28
000A24EC E6F1                       	smpsAlterVol        $F1
000A24EE C008 10                    	dc.b	nEb5, $08, $10
000A24F1 E60F                       	smpsAlterVol        $0F
000A24F3 21                         	dc.b	$21
000A24F4                            
000A24F4                            GentleBreeze_Loop12:
000A24F4 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000A24F7 F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000A24FC E717                       	dc.b	smpsNoAttack, $17
000A24FE E6F1                       	smpsAlterVol        $F1
000A2500 E1FF                       	smpsAlterNote       $FF
000A2502 C410                       	dc.b	nG5, $10
000A2504 E60F                       	smpsAlterVol        $0F
000A2506 C4                         	dc.b	nG5
000A2507 E6F1                       	smpsAlterVol        $F1
000A2509 E100                       	smpsAlterNote       $00
000A250B C2                         	dc.b	nF5
000A250C E60F                       	smpsAlterVol        $0F
000A250E 08                         	dc.b	$08
000A250F E6F1                       	smpsAlterVol        $F1
000A2511 C010                       	dc.b	nEb5, $10
000A2513 E60F                       	smpsAlterVol        $0F
000A2515 C0                         	dc.b	nEb5
000A2516 E6F1                       	smpsAlterVol        $F1
000A2518 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A251E E60F                       	smpsAlterVol        $0F
000A2520 C9                         	dc.b	nC6
000A2521 E6F1                       	smpsAlterVol        $F1
000A2523 C5                         	dc.b	nAb5
000A2524 E60F                       	smpsAlterVol        $0F
000A2526 08                         	dc.b	$08
000A2527 E6F1                       	smpsAlterVol        $F1
000A2529 C010                       	dc.b	nEb5, $10
000A252B E60F                       	smpsAlterVol        $0F
000A252D C0                         	dc.b	nEb5
000A252E E6F1                       	smpsAlterVol        $F1
000A2530 C208                       	dc.b	nF5, $08
000A2532 E1FF                       	smpsAlterNote       $FF
000A2534 C410                       	dc.b	nG5, $10
000A2536 E100                       	smpsAlterNote       $00
000A2538 C5C7                       	dc.b	nAb5, nBb5
000A253A E60F                       	smpsAlterVol        $0F
000A253C C7                         	dc.b	nBb5
000A253D E6F1                       	smpsAlterVol        $F1
000A253F C5                         	dc.b	nAb5
000A2540 E60F                       	smpsAlterVol        $0F
000A2542 08                         	dc.b	$08
000A2543 E6F1                       	smpsAlterVol        $F1
000A2545 E1FF                       	smpsAlterNote       $FF
000A2547 C410                       	dc.b	nG5, $10
000A2549 E60F                       	smpsAlterVol        $0F
000A254B C4                         	dc.b	nG5
000A254C E6F1                       	smpsAlterVol        $F1
000A254E C4                         	dc.b	nG5
000A254F E100                       	smpsAlterNote       $00
000A2551 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A2556 E60F                       	smpsAlterVol        $0F
000A2558 C2                         	dc.b	nF5
000A2559 E6F1                       	smpsAlterVol        $F1
000A255B E1FF                       	smpsAlterNote       $FF
000A255D C4                         	dc.b	nG5
000A255E E60F                       	smpsAlterVol        $0F
000A2560 08                         	dc.b	$08
000A2561 E6F1                       	smpsAlterVol        $F1
000A2563 10                         	dc.b	$10
000A2564 E60F                       	smpsAlterVol        $0F
000A2566 38                         	dc.b	$38
000A2567 E6F1                       	smpsAlterVol        $F1
000A2569 10                         	dc.b	$10
000A256A E60F                       	smpsAlterVol        $0F
000A256C C4                         	dc.b	nG5
000A256D E6F1                       	smpsAlterVol        $F1
000A256F E100                       	smpsAlterNote       $00
000A2571 C2                         	dc.b	nF5
000A2572 E60F                       	smpsAlterVol        $0F
000A2574 08                         	dc.b	$08
000A2575 E6F1                       	smpsAlterVol        $F1
000A2577 C010                       	dc.b	nEb5, $10
000A2579 E60F                       	smpsAlterVol        $0F
000A257B C0                         	dc.b	nEb5
000A257C E6F1                       	smpsAlterVol        $F1
000A257E BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000A2584 E60F                       	smpsAlterVol        $0F
000A2586 C9                         	dc.b	nC6
000A2587 E6F1                       	smpsAlterVol        $F1
000A2589 C5                         	dc.b	nAb5
000A258A E60F                       	smpsAlterVol        $0F
000A258C 08                         	dc.b	$08
000A258D E6F1                       	smpsAlterVol        $F1
000A258F C010                       	dc.b	nEb5, $10
000A2591 E60F                       	smpsAlterVol        $0F
000A2593 C0                         	dc.b	nEb5
000A2594 E6F1                       	smpsAlterVol        $F1
000A2596 C208                       	dc.b	nF5, $08
000A2598 E1FF                       	smpsAlterNote       $FF
000A259A C410                       	dc.b	nG5, $10
000A259C E100                       	smpsAlterNote       $00
000A259E C5C7                       	dc.b	nAb5, nBb5
000A25A0 E60F                       	smpsAlterVol        $0F
000A25A2 C7                         	dc.b	nBb5
000A25A3 E6F1                       	smpsAlterVol        $F1
000A25A5 C5                         	dc.b	nAb5
000A25A6 E60F                       	smpsAlterVol        $0F
000A25A8 08                         	dc.b	$08
000A25A9 E6F1                       	smpsAlterVol        $F1
000A25AB E1FF                       	smpsAlterNote       $FF
000A25AD C410                       	dc.b	nG5, $10
000A25AF E60F                       	smpsAlterVol        $0F
000A25B1 C4                         	dc.b	nG5
000A25B2 E6F1                       	smpsAlterVol        $F1
000A25B4 C4                         	dc.b	nG5
000A25B5 E100                       	smpsAlterNote       $00
000A25B7 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000A25BC E60F                       	smpsAlterVol        $0F
000A25BE 28                         	dc.b	$28
000A25BF E6F1                       	smpsAlterVol        $F1
000A25C1 C008 10                    	dc.b	nEb5, $08, $10
000A25C4 E60F                       	smpsAlterVol        $0F
000A25C6 21                         	dc.b	$21
000A25C7 E0C0                       	smpsPan             panCenter, $00
000A25C9 F6FF 29                    	smpsJump            GentleBreeze_Loop12
000A25CC                            
000A25CC                            ; FM2 Data
000A25CC                            GentleBreeze_FM2:
000A25CE E60C                       	smpsAlterVol        $0C
000A25D0 E0C0                       	smpsPan             panCenter, $00
000A25D2 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A25DE A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A25EA 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A25F6 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A2602 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A260E A039                       	dc.b	nG2, $39
000A2610                            
000A2610                            GentleBreeze_Jump04:
000A2610 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000A2613                            
000A2613                            GentleBreeze_Loop11:
000A2613 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000A261F A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000A262B 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000A2637 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000A2643 A3                         	dc.b	nBb2
000A2644 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000A2649 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000A2655 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000A2661 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000A266D 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000A2679 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000A2685 A039                       	dc.b	nG2, $39
000A2687 E0C0                       	smpsPan             panCenter, $00
000A2689 F6FF 85                    	smpsJump            GentleBreeze_Jump04
000A268C                            
000A268C                            ; FM3 Data
000A268C                            GentleBreeze_FM3:
000A268E E0C0                       	smpsPan             panCenter, $00
000A2690 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000A2698 E616                       	smpsAlterVol        $16
000A269A F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A269F                            
000A269F                            GentleBreeze_Loop0F:
000A269F C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A26A3 E1FF                       	smpsAlterNote       $FF
000A26A5 C4                         	dc.b	nG5
000A26A6 E100                       	smpsAlterNote       $00
000A26A8 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A26AD E608                       	smpsAlterVol        $08
000A26AF C080 08                    	dc.b	nEb5, nRst, $08
000A26B2 E6F8                       	smpsAlterVol        $F8
000A26B4 C7                         	dc.b	nBb5
000A26B5 E1FF                       	smpsAlterNote       $FF
000A26B7 C4                         	dc.b	nG5
000A26B8 E100                       	smpsAlterNote       $00
000A26BA C0BB                       	dc.b	nEb5, nBb4
000A26BC F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000A26C1 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A26C4 E1FF                       	smpsAlterNote       $FF
000A26C6 C4                         	dc.b	nG5
000A26C7 E100                       	smpsAlterNote       $00
000A26C9 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A26CE E608                       	smpsAlterVol        $08
000A26D0 C080 08                    	dc.b	nEb5, nRst, $08
000A26D3 E6F8                       	smpsAlterVol        $F8
000A26D5 E1FF                       	smpsAlterNote       $FF
000A26D7 C4                         	dc.b	nG5
000A26D8 E100                       	smpsAlterNote       $00
000A26DA C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A26E1 E1FF                       	smpsAlterNote       $FF
000A26E3 C4                         	dc.b	nG5
000A26E4 E100                       	smpsAlterNote       $00
000A26E6 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A26EB E1FF                       	smpsAlterNote       $FF
000A26ED C4                         	dc.b	nG5
000A26EE E100                       	smpsAlterNote       $00
000A26F0 C7                         	dc.b	nBb5
000A26F1 E1FF                       	smpsAlterNote       $FF
000A26F3 C4                         	dc.b	nG5
000A26F4 E100                       	smpsAlterNote       $00
000A26F6 C2C0 01                    	dc.b	nF5, nEb5, $01
000A26F9                            
000A26F9                            GentleBreeze_Jump03:
000A26F9 E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000A2700 E6FA                       	smpsAlterVol        $FA
000A2702 F4                         	smpsModOff
000A2703 E1FF                       	smpsAlterNote       $FF
000A2705 B850                       	dc.b	nG4, $50
000A2707 E100                       	smpsAlterNote       $00
000A2709 B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000A2715 E1FF                       	smpsAlterNote       $FF
000A2717 B810                       	dc.b	nG4, $10
000A2719 E100                       	smpsAlterNote       $00
000A271B BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000A2720 E1FF                       	smpsAlterNote       $FF
000A2722 B8                         	dc.b	nG4
000A2723 E100                       	smpsAlterNote       $00
000A2725 B610                       	dc.b	nF4, $10
000A2727 E1FF                       	smpsAlterNote       $FF
000A2729 B850                       	dc.b	nG4, $50
000A272B E100                       	smpsAlterNote       $00
000A272D B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000A2735 E1FF                       	smpsAlterNote       $FF
000A2737 AC08                       	dc.b	nG3, $08
000A2739 E100                       	smpsAlterNote       $00
000A273B AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000A2740 E1FF                       	smpsAlterNote       $FF
000A2742 B850                       	dc.b	nG4, $50
000A2744 E100                       	smpsAlterNote       $00
000A2746 BB08                       	dc.b	nBb4, $08
000A2748 E1FF                       	smpsAlterNote       $FF
000A274A B8                         	dc.b	nG4
000A274B E100                       	smpsAlterNote       $00
000A274D BDBB B6                    	dc.b	nC5, nBb4, nF4
000A2750 E1FF                       	smpsAlterNote       $FF
000A2752 B810 08                    	dc.b	nG4, $10, $08
000A2755 E100                       	smpsAlterNote       $00
000A2757 B6                         	dc.b	nF4
000A2758 E1FF                       	smpsAlterNote       $FF
000A275A B880                       	dc.b	nG4, nRst
000A275C E100                       	smpsAlterNote       $00
000A275E BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000A2761 E1FF                       	smpsAlterNote       $FF
000A2763 B810                       	dc.b	nG4, $10
000A2765 E100                       	smpsAlterNote       $00
000A2767 B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000A276E E1FF                       	smpsAlterNote       $FF
000A2770 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000A277E E606                       	smpsAlterVol        $06
000A2780 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000A2785 E100                       	smpsAlterNote       $00
000A2787                            
000A2787                            GentleBreeze_Loop10:
000A2787 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000A278B E1FF                       	smpsAlterNote       $FF
000A278D C4                         	dc.b	nG5
000A278E E100                       	smpsAlterNote       $00
000A2790 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A2795 E608                       	smpsAlterVol        $08
000A2797 C080 08                    	dc.b	nEb5, nRst, $08
000A279A E6F8                       	smpsAlterVol        $F8
000A279C C7                         	dc.b	nBb5
000A279D E1FF                       	smpsAlterNote       $FF
000A279F C4                         	dc.b	nG5
000A27A0 E100                       	smpsAlterNote       $00
000A27A2 C0BB                       	dc.b	nEb5, nBb4
000A27A4 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000A27A9 C0BD C9                    	dc.b	nEb5, nC5, nC6
000A27AC E1FF                       	smpsAlterNote       $FF
000A27AE C4                         	dc.b	nG5
000A27AF E100                       	smpsAlterNote       $00
000A27B1 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000A27B6 E608                       	smpsAlterVol        $08
000A27B8 C080 08                    	dc.b	nEb5, nRst, $08
000A27BB E6F8                       	smpsAlterVol        $F8
000A27BD E1FF                       	smpsAlterNote       $FF
000A27BF C4                         	dc.b	nG5
000A27C0 E100                       	smpsAlterNote       $00
000A27C2 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000A27C9 E1FF                       	smpsAlterNote       $FF
000A27CB C4                         	dc.b	nG5
000A27CC E100                       	smpsAlterNote       $00
000A27CE C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000A27D3 E1FF                       	smpsAlterNote       $FF
000A27D5 C4                         	dc.b	nG5
000A27D6 E100                       	smpsAlterNote       $00
000A27D8 C7                         	dc.b	nBb5
000A27D9 E1FF                       	smpsAlterNote       $FF
000A27DB C4                         	dc.b	nG5
000A27DC E100                       	smpsAlterNote       $00
000A27DE C2C0 01                    	dc.b	nF5, nEb5, $01
000A27E1 E0C0                       	smpsPan             panCenter, $00
000A27E3 F1                         	smpsModOn
000A27E4 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000A27E7                            
000A27E7                            ; FM4 Data
000A27E7                            GentleBreeze_FM4:
000A27E9 E0C0                       	smpsPan             panCenter, $00
000A27EB 80                         	dc.b	nRst
000A27EC                            
000A27EC                            GentleBreeze_Loop0D:
000A27EC 7F                         	dc.b	$7F
000A27ED F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000A27F2 77                         	dc.b	$77
000A27F5 E609                       	smpsAlterVol        $09
000A27F7 C001                       	dc.b	nEb5, $01
000A27F9                            
000A27F9                            GentleBreeze_Jump02:
000A27F9 E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000A27FE E607                       	smpsAlterVol        $07
000A2800 E1FF                       	smpsAlterNote       $FF
000A2802 C450                       	dc.b	nG5, $50
000A2804 E100                       	smpsAlterNote       $00
000A2806 C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000A2812 E1FF                       	smpsAlterNote       $FF
000A2814 C410                       	dc.b	nG5, $10
000A2816 E100                       	smpsAlterNote       $00
000A2818 C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000A281D E1FF                       	smpsAlterNote       $FF
000A281F C4                         	dc.b	nG5
000A2820 E100                       	smpsAlterNote       $00
000A2822 C210                       	dc.b	nF5, $10
000A2824 E1FF                       	smpsAlterNote       $FF
000A2826 C450                       	dc.b	nG5, $50
000A2828 E100                       	smpsAlterNote       $00
000A282A C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000A2832 E1FF                       	smpsAlterNote       $FF
000A2834 B808                       	dc.b	nG4, $08
000A2836 E100                       	smpsAlterNote       $00
000A2838 BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000A283D E1FF                       	smpsAlterNote       $FF
000A283F C450                       	dc.b	nG5, $50
000A2841 E100                       	smpsAlterNote       $00
000A2843 C708                       	dc.b	nBb5, $08
000A2845 E1FF                       	smpsAlterNote       $FF
000A2847 C4                         	dc.b	nG5
000A2848 E100                       	smpsAlterNote       $00
000A284A C9C7 C2                    	dc.b	nC6, nBb5, nF5
000A284D E1FF                       	smpsAlterNote       $FF
000A284F C410 08                    	dc.b	nG5, $10, $08
000A2852 E100                       	smpsAlterNote       $00
000A2854 C2                         	dc.b	nF5
000A2855 E1FF                       	smpsAlterNote       $FF
000A2857 C480                       	dc.b	nG5, nRst
000A2859 E100                       	smpsAlterNote       $00
000A285B C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000A285E E1FF                       	smpsAlterNote       $FF
000A2860 C410                       	dc.b	nG5, $10
000A2862 E100                       	smpsAlterNote       $00
000A2864 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000A286B E1FF                       	smpsAlterNote       $FF
000A286D C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000A2875                            
000A2875                            GentleBreeze_Loop0E:
000A2875 7F                         	dc.b	$7F
000A2876 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000A287B 77                         	dc.b	$77
000A287C E100                       	smpsAlterNote       $00
000A287E C001                       	dc.b	nEb5, $01
000A2880 E6F9                       	smpsAlterVol        $F9
000A2882 E0C0                       	smpsPan             panCenter, $00
000A2884 E100                       	smpsAlterNote       $00
000A2886 F6FF 71                    	smpsJump            GentleBreeze_Jump02
000A2889                            
000A2889                            ; FM5 Data
000A2889                            GentleBreeze_FM5:
000A288B E0C0                       	smpsPan             panCenter, $00
000A288D A5                         	dc.b	nC3
000A288E                            
000A288E                            GentleBreeze_Loop06:
000A288E 10                         	dc.b	$10
000A288F E607                       	smpsAlterVol        $07
000A2891 A5                         	dc.b	nC3
000A2892 E6F9                       	smpsAlterVol        $F9
000A2894 08                         	dc.b	$08
000A2895 E607                       	smpsAlterVol        $07
000A2897 A5                         	dc.b	nC3
000A2898 E608                       	smpsAlterVol        $08
000A289A A5                         	dc.b	nC3
000A289B E6F1                       	smpsAlterVol        $F1
000A289D 18                         	dc.b	$18
000A289E E607                       	smpsAlterVol        $07
000A28A0 10                         	dc.b	$10
000A28A1 E608                       	smpsAlterVol        $08
000A28A3 A5                         	dc.b	nC3
000A28A4 E6F1                       	smpsAlterVol        $F1
000A28A6 A5                         	dc.b	nC3
000A28A7 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000A28AC A5                         	dc.b	nC3
000A28AD                            
000A28AD                            GentleBreeze_Loop07:
000A28AD E607                       	smpsAlterVol        $07
000A28AF A5                         	dc.b	nC3
000A28B0 E6F9                       	smpsAlterVol        $F9
000A28B2 08                         	dc.b	$08
000A28B3 E607                       	smpsAlterVol        $07
000A28B5 A5                         	dc.b	nC3
000A28B6 E608                       	smpsAlterVol        $08
000A28B8 A5                         	dc.b	nC3
000A28B9 E6F1                       	smpsAlterVol        $F1
000A28BB 10                         	dc.b	$10
000A28BC F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000A28C1                            
000A28C1                            GentleBreeze_Loop08:
000A28C1 A5                         	dc.b	nC3
000A28C2 E607                       	smpsAlterVol        $07
000A28C4 A5                         	dc.b	nC3
000A28C5 E6F9                       	smpsAlterVol        $F9
000A28C7 08                         	dc.b	$08
000A28C8 E607                       	smpsAlterVol        $07
000A28CA A5                         	dc.b	nC3
000A28CB E608                       	smpsAlterVol        $08
000A28CD A5                         	dc.b	nC3
000A28CE E6F1                       	smpsAlterVol        $F1
000A28D0 18                         	dc.b	$18
000A28D1 E607                       	smpsAlterVol        $07
000A28D3 10                         	dc.b	$10
000A28D4 E608                       	smpsAlterVol        $08
000A28D6 A5                         	dc.b	nC3
000A28D7 E6F1                       	smpsAlterVol        $F1
000A28D9 A5                         	dc.b	nC3
000A28DA F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000A28DF A5                         	dc.b	nC3
000A28E0 E607                       	smpsAlterVol        $07
000A28E2 A5                         	dc.b	nC3
000A28E3 E6F9                       	smpsAlterVol        $F9
000A28E5 08                         	dc.b	$08
000A28E6 E607                       	smpsAlterVol        $07
000A28E8 A5                         	dc.b	nC3
000A28E9 E608                       	smpsAlterVol        $08
000A28EB A5                         	dc.b	nC3
000A28EC E6F1                       	smpsAlterVol        $F1
000A28EE 10                         	dc.b	$10
000A28EF E607                       	smpsAlterVol        $07
000A28F1 A5                         	dc.b	nC3
000A28F2 E6F9                       	smpsAlterVol        $F9
000A28F4 08                         	dc.b	$08
000A28F5 E607                       	smpsAlterVol        $07
000A28F7 A5                         	dc.b	nC3
000A28F8 E608                       	smpsAlterVol        $08
000A28FA A5                         	dc.b	nC3
000A28FB E6F1                       	smpsAlterVol        $F1
000A28FD 01                         	dc.b	$01
000A28FE                            
000A28FE                            GentleBreeze_Jump01:
000A28FE E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000A2901 E607                       	smpsAlterVol        $07
000A2903                            
000A2903                            GentleBreeze_Loop09:
000A2903 10                         	dc.b	$10
000A2904 E608                       	smpsAlterVol        $08
000A2906 A5                         	dc.b	nC3
000A2907 E6F1                       	smpsAlterVol        $F1
000A2909 08                         	dc.b	$08
000A290A E60F                       	smpsAlterVol        $0F
000A290C 18                         	dc.b	$18
000A290D E6F8                       	smpsAlterVol        $F8
000A290F F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000A2914 10                         	dc.b	$10
000A2915 E608                       	smpsAlterVol        $08
000A2917 A5                         	dc.b	nC3
000A2918 E6F1                       	smpsAlterVol        $F1
000A291A 08                         	dc.b	$08
000A291B E60F                       	smpsAlterVol        $0F
000A291D 18                         	dc.b	$18
000A291E E6F1                       	smpsAlterVol        $F1
000A2920                            
000A2920                            GentleBreeze_Loop0A:
000A2920 10                         	dc.b	$10
000A2921 E607                       	smpsAlterVol        $07
000A2923 A5                         	dc.b	nC3
000A2924 E6F9                       	smpsAlterVol        $F9
000A2926 08                         	dc.b	$08
000A2927 E607                       	smpsAlterVol        $07
000A2929 A5                         	dc.b	nC3
000A292A E608                       	smpsAlterVol        $08
000A292C A5                         	dc.b	nC3
000A292D E6F1                       	smpsAlterVol        $F1
000A292F 18                         	dc.b	$18
000A2930 E607                       	smpsAlterVol        $07
000A2932 10                         	dc.b	$10
000A2933 E608                       	smpsAlterVol        $08
000A2935 A5                         	dc.b	nC3
000A2936 E6F1                       	smpsAlterVol        $F1
000A2938 A5                         	dc.b	nC3
000A2939 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000A293E A5                         	dc.b	nC3
000A293F                            
000A293F                            GentleBreeze_Loop0B:
000A293F E607                       	smpsAlterVol        $07
000A2941 A5                         	dc.b	nC3
000A2942 E6F9                       	smpsAlterVol        $F9
000A2944 08                         	dc.b	$08
000A2945 E607                       	smpsAlterVol        $07
000A2947 A5                         	dc.b	nC3
000A2948 E608                       	smpsAlterVol        $08
000A294A A5                         	dc.b	nC3
000A294B E6F1                       	smpsAlterVol        $F1
000A294D 10                         	dc.b	$10
000A294E F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000A2953                            
000A2953                            GentleBreeze_Loop0C:
000A2953 A5                         	dc.b	nC3
000A2954 E607                       	smpsAlterVol        $07
000A2956 A5                         	dc.b	nC3
000A2957 E6F9                       	smpsAlterVol        $F9
000A2959 08                         	dc.b	$08
000A295A E607                       	smpsAlterVol        $07
000A295C A5                         	dc.b	nC3
000A295D E608                       	smpsAlterVol        $08
000A295F A5                         	dc.b	nC3
000A2960 E6F1                       	smpsAlterVol        $F1
000A2962 18                         	dc.b	$18
000A2963 E607                       	smpsAlterVol        $07
000A2965 10                         	dc.b	$10
000A2966 E608                       	smpsAlterVol        $08
000A2968 A5                         	dc.b	nC3
000A2969 E6F1                       	smpsAlterVol        $F1
000A296B A5                         	dc.b	nC3
000A296C F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000A2971 A5                         	dc.b	nC3
000A2972 E607                       	smpsAlterVol        $07
000A2974 A5                         	dc.b	nC3
000A2975 E6F9                       	smpsAlterVol        $F9
000A2977 08                         	dc.b	$08
000A2978 E607                       	smpsAlterVol        $07
000A297A A5                         	dc.b	nC3
000A297B E608                       	smpsAlterVol        $08
000A297D A5                         	dc.b	nC3
000A297E E6F1                       	smpsAlterVol        $F1
000A2980 10                         	dc.b	$10
000A2981 E607                       	smpsAlterVol        $07
000A2983 A5                         	dc.b	nC3
000A2984 E6F9                       	smpsAlterVol        $F9
000A2986 08                         	dc.b	$08
000A2987 E607                       	smpsAlterVol        $07
000A2989 A5                         	dc.b	nC3
000A298A E608                       	smpsAlterVol        $08
000A298C A5                         	dc.b	nC3
000A298D E6F1                       	smpsAlterVol        $F1
000A298F 01                         	dc.b	$01
000A2990 E0C0                       	smpsPan             panCenter, $00
000A2992 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000A2995                            
000A2995                            ; DAC Data
000A2995                            GentleBreeze_DAC:
000A2995 81                         	dc.b	dKick
000A2996                            
000A2996                            GentleBreeze_Loop00:
000A2996 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A299C F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000A29A1 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A29AC                            
000A29AC                            GentleBreeze_Loop01:
000A29AC 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A29B2 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000A29B7 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A29C1                            
000A29C1                            GentleBreeze_Jump00:
000A29C1 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000A29C5                            
000A29C5                            GentleBreeze_Loop02:
000A29C5 81                         	dc.b	dKick
000A29C6                            
000A29C6                            GentleBreeze_Loop03:
000A29C6 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000A29D2 088A                       	dc.b	$08, dLowTimpani
000A29D4 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000A29D9 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000A29E5 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000A29EA F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000A29EF                            
000A29EF                            GentleBreeze_Loop04:
000A29EF 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A29F5 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000A29FA 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000A2A05                            
000A2A05                            GentleBreeze_Loop05:
000A2A05 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000A2A0B F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000A2A10 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000A2A1A F6FF A5                    	smpsJump            GentleBreeze_Jump00
000A2A1D                            
000A2A1D                            ; PSG 1 Data
000A2A1D                            GentleBreeze_PSG1:
000A2A1D 80                         	dc.b	nRst
000A2A1E                            
000A2A1E                            GentleBreeze_LoopPSG02:
000A2A1E 7F                         	dc.b	$7F
000A2A1F F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000A2A24 08                         	dc.b	$08
000A2A25 EC04                       	smpsPSGAlterVol     $04
000A2A27                            
000A2A27                            GentleBreeze_JumpPSG01:
000A2A27 A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000A2A33 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000A2A3B                            
000A2A3B                            GentleBreeze_LoopPSG03:
000A2A3B 7F                         	dc.b	$7F
000A2A3C F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000A2A41 08A3 01                    	dc.b	$08, nBb2, $01
000A2A44 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000A2A47                            
000A2A47                            ; PSG2 Data
000A2A47                            GentleBreeze_PSG2:
000A2A47 80                         	dc.b	nRst
000A2A48                            
000A2A48                            GentleBreeze_LoopPSG00:
000A2A48 7F                         	dc.b	$7F
000A2A49 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000A2A4E 08                         	dc.b	$08
000A2A4F EC04                       	smpsPSGAlterVol     $04
000A2A51                            
000A2A51                            GentleBreeze_JumpPSG00:
000A2A51 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000A2A5D A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000A2A65                            
000A2A65                            GentleBreeze_LoopPSG01:
000A2A65 7F                         	dc.b	$7F
000A2A66 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000A2A6B 08A8 01                    	dc.b	$08, nEb3, $01
000A2A6E F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000A2A71                            
000A2A71                            GentleBreeze_Voices:
000A2A71                            ;	Voice $00
000A2A71                            ;	$0C
000A2A71                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000A2A71                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000A2A71                            	smpsVcAlgorithm     $04
000A2A71                            	smpsVcFeedback      $01
000A2A71                            	smpsVcUnusedBits    $00
000A2A71                            	smpsVcDetune        $07, $02, $07, $02
000A2A71                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000A2A71                            	smpsVcRateScale     $00, $00, $00, $00
000A2A71                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2A71                            	smpsVcAmpMod        $00, $00, $00, $00
000A2A71                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000A2A71                            	smpsVcDecayRate2    $01, $00, $00, $00
000A2A71                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000A2A71                            	smpsVcReleaseRate   $09, $01, $04, $03
000A2A71 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000A2A8A                            
000A2A8A                            ;	Voice $01
000A2A8A                            ;	$38
000A2A8A                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000A2A8A                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000A2A8A                            	smpsVcAlgorithm     $00
000A2A8A                            	smpsVcFeedback      $07
000A2A8A                            	smpsVcUnusedBits    $00
000A2A8A                            	smpsVcDetune        $03, $07, $01, $05
000A2A8A                            	smpsVcCoarseFreq    $00, $00, $07, $04
000A2A8A                            	smpsVcRateScale     $00, $02, $00, $02
000A2A8A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2A8A                            	smpsVcAmpMod        $00, $00, $00, $00
000A2A8A                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000A2A8A                            	smpsVcDecayRate2    $00, $00, $10, $00
000A2A8A                            	smpsVcDecayLevel    $00, $00, $00, $00
000A2A8A                            	smpsVcReleaseRate   $08, $05, $05, $05
000A2A8A 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000A2AA3                            
000A2AA3                            ;	Voice $02
000A2AA3                            ;	$00
000A2AA3                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A2AA3                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A2AA3                            	smpsVcAlgorithm     $00
000A2AA3                            	smpsVcFeedback      $00
000A2AA3                            	smpsVcUnusedBits    $00
000A2AA3                            	smpsVcDetune        $00, $00, $00, $00
000A2AA3                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A2AA3                            	smpsVcRateScale     $00, $00, $00, $00
000A2AA3                            	smpsVcAttackRate    $00, $00, $00, $00
000A2AA3                            	smpsVcAmpMod        $00, $00, $00, $00
000A2AA3                            	smpsVcDecayRate1    $00, $00, $00, $00
000A2AA3                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2AA3                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A2AA3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2AA3 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2ABC                            
000A2ABC                            ;	Voice $03
000A2ABC                            ;	$36
000A2ABC                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000A2ABC                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000A2ABC                            	smpsVcAlgorithm     $06
000A2ABC                            	smpsVcFeedback      $06
000A2ABC                            	smpsVcUnusedBits    $00
000A2ABC                            	smpsVcDetune        $00, $00, $00, $00
000A2ABC                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000A2ABC                            	smpsVcRateScale     $00, $00, $00, $00
000A2ABC                            	smpsVcAttackRate    $1F, $00, $18, $16
000A2ABC                            	smpsVcAmpMod        $00, $00, $00, $00
000A2ABC                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000A2ABC                            	smpsVcDecayRate2    $00, $00, $12, $00
000A2ABC                            	smpsVcDecayLevel    $04, $04, $02, $00
000A2ABC                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000A2ABC 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000A2AD5                            
000A2AD5                            ;	Voice $04
000A2AD5                            ;	$07
000A2AD5                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000A2AD5                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000A2AD5                            	smpsVcAlgorithm     $07
000A2AD5                            	smpsVcFeedback      $00
000A2AD5                            	smpsVcUnusedBits    $00
000A2AD5                            	smpsVcDetune        $07, $06, $05, $00
000A2AD5                            	smpsVcCoarseFreq    $05, $04, $03, $05
000A2AD5                            	smpsVcRateScale     $00, $01, $01, $01
000A2AD5                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000A2AD5                            	smpsVcAmpMod        $00, $00, $00, $00
000A2AD5                            	smpsVcDecayRate1    $17, $17, $17, $17
000A2AD5                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2AD5                            	smpsVcDecayLevel    $02, $02, $02, $02
000A2AD5                            	smpsVcReleaseRate   $06, $06, $06, $06
000A2AD5 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2AEE                            
000A2AEE                            ;	Voice $05
000A2AEE                            ;	$3C
000A2AEE                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000A2AEE                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000A2AEE                            	smpsVcAlgorithm     $04
000A2AEE                            	smpsVcFeedback      $07
000A2AEE                            	smpsVcUnusedBits    $00
000A2AEE                            	smpsVcDetune        $06, $06, $02, $02
000A2AEE                            	smpsVcCoarseFreq    $01, $03, $01, $01
000A2AEE                            	smpsVcRateScale     $00, $00, $00, $00
000A2AEE                            	smpsVcAttackRate    $0E, $14, $10, $13
000A2AEE                            	smpsVcAmpMod        $00, $00, $00, $00
000A2AEE                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000A2AEE                            	smpsVcDecayRate2    $04, $04, $04, $04
000A2AEE                            	smpsVcDecayLevel    $02, $01, $01, $01
000A2AEE                            	smpsVcReleaseRate   $07, $07, $07, $07
000A2AEE 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000A2B07                            
000A2B07                            
000A2B08 00                         		even
000A2B08                            ; ---------------------------------------------------------------------------
000A2B08                            ; Sound	effect pointers
000A2B08                            ; ---------------------------------------------------------------------------
000A2B08 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000A2B14 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000A2B20 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000A2B2C 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000A2B38 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000A2B44 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000A2B50 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000A2B5C 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000A2B68 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000A2B74 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000A2B80 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000A2B8C 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000A2B98 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000A2BA4 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000A2BB0 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000A2BBC 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000A2BC8 0000 0000                  SoundD0Index:	dc.l SoundD0
000A2BCC                            SoundA0:	include	sound\jump.asm
000A2BCC                            jump_Header:
000A2BCC =00000001                  smpsHeaderStartSong = 1
000A2BCC 0000                       	smpsHeaderVoice     jump_Voices
000A2BCE 01                         	smpsHeaderTempoSFX  $01
000A2BCF 01                         	smpsHeaderChanSFX   $01
000A2BD0                            
000A2BDC                            
000A2BDC                            ; FM4 Data
000A2BDC                            jump_FM4:
000A2BDE E000                       	smpsPan             panNone, $00
000A2BE0 E607                       	smpsAlterVol        $07
000A2BE2 E0C0                       	smpsPan             panCenter, $00
000A2BE4 9903 B1                    	dc.b	nC2, $03, nC4
000A2BE7 E607                       	smpsAlterVol        $07
000A2BE9 E040                       	smpsPan             panRight, $00
000A2BEB 99B1                       	dc.b	nC2, nC4
000A2BED E60A                       	smpsAlterVol        $0A
000A2BEF E080                       	smpsPan             panLeft, $00
000A2BF1 99B1                       	dc.b	nC2, nC4
000A2BF3 E603                       	smpsAlterVol        $03
000A2BF5 E0C0                       	smpsPan             panCenter, $00
000A2BF7 99B1                       	dc.b	nC2, nC4
000A2BF9 E000                       	smpsPan             panNone, $00
000A2BFB 803D                       	dc.b	nRst, $3D
000A2BFD F2                         	smpsStop
000A2BFE                            
000A2BFE                            ; PSG3 Data
000A2BFE                            jump_PSG3:
000A2BFE F3E7                       	smpsPSGform         $E7
000A2C00 8056                       	dc.b	nRst, $56
000A2C02 F2                         	smpsStop
000A2C03                            
000A2C03                            jump_Voices:
000A2C03                            ;	Voice $00
000A2C03                            ;	$3C
000A2C03                            ;	$00, $0F, $01, $00, 	$1F, $1F, $1F, $1F, 	$00, $12, $14, $0E
000A2C03                            ;	$00, $11, $00, $11, 	$0F, $EF, $FF, $0F, 	$00, $00, $00, $00
000A2C03                            	smpsVcAlgorithm     $04
000A2C03                            	smpsVcFeedback      $07
000A2C03                            	smpsVcUnusedBits    $00
000A2C03                            	smpsVcDetune        $00, $00, $00, $00
000A2C03                            	smpsVcCoarseFreq    $00, $01, $0F, $00
000A2C03                            	smpsVcRateScale     $00, $00, $00, $00
000A2C03                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2C03                            	smpsVcAmpMod        $00, $00, $00, $00
000A2C03                            	smpsVcDecayRate1    $0E, $14, $12, $00
000A2C03                            	smpsVcDecayRate2    $11, $00, $11, $00
000A2C03                            	smpsVcDecayLevel    $00, $0F, $0E, $00
000A2C03                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2C03 3C00 0F01 001F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2C1C                            
000A2C1C                            
000A2C1C                            		even
000A2C1C                            SoundA1:	incbin	sound\soundA1.bin
000A2C46                            		even
000A2C46                            SoundA2:	incbin	sound\soundA2.bin
000A2C66                            		even
000A2C66                            SoundA3:	incbin	sound\soundA3.bin
000A2C98                            		even
000A2C98                            SoundA4:	incbin	sound\soundA4.bin
000A2CCE                            		even
000A2CCE                            SoundA5:	include	sound\fart.asm
000A2CCE                            Fart_Header:
000A2CCE =00000001                  smpsHeaderStartSong = 1
000A2CCE 0000                       	smpsHeaderVoice     Fart_Voices
000A2CD0 01                         	smpsHeaderTempoSFX  $01
000A2CD1 04                         	smpsHeaderChanSFX   $04
000A2CD2                            
000A2CEA                            
000A2CEA                            Fart_FM3:
000A2CEC E607                       	smpsAlterVol        $07
000A2CEE E0C0                       	smpsPan             panCenter, $00
000A2CF0 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2CF5 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000A2CF8 E1FE                       	smpsAlterNote       $FE
000A2CFA A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000A2CFD E100                       	smpsAlterNote       $00
000A2CFF A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000A2D04 F2                         	smpsStop
000A2D05                            
000A2D05                            ; FM4 Data
000A2D05                            Fart_FM4:
000A2D07 E0C0                       	smpsPan             panCenter, $00
000A2D09 8006                       	dc.b	nRst, $06
000A2D0D E616                       	smpsAlterVol        $16
000A2D0F E080                       	smpsPan             panLeft, $00
000A2D11 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2D16 A212                       	dc.b	nA2, $12
000A2D18 E60A                       	smpsAlterVol        $0A
000A2D1A E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2D1D E603                       	smpsAlterVol        $03
000A2D1F E7A2                       	dc.b	smpsNoAttack, nA2
000A2D21 E603                       	smpsAlterVol        $03
000A2D23 E7A2                       	dc.b	smpsNoAttack, nA2
000A2D25 E604                       	smpsAlterVol        $04
000A2D27 E7A2                       	dc.b	smpsNoAttack, nA2
000A2D29 E606                       	smpsAlterVol        $06
000A2D2B E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000A2D2E E610                       	smpsAlterVol        $10
000A2D30 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2D33 E610                       	smpsAlterVol        $10
000A2D35 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000A2D3A F2                         	smpsStop
000A2D3B                            
000A2D3B                            ; FM5 Data
000A2D3B                            Fart_FM5:
000A2D3D E0C0                       	smpsPan             panCenter, $00
000A2D3F 8009                       	dc.b	nRst, $09
000A2D43 E616                       	smpsAlterVol        $16
000A2D45 E040                       	smpsPan             panRight, $00
000A2D47 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000A2D4C A215                       	dc.b	nA2, $15
000A2D4E E60A                       	smpsAlterVol        $0A
000A2D50 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2D53 E603                       	smpsAlterVol        $03
000A2D55 E7A2                       	dc.b	smpsNoAttack, nA2
000A2D57 E603                       	smpsAlterVol        $03
000A2D59 E7A2                       	dc.b	smpsNoAttack, nA2
000A2D5B E604                       	smpsAlterVol        $04
000A2D5D E7A2                       	dc.b	smpsNoAttack, nA2
000A2D5F E606                       	smpsAlterVol        $06
000A2D61 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000A2D64 E610                       	smpsAlterVol        $10
000A2D66 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000A2D69 E610                       	smpsAlterVol        $10
000A2D6B E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000A2D70 F2                         	smpsStop
000A2D71                            
000A2D71                            ; PSG3 Data
000A2D71                            Fart_PSG3:
000A2D71 F2                         	smpsStop
000A2D72                            
000A2D72                            ; FM Voices
000A2D72                            Fart_Voices:
000A2D72                            ;	Voice $00
000A2D72                            ;	$39
000A2D72                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000A2D72                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000A2D72                            	smpsVcAlgorithm     $01
000A2D72                            	smpsVcFeedback      $07
000A2D72                            	smpsVcUnusedBits    $00
000A2D72                            	smpsVcDetune        $00, $07, $03, $07
000A2D72                            	smpsVcCoarseFreq    $01, $01, $02, $00
000A2D72                            	smpsVcRateScale     $00, $03, $03, $03
000A2D72                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A2D72                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D72                            	smpsVcDecayRate1    $00, $00, $00, $04
000A2D72                            	smpsVcDecayRate2    $00, $00, $16, $1F
000A2D72                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000A2D72                            	smpsVcReleaseRate   $0A, $09, $00, $00
000A2D72 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000A2D8B                            
000A2D8B                            ;	Voice $01
000A2D8B                            ;	$00
000A2D8B                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000A2D8B                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000A2D8B                            	smpsVcAlgorithm     $00
000A2D8B                            	smpsVcFeedback      $00
000A2D8B                            	smpsVcUnusedBits    $00
000A2D8B                            	smpsVcDetune        $00, $00, $00, $00
000A2D8B                            	smpsVcCoarseFreq    $00, $00, $00, $00
000A2D8B                            	smpsVcRateScale     $00, $00, $00, $00
000A2D8B                            	smpsVcAttackRate    $00, $00, $00, $00
000A2D8B                            	smpsVcAmpMod        $00, $00, $00, $00
000A2D8B                            	smpsVcDecayRate1    $00, $00, $00, $00
000A2D8B                            	smpsVcDecayRate2    $00, $00, $00, $00
000A2D8B                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000A2D8B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000A2D8B 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2D8B 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000A2DA4                            		even
000A2DA4                            SoundA6:	incbin	sound\soundA6.bin
000A2DD4                            		even
000A2DD4                            SoundA7:	incbin	sound\soundA7.bin
000A2E04                            		even
000A2E04                            SoundA8:	incbin	sound\soundA8.bin
000A2E38                            		even
000A2E38                            SoundA9:	incbin	sound\soundA9.bin
000A2E4A                            		even
000A2E4A                            SoundAA:	incbin	sound\soundAA.bin
000A2E8C                            		even
000A2E8C                            SoundAB:	incbin	sound\soundAB.bin
000A2EAC                            		even
000A2EAC                            SoundAC:	incbin	sound\soundAC.bin
000A2EE0                            		even
000A2EE0                            SoundAD:	incbin	sound\soundAD.bin
000A2F16                            		even
000A2F16                            SoundAE:	incbin	sound\soundAE.bin
000A2F60                            		even
000A2F60                            SoundAF:	incbin	sound\soundAF.bin
000A2F8E                            		even
000A2F8E                            SoundB0:	incbin	sound\soundB0.bin
000A2FC0                            		even
000A2FC0                            SoundB1:	incbin	sound\soundB1.bin
000A2FEC                            		even
000A2FEC                            SoundB2:	incbin	sound\soundB2.bin
000A303C                            		even
000A303C                            SoundB3:	incbin	sound\soundB3.bin
000A3086                            		even
000A3086                            SoundB4:	include	sound\soundB4.asm
000A3086                            SndB4_Bumper_Header:
000A3086 =00000001                  smpsHeaderStartSong = 1
000A3086 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000A3088 01                         	smpsHeaderTempoSFX  $01
000A3089 03                         	smpsHeaderChanSFX   $03
000A308A                            
000A309C                            
000A309C                            ; FM5 Data
000A309C                            SndB4_Bumper_FM5:
000A309E F600 00                    	smpsJump            SndB4_Bumper_Jump00
000A30A1                            
000A30A1                            ; FM4 Data
000A30A1                            SndB4_Bumper_FM4:
000A30A1 F2                         	smpsStop
000A30A2                            
000A30A2                            SndB4_Bumper_Jump00:
000A30A2 A020                       	dc.b	nG2, $20
000A30A4 F2                         	smpsStop
000A30A5                            
000A30A5                            ; FM3 Data
000A30A5                            SndB4_Bumper_FM3:
000A30A5 F2                         	smpsStop
000A30A6                            
000A30A6                            SndB4_Bumper_Voices:
000A30A6                            ;	Voice $00
000A30A6                            ;	$32
000A30A6                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000A30A6                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000A30A6                            	smpsVcAlgorithm     $02
000A30A6                            	smpsVcFeedback      $06
000A30A6                            	smpsVcUnusedBits    $00
000A30A6                            	smpsVcDetune        $07, $07, $02, $00
000A30A6                            	smpsVcCoarseFreq    $00, $00, $00, $04
000A30A6                            	smpsVcRateScale     $00, $00, $00, $00
000A30A6                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000A30A6                            	smpsVcAmpMod        $00, $00, $00, $00
000A30A6                            	smpsVcDecayRate1    $08, $00, $00, $09
000A30A6                            	smpsVcDecayRate2    $0B, $00, $00, $09
000A30A6                            	smpsVcDecayLevel    $00, $00, $00, $00
000A30A6                            	smpsVcReleaseRate   $0F, $00, $00, $00
000A30A6 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A30A6 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000A30C0 00                         		even
000A30C0                            SoundB5:	incbin	sound\soundB5.bin
000A30DE 00                         		even
000A30DE                            SoundB6:	incbin	sound\soundB6.bin
000A30FC                            		even
000A30FC                            SoundB7:	incbin	sound\soundB7.bin
000A3138                            		even
000A3138                            SoundB8:	incbin	sound\soundB8.bin
000A3156                            		even
000A3156                            SoundB9:	incbin	sound\soundB9.bin
000A31BA                            		even
000A31BA                            SoundBA:	incbin	sound\soundBA.bin
000A31E2                            		even
000A31E2                            SoundBB:	incbin	sound\soundBB.bin
000A320E                            		even
000A320E                            SoundBC:	incbin	sound\soundBC.bin
000A3250                            		even
000A3250                            SoundBD:	incbin	sound\soundBD.bin
000A32A4                            		even
000A32A4                            SoundBE:	incbin	sound\soundBE.bin
000A32DE                            		even
000A32DE                            SoundBF:	incbin	sound\soundBF.bin
000A3350                            		even
000A3350                            SoundC0:	incbin	sound\soundC0.bin
000A337E                            		even
000A337E                            SoundC1:	incbin	sound\soundC1.bin
000A33D8                            		even
000A33D8                            SoundC2:	incbin	sound\soundC2.bin
000A3402                            		even
000A3402                            SoundC3:	incbin	sound\soundC3.bin
000A347C                            		even
000A347C                            SoundC4:	incbin	sound\soundC4.bin
000A357A                            		even
000A357A                            SoundC5:	incbin	sound\soundC5.bin
000A35E2                            		even
000A35E2                            SoundC6:	incbin	sound\soundC6.bin
000A3624                            		even
000A3624                            SoundC7:	incbin	sound\soundC7.bin
000A3652                            		even
000A3652                            SoundC8:	incbin	sound\soundC8.bin
000A3664                            		even
000A3664                            SoundC9:	incbin	sound\soundC9.bin
000A3692                            		even
000A3692                            SoundCA:	incbin	sound\soundCA.bin
000A36C0                            		even
000A36C0                            SoundCB:	incbin	sound\soundCB.bin
000A370C                            		even
000A370C                            SoundCC:	incbin	sound\C9.ssf
000A373A                            		even
000A373A                            SoundCD:	incbin	sound\soundCD.bin
000A3766                            		even
000A3766                            SoundCE:	incbin	sound\soundCE.bin
000A3784 00                         		even
000A3784                            SoundCF:	incbin	sound\soundCF.bin
000A37BC                            		even
000A37BC                            SoundD0:	incbin	sound\soundD0.bin
000A37F6                            		even
000A37F6                            SegaPCM:	incbin	sound\segapcm.bin
000BD94C                            SegaPCM_end:	even
000BD94C                            
000BD94C                            IdiotPCM:	incbin	sound\youare.bin
000C7A1E 00                         IdiotPCM_end:	even
000C7A1E                            
000C7A1E                            Minecraft:	include	minecraft\code\main.asm
000C7A1E                            ; Minecraft: Very Legacy Console Edition
000C7A1E                            ; Main file
000C7A1E                            
000C7A1E                            ;	align	$20000
000C7A1E                            	opt	l.
000C7A1E                            	include	"minecraft\code\variables.asm"
000C7A1E                            ; Minecraft: Very Legacy Console Edition
000C7A1E                            ; Variable Definitions
000C7A1E                            
000C7A1E =00000040                  MAP_HEIGHT	equ	64
000C7A1E =00000100                  MAP_WIDTH	equ	256
000C7A1E                            
000C7A1E                            		rsset	$FF0000
000C7A1E =00FF0000                  mcRAM		rs.b	0
000C7A1E =00FF0000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
000C7A1E =00FF4000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
000C7A1E                            
000C7A1E                            		rsset	$FFFF8000
000C7A1E =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
000C7A1E =FFFF8E80                  planeBuffer_End	rs.b	0
000C7A1E =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
000C7A1E                            
000C7A1E =FFFF8E80                  camXPosFG	rs.w	1			; camera foreground layout x position
000C7A1E =FFFF8E82                  camYposFG	rs.w	1			; camera foreground layout y position
000C7A1E =FFFF8E84                  camXPosBG	rs.w	1			; camera background layout x position
000C7A1E =FFFF8E86                  camYposBG	rs.w	1			; camera background layout y position
000C7A1E                            
000C7A1E                            		rsset	__rs&$FFFFFF
000C7A1E =00FF8E88                  mcRAM_End	rs.b	0
000C7A1E =00FF8E88                  mcRAM_End	rs.b	0
000C7A1E                            	include	"minecraft\code\macros.asm"
000C7A1E                            ; =========================================================================================================================================================
000C7A1E                            ; MegaDrive macros
000C7A1E                            ; =========================================================================================================================================================
000C7A1E                            clrRAM		macro	starta, enda
000C7A1E                            		local	endaddr
000C7A1E                            		if narg<2
000C7A1E                            endaddr			EQUS	"\starta\_End"
000C7A1E                            		else
000C7A1E                            endaddr			EQUS	"\enda"
000C7A1E                            		endif
000C7A1E                            
000C7A1E                            		moveq	#0,d0
000C7A1E                            
000C7A1E                            		if ((\starta)&$8000)=0
000C7A1E                            			lea	\starta,a1
000C7A1E                            		else
000C7A1E                            			lea	(\starta).w,a1
000C7A1E                            		endif
000C7A1E                            		if (\starta)&1
000C7A1E                            			move.b	d0,(a1)+
000C7A1E                            		endif
000C7A1E                            
000C7A1E                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
000C7A1E                            .Clear\@:	move.l	d0,(a1)+
000C7A1E                            		dbf	d1,.Clear\@
000C7A1E                            
000C7A1E                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
000C7A1E                            			move.w	d0,(a1)+
000C7A1E                            		endif
000C7A1E                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
000C7A1E                            			move.b	d0,(a1)+
000C7A1E                            		endif
000C7A1E                            		endm
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; Disable interrupts
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; ARGUMENTS:
000C7A1E                            ;	Nothing
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; RETURNS:
000C7A1E                            ;	Nothing
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            intsOff		macros
000C7A1E                            		ori	#$700,sr
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; Enable interrupts
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; ARGUMENTS:
000C7A1E                            ;	Nothing
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; RETURNS:
000C7A1E                            ;	Nothing
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            intsOn		macros
000C7A1E                            		andi	#$F8FF,sr
000C7A1E                            
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; VDP command instruction
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; ARGUMENTS:
000C7A1E                            ;	addr	- Address in VDP memory
000C7A1E                            ;	type	- Type of VDP memory
000C7A1E                            ;	rwd	- VDP command
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; RETURNS:
000C7A1E                            ;	Nothing
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E =00000021                  VRAM		EQU	%100001		; VRAM
000C7A1E =0000002B                  CRAM		EQU	%101011		; CRAM
000C7A1E =00000025                  VSRAM		EQU	%100101		; VSRAM
000C7A1E =0000000C                  READ		EQU	%001100		; VDP read
000C7A1E =00000007                  WRITE		EQU	%000111		; VDP write
000C7A1E =00000027                  DMA		EQU	%100111		; VDP DMA
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            vdpCmd		macro	ins, addr, type, rwd, end, end2
000C7A1E                            		if narg=5
000C7A1E                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
000C7A1E                            		elseif narg>=6
000C7A1E                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
000C7A1E                            		else
000C7A1E                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
000C7A1E                            		endif
000C7A1E                            		endm
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; VDP DMA from 68000 memory to VDP memory
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; ARGUMENTS:
000C7A1E                            ;	src	- Source address in 68000 memory
000C7A1E                            ;	dest	- Destination address in VDP memory
000C7A1E                            ;	len	- Length of data in bytes
000C7A1E                            ;	type	- Type of VDP memory
000C7A1E                            ;	a6.l	- VDP control port
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; RETURNS:
000C7A1E                            ;	Nothing
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            dma68k		macro	src, dest, len, type
000C7A1E                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
000C7A1E                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
000C7A1E                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
000C7A1E                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
000C7A1E                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
000C7A1E                            		move.w	(sp)+,(a6)
000C7A1E                            		endm
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; Fill VRAM with byte
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; ARGUMENTS:
000C7A1E                            ;	byte	- Byte to fill VRAM with
000C7A1E                            ;	addr	- Address in VRAM
000C7A1E                            ;	len	- Length of fill in bytes
000C7A1E                            ;	a6.l	- VDP control port
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; RETURNS:
000C7A1E                            ;	Nothing
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            dmaFill		macro	byte, addr, len
000C7A1E                            		move.w	#$8F01,(a6)
000C7A1E                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000C7A1E                            		move.w	#$9780,(a6)
000C7A1E                            		move.l	#$40000080|(((\addr)&$3FFF)<<16)|(((\addr)&$C000)>>14),(a6)
000C7A1E                            		move.w	#(\byte)<<8,-4(a6)
000C7A1E                            		waitDMA	(a6)
000C7A1E                            		move.w	#$8F02,(a6)
000C7A1E                            		endm
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; Copy a region of VRAM to a location in VRAM
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; ARGUMENTS:
000C7A1E                            ;	src	- Source address in VRAM
000C7A1E                            ;	dest	- Destination address in VRAM
000C7A1E                            ;	len	- Length of copy in bytes
000C7A1E                            ;	a6.l	- VDP control port
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            ; RETURNS:
000C7A1E                            ;	Nothing
000C7A1E                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
000C7A1E                            dmaCopy		macro	src, dest, len
000C7A1E                            		move.w	#$8F01,(a6)
000C7A1E                            		move.l	#$94009300|((((\len)-1)&$FF00)<<8)|(((\len)-1)&$FF),(a6)
000C7A1E                            		move.l	#$96009500|(((\src)&$FF00)<<8)|((\src)&$FF),(a6)
000C7A1E                            		move.w	#$97C0,(a6)
000C7A1E                            		move.l	#$000000C0|(((\dest)&$3FFF)<<16)|(((\dest)&$C000)>>14),(a6)
000C7A1E                            		waitDMA	(a6)
000C7A1E                            		move.w	#$8F02,(a6)
000C7A1E                            		endm
000C7A1E                            		endm
000C7A1E                            
000C7A1E                            MC_Init:
000C7A1E 007C 0700                  		intsOff						; disable CPU interrupts
000C7A22 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
000C7A2A                            
000C7A2A 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
000C7A30 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
000C7A34                            
000C7A34 3CBC 8230                  		move.w	#$8200+($C000>>10),(a6)			; set plane A address
000C7A38 3CBC 8334                  		move.w	#$8300+($D000>>10),(a6)			; set plane W address
000C7A3C 3CBC 8407                  		move.w	#$8400+($E000>>13),(a6)			; set plane B address
000C7A40 3CBC 857C                  		move.w	#$8500+($F800>>9),(a6)			; set sprite table address
000C7A44                            		
000C7A44 3CBC 8B00                  		move.w	#$8B00,(a6)				; EXT-INT off, VScroll by screen, HScroll by screen
000C7A48 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
000C7A4C 3CBC 8D3F                  		move.w	#$8D00+($FC00>>10),(a6)			; set HScroll table address
000C7A50 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000C7A54 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
000C7A58                            
000C7A6A 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
000C7A6E                            
000C7A6E                            .waitVBlank:	
000C7A6E 44D6                       		move.w	(a6),ccr				; is v-blank active?
000C7A70 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
000C7A72                            
000C7AA6                            
000C7AA6 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
000C7AAA 027C F8FF                  		intsOn						; enable CPU interrupts
000C7AAE                            
000C7AAE 41FA 0000                  		lea	MC_BlockRender(pc),a0
000C7AB2 43F8 8000                  		lea	(planeBuffer).w,a1
000C7AB6 7E2E                       		moveq	#$2F-1,d7
000C7AB8                            
000C7AB8                            .loopLo:
000C7AB8 32D8                       		move.w	(a0)+,(a1)+
000C7ABA 51CF FFFC                  		dbf	d7,.loopLo
000C7ABE                            
000C7ABE 41FA 0000                  		lea	MC_BlockRender(pc),a0
000C7AC2 43F8 8080                  		lea	(planeBuffer+(64*2)).w,a1
000C7AC6 7E2E                       		moveq	#$2F-1,d7
000C7AC8                            
000C7AC8                            .loopHi:
000C7AC8 303C 8000                  		move.w	#$8000,d0
000C7ACC 8058                       		or.w	(a0)+,d0
000C7ACE 32C0                       		move.w	d0,(a1)+
000C7AD0 51CF FFF6                  		dbf	d7,.loopHi
000C7AD4                            
000C7AD4 6000 FFFE                  		bra.w	*					; spin infinitely
000C7AD8                            
000C7AD8                            ; ===========================================================================
000C7AD8                            ; ---------------------------------------------------------------------------
000C7AD8                            ; Clear The Screen
000C7AD8                            ; ---------------------------------------------------------------------------
000C7AD8                            MC_ClearScreen:
000C7AD8 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
000C7ADC                            
000C7ADC 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
000C7AE2 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000C7AE6 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
000C7AEC 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000C7AF2                            
000C7AF2 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000C7AF4 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
000C7AF6                            
000C7AF6 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
000C7AFC 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000C7B00 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
000C7B06 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000C7B0C                            
000C7B0C 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000C7B0E 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
000C7B10                            
000C7B10 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
000C7B16 3CBC 9780                  		move.w	#$9780,(a6)				; ^
000C7B1A 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
000C7B20 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
000C7B26                            
000C7B26 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
000C7B28 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
000C7B2A                            
000C7B2A 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
000C7B2E 4E75                       		rts						; return
000C7B30                            ; ---------------------------------------------------------------------------
000C7B30                            
000C7B30                            ; ===========================================================================
000C7B30                            ; ---------------------------------------------------------------------------
000C7B30                            ; VBlank Interrupt
000C7B30                            ; ---------------------------------------------------------------------------
000C7B30                            MC_VInt:
000C7B4A                            
000C7B4A 5278 8E80                  		addq.w	#1,(camXPosFG).w			; update scrolling
000C7B54 3D78 8E80 FFFC             		move.w	(camXPosFG).w,-4(a6)			; ^
000C7B5A                            
000C7B5A                            
000C7B5A 4E73                       		rte						; return
000C7B5C                            ; ---------------------------------------------------------------------------
000C7B5C                            
000C7B5C                            block_entry	macro	tileID, palLine, priority
000C7B5C                            	if (narg<3)
000C7B5C                            		dc.w	(palLine<<13)|tileID
000C7B5C                            	else
000C7B5C                            		dc.w	$8000|(palLine<<13)|tileID
000C7B5C                            	endif
000C7B5C                            		endm
000C7B5C                            
000C7B5C                            MC_BlockRender:
000C7B9C                            
000C7BBA                            
000C7BBA                            ; ---------------------------------------------------------------------------
000C7BBA                            MC_Palette:
000C7BBA 0E86 08AE 068E 046C 0EE0+  	dc.w	$E86, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
000C7BDA 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
000C7BFA 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
000C7C1A 0EEE 0EEE 0EEE 0EEE 0EEE+  	dc.w	$EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE, $EEE
000C7C3A                            ; ---------------------------------------------------------------------------
000C7C3A                            MC_Terrain:
000C7C3A                            	incbin	"minecraft\assets\bin\terrain.bin"
000C80BA                            MC_Terrain_End:
000C80BA                            ; ---------------------------------------------------------------------------
000C80BA                            ; ---------------------------------------------------------------------------
000C80BA                            ; end of 'ROM'
000C80BA                            EndOfRom:
000C80BA                            
000C80BA                            
