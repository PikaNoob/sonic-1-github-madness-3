00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2943 4144 4520 4341+  Date:		dc.b '(C)CADE CADE C  ' ; Release date
00000120 686F 7720 746F 2064 6973+  Title_Local:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; Domestic name
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood  ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000B10                            		even
00000B10                            
00000B10                            ; ===========================================================================
00000B10                            
00000B10                            loc_B10:				; XREF: Vectors
00000B10 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000B14 4A38 F62A                  		tst.b	($FFFFF62A).w
00000B18 6700                       		beq.s	loc_B88
00000B1A 3039 00C0 0004             		move.w	($C00004).l,d0
00000B20 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000B2A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B32 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B38 6700                       		beq.s	loc_B42
00000B3A 303C 0700                  		move.w	#$700,d0
00000B3E                            
00000B3E                            loc_B3E:
00000B3E 51C8 FFFE                  		dbf	d0,loc_B3E
00000B42                            
00000B42                            loc_B42:
00000B42 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000B46 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000B4C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B52 0240 003E                  		andi.w	#$3E,d0
00000B56 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000B5A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B5E                            
00000B5E                            loc_B5E:				; XREF: loc_B88
00000B5E 4EB9 0000 0000             		jsr	sub_71B4C
00000B64                            
00000B64                            loc_B64:				; XREF: loc_D50
00000B64 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B68 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B6C 4E73                       		rte	
00000B6E                            ; ===========================================================================
00000B6E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B72 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B76 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B7A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B7E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B82 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B86 0000                       		dc.w loc_E72-off_B6E
00000B88                            ; ===========================================================================
00000B88                            
00000B88                            loc_B88:				; XREF: loc_B10; off_B6E
00000B88 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B8E 6700                       		beq.s	loc_B9A
00000B90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B96 6600 FFC6                  		bne.w	loc_B5E
00000B9A                            
00000B9A                            loc_B9A:
00000B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000BA0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000BA4 3039 00C0 0004             		move.w	($C00004).l,d0
00000BAA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000BB0 6700                       		beq.s	loc_BBA
00000BB2 303C 0700                  		move.w	#$700,d0
00000BB6                            
00000BB6                            loc_BB6:
00000BB6 51C8 FFFE                  		dbf	d0,loc_BB6
00000BBA                            
00000BBA                            loc_BBA:
00000BBA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000BC0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000BC8                            
00000BC8                            loc_BC8:
00000BC8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BD0 66F6                       		bne.s	loc_BC8
00000BD2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BD6 6600                       		bne.s	loc_BFE
00000BD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BDE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BE4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BEA 3ABC 977F                  		move.w	#$977F,(a5)
00000BEE 3ABC C000                  		move.w	#$C000,(a5)
00000BF2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BFC 6000                       		bra.s	loc_C22
00000BFE                            ; ===========================================================================
00000BFE                            
00000BFE                            loc_BFE:				; XREF: loc_BC8
00000BFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C04 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C0A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C10 3ABC 977F                  		move.w	#$977F,(a5)
00000C14 3ABC C000                  		move.w	#$C000,(a5)
00000C18 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C22                            
00000C22                            loc_C22:				; XREF: loc_BC8
00000C22 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C26 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C2E 6000 FF2E                  		bra.w	loc_B5E
00000C32                            ; ===========================================================================
00000C32                            
00000C32                            loc_C32:				; XREF: off_B6E
00000C32 6100 0000                  		bsr.w	sub_106E
00000C36                            
00000C36                            loc_C36:				; XREF: off_B6E
00000C36 4A78 F614                  		tst.w	($FFFFF614).w
00000C3A 6700 0000                  		beq.w	locret_C42
00000C3E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C42                            
00000C42                            locret_C42:
00000C42 4E75                       		rts	
00000C44                            ; ===========================================================================
00000C44                            
00000C44                            loc_C44:				; XREF: off_B6E
00000C44 6100 0000                  		bsr.w	sub_106E
00000C48 6100 0000                  		bsr.w	sub_6886
00000C4C 6100 0000                  		bsr.w	sub_1642
00000C50 4A78 F614                  		tst.w	($FFFFF614).w
00000C54 6700 0000                  		beq.w	locret_C5C
00000C58 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C5C                            
00000C5C                            locret_C5C:
00000C5C 4E75                       		rts	
00000C5E                            ; ===========================================================================
00000C5E                            
00000C5E                            loc_C5E:				; XREF: off_B6E
00000C5E 6100 0000                  		bsr.w	sub_106E
00000C62 4E75                       		rts	
00000C64                            ; ===========================================================================
00000C64                            
00000C64                            loc_C64:				; XREF: off_B6E
00000C64 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C6A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C6E                            
00000C6E                            loc_C6E:				; XREF: off_B6E
00000C6E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C76                            
00000C76                            loc_C76:
00000C76 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C7E 66F6                       		bne.s	loc_C76		; if not, branch
00000C80 6100 0000                  		bsr.w	ReadJoypads
00000C84 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C88 6600                       		bne.s	loc_CB0
00000C8A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C90 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C96 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C9C 3ABC 977F                  		move.w	#$977F,(a5)
00000CA0 3ABC C000                  		move.w	#$C000,(a5)
00000CA4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CAA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CAE 6000                       		bra.s	loc_CD4
00000CB0                            ; ===========================================================================
00000CB0                            
00000CB0                            loc_CB0:				; XREF: loc_C76
00000CB0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CBC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CC2 3ABC 977F                  		move.w	#$977F,(a5)
00000CC6 3ABC C000                  		move.w	#$C000,(a5)
00000CCA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CD0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CD4                            
00000CD4                            loc_CD4:				; XREF: loc_C76
00000CD4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CDE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CE4 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CEA 3ABC 977F                  		move.w	#$977F,(a5)
00000CEE 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CF2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D02 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D08 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D0E 3ABC 977F                  		move.w	#$977F,(a5)
00000D12 3ABC 7800                  		move.w	#$7800,(a5)
00000D16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D20 4A38 F767                  		tst.b	($FFFFF767).w
00000D24 6700                       		beq.s	loc_D50
00000D26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D2C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000D32 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000D38 3ABC 977F                  		move.w	#$977F,(a5)
00000D3C 3ABC 7000                  		move.w	#$7000,(a5)
00000D40 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D46 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D4A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000D50                            
00000D50                            loc_D50:
00000D50 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000D58 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D5E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D64 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D6A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D70 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D76 6400                       		bcc.s	Demo_Time
00000D78 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D7E 588F                       		addq.l	#4,sp
00000D80 6000 FDE2                  		bra.w	loc_B64
00000D84                            
00000D84                            ; ---------------------------------------------------------------------------
00000D84                            ; Subroutine to	run a demo for an amount of time
00000D84                            ; ---------------------------------------------------------------------------
00000D84                            
00000D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D84                            
00000D84                            
00000D84                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D84 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D88 4EB9 0000 0000             		jsr	AniArt_Load
00000D8E 4EB9 0000 0000             		jsr	HudUpdate
00000D94 6100 0000                  		bsr.w	sub_165E
00000D98 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D9C 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000DA0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000DA4                            
00000DA4                            Demo_TimeEnd:
00000DA4 4E75                       		rts	
00000DA6                            ; End of function Demo_Time
00000DA6                            
00000DA6                            ; ===========================================================================
00000DA6                            
00000DA6                            loc_DA6:				; XREF: off_B6E
00000DA6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DAE                            
00000DAE                            loc_DAE:
00000DAE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DB6 66F6                       		bne.s	loc_DAE		; if not, branch
00000DB8 6100 0000                  		bsr.w	ReadJoypads
00000DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCE 3ABC 977F                  		move.w	#$977F,(a5)
00000DD2 3ABC C000                  		move.w	#$C000,(a5)
00000DD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DF2 3ABC 977F                  		move.w	#$977F,(a5)
00000DF6 3ABC 7800                  		move.w	#$7800,(a5)
00000DFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E00 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E04 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E10 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E16 3ABC 977F                  		move.w	#$977F,(a5)
00000E1A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E1E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E24 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E28 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E30 6100 0000                  		bsr.w	PalCycle_SS
00000E34 4A38 F767                  		tst.b	($FFFFF767).w
00000E38 6700                       		beq.s	loc_E64
00000E3A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E40 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E46 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E4C 3ABC 977F                  		move.w	#$977F,(a5)
00000E50 3ABC 7000                  		move.w	#$7000,(a5)
00000E54 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E5A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E5E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E64                            
00000E64                            loc_E64:
00000E64 4A78 F614                  		tst.w	($FFFFF614).w
00000E68 6700 0000                  		beq.w	locret_E70
00000E6C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E70                            
00000E70                            locret_E70:
00000E70 4E75                       		rts	
00000E72                            ; ===========================================================================
00000E72                            
00000E72                            loc_E72:				; XREF: off_B6E
00000E72 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E7A                            
00000E7A                            loc_E7A:
00000E7A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E82 66F6                       		bne.s	loc_E7A		; if not, branch
00000E84 6100 0000                  		bsr.w	ReadJoypads
00000E88 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E8C 6600                       		bne.s	loc_EB4
00000E8E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E94 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E9A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EA0 3ABC 977F                  		move.w	#$977F,(a5)
00000EA4 3ABC C000                  		move.w	#$C000,(a5)
00000EA8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EAE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EB2 6000                       		bra.s	loc_ED8
00000EB4                            ; ===========================================================================
00000EB4                            
00000EB4                            loc_EB4:				; XREF: loc_E7A
00000EB4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EBA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EC0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EC6 3ABC 977F                  		move.w	#$977F,(a5)
00000ECA 3ABC C000                  		move.w	#$C000,(a5)
00000ECE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ED4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED8                            
00000ED8                            loc_ED8:				; XREF: loc_E7A
00000ED8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EE8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EEE                            
00000EEE                            loc_EEE:
00000EEE 3ABC 977F                  		move.w	#$977F,(a5)
00000EF2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F00 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F06 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F0C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F12 3ABC 977F                  		move.w	#$977F,(a5)
00000F16 3ABC 7800                  		move.w	#$7800,(a5)
00000F1A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F20 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F24 4A38 F767                  		tst.b	($FFFFF767).w
00000F28 6700                       		beq.s	loc_F54
00000F2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F30 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F36 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F3C 3ABC 977F                  		move.w	#$977F,(a5)
00000F40 3ABC 7000                  		move.w	#$7000,(a5)
00000F44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F4E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F54                            
00000F54                            loc_F54:
00000F54 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F5C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F62 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F68 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F6E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F74 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F78 4EB9 0000 0000             		jsr	AniArt_Load
00000F7E 4EB9 0000 0000             		jsr	HudUpdate
00000F84 6100 0000                  		bsr.w	sub_1642
00000F88 4E75                       		rts	
00000F8A                            ; ===========================================================================
00000F8A                            
00000F8A                            loc_F8A:				; XREF: off_B6E
00000F8A 6100 0000                  		bsr.w	sub_106E
00000F8E 5238 F628                  		addq.b	#1,($FFFFF628).w
00000F92 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000F98 4E75                       		rts	
00000F9A                            ; ===========================================================================
00000F9A                            
00000F9A                            loc_F9A:				; XREF: off_B6E
00000F9A 6100 0000                  		bsr.w	sub_106E
00000F9E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FA2 6000 0000                  		bra.w	sub_1642
00000FA6                            ; ===========================================================================
00000FA6                            
00000FA6                            loc_FA6:				; XREF: off_B6E
00000FA6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FAE                            
00000FAE                            loc_FAE:
00000FAE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FB6 66F6                       		bne.s	loc_FAE		; if not, branch
00000FB8 6100 0000                  		bsr.w	ReadJoypads
00000FBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FCE 3ABC 977F                  		move.w	#$977F,(a5)
00000FD2 3ABC C000                  		move.w	#$C000,(a5)
00000FD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC 7800                  		move.w	#$7800,(a5)
00000FFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001010 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001030 4A38 F767                  		tst.b	($FFFFF767).w
00001034 6700                       		beq.s	loc_1060
00001036 4BF9 00C0 0004             		lea	($C00004).l,a5
0000103C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001042 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001048 3ABC 977F                  		move.w	#$977F,(a5)
0000104C 3ABC 7000                  		move.w	#$7000,(a5)
00001050 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001056 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001060                            
00001060                            loc_1060:
00001060 4A78 F614                  		tst.w	($FFFFF614).w
00001064 6700 0000                  		beq.w	locret_106C
00001068 5378 F614                  		subq.w	#1,($FFFFF614).w
0000106C                            
0000106C                            locret_106C:
0000106C 4E75                       		rts	
0000106E                            
0000106E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000106E                            
0000106E                            
0000106E                            sub_106E:				; XREF: loc_C32; et al
0000106E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001076                            
00001076                            loc_1076:
00001076 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000107E 66F6                       		bne.s	loc_1076	; if not, branch
00001080 6100 0000                  		bsr.w	ReadJoypads
00001084 4A38 F64E                  		tst.b	($FFFFF64E).w
00001088 6600                       		bne.s	loc_10B0
0000108A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001090 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001096 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000109C 3ABC 977F                  		move.w	#$977F,(a5)
000010A0 3ABC C000                  		move.w	#$C000,(a5)
000010A4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010AA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010AE 6000                       		bra.s	loc_10D4
000010B0                            ; ===========================================================================
000010B0                            
000010B0                            loc_10B0:				; XREF: sub_106E
000010B0 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010C2 3ABC 977F                  		move.w	#$977F,(a5)
000010C6 3ABC C000                  		move.w	#$C000,(a5)
000010CA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D4                            
000010D4                            loc_10D4:				; XREF: sub_106E
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010E0 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC 7800                  		move.w	#$7800,(a5)
000010EE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010FE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001104 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110A 3ABC 977F                  		move.w	#$977F,(a5)
0000110E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001112 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001118 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000111C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001124 4E75                       		rts	
00001126                            ; End of function sub_106E
00001126                            
00001126                            ; ---------------------------------------------------------------------------
00001126                            ; Subroutine to	move pallets from the RAM to CRAM
00001126                            ; ---------------------------------------------------------------------------
00001126                            
00001126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001126                            
00001126                            
00001126                            PalToCRAM:
00001126 46FC 2700                  		move	#$2700,sr
0000112A 4A78 F644                  		tst.w	($FFFFF644).w
0000112E 6700                       		beq.s	locret_119C
00001130 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001136 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000113A 43F9 00C0 0000             		lea	($C00000).l,a1
00001140 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001144 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000114C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000114E 2298                       		move.l	(a0)+,(a1)
00001150 2298                       		move.l	(a0)+,(a1)
00001152 2298                       		move.l	(a0)+,(a1)
00001154 2298                       		move.l	(a0)+,(a1)
00001156 2298                       		move.l	(a0)+,(a1)
00001158 2298                       		move.l	(a0)+,(a1)
0000115A 2298                       		move.l	(a0)+,(a1)
0000115C 2298                       		move.l	(a0)+,(a1)
0000115E 2298                       		move.l	(a0)+,(a1)
00001160 2298                       		move.l	(a0)+,(a1)
00001162 2298                       		move.l	(a0)+,(a1)
00001164 2298                       		move.l	(a0)+,(a1)
00001166 2298                       		move.l	(a0)+,(a1)
00001168 2298                       		move.l	(a0)+,(a1)
0000116A 2298                       		move.l	(a0)+,(a1)
0000116C 2298                       		move.l	(a0)+,(a1)
0000116E 2298                       		move.l	(a0)+,(a1)
00001170 2298                       		move.l	(a0)+,(a1)
00001172 2298                       		move.l	(a0)+,(a1)
00001174 2298                       		move.l	(a0)+,(a1)
00001176 2298                       		move.l	(a0)+,(a1)
00001178 2298                       		move.l	(a0)+,(a1)
0000117A 2298                       		move.l	(a0)+,(a1)
0000117C 2298                       		move.l	(a0)+,(a1)
0000117E 2298                       		move.l	(a0)+,(a1)
00001180 2298                       		move.l	(a0)+,(a1)
00001182 2298                       		move.l	(a0)+,(a1)
00001184 2298                       		move.l	(a0)+,(a1)
00001186 2298                       		move.l	(a0)+,(a1)
00001188 2298                       		move.l	(a0)+,(a1)
0000118A 2298                       		move.l	(a0)+,(a1)
0000118C 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001192 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001196 4A38 F64F                  		tst.b	($FFFFF64F).w
0000119A 6600                       		bne.s	loc_119E
0000119C                            
0000119C                            locret_119C:
0000119C 4E73                       		rte	
0000119E                            ; ===========================================================================
0000119E                            
0000119E                            loc_119E:				; XREF: PalToCRAM
0000119E 4238 F64F                  		clr.b	($FFFFF64F).w
000011A2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000011A6 6100 FBDC                  		bsr.w	Demo_Time
000011AA 4EB9 0000 0000             		jsr	sub_71B4C
000011B0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000011B4 4E73                       		rte	
000011B6                            ; End of function PalToCRAM
000011B6                            
000011B6                            ; ---------------------------------------------------------------------------
000011B6                            ; Subroutine to	initialise joypads
000011B6                            ; ---------------------------------------------------------------------------
000011B6                            
000011B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011B6                            
000011B6                            
000011B6                            JoypadInit:				; XREF: GameClrRAM
000011B6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011BE                            
000011BE                            Joypad_WaitZ80:
000011BE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000011C6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000011C8 7040                       		moveq	#$40,d0
000011CA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000011D0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000011D6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000011DC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000011E4 4E75                       		rts	
000011E6                            ; End of function JoypadInit
000011E6                            
000011E6                            ; ---------------------------------------------------------------------------
000011E6                            ; Subroutine to	read joypad input, and send it to the RAM
000011E6                            ; ---------------------------------------------------------------------------
000011E6                            
000011E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011E6                            
000011E6                            
000011E6                            ReadJoypads:
000011E6 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000011EA 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000011F0 6100                       		bsr.s	Joypad_Read	; do the first joypad
000011F2 5449                       		addq.w	#2,a1		; do the second	joypad
000011F4                            
000011F4                            Joypad_Read:
000011F4 12BC 0000                  		move.b	#0,(a1)
000011F8 4E71                       		nop	
000011FA 4E71                       		nop	
000011FC 1011                       		move.b	(a1),d0
000011FE E508                       		lsl.b	#2,d0
00001200 0200 00C0                  		andi.b	#$C0,d0
00001204 12BC 0040                  		move.b	#$40,(a1)
00001208 4E71                       		nop	
0000120A 4E71                       		nop	
0000120C 1211                       		move.b	(a1),d1
0000120E 0201 003F                  		andi.b	#$3F,d1
00001212 8001                       		or.b	d1,d0
00001214 4600                       		not.b	d0
00001216 1210                       		move.b	(a0),d1
00001218 B101                       		eor.b	d0,d1
0000121A 10C0                       		move.b	d0,(a0)+
0000121C C200                       		and.b	d0,d1
0000121E 10C1                       		move.b	d1,(a0)+
00001220 4E75                       		rts	
00001222                            ; End of function ReadJoypads
00001222                            
00001222                            
00001222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001222                            
00001222                            
00001222                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001222 41F9 00C0 0004             		lea	($C00004).l,a0
00001228 43F9 00C0 0000             		lea	($C00000).l,a1
0000122E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001234 7E12                       		moveq	#$12,d7
00001236                            
00001236                            VDP_Loop:
00001236 309A                       		move.w	(a2)+,(a0)
00001238 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000123C                            
0000123C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001242 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001246 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000124C 7000                       		moveq	#0,d0
0000124E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001258 3E3C 003F                  		move.w	#$3F,d7
0000125C                            
0000125C                            VDP_ClrCRAM:
0000125C 3280                       		move.w	d0,(a1)
0000125E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001262                            
00001262 42B8 F616                  		clr.l	($FFFFF616).w
00001266 42B8 F61A                  		clr.l	($FFFFF61A).w
0000126A 2F01                       		move.l	d1,-(sp)
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 3ABC 8F01                  		move.w	#$8F01,(a5)
00001276 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000127C 3ABC 9780                  		move.w	#$9780,(a5)
00001280 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001286 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000128E                            
0000128E                            loc_128E:
0000128E 3215                       		move.w	(a5),d1
00001290 0801 0001                  		btst	#1,d1
00001294 66F8                       		bne.s	loc_128E
00001296                            
00001296 3ABC 8F02                  		move.w	#$8F02,(a5)
0000129A 221F                       		move.l	(sp)+,d1
0000129C 4E75                       		rts	
0000129E                            ; End of function VDPSetupGame
0000129E                            
0000129E                            ; ===========================================================================
0000129E 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000012A6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000012AE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000012B6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000012BE 9001 9100 9200             		dc.w $9001, $9100, $9200
000012C4                            
000012C4                            ; ---------------------------------------------------------------------------
000012C4                            ; Subroutine to	clear the screen
000012C4                            ; ---------------------------------------------------------------------------
000012C4                            
000012C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C4                            
000012C4                            
000012C4                            ClearScreen:
000012C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012CA 3ABC 8F01                  		move.w	#$8F01,(a5)
000012CE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000012D4 3ABC 9780                  		move.w	#$9780,(a5)
000012D8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000012DE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000012E6                            
000012E6                            loc_12E6:
000012E6 3215                       		move.w	(a5),d1
000012E8 0801 0001                  		btst	#1,d1
000012EC 66F8                       		bne.s	loc_12E6
000012EE                            
000012EE 3ABC 8F02                  		move.w	#$8F02,(a5)
000012F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000012F8 3ABC 8F01                  		move.w	#$8F01,(a5)
000012FC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001302 3ABC 9780                  		move.w	#$9780,(a5)
00001306 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000130C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001314                            
00001314                            loc_1314:
00001314 3215                       		move.w	(a5),d1
00001316 0801 0001                  		btst	#1,d1
0000131A 66F8                       		bne.s	loc_1314
0000131C                            
0000131C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001320 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001328 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001330 43F8 F800                  		lea	($FFFFF800).w,a1
00001334 7000                       		moveq	#0,d0
00001336 323C 00A0                  		move.w	#$A0,d1
0000133A                            
0000133A                            loc_133A:
0000133A 22C0                       		move.l	d0,(a1)+
0000133C 51C9 FFFC                  		dbf	d1,loc_133A
00001340                            
00001340 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001344 7000                       		moveq	#0,d0
00001346 323C 0100                  		move.w	#$100,d1
0000134A                            
0000134A                            loc_134A:
0000134A 22C0                       		move.l	d0,(a1)+
0000134C 51C9 FFFC                  		dbf	d1,loc_134A
00001350 4E75                       		rts	
00001352                            ; End of function ClearScreen
00001352                            
00001352                            ; ---------------------------------------------------------------------------
00001352                            ; Subroutine to	load the sound driver
00001352                            ; ---------------------------------------------------------------------------
00001352                            
00001352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001352                            
00001352                            
00001352                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001352 4E71                       		nop	
00001354 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000135C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001364 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000136A 43F9 00A0 0000             		lea	($A00000).l,a1
00001370 6100 0000                  		bsr.w	KosDec		; decompress
00001374 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000137C 4E71                       		nop	
0000137E 4E71                       		nop	
00001380 4E71                       		nop	
00001382 4E71                       		nop	
00001384 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000138C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001394 4E75                       		rts	
00001396                            ; End of function SoundDriverLoad
00001396                            
00001396                            ; ---------------------------------------------------------------------------
00001396                            ; Subroutine to	play a sound or	music track
00001396                            ; ---------------------------------------------------------------------------
00001396                            
00001396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001396                            
00001396                            
00001396                            PlaySound:
00001396 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000139A 4E75                       		rts	
0000139C                            ; End of function PlaySound
0000139C                            
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            ; Subroutine to	play a special sound/music (E0-E4)
0000139C                            ;
0000139C                            ; E0 - Fade out
0000139C                            ; E1 - Sega
0000139C                            ; E2 - Speed up
0000139C                            ; E3 - Normal speed
0000139C                            ; E4 - Stop
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            
0000139C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000139C                            
0000139C                            
0000139C                            PlaySound_Special:
0000139C 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000013A0 4E75                       		rts	
000013A2                            ; End of function PlaySound_Special
000013A2                            
000013A2                            ; ===========================================================================
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            ; Unused sound/music subroutine
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            
000013A2                            PlaySound_Unk:
000013A2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000013A6 4E75                       		rts	
000013A8                            
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            ; Subroutine to	pause the game
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            
000013A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013A8                            
000013A8                            
000013A8                            PauseGame:				; XREF: Level_MainLoop; et al
000013A8 4E71                       		nop	
000013AA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000013AE 6700                       		beq.s	Unpause		; if not, branch
000013B0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000013B4 6600                       		bne.s	loc_13BE	; if yes, branch
000013B6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000013BC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000013BE                            
000013BE                            loc_13BE:
000013BE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000013C4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000013CA                            
000013CA                            loc_13CA:
000013CA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000013D0 6100 0000                  		bsr.w	DelayProgram
000013D4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000013D8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000013DA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000013E0 6700                       		beq.s	Pause_ChkBC	; if not, branch
000013E2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000013E8 4E71                       		nop	
000013EA 6000                       		bra.s	loc_1404
000013EC                            ; ===========================================================================
000013EC                            
000013EC                            Pause_ChkBC:				; XREF: PauseGame
000013EC 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000013F2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013F4 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000013FA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013FC                            
000013FC                            Pause_ChkStart:				; XREF: PauseGame
000013FC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001402 67C6                       		beq.s	loc_13CA	; if not, branch
00001404                            
00001404                            loc_1404:				; XREF: PauseGame
00001404 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000140A                            
0000140A                            Unpause:				; XREF: PauseGame
0000140A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001410                            
00001410                            Pause_DoNothing:			; XREF: PauseGame
00001410 4E75                       		rts	
00001412                            ; ===========================================================================
00001412                            
00001412                            Pause_SlowMo:				; XREF: PauseGame
00001412 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001418 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000141E 4E75                       		rts	
00001420                            ; End of function PauseGame
00001420                            
00001420                            ; ---------------------------------------------------------------------------
00001420                            ; Subroutine to	display	patterns via the VDP
00001420                            ; ---------------------------------------------------------------------------
00001420                            
00001420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001420                            
00001420                            
00001420                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001420 4DF9 00C0 0000             		lea	($C00000).l,a6
00001426 283C 0080 0000             		move.l	#$800000,d4
0000142C                            
0000142C                            loc_142C:
0000142C 2D40 0004                  		move.l	d0,4(a6)
00001430 3601                       		move.w	d1,d3
00001432                            
00001432                            loc_1432:
00001432 3C99                       		move.w	(a1)+,(a6)
00001434 51CB FFFC                  		dbf	d3,loc_1432
00001438 D084                       		add.l	d4,d0
0000143A 51CA FFF0                  		dbf	d2,loc_142C
0000143E 4E75                       		rts	
00001440                            ; End of function ShowVDPGraphics
00001440                            
00001440                            ; ---------------------------------------------------------------------------
00001440                            ; Nemesis decompression	algorithm
00001440                            ; ---------------------------------------------------------------------------
00001440                            
00001440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001440                            
00001440                            
00001440                            NemDec:
00001440 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001444 47F9 0000 0000             		lea	(loc_1502).l,a3
0000144A 49F9 00C0 0000             		lea	($C00000).l,a4
00001450 6000                       		bra.s	loc_145C
00001452                            ; ===========================================================================
00001452 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001456 47F9 0000 0000             		lea	(loc_1518).l,a3
0000145C                            
0000145C                            loc_145C:				; XREF: NemDec
0000145C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001460 3418                       		move.w	(a0)+,d2
00001462 E34A                       		lsl.w	#1,d2
00001464 6400                       		bcc.s	loc_146A
00001466 D6FC 000A                  		adda.w	#$A,a3
0000146A                            
0000146A                            loc_146A:
0000146A E54A                       		lsl.w	#2,d2
0000146C 3A42                       		movea.w	d2,a5
0000146E 7608                       		moveq	#8,d3
00001470 7400                       		moveq	#0,d2
00001472 7800                       		moveq	#0,d4
00001474 6100 0000                  		bsr.w	NemDec4
00001478 1A18                       		move.b	(a0)+,d5
0000147A E145                       		asl.w	#8,d5
0000147C 1A18                       		move.b	(a0)+,d5
0000147E 3C3C 0010                  		move.w	#$10,d6
00001482 6100                       		bsr.s	NemDec2
00001484 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001488 4E75                       		rts	
0000148A                            ; End of function NemDec
0000148A                            
0000148A                            
0000148A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000148A                            
0000148A                            
0000148A                            NemDec2:				; XREF: NemDec
0000148A 3E06                       		move.w	d6,d7
0000148C 5147                       		subq.w	#8,d7
0000148E 3205                       		move.w	d5,d1
00001490 EE69                       		lsr.w	d7,d1
00001492 0C01 00FC                  		cmpi.b	#-4,d1
00001496 6400                       		bcc.s	loc_14D6
00001498 0241 00FF                  		andi.w	#$FF,d1
0000149C D241                       		add.w	d1,d1
0000149E 1031 1000                  		move.b	(a1,d1.w),d0
000014A2 4880                       		ext.w	d0
000014A4 9C40                       		sub.w	d0,d6
000014A6 0C46 0009                  		cmpi.w	#9,d6
000014AA 6400                       		bcc.s	loc_14B2
000014AC 5046                       		addq.w	#8,d6
000014AE E145                       		asl.w	#8,d5
000014B0 1A18                       		move.b	(a0)+,d5
000014B2                            
000014B2                            loc_14B2:
000014B2 1231 1001                  		move.b	1(a1,d1.w),d1
000014B6 3001                       		move.w	d1,d0
000014B8 0241 000F                  		andi.w	#$F,d1
000014BC 0240 00F0                  		andi.w	#$F0,d0
000014C0                            
000014C0                            loc_14C0:				; XREF: NemDec3
000014C0 E848                       		lsr.w	#4,d0
000014C2                            
000014C2                            loc_14C2:				; XREF: NemDec3
000014C2 E98C                       		lsl.l	#4,d4
000014C4 8801                       		or.b	d1,d4
000014C6 5343                       		subq.w	#1,d3
000014C8 6600                       		bne.s	loc_14D0
000014CA 4ED3                       		jmp	(a3)
000014CC                            ; End of function NemDec2
000014CC                            
000014CC                            
000014CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014CC                            
000014CC                            
000014CC                            NemDec3:				; XREF: loc_1502
000014CC 7800                       		moveq	#0,d4
000014CE 7608                       		moveq	#8,d3
000014D0                            
000014D0                            loc_14D0:				; XREF: NemDec2
000014D0 51C8 FFF0                  		dbf	d0,loc_14C2
000014D4 60B4                       		bra.s	NemDec2
000014D6                            ; ===========================================================================
000014D6                            
000014D6                            loc_14D6:				; XREF: NemDec2
000014D6 5D46                       		subq.w	#6,d6
000014D8 0C46 0009                  		cmpi.w	#9,d6
000014DC 6400                       		bcc.s	loc_14E4
000014DE 5046                       		addq.w	#8,d6
000014E0 E145                       		asl.w	#8,d5
000014E2 1A18                       		move.b	(a0)+,d5
000014E4                            
000014E4                            loc_14E4:				; XREF: NemDec3
000014E4 5F46                       		subq.w	#7,d6
000014E6 3205                       		move.w	d5,d1
000014E8 EC69                       		lsr.w	d6,d1
000014EA 3001                       		move.w	d1,d0
000014EC 0241 000F                  		andi.w	#$F,d1
000014F0 0240 0070                  		andi.w	#$70,d0
000014F4 0C46 0009                  		cmpi.w	#9,d6
000014F8 64C6                       		bcc.s	loc_14C0
000014FA 5046                       		addq.w	#8,d6
000014FC E145                       		asl.w	#8,d5
000014FE 1A18                       		move.b	(a0)+,d5
00001500 60BE                       		bra.s	loc_14C0
00001502                            ; End of function NemDec3
00001502                            
00001502                            ; ===========================================================================
00001502                            
00001502                            loc_1502:				; XREF: NemDec
00001502 2884                       		move.l	d4,(a4)
00001504 534D                       		subq.w	#1,a5
00001506 380D                       		move.w	a5,d4
00001508 66C2                       		bne.s	NemDec3
0000150A 4E75                       		rts	
0000150C                            ; ===========================================================================
0000150C B982                       		eor.l	d4,d2
0000150E 2882                       		move.l	d2,(a4)
00001510 534D                       		subq.w	#1,a5
00001512 380D                       		move.w	a5,d4
00001514 66B6                       		bne.s	NemDec3
00001516 4E75                       		rts	
00001518                            ; ===========================================================================
00001518                            
00001518                            loc_1518:				; XREF: NemDec
00001518 28C4                       		move.l	d4,(a4)+
0000151A 534D                       		subq.w	#1,a5
0000151C 380D                       		move.w	a5,d4
0000151E 66AC                       		bne.s	NemDec3
00001520 4E75                       		rts	
00001522                            ; ===========================================================================
00001522 B982                       		eor.l	d4,d2
00001524 28C2                       		move.l	d2,(a4)+
00001526 534D                       		subq.w	#1,a5
00001528 380D                       		move.w	a5,d4
0000152A 66A0                       		bne.s	NemDec3
0000152C 4E75                       		rts	
0000152E                            
0000152E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000152E                            
0000152E                            
0000152E                            NemDec4:				; XREF: NemDec
0000152E 1018                       		move.b	(a0)+,d0
00001530                            
00001530                            loc_1530:
00001530 0C00 00FF                  		cmpi.b	#-1,d0
00001534 6600                       		bne.s	loc_1538
00001536 4E75                       		rts	
00001538                            ; ===========================================================================
00001538                            
00001538                            loc_1538:				; XREF: NemDec4
00001538 3E00                       		move.w	d0,d7
0000153A                            
0000153A                            loc_153A:
0000153A 1018                       		move.b	(a0)+,d0
0000153C 0C00 0080                  		cmpi.b	#$80,d0
00001540 64EE                       		bcc.s	loc_1530
00001542 1200                       		move.b	d0,d1
00001544 0247 000F                  		andi.w	#$F,d7
00001548 0241 0070                  		andi.w	#$70,d1
0000154C 8E41                       		or.w	d1,d7
0000154E 0240 000F                  		andi.w	#$F,d0
00001552 1200                       		move.b	d0,d1
00001554 E149                       		lsl.w	#8,d1
00001556 8E41                       		or.w	d1,d7
00001558 7208                       		moveq	#8,d1
0000155A 9240                       		sub.w	d0,d1
0000155C 6600                       		bne.s	loc_1568
0000155E 1018                       		move.b	(a0)+,d0
00001560 D040                       		add.w	d0,d0
00001562 3387 0000                  		move.w	d7,(a1,d0.w)
00001566 60D2                       		bra.s	loc_153A
00001568                            ; ===========================================================================
00001568                            
00001568                            loc_1568:				; XREF: NemDec4
00001568 1018                       		move.b	(a0)+,d0
0000156A E368                       		lsl.w	d1,d0
0000156C D040                       		add.w	d0,d0
0000156E 7A01                       		moveq	#1,d5
00001570 E36D                       		lsl.w	d1,d5
00001572 5345                       		subq.w	#1,d5
00001574                            
00001574                            loc_1574:
00001574 3387 0000                  		move.w	d7,(a1,d0.w)
00001578 5440                       		addq.w	#2,d0
0000157A 51CD FFF8                  		dbf	d5,loc_1574
0000157E 60BA                       		bra.s	loc_153A
00001580                            ; End of function NemDec4
00001580                            
00001580                            ; ---------------------------------------------------------------------------
00001580                            ; Subroutine to	load pattern load cues
00001580                            ; ---------------------------------------------------------------------------
00001580                            
00001580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001580                            
00001580                            
00001580                            LoadPLC:
00001580 48E7 0060                  		movem.l	a1-a2,-(sp)
00001584 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000158A D040                       		add.w	d0,d0
0000158C 3031 0000                  		move.w	(a1,d0.w),d0
00001590 43F1 0000                  		lea	(a1,d0.w),a1
00001594 45F8 F680                  		lea	($FFFFF680).w,a2
00001598                            
00001598                            loc_1598:
00001598 4A92                       		tst.l	(a2)
0000159A 6700                       		beq.s	loc_15A0
0000159C 5C4A                       		addq.w	#6,a2
0000159E 60F8                       		bra.s	loc_1598
000015A0                            ; ===========================================================================
000015A0                            
000015A0                            loc_15A0:				; XREF: LoadPLC
000015A0 3019                       		move.w	(a1)+,d0
000015A2 6B00                       		bmi.s	loc_15AC
000015A4                            
000015A4                            loc_15A4:
000015A4 24D9                       		move.l	(a1)+,(a2)+
000015A6 34D9                       		move.w	(a1)+,(a2)+
000015A8 51C8 FFFA                  		dbf	d0,loc_15A4
000015AC                            
000015AC                            loc_15AC:
000015AC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015B0 4E75                       		rts	
000015B2                            ; End of function LoadPLC
000015B2                            
000015B2                            
000015B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B2                            
000015B2                            
000015B2                            LoadPLC2:
000015B2 48E7 0060                  		movem.l	a1-a2,-(sp)
000015B6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015BC D040                       		add.w	d0,d0
000015BE 3031 0000                  		move.w	(a1,d0.w),d0
000015C2 43F1 0000                  		lea	(a1,d0.w),a1
000015C6 6100                       		bsr.s	ClearPLC
000015C8 45F8 F680                  		lea	($FFFFF680).w,a2
000015CC 3019                       		move.w	(a1)+,d0
000015CE 6B00                       		bmi.s	loc_15D8
000015D0                            
000015D0                            loc_15D0:
000015D0 24D9                       		move.l	(a1)+,(a2)+
000015D2 34D9                       		move.w	(a1)+,(a2)+
000015D4 51C8 FFFA                  		dbf	d0,loc_15D0
000015D8                            
000015D8                            loc_15D8:
000015D8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015DC 4E75                       		rts	
000015DE                            ; End of function LoadPLC2
000015DE                            
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            ; Subroutine to	clear the pattern load cues
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            
000015DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DE                            
000015DE                            
000015DE                            ClearPLC:				; XREF: LoadPLC2
000015DE 45F8 F680                  		lea	($FFFFF680).w,a2
000015E2 701F                       		moveq	#$1F,d0
000015E4                            
000015E4                            ClearPLC_Loop:
000015E4 429A                       		clr.l	(a2)+
000015E6 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015EA 4E75                       		rts	
000015EC                            ; End of function ClearPLC
000015EC                            
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            ; Subroutine to	use graphics listed in a pattern load cue
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            
000015EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015EC                            
000015EC                            
000015EC                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015EC 4AB8 F680                  		tst.l	($FFFFF680).w
000015F0 6700                       		beq.s	locret_1640
000015F2 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015F6 6600                       		bne.s	locret_1640
000015F8 2078 F680                  		movea.l	($FFFFF680).w,a0
000015FC 47F9 0000 1502             		lea	(loc_1502).l,a3
00001602 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001606 3418                       		move.w	(a0)+,d2
00001608 6A00                       		bpl.s	loc_160E
0000160A D6FC 000A                  		adda.w	#$A,a3
0000160E                            
0000160E                            loc_160E:
0000160E 0242 7FFF                  		andi.w	#$7FFF,d2
00001612 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001616 6100 FF16                  		bsr.w	NemDec4
0000161A 1A18                       		move.b	(a0)+,d5
0000161C E145                       		asl.w	#8,d5
0000161E 1A18                       		move.b	(a0)+,d5
00001620 7C10                       		moveq	#$10,d6
00001622 7000                       		moveq	#0,d0
00001624 21C8 F680                  		move.l	a0,($FFFFF680).w
00001628 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000162C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001630 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001634 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001638 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000163C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001640                            
00001640                            locret_1640:
00001640 4E75                       		rts	
00001642                            ; End of function RunPLC_RAM
00001642                            
00001642                            
00001642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001642                            
00001642                            
00001642                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001642 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001646 6700 0000                  		beq.w	locret_16DA
0000164A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001650 7000                       		moveq	#0,d0
00001652 3038 F684                  		move.w	($FFFFF684).w,d0
00001656 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000165C 6000                       		bra.s	loc_1676
0000165E                            ; End of function sub_1642
0000165E                            
0000165E                            
0000165E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000165E                            
0000165E                            
0000165E                            sub_165E:				; XREF: Demo_Time
0000165E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001662 6700                       		beq.s	locret_16DA
00001664 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000166A 7000                       		moveq	#0,d0
0000166C 3038 F684                  		move.w	($FFFFF684).w,d0
00001670 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001676                            
00001676                            loc_1676:				; XREF: sub_1642
00001676 49F9 00C0 0004             		lea	($C00004).l,a4
0000167C E588                       		lsl.l	#2,d0
0000167E E448                       		lsr.w	#2,d0
00001680 0040 4000                  		ori.w	#$4000,d0
00001684 4840                       		swap	d0
00001686 2880                       		move.l	d0,(a4)
00001688 594C                       		subq.w	#4,a4
0000168A 2078 F680                  		movea.l	($FFFFF680).w,a0
0000168E 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001692 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001696 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000169A 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000169E 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016A2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016A6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016AA                            
000016AA                            loc_16AA:				; XREF: sub_165E
000016AA 3A7C 0008                  		movea.w	#8,a5
000016AE 6100 FE1C                  		bsr.w	NemDec3
000016B2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000016B6 6700                       		beq.s	loc_16DC
000016B8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016BC 66EC                       		bne.s	loc_16AA
000016BE 21C8 F680                  		move.l	a0,($FFFFF680).w
000016C2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016C6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016CA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016CE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016D2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016D6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016DA                            
000016DA                            locret_16DA:				; XREF: sub_1642
000016DA 4E75                       		rts	
000016DC                            ; ===========================================================================
000016DC                            
000016DC                            loc_16DC:				; XREF: sub_165E
000016DC 41F8 F680                  		lea	($FFFFF680).w,a0
000016E0 7015                       		moveq	#$15,d0
000016E2                            
000016E2                            loc_16E2:				; XREF: sub_165E
000016E2 20E8 0006                  		move.l	6(a0),(a0)+
000016E6 51C8 FFFA                  		dbf	d0,loc_16E2
000016EA 4E75                       		rts	
000016EC                            ; End of function sub_165E
000016EC                            
000016EC                            ; ---------------------------------------------------------------------------
000016EC                            ; Subroutine to	execute	the pattern load cue
000016EC                            ; ---------------------------------------------------------------------------
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            RunPLC_ROM:
000016EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016F2 D040                       		add.w	d0,d0
000016F4 3031 0000                  		move.w	(a1,d0.w),d0
000016F8 43F1 0000                  		lea	(a1,d0.w),a1
000016FC 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000016FE                            
000016FE                            RunPLC_Loop:
000016FE 2059                       		movea.l	(a1)+,a0	; get art pointer
00001700 7000                       		moveq	#0,d0
00001702 3019                       		move.w	(a1)+,d0	; get VRAM address
00001704 E588                       		lsl.l	#2,d0		; divide address by $20
00001706 E448                       		lsr.w	#2,d0
00001708 0040 4000                  		ori.w	#$4000,d0
0000170C 4840                       		swap	d0
0000170E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001714 6100 FD2A                  		bsr.w	NemDec		; decompress
00001718 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000171C 4E75                       		rts	
0000171E                            ; End of function RunPLC_ROM
0000171E                            
0000171E                            ; ---------------------------------------------------------------------------
0000171E                            ; Enigma decompression algorithm
0000171E                            ; ---------------------------------------------------------------------------
0000171E                            
0000171E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171E                            
0000171E                            
0000171E                            EniDec:
0000171E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001722 3640                       		movea.w	d0,a3
00001724 1018                       		move.b	(a0)+,d0
00001726 4880                       		ext.w	d0
00001728 3A40                       		movea.w	d0,a5
0000172A 1818                       		move.b	(a0)+,d4
0000172C E70C                       		lsl.b	#3,d4
0000172E 3458                       		movea.w	(a0)+,a2
00001730 D4CB                       		adda.w	a3,a2
00001732 3858                       		movea.w	(a0)+,a4
00001734 D8CB                       		adda.w	a3,a4
00001736 1A18                       		move.b	(a0)+,d5
00001738 E145                       		asl.w	#8,d5
0000173A 1A18                       		move.b	(a0)+,d5
0000173C 7C10                       		moveq	#$10,d6
0000173E                            
0000173E                            loc_173E:				; XREF: loc_1768
0000173E 7007                       		moveq	#7,d0
00001740 3E06                       		move.w	d6,d7
00001742 9E40                       		sub.w	d0,d7
00001744 3205                       		move.w	d5,d1
00001746 EE69                       		lsr.w	d7,d1
00001748 0241 007F                  		andi.w	#$7F,d1
0000174C 3401                       		move.w	d1,d2
0000174E 0C41 0040                  		cmpi.w	#$40,d1
00001752 6400                       		bcc.s	loc_1758
00001754 7006                       		moveq	#6,d0
00001756 E24A                       		lsr.w	#1,d2
00001758                            
00001758                            loc_1758:
00001758 6100 0000                  		bsr.w	sub_188C
0000175C 0242 000F                  		andi.w	#$F,d2
00001760 E849                       		lsr.w	#4,d1
00001762 D241                       		add.w	d1,d1
00001764 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001768                            ; End of function EniDec
00001768                            
00001768                            ; ===========================================================================
00001768                            
00001768                            loc_1768:				; XREF: loc_17B4
00001768 32CA                       		move.w	a2,(a1)+
0000176A 524A                       		addq.w	#1,a2
0000176C 51CA FFFA                  		dbf	d2,loc_1768
00001770 60CC                       		bra.s	loc_173E
00001772                            ; ===========================================================================
00001772                            
00001772                            loc_1772:				; XREF: loc_17B4
00001772 32CC                       		move.w	a4,(a1)+
00001774 51CA FFFC                  		dbf	d2,loc_1772
00001778 60C4                       		bra.s	loc_173E
0000177A                            ; ===========================================================================
0000177A                            
0000177A                            loc_177A:				; XREF: loc_17B4
0000177A 6100 0000                  		bsr.w	loc_17DC
0000177E                            
0000177E                            loc_177E:
0000177E 32C1                       		move.w	d1,(a1)+
00001780 51CA FFFC                  		dbf	d2,loc_177E
00001784 60B8                       		bra.s	loc_173E
00001786                            ; ===========================================================================
00001786                            
00001786                            loc_1786:				; XREF: loc_17B4
00001786 6100 0000                  		bsr.w	loc_17DC
0000178A                            
0000178A                            loc_178A:
0000178A 32C1                       		move.w	d1,(a1)+
0000178C 5241                       		addq.w	#1,d1
0000178E 51CA FFFA                  		dbf	d2,loc_178A
00001792 60AA                       		bra.s	loc_173E
00001794                            ; ===========================================================================
00001794                            
00001794                            loc_1794:				; XREF: loc_17B4
00001794 6100 0000                  		bsr.w	loc_17DC
00001798                            
00001798                            loc_1798:
00001798 32C1                       		move.w	d1,(a1)+
0000179A 5341                       		subq.w	#1,d1
0000179C 51CA FFFA                  		dbf	d2,loc_1798
000017A0 609C                       		bra.s	loc_173E
000017A2                            ; ===========================================================================
000017A2                            
000017A2                            loc_17A2:				; XREF: loc_17B4
000017A2 0C42 000F                  		cmpi.w	#$F,d2
000017A6 6700                       		beq.s	loc_17C4
000017A8                            
000017A8                            loc_17A8:
000017A8 6100 0000                  		bsr.w	loc_17DC
000017AC 32C1                       		move.w	d1,(a1)+
000017AE 51CA FFF8                  		dbf	d2,loc_17A8
000017B2 608A                       		bra.s	loc_173E
000017B4                            ; ===========================================================================
000017B4                            
000017B4                            loc_17B4:				; XREF: EniDec
000017B4 60B2                       		bra.s	loc_1768
000017B6                            ; ===========================================================================
000017B6 60B0                       		bra.s	loc_1768
000017B8                            ; ===========================================================================
000017B8 60B8                       		bra.s	loc_1772
000017BA                            ; ===========================================================================
000017BA 60B6                       		bra.s	loc_1772
000017BC                            ; ===========================================================================
000017BC 60BC                       		bra.s	loc_177A
000017BE                            ; ===========================================================================
000017BE 60C6                       		bra.s	loc_1786
000017C0                            ; ===========================================================================
000017C0 60D2                       		bra.s	loc_1794
000017C2                            ; ===========================================================================
000017C2 60DE                       		bra.s	loc_17A2
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_17C4:				; XREF: loc_17A2
000017C4 5348                       		subq.w	#1,a0
000017C6 0C46 0010                  		cmpi.w	#$10,d6
000017CA 6600                       		bne.s	loc_17CE
000017CC 5348                       		subq.w	#1,a0
000017CE                            
000017CE                            loc_17CE:
000017CE 3008                       		move.w	a0,d0
000017D0 E248                       		lsr.w	#1,d0
000017D2 6400                       		bcc.s	loc_17D6
000017D4 5248                       		addq.w	#1,a0
000017D6                            
000017D6                            loc_17D6:
000017D6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017DA 4E75                       		rts	
000017DC                            ; ===========================================================================
000017DC                            
000017DC                            loc_17DC:				; XREF: loc_17A2
000017DC 360B                       		move.w	a3,d3
000017DE 1204                       		move.b	d4,d1
000017E0 D201                       		add.b	d1,d1
000017E2 6400                       		bcc.s	loc_17EE
000017E4 5346                       		subq.w	#1,d6
000017E6 0D05                       		btst	d6,d5
000017E8 6700                       		beq.s	loc_17EE
000017EA 0043 8000                  		ori.w	#-$8000,d3
000017EE                            
000017EE                            loc_17EE:
000017EE D201                       		add.b	d1,d1
000017F0 6400                       		bcc.s	loc_17FC
000017F2 5346                       		subq.w	#1,d6
000017F4 0D05                       		btst	d6,d5
000017F6 6700                       		beq.s	loc_17FC
000017F8 0643 4000                  		addi.w	#$4000,d3
000017FC                            
000017FC                            loc_17FC:
000017FC D201                       		add.b	d1,d1
000017FE 6400                       		bcc.s	loc_180A
00001800 5346                       		subq.w	#1,d6
00001802 0D05                       		btst	d6,d5
00001804 6700                       		beq.s	loc_180A
00001806 0643 2000                  		addi.w	#$2000,d3
0000180A                            
0000180A                            loc_180A:
0000180A D201                       		add.b	d1,d1
0000180C 6400                       		bcc.s	loc_1818
0000180E 5346                       		subq.w	#1,d6
00001810 0D05                       		btst	d6,d5
00001812 6700                       		beq.s	loc_1818
00001814 0043 1000                  		ori.w	#$1000,d3
00001818                            
00001818                            loc_1818:
00001818 D201                       		add.b	d1,d1
0000181A 6400                       		bcc.s	loc_1826
0000181C 5346                       		subq.w	#1,d6
0000181E 0D05                       		btst	d6,d5
00001820 6700                       		beq.s	loc_1826
00001822 0043 0800                  		ori.w	#$800,d3
00001826                            
00001826                            loc_1826:
00001826 3205                       		move.w	d5,d1
00001828 3E06                       		move.w	d6,d7
0000182A 9E4D                       		sub.w	a5,d7
0000182C 6400                       		bcc.s	loc_1856
0000182E 3C07                       		move.w	d7,d6
00001830 0646 0010                  		addi.w	#$10,d6
00001834 4447                       		neg.w	d7
00001836 EF69                       		lsl.w	d7,d1
00001838 1A10                       		move.b	(a0),d5
0000183A EF3D                       		rol.b	d7,d5
0000183C DE47                       		add.w	d7,d7
0000183E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001842 D245                       		add.w	d5,d1
00001844                            
00001844                            loc_1844:				; XREF: loc_1868
00001844 300D                       		move.w	a5,d0
00001846 D040                       		add.w	d0,d0
00001848 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000184C D243                       		add.w	d3,d1
0000184E 1A18                       		move.b	(a0)+,d5
00001850 E14D                       		lsl.w	#8,d5
00001852 1A18                       		move.b	(a0)+,d5
00001854 4E75                       		rts	
00001856                            ; ===========================================================================
00001856                            
00001856                            loc_1856:				; XREF: loc_1826
00001856 6700                       		beq.s	loc_1868
00001858 EE69                       		lsr.w	d7,d1
0000185A 300D                       		move.w	a5,d0
0000185C D040                       		add.w	d0,d0
0000185E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001862 D243                       		add.w	d3,d1
00001864 300D                       		move.w	a5,d0
00001866 6000                       		bra.s	sub_188C
00001868                            ; ===========================================================================
00001868                            
00001868                            loc_1868:				; XREF: loc_1856
00001868 7C10                       		moveq	#$10,d6
0000186A                            
0000186A                            loc_186A:
0000186A 60D8                       		bra.s	loc_1844
0000186C                            ; ===========================================================================
0000186C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001882 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000188C                            
0000188C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188C                            
0000188C                            
0000188C                            sub_188C:				; XREF: EniDec
0000188C 9C40                       		sub.w	d0,d6
0000188E 0C46 0009                  		cmpi.w	#9,d6
00001892 6400                       		bcc.s	locret_189A
00001894 5046                       		addq.w	#8,d6
00001896 E145                       		asl.w	#8,d5
00001898 1A18                       		move.b	(a0)+,d5
0000189A                            
0000189A                            locret_189A:
0000189A 4E75                       		rts	
0000189C                            ; End of function sub_188C
0000189C                            
0000189C                            ; ---------------------------------------------------------------------------
0000189C                            ; Kosinski decompression algorithm
0000189C                            ; ---------------------------------------------------------------------------
0000189C                            
0000189C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000189C                            
0000189C                            
0000189C                            KosDec:
0000189C                            
0000189C =FFFFFFFE                  var_2		= -2
0000189C =FFFFFFFF                  var_1		= -1
0000189C                            
0000189C 558F                       		subq.l	#2,sp
0000189E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018A2 1E98                       		move.b	(a0)+,(sp)
000018A4 3A17                       		move.w	(sp),d5
000018A6 780F                       		moveq	#$F,d4
000018A8                            
000018A8                            loc_18A8:
000018A8 E24D                       		lsr.w	#1,d5
000018AA 40C6                       		move	sr,d6
000018AC 51CC 0000                  		dbf	d4,loc_18BA
000018B0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018B4 1E98                       		move.b	(a0)+,(sp)
000018B6 3A17                       		move.w	(sp),d5
000018B8 780F                       		moveq	#$F,d4
000018BA                            
000018BA                            loc_18BA:
000018BA 44C6                       		move	d6,ccr
000018BC 6400                       		bcc.s	loc_18C2
000018BE 12D8                       		move.b	(a0)+,(a1)+
000018C0 60E6                       		bra.s	loc_18A8
000018C2                            ; ===========================================================================
000018C2                            
000018C2                            loc_18C2:				; XREF: KosDec
000018C2 7600                       		moveq	#0,d3
000018C4 E24D                       		lsr.w	#1,d5
000018C6 40C6                       		move	sr,d6
000018C8 51CC 0000                  		dbf	d4,loc_18D6
000018CC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018D0 1E98                       		move.b	(a0)+,(sp)
000018D2 3A17                       		move.w	(sp),d5
000018D4 780F                       		moveq	#$F,d4
000018D6                            
000018D6                            loc_18D6:
000018D6 44C6                       		move	d6,ccr
000018D8 6500                       		bcs.s	loc_1906
000018DA E24D                       		lsr.w	#1,d5
000018DC 51CC 0000                  		dbf	d4,loc_18EA
000018E0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018E4 1E98                       		move.b	(a0)+,(sp)
000018E6 3A17                       		move.w	(sp),d5
000018E8 780F                       		moveq	#$F,d4
000018EA                            
000018EA                            loc_18EA:
000018EA E353                       		roxl.w	#1,d3
000018EC E24D                       		lsr.w	#1,d5
000018EE 51CC 0000                  		dbf	d4,loc_18FC
000018F2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018F6 1E98                       		move.b	(a0)+,(sp)
000018F8 3A17                       		move.w	(sp),d5
000018FA 780F                       		moveq	#$F,d4
000018FC                            
000018FC                            loc_18FC:
000018FC E353                       		roxl.w	#1,d3
000018FE 5243                       		addq.w	#1,d3
00001900 74FF                       		moveq	#-1,d2
00001902 1418                       		move.b	(a0)+,d2
00001904 6000                       		bra.s	loc_191C
00001906                            ; ===========================================================================
00001906                            
00001906                            loc_1906:				; XREF: loc_18C2
00001906 1018                       		move.b	(a0)+,d0
00001908 1218                       		move.b	(a0)+,d1
0000190A 74FF                       		moveq	#-1,d2
0000190C 1401                       		move.b	d1,d2
0000190E EB4A                       		lsl.w	#5,d2
00001910 1400                       		move.b	d0,d2
00001912 0241 0007                  		andi.w	#7,d1
00001916 6700                       		beq.s	loc_1928
00001918 1601                       		move.b	d1,d3
0000191A 5243                       		addq.w	#1,d3
0000191C                            
0000191C                            loc_191C:
0000191C 1031 2000                  		move.b	(a1,d2.w),d0
00001920 12C0                       		move.b	d0,(a1)+
00001922 51CB FFF8                  		dbf	d3,loc_191C
00001926 6080                       		bra.s	loc_18A8
00001928                            ; ===========================================================================
00001928                            
00001928                            loc_1928:				; XREF: loc_1906
00001928 1218                       		move.b	(a0)+,d1
0000192A 6700                       		beq.s	loc_1938
0000192C 0C01 0001                  		cmpi.b	#1,d1
00001930 6700 FF76                  		beq.w	loc_18A8
00001934 1601                       		move.b	d1,d3
00001936 60E4                       		bra.s	loc_191C
00001938                            ; ===========================================================================
00001938                            
00001938                            loc_1938:				; XREF: loc_1928
00001938 548F                       		addq.l	#2,sp
0000193A 4E75                       		rts	
0000193C                            ; End of function KosDec
0000193C                            
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            ; Pallet cycling routine loading subroutine
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            
0000193C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193C                            
0000193C                            
0000193C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000193C 7400                       		moveq	#0,d2
0000193E 7000                       		moveq	#0,d0
00001940 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001944 D040                       		add.w	d0,d0		; multiply by 2
00001946 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000194A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000194E                            ; End of function PalCycle_Load
0000194E                            
0000194E                            ; ===========================================================================
0000194E                            ; ---------------------------------------------------------------------------
0000194E                            ; Pallet cycling routines
0000194E                            ; ---------------------------------------------------------------------------
0000194E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001950 0000                       		dc.w PalCycle_LZ-PalCycle
00001952 0000                       		dc.w PalCycle_MZ-PalCycle
00001954 0000                       		dc.w PalCycle_SLZ-PalCycle
00001956 0000                       		dc.w PalCycle_SYZ-PalCycle
00001958 0000                       		dc.w PalCycle_SBZ-PalCycle
0000195A 0000                       		dc.w PalCycle_GHZ-PalCycle
0000195C                            
0000195C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000195C                            
0000195C                            
0000195C                            PalCycle_Title:				; XREF: TitleScreen
0000195C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001962 6000                       		bra.s	loc_196A
00001964                            ; ===========================================================================
00001964                            
00001964                            PalCycle_GHZ:				; XREF: PalCycle
00001964 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000196A                            
0000196A                            loc_196A:				; XREF: PalCycle_Title
0000196A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000196E 6A00                       		bpl.s	locret_1990
00001970 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001976 3038 F632                  		move.w	($FFFFF632).w,d0
0000197A 5278 F632                  		addq.w	#1,($FFFFF632).w
0000197E 0240 0003                  		andi.w	#3,d0
00001982 E748                       		lsl.w	#3,d0
00001984 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001988 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000198C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001990                            
00001990                            locret_1990:
00001990 4E75                       		rts	
00001992                            ; End of function PalCycle_Title
00001992                            
00001992                            
00001992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001992                            
00001992                            
00001992                            PalCycle_LZ:				; XREF: PalCycle
00001992 5378 F634                  		subq.w	#1,($FFFFF634).w
00001996 6A00                       		bpl.s	loc_19D8
00001998 31FC 0002 F634             		move.w	#2,($FFFFF634).w
0000199E 3038 F632                  		move.w	($FFFFF632).w,d0
000019A2 5278 F632                  		addq.w	#1,($FFFFF632).w
000019A6 0240 0003                  		andi.w	#3,d0
000019AA E748                       		lsl.w	#3,d0
000019AC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019B2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000019B8 6600                       		bne.s	loc_19C0
000019BA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000019C0                            
000019C0                            loc_19C0:
000019C0 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019C4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019C8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019CC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000019D0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019D4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019D8                            
000019D8                            loc_19D8:
000019D8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000019DC 0240 0007                  		andi.w	#7,d0
000019E0 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000019E4 6700                       		beq.s	locret_1A3A
000019E6 7201                       		moveq	#1,d1
000019E8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000019EC 6700                       		beq.s	loc_19F0
000019EE 4441                       		neg.w	d1
000019F0                            
000019F0                            loc_19F0:
000019F0 3038 F650                  		move.w	($FFFFF650).w,d0
000019F4 0240 0003                  		andi.w	#3,d0
000019F8 D041                       		add.w	d1,d0
000019FA 0C40 0003                  		cmpi.w	#3,d0
000019FE 6500                       		bcs.s	loc_1A0A
00001A00 3200                       		move.w	d0,d1
00001A02 7000                       		moveq	#0,d0
00001A04 4A41                       		tst.w	d1
00001A06 6A00                       		bpl.s	loc_1A0A
00001A08 7002                       		moveq	#2,d0
00001A0A                            
00001A0A                            loc_1A0A:
00001A0A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A0E D040                       		add.w	d0,d0
00001A10 3200                       		move.w	d0,d1
00001A12 D040                       		add.w	d0,d0
00001A14 D041                       		add.w	d1,d0
00001A16 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A1C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A24 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A28 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A2E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001A32 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A36 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A3A                            
00001A3A                            locret_1A3A:
00001A3A 4E75                       		rts	
00001A3C                            ; End of function PalCycle_LZ
00001A3C                            
00001A3C                            ; ===========================================================================
00001A3C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A44                            ; ===========================================================================
00001A44                            
00001A44                            PalCycle_MZ:				; XREF: PalCycle
00001A44 4E75                       		rts	
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            
00001A46                            PalCycle_SLZ:				; XREF: PalCycle
00001A46 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A4A 6A00                       		bpl.s	locret_1A80
00001A4C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A52 3038 F632                  		move.w	($FFFFF632).w,d0
00001A56 5240                       		addq.w	#1,d0
00001A58 0C40 0006                  		cmpi.w	#6,d0
00001A5C 6500                       		bcs.s	loc_1A60
00001A5E 7000                       		moveq	#0,d0
00001A60                            
00001A60                            loc_1A60:
00001A60 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A64 3200                       		move.w	d0,d1
00001A66 D241                       		add.w	d1,d1
00001A68 D041                       		add.w	d1,d0
00001A6A D040                       		add.w	d0,d0
00001A6C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001A72 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A76 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001A7A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001A80                            
00001A80                            locret_1A80:
00001A80 4E75                       		rts	
00001A82                            ; End of function PalCycle_SLZ
00001A82                            
00001A82                            
00001A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A82                            
00001A82                            
00001A82                            PalCycle_SYZ:				; XREF: PalCycle
00001A82 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A86 6A00                       		bpl.s	locret_1AC6
00001A88 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A8E 3038 F632                  		move.w	($FFFFF632).w,d0
00001A92 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A96 0240 0003                  		andi.w	#3,d0
00001A9A E548                       		lsl.w	#2,d0
00001A9C 3200                       		move.w	d0,d1
00001A9E D040                       		add.w	d0,d0
00001AA0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001AA6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001AAA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AAE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AB2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001AB8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001ABC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001AC0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001AC6                            
00001AC6                            locret_1AC6:
00001AC6 4E75                       		rts	
00001AC8                            ; End of function PalCycle_SYZ
00001AC8                            
00001AC8                            
00001AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC8                            
00001AC8                            
00001AC8                            PalCycle_SBZ:				; XREF: PalCycle
00001AC8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001ACE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AD2 6700                       		beq.s	loc_1ADA
00001AD4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001ADA                            
00001ADA                            loc_1ADA:
00001ADA 43F8 F650                  		lea	($FFFFF650).w,a1
00001ADE 321A                       		move.w	(a2)+,d1
00001AE0                            
00001AE0                            loc_1AE0:
00001AE0 5311                       		subq.b	#1,(a1)
00001AE2 6B00                       		bmi.s	loc_1AEA
00001AE4 5489                       		addq.l	#2,a1
00001AE6 5C8A                       		addq.l	#6,a2
00001AE8 6000                       		bra.s	loc_1B06
00001AEA                            ; ===========================================================================
00001AEA                            
00001AEA                            loc_1AEA:				; XREF: PalCycle_SBZ
00001AEA 12DA                       		move.b	(a2)+,(a1)+
00001AEC 1011                       		move.b	(a1),d0
00001AEE 5200                       		addq.b	#1,d0
00001AF0 B01A                       		cmp.b	(a2)+,d0
00001AF2 6500                       		bcs.s	loc_1AF6
00001AF4 7000                       		moveq	#0,d0
00001AF6                            
00001AF6                            loc_1AF6:
00001AF6 12C0                       		move.b	d0,(a1)+
00001AF8 0240 000F                  		andi.w	#$F,d0
00001AFC D040                       		add.w	d0,d0
00001AFE 305A                       		movea.w	(a2)+,a0
00001B00 365A                       		movea.w	(a2)+,a3
00001B02 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B06                            
00001B06                            loc_1B06:				; XREF: PalCycle_SBZ
00001B06 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B0A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B0E 6A00                       		bpl.s	locret_1B64
00001B10 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B16 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B1C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B20 6700                       		beq.s	loc_1B2E
00001B22 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B28 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B2E                            
00001B2E                            loc_1B2E:
00001B2E 72FF                       		moveq	#-1,d1
00001B30 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B34 6700                       		beq.s	loc_1B38
00001B36 4441                       		neg.w	d1
00001B38                            
00001B38                            loc_1B38:
00001B38 3038 F632                  		move.w	($FFFFF632).w,d0
00001B3C 0240 0003                  		andi.w	#3,d0
00001B40 D041                       		add.w	d1,d0
00001B42 0C40 0003                  		cmpi.w	#3,d0
00001B46 6500                       		bcs.s	loc_1B52
00001B48 3200                       		move.w	d0,d1
00001B4A 7000                       		moveq	#0,d0
00001B4C 4A41                       		tst.w	d1
00001B4E 6A00                       		bpl.s	loc_1B52
00001B50 7002                       		moveq	#2,d0
00001B52                            
00001B52                            loc_1B52:
00001B52 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B56 D040                       		add.w	d0,d0
00001B58 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B5C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B60 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B64                            
00001B64                            locret_1B64:
00001B64 4E75                       		rts	
00001B66                            ; End of function PalCycle_SBZ
00001B66                            
00001B66                            ; ===========================================================================
00001B66                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001B86                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001BA6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001BC6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001BD8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001BEA                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C52                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001C76                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001C96                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001CA6                            
00001CA6                            Pal_SBZCycList:
00001CA6                            	include "_inc\SBZ pallet script 1.asm"
00001CA6                            ; ---------------------------------------------------------------------------
00001CA6                            ; Scrap Brain Zone 1 pallet cycling script
00001CA6                            ; ---------------------------------------------------------------------------
00001CA6 0008                       	dc.w 8			; number of entries - 1
00001CA8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001CAA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001CAC FB50                       	dc.w $FB50		; RAM address
00001CAE 0D08                       	dc.b $D, 8
00001CB0 0000                       	dc.w Pal_SBZCyc2
00001CB2 FB52                       	dc.w $FB52
00001CB4 0E08                       	dc.b $E, 8
00001CB6 0000                       	dc.w Pal_SBZCyc3
00001CB8 FB6E                       	dc.w $FB6E
00001CBA 0B08                       	dc.b $B, 8
00001CBC 0000                       	dc.w Pal_SBZCyc5
00001CBE FB70                       	dc.w $FB70
00001CC0 0708                       	dc.b 7,	8
00001CC2 0000                       	dc.w Pal_SBZCyc6
00001CC4 FB72                       	dc.w $FB72
00001CC6 1C10                       	dc.b $1C, $10
00001CC8 0000                       	dc.w Pal_SBZCyc7
00001CCA FB7E                       	dc.w $FB7E
00001CCC 0303                       	dc.b 3,	3
00001CCE 0000                       	dc.w Pal_SBZCyc8
00001CD0 FB78                       	dc.w $FB78
00001CD2 0303                       	dc.b 3,	3
00001CD4 0000                       	dc.w Pal_SBZCyc8+2
00001CD6 FB7A                       	dc.w $FB7A
00001CD8 0303                       	dc.b 3,	3
00001CDA 0000                       	dc.w Pal_SBZCyc8+4
00001CDC FB7C                       	dc.w $FB7C
00001CDE                            	even
00001CDE                            	even
00001CDE                            
00001CDE                            Pal_SBZCycList2:
00001CDE                            	include "_inc\SBZ pallet script 2.asm"
00001CDE                            ; ---------------------------------------------------------------------------
00001CDE                            ; Scrap Brain Zone 2 pallet cycling script
00001CDE                            ; ---------------------------------------------------------------------------
00001CDE 0006                       	dc.w 6
00001CE0 0708                       	dc.b 7,	8
00001CE2 0000                       	dc.w Pal_SBZCyc1
00001CE4 FB50                       	dc.w $FB50
00001CE6 0D08                       	dc.b $D, 8
00001CE8 0000                       	dc.w Pal_SBZCyc2
00001CEA FB52                       	dc.w $FB52
00001CEC 0908                       	dc.b 9,	8
00001CEE 0000                       	dc.w Pal_SBZCyc9
00001CF0 FB70                       	dc.w $FB70
00001CF2 0708                       	dc.b 7,	8
00001CF4 0000                       	dc.w Pal_SBZCyc6
00001CF6 FB72                       	dc.w $FB72
00001CF8 0303                       	dc.b 3,	3
00001CFA 0000                       	dc.w Pal_SBZCyc8
00001CFC FB78                       	dc.w $FB78
00001CFE 0303                       	dc.b 3,	3
00001D00 0000                       	dc.w Pal_SBZCyc8+2
00001D02 FB7A                       	dc.w $FB7A
00001D04 0303                       	dc.b 3,	3
00001D06 0000                       	dc.w Pal_SBZCyc8+4
00001D08 FB7C                       	dc.w $FB7C
00001D0A                            	even
00001D0A                            	even
00001D0A                            
00001D0A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D1A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D2A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D3A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D46                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D56                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D66                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001D86                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001D90                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DA0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001DAC                            ; ---------------------------------------------------------------------------
00001DAC                            ; Subroutine to	fade out and fade in
00001DAC                            ; ---------------------------------------------------------------------------
00001DAC                            
00001DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DAC                            
00001DAC                            
00001DAC                            Pal_FadeTo:
00001DAC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001DB2                            
00001DB2                            Pal_FadeTo2:
00001DB2 7000                       		moveq	#0,d0
00001DB4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001DBC D0C0                       		adda.w	d0,a0
00001DBE 7200                       		moveq	#0,d1
00001DC0 1038 F627                  		move.b	($FFFFF627).w,d0
00001DC4                            
00001DC4                            Pal_ToBlack:
00001DC4 30C1                       		move.w	d1,(a0)+
00001DC6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001DCA                            
00001DCA 383C 0015                  		move.w	#$15,d4
00001DCE                            
00001DCE                            loc_1DCE:
00001DCE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001DD4 6100 0000                  		bsr.w	DelayProgram
00001DD8 6100                       		bsr.s	Pal_FadeIn
00001DDA 6100 F810                  		bsr.w	RunPLC_RAM
00001DDE 51CC FFEE                  		dbf	d4,loc_1DCE
00001DE2 4E75                       		rts	
00001DE4                            ; End of function Pal_FadeTo
00001DE4                            
00001DE4                            ; ---------------------------------------------------------------------------
00001DE4                            ; Pallet fade-in subroutine
00001DE4                            ; ---------------------------------------------------------------------------
00001DE4                            
00001DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DE4                            
00001DE4                            
00001DE4                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001DE4 7000                       		moveq	#0,d0
00001DE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DEA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001DEE 1038 F626                  		move.b	($FFFFF626).w,d0
00001DF2 D0C0                       		adda.w	d0,a0
00001DF4 D2C0                       		adda.w	d0,a1
00001DF6 1038 F627                  		move.b	($FFFFF627).w,d0
00001DFA                            
00001DFA                            loc_1DFA:
00001DFA 6100                       		bsr.s	Pal_AddColor
00001DFC 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E00 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001E06 6600                       		bne.s	locret_1E24
00001E08 7000                       		moveq	#0,d0
00001E0A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E0E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001E12 1038 F626                  		move.b	($FFFFF626).w,d0
00001E16 D0C0                       		adda.w	d0,a0
00001E18 D2C0                       		adda.w	d0,a1
00001E1A 1038 F627                  		move.b	($FFFFF627).w,d0
00001E1E                            
00001E1E                            loc_1E1E:
00001E1E 6100                       		bsr.s	Pal_AddColor
00001E20 51C8 FFFC                  		dbf	d0,loc_1E1E
00001E24                            
00001E24                            locret_1E24:
00001E24 4E75                       		rts	
00001E26                            ; End of function Pal_FadeIn
00001E26                            
00001E26                            
00001E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E26                            
00001E26                            
00001E26                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E26 3419                       		move.w	(a1)+,d2
00001E28 3610                       		move.w	(a0),d3
00001E2A B642                       		cmp.w	d2,d3
00001E2C 6700                       		beq.s	loc_1E4E
00001E2E 3203                       		move.w	d3,d1
00001E30 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E34 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E36 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E38 30C1                       		move.w	d1,(a0)+	; update pallet
00001E3A 4E75                       		rts	
00001E3C                            ; ===========================================================================
00001E3C                            
00001E3C                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E3C 3203                       		move.w	d3,d1
00001E3E 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E42 B242                       		cmp.w	d2,d1
00001E44 6200                       		bhi.s	Pal_AddRed
00001E46 30C1                       		move.w	d1,(a0)+	; update pallet
00001E48 4E75                       		rts	
00001E4A                            ; ===========================================================================
00001E4A                            
00001E4A                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E4A 5458                       		addq.w	#2,(a0)+	; increase red value
00001E4C 4E75                       		rts	
00001E4E                            ; ===========================================================================
00001E4E                            
00001E4E                            loc_1E4E:				; XREF: Pal_AddColor
00001E4E 5448                       		addq.w	#2,a0
00001E50 4E75                       		rts	
00001E52                            ; End of function Pal_AddColor
00001E52                            
00001E52                            
00001E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E52                            
00001E52                            
00001E52                            Pal_FadeFrom:
00001E52 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E58 383C 0015                  		move.w	#$15,d4
00001E5C                            
00001E5C                            loc_1E5C:
00001E5C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E62 6100 0000                  		bsr.w	DelayProgram
00001E66 6100                       		bsr.s	Pal_FadeOut
00001E68 6100 F782                  		bsr.w	RunPLC_RAM
00001E6C 51CC FFEE                  		dbf	d4,loc_1E5C
00001E70 4E75                       		rts	
00001E72                            ; End of function Pal_FadeFrom
00001E72                            
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            ; Pallet fade-out subroutine
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            
00001E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E72                            
00001E72                            
00001E72                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E72 7000                       		moveq	#0,d0
00001E74 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E78 1038 F626                  		move.b	($FFFFF626).w,d0
00001E7C D0C0                       		adda.w	d0,a0
00001E7E 1038 F627                  		move.b	($FFFFF627).w,d0
00001E82                            
00001E82                            loc_1E82:
00001E82 6100                       		bsr.s	Pal_DecColor
00001E84 51C8 FFFC                  		dbf	d0,loc_1E82
00001E88                            
00001E88 7000                       		moveq	#0,d0
00001E8A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E8E 1038 F626                  		move.b	($FFFFF626).w,d0
00001E92 D0C0                       		adda.w	d0,a0
00001E94 1038 F627                  		move.b	($FFFFF627).w,d0
00001E98                            
00001E98                            loc_1E98:
00001E98 6100                       		bsr.s	Pal_DecColor
00001E9A 51C8 FFFC                  		dbf	d0,loc_1E98
00001E9E 4E75                       		rts	
00001EA0                            ; End of function Pal_FadeOut
00001EA0                            
00001EA0                            
00001EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EA0                            
00001EA0                            
00001EA0                            Pal_DecColor:				; XREF: Pal_FadeOut
00001EA0 3410                       		move.w	(a0),d2
00001EA2 6700                       		beq.s	loc_1ECC
00001EA4 3202                       		move.w	d2,d1
00001EA6 0241 000E                  		andi.w	#$E,d1
00001EAA 6700                       		beq.s	Pal_DecGreen
00001EAC 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EAE 4E75                       		rts	
00001EB0                            ; ===========================================================================
00001EB0                            
00001EB0                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EB0 3202                       		move.w	d2,d1
00001EB2 0241 00E0                  		andi.w	#$E0,d1
00001EB6 6700                       		beq.s	Pal_DecBlue
00001EB8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001EBC 4E75                       		rts	
00001EBE                            ; ===========================================================================
00001EBE                            
00001EBE                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001EBE 3202                       		move.w	d2,d1
00001EC0 0241 0E00                  		andi.w	#$E00,d1
00001EC4 6700                       		beq.s	loc_1ECC
00001EC6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001ECA 4E75                       		rts	
00001ECC                            ; ===========================================================================
00001ECC                            
00001ECC                            loc_1ECC:				; XREF: Pal_DecColor
00001ECC 5448                       		addq.w	#2,a0
00001ECE 4E75                       		rts	
00001ED0                            ; End of function Pal_DecColor
00001ED0                            
00001ED0                            ; ---------------------------------------------------------------------------
00001ED0                            ; Subroutine to	fill the pallet	with white (special stage)
00001ED0                            ; ---------------------------------------------------------------------------
00001ED0                            
00001ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED0                            
00001ED0                            
00001ED0                            Pal_MakeWhite:				; XREF: SpecialStage
00001ED0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001ED6 7000                       		moveq	#0,d0
00001ED8 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EDC 1038 F626                  		move.b	($FFFFF626).w,d0
00001EE0 D0C0                       		adda.w	d0,a0
00001EE2 323C 0EEE                  		move.w	#$EEE,d1
00001EE6 1038 F627                  		move.b	($FFFFF627).w,d0
00001EEA                            
00001EEA                            PalWhite_Loop:
00001EEA 30C1                       		move.w	d1,(a0)+
00001EEC 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EF0 383C 0015                  		move.w	#$15,d4
00001EF4                            
00001EF4                            loc_1EF4:
00001EF4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001EFA 6100 0000                  		bsr.w	DelayProgram
00001EFE 6100                       		bsr.s	Pal_WhiteToBlack
00001F00 6100 F6EA                  		bsr.w	RunPLC_RAM
00001F04 51CC FFEE                  		dbf	d4,loc_1EF4
00001F08 4E75                       		rts	
00001F0A                            ; End of function Pal_MakeWhite
00001F0A                            
00001F0A                            
00001F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F0A                            
00001F0A                            
00001F0A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F0A 7000                       		moveq	#0,d0
00001F0C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F10 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F14 1038 F626                  		move.b	($FFFFF626).w,d0
00001F18 D0C0                       		adda.w	d0,a0
00001F1A D2C0                       		adda.w	d0,a1
00001F1C 1038 F627                  		move.b	($FFFFF627).w,d0
00001F20                            
00001F20                            loc_1F20:
00001F20 6100                       		bsr.s	Pal_DecColor2
00001F22 51C8 FFFC                  		dbf	d0,loc_1F20
00001F26                            
00001F26 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F2C 6600                       		bne.s	locret_1F4A
00001F2E 7000                       		moveq	#0,d0
00001F30 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F34 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001F38 1038 F626                  		move.b	($FFFFF626).w,d0
00001F3C D0C0                       		adda.w	d0,a0
00001F3E D2C0                       		adda.w	d0,a1
00001F40 1038 F627                  		move.b	($FFFFF627).w,d0
00001F44                            
00001F44                            loc_1F44:
00001F44 6100                       		bsr.s	Pal_DecColor2
00001F46 51C8 FFFC                  		dbf	d0,loc_1F44
00001F4A                            
00001F4A                            locret_1F4A:
00001F4A 4E75                       		rts	
00001F4C                            ; End of function Pal_WhiteToBlack
00001F4C                            
00001F4C                            
00001F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F4C                            
00001F4C                            
00001F4C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F4C 3419                       		move.w	(a1)+,d2
00001F4E 3610                       		move.w	(a0),d3
00001F50 B642                       		cmp.w	d2,d3
00001F52 6700                       		beq.s	loc_1F78
00001F54 3203                       		move.w	d3,d1
00001F56 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F5A 6500                       		bcs.s	loc_1F64
00001F5C B242                       		cmp.w	d2,d1
00001F5E 6500                       		bcs.s	loc_1F64
00001F60 30C1                       		move.w	d1,(a0)+
00001F62 4E75                       		rts	
00001F64                            ; ===========================================================================
00001F64                            
00001F64                            loc_1F64:				; XREF: Pal_DecColor2
00001F64 3203                       		move.w	d3,d1
00001F66 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F6A 6500                       		bcs.s	loc_1F74
00001F6C B242                       		cmp.w	d2,d1
00001F6E 6500                       		bcs.s	loc_1F74
00001F70 30C1                       		move.w	d1,(a0)+
00001F72 4E75                       		rts	
00001F74                            ; ===========================================================================
00001F74                            
00001F74                            loc_1F74:				; XREF: loc_1F64
00001F74 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F76 4E75                       		rts	
00001F78                            ; ===========================================================================
00001F78                            
00001F78                            loc_1F78:				; XREF: Pal_DecColor2
00001F78 5448                       		addq.w	#2,a0
00001F7A 4E75                       		rts	
00001F7C                            ; End of function Pal_DecColor2
00001F7C                            
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            ; Subroutine to	make a white flash when	you enter a special stage
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            
00001F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F7C                            
00001F7C                            
00001F7C                            Pal_MakeFlash:				; XREF: SpecialStage
00001F7C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F82 383C 0015                  		move.w	#$15,d4
00001F86                            
00001F86                            loc_1F86:
00001F86 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F8C 6100 0000                  		bsr.w	DelayProgram
00001F90 6100                       		bsr.s	Pal_ToWhite
00001F92 6100 F658                  		bsr.w	RunPLC_RAM
00001F96 51CC FFEE                  		dbf	d4,loc_1F86
00001F9A 4E75                       		rts	
00001F9C                            ; End of function Pal_MakeFlash
00001F9C                            
00001F9C                            
00001F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F9C                            
00001F9C                            
00001F9C                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAC                            
00001FAC                            loc_1FAC:
00001FAC 6100                       		bsr.s	Pal_AddColor2
00001FAE 51C8 FFFC                  		dbf	d0,loc_1FAC
00001FB2 7000                       		moveq	#0,d0
00001FB4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBC D0C0                       		adda.w	d0,a0
00001FBE 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC2                            
00001FC2                            loc_1FC2:
00001FC2 6100                       		bsr.s	Pal_AddColor2
00001FC4 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FC8 4E75                       		rts	
00001FCA                            ; End of function Pal_ToWhite
00001FCA                            
00001FCA                            
00001FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCA                            
00001FCA                            
00001FCA                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FCA 3410                       		move.w	(a0),d2
00001FCC 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FD0 6700                       		beq.s	loc_2006
00001FD2 3202                       		move.w	d2,d1
00001FD4 0241 000E                  		andi.w	#$E,d1
00001FD8 0C41 000E                  		cmpi.w	#$E,d1
00001FDC 6700                       		beq.s	loc_1FE2
00001FDE 5458                       		addq.w	#2,(a0)+	; increase red value
00001FE0 4E75                       		rts	
00001FE2                            ; ===========================================================================
00001FE2                            
00001FE2                            loc_1FE2:				; XREF: Pal_AddColor2
00001FE2 3202                       		move.w	d2,d1
00001FE4 0241 00E0                  		andi.w	#$E0,d1
00001FE8 0C41 00E0                  		cmpi.w	#$E0,d1
00001FEC 6700                       		beq.s	loc_1FF4
00001FEE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FF2 4E75                       		rts	
00001FF4                            ; ===========================================================================
00001FF4                            
00001FF4                            loc_1FF4:				; XREF: loc_1FE2
00001FF4 3202                       		move.w	d2,d1
00001FF6 0241 0E00                  		andi.w	#$E00,d1
00001FFA 0C41 0E00                  		cmpi.w	#$E00,d1
00001FFE 6700                       		beq.s	loc_2006
00002000 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002004 4E75                       		rts	
00002006                            ; ===========================================================================
00002006                            
00002006                            loc_2006:				; XREF: Pal_AddColor2
00002006 5448                       		addq.w	#2,a0
00002008 4E75                       		rts	
0000200A                            ; End of function Pal_AddColor2
0000200A                            
0000200A                            ; ---------------------------------------------------------------------------
0000200A                            ; Pallet cycling routine - Sega	logo
0000200A                            ; ---------------------------------------------------------------------------
0000200A                            
0000200A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000200A                            
0000200A                            
0000200A                            PalCycle_Sega:				; XREF: SegaScreen
0000200A 4A38 F635                  		tst.b	($FFFFF635).w
0000200E 6600                       		bne.s	loc_206A
00002010 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002014 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000201A 7205                       		moveq	#5,d1
0000201C 3038 F632                  		move.w	($FFFFF632).w,d0
00002020                            
00002020                            loc_2020:
00002020 6A00                       		bpl.s	loc_202A
00002022 5448                       		addq.w	#2,a0
00002024 5341                       		subq.w	#1,d1
00002026 5440                       		addq.w	#2,d0
00002028 60F6                       		bra.s	loc_2020
0000202A                            ; ===========================================================================
0000202A                            
0000202A                            loc_202A:				; XREF: PalCycle_Sega
0000202A 3400                       		move.w	d0,d2
0000202C 0242 001E                  		andi.w	#$1E,d2
00002030 6600                       		bne.s	loc_2034
00002032 5440                       		addq.w	#2,d0
00002034                            
00002034                            loc_2034:
00002034 0C40 0060                  		cmpi.w	#$60,d0
00002038 6400                       		bcc.s	loc_203E
0000203A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000203E                            
0000203E                            loc_203E:
0000203E 5440                       		addq.w	#2,d0
00002040 51C9 FFE8                  		dbf	d1,loc_202A
00002044 3038 F632                  		move.w	($FFFFF632).w,d0
00002048 5440                       		addq.w	#2,d0
0000204A 3400                       		move.w	d0,d2
0000204C 0242 001E                  		andi.w	#$1E,d2
00002050 6600                       		bne.s	loc_2054
00002052 5440                       		addq.w	#2,d0
00002054                            
00002054                            loc_2054:
00002054 0C40 0064                  		cmpi.w	#$64,d0
00002058 6D00                       		blt.s	loc_2062
0000205A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002060 70F4                       		moveq	#-$C,d0
00002062                            
00002062                            loc_2062:
00002062 31C0 F632                  		move.w	d0,($FFFFF632).w
00002066 7001                       		moveq	#1,d0
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            loc_206A:				; XREF: loc_202A
0000206A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000206E 6A00                       		bpl.s	loc_20BC
00002070 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002076 3038 F632                  		move.w	($FFFFF632).w,d0
0000207A 0640 000C                  		addi.w	#$C,d0
0000207E 0C40 0030                  		cmpi.w	#$30,d0
00002082 6500                       		bcs.s	loc_2088
00002084 7000                       		moveq	#0,d0
00002086 4E75                       		rts	
00002088                            ; ===========================================================================
00002088                            
00002088                            loc_2088:				; XREF: loc_206A
00002088 31C0 F632                  		move.w	d0,($FFFFF632).w
0000208C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002092 41F0 0000                  		lea	(a0,d0.w),a0
00002096 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000209A 22D8                       		move.l	(a0)+,(a1)+
0000209C 22D8                       		move.l	(a0)+,(a1)+
0000209E 3298                       		move.w	(a0)+,(a1)
000020A0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000020A4 7000                       		moveq	#0,d0
000020A6 722C                       		moveq	#$2C,d1
000020A8                            
000020A8                            loc_20A8:
000020A8 3400                       		move.w	d0,d2
000020AA 0242 001E                  		andi.w	#$1E,d2
000020AE 6600                       		bne.s	loc_20B2
000020B0 5440                       		addq.w	#2,d0
000020B2                            
000020B2                            loc_20B2:
000020B2 3390 0000                  		move.w	(a0),(a1,d0.w)
000020B6 5440                       		addq.w	#2,d0
000020B8 51C9 FFEE                  		dbf	d1,loc_20A8
000020BC                            
000020BC                            loc_20BC:
000020BC 7001                       		moveq	#1,d0
000020BE 4E75                       		rts	
000020C0                            ; End of function PalCycle_Sega
000020C0                            
000020C0                            ; ===========================================================================
000020C0                            
000020C0                            Pal_Sega1:	incbin	pallet\sega1.bin
000020CC                            Pal_Sega2:	incbin	pallet\sega2.bin
000020FC                            
000020FC                            ; ---------------------------------------------------------------------------
000020FC                            ; Subroutines to load pallets
000020FC                            ; ---------------------------------------------------------------------------
000020FC                            
000020FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020FC                            
000020FC                            
000020FC                            PalLoad1:
000020FC 43F9 0000 0000             		lea	(PalPointers).l,a1
00002102 E748                       		lsl.w	#3,d0
00002104 D2C0                       		adda.w	d0,a1
00002106 2459                       		movea.l	(a1)+,a2
00002108 3659                       		movea.w	(a1)+,a3
0000210A D6FC 0080                  		adda.w	#$80,a3
0000210E 3E19                       		move.w	(a1)+,d7
00002110                            
00002110                            loc_2110:
00002110 26DA                       		move.l	(a2)+,(a3)+
00002112 51CF FFFC                  		dbf	d7,loc_2110
00002116 4E75                       		rts	
00002118                            ; End of function PalLoad1
00002118                            
00002118                            
00002118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002118                            
00002118                            
00002118                            PalLoad2:
00002118 43F9 0000 0000             		lea	(PalPointers).l,a1
0000211E E748                       		lsl.w	#3,d0
00002120 D2C0                       		adda.w	d0,a1
00002122 2459                       		movea.l	(a1)+,a2
00002124 3659                       		movea.w	(a1)+,a3
00002126 3E19                       		move.w	(a1)+,d7
00002128                            
00002128                            loc_2128:
00002128 26DA                       		move.l	(a2)+,(a3)+
0000212A 51CF FFFC                  		dbf	d7,loc_2128
0000212E 4E75                       		rts	
00002130                            ; End of function PalLoad2
00002130                            
00002130                            ; ---------------------------------------------------------------------------
00002130                            ; Underwater pallet loading subroutine
00002130                            ; ---------------------------------------------------------------------------
00002130                            
00002130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002130                            
00002130                            
00002130                            PalLoad3_Water:
00002130 43F9 0000 0000             		lea	(PalPointers).l,a1
00002136 E748                       		lsl.w	#3,d0
00002138 D2C0                       		adda.w	d0,a1
0000213A 2459                       		movea.l	(a1)+,a2
0000213C 3659                       		movea.w	(a1)+,a3
0000213E 96FC 0080                  		suba.w	#$80,a3
00002142 3E19                       		move.w	(a1)+,d7
00002144                            
00002144                            loc_2144:
00002144 26DA                       		move.l	(a2)+,(a3)+
00002146 51CF FFFC                  		dbf	d7,loc_2144
0000214A 4E75                       		rts	
0000214C                            ; End of function PalLoad3_Water
0000214C                            
0000214C                            
0000214C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000214C                            
0000214C                            
0000214C                            PalLoad4_Water:
0000214C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002152 E748                       		lsl.w	#3,d0
00002154 D2C0                       		adda.w	d0,a1
00002156 2459                       		movea.l	(a1)+,a2
00002158 3659                       		movea.w	(a1)+,a3
0000215A 96FC 0100                  		suba.w	#$100,a3
0000215E 3E19                       		move.w	(a1)+,d7
00002160                            
00002160                            loc_2160:
00002160 26DA                       		move.l	(a2)+,(a3)+
00002162 51CF FFFC                  		dbf	d7,loc_2160
00002166 4E75                       		rts	
00002168                            ; End of function PalLoad4_Water
00002168                            
00002168                            ; ===========================================================================
00002168                            ; ---------------------------------------------------------------------------
00002168                            ; Pallet pointers
00002168                            ; ---------------------------------------------------------------------------
00002168                            PalPointers:
00002168                            	include "_inc\Pallet pointers.asm"
00002168                            ; ---------------------------------------------------------------------------
00002168                            ; Pallet pointers
00002168                            ; ---------------------------------------------------------------------------
00002168 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000216C FB00                       	dc.w $FB00		; RAM address
0000216E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002170 0000 0000                  	dc.l Pal_Title
00002174 FB00                       	dc.w $FB00
00002176 001F                       	dc.w $1F
00002178 0000 0000                  	dc.l Pal_LevelSel
0000217C FB00                       	dc.w $FB00
0000217E 001F                       	dc.w $1F
00002180 0000 0000                  	dc.l Pal_Sonic
00002184 FB00                       	dc.w $FB00
00002186 0007                       	dc.w 7
00002188 0000 0000                  	dc.l Pal_GHZ
0000218C FB20                       	dc.w $FB20
0000218E 0017                       	dc.w $17
00002190 0000 0000                  	dc.l Pal_LZ
00002194 FB20                       	dc.w $FB20
00002196 0017                       	dc.w $17
00002198 0000 0000                  	dc.l Pal_MZ
0000219C FB20                       	dc.w $FB20
0000219E 0017                       	dc.w $17
000021A0 0000 0000                  	dc.l Pal_SLZ
000021A4 FB20                       	dc.w $FB20
000021A6 0017                       	dc.w $17
000021A8 0000 0000                  	dc.l Pal_SYZ
000021AC FB20                       	dc.w $FB20
000021AE 0017                       	dc.w $17
000021B0 0000 0000                  	dc.l Pal_SBZ1
000021B4 FB20                       	dc.w $FB20
000021B6 0017                       	dc.w $17
000021B8 0000 0000                  	dc.l Pal_Special
000021BC FB00                       	dc.w $FB00
000021BE 001F                       	dc.w $1F
000021C0 0000 0000                  	dc.l Pal_LZWater
000021C4 FB00                       	dc.w $FB00
000021C6 001F                       	dc.w $1F
000021C8 0000 0000                  	dc.l Pal_SBZ3
000021CC FB20                       	dc.w $FB20
000021CE 0017                       	dc.w $17
000021D0 0000 0000                  	dc.l Pal_SBZ3Water
000021D4 FB00                       	dc.w $FB00
000021D6 001F                       	dc.w $1F
000021D8 0000 0000                  	dc.l Pal_SBZ2
000021DC FB20                       	dc.w $FB20
000021DE 0017                       	dc.w $17
000021E0 0000 0000                  	dc.l Pal_LZSonWater
000021E4 FB00                       	dc.w $FB00
000021E6 0007                       	dc.w 7
000021E8 0000 0000                  	dc.l Pal_SBZ3SonWat
000021EC FB00                       	dc.w $FB00
000021EE 0007                       	dc.w 7
000021F0 0000 0000                  	dc.l Pal_SpeResult
000021F4 FB00                       	dc.w $FB00
000021F6 001F                       	dc.w $1F
000021F8 0000 0000                  	dc.l Pal_SpeContinue
000021FC FB00                       	dc.w $FB00
000021FE 000F                       	dc.w $F
00002200 0000 0000                  	dc.l Pal_Ending
00002204 FB00                       	dc.w $FB00
00002206 001F                       	dc.w $1F
00002206 001F                       	dc.w $1F
00002208                            
00002208                            ; ---------------------------------------------------------------------------
00002208                            ; Pallet data
00002208                            ; ---------------------------------------------------------------------------
00002208                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002288                            Pal_Title:	incbin	pallet\title.bin
00002308                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002388                            Pal_Sonic:	incbin	pallet\sonic.bin
000023A8                            Pal_GHZ:	incbin	pallet\ghz.bin
00002408                            Pal_LZ:		incbin	pallet\lz.bin
00002468                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024E8                            Pal_MZ:		incbin	pallet\mz.bin
00002548                            Pal_SLZ:	incbin	pallet\slz.bin
000025A8                            Pal_SYZ:	incbin	pallet\syz.bin
00002608                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002668                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026C8                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002748                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000027A8                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002828                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002848                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002868                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028E8                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002928                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000029A8                            
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            
000029A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A8                            
000029A8                            
000029A8                            DelayProgram:				; XREF: PauseGame
000029A8 46FC 2300                  		move	#$2300,sr
000029AC                            
000029AC                            loc_29AC:
000029AC 4A38 F62A                  		tst.b	($FFFFF62A).w
000029B0 66FA                       		bne.s	loc_29AC
000029B2 4E75                       		rts	
000029B4                            ; End of function DelayProgram
000029B4                            
000029B4                            ; ---------------------------------------------------------------------------
000029B4                            ; Subroutine to	generate a pseudo-random number	in d0
000029B4                            ; ---------------------------------------------------------------------------
000029B4                            
000029B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029B4                            
000029B4                            
000029B4                            RandomNumber:
000029B4 2238 F636                  		move.l	($FFFFF636).w,d1
000029B8 6600                       		bne.s	loc_29C0
000029BA 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029C0                            
000029C0                            loc_29C0:
000029C0 2001                       		move.l	d1,d0
000029C2 E581                       		asl.l	#2,d1
000029C4 D280                       		add.l	d0,d1
000029C6 E781                       		asl.l	#3,d1
000029C8 D280                       		add.l	d0,d1
000029CA 3001                       		move.w	d1,d0
000029CC 4841                       		swap	d1
000029CE D041                       		add.w	d1,d0
000029D0 3200                       		move.w	d0,d1
000029D2 4841                       		swap	d1
000029D4 21C1 F636                  		move.l	d1,($FFFFF636).w
000029D8 4E75                       		rts	
000029DA                            ; End of function RandomNumber
000029DA                            
000029DA                            
000029DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029DA                            
000029DA                            
000029DA                            CalcSine:				; XREF: SS_BGAnimate; et al
000029DA 0240 00FF                  		andi.w	#$FF,d0
000029DE D040                       		add.w	d0,d0
000029E0 0640 0080                  		addi.w	#$80,d0
000029E4 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000029E8 0440 0080                  		subi.w	#$80,d0
000029EC 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000029F0 4E75                       		rts	
000029F2                            ; End of function CalcSine
000029F2                            
000029F2                            ; ===========================================================================
000029F2                            
000029F2                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002C72                            
00002C72                            ; ===========================================================================
00002C72 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C76 3200                       		move.w	d0,d1
00002C78 4841                       		swap	d1
00002C7A 7000                       		moveq	#0,d0
00002C7C 3200                       		move.w	d0,d1
00002C7E 7407                       		moveq	#7,d2
00002C80                            
00002C80                            loc_2C80:
00002C80 E599                       		rol.l	#2,d1
00002C82 D040                       		add.w	d0,d0
00002C84 5240                       		addq.w	#1,d0
00002C86 9240                       		sub.w	d0,d1
00002C88 6400                       		bcc.s	loc_2C9A
00002C8A D240                       		add.w	d0,d1
00002C8C 5340                       		subq.w	#1,d0
00002C8E 51CA FFF0                  		dbf	d2,loc_2C80
00002C92 E248                       		lsr.w	#1,d0
00002C94 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C98 4E75                       		rts	
00002C9A                            ; ===========================================================================
00002C9A                            
00002C9A                            loc_2C9A:
00002C9A 5240                       		addq.w	#1,d0
00002C9C 51CA FFE2                  		dbf	d2,loc_2C80
00002CA0 E248                       		lsr.w	#1,d0
00002CA2 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002CA6 4E75                       		rts	
00002CA8                            
00002CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CA8                            
00002CA8                            
00002CA8                            CalcAngle:
00002CA8 48E7 1800                  		movem.l	d3-d4,-(sp)
00002CAC 7600                       		moveq	#0,d3
00002CAE 7800                       		moveq	#0,d4
00002CB0 3601                       		move.w	d1,d3
00002CB2 3802                       		move.w	d2,d4
00002CB4 8843                       		or.w	d3,d4
00002CB6 6700                       		beq.s	loc_2D04
00002CB8 3802                       		move.w	d2,d4
00002CBA 4A43                       		tst.w	d3
00002CBC 6A00 0000                  		bpl.w	loc_2CC2
00002CC0 4443                       		neg.w	d3
00002CC2                            
00002CC2                            loc_2CC2:
00002CC2 4A44                       		tst.w	d4
00002CC4 6A00 0000                  		bpl.w	loc_2CCA
00002CC8 4444                       		neg.w	d4
00002CCA                            
00002CCA                            loc_2CCA:
00002CCA B843                       		cmp.w	d3,d4
00002CCC 6400 0000                  		bcc.w	loc_2CDC
00002CD0 E18C                       		lsl.l	#8,d4
00002CD2 88C3                       		divu.w	d3,d4
00002CD4 7000                       		moveq	#0,d0
00002CD6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CDA 6000                       		bra.s	loc_2CE6
00002CDC                            ; ===========================================================================
00002CDC                            
00002CDC                            loc_2CDC:				; XREF: CalcAngle
00002CDC E18B                       		lsl.l	#8,d3
00002CDE 86C4                       		divu.w	d4,d3
00002CE0 7040                       		moveq	#$40,d0
00002CE2 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CE6                            
00002CE6                            loc_2CE6:
00002CE6 4A41                       		tst.w	d1
00002CE8 6A00 0000                  		bpl.w	loc_2CF2
00002CEC 4440                       		neg.w	d0
00002CEE 0640 0080                  		addi.w	#$80,d0
00002CF2                            
00002CF2                            loc_2CF2:
00002CF2 4A42                       		tst.w	d2
00002CF4 6A00 0000                  		bpl.w	loc_2CFE
00002CF8 4440                       		neg.w	d0
00002CFA 0640 0100                  		addi.w	#$100,d0
00002CFE                            
00002CFE                            loc_2CFE:
00002CFE 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D02 4E75                       		rts	
00002D04                            ; ===========================================================================
00002D04                            
00002D04                            loc_2D04:				; XREF: CalcAngle
00002D04 303C 0040                  		move.w	#$40,d0
00002D08 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D0C 4E75                       		rts	
00002D0E                            ; End of function CalcAngle
00002D0E                            
00002D0E                            ; ===========================================================================
00002D0E                            
00002D0E                            Angle_Data:	incbin	misc\angles.bin
00002E10                            
00002E10                            ; ===========================================================================
00002E10                            
00002E10                            ; ---------------------------------------------------------------------------
00002E10                            ; Sega screen
00002E10                            ; ---------------------------------------------------------------------------
00002E10                            
00002E10                            SegaScreen:				; XREF: GameModeArray
00002E10 103C 00E4                  		move.b	#$E4,d0
00002E14 6100 E586                  		bsr.w	PlaySound_Special ; stop music
00002E18 6100 E7C4                  		bsr.w	ClearPLC
00002E1C 6100 F034                  		bsr.w	Pal_FadeFrom
00002E20 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E26 3CBC 8004                  		move.w	#$8004,(a6)
00002E2A 3CBC 8230                  		move.w	#$8230,(a6)
00002E2E 3CBC 8407                  		move.w	#$8407,(a6)
00002E32 3CBC 8700                  		move.w	#$8700,(a6)
00002E36 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E3A 4238 F64E                  		clr.b	($FFFFF64E).w
00002E3E 46FC 2700                  		move	#$2700,sr
00002E42 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E46 0200 00BF                  		andi.b	#$BF,d0
00002E4A 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E50 6100 E472                  		bsr.w	ClearScreen
00002E54 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E5E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E64 6100 E5DA                  		bsr.w	NemDec
00002E68 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E6E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E74 303C 0000                  		move.w	#0,d0
00002E78 6100 E8A4                  		bsr.w	EniDec
00002E7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E82 203C 6510 0003             		move.l	#$65100003,d0
00002E88 7217                       		moveq	#$17,d1
00002E8A 7407                       		moveq	#7,d2
00002E8C 6100 E592                  		bsr.w	ShowVDPGraphics
00002E90 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E96 203C 4000 0003             		move.l	#$40000003,d0
00002E9C 7227                       		moveq	#$27,d1
00002E9E 741B                       		moveq	#$1B,d2
00002EA0 6100 E57E                  		bsr.w	ShowVDPGraphics
00002EA4 7000                       		moveq	#0,d0
00002EA6 6100 F270                  		bsr.w	PalLoad2	; load Sega logo pallet
00002EAA 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002EB0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002EB6 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002EBC 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002EC2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EC6 0000 0040                  		ori.b	#$40,d0
00002ECA 33C0 00C0 0004             		move.w	d0,($C00004).l
00002ED0                            
00002ED0                            Sega_WaitPallet:
00002ED0 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002ED6 6100 FAD0                  		bsr.w	DelayProgram
00002EDA 6100 F12E                  		bsr.w	PalCycle_Sega
00002EDE 66F0                       		bne.s	Sega_WaitPallet
00002EE0                            
00002EE0 103C 00E1                  		move.b	#$E1,d0
00002EE4 6100 E4B6                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EE8 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002EEE 6100 FAB8                  		bsr.w	DelayProgram
00002EF2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002EF8                            
00002EF8                            Sega_WaitEnd:
00002EF8 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EFE 6100 FAA8                  		bsr.w	DelayProgram
00002F02 4A78 F614                  		tst.w	($FFFFF614).w
00002F06 6700                       		beq.s	Sega_GotoTitle
00002F08 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F0E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F10                            
00002F10                            Sega_GotoTitle:
00002F10 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F16 4E75                       		rts	
00002F18                            ; ===========================================================================
00002F18                            
00002F18                            ; ---------------------------------------------------------------------------
00002F18                            ; Title	screen
00002F18                            ; ---------------------------------------------------------------------------
00002F18                            
00002F18                            TitleScreen:				; XREF: GameModeArray
00002F18 103C 00E4                  		move.b	#$E4,d0
00002F1C 6100 E47E                  		bsr.w	PlaySound_Special ; stop music
00002F20 6100 E6BC                  		bsr.w	ClearPLC
00002F24 6100 EF2C                  		bsr.w	Pal_FadeFrom
00002F28 46FC 2700                  		move	#$2700,sr
00002F2C 6100 E424                  		bsr.w	SoundDriverLoad
00002F30 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F36 3CBC 8004                  		move.w	#$8004,(a6)
00002F3A 3CBC 8230                  		move.w	#$8230,(a6)
00002F3E 3CBC 8407                  		move.w	#$8407,(a6)
00002F42 3CBC 9001                  		move.w	#$9001,(a6)
00002F46 3CBC 9200                  		move.w	#$9200,(a6)
00002F4A 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F4E 3CBC 8720                  		move.w	#$8720,(a6)
00002F52 4238 F64E                  		clr.b	($FFFFF64E).w
00002F56 6100 E36C                  		bsr.w	ClearScreen
00002F5A 43F8 D000                  		lea	($FFFFD000).w,a1
00002F5E 7000                       		moveq	#0,d0
00002F60 323C 07FF                  		move.w	#$7FF,d1
00002F64                            
00002F64                            Title_ClrObjRam:
00002F64 22C0                       		move.l	d0,(a1)+
00002F66 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002F6A                            
00002F6A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002F74 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002F7A 6100 E4C4                  		bsr.w	NemDec
00002F7E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002F88 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002F8E 6100 E4B0                  		bsr.w	NemDec
00002F92 43F9 00FF 0000             		lea	($FF0000).l,a1
00002F98 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002F9E 303C 0000                  		move.w	#0,d0
00002FA2 6100 E77A                  		bsr.w	EniDec
00002FA6 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FAC 203C 4000 0003             		move.l	#$40000003,d0
00002FB2 7227                       		moveq	#$27,d1
00002FB4 741B                       		moveq	#$1B,d2
00002FB6 6100 E468                  		bsr.w	ShowVDPGraphics
00002FBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002FBE 7000                       		moveq	#0,d0
00002FC0 323C 001F                  		move.w	#$1F,d1
00002FC4                            
00002FC4                            Title_ClrPallet:
00002FC4 22C0                       		move.l	d0,(a1)+
00002FC6 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00002FCA                            
00002FCA 7003                       		moveq	#3,d0		; load Sonic's pallet
00002FCC 6100 F12E                  		bsr.w	PalLoad1
00002FD0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00002FD6 4EB9 0000 0000             		jsr	ObjectsLoad
00002FDC 4EB9 0000 0000             		jsr	BuildSprites
00002FE2 6100 EDC8                  		bsr.w	Pal_FadeTo
00002FE6 46FC 2700                  		move	#$2700,sr
00002FEA 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00002FF4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00002FFA 6100 E444                  		bsr.w	NemDec
00002FFE 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003008 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000300E 6100 E430                  		bsr.w	NemDec
00003012 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000301C 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003022 6100 E41C                  		bsr.w	NemDec
00003026 4DF9 00C0 0000             		lea	($C00000).l,a6
0000302C 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003034 4BF9 0000 05F0             		lea	(Art_Text).l,a5
0000303A 323C 028F                  		move.w	#$28F,d1
0000303E                            
0000303E                            Title_LoadText:
0000303E 3C9D                       		move.w	(a5)+,(a6)
00003040 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003044                            
00003044 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000304A 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003050 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003056 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000305C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003062 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003068 6100 0000                  		bsr.w	LevelSizeLoad
0000306C 6100 0000                  		bsr.w	DeformBgLayer
00003070 43F8 B000                  		lea	($FFFFB000).w,a1
00003074 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000307A 303C 0000                  		move.w	#0,d0
0000307E 6100 E69E                  		bsr.w	EniDec
00003082 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003088 43F9 00FF 0000             		lea	($FF0000).l,a1
0000308E 6100 E80C                  		bsr.w	KosDec
00003092 6100 0000                  		bsr.w	LevelLayoutLoad
00003096 6100 EDBA                  		bsr.w	Pal_FadeFrom
0000309A 46FC 2700                  		move	#$2700,sr
0000309E 6100 E224                  		bsr.w	ClearScreen
000030A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000030A8 4DF9 00C0 0000             		lea	($C00000).l,a6
000030AE 47F8 F708                  		lea	($FFFFF708).w,a3
000030B2 49F8 A440                  		lea	($FFFFA440).w,a4
000030B6 343C 6000                  		move.w	#$6000,d2
000030BA 6100 0000                  		bsr.w	LoadTilesFromStart2
000030BE 43F9 00FF 0000             		lea	($FF0000).l,a1
000030C4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000030CA 303C 0000                  		move.w	#0,d0
000030CE 6100 E64E                  		bsr.w	EniDec
000030D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030D8 203C 4206 0003             		move.l	#$42060003,d0
000030DE 7221                       		moveq	#$21,d1
000030E0 7415                       		moveq	#$15,d2
000030E2 6100 E33C                  		bsr.w	ShowVDPGraphics
000030E6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030F0 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000030F6 6100 E348                  		bsr.w	NemDec
000030FA 7001                       		moveq	#1,d0		; load title screen pallet
000030FC 6100 EFFE                  		bsr.w	PalLoad1
00003100 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003104 6100 E296                  		bsr.w	PlaySound_Special
00003108 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000310E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003114 43F8 D080                  		lea	($FFFFD080).w,a1
00003118 7000                       		moveq	#0,d0
0000311A 323C 0007                  		move.w	#7,d1
0000311E                            
0000311E                            Title_ClrObjRam2:
0000311E 22C0                       		move.l	d0,(a1)+
00003120 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003124                            
00003124 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000312A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003130 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003136 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000313C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003142 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003148 4EB9 0000 0000             		jsr	ObjectsLoad
0000314E 6100 0000                  		bsr.w	DeformBgLayer
00003152 4EB9 0000 0000             		jsr	BuildSprites
00003158 7000                       		moveq	#0,d0
0000315A 6100 E456                  		bsr.w	LoadPLC2
0000315E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003164 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000316A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000316E 0000 0040                  		ori.b	#$40,d0
00003172 33C0 00C0 0004             		move.w	d0,($C00004).l
00003178 6100 EC32                  		bsr.w	Pal_FadeTo
0000317C                            
0000317C                            loc_317C:
0000317C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003182 6100 F824                  		bsr.w	DelayProgram
00003186 4EB9 0000 0000             		jsr	ObjectsLoad
0000318C 6100 0000                  		bsr.w	DeformBgLayer
00003190 4EB9 0000 0000             		jsr	BuildSprites
00003196 6100 E7C4                  		bsr.w	PalCycle_Title
0000319A 6100 E450                  		bsr.w	RunPLC_RAM
0000319E 3038 D008                  		move.w	($FFFFD008).w,d0
000031A2 5440                       		addq.w	#2,d0
000031A4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000031A8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000031AC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000031AE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000031B4 4E75                       		rts	
000031B6                            ; ===========================================================================
000031B6                            
000031B6                            Title_ChkRegion:
000031B6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000031BA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000031BC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000031C2 6000                       		bra.s	Title_EnterCheat
000031C4                            ; ===========================================================================
000031C4                            
000031C4                            Title_RegionJ:				; XREF: Title_ChkRegion
000031C4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000031CA                            
000031CA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000031CA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000031CE D0C0                       		adda.w	d0,a0
000031D0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000031D4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000031D8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000031DA 6600                       		bne.s	loc_3210	; if not, branch
000031DC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000031E0 4A00                       		tst.b	d0
000031E2 6600                       		bne.s	Title_CountC
000031E4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000031E8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000031EC E249                       		lsr.w	#1,d1
000031EE 0241 0003                  		andi.w	#3,d1
000031F2 6700                       		beq.s	Title_PlayRing
000031F4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000031F8 6A00                       		bpl.s	Title_PlayRing
000031FA 7201                       		moveq	#1,d1
000031FC 1181 1001                  		move.b	d1,1(a0,d1.w)
00003200                            
00003200                            Title_PlayRing:
00003200 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003206 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000320A 6100 E190                  		bsr.w	PlaySound_Special
0000320E 6000                       		bra.s	Title_CountC
00003210                            ; ===========================================================================
00003210                            
00003210                            loc_3210:				; XREF: Title_EnterCheat
00003210 4A00                       		tst.b	d0
00003212 6700                       		beq.s	Title_CountC
00003214 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000321A 6700                       		beq.s	Title_CountC
0000321C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003222                            
00003222                            Title_CountC:
00003222 1038 F605                  		move.b	($FFFFF605).w,d0
00003226 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000322A 6700                       		beq.s	loc_3230	; if not, branch
0000322C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003230                            
00003230                            loc_3230:
00003230 4A78 F614                  		tst.w	($FFFFF614).w
00003234 6700 0000                  		beq.w	Demo
00003238 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000323E 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003242                            
00003242                            Title_ChkLevSel:
00003242 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003246 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000324A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003250 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003254 7002                       		moveq	#2,d0
00003256 6100 EEC0                  		bsr.w	PalLoad2	; load level select pallet
0000325A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000325E 7000                       		moveq	#0,d0
00003260 323C 00DF                  		move.w	#$DF,d1
00003264                            
00003264                            Title_ClrScroll:
00003264 22C0                       		move.l	d0,(a1)+
00003266 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000326A                            
0000326A 21C0 F616                  		move.l	d0,($FFFFF616).w
0000326E 46FC 2700                  		move	#$2700,sr
00003272 4DF9 00C0 0000             		lea	($C00000).l,a6
00003278 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003282 323C 03FF                  		move.w	#$3FF,d1
00003286                            
00003286                            Title_ClrVram:
00003286 2C80                       		move.l	d0,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000328C                            
0000328C 6100 0000                  		bsr.w	LevSelTextLoad
00003290                            
00003290                            ; ---------------------------------------------------------------------------
00003290                            ; Level	Select
00003290                            ; ---------------------------------------------------------------------------
00003290                            
00003290                            LevelSelect:
00003290 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003296 6100 F710                  		bsr.w	DelayProgram
0000329A 6100 0000                  		bsr.w	LevSelControls
0000329E 6100 E34C                  		bsr.w	RunPLC_RAM
000032A2 4AB8 F680                  		tst.l	($FFFFF680).w
000032A6 66E8                       		bne.s	LevelSelect
000032A8 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000032AE 67E0                       		beq.s	LevelSelect	; if not, branch
000032B0 3038 FF82                  		move.w	($FFFFFF82).w,d0
000032B4 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000032B8 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000032BA 3038 FF84                  		move.w	($FFFFFF84).w,d0
000032BE 0640 0080                  		addi.w	#$80,d0
000032C2 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000032C6 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000032C8 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000032CC 6700                       		beq.s	LevSel_Ending	; if yes, branch
000032CE 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000032D2 6700                       		beq.s	LevSel_Credits	; if yes, branch
000032D4                            
000032D4                            LevSel_NoCheat:
000032D4 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
000032D8 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000032DA 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000032DE 65B0                       		bcs.s	LevelSelect	; if yes, branch
000032E0                            
000032E0                            LevSel_PlaySnd:
000032E0 6100 E0BA                  		bsr.w	PlaySound_Special
000032E4 60AA                       		bra.s	LevelSelect
000032E6                            ; ===========================================================================
000032E6                            
000032E6                            LevSel_Ending:				; XREF: LevelSelect
000032E6 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000032EC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000032F2 4E75                       		rts	
000032F4                            ; ===========================================================================
000032F4                            
000032F4                            LevSel_Credits:				; XREF: LevelSelect
000032F4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000032FA 103C 0091                  		move.b	#$91,d0
000032FE 6100 E09C                  		bsr.w	PlaySound_Special ; play credits music
00003302 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003308 4E75                       		rts	
0000330A                            ; ===========================================================================
0000330A                            
0000330A                            LevSel_Level_SS:			; XREF: LevelSelect
0000330A D040                       		add.w	d0,d0
0000330C 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003310 6B00 FF7E                  		bmi.w	LevelSelect
00003314 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003318 6600                       		bne.s	LevSel_Level	; if not, branch
0000331A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003320 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003324 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000332A 7000                       		moveq	#0,d0
0000332C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003330 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003334 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003338 4E75                       		rts	
0000333A                            ; ===========================================================================
0000333A                            
0000333A                            LevSel_Level:				; XREF: LevSel_Level_SS
0000333A 0240 3FFF                  		andi.w	#$3FFF,d0
0000333E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003342                            
00003342                            PlayLevel:				; XREF: ROM:00003246j ...
00003342 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003348 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000334E 7000                       		moveq	#0,d0
00003350 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003354 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003358 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000335C 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003360 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003364 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003368 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000336C 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003370 103C 00E0                  		move.b	#$E0,d0
00003374 6100 E026                  		bsr.w	PlaySound_Special ; fade out music
00003378 4E75                       		rts	
0000337A                            ; ===========================================================================
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            ; Level	select - level pointers
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            LSelectPointers:
0000337A                            		incbin	misc\ls_point.bin
000033A4                            		even
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            ; Level	select codes
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            LevelSelectCode_J:
000033A4                            		incbin	misc\ls_jcode.bin
000033AA                            		even
000033AA                            
000033AA                            LevelSelectCode_US:
000033AA                            		incbin	misc\ls_ucode.bin
000033B0                            		even
000033B0                            ; ===========================================================================
000033B0                            
000033B0                            ; ---------------------------------------------------------------------------
000033B0                            ; Demo mode
000033B0                            ; ---------------------------------------------------------------------------
000033B0                            
000033B0                            Demo:					; XREF: TitleScreen
000033B0 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000033B6                            
000033B6                            loc_33B6:				; XREF: loc_33E4
000033B6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033BC 6100 F5EA                  		bsr.w	DelayProgram
000033C0 6100 0000                  		bsr.w	DeformBgLayer
000033C4 6100 E576                  		bsr.w	PalCycle_Load
000033C8 6100 E222                  		bsr.w	RunPLC_RAM
000033CC 3038 D008                  		move.w	($FFFFD008).w,d0
000033D0 5440                       		addq.w	#2,d0
000033D2 31C0 D008                  		move.w	d0,($FFFFD008).w
000033D6 0C40 1C00                  		cmpi.w	#$1C00,d0
000033DA 6500                       		bcs.s	loc_33E4
000033DC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000033E2 4E75                       		rts	
000033E4                            ; ===========================================================================
000033E4                            
000033E4                            loc_33E4:				; XREF: Demo
000033E4 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000033EA 6600 FE56                  		bne.w	Title_ChkLevSel	; if yes, branch
000033EE 4A78 F614                  		tst.w	($FFFFF614).w
000033F2 6600 FFC2                  		bne.w	loc_33B6
000033F6 103C 00E0                  		move.b	#$E0,d0
000033FA 6100 DFA0                  		bsr.w	PlaySound_Special ; fade out music
000033FE 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003402 0240 0007                  		andi.w	#7,d0
00003406 D040                       		add.w	d0,d0
00003408 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000340C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003410 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003414 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000341A 6500                       		bcs.s	loc_3422	; if yes, branch
0000341C 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003422                            
00003422                            loc_3422:
00003422 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003428 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000342E 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003432 6600                       		bne.s	Demo_Level	; if not, branch
00003434 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000343A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000343E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003442                            
00003442                            Demo_Level:
00003442 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003448 7000                       		moveq	#0,d0
0000344A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000344E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003452 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003456 4E75                       		rts	
00003458                            ; ===========================================================================
00003458                            ; ---------------------------------------------------------------------------
00003458                            ; Levels used in demos
00003458                            ; ---------------------------------------------------------------------------
00003458                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003460                            		even
00003460                            
00003460                            ; ---------------------------------------------------------------------------
00003460                            ; Subroutine to	change what you're selecting in the level select
00003460                            ; ---------------------------------------------------------------------------
00003460                            
00003460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003460                            
00003460                            
00003460                            LevSelControls:				; XREF: LevelSelect
00003460 1238 F605                  		move.b	($FFFFF605).w,d1
00003464 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003468 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000346A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000346E 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003470                            
00003470                            LevSel_UpDown:
00003470 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003476 1238 F604                  		move.b	($FFFFF604).w,d1
0000347A 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000347E 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003480 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003484 0801 0000                  		btst	#0,d1		; is up	pressed?
00003488 6700                       		beq.s	LevSel_Down	; if not, branch
0000348A 5340                       		subq.w	#1,d0		; move up 1 selection
0000348C 6400                       		bcc.s	LevSel_Down
0000348E 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003490                            
00003490                            LevSel_Down:
00003490 0801 0001                  		btst	#1,d1		; is down pressed?
00003494 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003496 5240                       		addq.w	#1,d0		; move down 1 selection
00003498 0C40 0015                  		cmpi.w	#$15,d0
0000349C 6500                       		bcs.s	LevSel_Refresh
0000349E 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000034A0                            
000034A0                            LevSel_Refresh:
000034A0 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
000034A4 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034A8 4E75                       		rts	
000034AA                            ; ===========================================================================
000034AA                            
000034AA                            LevSel_SndTest:				; XREF: LevSelControls
000034AA 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
000034B0 6600                       		bne.s	LevSel_NoMove	; if not, branch
000034B2 1238 F605                  		move.b	($FFFFF605).w,d1
000034B6 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000034BA 6700                       		beq.s	LevSel_NoMove	; if not, branch
000034BC 3038 FF84                  		move.w	($FFFFFF84).w,d0
000034C0 0801 0002                  		btst	#2,d1		; is left pressed?
000034C4 6700                       		beq.s	LevSel_Right	; if not, branch
000034C6 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000034C8 6400                       		bcc.s	LevSel_Right
000034CA 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000034CC                            
000034CC                            LevSel_Right:
000034CC 0801 0003                  		btst	#3,d1		; is right pressed?
000034D0 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000034D2 5240                       		addq.w	#1,d0		; add 1	to sound test
000034D4 0C40 0050                  		cmpi.w	#$50,d0
000034D8 6500                       		bcs.s	LevSel_Refresh2
000034DA 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000034DC                            
000034DC                            LevSel_Refresh2:
000034DC 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000034E0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034E4                            
000034E4                            LevSel_NoMove:
000034E4 4E75                       		rts	
000034E6                            ; End of function LevSelControls
000034E6                            
000034E6                            ; ---------------------------------------------------------------------------
000034E6                            ; Subroutine to load level select text
000034E6                            ; ---------------------------------------------------------------------------
000034E6                            
000034E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034E6                            
000034E6                            
000034E6                            LevSelTextLoad:				; XREF: TitleScreen
000034E6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000034EC 4DF9 00C0 0000             		lea	($C00000).l,a6
000034F2 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000034F8 363C E680                  		move.w	#$E680,d3	; VRAM setting
000034FC 7214                       		moveq	#$14,d1		; number of lines of text
000034FE                            
000034FE                            loc_34FE:				; XREF: LevSelTextLoad+26j
000034FE 2D44 0004                  		move.l	d4,4(a6)
00003502 6100 0000                  		bsr.w	LevSel_ChgLine
00003506 0684 0080 0000             		addi.l	#$800000,d4
0000350C 51C9 FFF0                  		dbf	d1,loc_34FE
00003510 7000                       		moveq	#0,d0
00003512 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003516 3200                       		move.w	d0,d1
00003518 283C 6210 0003             		move.l	#$62100003,d4
0000351E EF48                       		lsl.w	#7,d0
00003520 4840                       		swap	d0
00003522 D880                       		add.l	d0,d4
00003524 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000352A E749                       		lsl.w	#3,d1
0000352C 3001                       		move.w	d1,d0
0000352E D241                       		add.w	d1,d1
00003530 D240                       		add.w	d0,d1
00003532 D2C1                       		adda.w	d1,a1
00003534 363C C680                  		move.w	#$C680,d3
00003538 2D44 0004                  		move.l	d4,4(a6)
0000353C 6100 0000                  		bsr.w	LevSel_ChgLine
00003540 363C E680                  		move.w	#$E680,d3
00003544 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000354A 6600                       		bne.s	loc_3550
0000354C 363C C680                  		move.w	#$C680,d3
00003550                            
00003550                            loc_3550:
00003550 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
0000355A 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000355E 0640 0080                  		addi.w	#$80,d0
00003562 1400                       		move.b	d0,d2
00003564 E808                       		lsr.b	#4,d0
00003566 6100 0000                  		bsr.w	LevSel_ChgSnd
0000356A 1002                       		move.b	d2,d0
0000356C 6100 0000                  		bsr.w	LevSel_ChgSnd
00003570 4E75                       		rts	
00003572                            ; End of function LevSelTextLoad
00003572                            
00003572                            
00003572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003572                            
00003572                            
00003572                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003572 0240 000F                  		andi.w	#$F,d0
00003576 0C00 000A                  		cmpi.b	#$A,d0
0000357A 6500                       		bcs.s	loc_3580
0000357C 5E00                       		addi.b	#7,d0
0000357E                            
0000357E                            loc_3580:
0000357E D043                       		add.w	d3,d0
00003580 3C80                       		move.w	d0,(a6)
00003582 4E75                       		rts	
00003584                            ; End of function LevSel_ChgSnd
00003584                            
00003584                            
00003584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003584                            
00003584                            
00003584                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003584 7417                       		moveq	#$17,d2		; number of characters per line
00003586                            
00003586                            loc_3588:
00003586 7000                       		moveq	#0,d0
00003588 1019                       		move.b	(a1)+,d0
0000358A 6A00                       		bpl.s	loc_3598
0000358C 3CBC 0000                  		move.w	#0,(a6)
00003590 51CA FFF4                  		dbf	d2,loc_3588
00003594 4E75                       		rts	
00003596                            ; ===========================================================================
00003596                            
00003596                            loc_3598:				; XREF: LevSel_ChgLine
00003596 D043                       		add.w	d3,d0
00003598 3C80                       		move.w	d0,(a6)
0000359A 51CA FFEA                  		dbf	d2,loc_3588
0000359E 4E75                       		rts	
000035A0                            ; End of function LevSel_ChgLine
000035A0                            
000035A0                            ; ===========================================================================
000035A0                            ; ---------------------------------------------------------------------------
000035A0                            ; Level	select menu text
000035A0                            ; ---------------------------------------------------------------------------
000035A0                            LevelMenuText:	incbin	misc\menutext.bin
00003798                            		even
00003798                            ; ---------------------------------------------------------------------------
00003798                            ; Music	playlist
00003798                            ; ---------------------------------------------------------------------------
00003798                            MusicList:	incbin	misc\muslist1.bin
000037A0                            		even
000037A0                            ; ===========================================================================
000037A0                            
000037A0                            ; ---------------------------------------------------------------------------
000037A0                            ; Level
000037A0                            ; ---------------------------------------------------------------------------
000037A0                            
000037A0                            Level:					; XREF: GameModeArray
000037A0 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000037A6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037AA 6B00                       		bmi.s	loc_37B6
000037AC 103C 00E0                  		move.b	#$E0,d0
000037B0 6100 DBEA                  		bsr.w	PlaySound_Special ; fade out music
000037B4                            
000037B4                            loc_37B6:
000037B4 6100 DE28                  		bsr.w	ClearPLC
000037B8 6100 E698                  		bsr.w	Pal_FadeFrom
000037BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037C0 6B00                       		bmi.s	Level_ClrRam
000037C2 46FC 2700                  		move	#$2700,sr
000037C6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000037D0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000037D6 6100 DC68                  		bsr.w	NemDec
000037DA 46FC 2300                  		move	#$2300,sr
000037DE 7000                       		moveq	#0,d0
000037E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000037E4 E948                       		lsl.w	#4,d0
000037E6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000037EC 45F2 0000                  		lea	(a2,d0.w),a2
000037F0 7000                       		moveq	#0,d0
000037F2 1012                       		move.b	(a2),d0
000037F4 6700                       		beq.s	loc_37FC
000037F6 6100 DD88                  		bsr.w	LoadPLC		; load level patterns
000037FA                            
000037FA                            loc_37FC:
000037FA 7001                       		moveq	#1,d0
000037FC 6100 DD82                  		bsr.w	LoadPLC		; load standard	patterns
00003800                            
00003800                            Level_ClrRam:
00003800 43F8 D000                  		lea	($FFFFD000).w,a1
00003804 7000                       		moveq	#0,d0
00003806 323C 07FF                  		move.w	#$7FF,d1
0000380A                            
0000380A                            Level_ClrObjRam:
0000380A 22C0                       		move.l	d0,(a1)+
0000380C 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003810                            
00003810 43F8 F628                  		lea	($FFFFF628).w,a1
00003814 7000                       		moveq	#0,d0
00003816 323C 0015                  		move.w	#$15,d1
0000381A                            
0000381A                            Level_ClrVars:
0000381A 22C0                       		move.l	d0,(a1)+
0000381C 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003820                            
00003820 43F8 F700                  		lea	($FFFFF700).w,a1
00003824 7000                       		moveq	#0,d0
00003826 323C 003F                  		move.w	#$3F,d1
0000382A                            
0000382A                            Level_ClrVars2:
0000382A 22C0                       		move.l	d0,(a1)+
0000382C 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003830                            
00003830 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003834 7000                       		moveq	#0,d0
00003836 323C 0047                  		move.w	#$47,d1
0000383A                            
0000383A                            Level_ClrVars3:
0000383A 22C0                       		move.l	d0,(a1)+
0000383C 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003840                            
00003840 46FC 2700                  		move	#$2700,sr
00003844 6100 DA7E                  		bsr.w	ClearScreen
00003848 4DF9 00C0 0004             		lea	($C00004).l,a6
0000384E 3CBC 8B03                  		move.w	#$8B03,(a6)
00003852 3CBC 8230                  		move.w	#$8230,(a6)
00003856 3CBC 8407                  		move.w	#$8407,(a6)
0000385A 3CBC 857C                  		move.w	#$857C,(a6)
0000385E 3CBC 9001                  		move.w	#$9001,(a6)
00003862 3CBC 8004                  		move.w	#$8004,(a6)
00003866 3CBC 8720                  		move.w	#$8720,(a6)
0000386A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003870 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003874 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000387A 6600                       		bne.s	Level_LoadPal	; if not, branch
0000387C 3CBC 8014                  		move.w	#$8014,(a6)
00003880 7000                       		moveq	#0,d0
00003882 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003886 D040                       		add.w	d0,d0
00003888 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000388E 3031 0000                  		move.w	(a1,d0.w),d0
00003892 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003896 31C0 F648                  		move.w	d0,($FFFFF648).w
0000389A 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000389E 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000038A2 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000038A6 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000038AC                            
000038AC                            Level_LoadPal:
000038AC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000038B2 46FC 2300                  		move	#$2300,sr
000038B6 7003                       		moveq	#3,d0
000038B8 6100 E85E                  		bsr.w	PalLoad2	; load Sonic's pallet line
000038BC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000038C2 6600                       		bne.s	Level_GetBgm	; if not, branch
000038C4 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000038C6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000038CC 6600                       		bne.s	Level_WaterPal	; if not, branch
000038CE 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000038D0                            
000038D0                            Level_WaterPal:
000038D0 6100 E85E                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000038D4 4A38 FE30                  		tst.b	($FFFFFE30).w
000038D8 6700                       		beq.s	Level_GetBgm
000038DA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000038E0                            
000038E0                            Level_GetBgm:
000038E0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038E4 6B00                       		bmi.s	loc_3946
000038E6 7000                       		moveq	#0,d0
000038E8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000038EC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000038F2 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000038F4 7005                       		moveq	#5,d0		; move 5 to d0
000038F6                            
000038F6                            Level_BgmNotLZ4:
000038F6 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000038FC 6600                       		bne.s	Level_PlayBgm	; if not, branch
000038FE 7006                       		moveq	#6,d0		; move 6 to d0
00003900                            
00003900                            Level_PlayBgm:
00003900 43F9 0000 3798             		lea	(MusicList).l,a1 ; load	music playlist
00003906 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
0000390A 6100 DA8A                  		bsr.w	PlaySound	; play music
0000390E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003914                            
00003914                            Level_TtlCard:
00003914 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000391A 6100 F08C                  		bsr.w	DelayProgram
0000391E 4EB9 0000 0000             		jsr	ObjectsLoad
00003924 4EB9 0000 0000             		jsr	BuildSprites
0000392A 6100 DCC0                  		bsr.w	RunPLC_RAM
0000392E 3038 D108                  		move.w	($FFFFD108).w,d0
00003932 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003936 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003938 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000393C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000393E 4EB9 0000 0000             		jsr	Hud_Base
00003944                            
00003944                            loc_3946:
00003944 7003                       		moveq	#3,d0
00003946 6100 E7B4                  		bsr.w	PalLoad1	; load Sonic's pallet line
0000394A 6100 0000                  		bsr.w	LevelSizeLoad
0000394E 6100 0000                  		bsr.w	DeformBgLayer
00003952 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003958 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
0000395C 6100 0000                  		bsr.w	LoadTilesFromStart
00003960 4EB9 0000 0000             		jsr	FloorLog_Unk
00003966 6100 0000                  		bsr.w	ColIndexLoad
0000396A 6100 0000                  		bsr.w	LZWaterEffects
0000396E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003974 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003978 6B00                       		bmi.s	Level_ChkDebug
0000397A 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003980                            
00003980                            Level_ChkDebug:
00003980 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003984 6700                       		beq.s	Level_ChkWater	; if not, branch
00003986 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000398C 6700                       		beq.s	Level_ChkWater	; if not, branch
0000398E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003994                            
00003994                            Level_ChkWater:
00003994 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000399A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000039A0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000039A6 6600                       		bne.s	Level_LoadObj	; if not, branch
000039A8 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000039AE 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000039B4 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000039BA 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
000039C0                            
000039C0                            Level_LoadObj:
000039C0 4EB9 0000 0000             		jsr	ObjPosLoad
000039C6 4EB9 0000 0000             		jsr	ObjectsLoad
000039CC 4EB9 0000 0000             		jsr	BuildSprites
000039D2 7000                       		moveq	#0,d0
000039D4 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
000039D8 6600                       		bne.s	loc_39E8	; if yes, branch
000039DA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000039DE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000039E2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
000039E6                            
000039E6                            loc_39E8:
000039E6 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000039EA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000039EE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000039F2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000039F6                            		; move.b	d0,($FFFFFE2F).w
000039F6 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
000039FC 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00003A00 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003A04 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003A08 6100 0000                  		bsr.w	OscillateNumInit
00003A0C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003A12 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003A18 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003A1E 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003A24 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003A2A 7000                       		moveq	#0,d0
00003A2C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A30 E548                       		lsl.w	#2,d0
00003A32 2271 0000                  		movea.l	(a1,d0.w),a1
00003A36 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003A3A 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003A3C 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003A42 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003A46 5340                       		subq.w	#1,d0
00003A48 E548                       		lsl.w	#2,d0
00003A4A 2271 0000                  		movea.l	(a1,d0.w),a1
00003A4E                            
00003A4E                            Level_Demo:
00003A4E 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003A54 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003A58 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003A5E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A62 6A00                       		bpl.s	Level_ChkWaterPal
00003A64 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003A6A 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003A70 6600                       		bne.s	Level_ChkWaterPal
00003A72 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003A78                            
00003A78                            Level_ChkWaterPal:
00003A78 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003A7E 6600                       		bne.s	Level_Delay	; if not, branch
00003A80 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003A82 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003A88 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003A8A 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003A8C                            
00003A8C                            Level_WaterPal2:
00003A8C 6100 E6BE                  		bsr.w	PalLoad4_Water
00003A90                            
00003A90                            Level_Delay:
00003A90 323C 0003                  		move.w	#3,d1
00003A94                            
00003A94                            Level_DelayLoop:
00003A94 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003A9A 6100 EF0C                  		bsr.w	DelayProgram
00003A9E 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003AA2                            
00003AA2 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003AA8 6100 E308                  		bsr.w	Pal_FadeTo2
00003AAC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AB0 6B00                       		bmi.s	Level_ClrCardArt
00003AB2 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003AB6 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003ABA 5838 D124                  		addq.b	#4,($FFFFD124).w
00003ABE 5838 D164                  		addq.b	#4,($FFFFD164).w
00003AC2 6000                       		bra.s	Level_StartGame
00003AC4                            ; ===========================================================================
00003AC4                            
00003AC4                            Level_ClrCardArt:
00003AC4 7002                       		moveq	#2,d0
00003AC6 4EB9 0000 1580             		jsr	(LoadPLC).l	; load explosion patterns
00003ACC 7000                       		moveq	#0,d0
00003ACE 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003AD2 0640 0015                  		addi.w	#$15,d0
00003AD6 4EB9 0000 1580             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003ADC                            
00003ADC                            Level_StartGame:
00003ADC 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003AE2                            
00003AE2                            ; ---------------------------------------------------------------------------
00003AE2                            ; Main level loop (when	all title card and loading sequences are finished)
00003AE2                            ; ---------------------------------------------------------------------------
00003AE2                            
00003AE2                            Level_MainLoop:
00003AE2 6100 D8C4                  		bsr.w	PauseGame
00003AE6 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003AEC 6100 EEBA                  		bsr.w	DelayProgram
00003AF0 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003AF4 6100 0000                  		bsr.w	MoveSonicInDemo
00003AF8 6100 0000                  		bsr.w	LZWaterEffects
00003AFC 4EB9 0000 0000             		jsr	ObjectsLoad
00003B02 4A78 FE08                  		tst.w	($FFFFFE08).w
00003B06 6600                       		bne.s	loc_3B10
00003B08 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003B0E 6400                       		bcc.s	loc_3B14
00003B10                            
00003B10                            loc_3B10:
00003B10 6100 0000                  		bsr.w	DeformBgLayer
00003B14                            
00003B14                            loc_3B14:
00003B14 4EB9 0000 0000             		jsr	BuildSprites
00003B1A 4EB9 0000 0000             		jsr	ObjPosLoad
00003B20 6100 DE1A                  		bsr.w	PalCycle_Load
00003B24 6100 DAC6                  		bsr.w	RunPLC_RAM
00003B28 6100 0000                  		bsr.w	OscillateNumDo
00003B2C 6100 0000                  		bsr.w	ChangeRingFrame
00003B30 6100 0000                  		bsr.w	SignpostArtLoad
00003B34 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B3A 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003B3C 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003B40 6600 FC5E                  		bne.w	Level		; if yes, branch
00003B44 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003B4A 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003B4E 4E75                       		rts	
00003B50                            ; ===========================================================================
00003B50                            
00003B50                            Level_ChkDemo:				; XREF: Level_MainLoop
00003B50 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003B54 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003B56 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003B5A 6700                       		beq.s	Level_EndDemo	; if not, branch
00003B5C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B62 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003B66 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B6C 4E75                       		rts	
00003B6E                            ; ===========================================================================
00003B6E                            
00003B6E                            Level_EndDemo:				; XREF: Level_ChkDemo
00003B6E 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003B74 6600                       		bne.s	loc_3B88	; if not, branch
00003B76 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B7C 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B80 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003B82 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003B88                            
00003B88                            loc_3B88:
00003B88 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003B8E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003B94 4278 F794                  		clr.w	($FFFFF794).w
00003B98                            
00003B98                            loc_3B98:
00003B98 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B9E 6100 EE08                  		bsr.w	DelayProgram
00003BA2 6100 0000                  		bsr.w	MoveSonicInDemo
00003BA6 4EB9 0000 0000             		jsr	ObjectsLoad
00003BAC 4EB9 0000 0000             		jsr	BuildSprites
00003BB2 4EB9 0000 0000             		jsr	ObjPosLoad
00003BB8 5378 F794                  		subq.w	#1,($FFFFF794).w
00003BBC 6A00                       		bpl.s	loc_3BC8
00003BBE 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003BC4 6100 E2AC                  		bsr.w	Pal_FadeOut
00003BC8                            
00003BC8                            loc_3BC8:
00003BC8 4A78 F614                  		tst.w	($FFFFF614).w
00003BCC 66CA                       		bne.s	loc_3B98
00003BCE 4E75                       		rts	
00003BD0                            ; ===========================================================================
00003BD0                            ; ---------------------------------------------------------------------------
00003BD0                            ; Subroutine to	do special water effects in Labyrinth Zone
00003BD0                            ; ---------------------------------------------------------------------------
00003BD0                            
00003BD0                            LZWaterEffects:				; XREF: Level
00003BD0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003BD6 6600                       		bne.s	locret_3C28	; if not, branch
00003BD8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003BDE 6400                       		bcc.s	LZMoveWater
00003BE0 6100 0000                  		bsr.w	LZWindTunnels
00003BE4 6100 0000                  		bsr.w	LZWaterSlides
00003BE8 6100 0000                  		bsr.w	LZDynamicWater
00003BEC                            
00003BEC                            LZMoveWater:
00003BEC 4238 F64E                  		clr.b	($FFFFF64E).w
00003BF0 7000                       		moveq	#0,d0
00003BF2 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003BF6 E248                       		lsr.w	#1,d0
00003BF8 D078 F648                  		add.w	($FFFFF648).w,d0
00003BFC 31C0 F646                  		move.w	d0,($FFFFF646).w
00003C00 3038 F646                  		move.w	($FFFFF646).w,d0
00003C04 9078 F704                  		sub.w	($FFFFF704).w,d0
00003C08 6400                       		bcc.s	loc_3C1A
00003C0A 4A40                       		tst.w	d0
00003C0C 6A00                       		bpl.s	loc_3C1A
00003C0E 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003C14 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003C1A                            
00003C1A                            loc_3C1A:
00003C1A 0C40 00DF                  		cmpi.w	#$DF,d0
00003C1E 6500                       		bcs.s	loc_3C24
00003C20 303C 00DF                  		move.w	#$DF,d0
00003C24                            
00003C24                            loc_3C24:
00003C24 11C0 F625                  		move.b	d0,($FFFFF625).w
00003C28                            
00003C28                            locret_3C28:
00003C28 4E75                       		rts	
00003C2A                            ; ===========================================================================
00003C2A                            ; ---------------------------------------------------------------------------
00003C2A                            ; Labyrinth default water heights
00003C2A                            ; ---------------------------------------------------------------------------
00003C2A                            WaterHeight:	incbin	misc\lz_heigh.bin
00003C32                            		even
00003C32                            ; ===========================================================================
00003C32                            
00003C32                            ; ---------------------------------------------------------------------------
00003C32                            ; Labyrinth dynamic water routines
00003C32                            ; ---------------------------------------------------------------------------
00003C32                            
00003C32                            LZDynamicWater:				; XREF: LZWaterEffects
00003C32 7000                       		moveq	#0,d0
00003C34 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C38 D040                       		add.w	d0,d0
00003C3A 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003C3E 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003C42 7200                       		moveq	#0,d1
00003C44 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003C48 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003C4C 9078 F648                  		sub.w	($FFFFF648).w,d0
00003C50 6700                       		beq.s	locret_3C5A
00003C52 6400                       		bcc.s	loc_3C56
00003C54 4441                       		neg.w	d1
00003C56                            
00003C56                            loc_3C56:
00003C56 D378 F648                  		add.w	d1,($FFFFF648).w
00003C5A                            
00003C5A                            locret_3C5A:
00003C5A 4E75                       		rts	
00003C5C                            ; ===========================================================================
00003C5C 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003C5E 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003C60 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003C62 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003C64                            ; ===========================================================================
00003C64                            
00003C64                            DynWater_LZ1:				; XREF: DynWater_Index
00003C64 3038 F700                  		move.w	($FFFFF700).w,d0
00003C68 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003C6C 6600                       		bne.s	loc_3CD0
00003C6E 323C 00B8                  		move.w	#$B8,d1
00003C72 0C40 0600                  		cmpi.w	#$600,d0
00003C76 6500                       		bcs.s	loc_3CB4
00003C78 323C 0108                  		move.w	#$108,d1
00003C7C 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003C82 6500                       		bcs.s	loc_3CBA
00003C84 0C40 0C00                  		cmpi.w	#$C00,d0
00003C88 6500                       		bcs.s	loc_3CB4
00003C8A 323C 0318                  		move.w	#$318,d1
00003C8E 0C40 1080                  		cmpi.w	#$1080,d0
00003C92 6500                       		bcs.s	loc_3CB4
00003C94 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003C9A 323C 05C8                  		move.w	#$5C8,d1
00003C9E 0C40 1380                  		cmpi.w	#$1380,d0
00003CA2 6500                       		bcs.s	loc_3CB4
00003CA4 323C 03A8                  		move.w	#$3A8,d1
00003CA8 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003CAC 6600                       		bne.s	loc_3CB4
00003CAE 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003CB4                            
00003CB4                            loc_3CB4:
00003CB4 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CB8 4E75                       		rts	
00003CBA                            ; ===========================================================================
00003CBA                            
00003CBA                            loc_3CBA:				; XREF: DynWater_LZ1
00003CBA 0C40 0C80                  		cmpi.w	#$C80,d0
00003CBE 65F4                       		bcs.s	loc_3CB4
00003CC0 323C 00E8                  		move.w	#$E8,d1
00003CC4 0C40 1500                  		cmpi.w	#$1500,d0
00003CC8 65EA                       		bcs.s	loc_3CB4
00003CCA 323C 0108                  		move.w	#$108,d1
00003CCE 60E4                       		bra.s	loc_3CB4
00003CD0                            ; ===========================================================================
00003CD0                            
00003CD0                            loc_3CD0:				; XREF: DynWater_LZ1
00003CD0 5302                       		subq.b	#1,d2
00003CD2 6600                       		bne.s	locret_3CF4
00003CD4 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003CDA 6400                       		bcc.s	locret_3CF4
00003CDC 323C 03A8                  		move.w	#$3A8,d1
00003CE0 0C40 1300                  		cmpi.w	#$1300,d0
00003CE4 6500                       		bcs.s	loc_3CF0
00003CE6 323C 0108                  		move.w	#$108,d1
00003CEA 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003CF0                            
00003CF0                            loc_3CF0:
00003CF0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CF4                            
00003CF4                            locret_3CF4:
00003CF4 4E75                       		rts	
00003CF6                            ; ===========================================================================
00003CF6                            
00003CF6                            DynWater_LZ2:				; XREF: DynWater_Index
00003CF6 3038 F700                  		move.w	($FFFFF700).w,d0
00003CFA 323C 0328                  		move.w	#$328,d1
00003CFE 0C40 0500                  		cmpi.w	#$500,d0
00003D02 6500                       		bcs.s	loc_3D12
00003D04 323C 03C8                  		move.w	#$3C8,d1
00003D08 0C40 0B00                  		cmpi.w	#$B00,d0
00003D0C 6500                       		bcs.s	loc_3D12
00003D0E 323C 0428                  		move.w	#$428,d1
00003D12                            
00003D12                            loc_3D12:
00003D12 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D16 4E75                       		rts	
00003D18                            ; ===========================================================================
00003D18                            
00003D18                            DynWater_LZ3:				; XREF: DynWater_Index
00003D18 3038 F700                  		move.w	($FFFFF700).w,d0
00003D1C 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003D20 6600                       		bne.s	loc_3D5E
00003D22 323C 0900                  		move.w	#$900,d1
00003D26 0C40 0600                  		cmpi.w	#$600,d0
00003D2A 6500                       		bcs.s	loc_3D54
00003D2C 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003D32 6500                       		bcs.s	loc_3D54
00003D34 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D3A 6400                       		bcc.s	loc_3D54
00003D3C 323C 04C8                  		move.w	#$4C8,d1
00003D40 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003D46 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003D4C 303C 00B7                  		move.w	#$B7,d0
00003D50 6100 D64A                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003D54                            
00003D54                            loc_3D54:
00003D54 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D58 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D5C 4E75                       		rts	
00003D5E                            ; ===========================================================================
00003D5E                            
00003D5E                            loc_3D5E:				; XREF: DynWater_LZ3
00003D5E 5302                       		subq.b	#1,d2
00003D60 6600                       		bne.s	loc_3DA8
00003D62 323C 04C8                  		move.w	#$4C8,d1
00003D66 0C40 0770                  		cmpi.w	#$770,d0
00003D6A 6500                       		bcs.s	loc_3DA2
00003D6C 323C 0308                  		move.w	#$308,d1
00003D70 0C40 1400                  		cmpi.w	#$1400,d0
00003D74 6500                       		bcs.s	loc_3DA2
00003D76 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003D7C 6700                       		beq.s	loc_3D8E
00003D7E 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D84 6400                       		bcc.s	loc_3D8E
00003D86 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003D8C 6400                       		bcc.s	loc_3DA2
00003D8E                            
00003D8E                            loc_3D8E:
00003D8E 323C 0508                  		move.w	#$508,d1
00003D92 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D96 0C40 1770                  		cmpi.w	#$1770,d0
00003D9A 6500                       		bcs.s	loc_3DA2
00003D9C 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003DA2                            
00003DA2                            loc_3DA2:
00003DA2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DA6 4E75                       		rts	
00003DA8                            ; ===========================================================================
00003DA8                            
00003DA8                            loc_3DA8:
00003DA8 5302                       		subq.b	#1,d2
00003DAA 6600                       		bne.s	loc_3DD2
00003DAC 323C 0508                  		move.w	#$508,d1
00003DB0 0C40 1860                  		cmpi.w	#$1860,d0
00003DB4 6500                       		bcs.s	loc_3DCC
00003DB6 323C 0188                  		move.w	#$188,d1
00003DBA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DBE 6400                       		bcc.s	loc_3DC6
00003DC0 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003DC4 6600                       		bne.s	loc_3DCC
00003DC6                            
00003DC6                            loc_3DC6:
00003DC6 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003DCC                            
00003DCC                            loc_3DCC:
00003DCC 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DD0 4E75                       		rts	
00003DD2                            ; ===========================================================================
00003DD2                            
00003DD2                            loc_3DD2:
00003DD2 5302                       		subq.b	#1,d2
00003DD4 6600                       		bne.s	loc_3E0E
00003DD6 323C 0188                  		move.w	#$188,d1
00003DDA 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DDE 6500                       		bcs.s	loc_3E04
00003DE0 323C 0900                  		move.w	#$900,d1
00003DE4 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003DE8 6500                       		bcs.s	loc_3E04
00003DEA 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003DF0 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003DF6 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003DFC 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003E02 4E75                       		rts	
00003E04                            ; ===========================================================================
00003E04                            
00003E04                            loc_3E04:
00003E04 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E08 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E0C 4E75                       		rts	
00003E0E                            ; ===========================================================================
00003E0E                            
00003E0E                            loc_3E0E:
00003E0E 0C40 1E00                  		cmpi.w	#$1E00,d0
00003E12 6500                       		bcs.s	locret_3E1A
00003E14 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003E1A                            
00003E1A                            locret_3E1A:
00003E1A 4E75                       		rts	
00003E1C                            ; ===========================================================================
00003E1C                            
00003E1C                            DynWater_SBZ3:				; XREF: DynWater_Index
00003E1C 323C 0228                  		move.w	#$228,d1
00003E20 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003E26 6500                       		bcs.s	loc_3E2C
00003E28 323C 04C8                  		move.w	#$4C8,d1
00003E2C                            
00003E2C                            loc_3E2C:
00003E2C 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E30 4E75                       		rts
00003E32                            
00003E32                            ; ---------------------------------------------------------------------------
00003E32                            ; Labyrinth Zone "wind tunnels"	subroutine
00003E32                            ; ---------------------------------------------------------------------------
00003E32                            
00003E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E32                            
00003E32                            
00003E32                            LZWindTunnels:				; XREF: LZWaterEffects
00003E32 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003E36 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003E3A 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003E40 7000                       		moveq	#0,d0
00003E42 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E46 E748                       		lsl.w	#3,d0
00003E48 D4C0                       		adda.w	d0,a2
00003E4A 7200                       		moveq	#0,d1
00003E4C 4A38 FE11                  		tst.b	($FFFFFE11).w
00003E50 6600                       		bne.s	loc_3E56
00003E52 7201                       		moveq	#1,d1
00003E54 514A                       		subq.w	#8,a2
00003E56                            
00003E56                            loc_3E56:
00003E56 43F8 D000                  		lea	($FFFFD000).w,a1
00003E5A                            
00003E5A                            LZWind_Loop:
00003E5A 3029 0008                  		move.w	8(a1),d0
00003E5E B052                       		cmp.w	(a2),d0
00003E60 6500 0000                  		bcs.w	loc_3EF4
00003E64 B06A 0004                  		cmp.w	4(a2),d0
00003E68 6400 0000                  		bcc.w	loc_3EF4
00003E6C 3429 000C                  		move.w	$C(a1),d2
00003E70 B46A 0002                  		cmp.w	2(a2),d2
00003E74 6500                       		bcs.s	loc_3EF4
00003E76 B46A 0006                  		cmp.w	6(a2),d2
00003E7A 6400                       		bcc.s	loc_3EF4
00003E7C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003E80 0200 003F                  		andi.b	#$3F,d0
00003E84 6600                       		bne.s	loc_3E90
00003E86 303C 00D0                  		move.w	#$D0,d0
00003E8A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003E90                            
00003E90                            loc_3E90:
00003E90 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003E94 6600 0000                  		bne.w	locret_3F0A
00003E98 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003E9E 6400                       		bcc.s	loc_3F06
00003EA0 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003EA6 0440 0080                  		subi.w	#$80,d0
00003EAA B052                       		cmp.w	(a2),d0
00003EAC 6400                       		bcc.s	LZWind_Move
00003EAE 7002                       		moveq	#2,d0
00003EB0 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003EB6 6600                       		bne.s	loc_3EBA
00003EB8 4440                       		neg.w	d0
00003EBA                            
00003EBA                            loc_3EBA:
00003EBA D169 000C                  		add.w	d0,$C(a1)
00003EBE                            
00003EBE                            LZWind_Move:
00003EBE 5869 0008                  		addq.w	#4,8(a1)
00003EC2 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003EC8 337C 0000 0012             		move.w	#0,$12(a1)
00003ECE 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003ED4 08E9 0001 0022             		bset	#1,$22(a1)
00003EDA 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003EE0 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003EE2 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003EE6                            
00003EE6                            LZWind_MoveDown:
00003EE6 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003EEC 6700                       		beq.s	locret_3EF2	; if not, branch
00003EEE 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003EF2                            
00003EF2                            locret_3EF2:
00003EF2 4E75                       		rts	
00003EF4                            ; ===========================================================================
00003EF4                            
00003EF4                            loc_3EF4:				; XREF: LZWindTunnels
00003EF4 504A                       		addq.w	#8,a2
00003EF6 51C9 FF62                  		dbf	d1,LZWind_Loop
00003EFA 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003EFE 6700                       		beq.s	locret_3F0A
00003F00 137C 0000 001C             		move.b	#0,$1C(a1)
00003F06                            
00003F06                            loc_3F06:
00003F06 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003F0A                            
00003F0A                            locret_3F0A:
00003F0A 4E75                       		rts	
00003F0C                            ; End of function LZWindTunnels
00003F0C                            
00003F0C                            ; ===========================================================================
00003F0C 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003F14 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00003F26 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00003F34                            					; XREF: LZWindTunnels
00003F34                            		even
00003F34                            
00003F34                            ; ---------------------------------------------------------------------------
00003F34                            ; Labyrinth Zone water slide subroutine
00003F34                            ; ---------------------------------------------------------------------------
00003F34                            
00003F34                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F34                            
00003F34                            
00003F34                            LZWaterSlides:				; XREF: LZWaterEffects
00003F34 43F8 D000                  		lea	($FFFFD000).w,a1
00003F38 0829 0001 0022             		btst	#1,$22(a1)
00003F3E 6600                       		bne.s	loc_3F6A
00003F40 3029 000C                  		move.w	$C(a1),d0
00003F44 E248                       		lsr.w	#1,d0
00003F46 0240 0380                  		andi.w	#$380,d0
00003F4A 1229 0008                  		move.b	8(a1),d1
00003F4E 0241 007F                  		andi.w	#$7F,d1
00003F52 D041                       		add.w	d1,d0
00003F54 45F8 A400                  		lea	($FFFFA400).w,a2
00003F58 1032 0000                  		move.b	(a2,d0.w),d0
00003F5C 45FA 0000                  		lea	byte_3FCF(pc),a2
00003F60 7206                       		moveq	#6,d1
00003F62                            
00003F62                            loc_3F62:
00003F62 B022                       		cmp.b	-(a2),d0
00003F64 57C9 FFFC                  		dbeq	d1,loc_3F62
00003F68 6700                       		beq.s	LZSlide_Move
00003F6A                            
00003F6A                            loc_3F6A:
00003F6A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00003F6E 6700                       		beq.s	locret_3F7A
00003F70 337C 0005 003E             		move.w	#5,$3E(a1)
00003F76 4238 F7CA                  		clr.b	($FFFFF7CA).w
00003F7A                            
00003F7A                            locret_3F7A:
00003F7A 4E75                       		rts	
00003F7C                            ; ===========================================================================
00003F7C                            
00003F7C                            LZSlide_Move:				; XREF: LZWaterSlides
00003F7C 0C41 0003                  		cmpi.w	#3,d1
00003F80 6400                       		bcc.s	loc_3F84
00003F82 4E71                       		nop	
00003F84                            
00003F84                            loc_3F84:
00003F84 08A9 0000 0022             		bclr	#0,$22(a1)
00003F8A 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00003F8E 1340 0014                  		move.b	d0,$14(a1)
00003F92 6A00                       		bpl.s	loc_3F9A
00003F94 08E9 0000 0022             		bset	#0,$22(a1)
00003F9A                            
00003F9A                            loc_3F9A:
00003F9A 4229 0015                  		clr.b	$15(a1)
00003F9E 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00003FA4 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00003FAA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003FAE 0200 001F                  		andi.b	#$1F,d0
00003FB2 6600                       		bne.s	locret_3FBE
00003FB4 303C 00D0                  		move.w	#$D0,d0
00003FB8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play water sound
00003FBE                            
00003FBE                            locret_3FBE:
00003FBE 4E75                       		rts	
00003FC0                            ; End of function LZWaterSlides
00003FC0                            
00003FC0                            ; ===========================================================================
00003FC0 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00003FCF 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00003FD0                            		even
00003FD0                            
00003FD0                            ; ---------------------------------------------------------------------------
00003FD0                            ; Subroutine to	move Sonic in demo mode
00003FD0                            ; ---------------------------------------------------------------------------
00003FD0                            
00003FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FD0                            
00003FD0                            
00003FD0                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00003FD0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003FD4 6600                       		bne.s	MoveDemo_On	; if yes, branch
00003FD6 4E75                       		rts	
00003FD8                            ; ===========================================================================
00003FD8                            
00003FD8                            ; This is an unused subroutine for recording a demo
00003FD8                            
00003FD8                            MoveDemo_Record:
00003FD8 43F9 0008 0000             		lea	($80000).l,a1
00003FDE 3038 F790                  		move.w	($FFFFF790).w,d0
00003FE2 D2C0                       		adda.w	d0,a1
00003FE4 1038 F604                  		move.b	($FFFFF604).w,d0
00003FE8 B011                       		cmp.b	(a1),d0
00003FEA 6600                       		bne.s	loc_3FFA
00003FEC 5229 0001                  		addq.b	#1,1(a1)
00003FF0 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00003FF6 6700                       		beq.s	loc_3FFA
00003FF8 4E75                       		rts	
00003FFA                            ; ===========================================================================
00003FFA                            
00003FFA                            loc_3FFA:				; XREF: MoveDemo_Record
00003FFA 1340 0002                  		move.b	d0,2(a1)
00003FFE 137C 0000 0003             		move.b	#0,3(a1)
00004004 5478 F790                  		addq.w	#2,($FFFFF790).w
00004008 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000400E 4E75                       		rts	
00004010                            ; ===========================================================================
00004010                            
00004010                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004010 4A38 F604                  		tst.b	($FFFFF604).w
00004014 6A00                       		bpl.s	loc_4022
00004016 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000401A 6B00                       		bmi.s	loc_4022
0000401C 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004022                            
00004022                            loc_4022:
00004022 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004028 7000                       		moveq	#0,d0
0000402A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000402E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004034 6600                       		bne.s	loc_4038
00004036 7006                       		moveq	#6,d0
00004038                            
00004038                            loc_4038:
00004038 E548                       		lsl.w	#2,d0
0000403A 2271 0000                  		movea.l	(a1,d0.w),a1
0000403E 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004042 6A00                       		bpl.s	loc_4056
00004044 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
0000404A 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000404E 5340                       		subq.w	#1,d0
00004050 E548                       		lsl.w	#2,d0
00004052 2271 0000                  		movea.l	(a1,d0.w),a1
00004056                            
00004056                            loc_4056:
00004056 3038 F790                  		move.w	($FFFFF790).w,d0
0000405A D2C0                       		adda.w	d0,a1
0000405C 1011                       		move.b	(a1),d0
0000405E 41F8 F604                  		lea	($FFFFF604).w,a0
00004062 1200                       		move.b	d0,d1
00004064 1410                       		move.b	(a0),d2
00004066 B500                       		eor.b	d2,d0
00004068 10C1                       		move.b	d1,(a0)+
0000406A C001                       		and.b	d1,d0
0000406C 10C0                       		move.b	d0,(a0)+
0000406E 5338 F792                  		subq.b	#1,($FFFFF792).w
00004072 6400                       		bcc.s	locret_407E
00004074 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
0000407A 5478 F790                  		addq.w	#2,($FFFFF790).w
0000407E                            
0000407E                            locret_407E:
0000407E 4E75                       		rts	
00004080                            ; End of function MoveSonicInDemo
00004080                            
00004080                            ; ===========================================================================
00004080                            ; ---------------------------------------------------------------------------
00004080                            ; Demo sequence	pointers
00004080                            ; ---------------------------------------------------------------------------
00004080                            Demo_Index:
00004080                            	include "_inc\Demo pointers for intro.asm"
00004080                            ; ---------------------------------------------------------------------------
00004080                            ; Demo sequence	pointers
00004080                            ; ---------------------------------------------------------------------------
00004080 0000 0000                  	dc.l Demo_GHZ
00004084 0000 0000                  	dc.l Demo_GHZ
00004088 0000 0000                  	dc.l Demo_MZ
0000408C 0000 0000                  	dc.l Demo_MZ
00004090 0000 0000                  	dc.l Demo_SYZ
00004094 0000 0000                  	dc.l Demo_SYZ
00004098 0000 0000                  	dc.l Demo_SS
0000409C 0000 0000                  	dc.l Demo_SS
0000409C 0000 0000                  	dc.l Demo_SS
000040A0                            
000040A0                            Demo_EndIndex:
000040A0                            	include "_inc\Demo pointers for ending.asm"
000040A0                            ; ---------------------------------------------------------------------------
000040A0                            ; Demo (ending) sequence pointers
000040A0                            ; ---------------------------------------------------------------------------
000040A0 0000 0000                  	dc.l Demo_EndGHZ1
000040A4 0000 0000                  	dc.l Demo_EndMZ
000040A8 0000 0000                  	dc.l Demo_EndSYZ
000040AC 0000 0000                  	dc.l Demo_EndLZ
000040B0 0000 0000                  	dc.l Demo_EndSLZ
000040B4 0000 0000                  	dc.l Demo_EndSBZ1
000040B8 0000 0000                  	dc.l Demo_EndSBZ2
000040BC 0000 0000                  	dc.l Demo_EndGHZ2
000040BC 0000 0000                  	dc.l Demo_EndGHZ2
000040C0                            
000040C0 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000040D0 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000040E0 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000040F0                            		even
000040F0                            
000040F0                            ; ---------------------------------------------------------------------------
000040F0                            ; Collision index loading subroutine
000040F0                            ; ---------------------------------------------------------------------------
000040F0                            
000040F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040F0                            
000040F0                            
000040F0                            ColIndexLoad:				; XREF: Level
000040F0 7000                       		moveq	#0,d0
000040F2 1038 FE10                  		move.b	($FFFFFE10).w,d0
000040F6 E548                       		lsl.w	#2,d0
000040F8 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000040FE 4E75                       		rts	
00004100                            ; End of function ColIndexLoad
00004100                            
00004100                            ; ===========================================================================
00004100                            ; ---------------------------------------------------------------------------
00004100                            ; Collision index pointers
00004100                            ; ---------------------------------------------------------------------------
00004100                            ColPointers:
00004100                            	include "_inc\Collision index pointers.asm"
00004100                            ; ---------------------------------------------------------------------------
00004100                            ; Collision index pointers
00004100                            ; ---------------------------------------------------------------------------
00004100 0000 0000                  	dc.l Col_GHZ
00004104 0000 0000                  	dc.l Col_LZ
00004108 0000 0000                  	dc.l Col_MZ
0000410C 0000 0000                  	dc.l Col_SLZ
00004110 0000 0000                  	dc.l Col_SYZ
00004114 0000 0000                  	dc.l Col_SBZ
00004114 0000 0000                  	dc.l Col_SBZ
00004118                            
00004118                            ; ---------------------------------------------------------------------------
00004118                            ; Oscillating number subroutine
00004118                            ; ---------------------------------------------------------------------------
00004118                            
00004118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004118                            
00004118                            
00004118                            OscillateNumInit:			; XREF: Level
00004118 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000411C 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004122 7220                       		moveq	#$20,d1
00004124                            
00004124                            Osc_Loop:
00004124 32DA                       		move.w	(a2)+,(a1)+
00004126 51C9 FFFC                  		dbf	d1,Osc_Loop
0000412A 4E75                       		rts	
0000412C                            ; End of function OscillateNumInit
0000412C                            
0000412C                            ; ===========================================================================
0000412C 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004130 0000 0080                  		dc.w 0,	$80
00004134 0000 0080                  		dc.w 0,	$80
00004138 0000 0080                  		dc.w 0,	$80
0000413C 0000 0080                  		dc.w 0,	$80
00004140 0000 0080                  		dc.w 0,	$80
00004144 0000 0080                  		dc.w 0,	$80
00004148 0000 0080                  		dc.w 0,	$80
0000414C 0000 0080                  		dc.w 0,	$80
00004150 0000 50F0                  		dc.w 0,	$50F0
00004154 011E 2080                  		dc.w $11E, $2080
00004158 00B4 3080                  		dc.w $B4, $3080
0000415C 010E 5080                  		dc.w $10E, $5080
00004160 01C2 7080                  		dc.w $1C2, $7080
00004164 0276 0080                  		dc.w $276, $80
00004168 0000 0080                  		dc.w 0,	$80
0000416C 0000                       		dc.w 0
0000416E                            		even
0000416E                            
0000416E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000416E                            
0000416E                            
0000416E                            OscillateNumDo:				; XREF: Level
0000416E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004174 6400                       		bcc.s	locret_41C4
00004176 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000417A 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004180 3619                       		move.w	(a1)+,d3
00004182 720F                       		moveq	#$F,d1
00004184                            
00004184                            loc_4184:
00004184 341A                       		move.w	(a2)+,d2
00004186 381A                       		move.w	(a2)+,d4
00004188 0303                       		btst	d1,d3
0000418A 6600                       		bne.s	loc_41A4
0000418C 3029 0002                  		move.w	2(a1),d0
00004190 D042                       		add.w	d2,d0
00004192 3340 0002                  		move.w	d0,2(a1)
00004196 D151                       		add.w	d0,0(a1)
00004198 B811                       		cmp.b	0(a1),d4
0000419A 6200                       		bhi.s	loc_41BA
0000419C 03C3                       		bset	d1,d3
0000419E 6000                       		bra.s	loc_41BA
000041A0                            ; ===========================================================================
000041A0                            
000041A0                            loc_41A4:				; XREF: OscillateNumDo
000041A0 3029 0002                  		move.w	2(a1),d0
000041A4 9042                       		sub.w	d2,d0
000041A6 3340 0002                  		move.w	d0,2(a1)
000041AA D151                       		add.w	d0,0(a1)
000041AC B811                       		cmp.b	0(a1),d4
000041AE 6300                       		bls.s	loc_41BA
000041B0 0383                       		bclr	d1,d3
000041B2                            
000041B2                            loc_41BA:
000041B2 5849                       		addq.w	#4,a1
000041B4 51C9 FFCE                  		dbf	d1,loc_4184
000041B8 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000041BC                            
000041BC                            locret_41C4:
000041BC 4E75                       		rts	
000041BE                            ; End of function OscillateNumDo
000041BE                            
000041BE                            ; ===========================================================================
000041BE 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000041C2 0002 0018                  		dc.w 2,	$18
000041C6 0002 0020                  		dc.w 2,	$20
000041CA 0002 0030                  		dc.w 2,	$30
000041CE 0004 0020                  		dc.w 4,	$20
000041D2 0008 0008                  		dc.w 8,	8
000041D6 0008 0040                  		dc.w 8,	$40
000041DA 0004 0040                  		dc.w 4,	$40
000041DE 0002 0050                  		dc.w 2,	$50
000041E2 0002 0050                  		dc.w 2,	$50
000041E6 0002 0020                  		dc.w 2,	$20
000041EA 0003 0030                  		dc.w 3,	$30
000041EE 0005 0050                  		dc.w 5,	$50
000041F2 0007 0070                  		dc.w 7,	$70
000041F6 0002 0010                  		dc.w 2,	$10
000041FA 0002 0010                  		dc.w 2,	$10
000041FE                            		even
000041FE                            
000041FE                            ; ---------------------------------------------------------------------------
000041FE                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000041FE                            ; ---------------------------------------------------------------------------
000041FE                            
000041FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041FE                            
000041FE                            
000041FE                            ChangeRingFrame:			; XREF: Level
000041FE 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004202 6A00                       		bpl.s	loc_421C
00004204 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
0000420A 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000420E 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004214                            
00004214                            loc_421C:
00004214 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004218 6A00                       		bpl.s	loc_4232
0000421A 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004220 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004224 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0000422A                            
0000422A                            loc_4232:
0000422A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000422E 6A00                       		bpl.s	loc_4250
00004230 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004236 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0000423A 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004240 6500                       		bcs.s	loc_4250
00004242 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004248                            
00004248                            loc_4250:
00004248 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000424C 6700                       		beq.s	locret_4272
0000424E 7000                       		moveq	#0,d0
00004250 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004254 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004258 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000425C EF58                       		rol.w	#7,d0
0000425E 0240 0003                  		andi.w	#3,d0
00004262 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004266 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0000426A                            
0000426A                            locret_4272:
0000426A 4E75                       		rts	
0000426C                            ; End of function ChangeRingFrame
0000426C                            
0000426C                            ; ---------------------------------------------------------------------------
0000426C                            ; End-of-act signpost pattern loading subroutine
0000426C                            ; ---------------------------------------------------------------------------
0000426C                            
0000426C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000426C                            
0000426C                            
0000426C                            SignpostArtLoad:			; XREF: Level
0000426C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004270 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004274 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
0000427A 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000427C 3038 F700                  		move.w	($FFFFF700).w,d0
00004280 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004284 0441 0100                  		subi.w	#$100,d1
00004288 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
0000428A 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000428C 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004290 6700                       		beq.s	Signpost_Exit
00004292 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004296 6700                       		beq.s	Signpost_Exit
00004298 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000429C 7012                       		moveq	#$12,d0
0000429E 6000 D312                  		bra.w	LoadPLC2	; load signpost	patterns
000042A2                            ; ===========================================================================
000042A2                            
000042A2                            Signpost_Exit:
000042A2 4E75                       		rts	
000042A4                            ; End of function SignpostArtLoad
000042A4                            
000042A4                            ; ===========================================================================
000042A4                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004324                            Demo_MZ:	incbin	demodata\i_mz.bin
00004454                            Demo_SYZ:	incbin	demodata\i_syz.bin
000044D4                            Demo_SS:	incbin	demodata\i_ss.bin
000045D4                            ; ===========================================================================
000045D4                            
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            ; Special Stage
000045D4                            ; ---------------------------------------------------------------------------
000045D4                            
000045D4                            SpecialStage:				; XREF: GameModeArray
000045D4 303C 00CA                  		move.w	#$CA,d0
000045D8 6100 CDC2                  		bsr.w	PlaySound_Special ; play special stage entry sound
000045DC 6100 D99E                  		bsr.w	Pal_MakeFlash
000045E0 46FC 2700                  		move	#$2700,sr
000045E4 4DF9 00C0 0004             		lea	($C00004).l,a6
000045EA 3CBC 8B03                  		move.w	#$8B03,(a6)
000045EE 3CBC 8004                  		move.w	#$8004,(a6)
000045F2 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000045F8 3CBC 9011                  		move.w	#$9011,(a6)
000045FC 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004600 0200 00BF                  		andi.b	#$BF,d0
00004604 33C0 00C0 0004             		move.w	d0,($C00004).l
0000460A 6100 CCB8                  		bsr.w	ClearScreen
0000460E 46FC 2300                  		move	#$2300,sr
00004612 4BF9 00C0 0004             		lea	($C00004).l,a5
00004618 3ABC 8F01                  		move.w	#$8F01,(a5)
0000461C 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004622 3ABC 9780                  		move.w	#$9780,(a5)
00004626 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000462C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004634                            
00004634                            loc_463C:
00004634 3215                       		move.w	(a5),d1
00004636 0801 0001                  		btst	#1,d1
0000463A 66F8                       		bne.s	loc_463C
0000463C 3ABC 8F02                  		move.w	#$8F02,(a5)
00004640 6100 0000                  		bsr.w	SS_BGLoad
00004644 7014                       		moveq	#$14,d0
00004646 6100 D0A4                  		bsr.w	RunPLC_ROM	; load special stage patterns
0000464A 43F8 D000                  		lea	($FFFFD000).w,a1
0000464E 7000                       		moveq	#0,d0
00004650 323C 07FF                  		move.w	#$7FF,d1
00004654                            
00004654                            SS_ClrObjRam:
00004654 22C0                       		move.l	d0,(a1)+
00004656 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
0000465A                            
0000465A 43F8 F700                  		lea	($FFFFF700).w,a1
0000465E 7000                       		moveq	#0,d0
00004660 323C 003F                  		move.w	#$3F,d1
00004664                            
00004664                            SS_ClrRam:
00004664 22C0                       		move.l	d0,(a1)+
00004666 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
0000466A                            
0000466A 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000466E 7000                       		moveq	#0,d0
00004670 323C 0027                  		move.w	#$27,d1
00004674                            
00004674                            SS_ClrRam2:
00004674 22C0                       		move.l	d0,(a1)+
00004676 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
0000467A                            
0000467A 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000467E 7000                       		moveq	#0,d0
00004680 323C 007F                  		move.w	#$7F,d1
00004684                            
00004684                            SS_ClrNemRam:
00004684 22C0                       		move.l	d0,(a1)+
00004686 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
0000468A                            
0000468A 4238 F64E                  		clr.b	($FFFFF64E).w
0000468E 4278 FE02                  		clr.w	($FFFFFE02).w
00004692 700A                       		moveq	#$A,d0
00004694 6100 DA66                  		bsr.w	PalLoad1	; load special stage pallet
00004698 4EB9 0000 0000             		jsr	SS_Load
0000469E 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000046A6 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000046AE 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000046B4 6100 0000                  		bsr.w	PalCycle_SS
000046B8 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000046BC 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000046C2 303C 0089                  		move.w	#$89,d0
000046C6 6100 CCCE                  		bsr.w	PlaySound	; play special stage BG	music
000046CA 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000046D0 43F9 0000 4080             		lea	(Demo_Index).l,a1
000046D6 7006                       		moveq	#6,d0
000046D8 E548                       		lsl.w	#2,d0
000046DA 2271 0000                  		movea.l	(a1,d0.w),a1
000046DE 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000046E4 5338 F792                  		subq.b	#1,($FFFFF792).w
000046E8 4278 FE20                  		clr.w	($FFFFFE20).w
000046EC 4238 FE1B                  		clr.b	($FFFFFE1B).w
000046F0 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000046F6 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000046FC 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00004700 6700                       		beq.s	SS_NoDebug	; if not, branch
00004702 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004708 6700                       		beq.s	SS_NoDebug	; if not, branch
0000470A 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00004710                            
00004710                            SS_NoDebug:
00004710 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004714 0000 0040                  		ori.b	#$40,d0
00004718 33C0 00C0 0004             		move.w	d0,($C00004).l
0000471E 6100 D7B0                  		bsr.w	Pal_MakeWhite
00004722                            
00004722                            ; ---------------------------------------------------------------------------
00004722                            ; Main Special Stage loop
00004722                            ; ---------------------------------------------------------------------------
00004722                            
00004722                            SS_MainLoop:
00004722 6100 CC84                  		bsr.w	PauseGame
00004726 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000472C 6100 E27A                  		bsr.w	DelayProgram
00004730 6100 F89E                  		bsr.w	MoveSonicInDemo
00004734 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
0000473A 4EB9 0000 0000             		jsr	ObjectsLoad
00004740 4EB9 0000 0000             		jsr	BuildSprites
00004746 4EB9 0000 0000             		jsr	SS_ShowLayout
0000474C 6100 0000                  		bsr.w	SS_BGAnimate
00004750 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004754 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004756 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
0000475A 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000475E                            
0000475E                            SS_ChkEnd:
0000475E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004764 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004768                            
00004768 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000476C 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
00004770 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004776 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000477C 6500                       		bcs.s	SS_End		; if not, branch
0000477E 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004782                            
00004782                            SS_End:
00004782 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004788 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000478E 4278 F794                  		clr.w	($FFFFF794).w
00004792                            
00004792                            SS_EndLoop:
00004792 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004798 6100 E20E                  		bsr.w	DelayProgram
0000479C 6100 F832                  		bsr.w	MoveSonicInDemo
000047A0 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000047A6 4EB9 0000 0000             		jsr	ObjectsLoad
000047AC 4EB9 0000 0000             		jsr	BuildSprites
000047B2 4EB9 0000 0000             		jsr	SS_ShowLayout
000047B8 6100 0000                  		bsr.w	SS_BGAnimate
000047BC 5378 F794                  		subq.w	#1,($FFFFF794).w
000047C0 6A00                       		bpl.s	loc_47D4
000047C2 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000047C8 6100 D7D2                  		bsr.w	Pal_ToWhite
000047CC                            
000047CC                            loc_47D4:
000047CC 4A78 F614                  		tst.w	($FFFFF614).w
000047D0 66C0                       		bne.s	SS_EndLoop
000047D2                            
000047D2 46FC 2700                  		move	#$2700,sr
000047D6 4DF9 00C0 0004             		lea	($C00004).l,a6
000047DC 3CBC 8230                  		move.w	#$8230,(a6)
000047E0 3CBC 8407                  		move.w	#$8407,(a6)
000047E4 3CBC 9001                  		move.w	#$9001,(a6)
000047E8 6100 CADA                  		bsr.w	ClearScreen
000047EC 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000047F6 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000047FC 6100 CC42                  		bsr.w	NemDec
00004800 4EB9 0000 0000             		jsr	Hud_Base
00004806 46FC 2300                  		move	#$2300,sr
0000480A 7011                       		moveq	#$11,d0
0000480C 6100 D90A                  		bsr.w	PalLoad2	; load results screen pallet
00004810 7000                       		moveq	#0,d0
00004812 6100 CD9E                  		bsr.w	LoadPLC2
00004816 701B                       		moveq	#$1B,d0
00004818 6100 CD66                  		bsr.w	LoadPLC		; load results screen patterns
0000481C 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004822 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004828 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000482C C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00004830 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004834 303C 008E                  		move.w	#$8E,d0
00004838 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000483E 43F8 D000                  		lea	($FFFFD000).w,a1
00004842 7000                       		moveq	#0,d0
00004844 323C 07FF                  		move.w	#$7FF,d1
00004848                            
00004848                            SS_EndClrObjRam:
00004848 22C0                       		move.l	d0,(a1)+
0000484A 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000484E                            
0000484E 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004854                            
00004854                            SS_NormalExit:
00004854 6100 CB52                  		bsr.w	PauseGame
00004858 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000485E 6100 E148                  		bsr.w	DelayProgram
00004862 4EB9 0000 0000             		jsr	ObjectsLoad
00004868 4EB9 0000 0000             		jsr	BuildSprites
0000486E 6100 CD7C                  		bsr.w	RunPLC_RAM
00004872 4A78 FE02                  		tst.w	($FFFFFE02).w
00004876 67DC                       		beq.s	SS_NormalExit
00004878 4AB8 F680                  		tst.l	($FFFFF680).w
0000487C 66D6                       		bne.s	SS_NormalExit
0000487E 303C 00CA                  		move.w	#$CA,d0
00004882 6100 CB18                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004886 6100 D6F4                  		bsr.w	Pal_MakeFlash
0000488A 4E75                       		rts	
0000488C                            ; ===========================================================================
0000488C                            
0000488C                            SS_ToSegaScreen:
0000488C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004892 4E75                       		rts
00004894                            
00004894                            ; ---------------------------------------------------------------------------
00004894                            ; Special stage	background loading subroutine
00004894                            ; ---------------------------------------------------------------------------
00004894                            
00004894                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004894                            
00004894                            
00004894                            SS_BGLoad:				; XREF: SpecialStage
00004894 43F9 00FF 0000             		lea	($FF0000).l,a1
0000489A 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000048A0 303C 4051                  		move.w	#$4051,d0
000048A4 6100 CE78                  		bsr.w	EniDec
000048A8 263C 5000 0001             		move.l	#$50000001,d3
000048AE 45F9 00FF 0080             		lea	($FF0080).l,a2
000048B4 7E06                       		moveq	#6,d7
000048B6                            
000048B6                            loc_48BE:
000048B6 2003                       		move.l	d3,d0
000048B8 7C03                       		moveq	#3,d6
000048BA 7800                       		moveq	#0,d4
000048BC 0C47 0003                  		cmpi.w	#3,d7
000048C0 6400                       		bcc.s	loc_48CC
000048C2 7801                       		moveq	#1,d4
000048C4                            
000048C4                            loc_48CC:
000048C4 7A07                       		moveq	#7,d5
000048C6                            
000048C6                            loc_48CE:
000048C6 224A                       		movea.l	a2,a1
000048C8 0A04 0001                  		eori.b	#1,d4
000048CC 6600                       		bne.s	loc_48E2
000048CE 0C47 0006                  		cmpi.w	#6,d7
000048D2 6600                       		bne.s	loc_48F2
000048D4 43F9 00FF 0000             		lea	($FF0000).l,a1
000048DA                            
000048DA                            loc_48E2:
000048DA 48E7 F800                  		movem.l	d0-d4,-(sp)
000048DE 7207                       		moveq	#7,d1
000048E0 7407                       		moveq	#7,d2
000048E2 6100 CB3C                  		bsr.w	ShowVDPGraphics
000048E6 4CDF 001F                  		movem.l	(sp)+,d0-d4
000048EA                            
000048EA                            loc_48F2:
000048EA 0680 0010 0000             		addi.l	#$100000,d0
000048F0 51CD FFD4                  		dbf	d5,loc_48CE
000048F4 0680 0380 0000             		addi.l	#$3800000,d0
000048FA 0A04 0001                  		eori.b	#1,d4
000048FE 51CE FFC4                  		dbf	d6,loc_48CC
00004902 0683 1000 0000             		addi.l	#$10000000,d3
00004908 6A00                       		bpl.s	loc_491C
0000490A 4843                       		swap	d3
0000490C 0683 0000 C000             		addi.l	#$C000,d3
00004912 4843                       		swap	d3
00004914                            
00004914                            loc_491C:
00004914 D4FC 0080                  		adda.w	#$80,a2
00004918 51CF FF9C                  		dbf	d7,loc_48BE
0000491C 43F9 00FF 0000             		lea	($FF0000).l,a1
00004922 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004928 303C 4000                  		move.w	#$4000,d0
0000492C 6100 CDF0                  		bsr.w	EniDec
00004930 43F9 00FF 0000             		lea	($FF0000).l,a1
00004936 203C 4000 0003             		move.l	#$40000003,d0
0000493C 723F                       		moveq	#$3F,d1
0000493E 741F                       		moveq	#$1F,d2
00004940 6100 CADE                  		bsr.w	ShowVDPGraphics
00004944 43F9 00FF 0000             		lea	($FF0000).l,a1
0000494A 203C 5000 0003             		move.l	#$50000003,d0
00004950 723F                       		moveq	#$3F,d1
00004952 743F                       		moveq	#$3F,d2
00004954 6100 CACA                  		bsr.w	ShowVDPGraphics
00004958 4E75                       		rts	
0000495A                            ; End of function SS_BGLoad
0000495A                            
0000495A                            ; ---------------------------------------------------------------------------
0000495A                            ; Pallet cycling routine - special stage
0000495A                            ; ---------------------------------------------------------------------------
0000495A                            
0000495A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000495A                            
0000495A                            
0000495A                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
0000495A 4A78 F63A                  		tst.w	($FFFFF63A).w
0000495E 6600                       		bne.s	locret_49E6
00004960 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004964 6A00                       		bpl.s	locret_49E6
00004966 4DF9 00C0 0004             		lea	($C00004).l,a6
0000496C 3038 F79A                  		move.w	($FFFFF79A).w,d0
00004970 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004974 0240 001F                  		andi.w	#$1F,d0
00004978 E548                       		lsl.w	#2,d0
0000497A 41F9 0000 0000             		lea	(byte_4A3C).l,a0
00004980 D0C0                       		adda.w	d0,a0
00004982 1018                       		move.b	(a0)+,d0
00004984 6A00                       		bpl.s	loc_4992
00004986 303C 01FF                  		move.w	#$1FF,d0
0000498A                            
0000498A                            loc_4992:
0000498A 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000498E 7000                       		moveq	#0,d0
00004990 1018                       		move.b	(a0)+,d0
00004992 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004996 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000499C 43F1 0000                  		lea	(a1,d0.w),a1
000049A0 303C 8200                  		move.w	#-$7E00,d0
000049A4 1019                       		move.b	(a1)+,d0
000049A6 3C80                       		move.w	d0,(a6)
000049A8 11D1 F616                  		move.b	(a1),($FFFFF616).w
000049AC 303C 8400                  		move.w	#-$7C00,d0
000049B0 1018                       		move.b	(a0)+,d0
000049B2 3C80                       		move.w	d0,(a6)
000049B4 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000049BE 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000049C6 7000                       		moveq	#0,d0
000049C8 1018                       		move.b	(a0)+,d0
000049CA 6B00                       		bmi.s	loc_49E8
000049CC 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000049D2 D2C0                       		adda.w	d0,a1
000049D4 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000049D8 24D9                       		move.l	(a1)+,(a2)+
000049DA 24D9                       		move.l	(a1)+,(a2)+
000049DC 24D9                       		move.l	(a1)+,(a2)+
000049DE                            
000049DE                            locret_49E6:
000049DE 4E75                       		rts	
000049E0                            ; ===========================================================================
000049E0                            
000049E0                            loc_49E8:				; XREF: PalCycle_SS
000049E0 3238 F79E                  		move.w	($FFFFF79E).w,d1
000049E4 0C40 008A                  		cmpi.w	#$8A,d0
000049E8 6500                       		bcs.s	loc_49F4
000049EA 5241                       		addq.w	#1,d1
000049EC                            
000049EC                            loc_49F4:
000049EC C2FC 002A                  		mulu.w	#$2A,d1
000049F0 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000049F6 D2C1                       		adda.w	d1,a1
000049F8 0240 007F                  		andi.w	#$7F,d0
000049FC 0880 0000                  		bclr	#0,d0
00004A00 6700                       		beq.s	loc_4A18
00004A02 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004A06 24D1                       		move.l	(a1),(a2)+
00004A08 24E9 0004                  		move.l	4(a1),(a2)+
00004A0C 24E9 0008                  		move.l	8(a1),(a2)+
00004A10                            
00004A10                            loc_4A18:
00004A10 D2FC 000C                  		adda.w	#$C,a1
00004A14 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004A18 0C40 000A                  		cmpi.w	#$A,d0
00004A1C 6500                       		bcs.s	loc_4A2E
00004A1E 0440 000A                  		subi.w	#$A,d0
00004A22 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004A26                            
00004A26                            loc_4A2E:
00004A26 3200                       		move.w	d0,d1
00004A28 D040                       		add.w	d0,d0
00004A2A D041                       		add.w	d1,d0
00004A2C D2C0                       		adda.w	d0,a1
00004A2E 24D9                       		move.l	(a1)+,(a2)+
00004A30 34D9                       		move.w	(a1)+,(a2)+
00004A32 4E75                       		rts	
00004A34                            ; End of function PalCycle_SS
00004A34                            
00004A34                            ; ===========================================================================
00004A34 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004A44                            					; XREF: PalCycle_SS
00004A44 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004A54 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004A64 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004A74 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004A84 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004A94 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004AA4 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004AB4                            		even
00004AB4 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004AC2                            					; XREF: PalCycle_SS
00004AC2                            		even
00004AC2                            
00004AC2                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004B0A                            		even
00004B0A                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004BDC                            		even
00004BDC                            
00004BDC                            ; ---------------------------------------------------------------------------
00004BDC                            ; Subroutine to	make the special stage background animated
00004BDC                            ; ---------------------------------------------------------------------------
00004BDC                            
00004BDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BDC                            
00004BDC                            
00004BDC                            SS_BGAnimate:				; XREF: SpecialStage
00004BDC 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004BE0 6600                       		bne.s	loc_4BF6
00004BE2 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004BE8 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004BEE                            
00004BEE                            loc_4BF6:
00004BEE 0C40 0008                  		cmpi.w	#8,d0
00004BF2 6400                       		bcc.s	loc_4C4E
00004BF4 0C40 0006                  		cmpi.w	#6,d0
00004BF8 6600                       		bne.s	loc_4C10
00004BFA 5278 F718                  		addq.w	#1,($FFFFF718).w
00004BFE 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004C02 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004C08                            
00004C08                            loc_4C10:
00004C08 7000                       		moveq	#0,d0
00004C0A 3038 F708                  		move.w	($FFFFF708).w,d0
00004C0E 4440                       		neg.w	d0
00004C10 4840                       		swap	d0
00004C12 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004C18 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C1C 7609                       		moveq	#9,d3
00004C1E                            
00004C1E                            loc_4C26:
00004C1E 302B 0002                  		move.w	2(a3),d0
00004C22 6100 DDB6                  		bsr.w	CalcSine
00004C26 7400                       		moveq	#0,d2
00004C28 1419                       		move.b	(a1)+,d2
00004C2A C1C2                       		muls.w	d2,d0
00004C2C E080                       		asr.l	#8,d0
00004C2E 36C0                       		move.w	d0,(a3)+
00004C30 1419                       		move.b	(a1)+,d2
00004C32 4882                       		ext.w	d2
00004C34 D55B                       		add.w	d2,(a3)+
00004C36 51CB FFE6                  		dbf	d3,loc_4C26
00004C3A 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C3E 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004C44 6000                       		bra.s	loc_4C7E
00004C46                            ; ===========================================================================
00004C46                            
00004C46                            loc_4C4E:				; XREF: SS_BGAnimate
00004C46 0C40 000C                  		cmpi.w	#$C,d0
00004C4A 6600                       		bne.s	loc_4C74
00004C4C 5378 F718                  		subq.w	#1,($FFFFF718).w
00004C50 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C54 243C 0001 8000             		move.l	#$18000,d2
00004C5A 7206                       		moveq	#6,d1
00004C5C                            
00004C5C                            loc_4C64:
00004C5C 2013                       		move.l	(a3),d0
00004C5E 9082                       		sub.l	d2,d0
00004C60 26C0                       		move.l	d0,(a3)+
00004C62 0482 0000 2000             		subi.l	#$2000,d2
00004C68 51C9 FFF2                  		dbf	d1,loc_4C64
00004C6C                            
00004C6C                            loc_4C74:
00004C6C 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C70 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004C76                            
00004C76                            loc_4C7E:
00004C76 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004C7A 3038 F718                  		move.w	($FFFFF718).w,d0
00004C7E 4440                       		neg.w	d0
00004C80 4840                       		swap	d0
00004C82 7600                       		moveq	#0,d3
00004C84 161A                       		move.b	(a2)+,d3
00004C86 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004C8A 4442                       		neg.w	d2
00004C8C 0242 00FF                  		andi.w	#$FF,d2
00004C90 E54A                       		lsl.w	#2,d2
00004C92                            
00004C92                            loc_4C9A:
00004C92 301B                       		move.w	(a3)+,d0
00004C94 544B                       		addq.w	#2,a3
00004C96 7200                       		moveq	#0,d1
00004C98 121A                       		move.b	(a2)+,d1
00004C9A 5341                       		subq.w	#1,d1
00004C9C                            
00004C9C                            loc_4CA4:
00004C9C 2380 2000                  		move.l	d0,(a1,d2.w)
00004CA0 5842                       		addq.w	#4,d2
00004CA2 0242 03FC                  		andi.w	#$3FC,d2
00004CA6 51C9 FFF4                  		dbf	d1,loc_4CA4
00004CAA 51CB FFE6                  		dbf	d3,loc_4C9A
00004CAE 4E75                       		rts	
00004CB0                            ; End of function SS_BGAnimate
00004CB0                            
00004CB0                            ; ===========================================================================
00004CB0 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004CBC                            		even
00004CBC 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004CC4                            		even
00004CC4 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004CD8                            		even
00004CD8                            					; XREF: SS_BGAnimate
00004CD8                            ; ===========================================================================
00004CD8                            
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            ; Continue screen
00004CD8                            ; ---------------------------------------------------------------------------
00004CD8                            
00004CD8                            ContinueScreen:				; XREF: GameModeArray
00004CD8 6100 D178                  		bsr.w	Pal_FadeFrom
00004CDC 46FC 2700                  		move	#$2700,sr
00004CE0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004CE4 0200 00BF                  		andi.b	#$BF,d0
00004CE8 33C0 00C0 0004             		move.w	d0,($C00004).l
00004CEE 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CF4 3CBC 8004                  		move.w	#$8004,(a6)
00004CF8 3CBC 8700                  		move.w	#$8700,(a6)
00004CFC 6100 C5C6                  		bsr.w	ClearScreen
00004D00 43F8 D000                  		lea	($FFFFD000).w,a1
00004D04 7000                       		moveq	#0,d0
00004D06 323C 07FF                  		move.w	#$7FF,d1
00004D0A                            
00004D0A                            Cont_ClrObjRam:
00004D0A 22C0                       		move.l	d0,(a1)+
00004D0C 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004D10                            
00004D10 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D1A 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D20 6100 C71E                  		bsr.w	NemDec
00004D24 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004D2E 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004D34 6100 C70A                  		bsr.w	NemDec
00004D38 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004D42 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004D48 6100 C6F6                  		bsr.w	NemDec
00004D4C 720A                       		moveq	#10,d1
00004D4E 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004D54 7012                       		moveq	#$12,d0
00004D56 6100 D3A4                  		bsr.w	PalLoad1	; load continue	screen pallet
00004D5A 103C 0090                  		move.b	#$90,d0
00004D5E 6100 C636                  		bsr.w	PlaySound	; play continue	music
00004D62 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004D68 42B8 F700                  		clr.l	($FFFFF700).w
00004D6C 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004D74 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004D7A 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004D80 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004D86 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004D8C 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004D92 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004D98 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004D9E 4EB9 0000 0000             		jsr	ObjectsLoad
00004DA4 4EB9 0000 0000             		jsr	BuildSprites
00004DAA 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004DAE 0000 0040                  		ori.b	#$40,d0
00004DB2 33C0 00C0 0004             		move.w	d0,($C00004).l
00004DB8 6100 CFF2                  		bsr.w	Pal_FadeTo
00004DBC                            
00004DBC                            ; ---------------------------------------------------------------------------
00004DBC                            ; Continue screen main loop
00004DBC                            ; ---------------------------------------------------------------------------
00004DBC                            
00004DBC                            Cont_MainLoop:
00004DBC 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DC2 6100 DBE4                  		bsr.w	DelayProgram
00004DC6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004DCC 6400                       		bcc.s	loc_4DF2
00004DCE 46FC 2700                  		move	#$2700,sr
00004DD2 3238 F614                  		move.w	($FFFFF614).w,d1
00004DD6 82FC 003C                  		divu.w	#$3C,d1
00004DDA 0281 0000 000F             		andi.l	#$F,d1
00004DE0 4EB9 0000 0000             		jsr	ContScrCounter
00004DE6 46FC 2300                  		move	#$2300,sr
00004DEA                            
00004DEA                            loc_4DF2:
00004DEA 4EB9 0000 0000             		jsr	ObjectsLoad
00004DF0 4EB9 0000 0000             		jsr	BuildSprites
00004DF6 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004DFC 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004DFE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004E04 64B6                       		bcc.s	Cont_MainLoop
00004E06 4A78 F614                  		tst.w	($FFFFF614).w
00004E0A 6600 FFB0                  		bne.w	Cont_MainLoop
00004E0E 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004E14 4E75                       		rts	
00004E16                            ; ===========================================================================
00004E16                            
00004E16                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004E16 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004E1C 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004E22 7000                       		moveq	#0,d0
00004E24 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004E28 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004E2C 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004E30 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004E34 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004E38 4E75                       		rts	
00004E3A                            ; ===========================================================================
00004E3A                            
00004E3A                            ; ---------------------------------------------------------------------------
00004E3A                            ; Object 80 - Continue screen elements
00004E3A                            ; ---------------------------------------------------------------------------
00004E3A                            
00004E3A                            Obj80:					; XREF: Obj_Index
00004E3A 7000                       		moveq	#0,d0
00004E3C 1028 0024                  		move.b	$24(a0),d0
00004E40 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00004E44 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00004E48                            ; ===========================================================================
00004E48 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00004E4A 0000                       		dc.w Obj80_Display-Obj80_Index
00004E4C 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00004E4E 0000                       		dc.w Obj80_ChkType-Obj80_Index
00004E50                            ; ===========================================================================
00004E50                            
00004E50                            Obj80_Main:				; XREF: Obj80_Index
00004E50 5428 0024                  		addq.b	#2,$24(a0)
00004E54 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004E5C 317C 8500 0002             		move.w	#$8500,2(a0)
00004E62 117C 0000 0001             		move.b	#0,1(a0)
00004E68 117C 003C 0019             		move.b	#$3C,$19(a0)
00004E6E 317C 0120 0008             		move.w	#$120,8(a0)
00004E74 317C 00C0 000A             		move.w	#$C0,$A(a0)
00004E7A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00004E80                            
00004E80                            Obj80_Display:				; XREF: Obj80_Index
00004E80 4EF9 0000 0000             		jmp	DisplaySprite
00004E86                            ; ===========================================================================
00004E86                            Obj80_MiniSonicPos:
00004E86 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00004E98 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00004EA4                            ; ===========================================================================
00004EA4                            
00004EA4                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00004EA4 2248                       		movea.l	a0,a1
00004EA6 45F9 0000 4E86             		lea	(Obj80_MiniSonicPos).l,a2
00004EAC 7200                       		moveq	#0,d1
00004EAE 1238 FE18                  		move.b	($FFFFFE18).w,d1
00004EB2 5501                       		subq.b	#2,d1
00004EB4 6400                       		bcc.s	loc_4EC4
00004EB6 4EF9 0000 0000             		jmp	DeleteObject
00004EBC                            ; ===========================================================================
00004EBC                            
00004EBC                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00004EBC 7601                       		moveq	#1,d3
00004EBE 0C01 000E                  		cmpi.b	#$E,d1
00004EC2 6500                       		bcs.s	loc_4ED0
00004EC4 7600                       		moveq	#0,d3
00004EC6 720E                       		moveq	#$E,d1
00004EC8                            
00004EC8                            loc_4ED0:
00004EC8 1401                       		move.b	d1,d2
00004ECA 0202 0001                  		andi.b	#1,d2
00004ECE                            
00004ECE                            Obj80_MiniSonLoop:
00004ECE 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00004ED2 335A 0008                  		move.w	(a2)+,8(a1)
00004ED6 4A02                       		tst.b	d2
00004ED8 6700                       		beq.s	loc_4EEA
00004EDA 0469 000A 0008             		subi.w	#$A,8(a1)
00004EE0                            
00004EE0                            loc_4EEA:
00004EE0 337C 00D0 000A             		move.w	#$D0,$A(a1)
00004EE6 137C 0006 001A             		move.b	#6,$1A(a1)
00004EEC 137C 0006 0024             		move.b	#6,$24(a1)
00004EF2 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00004EFA 337C 8551 0002             		move.w	#$8551,2(a1)
00004F00 137C 0000 0001             		move.b	#0,1(a1)
00004F06 43E9 0040                  		lea	$40(a1),a1
00004F0A 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00004F0E 43E9 FFC0                  		lea	-$40(a1),a1
00004F12 1343 0028                  		move.b	d3,$28(a1)
00004F16                            
00004F16                            Obj80_ChkType:				; XREF: Obj80_Index
00004F16 4A28 0028                  		tst.b	$28(a0)
00004F1A 6700                       		beq.s	loc_4F40
00004F1C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F22 6500                       		bcs.s	loc_4F40
00004F24 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F28 0200 0001                  		andi.b	#1,d0
00004F2C 6600                       		bne.s	loc_4F40
00004F2E 4A78 D010                  		tst.w	($FFFFD010).w
00004F32 6600                       		bne.s	Obj80_Delete
00004F34 4E75                       		rts	
00004F36                            ; ===========================================================================
00004F36                            
00004F36                            loc_4F40:				; XREF: Obj80_ChkType
00004F36 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F3A 0200 000F                  		andi.b	#$F,d0
00004F3E 6600                       		bne.s	Obj80_Display2
00004F40 0868 0000 001A             		bchg	#0,$1A(a0)
00004F46                            
00004F46                            Obj80_Display2:
00004F46 4EF9 0000 0000             		jmp	DisplaySprite
00004F4C                            ; ===========================================================================
00004F4C                            
00004F4C                            Obj80_Delete:				; XREF: Obj80_ChkType
00004F4C 4EF9 0000 0000             		jmp	DeleteObject
00004F52                            ; ===========================================================================
00004F52                            
00004F52                            ; ---------------------------------------------------------------------------
00004F52                            ; Object 81 - Sonic on the continue screen
00004F52                            ; ---------------------------------------------------------------------------
00004F52                            
00004F52                            Obj81:					; XREF: Obj_Index
00004F52 7000                       		moveq	#0,d0
00004F54 1028 0024                  		move.b	$24(a0),d0
00004F58 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00004F5C 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00004F60 4EF9 0000 0000             		jmp	DisplaySprite
00004F66                            ; ===========================================================================
00004F66 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00004F68 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00004F6A 0000                       		dc.w Obj81_Animate-Obj81_Index
00004F6C 0000                       		dc.w Obj81_Run-Obj81_Index
00004F6E                            ; ===========================================================================
00004F6E                            
00004F6E                            Obj81_Main:				; XREF: Obj81_Index
00004F6E 5428 0024                  		addq.b	#2,$24(a0)
00004F72 317C 00A0 0008             		move.w	#$A0,8(a0)
00004F78 317C 00C0 000C             		move.w	#$C0,$C(a0)
00004F7E 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004F86 317C 0780 0002             		move.w	#$780,2(a0)
00004F8C 117C 0004 0001             		move.b	#4,1(a0)
00004F92 117C 0002 0018             		move.b	#2,$18(a0)
00004F98 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00004F9E 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00004FA4                            
00004FA4                            Obj81_ChkLand:				; XREF: Obj81_Index
00004FA4 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00004FAA 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00004FAC 5428 0024                  		addq.b	#2,$24(a0)
00004FB0 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00004FB4 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004FBC 317C 8500 0002             		move.w	#$8500,2(a0)
00004FC2 117C 0000 001C             		move.b	#0,$1C(a0)
00004FC8 6000                       		bra.s	Obj81_Animate
00004FCA                            ; ===========================================================================
00004FCA                            
00004FCA                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00004FCA 4EB9 0000 0000             		jsr	SpeedToPos
00004FD0 4EB9 0000 0000             		jsr	Sonic_Animate
00004FD6 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00004FDC                            ; ===========================================================================
00004FDC                            
00004FDC                            Obj81_Animate:				; XREF: Obj81_Index
00004FDC 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00004FE0 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00004FE2 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00004FE8 4EF9 0000 0000             		jmp	AnimateSprite
00004FEE                            ; ===========================================================================
00004FEE                            
00004FEE                            Obj81_GetUp:				; XREF: Obj81_Animate
00004FEE 5428 0024                  		addq.b	#2,$24(a0)
00004FF2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004FFA 317C 0780 0002             		move.w	#$780,2(a0)
00005000 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005006 4268 0014                  		clr.w	$14(a0)
0000500A 5168 000C                  		subq.w	#8,$C(a0)
0000500E 103C 00E0                  		move.b	#$E0,d0
00005012 6100 C388                  		bsr.w	PlaySound_Special ; fade out music
00005016                            
00005016                            Obj81_Run:				; XREF: Obj81_Index
00005016 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000501C 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000501E 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005024 6000                       		bra.s	Obj81_ShowRun
00005026                            ; ===========================================================================
00005026                            
00005026                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005026 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000502C                            
0000502C                            Obj81_ShowRun:				; XREF: Obj81_Run
0000502C 4EB9 0000 0000             		jsr	SpeedToPos
00005032 4EB9 0000 0000             		jsr	Sonic_Animate
00005038 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000503E                            ; ===========================================================================
0000503E                            Ani_obj81:
0000503E                            	include "_anim\obj81.asm"
0000503E                            ; ---------------------------------------------------------------------------
0000503E                            ; Animation script - Sonic on the continue screen
0000503E                            ; ---------------------------------------------------------------------------
0000503E 0000                       		dc.w byte_504A-Ani_obj81
00005040 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000504C 00                         		even
0000504C 00                         		even
0000504C                            
0000504C                            ; ---------------------------------------------------------------------------
0000504C                            ; Sprite mappings - Continue screen
0000504C                            ; ---------------------------------------------------------------------------
0000504C                            Map_obj80:
0000504C                            	include "_maps\obj80.asm"
0000504C                            ; ---------------------------------------------------------------------------
0000504C                            ; Sprite mappings - Continue screen
0000504C                            ; ---------------------------------------------------------------------------
0000504C 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005050 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005054 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005058 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000505C 0B                         byte_5066:	dc.b $B
0000505D F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005062 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005067 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000506C F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005071 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005076 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
0000507B F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005080 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005085 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
0000508A 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000508F 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005094 03                         byte_509E:	dc.b 3
00005095 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
0000509A F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000509F F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050A4 03                         byte_50AE:	dc.b 3
000050A5 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000050AA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050AF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050B4 03                         byte_50BE:	dc.b 3
000050B5 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000050BA F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050BF F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050C4 02                         byte_50CE:	dc.b 2
000050C5 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000050CA 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000050CF 01                         byte_50D9:	dc.b 1
000050D0 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000050D5 01                         byte_50DF:	dc.b 1
000050D6 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000050DC 00                         		even
000050DC 00                         		even
000050DC                            
000050DC                            ; ===========================================================================
000050DC                            ; ---------------------------------------------------------------------------
000050DC                            ; Ending sequence in Green Hill	Zone
000050DC                            ; ---------------------------------------------------------------------------
000050DC                            
000050DC                            EndingSequence:				; XREF: GameModeArray
000050DC 103C 00E4                  		move.b	#$E4,d0
000050E0 6100 C2BA                  		bsr.w	PlaySound_Special ; stop music
000050E4 6100 CD6C                  		bsr.w	Pal_FadeFrom
000050E8 43F8 D000                  		lea	($FFFFD000).w,a1
000050EC 7000                       		moveq	#0,d0
000050EE 323C 07FF                  		move.w	#$7FF,d1
000050F2                            
000050F2                            End_ClrObjRam:
000050F2 22C0                       		move.l	d0,(a1)+
000050F4 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000050F8                            
000050F8 43F8 F628                  		lea	($FFFFF628).w,a1
000050FC 7000                       		moveq	#0,d0
000050FE 323C 0015                  		move.w	#$15,d1
00005102                            
00005102                            End_ClrRam:
00005102 22C0                       		move.l	d0,(a1)+
00005104 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005108                            
00005108 43F8 F700                  		lea	($FFFFF700).w,a1
0000510C 7000                       		moveq	#0,d0
0000510E 323C 003F                  		move.w	#$3F,d1
00005112                            
00005112                            End_ClrRam2:
00005112 22C0                       		move.l	d0,(a1)+
00005114 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005118                            
00005118 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000511C 7000                       		moveq	#0,d0
0000511E 323C 0047                  		move.w	#$47,d1
00005122                            
00005122                            End_ClrRam3:
00005122 22C0                       		move.l	d0,(a1)+
00005124 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005128                            
00005128 46FC 2700                  		move	#$2700,sr
0000512C 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005130 0200 00BF                  		andi.b	#$BF,d0
00005134 33C0 00C0 0004             		move.w	d0,($C00004).l
0000513A 6100 C188                  		bsr.w	ClearScreen
0000513E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005144 3CBC 8B03                  		move.w	#$8B03,(a6)
00005148 3CBC 8230                  		move.w	#$8230,(a6)
0000514C 3CBC 8407                  		move.w	#$8407,(a6)
00005150 3CBC 857C                  		move.w	#$857C,(a6)
00005154 3CBC 9001                  		move.w	#$9001,(a6)
00005158 3CBC 8004                  		move.w	#$8004,(a6)
0000515C 3CBC 8720                  		move.w	#$8720,(a6)
00005160 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005166 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
0000516A 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005170 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005176 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000517C 6700                       		beq.s	End_LoadData	; if yes, branch
0000517E 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005184                            
00005184                            End_LoadData:
00005184 701C                       		moveq	#$1C,d0
00005186 6100 C564                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
0000518A 4EB9 0000 0000             		jsr	Hud_Base
00005190 6100 0000                  		bsr.w	LevelSizeLoad
00005194 6100 0000                  		bsr.w	DeformBgLayer
00005198 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000519E 6100 0000                  		bsr.w	MainLoadBlockLoad
000051A2 6100 0000                  		bsr.w	LoadTilesFromStart
000051A6 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000051AE 46FC 2300                  		move	#$2300,sr
000051B2 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000051B8 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000051BC 6100 C6DE                  		bsr.w	KosDec
000051C0 7003                       		moveq	#3,d0
000051C2 6100 CF38                  		bsr.w	PalLoad1	; load Sonic's pallet
000051C6 303C 008B                  		move.w	#$8B,d0
000051CA 6100 C1CA                  		bsr.w	PlaySound	; play ending sequence music
000051CE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000051D4 6700                       		beq.s	End_LoadSonic	; if not, branch
000051D6 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000051DC                            
000051DC                            End_LoadSonic:
000051DC 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000051E2 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000051E8 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000051EE 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000051F4 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000051FA 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005200 4EB9 0000 0000             		jsr	ObjPosLoad
00005206 4EB9 0000 0000             		jsr	ObjectsLoad
0000520C 4EB9 0000 0000             		jsr	BuildSprites
00005212 7000                       		moveq	#0,d0
00005214 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005218 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000521C 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005220 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005224 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005228 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000522C 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005230 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005234 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005238 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000523C 6100 EEDA                  		bsr.w	OscillateNumInit
00005240 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005246 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000524C 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005252 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005258 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000525E 6100 D748                  		bsr.w	DelayProgram
00005262 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005266 0000 0040                  		ori.b	#$40,d0
0000526A 33C0 00C0 0004             		move.w	d0,($C00004).l
00005270 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005276 6100 CB34                  		bsr.w	Pal_FadeTo
0000527A                            
0000527A                            ; ---------------------------------------------------------------------------
0000527A                            ; Main ending sequence loop
0000527A                            ; ---------------------------------------------------------------------------
0000527A                            
0000527A                            End_MainLoop:
0000527A 6100 C12C                  		bsr.w	PauseGame
0000527E 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005284 6100 D722                  		bsr.w	DelayProgram
00005288 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000528C 6100 0000                  		bsr.w	End_MoveSonic
00005290 4EB9 0000 0000             		jsr	ObjectsLoad
00005296 6100 0000                  		bsr.w	DeformBgLayer
0000529A 4EB9 0000 0000             		jsr	BuildSprites
000052A0 4EB9 0000 0000             		jsr	ObjPosLoad
000052A6 6100 C694                  		bsr.w	PalCycle_Load
000052AA 6100 EEC2                  		bsr.w	OscillateNumDo
000052AE 6100 EF4E                  		bsr.w	ChangeRingFrame
000052B2 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000052B8 6700                       		beq.s	loc_52DA	; if yes, branch
000052BA 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000052C0 103C 0091                  		move.b	#$91,d0
000052C4 6100 C0D6                  		bsr.w	PlaySound_Special ; play credits music
000052C8 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000052CE 4E75                       		rts	
000052D0                            ; ===========================================================================
000052D0                            
000052D0                            loc_52DA:
000052D0 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000052D4 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000052D8                            
000052D8 4278 FE02                  		clr.w	($FFFFFE02).w
000052DC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000052E2 4278 F794                  		clr.w	($FFFFF794).w
000052E6                            
000052E6                            End_AllEmlds:				; XREF: loc_5334
000052E6 6100 C0C0                  		bsr.w	PauseGame
000052EA 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000052F0 6100 D6B6                  		bsr.w	DelayProgram
000052F4 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000052F8 6100 0000                  		bsr.w	End_MoveSonic
000052FC 4EB9 0000 0000             		jsr	ObjectsLoad
00005302 6100 0000                  		bsr.w	DeformBgLayer
00005306 4EB9 0000 0000             		jsr	BuildSprites
0000530C 4EB9 0000 0000             		jsr	ObjPosLoad
00005312 6100 EE5A                  		bsr.w	OscillateNumDo
00005316 6100 EEE6                  		bsr.w	ChangeRingFrame
0000531A 5378 F794                  		subq.w	#1,($FFFFF794).w
0000531E 6A00                       		bpl.s	loc_5334
00005320 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005326 6100 CC74                  		bsr.w	Pal_ToWhite
0000532A                            
0000532A                            loc_5334:
0000532A 4A78 FE02                  		tst.w	($FFFFFE02).w
0000532E 6700 FFB6                  		beq.w	End_AllEmlds
00005332 4278 FE02                  		clr.w	($FFFFFE02).w
00005336 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000533C 4BF9 00C0 0004             		lea	($C00004).l,a5
00005342 4DF9 00C0 0000             		lea	($C00000).l,a6
00005348 47F8 F700                  		lea	($FFFFF700).w,a3
0000534C 49F8 A400                  		lea	($FFFFA400).w,a4
00005350 343C 4000                  		move.w	#$4000,d2
00005354 6100 0000                  		bsr.w	LoadTilesFromStart2
00005358 7013                       		moveq	#$13,d0
0000535A 6100 CDA0                  		bsr.w	PalLoad1	; load ending pallet
0000535E 6100 CB70                  		bsr.w	Pal_MakeWhite
00005362 6000 FF16                  		bra.w	End_MainLoop
00005366                            
00005366                            ; ---------------------------------------------------------------------------
00005366                            ; Subroutine controlling Sonic on the ending sequence
00005366                            ; ---------------------------------------------------------------------------
00005366                            
00005366                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005366                            
00005366                            
00005366                            End_MoveSonic:				; XREF: End_MainLoop
00005366 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
0000536A 6600                       		bne.s	End_MoveSonic2
0000536C 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005372 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005374 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005378 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000537E 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005384 4E75                       		rts	
00005386                            ; ===========================================================================
00005386                            
00005386                            End_MoveSonic2:				; XREF: End_MoveSonic
00005386 5500                       		subq.b	#2,d0
00005388 6600                       		bne.s	End_MoveSonic3
0000538A 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
00005390 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005392 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005396 7000                       		moveq	#0,d0
00005398 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000539C 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000053A0 31C0 D014                  		move.w	d0,($FFFFD014).w
000053A4 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000053AA 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000053B0 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000053B6 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000053BC 4E75                       		rts	
000053BE                            ; ===========================================================================
000053BE                            
000053BE                            End_MoveSonic3:				; XREF: End_MoveSonic
000053BE 5500                       		subq.b	#2,d0
000053C0 6600                       		bne.s	End_MoveSonExit
000053C2 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053C6 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000053CC 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000053D2 4278 D024                  		clr.w	($FFFFD024).w
000053D6                            
000053D6                            End_MoveSonExit:
000053D6 4E75                       		rts	
000053D8                            ; End of function End_MoveSonic
000053D8                            
000053D8                            ; ===========================================================================
000053D8                            ; ---------------------------------------------------------------------------
000053D8                            ; Object 87 - Sonic on ending sequence
000053D8                            ; ---------------------------------------------------------------------------
000053D8                            
000053D8                            Obj87:					; XREF: Obj_Index
000053D8 7000                       		moveq	#0,d0
000053DA 1028 0025                  		move.b	$25(a0),d0
000053DE 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000053E2 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000053E6 4EF9 0000 0000             		jmp	DisplaySprite
000053EC                            ; ===========================================================================
000053EC 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000053F0 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000053F4 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000053F8 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000053FC 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00005400                            ; ===========================================================================
00005400                            
00005400                            Obj87_Main:				; XREF: Obj87_Index
00005400 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005406 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005408 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000540E 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005414 4E75                       		rts	
00005416                            ; ===========================================================================
00005416                            
00005416                            Obj87_Main2:				; XREF: Obj87_Main
00005416 5428 0025                  		addq.b	#2,$25(a0)
0000541A 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005422 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005428 117C 0004 0001             		move.b	#4,1(a0)
0000542E 4228 0022                  		clr.b	$22(a0)
00005432 117C 0002 0018             		move.b	#2,$18(a0)
00005438 117C 0000 001A             		move.b	#0,$1A(a0)
0000543E 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005444                            
00005444                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005444 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005448 6600                       		bne.s	Obj87_Wait
0000544A 5428 0025                  		addq.b	#2,$25(a0)
0000544E 317C 0001 001C             		move.w	#1,$1C(a0)
00005454 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
0000545A                            
0000545A                            Obj87_Wait:
0000545A 4E75                       		rts	
0000545C                            ; ===========================================================================
0000545C                            
0000545C                            Obj87_LookUp:				; XREF: Obj87_Index
0000545C 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005464 6600                       		bne.s	locret_5480
00005466 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000546C 317C 005A 0030             		move.w	#$5A,$30(a0)
00005472 5428 0025                  		addq.b	#2,$25(a0)
00005476                            
00005476                            locret_5480:
00005476 4E75                       		rts	
00005478                            ; ===========================================================================
00005478                            
00005478                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005478 5368 0030                  		subq.w	#1,$30(a0)
0000547C 6600                       		bne.s	Obj87_Wait2
0000547E 43F8 D400                  		lea	($FFFFD400).w,a1
00005482 323C 00FF                  		move.w	#$FF,d1
00005486                            
00005486                            Obj87_ClrLoop:
00005486 4299                       		clr.l	(a1)+
00005488 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000548C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005492 5428 0025                  		addq.b	#2,$25(a0)
00005496 117C 0001 001C             		move.b	#1,$1C(a0)
0000549C 317C 003C 0030             		move.w	#$3C,$30(a0)
000054A2                            
000054A2                            Obj87_Wait2:
000054A2 4E75                       		rts	
000054A4                            ; ===========================================================================
000054A4                            
000054A4                            Obj87_MakeLogo:				; XREF: Obj87_Index
000054A4 5368 0030                  		subq.w	#1,$30(a0)
000054A8 6600                       		bne.s	Obj87_Wait3
000054AA 5428 0025                  		addq.b	#2,$25(a0)
000054AE 317C 00B4 0030             		move.w	#$B4,$30(a0)
000054B4 117C 0002 001C             		move.b	#2,$1C(a0)
000054BA 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000054C0                            
000054C0                            Obj87_Wait3:
000054C0 4E75                       		rts	
000054C2                            ; ===========================================================================
000054C2                            
000054C2                            Obj87_Animate:				; XREF: Obj87_Index
000054C2 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000054C8 4EF9 0000 0000             		jmp	AnimateSprite
000054CE                            ; ===========================================================================
000054CE                            
000054CE                            Obj87_Leap:				; XREF: Obj87_Index
000054CE 5368 0030                  		subq.w	#1,$30(a0)
000054D2 6600                       		bne.s	Obj87_Wait4
000054D4 5428 0025                  		addq.b	#2,$25(a0)
000054D8 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000054E0 317C 03E1 0002             		move.w	#$3E1,2(a0)
000054E6 117C 0004 0001             		move.b	#4,1(a0)
000054EC 4228 0022                  		clr.b	$22(a0)
000054F0 117C 0002 0018             		move.b	#2,$18(a0)
000054F6 117C 0005 001A             		move.b	#5,$1A(a0)
000054FC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005502 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005508 60B8                       		bra.s	Obj87_Animate
0000550A                            ; ===========================================================================
0000550A                            
0000550A                            Obj87_Wait4:				; XREF: Obj87_Leap
0000550A 4E75                       		rts	
0000550C                            ; ===========================================================================
0000550C                            Ani_obj87:
0000550C                            	include "_anim\obj87.asm"
0000550C                            ; ---------------------------------------------------------------------------
0000550C                            ; Animation script - Sonic on the ending sequence
0000550C                            ; ---------------------------------------------------------------------------
0000550C 0000                       		dc.w byte_551C-Ani_obj87
0000550E 0000                       		dc.w byte_552A-Ani_obj87
00005510 0000                       		dc.w byte_5534-Ani_obj87
00005512 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00005520 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
0000552A 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005532                            		even
00005532                            		even
00005532                            
00005532                            ; ===========================================================================
00005532                            ; ---------------------------------------------------------------------------
00005532                            ; Object 88 - chaos emeralds on	the ending sequence
00005532                            ; ---------------------------------------------------------------------------
00005532                            
00005532                            Obj88:					; XREF: Obj_Index
00005532 7000                       		moveq	#0,d0
00005534 1028 0024                  		move.b	$24(a0),d0
00005538 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000553C 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00005540 4EF9 0000 0000             		jmp	DisplaySprite
00005546                            ; ===========================================================================
00005546 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005548 0000                       		dc.w Obj88_Move-Obj88_Index
0000554A                            ; ===========================================================================
0000554A                            
0000554A                            Obj88_Main:				; XREF: Obj88_Index
0000554A 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00005550 6700                       		beq.s	Obj88_Main2
00005552 588F                       		addq.l	#4,sp
00005554 4E75                       		rts	
00005556                            ; ===========================================================================
00005556                            
00005556                            Obj88_Main2:				; XREF: Obj88_Main
00005556 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000555C 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005562 2248                       		movea.l	a0,a1
00005564 7600                       		moveq	#0,d3
00005566 7401                       		moveq	#1,d2
00005568 7205                       		moveq	#5,d1
0000556A                            
0000556A                            Obj88_MainLoop:
0000556A 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000556E 5429 0024                  		addq.b	#2,$24(a1)
00005572 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
0000557A 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005580 137C 0004 0001             		move.b	#4,1(a1)
00005586 137C 0001 0018             		move.b	#1,$18(a1)
0000558C 3368 0008 0038             		move.w	8(a0),$38(a1)
00005592 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005598 1342 001C                  		move.b	d2,$1C(a1)
0000559C 1342 001A                  		move.b	d2,$1A(a1)
000055A0 5202                       		addq.b	#1,d2
000055A2 1343 0026                  		move.b	d3,$26(a1)
000055A6 0603 002A                  		addi.b	#$2A,d3
000055AA 43E9 0040                  		lea	$40(a1),a1
000055AE 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000055B2                            
000055B2                            Obj88_Move:				; XREF: Obj88_Index
000055B2 3028 003E                  		move.w	$3E(a0),d0
000055B6 D168 0026                  		add.w	d0,$26(a0)
000055BA 1028 0026                  		move.b	$26(a0),d0
000055BE 4EB9 0000 29DA             		jsr	(CalcSine).l
000055C4 7800                       		moveq	#0,d4
000055C6 1828 003C                  		move.b	$3C(a0),d4
000055CA C3C4                       		muls.w	d4,d1
000055CC E081                       		asr.l	#8,d1
000055CE C1C4                       		muls.w	d4,d0
000055D0 E080                       		asr.l	#8,d0
000055D2 D268 0038                  		add.w	$38(a0),d1
000055D6 D068 003A                  		add.w	$3A(a0),d0
000055DA 3141 0008                  		move.w	d1,8(a0)
000055DE 3140 000C                  		move.w	d0,$C(a0)
000055E2 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000055E8 6700                       		beq.s	loc_55FA
000055EA 0668 0020 003C             		addi.w	#$20,$3C(a0)
000055F0                            
000055F0                            loc_55FA:
000055F0 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000055F6 6700                       		beq.s	loc_5608
000055F8 0668 0020 003E             		addi.w	#$20,$3E(a0)
000055FE                            
000055FE                            loc_5608:
000055FE 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005604 6700                       		beq.s	locret_5614
00005606 5368 003A                  		subq.w	#1,$3A(a0)
0000560A                            
0000560A                            locret_5614:
0000560A 4E75                       		rts	
0000560C                            ; ===========================================================================
0000560C                            ; ---------------------------------------------------------------------------
0000560C                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000560C                            ; ---------------------------------------------------------------------------
0000560C                            
0000560C                            Obj89:					; XREF: Obj_Index
0000560C 7000                       		moveq	#0,d0
0000560E 1028 0024                  		move.b	$24(a0),d0
00005612 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005616 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
0000561A                            ; ===========================================================================
0000561A 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000561C 0000                       		dc.w Obj89_Move-Obj89_Index
0000561E 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00005620                            ; ===========================================================================
00005620                            
00005620                            Obj89_Main:				; XREF: Obj89_Index
00005620 5428 0024                  		addq.b	#2,$24(a0)
00005624 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
0000562A 317C 00D8 000A             		move.w	#$D8,$A(a0)
00005630 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005638 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000563E 117C 0000 0001             		move.b	#0,1(a0)
00005644 117C 0000 0018             		move.b	#0,$18(a0)
0000564A                            
0000564A                            Obj89_Move:				; XREF: Obj89_Index
0000564A 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00005650 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005652 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005658 4EB9 0000 0000             		jsr	DisplaySprite
0000565E                            ; ===========================================================================
0000565E                            
0000565E                            Obj89_Delay:				; XREF: Obj89_Move
0000565E 5428 0024                  		addq.b	#2,$24(a0)
00005662 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005668                            
00005668                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005668 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
0000566C 6A00                       		bpl.s	Obj89_Display
0000566E 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005674                            
00005674                            Obj89_Display:
00005674 4EB9 0000 0000             		jsr	DisplaySprite
0000567A                            ; ===========================================================================
0000567A                            ; ---------------------------------------------------------------------------
0000567A                            ; Sprite mappings - Sonic on the ending	sequence
0000567A                            ; ---------------------------------------------------------------------------
0000567A                            Map_obj87:
0000567A                            	include "_maps\obj87.asm"
0000567A                            ; ---------------------------------------------------------------------------
0000567A                            ; Sprite mappings - Sonic on the ending	sequence
0000567A                            ; ---------------------------------------------------------------------------
0000567A 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
0000567E 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
00005682 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005686 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
0000568A 02                         byte_5690:	dc.b 2
0000568B EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
00005690 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
00005695 03                         byte_569B:	dc.b 3
00005696 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
0000569B EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000056A0 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000056A5 02                         byte_56AB:	dc.b 2
000056A6 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000056AB FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000056B0 02                         byte_56B6:	dc.b 2
000056B1 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000056B6 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000056BB 02                         byte_56C1:	dc.b 2
000056BC EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000056C1 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000056C6 03                         byte_56CC:	dc.b 3
000056C7 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000056CC EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000056D1 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000056D6 07                         byte_56DC:	dc.b 7
000056D7 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000056DC BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000056E1 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000056E6 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000056EB DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000056F0 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000056F5 EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000056FA 18                         byte_5700:	dc.b $18
000056FB 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00005700 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
00005705 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
0000570A 980B 0098 30               		dc.b $98, $B, 0, $98, $30
0000570F A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
00005714 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005719 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
0000571E A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
00005723 B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005728 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
0000572D A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
00005732 C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005737 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
0000573C B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00005741 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005746 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
0000574B D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00005750 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
00005755 E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
0000575A E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
0000575F D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
00005764 E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005769 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
0000576E F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
00005774 00                         		even
00005774 00                         		even
00005774                            
00005774                            ; ---------------------------------------------------------------------------
00005774                            ; Sprite mappings - chaos emeralds on the ending sequence
00005774                            ; ---------------------------------------------------------------------------
00005774                            Map_obj88:
00005774                            	include "_maps\obj88.asm"
00005774                            ; ---------------------------------------------------------------------------
00005774                            ; Sprite mappings - chaos emeralds on the ending sequence
00005774                            ; ---------------------------------------------------------------------------
00005774 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005778 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
0000577C 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
00005780 0000                       		dc.w byte_57AC-Map_obj88
00005782 01                         byte_5788:	dc.b 1
00005783 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005788 01                         byte_578E:	dc.b 1
00005789 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000578E 01                         byte_5794:	dc.b 1
0000578F F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
00005794 01                         byte_579A:	dc.b 1
00005795 F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
0000579A 01                         byte_57A0:	dc.b 1
0000579B F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000057A0 01                         byte_57A6:	dc.b 1
000057A1 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000057A6 01                         byte_57AC:	dc.b 1
000057A7 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000057AC                            		even
000057AC                            		even
000057AC                            
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            Map_obj89:
000057AC                            	include "_maps\obj89.asm"
000057AC                            ; ---------------------------------------------------------------------------
000057AC                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057AC                            ; ---------------------------------------------------------------------------
000057AC 0000                       		dc.w byte_57B4-Map_obj89
000057AE 03                         byte_57B4:	dc.b 3
000057AF F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000057B4 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000057B9 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000057BE                            		even
000057BE                            		even
000057BE                            
000057BE                            ; ===========================================================================
000057BE                            ; ---------------------------------------------------------------------------
000057BE                            ; Credits ending sequence
000057BE                            ; ---------------------------------------------------------------------------
000057BE                            
000057BE                            Credits:				; XREF: GameModeArray
000057BE 6100 BE1E                  		bsr.w	ClearPLC
000057C2 6100 C68E                  		bsr.w	Pal_FadeFrom
000057C6 4DF9 00C0 0004             		lea	($C00004).l,a6
000057CC 3CBC 8004                  		move.w	#$8004,(a6)
000057D0 3CBC 8230                  		move.w	#$8230,(a6)
000057D4 3CBC 8407                  		move.w	#$8407,(a6)
000057D8 3CBC 9001                  		move.w	#$9001,(a6)
000057DC 3CBC 9200                  		move.w	#$9200,(a6)
000057E0 3CBC 8B03                  		move.w	#$8B03,(a6)
000057E4 3CBC 8720                  		move.w	#$8720,(a6)
000057E8 4238 F64E                  		clr.b	($FFFFF64E).w
000057EC 6100 BAD6                  		bsr.w	ClearScreen
000057F0 43F8 D000                  		lea	($FFFFD000).w,a1
000057F4 7000                       		moveq	#0,d0
000057F6 323C 07FF                  		move.w	#$7FF,d1
000057FA                            
000057FA                            Cred_ClrObjRam:
000057FA 22C0                       		move.l	d0,(a1)+
000057FC 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00005800                            
00005800 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
0000580A 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00005810 6100 BC2E                  		bsr.w	NemDec
00005814 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005818 7000                       		moveq	#0,d0
0000581A 323C 001F                  		move.w	#$1F,d1
0000581E                            
0000581E                            Cred_ClrPallet:
0000581E 22C0                       		move.l	d0,(a1)+
00005820 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
00005824                            
00005824 7003                       		moveq	#3,d0
00005826 6100 C8D4                  		bsr.w	PalLoad1	; load Sonic's pallet
0000582A 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00005830 4EB9 0000 0000             		jsr	ObjectsLoad
00005836 4EB9 0000 0000             		jsr	BuildSprites
0000583C 6100 0000                  		bsr.w	EndingDemoLoad
00005840 7000                       		moveq	#0,d0
00005842 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005846 E948                       		lsl.w	#4,d0
00005848 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
0000584E 45F2 0000                  		lea	(a2,d0.w),a2
00005852 7000                       		moveq	#0,d0
00005854 1012                       		move.b	(a2),d0
00005856 6700                       		beq.s	loc_5862
00005858 6100 BD26                  		bsr.w	LoadPLC		; load level patterns
0000585C                            
0000585C                            loc_5862:
0000585C 7001                       		moveq	#1,d0
0000585E 6100 BD20                  		bsr.w	LoadPLC		; load standard	level patterns
00005862 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005868 6100 C542                  		bsr.w	Pal_FadeTo
0000586C                            
0000586C                            Cred_WaitLoop:
0000586C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00005872 6100 D134                  		bsr.w	DelayProgram
00005876 6100 BD74                  		bsr.w	RunPLC_RAM
0000587A 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
0000587E 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
00005880 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
00005884 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005886 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
0000588C 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
00005890 4E75                       		rts	
00005892                            
00005892                            ; ---------------------------------------------------------------------------
00005892                            ; Ending sequence demo loading subroutine
00005892                            ; ---------------------------------------------------------------------------
00005892                            
00005892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005892                            
00005892                            
00005892                            EndingDemoLoad:				; XREF: Credits
00005892 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005896 0240 000F                  		andi.w	#$F,d0
0000589A D040                       		add.w	d0,d0
0000589C 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000058A0 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000058A4 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000058A8 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000058AE 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000058B0 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000058B6 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000058BC 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000058C2 7000                       		moveq	#0,d0
000058C4 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000058C8 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000058CC 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000058D0 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000058D4 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000058DA 6600                       		bne.s	EndDemo_Exit	; if not, branch
000058DC 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000058E2 45F8 FE30                  		lea	($FFFFFE30).w,a2
000058E6 303C 0008                  		move.w	#8,d0
000058EA                            
000058EA                            EndDemo_LampLoad:
000058EA 24D9                       		move.l	(a1)+,(a2)+
000058EC 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
000058F0                            
000058F0                            EndDemo_Exit:
000058F0 4E75                       		rts	
000058F2                            ; End of function EndingDemoLoad
000058F2                            
000058F2                            ; ===========================================================================
000058F2                            ; ---------------------------------------------------------------------------
000058F2                            ; Levels used in the end sequence demos
000058F2                            ; ---------------------------------------------------------------------------
000058F2                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
00005902                            
00005902                            ; ---------------------------------------------------------------------------
00005902                            ; Lamppost variables in the end sequence demo (Star Light Zone)
00005902                            ; ---------------------------------------------------------------------------
00005902                            EndDemo_LampVar:
00005902 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
00005904 0A00 062C 000D             		dc.w $A00, $62C, $D
0000590A 0000 0000                  		dc.l 0
0000590E 0000                       		dc.b 0,	0
00005910 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
00005924 0101                       		dc.b 1,	1
00005926                            ; ===========================================================================
00005926                            ; ---------------------------------------------------------------------------
00005926                            ; "TRY AGAIN" and "END"	screens
00005926                            ; ---------------------------------------------------------------------------
00005926                            
00005926                            TryAgainEnd:				; XREF: Credits
00005926 6100 BCB6                  		bsr.w	ClearPLC
0000592A 6100 C526                  		bsr.w	Pal_FadeFrom
0000592E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005934 3CBC 8004                  		move.w	#$8004,(a6)
00005938 3CBC 8230                  		move.w	#$8230,(a6)
0000593C 3CBC 8407                  		move.w	#$8407,(a6)
00005940 3CBC 9001                  		move.w	#$9001,(a6)
00005944 3CBC 9200                  		move.w	#$9200,(a6)
00005948 3CBC 8B03                  		move.w	#$8B03,(a6)
0000594C 3CBC 8720                  		move.w	#$8720,(a6)
00005950 4238 F64E                  		clr.b	($FFFFF64E).w
00005954 6100 B96E                  		bsr.w	ClearScreen
00005958 43F8 D000                  		lea	($FFFFD000).w,a1
0000595C 7000                       		moveq	#0,d0
0000595E 323C 07FF                  		move.w	#$7FF,d1
00005962                            
00005962                            TryAg_ClrObjRam:
00005962 22C0                       		move.l	d0,(a1)+
00005964 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005968                            
00005968 701D                       		moveq	#$1D,d0
0000596A 6100 BD80                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
0000596E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005972 7000                       		moveq	#0,d0
00005974 323C 001F                  		move.w	#$1F,d1
00005978                            
00005978                            TryAg_ClrPallet:
00005978 22C0                       		move.l	d0,(a1)+
0000597A 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
0000597E                            
0000597E 7013                       		moveq	#$13,d0
00005980 6100 C77A                  		bsr.w	PalLoad1	; load ending pallet
00005984 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005988 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
0000598E 4EB9 0000 0000             		jsr	ObjectsLoad
00005994 4EB9 0000 0000             		jsr	BuildSprites
0000599A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000059A0 6100 C40A                  		bsr.w	Pal_FadeTo
000059A4                            
000059A4                            ; ---------------------------------------------------------------------------
000059A4                            ; "TRY AGAIN" and "END"	screen main loop
000059A4                            ; ---------------------------------------------------------------------------
000059A4                            TryAg_MainLoop:
000059A4 6100 BA02                  		bsr.w	PauseGame
000059A8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000059AE 6100 CFF8                  		bsr.w	DelayProgram
000059B2 4EB9 0000 0000             		jsr	ObjectsLoad
000059B8 4EB9 0000 0000             		jsr	BuildSprites
000059BE 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000059C4 6600                       		bne.s	TryAg_Exit	; if yes, branch
000059C6 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000059CA 6700                       		beq.s	TryAg_Exit	; if yes, branch
000059CC 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000059D2 67D0                       		beq.s	TryAg_MainLoop
000059D4                            
000059D4                            TryAg_Exit:
000059D4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000059DA 4E75                       		rts	
000059DC                            
000059DC                            ; ===========================================================================
000059DC                            ; ---------------------------------------------------------------------------
000059DC                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000059DC                            ; ---------------------------------------------------------------------------
000059DC                            
000059DC                            Obj8B:					; XREF: Obj_Index
000059DC 7000                       		moveq	#0,d0
000059DE 1028 0024                  		move.b	$24(a0),d0
000059E2 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
000059E6 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
000059EA 4EF9 0000 0000             		jmp	DisplaySprite
000059F0                            ; ===========================================================================
000059F0 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
000059F2 0000                       		dc.w Obj8B_Animate-Obj8B_Index
000059F4 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
000059F6 0000                       		dc.w loc_5A8E-Obj8B_Index
000059F8                            ; ===========================================================================
000059F8                            
000059F8                            Obj8B_Main:				; XREF: Obj8B_Index
000059F8 5428 0024                  		addq.b	#2,$24(a0)
000059FC 317C 0120 0008             		move.w	#$120,8(a0)
00005A02 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005A08 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005A10 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A16 117C 0000 0001             		move.b	#0,1(a0)
00005A1C 117C 0002 0018             		move.b	#2,$18(a0)
00005A22 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005A28 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A2E 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005A30 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005A36 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005A3C 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005A42 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005A48                            
00005A48                            Obj8B_Animate:				; XREF: Obj8B_Index
00005A48 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005A4E 4EF9 0000 0000             		jmp	AnimateSprite
00005A54                            ; ===========================================================================
00005A54                            
00005A54                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005A54 5428 0024                  		addq.b	#2,$24(a0)
00005A58 7002                       		moveq	#2,d0
00005A5A 0828 0000 001C             		btst	#0,$1C(a0)
00005A60 6700                       		beq.s	loc_5A6A
00005A62 4440                       		neg.w	d0
00005A64                            
00005A64                            loc_5A6A:
00005A64 43F8 D800                  		lea	($FFFFD800).w,a1
00005A68 7205                       		moveq	#5,d1
00005A6A                            
00005A6A                            loc_5A70:
00005A6A 1340 003E                  		move.b	d0,$3E(a1)
00005A6E 3400                       		move.w	d0,d2
00005A70 E742                       		asl.w	#3,d2
00005A72 D529 0026                  		add.b	d2,$26(a1)
00005A76 43E9 0040                  		lea	$40(a1),a1
00005A7A 51C9 FFEE                  		dbf	d1,loc_5A70
00005A7E 5228 001A                  		addq.b	#1,$1A(a0)
00005A82 317C 0070 0030             		move.w	#112,$30(a0)
00005A88                            
00005A88                            loc_5A8E:				; XREF: Obj8B_Index
00005A88 5368 0030                  		subq.w	#1,$30(a0)
00005A8C 6A00                       		bpl.s	locret_5AA0
00005A8E 0868 0000 001C             		bchg	#0,$1C(a0)
00005A94 117C 0002 0024             		move.b	#2,$24(a0)
00005A9A                            
00005A9A                            locret_5AA0:
00005A9A 4E75                       		rts	
00005A9C                            ; ===========================================================================
00005A9C                            Ani_obj8B:
00005A9C                            	include "_anim\obj8B.asm"
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005A9C                            ; ---------------------------------------------------------------------------
00005A9C 0000                       		dc.w byte_5AA8-Ani_obj8B
00005A9E 0000                       		dc.w byte_5AAC-Ani_obj8B
00005AA0 0000                       		dc.w byte_5AB0-Ani_obj8B
00005AA2 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005AA6 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005AAA 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005ABC                            		even
00005ABC                            		even
00005ABC                            
00005ABC                            ; ===========================================================================
00005ABC                            ; ---------------------------------------------------------------------------
00005ABC                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005ABC                            ; ---------------------------------------------------------------------------
00005ABC                            
00005ABC                            Obj8C:					; XREF: Obj_Index
00005ABC 7000                       		moveq	#0,d0
00005ABE 1028 0024                  		move.b	$24(a0),d0
00005AC2 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005AC6 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005ACA 4EF9 0000 0000             		jmp	DisplaySprite
00005AD0                            ; ===========================================================================
00005AD0 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005AD2 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005AD4                            ; ===========================================================================
00005AD4                            
00005AD4                            Obj8C_Main:				; XREF: Obj8C_Index
00005AD4 2248                       		movea.l	a0,a1
00005AD6 7400                       		moveq	#0,d2
00005AD8 7600                       		moveq	#0,d3
00005ADA 7205                       		moveq	#5,d1
00005ADC 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005AE0                            
00005AE0                            Obj8C_MakeEms:				; XREF: loc_5B42
00005AE0 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005AE4 5429 0024                  		addq.b	#2,$24(a1)
00005AE8 237C 0000 5774 0004        		move.l	#Map_obj88,4(a1)
00005AF0 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005AF6 137C 0000 0001             		move.b	#0,1(a1)
00005AFC 137C 0001 0018             		move.b	#1,$18(a1)
00005B02 337C 0104 0008             		move.w	#$104,8(a1)
00005B08 337C 0120 0038             		move.w	#$120,$38(a1)
00005B0E 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005B14 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005B1A 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005B20 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005B24                            
00005B24                            Obj8C_ChkEms:
00005B24 7000                       		moveq	#0,d0
00005B26 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005B2A 5340                       		subq.w	#1,d0
00005B2C 6500                       		bcs.s	loc_5B42
00005B2E                            
00005B2E                            Obj8C_ChkEmLoop:
00005B2E B433 0000                  		cmp.b	(a3,d0.w),d2
00005B32 6600                       		bne.s	loc_5B3E
00005B34 5202                       		addq.b	#1,d2
00005B36 60EC                       		bra.s	Obj8C_ChkEms
00005B38                            ; ===========================================================================
00005B38                            
00005B38                            loc_5B3E:
00005B38 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005B3C                            
00005B3C                            loc_5B42:
00005B3C 1342 001A                  		move.b	d2,$1A(a1)
00005B40 5229 001A                  		addq.b	#1,$1A(a1)
00005B44 5202                       		addq.b	#1,d2
00005B46 137C 0080 0026             		move.b	#$80,$26(a1)
00005B4C 1343 001E                  		move.b	d3,$1E(a1)
00005B50 1343 001F                  		move.b	d3,$1F(a1)
00005B54 0643 000A                  		addi.w	#$A,d3
00005B58 43E9 0040                  		lea	$40(a1),a1
00005B5C 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005B60                            
00005B60                            Obj8C_Move:				; XREF: Obj8C_Index
00005B60 4A68 003E                  		tst.w	$3E(a0)
00005B64 6700                       		beq.s	locret_5BBA
00005B66 4A28 001E                  		tst.b	$1E(a0)
00005B6A 6700                       		beq.s	loc_5B78
00005B6C 5328 001E                  		subq.b	#1,$1E(a0)
00005B70 6600                       		bne.s	loc_5B80
00005B72                            
00005B72                            loc_5B78:
00005B72 3028 003E                  		move.w	$3E(a0),d0
00005B76 D168 0026                  		add.w	d0,$26(a0)
00005B7A                            
00005B7A                            loc_5B80:
00005B7A 1028 0026                  		move.b	$26(a0),d0
00005B7E 6700                       		beq.s	loc_5B8C
00005B80 0C00 0080                  		cmpi.b	#$80,d0
00005B84 6600                       		bne.s	loc_5B96
00005B86                            
00005B86                            loc_5B8C:
00005B86 4268 003E                  		clr.w	$3E(a0)
00005B8A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005B90                            
00005B90                            loc_5B96:
00005B90 4EB9 0000 29DA             		jsr	(CalcSine).l
00005B96 7800                       		moveq	#0,d4
00005B98 1828 003C                  		move.b	$3C(a0),d4
00005B9C C3C4                       		muls.w	d4,d1
00005B9E E081                       		asr.l	#8,d1
00005BA0 C1C4                       		muls.w	d4,d0
00005BA2 E080                       		asr.l	#8,d0
00005BA4 D268 0038                  		add.w	$38(a0),d1
00005BA8 D068 003A                  		add.w	$3A(a0),d0
00005BAC 3141 0008                  		move.w	d1,8(a0)
00005BB0 3140 000A                  		move.w	d0,$A(a0)
00005BB4                            
00005BB4                            locret_5BBA:
00005BB4 4E75                       		rts	
00005BB6                            ; ===========================================================================
00005BB6                            ; ---------------------------------------------------------------------------
00005BB6                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005BB6                            ; ---------------------------------------------------------------------------
00005BB6                            Map_obj8B:
00005BB6                            	include "_maps\obj8B.asm"
00005BB6                            ; ---------------------------------------------------------------------------
00005BB6                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005BB6                            ; ---------------------------------------------------------------------------
00005BB6 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005BBA 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005BBE 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005BC2 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005BC6 08                         byte_5BCC:	dc.b 8
00005BC7 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005BCC F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005BD1 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005BD6 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005BDB 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005BE0 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005BE5 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005BEA 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005BEF 08                         byte_5BF5:	dc.b 8
00005BF0 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005BF5 F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005BFA E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005BFF F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005C04 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C09 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C0E 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C13 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C18 08                         byte_5C1E:	dc.b 8
00005C19 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005C1E F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005C23 E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005C28 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005C2D 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C32 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C37 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C3C 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C41 08                         byte_5C47:	dc.b 8
00005C42 E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005C47 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005C4C E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005C51 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005C56 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C5B 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C60 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C65 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C6A 0C                         byte_5C70:	dc.b $C
00005C6B ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005C70 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005C75 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005C7A 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005C7F ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005C84 F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005C89 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005C8E 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005C93 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005C98 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005C9D 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005CA2 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005CA7 0A                         byte_5CAD:	dc.b $A
00005CA8 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005CAD DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005CB2 F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005CB7 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005CBC DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005CC1 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005CC6 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CCB 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005CD0 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005CD5 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005CDA 0A                         byte_5CE0:	dc.b $A
00005CDB C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005CE0 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005CE5 EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005CEA C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005CEF E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005CF4 EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005CF9 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CFE 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005D03 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005D08 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005D0D 0C                         byte_5D13:	dc.b $C
00005D0E F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005D13 FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005D18 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005D1D 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005D22 F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005D27 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005D2C 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005D31 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005D36 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005D3B 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005D40 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005D45 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005D4A                            		even
00005D4A                            		even
00005D4A                            
00005D4A                            ; ---------------------------------------------------------------------------
00005D4A                            ; Ending sequence demos
00005D4A                            ; ---------------------------------------------------------------------------
00005D4A                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005D78                            		even
00005D78                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005DB8                            		even
00005DB8                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005DE8                            		even
00005DE8                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00005E18                            		even
00005E18                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00005E38                            		even
00005E38                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00005E58                            		even
00005E58                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00005E88                            		even
00005E88                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00005EB8                            		even
00005EB8                            
00005EB8                            ; ---------------------------------------------------------------------------
00005EB8                            ; Subroutine to	load level boundaries and start	locations
00005EB8                            ; ---------------------------------------------------------------------------
00005EB8                            
00005EB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EB8                            
00005EB8                            
00005EB8                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00005EB8 7000                       		moveq	#0,d0
00005EBA 11C0 F740                  		move.b	d0,($FFFFF740).w
00005EBE 11C0 F741                  		move.b	d0,($FFFFF741).w
00005EC2 11C0 F746                  		move.b	d0,($FFFFF746).w
00005EC6 11C0 F748                  		move.b	d0,($FFFFF748).w
00005ECA 11C0 F742                  		move.b	d0,($FFFFF742).w
00005ECE 3038 FE10                  		move.w	($FFFFFE10).w,d0
00005ED2 ED08                       		lsl.b	#6,d0
00005ED4 E848                       		lsr.w	#4,d0
00005ED6 3200                       		move.w	d0,d1
00005ED8 D040                       		add.w	d0,d0
00005EDA D041                       		add.w	d1,d0
00005EDC 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00005EE0 3018                       		move.w	(a0)+,d0
00005EE2 31C0 F730                  		move.w	d0,($FFFFF730).w
00005EE6 2018                       		move.l	(a0)+,d0
00005EE8 21C0 F728                  		move.l	d0,($FFFFF728).w
00005EEC 21C0 F720                  		move.l	d0,($FFFFF720).w
00005EF0 2018                       		move.l	(a0)+,d0
00005EF2 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00005EF6 21C0 F724                  		move.l	d0,($FFFFF724).w
00005EFA 3038 F728                  		move.w	($FFFFF728).w,d0
00005EFE 0640 0240                  		addi.w	#$240,d0
00005F02 31C0 F732                  		move.w	d0,($FFFFF732).w
00005F06 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00005F0C 3018                       		move.w	(a0)+,d0
00005F0E 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00005F12 6000 0000                  		bra.w	LevSz_ChkLamp
00005F16                            ; ===========================================================================
00005F16                            ; ---------------------------------------------------------------------------
00005F16                            ; Level size array and ending start location array
00005F16                            ; ---------------------------------------------------------------------------
00005F16                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006066                            		even
00006066                            
00006066                            EndingStLocArray:
00006066                            		incbin	misc\sloc_end.bin
00006086                            		even
00006086                            
00006086                            ; ===========================================================================
00006086                            
00006086                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006086 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
0000608A 6700                       		beq.s	LevSz_StartLoc	; if not, branch
0000608C 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006092 3238 D008                  		move.w	($FFFFD008).w,d1
00006096 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000609A 6000                       		bra.s	loc_60D0
0000609C                            ; ===========================================================================
0000609C                            
0000609C                            LevSz_StartLoc:				; XREF: LevelSizeLoad
0000609C 3038 FE10                  		move.w	($FFFFFE10).w,d0
000060A0 ED08                       		lsl.b	#6,d0
000060A2 E848                       		lsr.w	#4,d0
000060A4 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000060A8 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000060AC 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000060AE 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000060B2 5340                       		subq.w	#1,d0
000060B4 E548                       		lsl.w	#2,d0
000060B6 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000060BA                            
000060BA                            LevSz_SonicPos:
000060BA 7200                       		moveq	#0,d1
000060BC 3219                       		move.w	(a1)+,d1
000060BE 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000060C2 7000                       		moveq	#0,d0
000060C4 3011                       		move.w	(a1),d0
000060C6 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000060CA                            
000060CA                            loc_60D0:				; XREF: LevSz_ChkLamp
000060CA 0441 00A0                  		subi.w	#$A0,d1
000060CE 6400                       		bcc.s	loc_60D8
000060D0 7200                       		moveq	#0,d1
000060D2                            
000060D2                            loc_60D8:
000060D2 3438 F72A                  		move.w	($FFFFF72A).w,d2
000060D6 B242                       		cmp.w	d2,d1
000060D8 6500                       		bcs.s	loc_60E2
000060DA 3202                       		move.w	d2,d1
000060DC                            
000060DC                            loc_60E2:
000060DC 31C1 F700                  		move.w	d1,($FFFFF700).w
000060E0 0440 0060                  		subi.w	#$60,d0
000060E4 6400                       		bcc.s	loc_60EE
000060E6 7000                       		moveq	#0,d0
000060E8                            
000060E8                            loc_60EE:
000060E8 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000060EC 6D00                       		blt.s	loc_60F8
000060EE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000060F2                            
000060F2                            loc_60F8:
000060F2 31C0 F704                  		move.w	d0,($FFFFF704).w
000060F6 6100 0000                  		bsr.w	BgScrollSpeed
000060FA 7000                       		moveq	#0,d0
000060FC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006100 E508                       		lsl.b	#2,d0
00006102 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006108 6000 0000                  		bra.w	LevSz_Unk
0000610C                            ; ===========================================================================
0000610C                            ; ---------------------------------------------------------------------------
0000610C                            ; Sonic	start location array
0000610C                            ; ---------------------------------------------------------------------------
0000610C                            StartLocArray:	incbin	misc\sloc_lev.bin
0000617C                            		even
0000617C                            
0000617C                            ; ---------------------------------------------------------------------------
0000617C                            ; Which	256x256	tiles contain loops or roll-tunnels
0000617C                            ; ---------------------------------------------------------------------------
0000617C                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
0000617C                            ; loop,	loop, tunnel, tunnel
0000617C                            ; ---------------------------------------------------------------------------
0000617C                            LoopTileNums:	incbin	misc\loopnums.bin
00006198                            		even
00006198                            
00006198                            ; ===========================================================================
00006198                            
00006198                            LevSz_Unk:				; XREF: LevelSizeLoad
00006198 7000                       		moveq	#0,d0
0000619A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000619E E748                       		lsl.w	#3,d0
000061A0 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
000061A4 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000061A8 24D9                       		move.l	(a1)+,(a2)+
000061AA 24D9                       		move.l	(a1)+,(a2)+
000061AC 4E75                       		rts	
000061AE                            ; End of function LevelSizeLoad
000061AE                            
000061AE                            ; ===========================================================================
000061AE 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000061B6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061BE 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061C6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061CE 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061D6 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061DE 0070 0100 0100 0100        		dc.l $700100, $1000100
000061E6                            
000061E6                            ; ---------------------------------------------------------------------------
000061E6                            ; Subroutine to	set scroll speed of some backgrounds
000061E6                            ; ---------------------------------------------------------------------------
000061E6                            
000061E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000061E6                            
000061E6                            
000061E6                            BgScrollSpeed:				; XREF: LevelSizeLoad
000061E6 4A38 FE30                  		tst.b	($FFFFFE30).w
000061EA 6600                       		bne.s	loc_6206
000061EC 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000061F0 31C0 F714                  		move.w	d0,($FFFFF714).w
000061F4 31C1 F708                  		move.w	d1,($FFFFF708).w
000061F8 31C1 F710                  		move.w	d1,($FFFFF710).w
000061FC 31C1 F718                  		move.w	d1,($FFFFF718).w
00006200                            
00006200                            loc_6206:
00006200 7400                       		moveq	#0,d2
00006202 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006206 D442                       		add.w	d2,d2
00006208 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
0000620C 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006210                            ; End of function BgScrollSpeed
00006210                            
00006210                            ; ===========================================================================
00006210 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006214 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006218 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
0000621C 0000                       		dc.w BgScroll_End-BgScroll_Index
0000621E                            ; ===========================================================================
0000621E                            
0000621E                            BgScroll_GHZ:				; XREF: BgScroll_Index
0000621E 6000 0000                  		bra.w	Deform_GHZ
00006222                            ; ===========================================================================
00006222                            
00006222                            BgScroll_LZ:				; XREF: BgScroll_Index
00006222 E280                       		asr.l	#1,d0
00006224 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006228 4E75                       		rts	
0000622A                            ; ===========================================================================
0000622A                            
0000622A                            BgScroll_MZ:				; XREF: BgScroll_Index
0000622A 4E75                       		rts	
0000622C                            ; ===========================================================================
0000622C                            
0000622C                            BgScroll_SLZ:				; XREF: BgScroll_Index
0000622C E280                       		asr.l	#1,d0
0000622E 0640 00C0                  		addi.w	#$C0,d0
00006232 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006236 4E75                       		rts	
00006238                            ; ===========================================================================
00006238                            
00006238                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006238 E980                       		asl.l	#4,d0
0000623A 2400                       		move.l	d0,d2
0000623C E380                       		asl.l	#1,d0
0000623E D082                       		add.l	d2,d0
00006240 E080                       		asr.l	#8,d0
00006242 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006246 31C0 F714                  		move.w	d0,($FFFFF714).w
0000624A 4E75                       		rts	
0000624C                            ; ===========================================================================
0000624C                            
0000624C                            BgScroll_SBZ:				; XREF: BgScroll_Index
0000624C E980                       		asl.l	#4,d0
0000624E E380                       		asl.l	#1,d0
00006250 E080                       		asr.l	#8,d0
00006252 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006256 4E75                       		rts	
00006258                            ; ===========================================================================
00006258                            
00006258                            BgScroll_End:				; XREF: BgScroll_Index
00006258 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000625E 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006264 4E75                       		rts	
00006266                            ; ===========================================================================
00006266 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
0000626C 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006272 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006278 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000627E 4E75                       		rts
00006280                            
00006280                            ; ---------------------------------------------------------------------------
00006280                            ; Background layer deformation subroutines
00006280                            ; ---------------------------------------------------------------------------
00006280                            
00006280                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006280                            
00006280                            
00006280                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00006280 4A38 F744                  		tst.b	($FFFFF744).w
00006284 6700                       		beq.s	loc_628E
00006286 4E75                       		rts	
00006288                            ; ===========================================================================
00006288                            
00006288                            loc_628E:
00006288 4278 F754                  		clr.w	($FFFFF754).w
0000628C 4278 F756                  		clr.w	($FFFFF756).w
00006290 4278 F758                  		clr.w	($FFFFF758).w
00006294 4278 F75A                  		clr.w	($FFFFF75A).w
00006298 6100 0000                  		bsr.w	ScrollHoriz
0000629C 6100 0000                  		bsr.w	ScrollVertical
000062A0 6100 0000                  		bsr.w	DynScrResizeLoad
000062A4 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000062AA 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000062B0 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000062B6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000062BC 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000062C2 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000062C8 7000                       		moveq	#0,d0
000062CA 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062CE D040                       		add.w	d0,d0
000062D0 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000062D4 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000062D8                            ; End of function DeformBgLayer
000062D8                            
000062D8                            ; ===========================================================================
000062D8                            ; ---------------------------------------------------------------------------
000062D8                            ; Offset index for background layer deformation	code
000062D8                            ; ---------------------------------------------------------------------------
000062D8 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000062DC 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000062E0 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000062E4 0000                       		dc.w Deform_GHZ-Deform_Index
000062E6                            ; ---------------------------------------------------------------------------
000062E6                            ; Green	Hill Zone background layer deformation code
000062E6                            ; ---------------------------------------------------------------------------
000062E6                            
000062E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062E6                            
000062E6                            
000062E6                            Deform_GHZ:				; XREF: Deform_Index
000062E6 3838 F73A                  		move.w	($FFFFF73A).w,d4
000062EA 48C4                       		ext.l	d4
000062EC EB84                       		asl.l	#5,d4
000062EE 2204                       		move.l	d4,d1
000062F0 E384                       		asl.l	#1,d4
000062F2 D881                       		add.l	d1,d4
000062F4 7A00                       		moveq	#0,d5
000062F6 6100 0000                  		bsr.w	ScrollBlock1
000062FA 6100 0000                  		bsr.w	ScrollBlock4
000062FE 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006302 3038 F704                  		move.w	($FFFFF704).w,d0
00006306 0240 07FF                  		andi.w	#$7FF,d0
0000630A EA48                       		lsr.w	#5,d0
0000630C 4440                       		neg.w	d0
0000630E 0640 0026                  		addi.w	#$26,d0
00006312 31C0 F714                  		move.w	d0,($FFFFF714).w
00006316 3800                       		move.w	d0,d4
00006318 6100 0000                  		bsr.w	ScrollBlock3
0000631C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006322 323C 006F                  		move.w	#$6F,d1
00006326 9244                       		sub.w	d4,d1
00006328 3038 F700                  		move.w	($FFFFF700).w,d0
0000632C 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
00006332 6600                       		bne.s	loc_633C
00006334 7000                       		moveq	#0,d0
00006336                            
00006336                            loc_633C:
00006336 4440                       		neg.w	d0
00006338 4840                       		swap	d0
0000633A 3038 F708                  		move.w	($FFFFF708).w,d0
0000633E 4440                       		neg.w	d0
00006340                            
00006340                            loc_6346:
00006340 22C0                       		move.l	d0,(a1)+
00006342 51C9 FFFC                  		dbf	d1,loc_6346
00006346 323C 0027                  		move.w	#$27,d1
0000634A 3038 F710                  		move.w	($FFFFF710).w,d0
0000634E 4440                       		neg.w	d0
00006350                            
00006350                            loc_6356:
00006350 22C0                       		move.l	d0,(a1)+
00006352 51C9 FFFC                  		dbf	d1,loc_6356
00006356 3038 F710                  		move.w	($FFFFF710).w,d0
0000635A 0640 0000                  		addi.w	#0,d0
0000635E 3438 F700                  		move.w	($FFFFF700).w,d2
00006362 0642 FE00                  		addi.w	#-$200,d2
00006366 9440                       		sub.w	d0,d2
00006368 48C2                       		ext.l	d2
0000636A E182                       		asl.l	#8,d2
0000636C 85FC 0068                  		divs.w	#$68,d2
00006370 48C2                       		ext.l	d2
00006372 E182                       		asl.l	#8,d2
00006374 7600                       		moveq	#0,d3
00006376 3600                       		move.w	d0,d3
00006378 323C 0047                  		move.w	#$47,d1
0000637C D244                       		add.w	d4,d1
0000637E                            
0000637E                            loc_6384:
0000637E 3003                       		move.w	d3,d0
00006380 4440                       		neg.w	d0
00006382 22C0                       		move.l	d0,(a1)+
00006384 4843                       		swap	d3
00006386 D682                       		add.l	d2,d3
00006388 4843                       		swap	d3
0000638A 51C9 FFF2                  		dbf	d1,loc_6384
0000638E 4E75                       		rts	
00006390                            ; End of function Deform_GHZ
00006390                            
00006390                            ; ---------------------------------------------------------------------------
00006390                            ; Labyrinth Zone background layer deformation code
00006390                            ; ---------------------------------------------------------------------------
00006390                            
00006390                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006390                            
00006390                            
00006390                            Deform_LZ:				; XREF: Deform_Index
00006390 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006394 48C4                       		ext.l	d4
00006396 EF84                       		asl.l	#7,d4
00006398 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000639C 48C5                       		ext.l	d5
0000639E EF85                       		asl.l	#7,d5
000063A0 6100 0000                  		bsr.w	ScrollBlock1
000063A4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000063AA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000063AE 323C 00DF                  		move.w	#$DF,d1
000063B2 3038 F700                  		move.w	($FFFFF700).w,d0
000063B6 4440                       		neg.w	d0
000063B8 4840                       		swap	d0
000063BA 3038 F708                  		move.w	($FFFFF708).w,d0
000063BE 4440                       		neg.w	d0
000063C0                            
000063C0                            loc_63C6:
000063C0 22C0                       		move.l	d0,(a1)+
000063C2 51C9 FFFC                  		dbf	d1,loc_63C6
000063C6 3038 F646                  		move.w	($FFFFF646).w,d0
000063CA 9078 F704                  		sub.w	($FFFFF704).w,d0
000063CE 4E75                       		rts	
000063D0                            ; End of function Deform_LZ
000063D0                            
000063D0                            ; ---------------------------------------------------------------------------
000063D0                            ; Marble Zone background layer deformation code
000063D0                            ; ---------------------------------------------------------------------------
000063D0                            
000063D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063D0                            
000063D0                            
000063D0                            Deform_MZ:				; XREF: Deform_Index
000063D0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000063D4 48C4                       		ext.l	d4
000063D6 ED84                       		asl.l	#6,d4
000063D8 2204                       		move.l	d4,d1
000063DA E384                       		asl.l	#1,d4
000063DC D881                       		add.l	d1,d4
000063DE 7A00                       		moveq	#0,d5
000063E0 6100 0000                  		bsr.w	ScrollBlock1
000063E4 303C 0200                  		move.w	#$200,d0
000063E8 3238 F704                  		move.w	($FFFFF704).w,d1
000063EC 0441 01C8                  		subi.w	#$1C8,d1
000063F0 6500                       		bcs.s	loc_6402
000063F2 3401                       		move.w	d1,d2
000063F4 D241                       		add.w	d1,d1
000063F6 D242                       		add.w	d2,d1
000063F8 E441                       		asr.w	#2,d1
000063FA D041                       		add.w	d1,d0
000063FC                            
000063FC                            loc_6402:
000063FC 31C0 F714                  		move.w	d0,($FFFFF714).w
00006400 6100 0000                  		bsr.w	ScrollBlock3
00006404 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000640A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000640E 323C 00DF                  		move.w	#$DF,d1
00006412 3038 F700                  		move.w	($FFFFF700).w,d0
00006416 4440                       		neg.w	d0
00006418 4840                       		swap	d0
0000641A 3038 F708                  		move.w	($FFFFF708).w,d0
0000641E 4440                       		neg.w	d0
00006420                            
00006420                            loc_6426:
00006420 22C0                       		move.l	d0,(a1)+
00006422 51C9 FFFC                  		dbf	d1,loc_6426
00006426 4E75                       		rts	
00006428                            ; End of function Deform_MZ
00006428                            
00006428                            ; ---------------------------------------------------------------------------
00006428                            ; Star Light Zone background layer deformation code
00006428                            ; ---------------------------------------------------------------------------
00006428                            
00006428                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006428                            
00006428                            
00006428                            Deform_SLZ:				; XREF: Deform_Index
00006428 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000642C 48C4                       		ext.l	d4
0000642E EB84                       		asl.l	#5,d4
00006430 2204                       		move.l	d4,d1
00006432 E384                       		asl.l	#1,d4
00006434 D881                       		add.l	d1,d4
00006436 7A00                       		moveq	#0,d5
00006438 6100 0000                  		bsr.w	ScrollBlock1
0000643C 6100 0000                  		bsr.w	ScrollBlock3
00006440 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006444                            	;	move.w	($FFFFF704).w,d0
00006444                            	;	andi.w	#$7FF,d0
00006444 EA48                       		lsr.w	#5,d0
00006446 4440                       		neg.w	d0
00006448 0640 0026                  		addi.w	#$26,d0
0000644C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006450 3800                       		move.w	d0,d4
00006452                            	;	bsr.w	ScrollBlock3
00006452 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
00006458 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
0000645C                            
0000645C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006460 4440                       		neg.w	d0			; negate (positive to negative)
00006462 4840                       		swap	d0			; send to the left side of d0
00006464 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006468 45F8 A800                  		lea	($FFFFA800).w,a2
0000646C 069A 0000 5000             		addi.l	#$5000,(a2)+
00006472 069A 0000 C000             		addi.l	#$C000,(a2)+
00006478 3038 A800                  		move.w	($FFFFA800).w,d0
0000647C 4440                       		neg.w	d0			; negate (positive to negative)
0000647E E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006480 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006484                            slz_DeformLoop_1:
00006484 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006486 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
0000648A                            
0000648A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000648E 4440                       		neg.w	d0			; negate (positive to negative)
00006490 4840                       		swap	d0			; send to the left side of d0
00006492 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006496 45F8 A800                  		lea	($FFFFA800).w,a2
0000649A 069A 0000 5000             		addi.l	#$5000,(a2)+
000064A0 069A 0000 C000             		addi.l	#$C000,(a2)+
000064A6 3038 A800                  		move.w	($FFFFA800).w,d0
000064AA 4440                       		neg.w	d0			; negate (positive to negative)
000064AC E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000064AE 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000064B2                            slz_DeformLoop_2:
000064B2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000064B4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
000064B8                            
000064B8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000064BC 4440                       		neg.w	d0			; negate (positive to negative)
000064BE 4840                       		swap	d0			; send to the left side of d0
000064C0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000064C4 45F8 A800                  		lea	($FFFFA800).w,a2
000064C8 069A 0000 5000             		addi.l	#$5000,(a2)+
000064CE 069A 0000 C000             		addi.l	#$C000,(a2)+
000064D4 3038 A800                  		move.w	($FFFFA800).w,d0
000064D8 4440                       		neg.w	d0			; negate (positive to negative)
000064DA E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000064DC 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000064E0                            slz_DeformLoop_3:
000064E0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000064E2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
000064E6                            
000064E6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000064EA 4440                       		neg.w	d0			; negate (positive to negative)
000064EC 4840                       		swap	d0			; send to the left side of d0
000064EE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000064F2 45F8 A800                  		lea	($FFFFA800).w,a2
000064F6 069A 0000 5000             		addi.l	#$5000,(a2)+
000064FC 069A 0000 C000             		addi.l	#$C000,(a2)+
00006502 3038 A800                  		move.w	($FFFFA800).w,d0
00006506 4440                       		neg.w	d0			; negate (positive to negative)
00006508 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000650A 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000650E                            slz_DeformLoop_4:
0000650E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006510 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
00006514                            
00006514 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006518 4440                       		neg.w	d0			; negate (positive to negative)
0000651A 4840                       		swap	d0			; send to the left side of d0
0000651C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006520 45F8 A800                  		lea	($FFFFA800).w,a2
00006524 069A 0000 5000             		addi.l	#$5000,(a2)+
0000652A 069A 0000 C000             		addi.l	#$C000,(a2)+
00006530 3038 A800                  		move.w	($FFFFA800).w,d0
00006534 4440                       		neg.w	d0			; negate (positive to negative)
00006536 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
00006538 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000653C                            slz_DeformLoop_5:
0000653C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000653E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
00006542                            
00006542 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006546 4440                       		neg.w	d0			; negate (positive to negative)
00006548 4840                       		swap	d0			; send to the left side of d0
0000654A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000654E 4440                       		neg.w	d0			; negate (positive to negative)
00006550 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00006552 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006556                            slz_DeformLoop_6:
00006556 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006558 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
0000655C                            
0000655C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006560 4440                       		neg.w	d0			; negate (positive to negative)
00006562 4840                       		swap	d0			; send to the left side of d0
00006564 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006568 4440                       		neg.w	d0			; negate (positive to negative)
0000656A EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
0000656C 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00006570                            slz_DeformLoop_7:
00006570 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00006572 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
00006576                            
00006576 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000657A 4440                       		neg.w	d0			; negate (positive to negative)
0000657C 4840                       		swap	d0			; send to the left side of d0
0000657E 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006582 4440                       		neg.w	d0			; negate (positive to negative)
00006584 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
00006586 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000658A                            slz_DeformLoop_8:
0000658A 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000658C 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00006590                            
00006590 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00006594 4440                       		neg.w	d0			; negate (positive to negative)
00006596 4840                       		swap	d0			; send to the left side of d0
00006598 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000659C 4440                       		neg.w	d0			; negate (positive to negative)
0000659E EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000065A0 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065A4                            slz_DeformLoop_9:
000065A4 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065A6 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
000065AA                            
000065AA 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065AE 4440                       		neg.w	d0			; negate (positive to negative)
000065B0 4840                       		swap	d0			; send to the left side of d0
000065B2 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065B6 4440                       		neg.w	d0			; negate (positive to negative)
000065B8 E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000065BA 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065BE                            slz_DeformLoop_10:
000065BE 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065C0 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
000065C4                            
000065C4 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065C8 4440                       		neg.w	d0			; negate (positive to negative)
000065CA 4840                       		swap	d0			; send to the left side of d0
000065CC 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065D0 4440                       		neg.w	d0			; negate (positive to negative)
000065D2 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
000065D4 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065D8                            slz_DeformLoop_11:
000065D8 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065DA 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
000065DE                            
000065DE 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065E2 4440                       		neg.w	d0			; negate (positive to negative)
000065E4 4840                       		swap	d0			; send to the left side of d0
000065E6 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000065EA 4440                       		neg.w	d0			; negate (positive to negative)
000065EC E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
000065EE 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000065F2                            slz_DeformLoop_12:
000065F2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000065F4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
000065F8                            
000065F8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000065FC 4440                       		neg.w	d0			; negate (positive to negative)
000065FE 4840                       		swap	d0			; send to the left side of d0
00006600 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00006604 4440                       		neg.w	d0			; negate (positive to negative)
00006606 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00006608 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000660C                            slz_DeformLoop_13:
0000660C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000660E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
00006612 4E75                       		rts	
00006614                            ; End of function Deform_SLZ
00006614 4E75                       		rts	
00006616                            ; End of function Deform_SLZ_2
00006616                            
00006616                            ; ---------------------------------------------------------------------------
00006616                            ; Spring Yard Zone background layer deformation	code
00006616                            ; ---------------------------------------------------------------------------
00006616                            
00006616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006616                            
00006616                            
00006616                            Deform_SYZ:				; XREF: Deform_Index
00006616 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000661A 48C4                       		ext.l	d4
0000661C ED84                       		asl.l	#6,d4
0000661E 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006622 48C5                       		ext.l	d5
00006624 E985                       		asl.l	#4,d5
00006626 2205                       		move.l	d5,d1
00006628 E385                       		asl.l	#1,d5
0000662A DA81                       		add.l	d1,d5
0000662C 6100 0000                  		bsr.w	ScrollBlock1
00006630 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006636 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000663A 323C 00DF                  		move.w	#$DF,d1
0000663E 3038 F700                  		move.w	($FFFFF700).w,d0
00006642 4440                       		neg.w	d0
00006644 4840                       		swap	d0
00006646 3038 F708                  		move.w	($FFFFF708).w,d0
0000664A 4440                       		neg.w	d0
0000664C                            
0000664C                            loc_653C:
0000664C 22C0                       		move.l	d0,(a1)+
0000664E 51C9 FFFC                  		dbf	d1,loc_653C
00006652 4E75                       		rts	
00006654                            ; End of function Deform_SYZ
00006654                            
00006654                            ; ---------------------------------------------------------------------------
00006654                            ; Scrap	Brain Zone background layer deformation	code
00006654                            ; ---------------------------------------------------------------------------
00006654                            
00006654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006654                            
00006654                            
00006654                            Deform_SBZ:				; XREF: Deform_Index
00006654 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006658 48C4                       		ext.l	d4
0000665A ED84                       		asl.l	#6,d4
0000665C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006660 48C5                       		ext.l	d5
00006662 E985                       		asl.l	#4,d5
00006664 E385                       		asl.l	#1,d5
00006666 6100 0000                  		bsr.w	ScrollBlock1
0000666A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006670 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006674 323C 00DF                  		move.w	#$DF,d1
00006678 3038 F700                  		move.w	($FFFFF700).w,d0
0000667C 4440                       		neg.w	d0
0000667E 4840                       		swap	d0
00006680 3038 F708                  		move.w	($FFFFF708).w,d0
00006684 4440                       		neg.w	d0
00006686                            
00006686                            loc_6576:
00006686 22C0                       		move.l	d0,(a1)+
00006688 51C9 FFFC                  		dbf	d1,loc_6576
0000668C 4E75                       		rts	
0000668E                            ; End of function Deform_SBZ
0000668E                            
0000668E                            ; ---------------------------------------------------------------------------
0000668E                            ; Subroutine to	scroll the level horizontally as Sonic moves
0000668E                            ; ---------------------------------------------------------------------------
0000668E                            
0000668E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000668E                            
0000668E                            
0000668E                            ScrollHoriz:				; XREF: DeformBgLayer
0000668E 3838 F700                  		move.w	($FFFFF700).w,d4
00006692 6100                       		bsr.s	ScrollHoriz2
00006694 3038 F700                  		move.w	($FFFFF700).w,d0
00006698 0240 0010                  		andi.w	#$10,d0
0000669C 1238 F74A                  		move.b	($FFFFF74A).w,d1
000066A0 B300                       		eor.b	d1,d0
000066A2 6600                       		bne.s	locret_65B0
000066A4 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
000066AA 3038 F700                  		move.w	($FFFFF700).w,d0
000066AE 9044                       		sub.w	d4,d0
000066B0 6A00                       		bpl.s	loc_65AA
000066B2 08F8 0002 F754             		bset	#2,($FFFFF754).w
000066B8 4E75                       		rts	
000066BA                            ; ===========================================================================
000066BA                            
000066BA                            loc_65AA:
000066BA 08F8 0003 F754             		bset	#3,($FFFFF754).w
000066C0                            
000066C0                            locret_65B0:
000066C0 4E75                       		rts	
000066C2                            ; End of function ScrollHoriz
000066C2                            
000066C2                            
000066C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000066C2                            
000066C2                            
000066C2                            ScrollHoriz2:				; XREF: ScrollHoriz
000066C2 3038 D008                  		move.w	($FFFFD008).w,d0
000066C6 9078 F700                  		sub.w	($FFFFF700).w,d0
000066CA 0440 0090                  		subi.w	#$90,d0
000066CE 6500                       		bcs.s	loc_65F6
000066D0 0440 0010                  		subi.w	#$10,d0
000066D4 6400                       		bcc.s	loc_65CC
000066D6 4278 F73A                  		clr.w	($FFFFF73A).w
000066DA 4E75                       		rts	
000066DC                            ; ===========================================================================
000066DC                            
000066DC                            loc_65CC:
000066DC 0C40 0010                  		cmpi.w	#$10,d0
000066E0 6500                       		bcs.s	loc_65D6
000066E2 303C 0010                  		move.w	#$10,d0
000066E6                            
000066E6                            loc_65D6:
000066E6 D078 F700                  		add.w	($FFFFF700).w,d0
000066EA B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000066EE 6D00                       		blt.s	loc_65E4
000066F0 3038 F72A                  		move.w	($FFFFF72A).w,d0
000066F4                            
000066F4                            loc_65E4:
000066F4 3200                       		move.w	d0,d1
000066F6 9278 F700                  		sub.w	($FFFFF700).w,d1
000066FA E141                       		asl.w	#8,d1
000066FC 31C0 F700                  		move.w	d0,($FFFFF700).w
00006700 31C1 F73A                  		move.w	d1,($FFFFF73A).w
00006704 4E75                       		rts	
00006706                            ; ===========================================================================
00006706                            
00006706                            loc_65F6:				; XREF: ScrollHoriz2
00006706 D078 F700                  		add.w	($FFFFF700).w,d0
0000670A B078 F728                  		cmp.w	($FFFFF728).w,d0
0000670E 6EE4                       		bgt.s	loc_65E4
00006710 3038 F728                  		move.w	($FFFFF728).w,d0
00006714 60DE                       		bra.s	loc_65E4
00006716                            ; End of function ScrollHoriz2
00006716                            
00006716                            ; ===========================================================================
00006716 4A40                       		tst.w	d0
00006718 6A00                       		bpl.s	loc_6610
0000671A 303C FFFE                  		move.w	#-2,d0
0000671E 60E6                       		bra.s	loc_65F6
00006720                            ; ===========================================================================
00006720                            
00006720                            loc_6610:
00006720 303C 0002                  		move.w	#2,d0
00006724 60B6                       		bra.s	loc_65CC
00006726                            
00006726                            ; ---------------------------------------------------------------------------
00006726                            ; Subroutine to	scroll the level vertically as Sonic moves
00006726                            ; ---------------------------------------------------------------------------
00006726                            
00006726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006726                            
00006726                            
00006726                            ScrollVertical:				; XREF: DeformBgLayer
00006726 7200                       		moveq	#0,d1
00006728 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000672C 9078 F704                  		sub.w	($FFFFF704).w,d0
00006730 0838 0002 D022             		btst	#2,($FFFFD022).w
00006736 6700                       		beq.s	loc_662A
00006738 5B40                       		subq.w	#5,d0
0000673A                            
0000673A                            loc_662A:
0000673A 0838 0001 D022             		btst	#1,($FFFFD022).w
00006740 6700                       		beq.s	loc_664A
00006742 0640 0020                  		addi.w	#$20,d0
00006746 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000674A 6500                       		bcs.s	loc_6696
0000674C 0440 0040                  		subi.w	#$40,d0
00006750 6400                       		bcc.s	loc_6696
00006752 4A38 F75C                  		tst.b	($FFFFF75C).w
00006756 6600                       		bne.s	loc_66A8
00006758 6000                       		bra.s	loc_6656
0000675A                            ; ===========================================================================
0000675A                            
0000675A                            loc_664A:
0000675A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000675E 6600                       		bne.s	loc_665C
00006760 4A38 F75C                  		tst.b	($FFFFF75C).w
00006764 6600                       		bne.s	loc_66A8
00006766                            
00006766                            loc_6656:
00006766 4278 F73C                  		clr.w	($FFFFF73C).w
0000676A 4E75                       		rts	
0000676C                            ; ===========================================================================
0000676C                            
0000676C                            loc_665C:
0000676C 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006772 6600                       		bne.s	loc_6684
00006774 3238 D014                  		move.w	($FFFFD014).w,d1
00006778 6A00                       		bpl.s	loc_666C
0000677A 4441                       		neg.w	d1
0000677C                            
0000677C                            loc_666C:
0000677C 0C41 0800                  		cmpi.w	#$800,d1
00006780 6400                       		bcc.s	loc_6696
00006782 323C 0600                  		move.w	#$600,d1
00006786 0C40 0006                  		cmpi.w	#6,d0
0000678A 6E00                       		bgt.s	loc_66F6
0000678C 0C40 FFFA                  		cmpi.w	#-6,d0
00006790 6D00                       		blt.s	loc_66C0
00006792 6000                       		bra.s	loc_66AE
00006794                            ; ===========================================================================
00006794                            
00006794                            loc_6684:
00006794 323C 0200                  		move.w	#$200,d1
00006798 0C40 0002                  		cmpi.w	#2,d0
0000679C 6E00                       		bgt.s	loc_66F6
0000679E 0C40 FFFE                  		cmpi.w	#-2,d0
000067A2 6D00                       		blt.s	loc_66C0
000067A4 6000                       		bra.s	loc_66AE
000067A6                            ; ===========================================================================
000067A6                            
000067A6                            loc_6696:
000067A6 323C 1000                  		move.w	#$1000,d1
000067AA 0C40 0010                  		cmpi.w	#$10,d0
000067AE 6E00                       		bgt.s	loc_66F6
000067B0 0C40 FFF0                  		cmpi.w	#-$10,d0
000067B4 6D00                       		blt.s	loc_66C0
000067B6 6000                       		bra.s	loc_66AE
000067B8                            ; ===========================================================================
000067B8                            
000067B8                            loc_66A8:
000067B8 7000                       		moveq	#0,d0
000067BA 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000067BE                            
000067BE                            loc_66AE:
000067BE 7200                       		moveq	#0,d1
000067C0 3200                       		move.w	d0,d1
000067C2 D278 F704                  		add.w	($FFFFF704).w,d1
000067C6 4A40                       		tst.w	d0
000067C8 6A00 0000                  		bpl.w	loc_6700
000067CC 6000 0000                  		bra.w	loc_66CC
000067D0                            ; ===========================================================================
000067D0                            
000067D0                            loc_66C0:
000067D0 4441                       		neg.w	d1
000067D2 48C1                       		ext.l	d1
000067D4 E181                       		asl.l	#8,d1
000067D6 D2B8 F704                  		add.l	($FFFFF704).w,d1
000067DA 4841                       		swap	d1
000067DC                            
000067DC                            loc_66CC:
000067DC B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000067E0 6E00                       		bgt.s	loc_6724
000067E2 0C41 FF00                  		cmpi.w	#-$100,d1
000067E6 6E00                       		bgt.s	loc_66F0
000067E8 0241 07FF                  		andi.w	#$7FF,d1
000067EC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000067F2 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000067F8 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000067FE 6000                       		bra.s	loc_6724
00006800                            ; ===========================================================================
00006800                            
00006800                            loc_66F0:
00006800 3238 F72C                  		move.w	($FFFFF72C).w,d1
00006804 6000                       		bra.s	loc_6724
00006806                            ; ===========================================================================
00006806                            
00006806                            loc_66F6:
00006806 48C1                       		ext.l	d1
00006808 E181                       		asl.l	#8,d1
0000680A D2B8 F704                  		add.l	($FFFFF704).w,d1
0000680E 4841                       		swap	d1
00006810                            
00006810                            loc_6700:
00006810 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
00006814 6D00                       		blt.s	loc_6724
00006816 0441 0800                  		subi.w	#$800,d1
0000681A 6500                       		bcs.s	loc_6720
0000681C 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006822 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
00006828 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0000682E 6000                       		bra.s	loc_6724
00006830                            ; ===========================================================================
00006830                            
00006830                            loc_6720:
00006830 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006834                            
00006834                            loc_6724:
00006834 3838 F704                  		move.w	($FFFFF704).w,d4
00006838 4841                       		swap	d1
0000683A 2601                       		move.l	d1,d3
0000683C 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006840 E09B                       		ror.l	#8,d3
00006842 31C3 F73C                  		move.w	d3,($FFFFF73C).w
00006846 21C1 F704                  		move.l	d1,($FFFFF704).w
0000684A 3038 F704                  		move.w	($FFFFF704).w,d0
0000684E 0240 0010                  		andi.w	#$10,d0
00006852 1238 F74B                  		move.b	($FFFFF74B).w,d1
00006856 B300                       		eor.b	d1,d0
00006858 6600                       		bne.s	locret_6766
0000685A 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006860 3038 F704                  		move.w	($FFFFF704).w,d0
00006864 9044                       		sub.w	d4,d0
00006866 6A00                       		bpl.s	loc_6760
00006868 08F8 0000 F754             		bset	#0,($FFFFF754).w
0000686E 4E75                       		rts	
00006870                            ; ===========================================================================
00006870                            
00006870                            loc_6760:
00006870 08F8 0001 F754             		bset	#1,($FFFFF754).w
00006876                            
00006876                            locret_6766:
00006876 4E75                       		rts	
00006878                            ; End of function ScrollVertical
00006878                            
00006878                            
00006878                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006878                            
00006878                            
00006878                            ScrollBlock1:				; XREF: Deform_GHZ; et al
00006878 2438 F708                  		move.l	($FFFFF708).w,d2
0000687C 2002                       		move.l	d2,d0
0000687E D084                       		add.l	d4,d0
00006880 21C0 F708                  		move.l	d0,($FFFFF708).w
00006884 2200                       		move.l	d0,d1
00006886 4841                       		swap	d1
00006888 0241 0010                  		andi.w	#$10,d1
0000688C 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006890 B701                       		eor.b	d3,d1
00006892 6600                       		bne.s	loc_679C
00006894 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000689A 9082                       		sub.l	d2,d0
0000689C 6A00                       		bpl.s	loc_6796
0000689E 08F8 0002 F756             		bset	#2,($FFFFF756).w
000068A4 6000                       		bra.s	loc_679C
000068A6                            ; ===========================================================================
000068A6                            
000068A6                            loc_6796:
000068A6 08F8 0003 F756             		bset	#3,($FFFFF756).w
000068AC                            
000068AC                            loc_679C:
000068AC 2638 F70C                  		move.l	($FFFFF70C).w,d3
000068B0 2003                       		move.l	d3,d0
000068B2 D085                       		add.l	d5,d0
000068B4 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000068B8 2200                       		move.l	d0,d1
000068BA 4841                       		swap	d1
000068BC 0241 0010                  		andi.w	#$10,d1
000068C0 1438 F74D                  		move.b	($FFFFF74D).w,d2
000068C4 B501                       		eor.b	d2,d1
000068C6 6600                       		bne.s	locret_67D0
000068C8 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000068CE 9083                       		sub.l	d3,d0
000068D0 6A00                       		bpl.s	loc_67CA
000068D2 08F8 0000 F756             		bset	#0,($FFFFF756).w
000068D8 4E75                       		rts	
000068DA                            ; ===========================================================================
000068DA                            
000068DA                            loc_67CA:
000068DA 08F8 0001 F756             		bset	#1,($FFFFF756).w
000068E0                            
000068E0                            locret_67D0:
000068E0 4E75                       		rts	
000068E2                            ; End of function ScrollBlock1
000068E2                            
000068E2                            
000068E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068E2                            
000068E2                            
000068E2                            ScrollBlock2:				; XREF: Deform_SLZ
000068E2 2438 F708                  		move.l	($FFFFF708).w,d2
000068E6 2002                       		move.l	d2,d0
000068E8 D084                       		add.l	d4,d0
000068EA 21C0 F708                  		move.l	d0,($FFFFF708).w
000068EE 2638 F70C                  		move.l	($FFFFF70C).w,d3
000068F2 2003                       		move.l	d3,d0
000068F4 D085                       		add.l	d5,d0
000068F6 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000068FA 2200                       		move.l	d0,d1
000068FC 4841                       		swap	d1
000068FE 0241 0010                  		andi.w	#$10,d1
00006902 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006906 B501                       		eor.b	d2,d1
00006908 6600                       		bne.s	locret_6812
0000690A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006910 9083                       		sub.l	d3,d0
00006912 6A00                       		bpl.s	loc_680C
00006914 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000691A 4E75                       		rts	
0000691C                            ; ===========================================================================
0000691C                            
0000691C                            loc_680C:
0000691C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006922                            
00006922                            locret_6812:
00006922 4E75                       		rts	
00006924                            ; End of function ScrollBlock2
00006924                            
00006924                            
00006924                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006924                            
00006924                            
00006924                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006924 3638 F70C                  		move.w	($FFFFF70C).w,d3
00006928 31C0 F70C                  		move.w	d0,($FFFFF70C).w
0000692C 3200                       		move.w	d0,d1
0000692E 0241 0010                  		andi.w	#$10,d1
00006932 1438 F74D                  		move.b	($FFFFF74D).w,d2
00006936 B501                       		eor.b	d2,d1
00006938 6600                       		bne.s	locret_6842
0000693A 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006940 9043                       		sub.w	d3,d0
00006942 6A00                       		bpl.s	loc_683C
00006944 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000694A 4E75                       		rts	
0000694C                            ; ===========================================================================
0000694C                            
0000694C                            loc_683C:
0000694C 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006952                            
00006952                            locret_6842:
00006952 4E75                       		rts	
00006954                            ; End of function ScrollBlock3
00006954                            
00006954                            
00006954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006954                            
00006954                            
00006954                            ScrollBlock4:				; XREF: Deform_GHZ
00006954 3438 F710                  		move.w	($FFFFF710).w,d2
00006958 3638 F714                  		move.w	($FFFFF714).w,d3
0000695C 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006960 48C0                       		ext.l	d0
00006962 EF80                       		asl.l	#7,d0
00006964 D1B8 F710                  		add.l	d0,($FFFFF710).w
00006968 3038 F710                  		move.w	($FFFFF710).w,d0
0000696C 0240 0010                  		andi.w	#$10,d0
00006970 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006974 B300                       		eor.b	d1,d0
00006976 6600                       		bne.s	locret_6884
00006978 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
0000697E 3038 F710                  		move.w	($FFFFF710).w,d0
00006982 9042                       		sub.w	d2,d0
00006984 6A00                       		bpl.s	loc_687E
00006986 08F8 0002 F758             		bset	#2,($FFFFF758).w
0000698C 6000                       		bra.s	locret_6884
0000698E                            ; ===========================================================================
0000698E                            
0000698E                            loc_687E:
0000698E 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006994                            
00006994                            locret_6884:
00006994 4E75                       		rts	
00006996                            ; End of function ScrollBlock4
00006996                            
00006996                            
00006996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006996                            
00006996                            
00006996                            sub_6886:				; XREF: loc_C44
00006996 4BF9 00C0 0004             		lea	($C00004).l,a5
0000699C 4DF9 00C0 0000             		lea	($C00000).l,a6
000069A2 45F8 F756                  		lea	($FFFFF756).w,a2
000069A6 47F8 F708                  		lea	($FFFFF708).w,a3
000069AA 49F8 A440                  		lea	($FFFFA440).w,a4
000069AE 343C 6000                  		move.w	#$6000,d2
000069B2 6100 0000                  		bsr.w	sub_6954
000069B6 45F8 F758                  		lea	($FFFFF758).w,a2
000069BA 47F8 F710                  		lea	($FFFFF710).w,a3
000069BE 6000 0000                  		bra.w	sub_69F4
000069C2                            ; End of function sub_6886
000069C2                            
000069C2                            ; ---------------------------------------------------------------------------
000069C2                            ; Subroutine to	display	correct	tiles as you move
000069C2                            ; ---------------------------------------------------------------------------
000069C2                            
000069C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069C2                            
000069C2                            
000069C2                            LoadTilesAsYouMove:			; XREF: Demo_Time
000069C2 4BF9 00C0 0004             		lea	($C00004).l,a5
000069C8 4DF9 00C0 0000             		lea	($C00000).l,a6
000069CE 45F8 FF32                  		lea	($FFFFFF32).w,a2
000069D2 47F8 FF18                  		lea	($FFFFFF18).w,a3
000069D6 49F8 A440                  		lea	($FFFFA440).w,a4
000069DA 343C 6000                  		move.w	#$6000,d2
000069DE 6100 0000                  		bsr.w	sub_6954
000069E2 45F8 FF34                  		lea	($FFFFFF34).w,a2
000069E6 47F8 FF20                  		lea	($FFFFFF20).w,a3
000069EA 6100 0000                  		bsr.w	sub_69F4
000069EE 45F8 FF30                  		lea	($FFFFFF30).w,a2
000069F2 47F8 FF10                  		lea	($FFFFFF10).w,a3
000069F6 49F8 A400                  		lea	($FFFFA400).w,a4
000069FA 343C 4000                  		move.w	#$4000,d2
000069FE 4A12                       		tst.b	(a2)
00006A00 6700                       		beq.s	locret_6952
00006A02 0892 0000                  		bclr	#0,(a2)
00006A06 6700                       		beq.s	loc_6908
00006A08 78F0                       		moveq	#-$10,d4
00006A0A 7AF0                       		moveq	#-$10,d5
00006A0C 6100 0000                  		bsr.w	sub_6C20
00006A10 78F0                       		moveq	#-$10,d4
00006A12 7AF0                       		moveq	#-$10,d5
00006A14 6100 0000                  		bsr.w	sub_6AD8
00006A18                            
00006A18                            loc_6908:
00006A18 0892 0001                  		bclr	#1,(a2)
00006A1C 6700                       		beq.s	loc_6922
00006A1E 383C 00E0                  		move.w	#$E0,d4
00006A22 7AF0                       		moveq	#-$10,d5
00006A24 6100 0000                  		bsr.w	sub_6C20
00006A28 383C 00E0                  		move.w	#$E0,d4
00006A2C 7AF0                       		moveq	#-$10,d5
00006A2E 6100 0000                  		bsr.w	sub_6AD8
00006A32                            
00006A32                            loc_6922:
00006A32 0892 0002                  		bclr	#2,(a2)
00006A36 6700                       		beq.s	loc_6938
00006A38 78F0                       		moveq	#-$10,d4
00006A3A 7AF0                       		moveq	#-$10,d5
00006A3C 6100 0000                  		bsr.w	sub_6C20
00006A40 78F0                       		moveq	#-$10,d4
00006A42 7AF0                       		moveq	#-$10,d5
00006A44 6100 0000                  		bsr.w	sub_6B04
00006A48                            
00006A48                            loc_6938:
00006A48 0892 0003                  		bclr	#3,(a2)
00006A4C 6700                       		beq.s	locret_6952
00006A4E 78F0                       		moveq	#-$10,d4
00006A50 3A3C 0140                  		move.w	#$140,d5
00006A54 6100 0000                  		bsr.w	sub_6C20
00006A58 78F0                       		moveq	#-$10,d4
00006A5A 3A3C 0140                  		move.w	#$140,d5
00006A5E 6100 0000                  		bsr.w	sub_6B04
00006A62                            
00006A62                            locret_6952:
00006A62 4E75                       		rts	
00006A64                            ; End of function LoadTilesAsYouMove
00006A64                            
00006A64                            
00006A64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006A64                            
00006A64                            
00006A64                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006A64 4A12                       		tst.b	(a2)
00006A66 6700 0000                  		beq.w	locret_69F2
00006A6A 0892 0000                  		bclr	#0,(a2)
00006A6E 6700                       		beq.s	loc_6972
00006A70 78F0                       		moveq	#-$10,d4
00006A72 7AF0                       		moveq	#-$10,d5
00006A74 6100 0000                  		bsr.w	sub_6C20
00006A78 78F0                       		moveq	#-$10,d4
00006A7A 7AF0                       		moveq	#-$10,d5
00006A7C 7C1F                       		moveq	#$1F,d6
00006A7E 6100 0000                  		bsr.w	sub_6ADA
00006A82                            
00006A82                            loc_6972:
00006A82 0892 0001                  		bclr	#1,(a2)
00006A86 6700                       		beq.s	loc_698E
00006A88 383C 00E0                  		move.w	#$E0,d4
00006A8C 7AF0                       		moveq	#-$10,d5
00006A8E 6100 0000                  		bsr.w	sub_6C20
00006A92 383C 00E0                  		move.w	#$E0,d4
00006A96 7AF0                       		moveq	#-$10,d5
00006A98 7C1F                       		moveq	#$1F,d6
00006A9A 6100 0000                  		bsr.w	sub_6ADA
00006A9E                            
00006A9E                            loc_698E:
00006A9E 0892 0002                  		bclr	#2,(a2)
00006AA2 6700                       		beq.s	loc_69BE
00006AA4 78F0                       		moveq	#-$10,d4
00006AA6 7AF0                       		moveq	#-$10,d5
00006AA8 6100 0000                  		bsr.w	sub_6C20
00006AAC 78F0                       		moveq	#-$10,d4
00006AAE 7AF0                       		moveq	#-$10,d5
00006AB0 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006AB4 322B 0004                  		move.w	4(a3),d1
00006AB8 0241 FFF0                  		andi.w	#-$10,d1
00006ABC 9C41                       		sub.w	d1,d6
00006ABE 6D00                       		blt.s	loc_69BE
00006AC0 E84E                       		lsr.w	#4,d6
00006AC2 0C46 000F                  		cmpi.w	#$F,d6
00006AC6 6500                       		bcs.s	loc_69BA
00006AC8 7C0F                       		moveq	#$F,d6
00006ACA                            
00006ACA                            loc_69BA:
00006ACA 6100 0000                  		bsr.w	sub_6B06
00006ACE                            
00006ACE                            loc_69BE:
00006ACE 0892 0003                  		bclr	#3,(a2)
00006AD2 6700                       		beq.s	locret_69F2
00006AD4 78F0                       		moveq	#-$10,d4
00006AD6 3A3C 0140                  		move.w	#$140,d5
00006ADA 6100 0000                  		bsr.w	sub_6C20
00006ADE 78F0                       		moveq	#-$10,d4
00006AE0 3A3C 0140                  		move.w	#$140,d5
00006AE4 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006AE8 322B 0004                  		move.w	4(a3),d1
00006AEC 0241 FFF0                  		andi.w	#-$10,d1
00006AF0 9C41                       		sub.w	d1,d6
00006AF2 6D00                       		blt.s	locret_69F2
00006AF4 E84E                       		lsr.w	#4,d6
00006AF6 0C46 000F                  		cmpi.w	#$F,d6
00006AFA 6500                       		bcs.s	loc_69EE
00006AFC 7C0F                       		moveq	#$F,d6
00006AFE                            
00006AFE                            loc_69EE:
00006AFE 6100 0000                  		bsr.w	sub_6B06
00006B02                            
00006B02                            locret_69F2:
00006B02 4E75                       		rts	
00006B04                            ; End of function sub_6954
00006B04                            
00006B04                            
00006B04                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B04                            
00006B04                            
00006B04                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
00006B04 4A12                       		tst.b	(a2)
00006B06 6700 0000                  		beq.w	locret_6A80
00006B0A 0892 0002                  		bclr	#2,(a2)
00006B0E 6700                       		beq.s	loc_6A3E
00006B10 0C53 0010                  		cmpi.w	#$10,(a3)
00006B14 6500                       		bcs.s	loc_6A3E
00006B16 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006B1A 322B 0004                  		move.w	4(a3),d1
00006B1E 0241 FFF0                  		andi.w	#-$10,d1
00006B22 9841                       		sub.w	d1,d4
00006B24 3F04                       		move.w	d4,-(sp)
00006B26 7AF0                       		moveq	#-$10,d5
00006B28 6100 0000                  		bsr.w	sub_6C20
00006B2C 381F                       		move.w	(sp)+,d4
00006B2E 7AF0                       		moveq	#-$10,d5
00006B30 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006B34 322B 0004                  		move.w	4(a3),d1
00006B38 0241 FFF0                  		andi.w	#-$10,d1
00006B3C 9C41                       		sub.w	d1,d6
00006B3E 6D00                       		blt.s	loc_6A3E
00006B40 E84E                       		lsr.w	#4,d6
00006B42 0446 000E                  		subi.w	#$E,d6
00006B46 6400                       		bcc.s	loc_6A3E
00006B48 4446                       		neg.w	d6
00006B4A 6100 0000                  		bsr.w	sub_6B06
00006B4E                            
00006B4E                            loc_6A3E:
00006B4E 0892 0003                  		bclr	#3,(a2)
00006B52 6700                       		beq.s	locret_6A80
00006B54 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006B58 322B 0004                  		move.w	4(a3),d1
00006B5C 0241 FFF0                  		andi.w	#-$10,d1
00006B60 9841                       		sub.w	d1,d4
00006B62 3F04                       		move.w	d4,-(sp)
00006B64 3A3C 0140                  		move.w	#$140,d5
00006B68 6100 0000                  		bsr.w	sub_6C20
00006B6C 381F                       		move.w	(sp)+,d4
00006B6E 3A3C 0140                  		move.w	#$140,d5
00006B72 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006B76 322B 0004                  		move.w	4(a3),d1
00006B7A 0241 FFF0                  		andi.w	#-$10,d1
00006B7E 9C41                       		sub.w	d1,d6
00006B80 6D00                       		blt.s	locret_6A80
00006B82 E84E                       		lsr.w	#4,d6
00006B84 0446 000E                  		subi.w	#$E,d6
00006B88 6400                       		bcc.s	locret_6A80
00006B8A 4446                       		neg.w	d6
00006B8C 6100 0000                  		bsr.w	sub_6B06
00006B90                            
00006B90                            locret_6A80:
00006B90 4E75                       		rts	
00006B92                            ; End of function sub_69F4
00006B92                            
00006B92                            ; ===========================================================================
00006B92 4A12                       		tst.b	(a2)
00006B94 6700                       		beq.s	locret_6AD6
00006B96 0892 0002                  		bclr	#2,(a2)
00006B9A 6700                       		beq.s	loc_6AAC
00006B9C 383C 00D0                  		move.w	#$D0,d4
00006BA0 322B 0004                  		move.w	4(a3),d1
00006BA4 0241 FFF0                  		andi.w	#-$10,d1
00006BA8 9841                       		sub.w	d1,d4
00006BAA 3F04                       		move.w	d4,-(sp)
00006BAC 7AF0                       		moveq	#-$10,d5
00006BAE 6100 0000                  		bsr.w	sub_6C3C
00006BB2 381F                       		move.w	(sp)+,d4
00006BB4 7AF0                       		moveq	#-$10,d5
00006BB6 7C02                       		moveq	#2,d6
00006BB8 6100 0000                  		bsr.w	sub_6B06
00006BBC                            
00006BBC                            loc_6AAC:
00006BBC 0892 0003                  		bclr	#3,(a2)
00006BC0 6700                       		beq.s	locret_6AD6
00006BC2 383C 00D0                  		move.w	#$D0,d4
00006BC6 322B 0004                  		move.w	4(a3),d1
00006BCA 0241 FFF0                  		andi.w	#-$10,d1
00006BCE 9841                       		sub.w	d1,d4
00006BD0 3F04                       		move.w	d4,-(sp)
00006BD2 3A3C 0140                  		move.w	#$140,d5
00006BD6 6100 0000                  		bsr.w	sub_6C3C
00006BDA 381F                       		move.w	(sp)+,d4
00006BDC 3A3C 0140                  		move.w	#$140,d5
00006BE0 7C02                       		moveq	#2,d6
00006BE2 6100 0000                  		bsr.w	sub_6B06
00006BE6                            
00006BE6                            locret_6AD6:
00006BE6 4E75                       		rts	
00006BE8                            
00006BE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BE8                            
00006BE8                            
00006BE8                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006BE8 7C15                       		moveq	#$15,d6
00006BEA                            ; End of function sub_6AD8
00006BEA                            
00006BEA                            
00006BEA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BEA                            
00006BEA                            
00006BEA                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006BEA 2E3C 0080 0000             		move.l	#$800000,d7
00006BF0 2200                       		move.l	d0,d1
00006BF2                            
00006BF2                            loc_6AE2:
00006BF2 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006BF6 6100 0000                  		bsr.w	sub_6BD6
00006BFA 2001                       		move.l	d1,d0
00006BFC 6100 0000                  		bsr.w	sub_6B32
00006C00 5801                       		addq.b	#4,d1
00006C02 0201 007F                  		andi.b	#$7F,d1
00006C06 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006C0A 0645 0010                  		addi.w	#$10,d5
00006C0E 51CE FFE2                  		dbf	d6,loc_6AE2
00006C12 4E75                       		rts	
00006C14                            ; End of function sub_6ADA
00006C14                            
00006C14                            
00006C14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C14                            
00006C14                            
00006C14                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006C14 7C0F                       		moveq	#$F,d6
00006C16                            ; End of function sub_6B04
00006C16                            
00006C16                            
00006C16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C16                            
00006C16                            
00006C16                            sub_6B06:				; XREF: sub_6954
00006C16 2E3C 0080 0000             		move.l	#$800000,d7
00006C1C 2200                       		move.l	d0,d1
00006C1E                            
00006C1E                            loc_6B0E:
00006C1E 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006C22 6100 0000                  		bsr.w	sub_6BD6
00006C26 2001                       		move.l	d1,d0
00006C28 6100 0000                  		bsr.w	sub_6B32
00006C2C 0641 0100                  		addi.w	#$100,d1
00006C30 0241 0FFF                  		andi.w	#$FFF,d1
00006C34 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006C38 0644 0010                  		addi.w	#$10,d4
00006C3C 51CE FFE0                  		dbf	d6,loc_6B0E
00006C40 4E75                       		rts	
00006C42                            ; End of function sub_6B06
00006C42                            
00006C42                            
00006C42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C42                            
00006C42                            
00006C42                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006C42 8042                       		or.w	d2,d0
00006C44 4840                       		swap	d0
00006C46 0810 0004                  		btst	#4,(a0)
00006C4A 6600                       		bne.s	loc_6B6E
00006C4C 0810 0003                  		btst	#3,(a0)
00006C50 6600                       		bne.s	loc_6B4E
00006C52 2A80                       		move.l	d0,(a5)
00006C54 2C99                       		move.l	(a1)+,(a6)
00006C56 D087                       		add.l	d7,d0
00006C58 2A80                       		move.l	d0,(a5)
00006C5A 2C99                       		move.l	(a1)+,(a6)
00006C5C 4E75                       		rts	
00006C5E                            ; ===========================================================================
00006C5E                            
00006C5E                            loc_6B4E:
00006C5E 2A80                       		move.l	d0,(a5)
00006C60 2819                       		move.l	(a1)+,d4
00006C62 0A84 0800 0800             		eori.l	#$8000800,d4
00006C68 4844                       		swap	d4
00006C6A 2C84                       		move.l	d4,(a6)
00006C6C D087                       		add.l	d7,d0
00006C6E 2A80                       		move.l	d0,(a5)
00006C70 2819                       		move.l	(a1)+,d4
00006C72 0A84 0800 0800             		eori.l	#$8000800,d4
00006C78 4844                       		swap	d4
00006C7A 2C84                       		move.l	d4,(a6)
00006C7C 4E75                       		rts	
00006C7E                            ; ===========================================================================
00006C7E                            
00006C7E                            loc_6B6E:
00006C7E 0810 0003                  		btst	#3,(a0)
00006C82 6600                       		bne.s	loc_6B90
00006C84 2A80                       		move.l	d0,(a5)
00006C86 2A19                       		move.l	(a1)+,d5
00006C88 2819                       		move.l	(a1)+,d4
00006C8A 0A84 1000 1000             		eori.l	#$10001000,d4
00006C90 2C84                       		move.l	d4,(a6)
00006C92 D087                       		add.l	d7,d0
00006C94 2A80                       		move.l	d0,(a5)
00006C96 0A85 1000 1000             		eori.l	#$10001000,d5
00006C9C 2C85                       		move.l	d5,(a6)
00006C9E 4E75                       		rts	
00006CA0                            ; ===========================================================================
00006CA0                            
00006CA0                            loc_6B90:
00006CA0 2A80                       		move.l	d0,(a5)
00006CA2 2A19                       		move.l	(a1)+,d5
00006CA4 2819                       		move.l	(a1)+,d4
00006CA6 0A84 1800 1800             		eori.l	#$18001800,d4
00006CAC 4844                       		swap	d4
00006CAE 2C84                       		move.l	d4,(a6)
00006CB0 D087                       		add.l	d7,d0
00006CB2 2A80                       		move.l	d0,(a5)
00006CB4 0A85 1800 1800             		eori.l	#$18001800,d5
00006CBA 4845                       		swap	d5
00006CBC 2C85                       		move.l	d5,(a6)
00006CBE 4E75                       		rts	
00006CC0                            ; End of function sub_6B32
00006CC0                            
00006CC0                            ; ===========================================================================
00006CC0 4E75                       		rts	
00006CC2                            ; ===========================================================================
00006CC2 2A80                       		move.l	d0,(a5)
00006CC4 3A3C 2000                  		move.w	#$2000,d5
00006CC8 3819                       		move.w	(a1)+,d4
00006CCA D845                       		add.w	d5,d4
00006CCC 3C84                       		move.w	d4,(a6)
00006CCE 3819                       		move.w	(a1)+,d4
00006CD0 D845                       		add.w	d5,d4
00006CD2 3C84                       		move.w	d4,(a6)
00006CD4 D087                       		add.l	d7,d0
00006CD6 2A80                       		move.l	d0,(a5)
00006CD8 3819                       		move.w	(a1)+,d4
00006CDA D845                       		add.w	d5,d4
00006CDC 3C84                       		move.w	d4,(a6)
00006CDE 3819                       		move.w	(a1)+,d4
00006CE0 D845                       		add.w	d5,d4
00006CE2 3C84                       		move.w	d4,(a6)
00006CE4 4E75                       		rts	
00006CE6                            
00006CE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006CE6                            
00006CE6                            
00006CE6                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00006CE6 43F8 B000                  		lea	($FFFFB000).w,a1
00006CEA D86B 0004                  		add.w	4(a3),d4
00006CEE DA53                       		add.w	(a3),d5
00006CF0 3604                       		move.w	d4,d3
00006CF2 E24B                       		lsr.w	#1,d3
00006CF4 0243 0380                  		andi.w	#$380,d3
00006CF8 E64D                       		lsr.w	#3,d5
00006CFA 3005                       		move.w	d5,d0
00006CFC EA48                       		lsr.w	#5,d0
00006CFE 0240 007F                  		andi.w	#$7F,d0
00006D02 D043                       		add.w	d3,d0
00006D04 76FF                       		moveq	#-1,d3
00006D06 1634 0000                  		move.b	(a4,d0.w),d3
00006D0A 6700                       		beq.s	locret_6C1E
00006D0C 5303                       		subq.b	#1,d3
00006D0E 0243 007F                  		andi.w	#$7F,d3
00006D12 EE5B                       		ror.w	#7,d3
00006D14 D844                       		add.w	d4,d4
00006D16 0244 01E0                  		andi.w	#$1E0,d4
00006D1A 0245 001E                  		andi.w	#$1E,d5
00006D1E D644                       		add.w	d4,d3
00006D20 D645                       		add.w	d5,d3
00006D22 2043                       		movea.l	d3,a0
00006D24 3610                       		move.w	(a0),d3
00006D26 0243 03FF                  		andi.w	#$3FF,d3
00006D2A E74B                       		lsl.w	#3,d3
00006D2C D2C3                       		adda.w	d3,a1
00006D2E                            
00006D2E                            locret_6C1E:
00006D2E 4E75                       		rts	
00006D30                            ; End of function sub_6BD6
00006D30                            
00006D30                            
00006D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D30                            
00006D30                            
00006D30                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00006D30 D86B 0004                  		add.w	4(a3),d4
00006D34 DA53                       		add.w	(a3),d5
00006D36 0244 00F0                  		andi.w	#$F0,d4
00006D3A 0245 01F0                  		andi.w	#$1F0,d5
00006D3E E94C                       		lsl.w	#4,d4
00006D40 E44D                       		lsr.w	#2,d5
00006D42 D845                       		add.w	d5,d4
00006D44 7003                       		moveq	#3,d0
00006D46 4840                       		swap	d0
00006D48 3004                       		move.w	d4,d0
00006D4A 4E75                       		rts	
00006D4C                            ; End of function sub_6C20
00006D4C                            
00006D4C                            
00006D4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D4C                            ; not used
00006D4C                            
00006D4C                            
00006D4C                            sub_6C3C:
00006D4C D86B 0004                  		add.w	4(a3),d4
00006D50 DA53                       		add.w	(a3),d5
00006D52 0244 00F0                  		andi.w	#$F0,d4
00006D56 0245 01F0                  		andi.w	#$1F0,d5
00006D5A E94C                       		lsl.w	#4,d4
00006D5C E44D                       		lsr.w	#2,d5
00006D5E D845                       		add.w	d5,d4
00006D60 7002                       		moveq	#2,d0
00006D62 4840                       		swap	d0
00006D64 3004                       		move.w	d4,d0
00006D66 4E75                       		rts	
00006D68                            ; End of function sub_6C3C
00006D68                            
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            ; Subroutine to	load tiles as soon as the level	appears
00006D68                            ; ---------------------------------------------------------------------------
00006D68                            
00006D68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D68                            
00006D68                            
00006D68                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00006D68 4BF9 00C0 0004             		lea	($C00004).l,a5
00006D6E 4DF9 00C0 0000             		lea	($C00000).l,a6
00006D74 47F8 F700                  		lea	($FFFFF700).w,a3
00006D78 49F8 A400                  		lea	($FFFFA400).w,a4
00006D7C 343C 4000                  		move.w	#$4000,d2
00006D80 6100                       		bsr.s	LoadTilesFromStart2
00006D82 47F8 F708                  		lea	($FFFFF708).w,a3
00006D86 49F8 A440                  		lea	($FFFFA440).w,a4
00006D8A 343C 6000                  		move.w	#$6000,d2
00006D8E                            ; End of function LoadTilesFromStart
00006D8E                            
00006D8E                            
00006D8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D8E                            
00006D8E                            
00006D8E                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00006D8E 78F0                       		moveq	#-$10,d4
00006D90 7C0F                       		moveq	#$F,d6
00006D92                            
00006D92                            loc_6C82:
00006D92 48E7 0E00                  		movem.l	d4-d6,-(sp)
00006D96 7A00                       		moveq	#0,d5
00006D98 3204                       		move.w	d4,d1
00006D9A 6100 FF94                  		bsr.w	sub_6C20
00006D9E 3801                       		move.w	d1,d4
00006DA0 7A00                       		moveq	#0,d5
00006DA2 7C1F                       		moveq	#$1F,d6
00006DA4 6100 FE44                  		bsr.w	sub_6ADA
00006DA8 4CDF 0070                  		movem.l	(sp)+,d4-d6
00006DAC 0644 0010                  		addi.w	#$10,d4
00006DB0 51CE FFE0                  		dbf	d6,loc_6C82
00006DB4 4E75                       		rts	
00006DB6                            ; End of function LoadTilesFromStart2
00006DB6                            
00006DB6                            ; ---------------------------------------------------------------------------
00006DB6                            ; Main Load Block loading subroutine
00006DB6                            ; ---------------------------------------------------------------------------
00006DB6                            
00006DB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006DB6                            
00006DB6                            
00006DB6                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00006DB6 7000                       		moveq	#0,d0
00006DB8 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006DBC E948                       		lsl.w	#4,d0
00006DBE 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00006DC4 45F2 0000                  		lea	(a2,d0.w),a2
00006DC8 2F0A                       		move.l	a2,-(sp)
00006DCA 588A                       		addq.l	#4,a2
00006DCC 205A                       		movea.l	(a2)+,a0
00006DCE 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00006DD2 303C 0000                  		move.w	#0,d0
00006DD6 6100 A946                  		bsr.w	EniDec
00006DDA 205A                       		movea.l	(a2)+,a0
00006DDC 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00006DE2 6100 AAB8                  		bsr.w	KosDec
00006DE6 6100 0000                  		bsr.w	LevelLayoutLoad
00006DEA 301A                       		move.w	(a2)+,d0
00006DEC 3012                       		move.w	(a2),d0
00006DEE 0240 00FF                  		andi.w	#$FF,d0
00006DF2 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00006DF8 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00006DFA 700C                       		moveq	#$C,d0		; use SB3 pallet
00006DFC                            
00006DFC                            MLB_ChkSBZPal:
00006DFC 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00006E02 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00006E04 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00006E0A 6600                       		bne.s	MLB_NormalPal	; if not, branch
00006E0C                            
00006E0C                            MLB_UsePal0E:
00006E0C 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00006E0E                            
00006E0E                            MLB_NormalPal:
00006E0E 6100 B2EC                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00006E12 245F                       		movea.l	(sp)+,a2
00006E14 584A                       		addq.w	#4,a2
00006E16 7000                       		moveq	#0,d0
00006E18 1012                       		move.b	(a2),d0
00006E1A 6700                       		beq.s	locret_6D10
00006E1C 6100 A762                  		bsr.w	LoadPLC		; load pattern load cues
00006E20                            
00006E20                            locret_6D10:
00006E20 4E75                       		rts	
00006E22                            ; End of function MainLoadBlockLoad
00006E22                            
00006E22                            ; ---------------------------------------------------------------------------
00006E22                            ; Level	layout loading subroutine
00006E22                            ; ---------------------------------------------------------------------------
00006E22                            
00006E22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E22                            
00006E22                            
00006E22                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00006E22 47F8 A400                  		lea	($FFFFA400).w,a3
00006E26 323C 01FF                  		move.w	#$1FF,d1
00006E2A 7000                       		moveq	#0,d0
00006E2C                            
00006E2C                            LevLoad_ClrRam:
00006E2C 26C0                       		move.l	d0,(a3)+
00006E2E 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00006E32                            
00006E32 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00006E36 7200                       		moveq	#0,d1
00006E38 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00006E3C 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00006E40 7202                       		moveq	#2,d1
00006E42                            ; End of function LevelLayoutLoad
00006E42                            
00006E42                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00006E42                            
00006E42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E42                            
00006E42                            
00006E42                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00006E42 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006E46 ED08                       		lsl.b	#6,d0
00006E48 EA48                       		lsr.w	#5,d0
00006E4A 3400                       		move.w	d0,d2
00006E4C D040                       		add.w	d0,d0
00006E4E D042                       		add.w	d2,d0
00006E50 D041                       		add.w	d1,d0
00006E52 43F9 0000 0000             		lea	(Level_Index).l,a1
00006E58 3031 0000                  		move.w	(a1,d0.w),d0
00006E5C 43F1 0000                  		lea	(a1,d0.w),a1
00006E60 7200                       		moveq	#0,d1
00006E62 3401                       		move.w	d1,d2
00006E64 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00006E66 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00006E68                            
00006E68                            LevLoad_NumRows:
00006E68 3001                       		move.w	d1,d0
00006E6A 204B                       		movea.l	a3,a0
00006E6C                            
00006E6C                            LevLoad_Row:
00006E6C 10D9                       		move.b	(a1)+,(a0)+
00006E6E 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00006E72 47EB 0080                  		lea	$80(a3),a3	; do next row
00006E76 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00006E7A 4E75                       		rts	
00006E7C                            ; End of function LevelLayoutLoad2
00006E7C                            
00006E7C                            ; ---------------------------------------------------------------------------
00006E7C                            ; Dynamic screen resize	loading	subroutine
00006E7C                            ; ---------------------------------------------------------------------------
00006E7C                            
00006E7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006E7C                            
00006E7C                            
00006E7C                            DynScrResizeLoad:			; XREF: DeformBgLayer
00006E7C 7000                       		moveq	#0,d0
00006E7E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006E82 D040                       		add.w	d0,d0
00006E84 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00006E88 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00006E8C 7202                       		moveq	#2,d1
00006E8E 3038 F726                  		move.w	($FFFFF726).w,d0
00006E92 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00006E96 6700                       		beq.s	locret_6DAA
00006E98 6400                       		bcc.s	loc_6DAC
00006E9A 4441                       		neg.w	d1
00006E9C 3038 F704                  		move.w	($FFFFF704).w,d0
00006EA0 B078 F726                  		cmp.w	($FFFFF726).w,d0
00006EA4 6300                       		bls.s	loc_6DA0
00006EA6 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00006EAA 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00006EB0                            
00006EB0                            loc_6DA0:
00006EB0 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006EB4 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006EBA                            
00006EBA                            locret_6DAA:
00006EBA 4E75                       		rts	
00006EBC                            ; ===========================================================================
00006EBC                            
00006EBC                            loc_6DAC:				; XREF: DynScrResizeLoad
00006EBC 3038 F704                  		move.w	($FFFFF704).w,d0
00006EC0 5040                       		addq.w	#8,d0
00006EC2 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006EC6 6500                       		bcs.s	loc_6DC4
00006EC8 0838 0001 D022             		btst	#1,($FFFFD022).w
00006ECE 6700                       		beq.s	loc_6DC4
00006ED0 D241                       		add.w	d1,d1
00006ED2 D241                       		add.w	d1,d1
00006ED4                            
00006ED4                            loc_6DC4:
00006ED4 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006ED8 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006EDE 4E75                       		rts	
00006EE0                            ; End of function DynScrResizeLoad
00006EE0                            
00006EE0                            ; ===========================================================================
00006EE0                            ; ---------------------------------------------------------------------------
00006EE0                            ; Offset index for dynamic screen resizing
00006EE0                            ; ---------------------------------------------------------------------------
00006EE0 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00006EE4 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00006EE8 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00006EEC 0000                       		dc.w Resize_Ending-Resize_Index
00006EEE                            ; ===========================================================================
00006EEE                            ; ---------------------------------------------------------------------------
00006EEE                            ; Green	Hill Zone dynamic screen resizing
00006EEE                            ; ---------------------------------------------------------------------------
00006EEE                            
00006EEE                            Resize_GHZ:				; XREF: Resize_Index
00006EEE 7000                       		moveq	#0,d0
00006EF0 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006EF4 D040                       		add.w	d0,d0
00006EF6 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00006EFA 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00006EFE                            ; ===========================================================================
00006EFE 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00006F00 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00006F02 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00006F04                            ; ===========================================================================
00006F04                            
00006F04                            Resize_GHZ1:
00006F04 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00006F0A 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00006F10 6500                       		bcs.s	locret_6E08	; if not, branch
00006F12 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00006F18                            
00006F18                            locret_6E08:
00006F18 4E75                       		rts	
00006F1A                            ; ===========================================================================
00006F1A                            
00006F1A                            Resize_GHZ2:
00006F1A 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F20 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00006F26 6500                       		bcs.s	locret_6E3A
00006F28 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00006F2E 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00006F34 6500                       		bcs.s	locret_6E3A
00006F36 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006F3C 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00006F42 6500                       		bcs.s	locret_6E3A
00006F44 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F4A                            
00006F4A                            locret_6E3A:
00006F4A 4E75                       		rts	
00006F4C                            ; ===========================================================================
00006F4C                            
00006F4C                            Resize_GHZ3:
00006F4C 7000                       		moveq	#0,d0
00006F4E 1038 F742                  		move.b	($FFFFF742).w,d0
00006F52 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00006F56 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00006F5A                            ; ===========================================================================
00006F5A 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00006F5C 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00006F5E 0000                       		dc.w Resize_GHZ3end-off_6E4A
00006F60                            ; ===========================================================================
00006F60                            
00006F60                            Resize_GHZ3main:
00006F60 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006F66 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00006F6C 6500                       		bcs.s	locret_6E96
00006F6E 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00006F74 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006F7A 6500                       		bcs.s	locret_6E96
00006F7C 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00006F82 6500                       		bcs.s	loc_6E98
00006F84 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006F8A 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00006F90 6400                       		bcc.s	loc_6E8E
00006F92 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00006F98 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00006F9E                            
00006F9E                            loc_6E8E:
00006F9E 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00006FA4 6400                       		bcc.s	loc_6E98
00006FA6                            
00006FA6                            locret_6E96:
00006FA6 4E75                       		rts	
00006FA8                            ; ===========================================================================
00006FA8                            
00006FA8                            loc_6E98:
00006FA8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006FAE 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FB2 4E75                       		rts	
00006FB4                            ; ===========================================================================
00006FB4                            
00006FB4                            Resize_GHZ3boss:
00006FB4 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006FBA 6400                       		bcc.s	loc_6EB0
00006FBC 5538 F742                  		subq.b	#2,($FFFFF742).w
00006FC0                            
00006FC0                            loc_6EB0:
00006FC0 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00006FC6 6500                       		bcs.s	locret_6EE8
00006FC8 6100 0000                  		bsr.w	SingleObjLoad
00006FCC 6600                       		bne.s	loc_6ED0
00006FCE 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00006FD2 337C 2A60 0008             		move.w	#$2A60,8(a1)
00006FD8 337C 0280 000C             		move.w	#$280,$C(a1)
00006FDE                            
00006FDE                            loc_6ED0:
00006FDE 303C 008C                  		move.w	#$8C,d0
00006FE2 6100 A3B2                  		bsr.w	PlaySound	; play boss music
00006FE6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00006FEC 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FF0 7011                       		moveq	#$11,d0
00006FF2 6000 A58C                  		bra.w	LoadPLC		; load boss patterns
00006FF6                            ; ===========================================================================
00006FF6                            
00006FF6                            locret_6EE8:
00006FF6 4E75                       		rts	
00006FF8                            ; ===========================================================================
00006FF8                            
00006FF8                            Resize_GHZ3end:
00006FF8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00006FFE 4E75                       		rts	
00007000                            ; ===========================================================================
00007000                            ; ---------------------------------------------------------------------------
00007000                            ; Labyrinth Zone dynamic screen	resizing
00007000                            ; ---------------------------------------------------------------------------
00007000                            
00007000                            Resize_LZ:				; XREF: Resize_Index
00007000 7000                       		moveq	#0,d0
00007002 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007006 D040                       		add.w	d0,d0
00007008 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
0000700C 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007010                            ; ===========================================================================
00007010 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007012 0000                       		dc.w Resize_LZ12-Resize_LZx
00007014 0000                       		dc.w Resize_LZ3-Resize_LZx
00007016 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007018                            ; ===========================================================================
00007018                            
00007018                            Resize_LZ12:
00007018 4E75                       		rts	
0000701A                            ; ===========================================================================
0000701A                            
0000701A                            Resize_LZ3:
0000701A 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
0000701E 6700                       		beq.s	loc_6F28	; if not, branch
00007020 43F8 A506                  		lea	($FFFFA506).w,a1
00007024 0C11 0007                  		cmpi.b	#7,(a1)
00007028 6700                       		beq.s	loc_6F28
0000702A 12BC 0007                  		move.b	#7,(a1)		; modify level layout
0000702E 303C 00B7                  		move.w	#$B7,d0
00007032 6100 A368                  		bsr.w	PlaySound_Special ; play rumbling sound
00007036                            
00007036                            loc_6F28:
00007036 4A38 F742                  		tst.b	($FFFFF742).w
0000703A 6600                       		bne.s	locret_6F64
0000703C 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007042 6500                       		bcs.s	locret_6F62
00007044 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
0000704A 6400                       		bcc.s	locret_6F62
0000704C 6100 0000                  		bsr.w	SingleObjLoad
00007050 6600                       		bne.s	loc_6F4A
00007052 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007056                            
00007056                            loc_6F4A:
00007056 303C 008C                  		move.w	#$8C,d0
0000705A 6100 A33A                  		bsr.w	PlaySound	; play boss music
0000705E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007064 5438 F742                  		addq.b	#2,($FFFFF742).w
00007068 7011                       		moveq	#$11,d0
0000706A 6000 A514                  		bra.w	LoadPLC		; load boss patterns
0000706E                            ; ===========================================================================
0000706E                            
0000706E                            locret_6F62:
0000706E 4E75                       		rts	
00007070                            ; ===========================================================================
00007070                            
00007070                            locret_6F64:
00007070 4E75                       		rts	
00007072                            ; ===========================================================================
00007072                            
00007072                            Resize_SBZ3:
00007072 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007078 6500                       		bcs.s	locret_6F8C
0000707A 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007080 6400                       		bcc.s	locret_6F8C	; if not, branch
00007082 4238 FE30                  		clr.b	($FFFFFE30).w
00007086 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000708C 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007092 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007098                            
00007098                            locret_6F8C:
00007098 4E75                       		rts	
0000709A                            ; ===========================================================================
0000709A                            ; ---------------------------------------------------------------------------
0000709A                            ; Marble Zone dynamic screen resizing
0000709A                            ; ---------------------------------------------------------------------------
0000709A                            
0000709A                            Resize_MZ:				; XREF: Resize_Index
0000709A 7000                       		moveq	#0,d0
0000709C 1038 FE11                  		move.b	($FFFFFE11).w,d0
000070A0 D040                       		add.w	d0,d0
000070A2 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
000070A6 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
000070AA                            ; ===========================================================================
000070AA 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
000070AC 0000                       		dc.w Resize_MZ2-Resize_MZx
000070AE 0000                       		dc.w Resize_MZ3-Resize_MZx
000070B0                            ; ===========================================================================
000070B0                            
000070B0                            Resize_MZ1:
000070B0 7000                       		moveq	#0,d0
000070B2 1038 F742                  		move.b	($FFFFF742).w,d0
000070B6 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
000070BA 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
000070BE                            ; ===========================================================================
000070BE 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
000070C0 0000                       		dc.w loc_6FEA-off_6FB2
000070C2 0000                       		dc.w loc_702E-off_6FB2
000070C4 0000                       		dc.w loc_7050-off_6FB2
000070C6                            ; ===========================================================================
000070C6                            
000070C6                            loc_6FBA:
000070C6 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
000070CC 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
000070D2 6500                       		bcs.s	locret_6FE8
000070D4 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
000070DA 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
000070E0 6500                       		bcs.s	locret_6FE8
000070E2 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
000070E8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000070EE 6500                       		bcs.s	locret_6FE8
000070F0 5438 F742                  		addq.b	#2,($FFFFF742).w
000070F4                            
000070F4                            locret_6FE8:
000070F4 4E75                       		rts	
000070F6                            ; ===========================================================================
000070F6                            
000070F6                            loc_6FEA:
000070F6 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
000070FC 6400                       		bcc.s	loc_6FF8
000070FE 5538 F742                  		subq.b	#2,($FFFFF742).w
00007102 4E75                       		rts	
00007104                            ; ===========================================================================
00007104                            
00007104                            loc_6FF8:
00007104 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000710A 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007110 6400                       		bcc.s	locret_702C
00007112 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007118 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
0000711E 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007124 6400                       		bcc.s	locret_702C
00007126 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
0000712C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007132 6500                       		bcs.s	locret_702C
00007134 5438 F742                  		addq.b	#2,($FFFFF742).w
00007138                            
00007138                            locret_702C:
00007138 4E75                       		rts	
0000713A                            ; ===========================================================================
0000713A                            
0000713A                            loc_702E:
0000713A 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007140 6400                       		bcc.s	loc_703C
00007142 5538 F742                  		subq.b	#2,($FFFFF742).w
00007146 4E75                       		rts	
00007148                            ; ===========================================================================
00007148                            
00007148                            loc_703C:
00007148 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
0000714E 6500                       		bcs.s	locret_704E
00007150 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007156 5438 F742                  		addq.b	#2,($FFFFF742).w
0000715A                            
0000715A                            locret_704E:
0000715A 4E75                       		rts	
0000715C                            ; ===========================================================================
0000715C                            
0000715C                            loc_7050:
0000715C 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007162 6500                       		bcs.s	locret_7072
00007164 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000716A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007170 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007176 6500                       		bcs.s	locret_7072
00007178 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000717E                            
0000717E                            locret_7072:
0000717E 4E75                       		rts	
00007180                            ; ===========================================================================
00007180                            
00007180                            Resize_MZ2:
00007180 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007186 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
0000718C 6500                       		bcs.s	locret_7088
0000718E 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007194                            
00007194                            locret_7088:
00007194 4E75                       		rts	
00007196                            ; ===========================================================================
00007196                            
00007196                            Resize_MZ3:
00007196 7000                       		moveq	#0,d0
00007198 1038 F742                  		move.b	($FFFFF742).w,d0
0000719C 303B 0000                  		move.w	off_7098(pc,d0.w),d0
000071A0 4EFB 0000                  		jmp	off_7098(pc,d0.w)
000071A4                            ; ===========================================================================
000071A4 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
000071A6 0000                       		dc.w Resize_MZ3end-off_7098
000071A8                            ; ===========================================================================
000071A8                            
000071A8                            Resize_MZ3boss:
000071A8 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
000071AE 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
000071B4 6500                       		bcs.s	locret_70E8
000071B6 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000071BC 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000071C2 6500                       		bcs.s	locret_70E8
000071C4 6100 0000                  		bsr.w	SingleObjLoad
000071C8 6600                       		bne.s	loc_70D0
000071CA 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000071CE 337C 19F0 0008             		move.w	#$19F0,8(a1)
000071D4 337C 022C 000C             		move.w	#$22C,$C(a1)
000071DA                            
000071DA                            loc_70D0:
000071DA 303C 008C                  		move.w	#$8C,d0
000071DE 6100 A1B6                  		bsr.w	PlaySound	; play boss music
000071E2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000071E8 5438 F742                  		addq.b	#2,($FFFFF742).w
000071EC 7011                       		moveq	#$11,d0
000071EE 6000 A390                  		bra.w	LoadPLC		; load boss patterns
000071F2                            ; ===========================================================================
000071F2                            
000071F2                            locret_70E8:
000071F2 4E75                       		rts	
000071F4                            ; ===========================================================================
000071F4                            
000071F4                            Resize_MZ3end:
000071F4 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000071FA 4E75                       		rts	
000071FC                            ; ===========================================================================
000071FC                            ; ---------------------------------------------------------------------------
000071FC                            ; Star Light Zone dynamic screen resizing
000071FC                            ; ---------------------------------------------------------------------------
000071FC                            
000071FC                            Resize_SLZ:				; XREF: Resize_Index
000071FC 7000                       		moveq	#0,d0
000071FE 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007202 D040                       		add.w	d0,d0
00007204 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007208 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
0000720C                            ; ===========================================================================
0000720C 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
0000720E 0000                       		dc.w Resize_SLZ12-Resize_SLZx
00007210 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00007212                            ; ===========================================================================
00007212                            
00007212                            Resize_SLZ12:
00007212 4E75                       		rts	
00007214                            ; ===========================================================================
00007214                            
00007214                            Resize_SLZ3:
00007214 7000                       		moveq	#0,d0
00007216 1038 F742                  		move.b	($FFFFF742).w,d0
0000721A 303B 0000                  		move.w	off_7118(pc,d0.w),d0
0000721E 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007222                            ; ===========================================================================
00007222 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007224 0000                       		dc.w Resize_SLZ3boss-off_7118
00007226 0000                       		dc.w Resize_SLZ3end-off_7118
00007228                            ; ===========================================================================
00007228                            
00007228                            Resize_SLZ3main:
00007228 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
0000722E 6500                       		bcs.s	locret_7130
00007230 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007236 5438 F742                  		addq.b	#2,($FFFFF742).w
0000723A                            
0000723A                            locret_7130:
0000723A 4E75                       		rts	
0000723C                            ; ===========================================================================
0000723C                            
0000723C                            Resize_SLZ3boss:
0000723C 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007242 6500                       		bcs.s	locret_715C
00007244 6100 0000                  		bsr.w	SingleObjLoad
00007248 6600                       		bne.s	loc_7144
0000724A 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
0000724E                            
0000724E                            loc_7144:
0000724E 303C 008C                  		move.w	#$8C,d0
00007252 6100 A142                  		bsr.w	PlaySound	; play boss music
00007256 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000725C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007260 7011                       		moveq	#$11,d0
00007262 6000 A31C                  		bra.w	LoadPLC		; load boss patterns
00007266                            ; ===========================================================================
00007266                            
00007266                            locret_715C:
00007266 4E75                       		rts	
00007268                            ; ===========================================================================
00007268                            
00007268                            Resize_SLZ3end:
00007268 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000726E 4E75                       		rts
00007270 4E75                       		rts
00007272                            ; ===========================================================================
00007272                            ; ---------------------------------------------------------------------------
00007272                            ; Spring Yard Zone dynamic screen resizing
00007272                            ; ---------------------------------------------------------------------------
00007272                            
00007272                            Resize_SYZ:				; XREF: Resize_Index
00007272 7000                       		moveq	#0,d0
00007274 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007278 D040                       		add.w	d0,d0
0000727A 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
0000727E 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007282                            ; ===========================================================================
00007282 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007284 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00007286 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00007288                            ; ===========================================================================
00007288                            
00007288                            Resize_SYZ1:
00007288 4E75                       		rts	
0000728A                            ; ===========================================================================
0000728A                            
0000728A                            Resize_SYZ2:
0000728A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007290 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00007296 6500                       		bcs.s	locret_71A2
00007298 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
0000729E 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
000072A4 6500                       		bcs.s	locret_71A2
000072A6 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000072AC                            
000072AC                            locret_71A2:
000072AC 4E75                       		rts	
000072AE                            ; ===========================================================================
000072AE                            
000072AE                            Resize_SYZ3:
000072AE 7000                       		moveq	#0,d0
000072B0 1038 F742                  		move.b	($FFFFF742).w,d0
000072B4 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000072B8 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000072BC                            ; ===========================================================================
000072BC 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000072BE 0000                       		dc.w Resize_SYZ3boss-off_71B2
000072C0 0000                       		dc.w Resize_SYZ3end-off_71B2
000072C2                            ; ===========================================================================
000072C2                            
000072C2                            Resize_SYZ3main:
000072C2 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000072C8 6500                       		bcs.s	locret_71CE
000072CA 6100 0000                  		bsr.w	SingleObjLoad
000072CE 6600                       		bne.s	locret_71CE
000072D0 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000072D4 5438 F742                  		addq.b	#2,($FFFFF742).w
000072D8                            
000072D8                            locret_71CE:
000072D8 4E75                       		rts	
000072DA                            ; ===========================================================================
000072DA                            
000072DA                            Resize_SYZ3boss:
000072DA 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000072E0 6500                       		bcs.s	locret_7200
000072E2 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000072E8 6100 0000                  		bsr.w	SingleObjLoad
000072EC 6600                       		bne.s	loc_71EC
000072EE 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000072F2 5438 F742                  		addq.b	#2,($FFFFF742).w
000072F6                            
000072F6                            loc_71EC:
000072F6 303C 008C                  		move.w	#$8C,d0
000072FA 6100 A09A                  		bsr.w	PlaySound	; play boss music
000072FE 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007304 7011                       		moveq	#$11,d0
00007306 6000 A278                  		bra.w	LoadPLC		; load boss patterns
0000730A                            ; ===========================================================================
0000730A                            
0000730A                            locret_7200:
0000730A 4E75                       		rts	
0000730C                            ; ===========================================================================
0000730C                            
0000730C                            Resize_SYZ3end:
0000730C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007312 4E75                       		rts	
00007314                            ; ===========================================================================
00007314                            ; ---------------------------------------------------------------------------
00007314                            ; Scrap	Brain Zone dynamic screen resizing
00007314                            ; ---------------------------------------------------------------------------
00007314                            
00007314                            Resize_SBZ:				; XREF: Resize_Index
00007314 7000                       		moveq	#0,d0
00007316 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000731A D040                       		add.w	d0,d0
0000731C 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007320 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007324                            ; ===========================================================================
00007324 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00007326 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00007328 0000                       		dc.w Resize_FZ-Resize_SBZx
0000732A                            ; ===========================================================================
0000732A                            
0000732A                            Resize_SBZ1:
0000732A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007330 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00007336 6500                       		bcs.s	locret_7242
00007338 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
0000733E 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007344 6500                       		bcs.s	locret_7242
00007346 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
0000734C                            
0000734C                            locret_7242:
0000734C 4E75                       		rts	
0000734E                            ; ===========================================================================
0000734E                            
0000734E                            Resize_SBZ2:
0000734E 7000                       		moveq	#0,d0
00007350 1038 F742                  		move.b	($FFFFF742).w,d0
00007354 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00007358 4EFB 0000                  		jmp	off_7252(pc,d0.w)
0000735C                            ; ===========================================================================
0000735C 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
0000735E 0000                       		dc.w Resize_SBZ2boss-off_7252
00007360 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007362 0000                       		dc.w Resize_SBZ2end-off_7252
00007364                            ; ===========================================================================
00007364                            
00007364                            Resize_SBZ2main:
00007364 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000736A 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007370 6500                       		bcs.s	locret_727A
00007372 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00007378 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
0000737E 6500                       		bcs.s	locret_727A
00007380 5438 F742                  		addq.b	#2,($FFFFF742).w
00007384                            
00007384                            locret_727A:
00007384 4E75                       		rts	
00007386                            ; ===========================================================================
00007386                            
00007386                            Resize_SBZ2boss:
00007386 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
0000738C 6500                       		bcs.s	locret_7298
0000738E 6100 0000                  		bsr.w	SingleObjLoad
00007392 6600                       		bne.s	locret_7298
00007394 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00007398 5438 F742                  		addq.b	#2,($FFFFF742).w
0000739C 701E                       		moveq	#$1E,d0
0000739E 6000 A1E0                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
000073A2                            ; ===========================================================================
000073A2                            
000073A2                            locret_7298:
000073A2 4E75                       		rts	
000073A4                            ; ===========================================================================
000073A4                            
000073A4                            Resize_SBZ2boss2:
000073A4 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000073AA 6500                       		bcs.s	loc_72B6
000073AC 6100 0000                  		bsr.w	SingleObjLoad
000073B0 6600                       		bne.s	loc_72B0
000073B2 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000073B6 5438 F742                  		addq.b	#2,($FFFFF742).w
000073BA                            
000073BA                            loc_72B0:
000073BA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000073C0                            
000073C0                            loc_72B6:
000073C0 6000                       		bra.s	loc_72C2
000073C2                            ; ===========================================================================
000073C2                            
000073C2                            Resize_SBZ2end:
000073C2 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000073C8 6500                       		bcs.s	loc_72C2
000073CA 4E75                       		rts	
000073CC                            ; ===========================================================================
000073CC                            
000073CC                            loc_72C2:
000073CC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000073D2 4E75                       		rts	
000073D4                            ; ===========================================================================
000073D4                            
000073D4                            Resize_FZ:
000073D4 7000                       		moveq	#0,d0
000073D6 1038 F742                  		move.b	($FFFFF742).w,d0
000073DA 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000073DE 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000073E2                            ; ===========================================================================
000073E2 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000073E6 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000073EA 0000                       		dc.w Resize_FZend2-off_72D8
000073EC                            ; ===========================================================================
000073EC                            
000073EC                            Resize_FZmain:
000073EC 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000073F2 6500                       		bcs.s	loc_72F4
000073F4 5438 F742                  		addq.b	#2,($FFFFF742).w
000073F8 701F                       		moveq	#$1F,d0
000073FA 6100 A184                  		bsr.w	LoadPLC		; load FZ boss patterns
000073FE                            
000073FE                            loc_72F4:
000073FE 60CC                       		bra.s	loc_72C2
00007400                            ; ===========================================================================
00007400                            
00007400                            Resize_FZboss:
00007400 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00007406 6500                       		bcs.s	loc_7312
00007408 6100 0000                  		bsr.w	SingleObjLoad
0000740C 6600                       		bne.s	loc_7312
0000740E 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
00007412 5438 F742                  		addq.b	#2,($FFFFF742).w
00007416 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
0000741C                            
0000741C                            loc_7312:
0000741C 60AE                       		bra.s	loc_72C2
0000741E                            ; ===========================================================================
0000741E                            
0000741E                            Resize_FZend:
0000741E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007424 6500                       		bcs.s	loc_7320
00007426 5438 F742                  		addq.b	#2,($FFFFF742).w
0000742A                            
0000742A                            loc_7320:
0000742A 60A0                       		bra.s	loc_72C2
0000742C                            ; ===========================================================================
0000742C                            
0000742C                            locret_7322:
0000742C 4E75                       		rts	
0000742E                            ; ===========================================================================
0000742E                            
0000742E                            Resize_FZend2:
0000742E 609C                       		bra.s	loc_72C2
00007430                            ; ===========================================================================
00007430                            ; ---------------------------------------------------------------------------
00007430                            ; Ending sequence dynamic screen resizing (empty)
00007430                            ; ---------------------------------------------------------------------------
00007430                            
00007430                            Resize_Ending:				; XREF: Resize_Index
00007430 4E75                       		rts	
00007432                            ; ===========================================================================
00007432                            ; ---------------------------------------------------------------------------
00007432                            ; Object 11 - GHZ bridge
00007432                            ; ---------------------------------------------------------------------------
00007432                            
00007432                            Obj11:					; XREF: Obj_Index
00007432 7000                       		moveq	#0,d0
00007434 1028 0024                  		move.b	$24(a0),d0
00007438 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
0000743C 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007440                            ; ===========================================================================
00007440 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007444 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00007448 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
0000744C                            ; ===========================================================================
0000744C                            
0000744C                            Obj11_Main:				; XREF: Obj11_Index
0000744C 5428 0024                  		addq.b	#2,$24(a0)
00007450 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00007458 317C 438E 0002             		move.w	#$438E,2(a0)
0000745E 117C 0004 0001             		move.b	#4,1(a0)
00007464 117C 0003 0018             		move.b	#3,$18(a0)
0000746A 117C 0080 0019             		move.b	#$80,$19(a0)
00007470 3428 000C                  		move.w	$C(a0),d2
00007474 3628 0008                  		move.w	8(a0),d3
00007478 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
0000747A 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
0000747E 7200                       		moveq	#0,d1
00007480 1212                       		move.b	(a2),d1		; copy a2 to d1
00007482 14FC 0000                  		move.b	#0,(a2)+
00007486 3001                       		move.w	d1,d0
00007488 E248                       		lsr.w	#1,d0
0000748A E948                       		lsl.w	#4,d0
0000748C 9640                       		sub.w	d0,d3
0000748E 5501                       		subq.b	#2,d1
00007490 6500                       		bcs.s	Obj11_Action
00007492                            
00007492                            Obj11_MakeBdg:
00007492 6100 0000                  		bsr.w	SingleObjLoad
00007496 6600                       		bne.s	Obj11_Action
00007498 5228 0028                  		addq.b	#1,$28(a0)
0000749C B668 0008                  		cmp.w	8(a0),d3
000074A0 6600                       		bne.s	loc_73B8
000074A2 0643 0010                  		addi.w	#$10,d3
000074A6 3142 000C                  		move.w	d2,$C(a0)
000074AA 3142 003C                  		move.w	d2,$3C(a0)
000074AE 3A08                       		move.w	a0,d5
000074B0 0445 D000                  		subi.w	#-$3000,d5
000074B4 EC4D                       		lsr.w	#6,d5
000074B6 0245 007F                  		andi.w	#$7F,d5
000074BA 14C5                       		move.b	d5,(a2)+
000074BC 5228 0028                  		addq.b	#1,$28(a0)
000074C0                            
000074C0                            loc_73B8:				; XREF: ROM:00007398j
000074C0 3A09                       		move.w	a1,d5
000074C2 0445 D000                  		subi.w	#-$3000,d5
000074C6 EC4D                       		lsr.w	#6,d5
000074C8 0245 007F                  		andi.w	#$7F,d5
000074CC 14C5                       		move.b	d5,(a2)+
000074CE 137C 000A 0024             		move.b	#$A,$24(a1)
000074D4 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000074D6 3342 000C                  		move.w	d2,$C(a1)
000074DA 3342 003C                  		move.w	d2,$3C(a1)
000074DE 3343 0008                  		move.w	d3,8(a1)
000074E2 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000074EA 337C 438E 0002             		move.w	#$438E,2(a1)
000074F0 137C 0004 0001             		move.b	#4,1(a1)
000074F6 137C 0003 0018             		move.b	#3,$18(a1)
000074FC 137C 0008 0019             		move.b	#8,$19(a1)
00007502 0643 0010                  		addi.w	#$10,d3
00007506 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
0000750A                            
0000750A                            Obj11_Action:				; XREF: Obj11_Index
0000750A 6100                       		bsr.s	Obj11_Solid
0000750C 4A28 003E                  		tst.b	$3E(a0)
00007510 6700                       		beq.s	Obj11_Display
00007512 5928 003E                  		subq.b	#4,$3E(a0)
00007516 6100 0000                  		bsr.w	Obj11_Bend
0000751A                            
0000751A                            Obj11_Display:
0000751A 6100 0000                  		bsr.w	DisplaySprite
0000751E 6000 0000                  		bra.w	Obj11_ChkDel
00007522                            
00007522                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007522                            
00007522                            
00007522                            Obj11_Solid:				; XREF: Obj11_Action
00007522 7200                       		moveq	#0,d1
00007524 1228 0028                  		move.b	$28(a0),d1
00007528 E749                       		lsl.w	#3,d1
0000752A 3401                       		move.w	d1,d2
0000752C 5041                       		addq.w	#8,d1
0000752E D442                       		add.w	d2,d2
00007530 43F8 D000                  		lea	($FFFFD000).w,a1
00007534 4A69 0012                  		tst.w	$12(a1)
00007538 6B00 0000                  		bmi.w	locret_751E
0000753C 3029 0008                  		move.w	8(a1),d0
00007540 9068 0008                  		sub.w	8(a0),d0
00007544 D041                       		add.w	d1,d0
00007546 6B00 0000                  		bmi.w	locret_751E
0000754A B042                       		cmp.w	d2,d0
0000754C 6400 0000                  		bcc.w	locret_751E
00007550 6000                       		bra.s	Platform2
00007552                            ; End of function Obj11_Solid
00007552                            
00007552                            ; ---------------------------------------------------------------------------
00007552                            ; Platform subroutine
00007552                            ; ---------------------------------------------------------------------------
00007552                            
00007552                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007552                            
00007552                            
00007552                            PlatformObject:
00007552 43F8 D000                  		lea	($FFFFD000).w,a1
00007556 4A69 0012                  		tst.w	$12(a1)
0000755A 6B00 0000                  		bmi.w	locret_751E
0000755E 3029 0008                  		move.w	8(a1),d0
00007562 9068 0008                  		sub.w	8(a0),d0
00007566 D041                       		add.w	d1,d0
00007568 6B00 0000                  		bmi.w	locret_751E
0000756C D241                       		add.w	d1,d1
0000756E B041                       		cmp.w	d1,d0
00007570 6400 0000                  		bcc.w	locret_751E
00007574                            
00007574                            Platform2:
00007574 3028 000C                  		move.w	$C(a0),d0
00007578 5140                       		subq.w	#8,d0
0000757A                            
0000757A                            Platform3:
0000757A 3429 000C                  		move.w	$C(a1),d2
0000757E 1229 0016                  		move.b	$16(a1),d1
00007582 4881                       		ext.w	d1
00007584 D242                       		add.w	d2,d1
00007586 5841                       		addq.w	#4,d1
00007588 9041                       		sub.w	d1,d0
0000758A 6200 0000                  		bhi.w	locret_751E
0000758E 0C40 FFF0                  		cmpi.w	#-$10,d0
00007592 6500 0000                  		bcs.w	locret_751E
00007596 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000759A 6B00 0000                  		bmi.w	locret_751E
0000759E 0C29 0006 0024             		cmpi.b	#6,$24(a1)
000075A4 6400 0000                  		bcc.w	locret_751E
000075A8 D440                       		add.w	d0,d2
000075AA 5642                       		addq.w	#3,d2
000075AC 3342 000C                  		move.w	d2,$C(a1)
000075B0 5428 0024                  		addq.b	#2,$24(a0)
000075B4                            
000075B4                            loc_74AE:
000075B4 0829 0003 0022             		btst	#3,$22(a1)
000075BA 6700                       		beq.s	loc_74DC
000075BC 7000                       		moveq	#0,d0
000075BE 1029 003D                  		move.b	$3D(a1),d0
000075C2 ED48                       		lsl.w	#6,d0
000075C4 0680 00FF D000             		addi.l	#$FFD000,d0
000075CA 2440                       		movea.l	d0,a2
000075CC 08AA 0003 0022             		bclr	#3,$22(a2)
000075D2 422A 0025                  		clr.b	$25(a2)
000075D6 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000075DC 6600                       		bne.s	loc_74DC
000075DE 552A 0024                  		subq.b	#2,$24(a2)
000075E2                            
000075E2                            loc_74DC:
000075E2 3008                       		move.w	a0,d0
000075E4 0440 D000                  		subi.w	#-$3000,d0
000075E8 EC48                       		lsr.w	#6,d0
000075EA 0240 007F                  		andi.w	#$7F,d0
000075EE 1340 003D                  		move.b	d0,$3D(a1)
000075F2 137C 0000 0026             		move.b	#0,$26(a1)
000075F8 337C 0000 0012             		move.w	#0,$12(a1)
000075FE 3369 0010 0014             		move.w	$10(a1),$14(a1)
00007604 0829 0001 0022             		btst	#1,$22(a1)
0000760A 6700                       		beq.s	loc_7512
0000760C 2F08                       		move.l	a0,-(sp)
0000760E 2049                       		movea.l	a1,a0
00007610 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00007616 205F                       		movea.l	(sp)+,a0
00007618                            
00007618                            loc_7512:
00007618 08E9 0003 0022             		bset	#3,$22(a1)
0000761E 08E8 0003 0022             		bset	#3,$22(a0)
00007624                            
00007624                            locret_751E:
00007624 4E75                       		rts	
00007626                            ; End of function PlatformObject
00007626                            
00007626                            ; ---------------------------------------------------------------------------
00007626                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00007626                            ; ---------------------------------------------------------------------------
00007626                            
00007626                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007626                            
00007626                            
00007626                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00007626 43F8 D000                  		lea	($FFFFD000).w,a1
0000762A 4A69 0012                  		tst.w	$12(a1)
0000762E 6B00 FFF4                  		bmi.w	locret_751E
00007632 3029 0008                  		move.w	8(a1),d0
00007636 9068 0008                  		sub.w	8(a0),d0
0000763A D041                       		add.w	d1,d0
0000763C 6BE6                       		bmi.s	locret_751E
0000763E D241                       		add.w	d1,d1
00007640 B041                       		cmp.w	d1,d0
00007642 64E0                       		bcc.s	locret_751E
00007644 0828 0000 0001             		btst	#0,1(a0)
0000764A 6700                       		beq.s	loc_754A
0000764C 4640                       		not.w	d0
0000764E D041                       		add.w	d1,d0
00007650                            
00007650                            loc_754A:
00007650 E248                       		lsr.w	#1,d0
00007652 7600                       		moveq	#0,d3
00007654 1632 0000                  		move.b	(a2,d0.w),d3
00007658 3028 000C                  		move.w	$C(a0),d0
0000765C 9043                       		sub.w	d3,d0
0000765E 6000 FF1A                  		bra.w	Platform3
00007662                            ; End of function SlopeObject
00007662                            
00007662                            
00007662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007662                            
00007662                            
00007662                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007662 43F8 D000                  		lea	($FFFFD000).w,a1
00007666 4A69 0012                  		tst.w	$12(a1)
0000766A 6B00 FFB8                  		bmi.w	locret_751E
0000766E 3029 0008                  		move.w	8(a1),d0
00007672 9068 0008                  		sub.w	8(a0),d0
00007676 D041                       		add.w	d1,d0
00007678 6B00 FFAA                  		bmi.w	locret_751E
0000767C D241                       		add.w	d1,d1
0000767E B041                       		cmp.w	d1,d0
00007680 6400 FFA2                  		bcc.w	locret_751E
00007684 3028 000C                  		move.w	$C(a0),d0
00007688 9043                       		sub.w	d3,d0
0000768A 6000 FEEE                  		bra.w	Platform3
0000768E                            ; End of function Obj15_Solid
0000768E                            
0000768E                            ; ===========================================================================
0000768E                            
0000768E                            Obj11_Action2:				; XREF: Obj11_Index
0000768E 6100                       		bsr.s	Obj11_WalkOff
00007690 6100 0000                  		bsr.w	DisplaySprite
00007694 6000 0000                  		bra.w	Obj11_ChkDel
00007698                            
00007698                            ; ---------------------------------------------------------------------------
00007698                            ; Subroutine allowing Sonic to walk off a bridge
00007698                            ; ---------------------------------------------------------------------------
00007698                            
00007698                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007698                            
00007698                            
00007698                            Obj11_WalkOff:				; XREF: Obj11_Action2
00007698 7200                       		moveq	#0,d1
0000769A 1228 0028                  		move.b	$28(a0),d1
0000769E E749                       		lsl.w	#3,d1
000076A0 3401                       		move.w	d1,d2
000076A2 5041                       		addq.w	#8,d1
000076A4 6100                       		bsr.s	ExitPlatform2
000076A6 6400                       		bcc.s	locret_75BE
000076A8 E848                       		lsr.w	#4,d0
000076AA 1140 003F                  		move.b	d0,$3F(a0)
000076AE 1028 003E                  		move.b	$3E(a0),d0
000076B2 0C00 0040                  		cmpi.b	#$40,d0
000076B6 6700                       		beq.s	loc_75B6
000076B8 5828 003E                  		addq.b	#4,$3E(a0)
000076BC                            
000076BC                            loc_75B6:
000076BC 6100 0000                  		bsr.w	Obj11_Bend
000076C0 6100 0000                  		bsr.w	Obj11_MoveSonic
000076C4                            
000076C4                            locret_75BE:
000076C4 4E75                       		rts	
000076C6                            ; End of function Obj11_WalkOff
000076C6                            
000076C6                            ; ---------------------------------------------------------------------------
000076C6                            ; Subroutine allowing Sonic to walk or jump off	a platform
000076C6                            ; ---------------------------------------------------------------------------
000076C6                            
000076C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076C6                            
000076C6                            
000076C6                            ExitPlatform:
000076C6 3401                       		move.w	d1,d2
000076C8                            
000076C8                            ExitPlatform2:
000076C8 D442                       		add.w	d2,d2
000076CA 43F8 D000                  		lea	($FFFFD000).w,a1
000076CE 0829 0001 0022             		btst	#1,$22(a1)
000076D4 6600                       		bne.s	loc_75E0
000076D6 3029 0008                  		move.w	8(a1),d0
000076DA 9068 0008                  		sub.w	8(a0),d0
000076DE D041                       		add.w	d1,d0
000076E0 6B00                       		bmi.s	loc_75E0
000076E2 B042                       		cmp.w	d2,d0
000076E4 6500                       		bcs.s	locret_75F2
000076E6                            
000076E6                            loc_75E0:
000076E6 08A9 0003 0022             		bclr	#3,$22(a1)
000076EC 117C 0002 0024             		move.b	#2,$24(a0)
000076F2 08A8 0003 0022             		bclr	#3,$22(a0)
000076F8                            
000076F8                            locret_75F2:
000076F8 4E75                       		rts	
000076FA                            ; End of function ExitPlatform
000076FA                            
000076FA                            
000076FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076FA                            
000076FA                            
000076FA                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000076FA 7000                       		moveq	#0,d0
000076FC 1028 003F                  		move.b	$3F(a0),d0
00007700 1030 0029                  		move.b	$29(a0,d0.w),d0
00007704 ED48                       		lsl.w	#6,d0
00007706 0680 00FF D000             		addi.l	#$FFD000,d0
0000770C 2440                       		movea.l	d0,a2
0000770E 43F8 D000                  		lea	($FFFFD000).w,a1
00007712 302A 000C                  		move.w	$C(a2),d0
00007716 5140                       		subq.w	#8,d0
00007718 7200                       		moveq	#0,d1
0000771A 1229 0016                  		move.b	$16(a1),d1
0000771E 9041                       		sub.w	d1,d0
00007720 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007724 4E75                       		rts	
00007726                            ; End of function Obj11_MoveSonic
00007726                            
00007726                            
00007726                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007726                            
00007726                            
00007726                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00007726 1028 003E                  		move.b	$3E(a0),d0
0000772A 6100 B2AE                  		bsr.w	CalcSine
0000772E 3800                       		move.w	d0,d4
00007730 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00007736 7000                       		moveq	#0,d0
00007738 1028 0028                  		move.b	$28(a0),d0
0000773C E948                       		lsl.w	#4,d0
0000773E 7600                       		moveq	#0,d3
00007740 1628 003F                  		move.b	$3F(a0),d3
00007744 3403                       		move.w	d3,d2
00007746 D640                       		add.w	d0,d3
00007748 7A00                       		moveq	#0,d5
0000774A 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007750 1A35 3000                  		move.b	(a5,d3.w),d5
00007754 0243 000F                  		andi.w	#$F,d3
00007758 E94B                       		lsl.w	#4,d3
0000775A 47F4 3000                  		lea	(a4,d3.w),a3
0000775E 45E8 0029                  		lea	$29(a0),a2
00007762                            
00007762                            loc_765C:
00007762 7000                       		moveq	#0,d0
00007764 101A                       		move.b	(a2)+,d0
00007766 ED48                       		lsl.w	#6,d0
00007768 0680 00FF D000             		addi.l	#$FFD000,d0
0000776E 2240                       		movea.l	d0,a1
00007770 7000                       		moveq	#0,d0
00007772 101B                       		move.b	(a3)+,d0
00007774 5240                       		addq.w	#1,d0
00007776 C0C5                       		mulu.w	d5,d0
00007778 C0C4                       		mulu.w	d4,d0
0000777A 4840                       		swap	d0
0000777C D069 003C                  		add.w	$3C(a1),d0
00007780 3340 000C                  		move.w	d0,$C(a1)
00007784 51CA FFDC                  		dbf	d2,loc_765C
00007788 7000                       		moveq	#0,d0
0000778A 1028 0028                  		move.b	$28(a0),d0
0000778E 7600                       		moveq	#0,d3
00007790 1628 003F                  		move.b	$3F(a0),d3
00007794 5203                       		addq.b	#1,d3
00007796 9600                       		sub.b	d0,d3
00007798 4403                       		neg.b	d3
0000779A 6B00                       		bmi.s	locret_76CA
0000779C 3403                       		move.w	d3,d2
0000779E E94B                       		lsl.w	#4,d3
000077A0 47F4 3000                  		lea	(a4,d3.w),a3
000077A4 D6C2                       		adda.w	d2,a3
000077A6 5342                       		subq.w	#1,d2
000077A8 6500                       		bcs.s	locret_76CA
000077AA                            
000077AA                            loc_76A4:
000077AA 7000                       		moveq	#0,d0
000077AC 101A                       		move.b	(a2)+,d0
000077AE ED48                       		lsl.w	#6,d0
000077B0 0680 00FF D000             		addi.l	#$FFD000,d0
000077B6 2240                       		movea.l	d0,a1
000077B8 7000                       		moveq	#0,d0
000077BA 1023                       		move.b	-(a3),d0
000077BC 5240                       		addq.w	#1,d0
000077BE C0C5                       		mulu.w	d5,d0
000077C0 C0C4                       		mulu.w	d4,d0
000077C2 4840                       		swap	d0
000077C4 D069 003C                  		add.w	$3C(a1),d0
000077C8 3340 000C                  		move.w	d0,$C(a1)
000077CC 51CA FFDC                  		dbf	d2,loc_76A4
000077D0                            
000077D0                            locret_76CA:
000077D0 4E75                       		rts	
000077D2                            ; End of function Obj11_Bend
000077D2                            
000077D2                            ; ===========================================================================
000077D2                            ; ---------------------------------------------------------------------------
000077D2                            ; GHZ bridge-bending data
000077D2                            ; (Defines how the bridge bends	when Sonic walks across	it)
000077D2                            ; ---------------------------------------------------------------------------
000077D2                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000078E2                            		even
000078E2                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000079E2                            		even
000079E2                            
000079E2                            ; ===========================================================================
000079E2                            
000079E2                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000079E2 3028 0008                  		move.w	8(a0),d0
000079E6 0240 FF80                  		andi.w	#$FF80,d0
000079EA 3238 F700                  		move.w	($FFFFF700).w,d1
000079EE 0441 0080                  		subi.w	#$80,d1
000079F2 0241 FF80                  		andi.w	#$FF80,d1
000079F6 9041                       		sub.w	d1,d0
000079F8 0C40 0280                  		cmpi.w	#$280,d0
000079FC 6200 0000                  		bhi.w	Obj11_DelAll
00007A00 4E75                       		rts	
00007A02                            ; ===========================================================================
00007A02                            
00007A02                            Obj11_DelAll:				; XREF: Obj11_ChkDel
00007A02 7400                       		moveq	#0,d2
00007A04 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00007A08 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00007A0A 5302                       		subq.b	#1,d2		; subtract 1
00007A0C 6500                       		bcs.s	Obj11_Delete
00007A0E                            
00007A0E                            Obj11_DelLoop:
00007A0E 7000                       		moveq	#0,d0
00007A10 101A                       		move.b	(a2)+,d0
00007A12 ED48                       		lsl.w	#6,d0
00007A14 0680 00FF D000             		addi.l	#$FFD000,d0
00007A1A 2240                       		movea.l	d0,a1
00007A1C B048                       		cmp.w	a0,d0
00007A1E 6700                       		beq.s	loc_791E
00007A20 6100 0000                  		bsr.w	DeleteObject2
00007A24                            
00007A24                            loc_791E:
00007A24 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00007A28                            
00007A28                            Obj11_Delete:
00007A28 6100 0000                  		bsr.w	DeleteObject
00007A2C 4E75                       		rts	
00007A2E                            ; ===========================================================================
00007A2E                            
00007A2E                            Obj11_Delete2:				; XREF: Obj11_Index
00007A2E 6100 0000                  		bsr.w	DeleteObject
00007A32 4E75                       		rts	
00007A34                            ; ===========================================================================
00007A34                            
00007A34                            Obj11_Display2:				; XREF: Obj11_Index
00007A34 6100 0000                  		bsr.w	DisplaySprite
00007A38 4E75                       		rts	
00007A3A                            ; ===========================================================================
00007A3A                            ; ---------------------------------------------------------------------------
00007A3A                            ; Sprite mappings - GHZ	bridge
00007A3A                            ; ---------------------------------------------------------------------------
00007A3A                            Map_obj11:
00007A3A                            	include "_maps\obj11.asm"
00007A3A                            ; ---------------------------------------------------------------------------
00007A3A                            ; Sprite mappings - GHZ	bridge
00007A3A                            ; ---------------------------------------------------------------------------
00007A3A 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007A3E 0000                       		dc.w byte_794B-Map_obj11
00007A40 01                         byte_793A:	dc.b 1
00007A41 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007A46 02                         byte_7940:	dc.b 2
00007A47 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007A4C 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007A51 01                         byte_794B:	dc.b 1
00007A52 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00007A58 00                         		even
00007A58 00                         		even
00007A58                            
00007A58                            ; ===========================================================================
00007A58                            ; ---------------------------------------------------------------------------
00007A58                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00007A58                            ;	    - spiked ball on a chain (SBZ)
00007A58                            ; ---------------------------------------------------------------------------
00007A58                            
00007A58                            Obj15:					; XREF: Obj_Index
00007A58 7000                       		moveq	#0,d0
00007A5A 1028 0024                  		move.b	$24(a0),d0
00007A5E 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007A62 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00007A66                            ; ===========================================================================
00007A66 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00007A6A 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007A6E 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007A72 0000                       		dc.w Obj15_Action-Obj15_Index
00007A74                            ; ===========================================================================
00007A74                            
00007A74                            Obj15_Main:				; XREF: Obj15_Index
00007A74 5428 0024                  		addq.b	#2,$24(a0)
00007A78 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007A80 317C 4380 0002             		move.w	#$4380,2(a0)
00007A86 117C 0004 0001             		move.b	#4,1(a0)
00007A8C 117C 0003 0018             		move.b	#3,$18(a0)
00007A92 117C 0018 0019             		move.b	#$18,$19(a0)
00007A98 117C 0008 0016             		move.b	#8,$16(a0)
00007A9E 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007AA4 3168 0008 003A             		move.w	8(a0),$3A(a0)
00007AAA 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007AB0 6600                       		bne.s	Obj15_NotSLZ
00007AB2 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
00007ABA 317C 43DC 0002             		move.w	#$43DC,2(a0)
00007AC0 117C 0020 0019             		move.b	#$20,$19(a0)
00007AC6 117C 0010 0016             		move.b	#$10,$16(a0)
00007ACC 117C 0099 0020             		move.b	#$99,$20(a0)
00007AD2                            
00007AD2                            Obj15_NotSLZ:
00007AD2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00007AD8 6600                       		bne.s	Obj15_SetLength
00007ADA 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
00007AE2 317C 0391 0002             		move.w	#$391,2(a0)
00007AE8 117C 0018 0019             		move.b	#$18,$19(a0)
00007AEE 117C 0018 0016             		move.b	#$18,$16(a0)
00007AF4 117C 0086 0020             		move.b	#$86,$20(a0)
00007AFA 117C 000C 0024             		move.b	#$C,$24(a0)
00007B00                            
00007B00                            Obj15_SetLength:
00007B00 1810                       		move.b	0(a0),d4
00007B02 7200                       		moveq	#0,d1
00007B04 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00007B08 1212                       		move.b	(a2),d1		; move a2 to d1
00007B0A 3F01                       		move.w	d1,-(sp)
00007B0C 0241 000F                  		andi.w	#$F,d1
00007B10 14FC 0000                  		move.b	#0,(a2)+
00007B14 3601                       		move.w	d1,d3
00007B16 E94B                       		lsl.w	#4,d3
00007B18 5003                       		addq.b	#8,d3
00007B1A 1143 003C                  		move.b	d3,$3C(a0)
00007B1E 5103                       		subq.b	#8,d3
00007B20 4A28 001A                  		tst.b	$1A(a0)
00007B24 6700                       		beq.s	Obj15_MakeChain
00007B26 5003                       		addq.b	#8,d3
00007B28 5341                       		subq.w	#1,d1
00007B2A                            
00007B2A                            Obj15_MakeChain:
00007B2A 6100 0000                  		bsr.w	SingleObjLoad
00007B2E 6600                       		bne.s	loc_7A92
00007B30 5228 0028                  		addq.b	#1,$28(a0)
00007B34 3A09                       		move.w	a1,d5
00007B36 0445 D000                  		subi.w	#-$3000,d5
00007B3A EC4D                       		lsr.w	#6,d5
00007B3C 0245 007F                  		andi.w	#$7F,d5
00007B40 14C5                       		move.b	d5,(a2)+
00007B42 137C 000A 0024             		move.b	#$A,$24(a1)
00007B48 1284                       		move.b	d4,0(a1)	; load swinging	object
00007B4A 2368 0004 0004             		move.l	4(a0),4(a1)
00007B50 3368 0002 0002             		move.w	2(a0),2(a1)
00007B56 08A9 0006 0002             		bclr	#6,2(a1)
00007B5C 137C 0004 0001             		move.b	#4,1(a1)
00007B62 137C 0004 0018             		move.b	#4,$18(a1)
00007B68 137C 0008 0019             		move.b	#8,$19(a1)
00007B6E 137C 0001 001A             		move.b	#1,$1A(a1)
00007B74 1343 003C                  		move.b	d3,$3C(a1)
00007B78 0403 0010                  		subi.b	#$10,d3
00007B7C 6400                       		bcc.s	loc_7A8E
00007B7E 137C 0002 001A             		move.b	#2,$1A(a1)
00007B84 137C 0003 0018             		move.b	#3,$18(a1)
00007B8A 08E9 0006 0002             		bset	#6,2(a1)
00007B90                            
00007B90                            loc_7A8E:
00007B90 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007B94                            
00007B94                            loc_7A92:
00007B94 3A08                       		move.w	a0,d5
00007B96 0445 D000                  		subi.w	#-$3000,d5
00007B9A EC4D                       		lsr.w	#6,d5
00007B9C 0245 007F                  		andi.w	#$7F,d5
00007BA0 14C5                       		move.b	d5,(a2)+
00007BA2 317C 4080 0026             		move.w	#$4080,$26(a0)
00007BA8 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007BAE 321F                       		move.w	(sp)+,d1
00007BB0 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007BB4 6700                       		beq.s	loc_7AD4	; if not, branch
00007BB6 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007BBE 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007BC4 117C 0001 001A             		move.b	#1,$1A(a0)
00007BCA 117C 0002 0018             		move.b	#2,$18(a0)
00007BD0 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007BD6                            
00007BD6                            loc_7AD4:
00007BD6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007BDC 6700                       		beq.s	Obj15_Action	; if yes, branch
00007BDE                            
00007BDE                            Obj15_SetSolid:				; XREF: Obj15_Index
00007BDE 7200                       		moveq	#0,d1
00007BE0 1228 0019                  		move.b	$19(a0),d1
00007BE4 7600                       		moveq	#0,d3
00007BE6 1628 0016                  		move.b	$16(a0),d3
00007BEA 6100 FA76                  		bsr.w	Obj15_Solid
00007BEE                            
00007BEE                            Obj15_Action:				; XREF: Obj15_Index
00007BEE 6100 0000                  		bsr.w	Obj15_Move
00007BF2 6100 0000                  		bsr.w	DisplaySprite
00007BF6 6000 0000                  		bra.w	Obj15_ChkDel
00007BFA                            ; ===========================================================================
00007BFA                            
00007BFA                            Obj15_Action2:				; XREF: Obj15_Index
00007BFA 7200                       		moveq	#0,d1
00007BFC 1228 0019                  		move.b	$19(a0),d1
00007C00 6100 FAC4                  		bsr.w	ExitPlatform
00007C04 3F28 0008                  		move.w	8(a0),-(sp)
00007C08 6100 0000                  		bsr.w	Obj15_Move
00007C0C 341F                       		move.w	(sp)+,d2
00007C0E 7600                       		moveq	#0,d3
00007C10 1628 0016                  		move.b	$16(a0),d3
00007C14 5203                       		addq.b	#1,d3
00007C16 6100 0000                  		bsr.w	MvSonicOnPtfm
00007C1A 6100 0000                  		bsr.w	DisplaySprite
00007C1E 6000 0000                  		bra.w	Obj15_ChkDel
00007C22                            
00007C22 4E75                       		rts
00007C24                            
00007C24                            ; ---------------------------------------------------------------------------
00007C24                            ; Subroutine to	change Sonic's position with a platform
00007C24                            ; ---------------------------------------------------------------------------
00007C24                            
00007C24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C24                            
00007C24                            
00007C24                            MvSonicOnPtfm:
00007C24 43F8 D000                  		lea	($FFFFD000).w,a1
00007C28 3028 000C                  		move.w	$C(a0),d0
00007C2C 9043                       		sub.w	d3,d0
00007C2E 6000                       		bra.s	MvSonic2
00007C30                            ; End of function MvSonicOnPtfm
00007C30                            
00007C30                            ; ---------------------------------------------------------------------------
00007C30                            ; Subroutine to	change Sonic's position with a platform
00007C30                            ; ---------------------------------------------------------------------------
00007C30                            
00007C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C30                            
00007C30                            
00007C30                            MvSonicOnPtfm2:
00007C30 43F8 D000                  		lea	($FFFFD000).w,a1
00007C34 3028 000C                  		move.w	$C(a0),d0
00007C38 0440 0009                  		subi.w	#9,d0
00007C3C                            
00007C3C                            MvSonic2:
00007C3C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007C40 6B00                       		bmi.s	locret_7B62
00007C42 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007C48 6400                       		bcc.s	locret_7B62
00007C4A 4A78 FE08                  		tst.w	($FFFFFE08).w
00007C4E 6600                       		bne.s	locret_7B62
00007C50 7200                       		moveq	#0,d1
00007C52 1229 0016                  		move.b	$16(a1),d1
00007C56 9041                       		sub.w	d1,d0
00007C58 3340 000C                  		move.w	d0,$C(a1)
00007C5C 9468 0008                  		sub.w	8(a0),d2
00007C60 9569 0008                  		sub.w	d2,8(a1)
00007C64                            
00007C64                            locret_7B62:
00007C64 4E75                       		rts	
00007C66                            ; End of function MvSonicOnPtfm2
00007C66                            
00007C66                            
00007C66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C66                            
00007C66                            
00007C66                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007C66 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007C6A 323C 0080                  		move.w	#$80,d1
00007C6E 0828 0000 0022             		btst	#0,$22(a0)
00007C74 6700                       		beq.s	loc_7B78
00007C76 4440                       		neg.w	d0
00007C78 D041                       		add.w	d1,d0
00007C7A                            
00007C7A                            loc_7B78:
00007C7A 6000                       		bra.s	Obj15_Move2
00007C7C                            ; End of function Obj15_Move
00007C7C                            
00007C7C                            
00007C7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C7C                            
00007C7C                            
00007C7C                            Obj48_Move:				; XREF: Obj48_Display2
00007C7C 4A28 003D                  		tst.b	$3D(a0)
00007C80 6600                       		bne.s	loc_7B9C
00007C82 3028 003E                  		move.w	$3E(a0),d0
00007C86 5040                       		addq.w	#8,d0
00007C88 3140 003E                  		move.w	d0,$3E(a0)
00007C8C D168 0026                  		add.w	d0,$26(a0)
00007C90 0C40 0200                  		cmpi.w	#$200,d0
00007C94 6600                       		bne.s	loc_7BB6
00007C96 117C 0001 003D             		move.b	#1,$3D(a0)
00007C9C 6000                       		bra.s	loc_7BB6
00007C9E                            ; ===========================================================================
00007C9E                            
00007C9E                            loc_7B9C:
00007C9E 3028 003E                  		move.w	$3E(a0),d0
00007CA2 5140                       		subq.w	#8,d0
00007CA4 3140 003E                  		move.w	d0,$3E(a0)
00007CA8 D168 0026                  		add.w	d0,$26(a0)
00007CAC 0C40 FE00                  		cmpi.w	#-$200,d0
00007CB0 6600                       		bne.s	loc_7BB6
00007CB2 117C 0000 003D             		move.b	#0,$3D(a0)
00007CB8                            
00007CB8                            loc_7BB6:
00007CB8 1028 0026                  		move.b	$26(a0),d0
00007CBC                            ; End of function Obj48_Move
00007CBC                            
00007CBC                            
00007CBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007CBC                            
00007CBC                            
00007CBC                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00007CBC 6100 AD1C                  		bsr.w	CalcSine
00007CC0 3428 0038                  		move.w	$38(a0),d2
00007CC4 3628 003A                  		move.w	$3A(a0),d3
00007CC8 45E8 0028                  		lea	$28(a0),a2
00007CCC 7C00                       		moveq	#0,d6
00007CCE 1C1A                       		move.b	(a2)+,d6
00007CD0                            
00007CD0                            loc_7BCE:
00007CD0 7800                       		moveq	#0,d4
00007CD2 181A                       		move.b	(a2)+,d4
00007CD4 ED4C                       		lsl.w	#6,d4
00007CD6 0684 00FF D000             		addi.l	#$FFD000,d4
00007CDC 2244                       		movea.l	d4,a1
00007CDE 7800                       		moveq	#0,d4
00007CE0 1829 003C                  		move.b	$3C(a1),d4
00007CE4 2A04                       		move.l	d4,d5
00007CE6 C9C0                       		muls.w	d0,d4
00007CE8 E084                       		asr.l	#8,d4
00007CEA CBC1                       		muls.w	d1,d5
00007CEC E085                       		asr.l	#8,d5
00007CEE D842                       		add.w	d2,d4
00007CF0 DA43                       		add.w	d3,d5
00007CF2 3344 000C                  		move.w	d4,$C(a1)
00007CF6 3345 0008                  		move.w	d5,8(a1)
00007CFA 51CE FFD4                  		dbf	d6,loc_7BCE
00007CFE 4E75                       		rts	
00007D00                            ; End of function Obj15_Move2
00007D00                            
00007D00                            ; ===========================================================================
00007D00                            
00007D00                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00007D00 3028 003A                  		move.w	$3A(a0),d0
00007D04 0240 FF80                  		andi.w	#$FF80,d0
00007D08 3238 F700                  		move.w	($FFFFF700).w,d1
00007D0C 0441 0080                  		subi.w	#$80,d1
00007D10 0241 FF80                  		andi.w	#$FF80,d1
00007D14 9041                       		sub.w	d1,d0
00007D16 0C40 0280                  		cmpi.w	#$280,d0
00007D1A 6200 0000                  		bhi.w	Obj15_DelAll
00007D1E 4E75                       		rts	
00007D20                            ; ===========================================================================
00007D20                            
00007D20                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00007D20 7400                       		moveq	#0,d2
00007D22 45E8 0028                  		lea	$28(a0),a2
00007D26 141A                       		move.b	(a2)+,d2
00007D28                            
00007D28                            Obj15_DelLoop:
00007D28 7000                       		moveq	#0,d0
00007D2A 101A                       		move.b	(a2)+,d0
00007D2C ED48                       		lsl.w	#6,d0
00007D2E 0680 00FF D000             		addi.l	#$FFD000,d0
00007D34 2240                       		movea.l	d0,a1
00007D36 6100 0000                  		bsr.w	DeleteObject2
00007D3A 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00007D3E 4E75                       		rts	
00007D40                            ; ===========================================================================
00007D40                            
00007D40                            Obj15_Delete:				; XREF: Obj15_Index
00007D40 6100 0000                  		bsr.w	DeleteObject
00007D44 4E75                       		rts	
00007D46                            ; ===========================================================================
00007D46                            
00007D46                            Obj15_Display:				; XREF: Obj15_Index
00007D46 6000 0000                  		bra.w	DisplaySprite
00007D4A                            ; ===========================================================================
00007D4A                            ; ---------------------------------------------------------------------------
00007D4A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007D4A                            ; ---------------------------------------------------------------------------
00007D4A                            Map_obj15:
00007D4A                            	include "_maps\obj15ghz.asm"
00007D4A                            ; ---------------------------------------------------------------------------
00007D4A                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007D4A                            ; ---------------------------------------------------------------------------
00007D4A 0000                       		dc.w byte_7C4E-Map_obj15
00007D4C 0000                       		dc.w byte_7C59-Map_obj15
00007D4E 0000                       		dc.w byte_7C5F-Map_obj15
00007D50 02                         byte_7C4E:	dc.b 2
00007D51 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00007D56 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00007D5B 01                         byte_7C59:	dc.b 1
00007D5C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007D61 01                         byte_7C5F:	dc.b 1
00007D62 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00007D68 00                         		even
00007D68 00                         		even
00007D68                            
00007D68                            ; ---------------------------------------------------------------------------
00007D68                            ; Sprite mappings - SLZ	swinging platforms
00007D68                            ; ---------------------------------------------------------------------------
00007D68                            Map_obj15a:
00007D68                            	include "_maps\obj15slz.asm"
00007D68                            ; ---------------------------------------------------------------------------
00007D68                            ; Sprite mappings - SLZ	swinging platforms
00007D68                            ; ---------------------------------------------------------------------------
00007D68 0000                       		dc.w byte_7C6C-Map_obj15a
00007D6A 0000                       		dc.w byte_7C95-Map_obj15a
00007D6C 0000                       		dc.w byte_7C9B-Map_obj15a
00007D6E 08                         byte_7C6C:	dc.b 8
00007D6F F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00007D74 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00007D79 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00007D7E F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00007D83 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00007D88 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00007D8D 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00007D92 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00007D97 01                         byte_7C95:	dc.b 1
00007D98 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00007D9D 01                         byte_7C9B:	dc.b 1
00007D9E F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00007DA4 00                         		even
00007DA4 00                         		even
00007DA4                            
00007DA4                            ; ===========================================================================
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            ; Object 17 - helix of spikes on a pole	(GHZ)
00007DA4                            ; ---------------------------------------------------------------------------
00007DA4                            
00007DA4                            Obj17:					; XREF: Obj_Index
00007DA4 7000                       		moveq	#0,d0
00007DA6 1028 0024                  		move.b	$24(a0),d0
00007DAA 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00007DAE 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00007DB2                            ; ===========================================================================
00007DB2 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00007DB4 0000                       		dc.w Obj17_Action-Obj17_Index
00007DB6 0000                       		dc.w Obj17_Action-Obj17_Index
00007DB8 0000                       		dc.w Obj17_Delete-Obj17_Index
00007DBA 0000                       		dc.w Obj17_Display-Obj17_Index
00007DBC                            ; ===========================================================================
00007DBC                            
00007DBC                            Obj17_Main:				; XREF: Obj17_Index
00007DBC 5428 0024                  		addq.b	#2,$24(a0)
00007DC0 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00007DC8 317C 4398 0002             		move.w	#$4398,2(a0)
00007DCE 117C 0007 0022             		move.b	#7,$22(a0)
00007DD4 117C 0004 0001             		move.b	#4,1(a0)
00007DDA 117C 0003 0018             		move.b	#3,$18(a0)
00007DE0 117C 0008 0019             		move.b	#8,$19(a0)
00007DE6 3428 000C                  		move.w	$C(a0),d2
00007DEA 3628 0008                  		move.w	8(a0),d3
00007DEE 1810                       		move.b	0(a0),d4
00007DF0 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007DF4 7200                       		moveq	#0,d1
00007DF6 1212                       		move.b	(a2),d1		; move a2 to d1
00007DF8 14FC 0000                  		move.b	#0,(a2)+
00007DFC 3001                       		move.w	d1,d0
00007DFE E248                       		lsr.w	#1,d0
00007E00 E948                       		lsl.w	#4,d0
00007E02 9640                       		sub.w	d0,d3
00007E04 5501                       		subq.b	#2,d1
00007E06 6500                       		bcs.s	Obj17_Action
00007E08 7C00                       		moveq	#0,d6
00007E0A                            
00007E0A                            Obj17_MakeHelix:
00007E0A 6100 0000                  		bsr.w	SingleObjLoad
00007E0E 6600                       		bne.s	Obj17_Action
00007E10 5228 0028                  		addq.b	#1,$28(a0)
00007E14 3A09                       		move.w	a1,d5
00007E16 0445 D000                  		subi.w	#$D000,d5
00007E1A EC4D                       		lsr.w	#6,d5
00007E1C 0245 007F                  		andi.w	#$7F,d5
00007E20 14C5                       		move.b	d5,(a2)+
00007E22 137C 0008 0024             		move.b	#8,$24(a1)
00007E28 1284                       		move.b	d4,0(a1)
00007E2A 3342 000C                  		move.w	d2,$C(a1)
00007E2E 3343 0008                  		move.w	d3,8(a1)
00007E32 2368 0004 0004             		move.l	4(a0),4(a1)
00007E38 337C 4398 0002             		move.w	#$4398,2(a1)
00007E3E 137C 0004 0001             		move.b	#4,1(a1)
00007E44 137C 0003 0018             		move.b	#3,$18(a1)
00007E4A 137C 0008 0019             		move.b	#8,$19(a1)
00007E50 1346 003E                  		move.b	d6,$3E(a1)
00007E54 5206                       		addq.b	#1,d6
00007E56 0206 0007                  		andi.b	#7,d6
00007E5A 0643 0010                  		addi.w	#$10,d3
00007E5E B668 0008                  		cmp.w	8(a0),d3
00007E62 6600                       		bne.s	loc_7D78
00007E64 1146 003E                  		move.b	d6,$3E(a0)
00007E68 5206                       		addq.b	#1,d6
00007E6A 0206 0007                  		andi.b	#7,d6
00007E6E 0643 0010                  		addi.w	#$10,d3
00007E72 5228 0028                  		addq.b	#1,$28(a0)
00007E76                            
00007E76                            loc_7D78:
00007E76 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00007E7A                            
00007E7A                            Obj17_Action:				; XREF: Obj17_Index
00007E7A 6100 0000                  		bsr.w	Obj17_RotateSpikes
00007E7E 6100 0000                  		bsr.w	DisplaySprite
00007E82 6000 0000                  		bra.w	Obj17_ChkDel
00007E86                            
00007E86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007E86                            
00007E86                            
00007E86                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00007E86 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00007E8A 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00007E90 D028 003E                  		add.b	$3E(a0),d0
00007E94 0200 0007                  		andi.b	#7,d0
00007E98 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00007E9C 6600                       		bne.s	locret_7DA6
00007E9E 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00007EA4                            
00007EA4                            locret_7DA6:
00007EA4 4E75                       		rts	
00007EA6                            ; End of function Obj17_RotateSpikes
00007EA6                            
00007EA6                            ; ===========================================================================
00007EA6                            
00007EA6                            Obj17_ChkDel:				; XREF: Obj17_Action
00007EA6 3028 0008                  		move.w	8(a0),d0
00007EAA 0240 FF80                  		andi.w	#$FF80,d0
00007EAE 3238 F700                  		move.w	($FFFFF700).w,d1
00007EB2 0441 0080                  		subi.w	#$80,d1
00007EB6 0241 FF80                  		andi.w	#$FF80,d1
00007EBA 9041                       		sub.w	d1,d0
00007EBC 0C40 0280                  		cmpi.w	#$280,d0
00007EC0 6200 0000                  		bhi.w	Obj17_DelAll
00007EC4 4E75                       		rts	
00007EC6                            ; ===========================================================================
00007EC6                            
00007EC6                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00007EC6 7400                       		moveq	#0,d2
00007EC8 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007ECC 141A                       		move.b	(a2)+,d2	; move a2 to d2
00007ECE 5502                       		subq.b	#2,d2
00007ED0 6500                       		bcs.s	Obj17_Delete
00007ED2                            
00007ED2                            Obj17_DelLoop:
00007ED2 7000                       		moveq	#0,d0
00007ED4 101A                       		move.b	(a2)+,d0
00007ED6 ED48                       		lsl.w	#6,d0
00007ED8 0680 00FF D000             		addi.l	#$FFD000,d0
00007EDE 2240                       		movea.l	d0,a1
00007EE0 6100 0000                  		bsr.w	DeleteObject2	; delete object
00007EE4 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00007EE8                            
00007EE8                            Obj17_Delete:				; XREF: Obj17_Index
00007EE8 6100 0000                  		bsr.w	DeleteObject
00007EEC 4E75                       		rts	
00007EEE                            ; ===========================================================================
00007EEE                            
00007EEE                            Obj17_Display:				; XREF: Obj17_Index
00007EEE 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00007EF2 6000 0000                  		bra.w	DisplaySprite
00007EF6                            ; ===========================================================================
00007EF6                            ; ---------------------------------------------------------------------------
00007EF6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007EF6                            ; ---------------------------------------------------------------------------
00007EF6                            Map_obj17:
00007EF6                            	include "_maps\obj17.asm"
00007EF6                            ; ---------------------------------------------------------------------------
00007EF6                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007EF6                            ; ---------------------------------------------------------------------------
00007EF6 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00007EFA 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00007EFE 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00007F02 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00007F06 01                         byte_7E08:	dc.b 1
00007F07 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00007F0C 01                         byte_7E0E:	dc.b 1
00007F0D F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00007F12 01                         byte_7E14:	dc.b 1
00007F13 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00007F18 01                         byte_7E1A:	dc.b 1
00007F19 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00007F1E 01                         byte_7E20:	dc.b 1
00007F1F 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00007F24 01                         byte_7E26:	dc.b 1
00007F25 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00007F2A 01                         byte_7E2C:	dc.b 1
00007F2B F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00007F30                            		even
00007F30                            		even
00007F30                            
00007F30                            ; ===========================================================================
00007F30                            ; ---------------------------------------------------------------------------
00007F30                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00007F30                            ; ---------------------------------------------------------------------------
00007F30                            
00007F30                            Obj18:					; XREF: Obj_Index
00007F30 7000                       		moveq	#0,d0
00007F32 1028 0024                  		move.b	$24(a0),d0
00007F36 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00007F3A 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00007F3E                            ; ===========================================================================
00007F3E 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00007F40 0000                       		dc.w Obj18_Solid-Obj18_Index
00007F42 0000                       		dc.w Obj18_Action2-Obj18_Index
00007F44 0000                       		dc.w Obj18_Delete-Obj18_Index
00007F46 0000                       		dc.w Obj18_Action-Obj18_Index
00007F48                            ; ===========================================================================
00007F48                            
00007F48                            Obj18_Main:				; XREF: Obj18_Index
00007F48 5428 0024                  		addq.b	#2,$24(a0)
00007F4C 317C 4000 0002             		move.w	#$4000,2(a0)
00007F52 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00007F5A 117C 0020 0019             		move.b	#$20,$19(a0)
00007F60 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00007F66 6600                       		bne.s	Obj18_NotSYZ
00007F68 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00007F70 117C 0020 0019             		move.b	#$20,$19(a0)
00007F76                            
00007F76                            Obj18_NotSYZ:
00007F76 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007F7C 6600                       		bne.s	Obj18_NotSLZ
00007F7E 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00007F86 117C 0020 0019             		move.b	#$20,$19(a0)
00007F8C 317C 4000 0002             		move.w	#$4000,2(a0)
00007F92 117C 0003 0028             		move.b	#3,$28(a0)
00007F98                            
00007F98                            Obj18_NotSLZ:
00007F98 117C 0004 0001             		move.b	#4,1(a0)
00007F9E 117C 0004 0018             		move.b	#4,$18(a0)
00007FA4 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00007FAA 3168 000C 0034             		move.w	$C(a0),$34(a0)
00007FB0 3168 0008 0032             		move.w	8(a0),$32(a0)
00007FB6 317C 0080 0026             		move.w	#$80,$26(a0)
00007FBC 7200                       		moveq	#0,d1
00007FBE 1028 0028                  		move.b	$28(a0),d0
00007FC2 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00007FC6 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00007FC8 5201                       		addq.b	#1,d1		; use frame #1
00007FCA 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00007FD0                            
00007FD0                            Obj18_SetFrame:
00007FD0 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00007FD4                            
00007FD4                            Obj18_Solid:				; XREF: Obj18_Index
00007FD4 4A28 0038                  		tst.b	$38(a0)
00007FD8 6700                       		beq.s	loc_7EE0
00007FDA 5928 0038                  		subq.b	#4,$38(a0)
00007FDE                            
00007FDE                            loc_7EE0:
00007FDE 7200                       		moveq	#0,d1
00007FE0 1228 0019                  		move.b	$19(a0),d1
00007FE4 6100 F56C                  		bsr.w	PlatformObject
00007FE8                            
00007FE8                            Obj18_Action:				; XREF: Obj18_Index
00007FE8 6100 0000                  		bsr.w	Obj18_Move
00007FEC 6100 0000                  		bsr.w	Obj18_Nudge
00007FF0 6100 0000                  		bsr.w	DisplaySprite
00007FF4 6000 0000                  		bra.w	Obj18_ChkDel
00007FF8                            ; ===========================================================================
00007FF8                            
00007FF8                            Obj18_Action2:				; XREF: Obj18_Index
00007FF8 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00007FFE 6700                       		beq.s	loc_7F06
00008000 5828 0038                  		addq.b	#4,$38(a0)
00008004                            
00008004                            loc_7F06:
00008004 7200                       		moveq	#0,d1
00008006 1228 0019                  		move.b	$19(a0),d1
0000800A 6100 F6BA                  		bsr.w	ExitPlatform
0000800E 3F28 0008                  		move.w	8(a0),-(sp)
00008012 6100 0000                  		bsr.w	Obj18_Move
00008016 6100 0000                  		bsr.w	Obj18_Nudge
0000801A 341F                       		move.w	(sp)+,d2
0000801C 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008020 6100 0000                  		bsr.w	DisplaySprite
00008024 6000 0000                  		bra.w	Obj18_ChkDel
00008028                            
00008028 4E75                       		rts
0000802A                            
0000802A                            ; ---------------------------------------------------------------------------
0000802A                            ; Subroutine to	move platform slightly when you	stand on it
0000802A                            ; ---------------------------------------------------------------------------
0000802A                            
0000802A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000802A                            
0000802A                            
0000802A                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
0000802A 1028 0038                  		move.b	$38(a0),d0
0000802E 6100 A9AA                  		bsr.w	CalcSine
00008032 323C 0400                  		move.w	#$400,d1
00008036 C1C1                       		muls.w	d1,d0
00008038 4840                       		swap	d0
0000803A D068 002C                  		add.w	$2C(a0),d0
0000803E 3140 000C                  		move.w	d0,$C(a0)
00008042 4E75                       		rts	
00008044                            ; End of function Obj18_Nudge
00008044                            
00008044                            ; ---------------------------------------------------------------------------
00008044                            ; Subroutine to	move platforms
00008044                            ; ---------------------------------------------------------------------------
00008044                            
00008044                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008044                            
00008044                            
00008044                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008044 7000                       		moveq	#0,d0
00008046 1028 0028                  		move.b	$28(a0),d0
0000804A 0240 000F                  		andi.w	#$F,d0
0000804E D040                       		add.w	d0,d0
00008050 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008054 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008058                            ; End of function Obj18_Move
00008058                            
00008058                            ; ===========================================================================
00008058 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
0000805C 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008060 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008064 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008068 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
0000806C 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008070 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008072                            ; ===========================================================================
00008072                            
00008072                            Obj18_Type00:
00008072 4E75                       		rts			; platform 00 doesn't move
00008074                            ; ===========================================================================
00008074                            
00008074                            Obj18_Type05:
00008074 3028 0032                  		move.w	$32(a0),d0
00008078 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000807C 4401                       		neg.b	d1		; reverse platform-motion
0000807E 0601 0040                  		addi.b	#$40,d1
00008082 6000                       		bra.s	Obj18_01_Move
00008084                            ; ===========================================================================
00008084                            
00008084                            Obj18_Type01:
00008084 3028 0032                  		move.w	$32(a0),d0
00008088 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
0000808C 0401 0040                  		subi.b	#$40,d1
00008090                            
00008090                            Obj18_01_Move:
00008090 4881                       		ext.w	d1
00008092 D041                       		add.w	d1,d0
00008094 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008098 6000 0000                  		bra.w	Obj18_ChgMotion
0000809C                            ; ===========================================================================
0000809C                            
0000809C                            Obj18_Type0C:
0000809C 3028 0034                  		move.w	$34(a0),d0
000080A0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000080A4 4401                       		neg.b	d1		; reverse platform-motion
000080A6 0601 0030                  		addi.b	#$30,d1
000080AA 6000                       		bra.s	Obj18_02_Move
000080AC                            ; ===========================================================================
000080AC                            
000080AC                            Obj18_Type0B:
000080AC 3028 0034                  		move.w	$34(a0),d0
000080B0 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
000080B4 0401 0030                  		subi.b	#$30,d1
000080B8 6000                       		bra.s	Obj18_02_Move
000080BA                            ; ===========================================================================
000080BA                            
000080BA                            Obj18_Type06:
000080BA 3028 0034                  		move.w	$34(a0),d0
000080BE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080C2 4401                       		neg.b	d1		; reverse platform-motion
000080C4 0601 0040                  		addi.b	#$40,d1
000080C8 6000                       		bra.s	Obj18_02_Move
000080CA                            ; ===========================================================================
000080CA                            
000080CA                            Obj18_Type02:
000080CA 3028 0034                  		move.w	$34(a0),d0
000080CE 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080D2 0401 0040                  		subi.b	#$40,d1
000080D6                            
000080D6                            Obj18_02_Move:
000080D6 4881                       		ext.w	d1
000080D8 D041                       		add.w	d1,d0
000080DA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000080DE 6000 0000                  		bra.w	Obj18_ChgMotion
000080E2                            ; ===========================================================================
000080E2                            
000080E2                            Obj18_Type03:
000080E2 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
000080E6 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
000080E8 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
000080EE 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
000080F0 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
000080F6                            
000080F6                            Obj18_03_NoMove:
000080F6 4E75                       		rts	
000080F8                            ; ===========================================================================
000080F8                            
000080F8                            Obj18_03_Wait:
000080F8 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
000080FC 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
000080FE 317C 0020 003A             		move.w	#32,$3A(a0)
00008104 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008108 4E75                       		rts	
0000810A                            ; ===========================================================================
0000810A                            
0000810A                            Obj18_Type04:
0000810A 4A68 003A                  		tst.w	$3A(a0)
0000810E 6700                       		beq.s	loc_8048
00008110 5368 003A                  		subq.w	#1,$3A(a0)
00008114 6600                       		bne.s	loc_8048
00008116 0828 0003 0022             		btst	#3,$22(a0)
0000811C 6700                       		beq.s	loc_8042
0000811E 08E9 0001 0022             		bset	#1,$22(a1)
00008124 08A9 0003 0022             		bclr	#3,$22(a1)
0000812A 137C 0002 0024             		move.b	#2,$24(a1)
00008130 08A8 0003 0022             		bclr	#3,$22(a0)
00008136 4228 0025                  		clr.b	$25(a0)
0000813A 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008140                            
00008140                            loc_8042:
00008140 117C 0008 0024             		move.b	#8,$24(a0)
00008146                            
00008146                            loc_8048:
00008146 2628 002C                  		move.l	$2C(a0),d3
0000814A 3028 0012                  		move.w	$12(a0),d0
0000814E 48C0                       		ext.l	d0
00008150 E180                       		asl.l	#8,d0
00008152 D680                       		add.l	d0,d3
00008154 2143 002C                  		move.l	d3,$2C(a0)
00008158 0668 0038 0012             		addi.w	#$38,$12(a0)
0000815E 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008162 0640 00E0                  		addi.w	#$E0,d0
00008166 B068 002C                  		cmp.w	$2C(a0),d0
0000816A 6400                       		bcc.s	locret_8074
0000816C 117C 0006 0024             		move.b	#6,$24(a0)
00008172                            
00008172                            locret_8074:
00008172 4E75                       		rts	
00008174                            ; ===========================================================================
00008174                            
00008174                            Obj18_Type07:
00008174 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008178 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000817A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000817E 7000                       		moveq	#0,d0
00008180 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008184 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008186 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000818A 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
0000818C 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008192                            
00008192                            Obj18_07_NoMove:
00008192 4E75                       		rts	
00008194                            ; ===========================================================================
00008194                            
00008194                            Obj18_07_Wait:
00008194 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008198 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000819A 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
0000819E 4E75                       		rts	
000081A0                            ; ===========================================================================
000081A0                            
000081A0                            Obj18_Type08:
000081A0 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
000081A4 3028 0034                  		move.w	$34(a0),d0
000081A8 0440 0200                  		subi.w	#$200,d0
000081AC B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
000081B0 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
000081B2 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
000081B6                            
000081B6                            Obj18_08_NoStop:
000081B6 4E75                       		rts	
000081B8                            ; ===========================================================================
000081B8                            
000081B8                            Obj18_Type0A:
000081B8 3028 0034                  		move.w	$34(a0),d0
000081BC 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000081C0 0401 0040                  		subi.b	#$40,d1
000081C4 4881                       		ext.w	d1
000081C6 E241                       		asr.w	#1,d1
000081C8 D041                       		add.w	d1,d0
000081CA 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000081CE                            
000081CE                            Obj18_ChgMotion:
000081CE 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000081D4 4E75                       		rts	
000081D6                            ; ===========================================================================
000081D6                            
000081D6                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000081D6 3028 0032                  		move.w	$32(a0),d0
000081DA 0240 FF80                  		andi.w	#$FF80,d0
000081DE 3238 F700                  		move.w	($FFFFF700).w,d1
000081E2 0441 0080                  		subi.w	#$80,d1
000081E6 0241 FF80                  		andi.w	#$FF80,d1
000081EA 9041                       		sub.w	d1,d0
000081EC 0C40 0280                  		cmpi.w	#$280,d0
000081F0 6200                       		bhi.s	Obj18_Delete
000081F2 4E75                       		rts	
000081F4                            ; ===========================================================================
000081F4                            
000081F4                            Obj18_Delete:				; XREF: Obj18_Index
000081F4 6000 0000                  		bra.w	DeleteObject
000081F8                            ; ===========================================================================
000081F8                            ; ---------------------------------------------------------------------------
000081F8                            ; Sprite mappings - unused
000081F8                            ; ---------------------------------------------------------------------------
000081F8                            Map_obj18x:
000081F8                            	include "_maps\obj18x.asm"
000081F8                            ; ---------------------------------------------------------------------------
000081F8                            ; Sprite mappings - unused
000081F8                            ; ---------------------------------------------------------------------------
000081F8 0000                       		dc.w byte_80FE-Map_obj18x
000081FA 0000                       		dc.w byte_8109-Map_obj18x
000081FC 02                         byte_80FE:	dc.b 2
000081FD F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008202 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00008207 0A                         byte_8109:	dc.b $A
00008208 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
0000820D 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
00008212 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00008217 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
0000821C 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008221 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00008226 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000822B 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008230 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008235 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000823A                            		even
0000823A                            		even
0000823A                            
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            ; Sprite mappings - GHZ	platforms
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            Map_obj18:
0000823A                            	include "_maps\obj18ghz.asm"
0000823A                            ; ---------------------------------------------------------------------------
0000823A                            ; Sprite mappings - GHZ	platforms
0000823A                            ; ---------------------------------------------------------------------------
0000823A 0000                       		dc.w byte_8140-Map_obj18
0000823C 0000                       		dc.w byte_8155-Map_obj18
0000823E 04                         byte_8140:	dc.b 4
0000823F F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008244 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00008249 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
0000824E F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008253 0A                         byte_8155:	dc.b $A
00008254 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00008259 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
0000825E 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008263 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00008268 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
0000826D F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008272 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00008277 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
0000827C 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008281 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00008286                            		even
00008286                            		even
00008286                            
00008286                            ; ---------------------------------------------------------------------------
00008286                            ; Sprite mappings - SYZ	platforms
00008286                            ; ---------------------------------------------------------------------------
00008286                            Map_obj18a:
00008286                            	include "_maps\obj18syz.asm"
00008286                            ; ---------------------------------------------------------------------------
00008286                            ; Sprite mappings - SYZ	platforms
00008286                            ; ---------------------------------------------------------------------------
00008286 0000                       		dc.w byte_818A-Map_obj18a
00008288 03                         byte_818A:	dc.b 3
00008289 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
0000828E F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008293 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00008298                            		even
00008298                            		even
00008298                            
00008298                            ; ---------------------------------------------------------------------------
00008298                            ; Sprite mappings - SLZ	platforms
00008298                            ; ---------------------------------------------------------------------------
00008298                            Map_obj18b:
00008298                            	include "_maps\obj18slz.asm"
00008298                            ; ---------------------------------------------------------------------------
00008298                            ; Sprite mappings - SLZ	platforms
00008298                            ; ---------------------------------------------------------------------------
00008298 0000                       		dc.w byte_819C-Map_obj18b
0000829A 02                         byte_819C:	dc.b 2
0000829B F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
000082A0 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000082A6 00                         		even
000082A6 00                         		even
000082A6                            
000082A6                            ; ===========================================================================
000082A6                            ; ---------------------------------------------------------------------------
000082A6                            ; Object 19 - blank
000082A6                            ; ---------------------------------------------------------------------------
000082A6                            
000082A6                            Obj19:					; XREF: Obj_Index
000082A6 4E75                       		rts	
000082A8                            ; ===========================================================================
000082A8                            ; ---------------------------------------------------------------------------
000082A8                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000082A8                            ; ---------------------------------------------------------------------------
000082A8                            Map_obj48:
000082A8                            	include "_maps\obj48.asm"
000082A8                            ; ---------------------------------------------------------------------------
000082A8                            ; Sprite mappings - swinging ball on a chain from GHZ boss
000082A8                            ; ---------------------------------------------------------------------------
000082A8 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
000082AC 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
000082B0 06                         byte_81B2:	dc.b 6
000082B1 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
000082B6 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
000082BB E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000082C0 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000082C5 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000082CA 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000082CF 04                         byte_81D1:	dc.b 4
000082D0 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000082D5 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000082DA 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000082DF 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000082E4 04                         byte_81E6:	dc.b 4
000082E5 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000082EA E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000082EF 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000082F4 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000082F9 04                         byte_81FB:	dc.b 4
000082FA E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000082FF E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00008304 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00008309 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000830E                            		even
0000830E                            		even
0000830E                            
0000830E                            ; ===========================================================================
0000830E                            ; ---------------------------------------------------------------------------
0000830E                            ; Object 1A - GHZ collapsing ledge
0000830E                            ; ---------------------------------------------------------------------------
0000830E                            
0000830E                            Obj1A:					; XREF: Obj_Index
0000830E 7000                       		moveq	#0,d0
00008310 1028 0024                  		move.b	$24(a0),d0
00008314 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
00008318 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
0000831C                            ; ===========================================================================
0000831C 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008320 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008324 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
00008328                            ; ===========================================================================
00008328                            
00008328                            Obj1A_Main:				; XREF: Obj1A_Index
00008328 5428 0024                  		addq.b	#2,$24(a0)
0000832C 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008334 317C 4000 0002             		move.w	#$4000,2(a0)
0000833A 0028 0004 0001             		ori.b	#4,1(a0)
00008340 117C 0004 0018             		move.b	#4,$18(a0)
00008346 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
0000834C 117C 0064 0019             		move.b	#$64,$19(a0)
00008352 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00008358 117C 0038 0016             		move.b	#$38,$16(a0)
0000835E 08E8 0004 0001             		bset	#4,1(a0)
00008364                            
00008364                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008364 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
00008368 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000836A 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
0000836E 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008372 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008376                            
00008376                            Obj1A_Slope:
00008376 323C 0030                  		move.w	#$30,d1
0000837A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008380 6100 F2A4                  		bsr.w	SlopeObject
00008384 6000 0000                  		bra.w	MarkObjGone
00008388                            ; ===========================================================================
00008388                            
00008388                            Obj1A_Touch:				; XREF: Obj1A_Index
00008388 4A28 0038                  		tst.b	$38(a0)
0000838C 6700 0000                  		beq.w	loc_847A
00008390 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00008396 5328 0038                  		subq.b	#1,$38(a0)
0000839A                            
0000839A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000839A                            
0000839A                            
0000839A                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000839A 323C 0030                  		move.w	#$30,d1
0000839E 6100 F326                  		bsr.w	ExitPlatform
000083A2 323C 0030                  		move.w	#$30,d1
000083A6 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
000083AC 3428 0008                  		move.w	8(a0),d2
000083B0 6100 0000                  		bsr.w	SlopeObject2
000083B4 6000 0000                  		bra.w	MarkObjGone
000083B8                            ; End of function Obj1A_WalkOff
000083B8                            
000083B8                            ; ===========================================================================
000083B8                            
000083B8                            Obj1A_Display:				; XREF: Obj1A_Index
000083B8 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000083BC 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000083BE 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000083C2 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000083C6 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000083CA 6000 0000                  		bra.w	DisplaySprite
000083CE                            ; ===========================================================================
000083CE                            
000083CE                            loc_82D0:				; XREF: Obj1A_Display
000083CE 5328 0038                  		subq.b	#1,$38(a0)
000083D2 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000083D6 43F8 D000                  		lea	($FFFFD000).w,a1
000083DA 0829 0003 0022             		btst	#3,$22(a1)
000083E0 6700                       		beq.s	loc_82FC
000083E2 4A28 0038                  		tst.b	$38(a0)
000083E6 6600                       		bne.s	locret_8308
000083E8 08A9 0003 0022             		bclr	#3,$22(a1)
000083EE 08A9 0005 0022             		bclr	#5,$22(a1)
000083F4 137C 0001 001D             		move.b	#1,$1D(a1)
000083FA                            
000083FA                            loc_82FC:
000083FA 117C 0000 003A             		move.b	#0,$3A(a0)
00008400 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00008406                            
00008406                            locret_8308:
00008406 4E75                       		rts	
00008408                            ; ===========================================================================
00008408                            
00008408                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00008408 6100 0000                  		bsr.w	ObjectFall
0000840C 6100 0000                  		bsr.w	DisplaySprite
00008410 4A28 0001                  		tst.b	1(a0)
00008414 6A00                       		bpl.s	Obj1A_Delete
00008416 4E75                       		rts	
00008418                            ; ===========================================================================
00008418                            
00008418                            Obj1A_Delete:				; XREF: Obj1A_Index
00008418 6100 0000                  		bsr.w	DeleteObject
0000841C 4E75                       		rts	
0000841E                            ; ===========================================================================
0000841E                            ; ---------------------------------------------------------------------------
0000841E                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
0000841E                            ; ---------------------------------------------------------------------------
0000841E                            
0000841E                            Obj53:					; XREF: Obj_Index
0000841E 7000                       		moveq	#0,d0
00008420 1028 0024                  		move.b	$24(a0),d0
00008424 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
00008428 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
0000842C                            ; ===========================================================================
0000842C 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008430 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008434 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
00008438                            ; ===========================================================================
00008438                            
00008438                            Obj53_Main:				; XREF: Obj53_Index
00008438 5428 0024                  		addq.b	#2,$24(a0)
0000843C 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008444 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000844A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008450 6600                       		bne.s	Obj53_NotSLZ
00008452 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
00008458 5428 001A                  		addq.b	#2,$1A(a0)
0000845C                            
0000845C                            Obj53_NotSLZ:
0000845C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008462 6600                       		bne.s	Obj53_NotSBZ
00008464 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0000846A                            
0000846A                            Obj53_NotSBZ:
0000846A 0028 0004 0001             		ori.b	#4,1(a0)
00008470 117C 0004 0018             		move.b	#4,$18(a0)
00008476 117C 0007 0038             		move.b	#7,$38(a0)
0000847C 117C 0044 0019             		move.b	#$44,$19(a0)
00008482                            
00008482                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008482 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00008486 6700                       		beq.s	Obj53_Solid	; if not, branch
00008488 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000848C 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008490 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008494                            
00008494                            Obj53_Solid:
00008494 323C 0020                  		move.w	#$20,d1
00008498 6100 F0B8                  		bsr.w	PlatformObject
0000849C 4A28 0028                  		tst.b	$28(a0)
000084A0 6A00                       		bpl.s	Obj53_MarkAsGone
000084A2 0829 0003 0022             		btst	#3,$22(a1)
000084A8 6700                       		beq.s	Obj53_MarkAsGone
000084AA 08A8 0000 0001             		bclr	#0,1(a0)
000084B0 3029 0008                  		move.w	8(a1),d0
000084B4 9068 0008                  		sub.w	8(a0),d0
000084B8 6400                       		bcc.s	Obj53_MarkAsGone
000084BA 08E8 0000 0001             		bset	#0,1(a0)
000084C0                            
000084C0                            Obj53_MarkAsGone:
000084C0 6000 0000                  		bra.w	MarkObjGone
000084C4                            ; ===========================================================================
000084C4                            
000084C4                            Obj53_Touch:				; XREF: Obj53_Index
000084C4 4A28 0038                  		tst.b	$38(a0)
000084C8 6700 0000                  		beq.w	loc_8458
000084CC 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000084D2 5328 0038                  		subq.b	#1,$38(a0)
000084D6                            
000084D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084D6                            
000084D6                            
000084D6                            Obj53_WalkOff:				; XREF: Obj53_Index
000084D6 323C 0020                  		move.w	#$20,d1
000084DA 6100 F1EA                  		bsr.w	ExitPlatform
000084DE 3428 0008                  		move.w	8(a0),d2
000084E2 6100 F74C                  		bsr.w	MvSonicOnPtfm2
000084E6 6000 0000                  		bra.w	MarkObjGone
000084EA                            ; End of function Obj53_WalkOff
000084EA                            
000084EA                            ; ===========================================================================
000084EA                            
000084EA                            Obj53_Display:				; XREF: Obj53_Index
000084EA 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000084EE 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
000084F0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000084F4 6600 0000                  		bne.w	loc_8402	; if yes, branch
000084F8 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000084FC 6000 0000                  		bra.w	DisplaySprite
00008500                            ; ===========================================================================
00008500                            
00008500                            loc_8402:
00008500 5328 0038                  		subq.b	#1,$38(a0)
00008504 6100 FFD0                  		bsr.w	Obj53_WalkOff
00008508 43F8 D000                  		lea	($FFFFD000).w,a1
0000850C 0829 0003 0022             		btst	#3,$22(a1)
00008512 6700                       		beq.s	loc_842E
00008514 4A28 0038                  		tst.b	$38(a0)
00008518 6600                       		bne.s	locret_843A
0000851A 08A9 0003 0022             		bclr	#3,$22(a1)
00008520 08A9 0005 0022             		bclr	#5,$22(a1)
00008526 137C 0001 001D             		move.b	#1,$1D(a1)
0000852C                            
0000852C                            loc_842E:
0000852C 117C 0000 003A             		move.b	#0,$3A(a0)
00008532 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
00008538                            
00008538                            locret_843A:
00008538 4E75                       		rts	
0000853A                            ; ===========================================================================
0000853A                            
0000853A                            Obj53_TimeZero:				; XREF: Obj53_Display
0000853A 6100 0000                  		bsr.w	ObjectFall
0000853E 6100 0000                  		bsr.w	DisplaySprite
00008542 4A28 0001                  		tst.b	1(a0)
00008546 6A00                       		bpl.s	Obj53_Delete
00008548 4E75                       		rts	
0000854A                            ; ===========================================================================
0000854A                            
0000854A                            Obj53_Delete:				; XREF: Obj53_Index
0000854A 6100 0000                  		bsr.w	DeleteObject
0000854E 4E75                       		rts	
00008550                            ; ===========================================================================
00008550                            
00008550                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008550 117C 0000 003A             		move.b	#0,$3A(a0)
00008556                            
00008556                            loc_8458:				; XREF: Obj53_Touch
00008556 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
0000855C 0828 0000 0028             		btst	#0,$28(a0)
00008562 6700                       		beq.s	loc_846C
00008564 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
0000856A                            
0000856A                            loc_846C:
0000856A 7207                       		moveq	#7,d1
0000856C 5228 001A                  		addq.b	#1,$1A(a0)
00008570 6000                       		bra.s	loc_8486
00008572                            ; ===========================================================================
00008572                            
00008572                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008572 117C 0000 003A             		move.b	#0,$3A(a0)
00008578                            
00008578                            loc_847A:				; XREF: Obj1A_Touch
00008578 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000857E 7218                       		moveq	#$18,d1
00008580 5428 001A                  		addq.b	#2,$1A(a0)
00008584                            
00008584                            loc_8486:				; XREF: Obj53_Collapse
00008584 7000                       		moveq	#0,d0
00008586 1028 001A                  		move.b	$1A(a0),d0
0000858A D040                       		add.w	d0,d0
0000858C 2668 0004                  		movea.l	4(a0),a3
00008590 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008594 524B                       		addq.w	#1,a3
00008596 08E8 0005 0001             		bset	#5,1(a0)
0000859C 1810                       		move.b	0(a0),d4
0000859E 1A28 0001                  		move.b	1(a0),d5
000085A2 2248                       		movea.l	a0,a1
000085A4 6000                       		bra.s	loc_84B2
000085A6                            ; ===========================================================================
000085A6                            
000085A6                            loc_84AA:
000085A6 6100 0000                  		bsr.w	SingleObjLoad
000085AA 6600                       		bne.s	loc_84F2
000085AC 5A4B                       		addq.w	#5,a3
000085AE                            
000085AE                            loc_84B2:
000085AE 137C 0006 0024             		move.b	#6,$24(a1)
000085B4 1284                       		move.b	d4,0(a1)
000085B6 234B 0004                  		move.l	a3,4(a1)
000085BA 1345 0001                  		move.b	d5,1(a1)
000085BE 3368 0008 0008             		move.w	8(a0),8(a1)
000085C4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000085CA 3368 0002 0002             		move.w	2(a0),2(a1)
000085D0 1368 0018 0018             		move.b	$18(a0),$18(a1)
000085D6 1368 0019 0019             		move.b	$19(a0),$19(a1)
000085DC 135C 0038                  		move.b	(a4)+,$38(a1)
000085E0 B3C8                       		cmpa.l	a0,a1
000085E2 6400                       		bcc.s	loc_84EE
000085E4 6100 0000                  		bsr.w	DisplaySprite2
000085E8                            
000085E8                            loc_84EE:
000085E8 51C9 FFBC                  		dbf	d1,loc_84AA
000085EC                            
000085EC                            loc_84F2:
000085EC 6100 0000                  		bsr.w	DisplaySprite
000085F0 303C 00B9                  		move.w	#$B9,d0
000085F4 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000085FA                            ; ===========================================================================
000085FA                            ; ---------------------------------------------------------------------------
000085FA                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000085FA                            ; ---------------------------------------------------------------------------
000085FA 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
0000860A 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
00008614 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
0000861C 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008624                            
00008624                            ; ---------------------------------------------------------------------------
00008624                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008624                            ; ---------------------------------------------------------------------------
00008624                            
00008624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008624                            
00008624                            
00008624                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008624 43F8 D000                  		lea	($FFFFD000).w,a1
00008628 0829 0003 0022             		btst	#3,$22(a1)
0000862E 6700                       		beq.s	locret_856E
00008630 3029 0008                  		move.w	8(a1),d0
00008634 9068 0008                  		sub.w	8(a0),d0
00008638 D041                       		add.w	d1,d0
0000863A E248                       		lsr.w	#1,d0
0000863C 0828 0000 0001             		btst	#0,1(a0)
00008642 6700                       		beq.s	loc_854E
00008644 4640                       		not.w	d0
00008646 D041                       		add.w	d1,d0
00008648                            
00008648                            loc_854E:
00008648 7200                       		moveq	#0,d1
0000864A 1232 0000                  		move.b	(a2,d0.w),d1
0000864E 3028 000C                  		move.w	$C(a0),d0
00008652 9041                       		sub.w	d1,d0
00008654 7200                       		moveq	#0,d1
00008656 1229 0016                  		move.b	$16(a1),d1
0000865A 9041                       		sub.w	d1,d0
0000865C 3340 000C                  		move.w	d0,$C(a1)
00008660 9468 0008                  		sub.w	8(a0),d2
00008664 9569 0008                  		sub.w	d2,8(a1)
00008668                            
00008668                            locret_856E:
00008668 4E75                       		rts	
0000866A                            ; End of function SlopeObject2
0000866A                            
0000866A                            ; ===========================================================================
0000866A                            ; ---------------------------------------------------------------------------
0000866A                            ; Collision data for GHZ collapsing ledge
0000866A                            ; ---------------------------------------------------------------------------
0000866A                            Obj1A_SlopeData:
0000866A                            		incbin	misc\ghzledge.bin
0000869A                            		even
0000869A                            
0000869A                            ; ---------------------------------------------------------------------------
0000869A                            ; Sprite mappings - GHZ	collapsing ledge
0000869A                            ; ---------------------------------------------------------------------------
0000869A                            Map_obj1A:
0000869A                            	include "_maps\obj1A.asm"
0000869A                            ; ---------------------------------------------------------------------------
0000869A                            ; Sprite mappings - GHZ	collapsing ledge
0000869A                            ; ---------------------------------------------------------------------------
0000869A 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000869E 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
000086A2 10                         byte_85A8:	dc.b $10
000086A3 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
000086A8 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000086AD E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000086B2 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000086B7 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000086BC D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000086C1 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000086C6 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000086CB F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000086D0 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000086D5 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000086DA 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000086DF 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000086E4 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000086E9 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000086EE 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000086F3 10                         byte_85F9:	dc.b $10
000086F4 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000086F9 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000086FE E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008703 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00008708 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000870D D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00008712 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00008717 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
0000871C F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008721 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008726 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000872B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008730 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008735 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000873A 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000873F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008744 19                         byte_864A:	dc.b $19
00008745 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000874A C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
0000874F D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008754 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00008759 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
0000875E E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008763 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00008768 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
0000876D D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008772 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00008777 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
0000877C F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008781 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008786 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000878B F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008790 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008795 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000879A 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000879F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000087A4 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000087A9 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000087AE 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000087B3 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000087B8 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000087BD 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000087C2 19                         byte_86C8:	dc.b $19
000087C3 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000087C8 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000087CD D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000087D2 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000087D7 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000087DC E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000087E1 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000087E6 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000087EB D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000087F0 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000087F5 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000087FA F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000087FF F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00008804 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00008809 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000880E F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
00008813 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00008818 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000881D 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008822 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00008827 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000882C 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008831 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00008836 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000883B 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008840                            		even
00008840                            		even
00008840                            
00008840                            ; ---------------------------------------------------------------------------
00008840                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008840                            ; ---------------------------------------------------------------------------
00008840                            Map_obj53:
00008840                            	include "_maps\obj53.asm"
00008840                            ; ---------------------------------------------------------------------------
00008840                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008840                            ; ---------------------------------------------------------------------------
00008840 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008844 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
00008848 04                         byte_874E:	dc.b 4
00008849 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
0000884E 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008853 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008858 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
0000885D 08                         byte_8763:	dc.b 8
0000885E F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008863 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00008868 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000886D F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008872 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00008877 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
0000887C 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008881 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00008886 04                         byte_878C:	dc.b 4
00008887 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
0000888C 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008891 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00008896 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000889B 08                         byte_87A1:	dc.b 8
0000889C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000088A1 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
000088A6 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000088AB F805 0004 10               		dc.b $F8, 5, 0,	4, $10
000088B0 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
000088B5 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
000088BA 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000088BF 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000088C4                            		even
000088C4                            		even
000088C4                            
000088C4                            ; ===========================================================================
000088C4                            ; ---------------------------------------------------------------------------
000088C4                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000088C4                            ; ---------------------------------------------------------------------------
000088C4                            
000088C4                            Obj1C:					; XREF: Obj_Index
000088C4 7000                       		moveq	#0,d0
000088C6 1028 0024                  		move.b	$24(a0),d0
000088CA 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
000088CE 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
000088D2                            ; ===========================================================================
000088D2 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
000088D4 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
000088D6                            ; ===========================================================================
000088D6                            
000088D6                            Obj1C_Main:				; XREF: Obj1C_Index
000088D6 5428 0024                  		addq.b	#2,$24(a0)
000088DA 7000                       		moveq	#0,d0
000088DC 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
000088E0 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
000088E4 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
000088E8 2159 0004                  		move.l	(a1)+,4(a0)
000088EC 3159 0002                  		move.w	(a1)+,2(a0)
000088F0 0028 0004 0001             		ori.b	#4,1(a0)
000088F6 1159 001A                  		move.b	(a1)+,$1A(a0)
000088FA 1159 0019                  		move.b	(a1)+,$19(a0)
000088FE 1159 0018                  		move.b	(a1)+,$18(a0)
00008902 1159 0020                  		move.b	(a1)+,$20(a0)
00008906                            
00008906                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00008906 3028 0008                  		move.w	8(a0),d0
0000890A 0240 FF80                  		andi.w	#$FF80,d0
0000890E 3238 F700                  		move.w	($FFFFF700).w,d1
00008912 0441 0080                  		subi.w	#$80,d1
00008916 0241 FF80                  		andi.w	#$FF80,d1
0000891A 9041                       		sub.w	d1,d0
0000891C 0C40 0280                  		cmpi.w	#$280,d0
00008920 6200 0000                  		bhi.w	DeleteObject
00008924 6000 0000                  		bra.w	DisplaySprite
00008928                            ; ===========================================================================
00008928                            ; ---------------------------------------------------------------------------
00008928                            ; Variables for	object $1C are stored in an array
00008928                            ; ---------------------------------------------------------------------------
00008928 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
0000892C 44D8                       		dc.w $44D8		; VRAM setting
0000892E 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008932 0000 0000                  		dc.l Map_obj1C
00008936 44D8                       		dc.w $44D8
00008938 0008 0200                  		dc.b 0,	8, 2, 0
0000893C 0000 0000                  		dc.l Map_obj1C
00008940 44D8                       		dc.w $44D8
00008942 0008 0200                  		dc.b 0,	8, 2, 0
00008946 0000 7A3A                  		dc.l Map_obj11
0000894A 438E                       		dc.w $438E
0000894C 0110 0100                  		dc.b 1,	$10, 1,	0
00008950                            ; ---------------------------------------------------------------------------
00008950                            ; Sprite mappings - SLZ	lava thrower
00008950                            ; ---------------------------------------------------------------------------
00008950                            Map_obj1C:
00008950                            	include "_maps\obj1C.asm"
00008950                            ; ---------------------------------------------------------------------------
00008950                            ; Sprite mappings - SLZ	lava thrower
00008950                            ; ---------------------------------------------------------------------------
00008950 0000                       		dc.w byte_8858-Map_obj1C
00008952 01                         byte_8858:	dc.b 1
00008953 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00008958                            		even
00008958                            		even
00008958                            
00008958                            ; ===========================================================================
00008958                            ; ---------------------------------------------------------------------------
00008958                            ; Object 1D - switch that activates when Sonic touches it
00008958                            ; (this	is not used anywhere in	the game)
00008958                            ; ---------------------------------------------------------------------------
00008958                            
00008958                            Obj1D:					; XREF: Obj_Index
00008958 7000                       		moveq	#0,d0
0000895A 1028 0024                  		move.b	$24(a0),d0
0000895E 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008962 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
00008966                            ; ===========================================================================
00008966 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
00008968 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000896A 0000                       		dc.w Obj1D_Delete-Obj1D_Index
0000896C                            ; ===========================================================================
0000896C                            
0000896C                            Obj1D_Main:				; XREF: Obj1D_Index
0000896C 5428 0024                  		addq.b	#2,$24(a0)
00008970 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00008978 317C 4000 0002             		move.w	#$4000,2(a0)
0000897E 117C 0004 0001             		move.b	#4,1(a0)
00008984 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000898A 117C 0010 0019             		move.b	#$10,$19(a0)
00008990 117C 0005 0018             		move.b	#5,$18(a0)
00008996                            
00008996                            Obj1D_Action:				; XREF: Obj1D_Index
00008996 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
0000899C 323C 0010                  		move.w	#$10,d1
000089A0 6100 0000                  		bsr.w	Obj1D_ChkTouch
000089A4 6700                       		beq.s	Obj1D_ChkDel
000089A6 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
000089AA 7001                       		moveq	#1,d0
000089AC 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
000089B0                            
000089B0                            Obj1D_ChkDel:
000089B0 6100 0000                  		bsr.w	DisplaySprite
000089B4 3028 0008                  		move.w	8(a0),d0
000089B8 0240 FF80                  		andi.w	#$FF80,d0
000089BC 3238 F700                  		move.w	($FFFFF700).w,d1
000089C0 0441 0080                  		subi.w	#$80,d1
000089C4 0241 FF80                  		andi.w	#$FF80,d1
000089C8 9041                       		sub.w	d1,d0
000089CA 0C40 0280                  		cmpi.w	#$280,d0
000089CE 6200 0000                  		bhi.w	Obj1D_Delete
000089D2 4E75                       		rts	
000089D4                            ; ===========================================================================
000089D4                            
000089D4                            Obj1D_Delete:				; XREF: Obj1D_Index
000089D4 6100 0000                  		bsr.w	DeleteObject
000089D8 4E75                       		rts	
000089DA                            ; ---------------------------------------------------------------------------
000089DA                            ; Subroutine to	check if Sonic touches the object
000089DA                            ; ---------------------------------------------------------------------------
000089DA                            
000089DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000089DA                            
000089DA                            
000089DA                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
000089DA 43F8 D000                  		lea	($FFFFD000).w,a1
000089DE 3029 0008                  		move.w	8(a1),d0
000089E2 9068 0008                  		sub.w	8(a0),d0
000089E6 D041                       		add.w	d1,d0
000089E8 6B00                       		bmi.s	loc_8918
000089EA D241                       		add.w	d1,d1
000089EC B041                       		cmp.w	d1,d0
000089EE 6400                       		bcc.s	loc_8918
000089F0 3429 000C                  		move.w	$C(a1),d2
000089F4 1229 0016                  		move.b	$16(a1),d1
000089F8 4881                       		ext.w	d1
000089FA D242                       		add.w	d2,d1
000089FC 3028 000C                  		move.w	$C(a0),d0
00008A00 0440 0010                  		subi.w	#$10,d0
00008A04 9041                       		sub.w	d1,d0
00008A06 6200                       		bhi.s	loc_8918
00008A08 0C40 FFF0                  		cmpi.w	#-$10,d0
00008A0C 6500                       		bcs.s	loc_8918
00008A0E 70FF                       		moveq	#-1,d0
00008A10 4E75                       		rts	
00008A12                            ; ===========================================================================
00008A12                            
00008A12                            loc_8918:
00008A12 7000                       		moveq	#0,d0
00008A14 4E75                       		rts	
00008A16                            ; End of function Obj1D_ChkTouch
00008A16                            
00008A16                            ; ===========================================================================
00008A16                            ; ---------------------------------------------------------------------------
00008A16                            ; Sprite mappings - object 1D
00008A16                            ; ---------------------------------------------------------------------------
00008A16                            Map_obj1D:
00008A16                            	include "_maps\obj1D.asm"
00008A16                            ; ---------------------------------------------------------------------------
00008A16                            ; Sprite mappings - object 1D
00008A16                            ; ---------------------------------------------------------------------------
00008A16 0000                       		dc.w byte_891E-Map_obj1D
00008A18 04                         byte_891E:	dc.b 4
00008A19 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008A1E 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008A23 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
00008A28 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008A2E 00                         		even
00008A2E 00                         		even
00008A2E                            
00008A2E                            ; ===========================================================================
00008A2E                            ; ---------------------------------------------------------------------------
00008A2E                            ; Object 2A - doors (SBZ)
00008A2E                            ; ---------------------------------------------------------------------------
00008A2E                            
00008A2E                            Obj2A:					; XREF: Obj_Index
00008A2E 7000                       		moveq	#0,d0
00008A30 1028 0024                  		move.b	$24(a0),d0
00008A34 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
00008A38 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008A3C                            ; ===========================================================================
00008A3C 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008A3E 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008A40                            ; ===========================================================================
00008A40                            
00008A40                            Obj2A_Main:				; XREF: Obj2A_Index
00008A40 5428 0024                  		addq.b	#2,$24(a0)
00008A44 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008A4C 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008A52 0028 0004 0001             		ori.b	#4,1(a0)
00008A58 117C 0008 0019             		move.b	#8,$19(a0)
00008A5E 117C 0004 0018             		move.b	#4,$18(a0)
00008A64                            
00008A64                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008A64 323C 0040                  		move.w	#$40,d1
00008A68 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008A6C 3038 D008                  		move.w	($FFFFD008).w,d0
00008A70 D041                       		add.w	d1,d0
00008A72 B068 0008                  		cmp.w	8(a0),d0
00008A76 6500                       		bcs.s	Obj2A_Animate
00008A78 9041                       		sub.w	d1,d0
00008A7A 9041                       		sub.w	d1,d0
00008A7C B068 0008                  		cmp.w	8(a0),d0
00008A80 6400                       		bcc.s	Obj2A_Animate
00008A82 D041                       		add.w	d1,d0
00008A84 B068 0008                  		cmp.w	8(a0),d0
00008A88 6400                       		bcc.s	loc_899A
00008A8A 0828 0000 0022             		btst	#0,$22(a0)
00008A90 6600                       		bne.s	Obj2A_Animate
00008A92 6000                       		bra.s	Obj2A_Open
00008A94                            ; ===========================================================================
00008A94                            
00008A94                            loc_899A:				; XREF: Obj2A_OpenShut
00008A94 0828 0000 0022             		btst	#0,$22(a0)
00008A9A 6700                       		beq.s	Obj2A_Animate
00008A9C                            
00008A9C                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008A9C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008AA2                            
00008AA2                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008AA2 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00008AA8 6100 0000                  		bsr.w	AnimateSprite
00008AAC 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008AB0 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008AB2 323C 0011                  		move.w	#$11,d1
00008AB6 343C 0020                  		move.w	#$20,d2
00008ABA 3602                       		move.w	d2,d3
00008ABC 5243                       		addq.w	#1,d3
00008ABE 3828 0008                  		move.w	8(a0),d4
00008AC2 6100 0000                  		bsr.w	SolidObject
00008AC6                            
00008AC6                            Obj2A_MarkAsUsed:
00008AC6 6000 0000                  		bra.w	MarkObjGone
00008ACA                            ; ===========================================================================
00008ACA                            Ani_obj2A:
00008ACA                            	include "_anim\obj2A.asm"
00008ACA                            ; ---------------------------------------------------------------------------
00008ACA                            ; Animation script - doors (SBZ)
00008ACA                            ; ---------------------------------------------------------------------------
00008ACA 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00008ACC 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
00008ACE 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00008ADA 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00008AE6                            		even
00008AE6                            		even
00008AE6                            
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6                            ; Sprite mappings - doors (SBZ)
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6                            Map_obj2A:
00008AE6                            	include "_maps\obj2A.asm"
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6                            ; Sprite mappings - doors (SBZ)
00008AE6                            ; ---------------------------------------------------------------------------
00008AE6 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00008AEA 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
00008AEE 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
00008AF2 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00008AF6 0000                       		dc.w byte_8A56-Map_obj2A
00008AF8 02                         byte_89FE:	dc.b 2
00008AF9 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
00008AFE 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
00008B03 02                         byte_8A09:	dc.b 2
00008B04 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00008B09 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
00008B0E 02                         byte_8A14:	dc.b 2
00008B0F D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
00008B14 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
00008B19 02                         byte_8A1F:	dc.b 2
00008B1A D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008B1F 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008B24 02                         byte_8A2A:	dc.b 2
00008B25 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008B2A 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008B2F 02                         byte_8A35:	dc.b 2
00008B30 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008B35 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008B3A 02                         byte_8A40:	dc.b 2
00008B3B C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008B40 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008B45 02                         byte_8A4B:	dc.b 2
00008B46 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008B4B 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008B50 02                         byte_8A56:	dc.b 2
00008B51 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008B56 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008B5C 00                         		even
00008B5C 00                         		even
00008B5C                            
00008B5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008B5C                            
00008B5C                            
00008B5C                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008B5C 6100 0000                  		bsr.w	Obj44_SolidWall2
00008B60 6700                       		beq.s	loc_8AA8
00008B62 6B00 0000                  		bmi.w	loc_8AC4
00008B66 4A40                       		tst.w	d0
00008B68 6700 0000                  		beq.w	loc_8A92
00008B6C 6B00                       		bmi.s	loc_8A7C
00008B6E 4A69 0010                  		tst.w	$10(a1)
00008B72 6B00                       		bmi.s	loc_8A92
00008B74 6000                       		bra.s	loc_8A82
00008B76                            ; ===========================================================================
00008B76                            
00008B76                            loc_8A7C:
00008B76 4A69 0010                  		tst.w	$10(a1)
00008B7A 6A00                       		bpl.s	loc_8A92
00008B7C                            
00008B7C                            loc_8A82:
00008B7C 9169 0008                  		sub.w	d0,8(a1)
00008B80 337C 0000 0014             		move.w	#0,$14(a1)
00008B86 337C 0000 0010             		move.w	#0,$10(a1)
00008B8C                            
00008B8C                            loc_8A92:
00008B8C 0829 0001 0022             		btst	#1,$22(a1)
00008B92 6600                       		bne.s	loc_8AB6
00008B94 08E9 0005 0022             		bset	#5,$22(a1)
00008B9A 08E8 0005 0022             		bset	#5,$22(a0)
00008BA0 4E75                       		rts	
00008BA2                            ; ===========================================================================
00008BA2                            
00008BA2                            loc_8AA8:
00008BA2 0828 0005 0022             		btst	#5,$22(a0)
00008BA8 6700                       		beq.s	locret_8AC2
00008BAA 337C 0001 001C             		move.w	#1,$1C(a1)
00008BB0                            
00008BB0                            loc_8AB6:
00008BB0 08A8 0005 0022             		bclr	#5,$22(a0)
00008BB6 08A9 0005 0022             		bclr	#5,$22(a1)
00008BBC                            
00008BBC                            locret_8AC2:
00008BBC 4E75                       		rts	
00008BBE                            ; ===========================================================================
00008BBE                            
00008BBE                            loc_8AC4:
00008BBE 4A69 0012                  		tst.w	$12(a1)
00008BC2 6A00                       		bpl.s	locret_8AD8
00008BC4 4A43                       		tst.w	d3
00008BC6 6A00                       		bpl.s	locret_8AD8
00008BC8 9769 000C                  		sub.w	d3,$C(a1)
00008BCC 337C 0000 0012             		move.w	#0,$12(a1)
00008BD2                            
00008BD2                            locret_8AD8:
00008BD2 4E75                       		rts	
00008BD4                            ; End of function Obj44_SolidWall
00008BD4                            
00008BD4                            
00008BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008BD4                            
00008BD4                            
00008BD4                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008BD4 43F8 D000                  		lea	($FFFFD000).w,a1
00008BD8 3029 0008                  		move.w	8(a1),d0
00008BDC 9068 0008                  		sub.w	8(a0),d0
00008BE0 D041                       		add.w	d1,d0
00008BE2 6B00                       		bmi.s	loc_8B48
00008BE4 3601                       		move.w	d1,d3
00008BE6 D643                       		add.w	d3,d3
00008BE8 B043                       		cmp.w	d3,d0
00008BEA 6200                       		bhi.s	loc_8B48
00008BEC 1629 0016                  		move.b	$16(a1),d3
00008BF0 4883                       		ext.w	d3
00008BF2 D443                       		add.w	d3,d2
00008BF4 3629 000C                  		move.w	$C(a1),d3
00008BF8 9668 000C                  		sub.w	$C(a0),d3
00008BFC D642                       		add.w	d2,d3
00008BFE 6B00                       		bmi.s	loc_8B48
00008C00 3802                       		move.w	d2,d4
00008C02 D844                       		add.w	d4,d4
00008C04 B644                       		cmp.w	d4,d3
00008C06 6400                       		bcc.s	loc_8B48
00008C08 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008C0C 6B00                       		bmi.s	loc_8B48
00008C0E 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008C14 6400                       		bcc.s	loc_8B48
00008C16 4A78 FE08                  		tst.w	($FFFFFE08).w
00008C1A 6600                       		bne.s	loc_8B48
00008C1C 3A00                       		move.w	d0,d5
00008C1E B240                       		cmp.w	d0,d1
00008C20 6400                       		bcc.s	loc_8B30
00008C22 D241                       		add.w	d1,d1
00008C24 9041                       		sub.w	d1,d0
00008C26 3A00                       		move.w	d0,d5
00008C28 4445                       		neg.w	d5
00008C2A                            
00008C2A                            loc_8B30:
00008C2A 3203                       		move.w	d3,d1
00008C2C B443                       		cmp.w	d3,d2
00008C2E 6400                       		bcc.s	loc_8B3C
00008C30 9644                       		sub.w	d4,d3
00008C32 3203                       		move.w	d3,d1
00008C34 4441                       		neg.w	d1
00008C36                            
00008C36                            loc_8B3C:
00008C36 BA41                       		cmp.w	d1,d5
00008C38 6200                       		bhi.s	loc_8B44
00008C3A 7801                       		moveq	#1,d4
00008C3C 4E75                       		rts	
00008C3E                            ; ===========================================================================
00008C3E                            
00008C3E                            loc_8B44:
00008C3E 78FF                       		moveq	#-1,d4
00008C40 4E75                       		rts	
00008C42                            ; ===========================================================================
00008C42                            
00008C42                            loc_8B48:
00008C42 7800                       		moveq	#0,d4
00008C44 4E75                       		rts	
00008C46                            ; End of function Obj44_SolidWall2
00008C46                            
00008C46                            ; ===========================================================================
00008C46                            ; ---------------------------------------------------------------------------
00008C46                            ; Object 1E - Ball Hog enemy (SBZ)
00008C46                            ; ---------------------------------------------------------------------------
00008C46                            
00008C46                            Obj1E:					; XREF: Obj_Index
00008C46 7000                       		moveq	#0,d0
00008C48 1028 0024                  		move.b	$24(a0),d0
00008C4C 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008C50 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008C54                            ; ===========================================================================
00008C54 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008C56 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008C58                            ; ===========================================================================
00008C58                            
00008C58                            Obj1E_Main:				; XREF: Obj1E_Index
00008C58 117C 0013 0016             		move.b	#$13,$16(a0)
00008C5E 117C 0008 0017             		move.b	#8,$17(a0)
00008C64 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008C6C 317C 2302 0002             		move.w	#$2302,2(a0)
00008C72 117C 0004 0001             		move.b	#4,1(a0)
00008C78 117C 0004 0018             		move.b	#4,$18(a0)
00008C7E 117C 0005 0020             		move.b	#5,$20(a0)
00008C84 117C 000C 0019             		move.b	#$C,$19(a0)
00008C8A 6100 0000                  		bsr.w	ObjectFall
00008C8E 4EB9 0000 0000             		jsr	ObjHitFloor
00008C94 4A41                       		tst.w	d1
00008C96 6A00                       		bpl.s	locret_8BAC
00008C98 D368 000C                  		add.w	d1,$C(a0)
00008C9C 317C 0000 0012             		move.w	#0,$12(a0)
00008CA2 5428 0024                  		addq.b	#2,$24(a0)
00008CA6                            
00008CA6                            locret_8BAC:
00008CA6 4E75                       		rts	
00008CA8                            ; ===========================================================================
00008CA8                            
00008CA8                            Obj1E_Action:				; XREF: Obj1E_Index
00008CA8 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008CAE 6100 0000                  		bsr.w	AnimateSprite
00008CB2 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00008CB8 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00008CBA 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00008CBE 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00008CC0 6000                       		bra.s	Obj1E_MarkAsGone
00008CC2                            ; ===========================================================================
00008CC2                            
00008CC2                            Obj1E_SetBall:				; XREF: Obj1E_Action
00008CC2 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00008CC6                            
00008CC6                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00008CC6 6000 0000                  		bra.w	MarkObjGone
00008CCA                            ; ===========================================================================
00008CCA                            
00008CCA                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00008CCA 117C 0001 0032             		move.b	#1,$32(a0)
00008CD0 6100 0000                  		bsr.w	SingleObjLoad
00008CD4 6600                       		bne.s	loc_8C1A
00008CD6 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00008CDA 3368 0008 0008             		move.w	8(a0),8(a1)
00008CE0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008CE6 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00008CEC 337C 0000 0012             		move.w	#0,$12(a1)
00008CF2 70FC                       		moveq	#-4,d0
00008CF4 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00008CFA 6700                       		beq.s	loc_8C0A	; if not, branch
00008CFC 4440                       		neg.w	d0
00008CFE 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00008D02                            
00008D02                            loc_8C0A:
00008D02 D169 0008                  		add.w	d0,8(a1)
00008D06 0669 000C 000C             		addi.w	#$C,$C(a1)
00008D0C 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00008D12                            
00008D12                            loc_8C1A:
00008D12 60B2                       		bra.s	Obj1E_MarkAsGone
00008D14                            ; ===========================================================================
00008D14                            ; ---------------------------------------------------------------------------
00008D14                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00008D14                            ; ---------------------------------------------------------------------------
00008D14                            
00008D14                            Obj20:					; XREF: Obj_Index
00008D14 7000                       		moveq	#0,d0
00008D16 1028 0024                  		move.b	$24(a0),d0
00008D1A 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00008D1E 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00008D22                            ; ===========================================================================
00008D22 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00008D24 0000                       		dc.w Obj20_Bounce-Obj20_Index
00008D26                            ; ===========================================================================
00008D26                            
00008D26                            Obj20_Main:				; XREF: Obj20_Index
00008D26 5428 0024                  		addq.b	#2,$24(a0)
00008D2A 117C 0007 0016             		move.b	#7,$16(a0)
00008D30 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008D38 317C 2302 0002             		move.w	#$2302,2(a0)
00008D3E 117C 0004 0001             		move.b	#4,1(a0)
00008D44 117C 0003 0018             		move.b	#3,$18(a0)
00008D4A 117C 0087 0020             		move.b	#$87,$20(a0)
00008D50 117C 0008 0019             		move.b	#8,$19(a0)
00008D56 7000                       		moveq	#0,d0
00008D58 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008D5C C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00008D60 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00008D64 117C 0004 001A             		move.b	#4,$1A(a0)
00008D6A                            
00008D6A                            Obj20_Bounce:				; XREF: Obj20_Index
00008D6A 4EB9 0000 0000             		jsr	ObjectFall
00008D70 4A68 0012                  		tst.w	$12(a0)
00008D74 6B00                       		bmi.s	Obj20_ChkExplode
00008D76 4EB9 0000 0000             		jsr	ObjHitFloor
00008D7C 4A41                       		tst.w	d1
00008D7E 6A00                       		bpl.s	Obj20_ChkExplode
00008D80 D368 000C                  		add.w	d1,$C(a0)
00008D84 317C FD00 0012             		move.w	#-$300,$12(a0)
00008D8A 4A03                       		tst.b	d3
00008D8C 6700                       		beq.s	Obj20_ChkExplode
00008D8E 6B00                       		bmi.s	loc_8CA4
00008D90 4A68 0010                  		tst.w	$10(a0)
00008D94 6A00                       		bpl.s	Obj20_ChkExplode
00008D96 4468 0010                  		neg.w	$10(a0)
00008D9A 6000                       		bra.s	Obj20_ChkExplode
00008D9C                            ; ===========================================================================
00008D9C                            
00008D9C                            loc_8CA4:				; XREF: Obj20_Bounce
00008D9C 4A68 0010                  		tst.w	$10(a0)
00008DA0 6B00                       		bmi.s	Obj20_ChkExplode
00008DA2 4468 0010                  		neg.w	$10(a0)
00008DA6                            
00008DA6                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00008DA6 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00008DAA 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00008DAC 10BC 0024                  		move.b	#$24,0(a0)
00008DB0 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00008DB4 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00008DBA 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00008DBE                            ; ===========================================================================
00008DBE                            
00008DBE                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00008DBE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008DC2 6A00                       		bpl.s	Obj20_Display
00008DC4 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00008DCA 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00008DD0                            
00008DD0                            Obj20_Display:
00008DD0 6100 0000                  		bsr.w	DisplaySprite
00008DD4 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008DD8 0640 00E0                  		addi.w	#$E0,d0
00008DDC B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00008DE0 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00008DE4 4E75                       		rts	
00008DE6                            ; ===========================================================================
00008DE6                            ; ---------------------------------------------------------------------------
00008DE6                            ; Object 24 - explosion	from a destroyed monitor
00008DE6                            ; ---------------------------------------------------------------------------
00008DE6                            
00008DE6                            Obj24:					; XREF: Obj_Index
00008DE6 7000                       		moveq	#0,d0
00008DE8 1028 0024                  		move.b	$24(a0),d0
00008DEC 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00008DF0 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00008DF4                            ; ===========================================================================
00008DF4 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00008DF6 0000                       		dc.w Obj24_Animate-Obj24_Index
00008DF8                            ; ===========================================================================
00008DF8                            
00008DF8                            Obj24_Main:				; XREF: Obj24_Index
00008DF8 5428 0024                  		addq.b	#2,$24(a0)
00008DFC 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00008E04 317C 041C 0002             		move.w	#$41C,2(a0)
00008E0A 117C 0004 0001             		move.b	#4,1(a0)
00008E10 117C 0001 0018             		move.b	#1,$18(a0)
00008E16 117C 0000 0020             		move.b	#0,$20(a0)
00008E1C 117C 000C 0019             		move.b	#$C,$19(a0)
00008E22 117C 0009 001E             		move.b	#9,$1E(a0)
00008E28 117C 0000 001A             		move.b	#0,$1A(a0)
00008E2E 303C 00A5                  		move.w	#$A5,d0
00008E32 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play explosion sound
00008E38                            
00008E38                            Obj24_Animate:				; XREF: Obj24_Index
00008E38 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008E3C 6A00                       		bpl.s	Obj24_Display
00008E3E 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00008E44 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008E48 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00008E4E 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008E52                            
00008E52                            Obj24_Display:
00008E52 6000 0000                  		bra.w	DisplaySprite
00008E56                            ; ===========================================================================
00008E56                            ; ---------------------------------------------------------------------------
00008E56                            ; Object 27 - explosion	from a destroyed enemy
00008E56                            ; ---------------------------------------------------------------------------
00008E56                            
00008E56                            Obj27:					; XREF: Obj_Index
00008E56 7000                       		moveq	#0,d0
00008E58 1028 0024                  		move.b	$24(a0),d0
00008E5C 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00008E60 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00008E64                            ; ===========================================================================
00008E64 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00008E66 0000                       		dc.w Obj27_Main-Obj27_Index
00008E68 0000                       		dc.w Obj27_Animate-Obj27_Index
00008E6A                            ; ===========================================================================
00008E6A                            
00008E6A                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00008E6A 5428 0024                  		addq.b	#2,$24(a0)
00008E6E 6100 0000                  		bsr.w	SingleObjLoad
00008E72 6600                       		bne.s	Obj27_Main
00008E74 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00008E78 3368 0008 0008             		move.w	8(a0),8(a1)
00008E7E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008E84 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00008E8A                            
00008E8A                            Obj27_Main:				; XREF: Obj27_Index
00008E8A 5428 0024                  		addq.b	#2,$24(a0)
00008E8E 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00008E96 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008E9C 117C 0004 0001             		move.b	#4,1(a0)
00008EA2 117C 0001 0018             		move.b	#1,$18(a0)
00008EA8 117C 0000 0020             		move.b	#0,$20(a0)
00008EAE 117C 000C 0019             		move.b	#$C,$19(a0)
00008EB4 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008EBA 117C 0000 001A             		move.b	#0,$1A(a0)
00008EC0 303C 00C1                  		move.w	#$C1,d0
00008EC4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00008ECA                            
00008ECA                            Obj27_Animate:				; XREF: Obj27_Index
00008ECA 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008ECE 6A00                       		bpl.s	Obj27_Display
00008ED0 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008ED6 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008EDA 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00008EE0 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008EE4                            
00008EE4                            Obj27_Display:
00008EE4 6000 0000                  		bra.w	DisplaySprite
00008EE8                            ; ===========================================================================
00008EE8                            ; ---------------------------------------------------------------------------
00008EE8                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00008EE8                            ; ---------------------------------------------------------------------------
00008EE8                            
00008EE8                            Obj3F:					; XREF: Obj_Index
00008EE8 7000                       		moveq	#0,d0
00008EEA 1028 0024                  		move.b	$24(a0),d0
00008EEE 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00008EF2 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00008EF6                            ; ===========================================================================
00008EF6 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00008EF8 FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00008EFA                            ; ===========================================================================
00008EFA                            
00008EFA                            Obj3F_Main:				; XREF: Obj3F_Index
00008EFA 5428 0024                  		addq.b	#2,$24(a0)
00008EFE 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00008F06 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008F0C 117C 0004 0001             		move.b	#4,1(a0)
00008F12 117C 0001 0018             		move.b	#1,$18(a0)
00008F18 117C 0000 0020             		move.b	#0,$20(a0)
00008F1E 117C 000C 0019             		move.b	#$C,$19(a0)
00008F24 117C 0007 001E             		move.b	#7,$1E(a0)
00008F2A 117C 0000 001A             		move.b	#0,$1A(a0)
00008F30 303C 00C4                  		move.w	#$C4,d0
00008F34 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00008F3A                            ; ===========================================================================
00008F3A                            Ani_obj1E:
00008F3A                            	include "_anim\obj1E.asm"
00008F3A                            ; ---------------------------------------------------------------------------
00008F3A                            ; Animation script - doors (SBZ)
00008F3A                            ; ---------------------------------------------------------------------------
00008F3A 0000                       		dc.w byte_8E4A-Ani_obj1E
00008F3C 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00008F54 00                         		even
00008F54 00                         		even
00008F54                            
00008F54                            ; ---------------------------------------------------------------------------
00008F54                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008F54                            ; ---------------------------------------------------------------------------
00008F54                            Map_obj1E:
00008F54                            	include "_maps\obj1E.asm"
00008F54                            ; ---------------------------------------------------------------------------
00008F54                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008F54                            ; ---------------------------------------------------------------------------
00008F54 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00008F58 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00008F5C 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00008F60 02                         byte_8E6E:	dc.b 2
00008F61 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008F66 FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00008F6B 02                         byte_8E79:	dc.b 2
00008F6C EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008F71 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00008F76 02                         byte_8E84:	dc.b 2
00008F77 F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00008F7C 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00008F81 02                         byte_8E8F:	dc.b 2
00008F82 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00008F87 F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00008F8C 01                         byte_8E9A:	dc.b 1
00008F8D F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00008F92 01                         byte_8EA0:	dc.b 1
00008F93 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00008F98                            		even
00008F98                            		even
00008F98                            
00008F98                            ; ---------------------------------------------------------------------------
00008F98                            ; Sprite mappings - explosion
00008F98                            ; ---------------------------------------------------------------------------
00008F98                            Map_obj24:
00008F98                            	include "_maps\obj24.asm"
00008F98                            ; ---------------------------------------------------------------------------
00008F98                            ; Sprite mappings - explosion
00008F98                            ; ---------------------------------------------------------------------------
00008F98 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00008F9C 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00008FA0 01                         byte_8EAE:	dc.b 1
00008FA1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00008FA6 01                         byte_8EB4:	dc.b 1
00008FA7 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00008FAC 01                         byte_8EBA:	dc.b 1
00008FAD F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00008FB2 01                         byte_8EC0:	dc.b 1
00008FB3 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00008FB8                            		even
00008FB8                            		even
00008FB8                            
00008FB8                            ; ---------------------------------------------------------------------------
00008FB8                            ; Sprite mappings - explosion
00008FB8                            ; ---------------------------------------------------------------------------
00008FB8 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00008FBC 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00008FC0 0000                       		dc.w byte_8EF7-Map_obj27
00008FC2 01                         byte_8ED0:	dc.b 1
00008FC3 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00008FC8 01                         byte_8ED6:	dc.b 1
00008FC9 F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00008FCE 01                         byte_8EDC:	dc.b 1
00008FCF F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00008FD4 04                         byte_8EE2:	dc.b 4
00008FD5 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00008FDA EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00008FDF 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00008FE4 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00008FE9 04                         byte_8EF7:	dc.b 4
00008FEA EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00008FEF EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00008FF4 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00008FF9 FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00008FFE                            		even
00008FFE                            ; ---------------------------------------------------------------------------
00008FFE                            ; Sprite mappings - explosion from when	a boss is destroyed
00008FFE                            ; ---------------------------------------------------------------------------
00008FFE FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009000 0000                       		dc.w byte_8F16-Map_obj3F
00009002 0000                       		dc.w byte_8F1C-Map_obj3F
00009004 FFD6                       		dc.w byte_8EE2-Map_obj3F
00009006 FFEB                       		dc.w byte_8EF7-Map_obj3F
00009008 01                         byte_8F16:	dc.b 1
00009009 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000900E 01                         byte_8F1C:	dc.b 1
0000900F F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009014                            		even
00009014                            ; ===========================================================================
00009014                            ; ---------------------------------------------------------------------------
00009014                            ; Object 28 - animals
00009014                            ; ---------------------------------------------------------------------------
00009014                            
00009014                            Obj28:					; XREF: Obj_Index
00009014 7000                       		moveq	#0,d0
00009016 1028 0024                  		move.b	$24(a0),d0
0000901A 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
0000901E 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009022                            ; ===========================================================================
00009022 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009026 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
0000902A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
0000902E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009032 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009036 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
0000903A 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
0000903E 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009042 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009046 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
0000904A 0000                       		dc.w loc_92D6-Obj28_Index
0000904C                            
0000904C 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00009058                            
00009058 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
0000905C 0000 0000                  		dc.l Map_obj28
00009060 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009064 0000 0000                  		dc.l Map_obj28a		; mappings address
00009068 FE80 FD00                  		dc.w $FE80, $FD00
0000906C 0000 0000                  		dc.l Map_obj28
00009070 FEC0 FE80                  		dc.w $FEC0, $FE80
00009074 0000 0000                  		dc.l Map_obj28a
00009078 FE40 FD00                  		dc.w $FE40, $FD00
0000907C 0000 0000                  		dc.l Map_obj28b
00009080 FD00 FC00                  		dc.w $FD00, $FC00
00009084 0000 0000                  		dc.l Map_obj28a
00009088 FD80 FC80                  		dc.w $FD80, $FC80
0000908C 0000 0000                  		dc.l Map_obj28b
00009090                            
00009090 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
000090A0 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
000090B0 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
000090BC                            
000090BC 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
000090D0 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
000090E4 0000 0000                  		dc.l Map_obj28b
000090E8                            
000090E8 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
000090FA 0565 05B3                  		dc.w $565, $5B3
000090FE                            ; ===========================================================================
000090FE                            
000090FE                            Obj28_Ending:				; XREF: Obj28_Index
000090FE 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009102 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009106 7000                       		moveq	#0,d0
00009108 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
0000910C D040                       		add.w	d0,d0		; multiply d0 by 2
0000910E 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009112 0440 0014                  		subi.w	#$14,d0
00009116 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000911C D040                       		add.w	d0,d0
0000911E 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009124 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
00009128 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000912E 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009134 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000913A 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009140 117C 000C 0016             		move.b	#$C,$16(a0)
00009146 117C 0004 0001             		move.b	#4,1(a0)
0000914C 08E8 0000 0001             		bset	#0,1(a0)
00009152 117C 0006 0018             		move.b	#6,$18(a0)
00009158 117C 0008 0019             		move.b	#8,$19(a0)
0000915E 117C 0007 001E             		move.b	#7,$1E(a0)
00009164 6000 0000                  		bra.w	DisplaySprite
00009168                            ; ===========================================================================
00009168                            
00009168                            Obj28_FromEnemy:			; XREF: Obj28_Ending
00009168 5428 0024                  		addq.b	#2,$24(a0)
0000916C 6100 9846                  		bsr.w	RandomNumber
00009170 0240 0001                  		andi.w	#1,d0
00009174 7200                       		moveq	#0,d1
00009176 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000917A D241                       		add.w	d1,d1
0000917C D240                       		add.w	d0,d1
0000917E 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009182 1031 1000                  		move.b	(a1,d1.w),d0
00009186 1140 0030                  		move.b	d0,$30(a0)
0000918A E748                       		lsl.w	#3,d0
0000918C 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009190 D2C0                       		adda.w	d0,a1
00009192 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
00009196 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000919A 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000919E 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
000091A4 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
000091AA 6700                       		beq.s	loc_90C0	; if yes, branch
000091AC 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
000091B2                            
000091B2                            loc_90C0:
000091B2 117C 000C 0016             		move.b	#$C,$16(a0)
000091B8 117C 0004 0001             		move.b	#4,1(a0)
000091BE 08E8 0000 0001             		bset	#0,1(a0)
000091C4 117C 0006 0018             		move.b	#6,$18(a0)
000091CA 117C 0008 0019             		move.b	#8,$19(a0)
000091D0 117C 0007 001E             		move.b	#7,$1E(a0)
000091D6 117C 0002 001A             		move.b	#2,$1A(a0)
000091DC 317C FC00 0012             		move.w	#-$400,$12(a0)
000091E2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000091E6 6600                       		bne.s	loc_911C
000091E8 6100 0000                  		bsr.w	SingleObjLoad
000091EC 6600                       		bne.s	Obj28_Display
000091EE 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000091F2 3368 0008 0008             		move.w	8(a0),8(a1)
000091F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000091FE 3028 003E                  		move.w	$3E(a0),d0
00009202 E248                       		lsr.w	#1,d0
00009204 1340 001A                  		move.b	d0,$1A(a1)
00009208                            
00009208                            Obj28_Display:
00009208 6000 0000                  		bra.w	DisplaySprite
0000920C                            ; ===========================================================================
0000920C                            
0000920C                            loc_911C:
0000920C 117C 0012 0024             		move.b	#$12,$24(a0)
00009212 4268 0010                  		clr.w	$10(a0)
00009216 6000 0000                  		bra.w	DisplaySprite
0000921A                            ; ===========================================================================
0000921A                            
0000921A                            loc_912A:				; XREF: Obj28_Index
0000921A 4A28 0001                  		tst.b	1(a0)
0000921E 6A00 0000                  		bpl.w	DeleteObject
00009222 6100 0000                  		bsr.w	ObjectFall
00009226 4A68 0012                  		tst.w	$12(a0)
0000922A 6B00                       		bmi.s	loc_9180
0000922C 4EB9 0000 0000             		jsr	ObjHitFloor
00009232 4A41                       		tst.w	d1
00009234 6A00                       		bpl.s	loc_9180
00009236 D368 000C                  		add.w	d1,$C(a0)
0000923A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009240 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009246 117C 0001 001A             		move.b	#1,$1A(a0)
0000924C 1028 0030                  		move.b	$30(a0),d0
00009250 D000                       		add.b	d0,d0
00009252 5800                       		addq.b	#4,d0
00009254 1140 0024                  		move.b	d0,$24(a0)
00009258 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000925C 6700                       		beq.s	loc_9180
0000925E 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009264 6700                       		beq.s	loc_9180
00009266 4468 0010                  		neg.w	$10(a0)
0000926A 0868 0000 0001             		bchg	#0,1(a0)
00009270                            
00009270                            loc_9180:
00009270 6000 0000                  		bra.w	DisplaySprite
00009274                            ; ===========================================================================
00009274                            
00009274                            loc_9184:				; XREF: Obj28_Index
00009274 6100 0000                  		bsr.w	ObjectFall
00009278 117C 0001 001A             		move.b	#1,$1A(a0)
0000927E 4A68 0012                  		tst.w	$12(a0)
00009282 6B00                       		bmi.s	loc_91AE
00009284 117C 0000 001A             		move.b	#0,$1A(a0)
0000928A 4EB9 0000 0000             		jsr	ObjHitFloor
00009290 4A41                       		tst.w	d1
00009292 6A00                       		bpl.s	loc_91AE
00009294 D368 000C                  		add.w	d1,$C(a0)
00009298 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000929E                            
0000929E                            loc_91AE:
0000929E 4A28 0028                  		tst.b	$28(a0)
000092A2 6600                       		bne.s	loc_9224
000092A4 4A28 0001                  		tst.b	1(a0)
000092A8 6A00 0000                  		bpl.w	DeleteObject
000092AC 6000 0000                  		bra.w	DisplaySprite
000092B0                            ; ===========================================================================
000092B0                            
000092B0                            loc_91C0:				; XREF: Obj28_Index
000092B0 6100 0000                  		bsr.w	SpeedToPos
000092B4 0668 0018 0012             		addi.w	#$18,$12(a0)
000092BA 4A68 0012                  		tst.w	$12(a0)
000092BE 6B00                       		bmi.s	loc_91FC
000092C0 4EB9 0000 0000             		jsr	ObjHitFloor
000092C6 4A41                       		tst.w	d1
000092C8 6A00                       		bpl.s	loc_91FC
000092CA D368 000C                  		add.w	d1,$C(a0)
000092CE 3168 0034 0012             		move.w	$34(a0),$12(a0)
000092D4 4A28 0028                  		tst.b	$28(a0)
000092D8 6700                       		beq.s	loc_91FC
000092DA 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000092E0 6700                       		beq.s	loc_91FC
000092E2 4468 0010                  		neg.w	$10(a0)
000092E6 0868 0000 0001             		bchg	#0,1(a0)
000092EC                            
000092EC                            loc_91FC:
000092EC 5328 001E                  		subq.b	#1,$1E(a0)
000092F0 6A00                       		bpl.s	loc_9212
000092F2 117C 0001 001E             		move.b	#1,$1E(a0)
000092F8 5228 001A                  		addq.b	#1,$1A(a0)
000092FC 0228 0001 001A             		andi.b	#1,$1A(a0)
00009302                            
00009302                            loc_9212:
00009302 4A28 0028                  		tst.b	$28(a0)
00009306 6600                       		bne.s	loc_9224
00009308 4A28 0001                  		tst.b	1(a0)
0000930C 6A00 0000                  		bpl.w	DeleteObject
00009310 6000 0000                  		bra.w	DisplaySprite
00009314                            ; ===========================================================================
00009314                            
00009314                            loc_9224:				; XREF: Obj28_Index
00009314 3028 0008                  		move.w	8(a0),d0
00009318 9078 D008                  		sub.w	($FFFFD008).w,d0
0000931C 6500                       		bcs.s	loc_923C
0000931E 0440 0180                  		subi.w	#$180,d0
00009322 6A00                       		bpl.s	loc_923C
00009324 4A28 0001                  		tst.b	1(a0)
00009328 6A00 0000                  		bpl.w	DeleteObject
0000932C                            
0000932C                            loc_923C:
0000932C 6000 0000                  		bra.w	DisplaySprite
00009330                            ; ===========================================================================
00009330                            
00009330                            loc_9240:				; XREF: Obj28_Index
00009330 4A28 0001                  		tst.b	1(a0)
00009334 6A00 0000                  		bpl.w	DeleteObject
00009338 5368 0036                  		subq.w	#1,$36(a0)
0000933C 6600 0000                  		bne.w	loc_925C
00009340 117C 0002 0024             		move.b	#2,$24(a0)
00009346 117C 0003 0018             		move.b	#3,$18(a0)
0000934C                            
0000934C                            loc_925C:
0000934C 6000 0000                  		bra.w	DisplaySprite
00009350                            ; ===========================================================================
00009350                            
00009350                            loc_9260:				; XREF: Obj28_Index
00009350 6100 0000                  		bsr.w	sub_9404
00009354 6400                       		bcc.s	loc_927C
00009356 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000935C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009362 117C 000E 0024             		move.b	#$E,$24(a0)
00009368 6000 FF46                  		bra.w	loc_91C0
0000936C                            ; ===========================================================================
0000936C                            
0000936C                            loc_927C:
0000936C 6000 FFA6                  		bra.w	loc_9224
00009370                            ; ===========================================================================
00009370                            
00009370                            loc_9280:				; XREF: Obj28_Index
00009370 6100 0000                  		bsr.w	sub_9404
00009374 6A00                       		bpl.s	loc_92B6
00009376 4268 0010                  		clr.w	$10(a0)
0000937A 4268 0032                  		clr.w	$32(a0)
0000937E 6100 0000                  		bsr.w	SpeedToPos
00009382 0668 0018 0012             		addi.w	#$18,$12(a0)
00009388 6100 0000                  		bsr.w	loc_93C4
0000938C 6100 0000                  		bsr.w	loc_93EC
00009390 5328 001E                  		subq.b	#1,$1E(a0)
00009394 6A00                       		bpl.s	loc_92B6
00009396 117C 0001 001E             		move.b	#1,$1E(a0)
0000939C 5228 001A                  		addq.b	#1,$1A(a0)
000093A0 0228 0001 001A             		andi.b	#1,$1A(a0)
000093A6                            
000093A6                            loc_92B6:
000093A6 6000 FF6C                  		bra.w	loc_9224
000093AA                            ; ===========================================================================
000093AA                            
000093AA                            loc_92BA:				; XREF: Obj28_Index
000093AA 6100 0000                  		bsr.w	sub_9404
000093AE 6A00                       		bpl.s	loc_9310
000093B0 3168 0032 0010             		move.w	$32(a0),$10(a0)
000093B6 3168 0034 0012             		move.w	$34(a0),$12(a0)
000093BC 117C 0004 0024             		move.b	#4,$24(a0)
000093C2 6000 FEB0                  		bra.w	loc_9184
000093C6                            ; ===========================================================================
000093C6                            
000093C6                            loc_92D6:				; XREF: Obj28_Index
000093C6 6100 0000                  		bsr.w	ObjectFall
000093CA 117C 0001 001A             		move.b	#1,$1A(a0)
000093D0 4A68 0012                  		tst.w	$12(a0)
000093D4 6B00                       		bmi.s	loc_9310
000093D6 117C 0000 001A             		move.b	#0,$1A(a0)
000093DC 4EB9 0000 0000             		jsr	ObjHitFloor
000093E2 4A41                       		tst.w	d1
000093E4 6A00                       		bpl.s	loc_9310
000093E6 4628 0029                  		not.b	$29(a0)
000093EA 6600                       		bne.s	loc_9306
000093EC 4468 0010                  		neg.w	$10(a0)
000093F0 0868 0000 0001             		bchg	#0,1(a0)
000093F6                            
000093F6                            loc_9306:
000093F6 D368 000C                  		add.w	d1,$C(a0)
000093FA 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009400                            
00009400                            loc_9310:
00009400 6000 FF12                  		bra.w	loc_9224
00009404                            ; ===========================================================================
00009404                            
00009404                            loc_9314:				; XREF: Obj28_Index
00009404 6100 0000                  		bsr.w	sub_9404
00009408 6A00                       		bpl.s	loc_932E
0000940A 4268 0010                  		clr.w	$10(a0)
0000940E 4268 0032                  		clr.w	$32(a0)
00009412 6100 0000                  		bsr.w	ObjectFall
00009416 6100 0000                  		bsr.w	loc_93C4
0000941A 6100 0000                  		bsr.w	loc_93EC
0000941E                            
0000941E                            loc_932E:
0000941E 6000 FEF4                  		bra.w	loc_9224
00009422                            ; ===========================================================================
00009422                            
00009422                            loc_9332:				; XREF: Obj28_Index
00009422 6100 0000                  		bsr.w	sub_9404
00009426 6A00                       		bpl.s	loc_936C
00009428 6100 0000                  		bsr.w	ObjectFall
0000942C 117C 0001 001A             		move.b	#1,$1A(a0)
00009432 4A68 0012                  		tst.w	$12(a0)
00009436 6B00                       		bmi.s	loc_936C
00009438 117C 0000 001A             		move.b	#0,$1A(a0)
0000943E 4EB9 0000 0000             		jsr	ObjHitFloor
00009444 4A41                       		tst.w	d1
00009446 6A00                       		bpl.s	loc_936C
00009448 4468 0010                  		neg.w	$10(a0)
0000944C 0868 0000 0001             		bchg	#0,1(a0)
00009452 D368 000C                  		add.w	d1,$C(a0)
00009456 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000945C                            
0000945C                            loc_936C:
0000945C 6000 FEB6                  		bra.w	loc_9224
00009460                            ; ===========================================================================
00009460                            
00009460                            loc_9370:				; XREF: Obj28_Index
00009460 6100 0000                  		bsr.w	sub_9404
00009464 6A00                       		bpl.s	loc_93C0
00009466 6100 0000                  		bsr.w	SpeedToPos
0000946A 0668 0018 0012             		addi.w	#$18,$12(a0)
00009470 4A68 0012                  		tst.w	$12(a0)
00009474 6B00                       		bmi.s	loc_93AA
00009476 4EB9 0000 0000             		jsr	ObjHitFloor
0000947C 4A41                       		tst.w	d1
0000947E 6A00                       		bpl.s	loc_93AA
00009480 4628 0029                  		not.b	$29(a0)
00009484 6600                       		bne.s	loc_93A0
00009486 4468 0010                  		neg.w	$10(a0)
0000948A 0868 0000 0001             		bchg	#0,1(a0)
00009490                            
00009490                            loc_93A0:
00009490 D368 000C                  		add.w	d1,$C(a0)
00009494 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000949A                            
0000949A                            loc_93AA:
0000949A 5328 001E                  		subq.b	#1,$1E(a0)
0000949E 6A00                       		bpl.s	loc_93C0
000094A0 117C 0001 001E             		move.b	#1,$1E(a0)
000094A6 5228 001A                  		addq.b	#1,$1A(a0)
000094AA 0228 0001 001A             		andi.b	#1,$1A(a0)
000094B0                            
000094B0                            loc_93C0:
000094B0 6000 FE62                  		bra.w	loc_9224
000094B4                            ; ===========================================================================
000094B4                            
000094B4                            loc_93C4:
000094B4 117C 0001 001A             		move.b	#1,$1A(a0)
000094BA 4A68 0012                  		tst.w	$12(a0)
000094BE 6B00                       		bmi.s	locret_93EA
000094C0 117C 0000 001A             		move.b	#0,$1A(a0)
000094C6 4EB9 0000 0000             		jsr	ObjHitFloor
000094CC 4A41                       		tst.w	d1
000094CE 6A00                       		bpl.s	locret_93EA
000094D0 D368 000C                  		add.w	d1,$C(a0)
000094D4 3168 0034 0012             		move.w	$34(a0),$12(a0)
000094DA                            
000094DA                            locret_93EA:
000094DA 4E75                       		rts	
000094DC                            ; ===========================================================================
000094DC                            
000094DC                            loc_93EC:
000094DC 08E8 0000 0001             		bset	#0,1(a0)
000094E2 3028 0008                  		move.w	8(a0),d0
000094E6 9078 D008                  		sub.w	($FFFFD008).w,d0
000094EA 6400                       		bcc.s	locret_9402
000094EC 08A8 0000 0001             		bclr	#0,1(a0)
000094F2                            
000094F2                            locret_9402:
000094F2 4E75                       		rts	
000094F4                            
000094F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094F4                            
000094F4                            
000094F4                            sub_9404:
000094F4 3038 D008                  		move.w	($FFFFD008).w,d0
000094F8 9068 0008                  		sub.w	8(a0),d0
000094FC 0440 00B8                  		subi.w	#$B8,d0
00009500 4E75                       		rts	
00009502                            ; End of function sub_9404
00009502                            
00009502                            ; ===========================================================================
00009502                            ; ---------------------------------------------------------------------------
00009502                            ; Object 29 - points that appear when you destroy something
00009502                            ; ---------------------------------------------------------------------------
00009502                            
00009502                            Obj29:					; XREF: Obj_Index
00009502 7000                       		moveq	#0,d0
00009504 1028 0024                  		move.b	$24(a0),d0
00009508 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000950C 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
00009510 6000 0000                  		bra.w	DisplaySprite
00009514                            ; ===========================================================================
00009514 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
00009516 0000                       		dc.w Obj29_Slower-Obj29_Index
00009518                            ; ===========================================================================
00009518                            
00009518                            Obj29_Main:				; XREF: Obj29_Index
00009518 5428 0024                  		addq.b	#2,$24(a0)
0000951C 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009524 317C 2797 0002             		move.w	#$2797,2(a0)
0000952A 117C 0004 0001             		move.b	#4,1(a0)
00009530 117C 0001 0018             		move.b	#1,$18(a0)
00009536 117C 0008 0019             		move.b	#8,$19(a0)
0000953C 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009542                            
00009542                            Obj29_Slower:				; XREF: Obj29_Index
00009542 4A68 0012                  		tst.w	$12(a0)		; is object moving?
00009546 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000954A 6100 0000                  		bsr.w	SpeedToPos
0000954E 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009554 4E75                       		rts	
00009556                            ; ===========================================================================
00009556                            ; ---------------------------------------------------------------------------
00009556                            ; Sprite mappings - animals
00009556                            ; ---------------------------------------------------------------------------
00009556                            Map_obj28:
00009556                            	include "_maps\obj28.asm"
00009556                            ; ---------------------------------------------------------------------------
00009556                            ; Sprite mappings - animals
00009556                            ; ---------------------------------------------------------------------------
00009556 0000                       		dc.w byte_9472-Map_obj28
00009558 0000                       		dc.w byte_9478-Map_obj28
0000955A 0000                       		dc.w byte_946C-Map_obj28
0000955C 01                         byte_946C:	dc.b 1
0000955D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009562 01                         byte_9472:	dc.b 1
00009563 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
00009568 01                         byte_9478:	dc.b 1
00009569 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000956E                            		even
0000956E                            		even
0000956E                            
0000956E                            Map_obj28a:
0000956E                            	include "_maps\obj28a.asm"
0000956E                            ; ---------------------------------------------------------------------------
0000956E                            ; Sprite mappings - animals
0000956E                            ; ---------------------------------------------------------------------------
0000956E 0000                       		dc.w byte_948A-Map_obj28a
00009570 0000                       		dc.w byte_9490-Map_obj28a
00009572 0000                       		dc.w byte_9484-Map_obj28a
00009574 01                         byte_9484:	dc.b 1
00009575 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000957A 01                         byte_948A:	dc.b 1
0000957B FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009580 01                         byte_9490:	dc.b 1
00009581 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
00009586                            		even
00009586                            		even
00009586                            
00009586                            Map_obj28b:
00009586                            	include "_maps\obj28b.asm"
00009586                            ; ---------------------------------------------------------------------------
00009586                            ; Sprite mappings - animals
00009586                            ; ---------------------------------------------------------------------------
00009586 0000                       		dc.w byte_94A2-Map_obj28b
00009588 0000                       		dc.w byte_94A8-Map_obj28b
0000958A 0000                       		dc.w byte_949C-Map_obj28b
0000958C 01                         byte_949C:	dc.b 1
0000958D F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009592 01                         byte_94A2:	dc.b 1
00009593 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
00009598 01                         byte_94A8:	dc.b 1
00009599 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000959E                            		even
0000959E                            		even
0000959E                            
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            ; Sprite mappings - points that	appear when you	destroy	something
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            Map_obj29:
0000959E                            	include "_maps\obj29.asm"
0000959E                            ; ---------------------------------------------------------------------------
0000959E                            ; Sprite mappings - points that	appear when you	destroy	something
0000959E                            ; ---------------------------------------------------------------------------
0000959E 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
000095A2 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
000095A6 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
000095AA 0000                       		dc.w byte_94E5-Map_obj29
000095AC 01                         byte_94BC:	dc.b 1
000095AD FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
000095B2 01                         byte_94C2:	dc.b 1
000095B3 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
000095B8 01                         byte_94C8:	dc.b 1
000095B9 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000095BE 01                         byte_94CE:	dc.b 1
000095BF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000095C4 01                         byte_94D4:	dc.b 1
000095C5 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
000095CA 02                         byte_94DA:	dc.b 2
000095CB FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
000095D0 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000095D5 02                         byte_94E5:	dc.b 2
000095D6 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
000095DB FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
000095E0                            		even
000095E0                            		even
000095E0                            
000095E0                            ; ===========================================================================
000095E0                            ; ---------------------------------------------------------------------------
000095E0                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
000095E0                            ; ---------------------------------------------------------------------------
000095E0                            
000095E0                            Obj1F:					; XREF: Obj_Index
000095E0 7000                       		moveq	#0,d0
000095E2 1028 0024                  		move.b	$24(a0),d0
000095E6 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
000095EA 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
000095EE                            ; ===========================================================================
000095EE 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
000095F0 0000                       		dc.w Obj1F_Action-Obj1F_Index
000095F2 0000                       		dc.w Obj1F_Delete-Obj1F_Index
000095F4 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
000095F6 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
000095F8                            ; ===========================================================================
000095F8                            
000095F8                            Obj1F_Main:				; XREF: Obj1F_Index
000095F8 117C 0010 0016             		move.b	#$10,$16(a0)
000095FE 117C 0008 0017             		move.b	#8,$17(a0)
00009604 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000960C 317C 0400 0002             		move.w	#$400,2(a0)
00009612 117C 0004 0001             		move.b	#4,1(a0)
00009618 117C 0003 0018             		move.b	#3,$18(a0)
0000961E 117C 0006 0020             		move.b	#6,$20(a0)
00009624 117C 0015 0019             		move.b	#$15,$19(a0)
0000962A 6100 0000                  		bsr.w	ObjectFall
0000962E 4EB9 0000 0000             		jsr	ObjHitFloor
00009634 4A41                       		tst.w	d1
00009636 6A00                       		bpl.s	locret_955A
00009638 D368 000C                  		add.w	d1,$C(a0)
0000963C 1143 0026                  		move.b	d3,$26(a0)
00009640 317C 0000 0012             		move.w	#0,$12(a0)
00009646 5428 0024                  		addq.b	#2,$24(a0)
0000964A                            
0000964A                            locret_955A:
0000964A 4E75                       		rts	
0000964C                            ; ===========================================================================
0000964C                            
0000964C                            Obj1F_Action:				; XREF: Obj1F_Index
0000964C 7000                       		moveq	#0,d0
0000964E 1028 0025                  		move.b	$25(a0),d0
00009652 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
00009656 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000965A 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009660 6100 0000                  		bsr.w	AnimateSprite
00009664 6000 0000                  		bra.w	MarkObjGone
00009668                            ; ===========================================================================
00009668 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000966A 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000966C                            ; ===========================================================================
0000966C                            
0000966C                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000966C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009670 6A00                       		bpl.s	locret_95B6
00009672 4A28 0001                  		tst.b	1(a0)
00009676 6A00                       		bpl.s	Obj1F_Move
00009678 0868 0001 0032             		bchg	#1,$32(a0)
0000967E 6600                       		bne.s	Obj1F_MakeFire
00009680                            
00009680                            Obj1F_Move:
00009680 5428 0025                  		addq.b	#2,$25(a0)
00009684 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000968A 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009690 6100 0000                  		bsr.w	Obj1F_SetAni
00009694 5600                       		addq.b	#3,d0
00009696 1140 001C                  		move.b	d0,$1C(a0)
0000969A 0868 0000 0022             		bchg	#0,$22(a0)
000096A0 6600                       		bne.s	locret_95B6
000096A2 4468 0010                  		neg.w	$10(a0)		; change direction
000096A6                            
000096A6                            locret_95B6:
000096A6 4E75                       		rts	
000096A8                            ; ===========================================================================
000096A8                            
000096A8                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
000096A8 317C 003B 0030             		move.w	#$3B,$30(a0)
000096AE 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
000096B4 6100 0000                  		bsr.w	SingleObjLoad
000096B8 6600                       		bne.s	Obj1F_MakeFire2
000096BA 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
000096BE 137C 0006 0024             		move.b	#6,$24(a1)
000096C4 3368 0008 0008             		move.w	8(a0),8(a1)
000096CA 0469 0010 0008             		subi.w	#$10,8(a1)
000096D0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000096D6 337C FF00 0010             		move.w	#-$100,$10(a1)
000096DC                            
000096DC                            Obj1F_MakeFire2:
000096DC 6100 0000                  		bsr.w	SingleObjLoad
000096E0 6600                       		bne.s	locret_9618
000096E2 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
000096E6 137C 0006 0024             		move.b	#6,$24(a1)
000096EC 3368 0008 0008             		move.w	8(a0),8(a1)
000096F2 0669 0010 0008             		addi.w	#$10,8(a1)
000096F8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000096FE 337C 0100 0010             		move.w	#$100,$10(a1)
00009704                            
00009704                            locret_9618:
00009704 4E75                       		rts	
00009706                            ; ===========================================================================
00009706                            
00009706                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
00009706 5368 0030                  		subq.w	#1,$30(a0)
0000970A 6B00                       		bmi.s	loc_966E
0000970C 6100 0000                  		bsr.w	SpeedToPos
00009710 0868 0000 0032             		bchg	#0,$32(a0)
00009716 6600                       		bne.s	loc_9654
00009718 3628 0008                  		move.w	8(a0),d3
0000971C 0643 0010                  		addi.w	#$10,d3
00009720 0828 0000 0022             		btst	#0,$22(a0)
00009726 6700                       		beq.s	loc_9640
00009728 0443 0020                  		subi.w	#$20,d3
0000972C                            
0000972C                            loc_9640:
0000972C 4EB9 0000 0000             		jsr	ObjHitFloor2
00009732 0C41 FFF8                  		cmpi.w	#-8,d1
00009736 6D00                       		blt.s	loc_966E
00009738 0C41 000C                  		cmpi.w	#$C,d1
0000973C 6C00                       		bge.s	loc_966E
0000973E 4E75                       		rts	
00009740                            ; ===========================================================================
00009740                            
00009740                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009740 4EB9 0000 0000             		jsr	ObjHitFloor
00009746 D368 000C                  		add.w	d1,$C(a0)
0000974A 1143 0026                  		move.b	d3,$26(a0)
0000974E 6100 0000                  		bsr.w	Obj1F_SetAni
00009752 5600                       		addq.b	#3,d0
00009754 1140 001C                  		move.b	d0,$1C(a0)
00009758 4E75                       		rts	
0000975A                            ; ===========================================================================
0000975A                            
0000975A                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000975A 5528 0025                  		subq.b	#2,$25(a0)
0000975E 317C 003B 0030             		move.w	#59,$30(a0)
00009764 317C 0000 0010             		move.w	#0,$10(a0)
0000976A 6100 0000                  		bsr.w	Obj1F_SetAni
0000976E 1140 001C                  		move.b	d0,$1C(a0)
00009772 4E75                       		rts	
00009774                            ; ---------------------------------------------------------------------------
00009774                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009774                            ; ---------------------------------------------------------------------------
00009774                            
00009774                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009774                            
00009774                            
00009774                            Obj1F_SetAni:				; XREF: loc_966E
00009774 7000                       		moveq	#0,d0
00009776 1628 0026                  		move.b	$26(a0),d3
0000977A 6B00                       		bmi.s	loc_96A4
0000977C 0C03 0006                  		cmpi.b	#6,d3
00009780 6500                       		bcs.s	locret_96A2
00009782 7001                       		moveq	#1,d0
00009784 0828 0000 0022             		btst	#0,$22(a0)
0000978A 6600                       		bne.s	locret_96A2
0000978C 7002                       		moveq	#2,d0
0000978E                            
0000978E                            locret_96A2:
0000978E 4E75                       		rts	
00009790                            ; ===========================================================================
00009790                            
00009790                            loc_96A4:				; XREF: Obj1F_SetAni
00009790 0C03 00FA                  		cmpi.b	#-6,d3
00009794 6200                       		bhi.s	locret_96B6
00009796 7002                       		moveq	#2,d0
00009798 0828 0000 0022             		btst	#0,$22(a0)
0000979E 6600                       		bne.s	locret_96B6
000097A0 7001                       		moveq	#1,d0
000097A2                            
000097A2                            locret_96B6:
000097A2 4E75                       		rts	
000097A4                            ; End of function Obj1F_SetAni
000097A4                            
000097A4                            ; ===========================================================================
000097A4                            
000097A4                            Obj1F_Delete:				; XREF: Obj1F_Index
000097A4 6100 0000                  		bsr.w	DeleteObject
000097A8 4E75                       		rts	
000097AA                            ; ===========================================================================
000097AA                            ; ---------------------------------------------------------------------------
000097AA                            ; Sub-object - missile that the	Crabmeat throws
000097AA                            ; ---------------------------------------------------------------------------
000097AA                            
000097AA                            Obj1F_BallMain:				; XREF: Obj1F_Index
000097AA 5428 0024                  		addq.b	#2,$24(a0)
000097AE 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000097B6 317C 0400 0002             		move.w	#$400,2(a0)
000097BC 117C 0004 0001             		move.b	#4,1(a0)
000097C2 117C 0003 0018             		move.b	#3,$18(a0)
000097C8 117C 0087 0020             		move.b	#$87,$20(a0)
000097CE 117C 0008 0019             		move.b	#8,$19(a0)
000097D4 317C FC00 0012             		move.w	#-$400,$12(a0)
000097DA 117C 0007 001C             		move.b	#7,$1C(a0)
000097E0                            
000097E0                            Obj1F_BallMove:				; XREF: Obj1F_Index
000097E0 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000097E6 6100 0000                  		bsr.w	AnimateSprite
000097EA 6100 0000                  		bsr.w	ObjectFall
000097EE 6100 0000                  		bsr.w	DisplaySprite
000097F2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000097F6 0640 00E0                  		addi.w	#$E0,d0
000097FA B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
000097FE 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
00009800 4E75                       		rts	
00009802                            ; ===========================================================================
00009802                            
00009802                            Obj1F_Delete2:
00009802 6000 0000                  		bra.w	DeleteObject
00009806                            ; ===========================================================================
00009806                            Ani_obj1F:
00009806                            	include "_anim\obj1F.asm"
00009806                            ; ---------------------------------------------------------------------------
00009806                            ; Animation script - Crabmeat enemy
00009806                            ; ---------------------------------------------------------------------------
00009806 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000980C 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
00009812 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
00009816 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000981A 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000981E 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009822 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
00009828 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000982E 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009834 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
00009838 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000983C                            		even
0000983C                            		even
0000983C                            
0000983C                            ; ---------------------------------------------------------------------------
0000983C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000983C                            ; ---------------------------------------------------------------------------
0000983C                            Map_obj1F:
0000983C                            	include "_maps\obj1F.asm"
0000983C                            ; ---------------------------------------------------------------------------
0000983C                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000983C                            ; ---------------------------------------------------------------------------
0000983C 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
00009840 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009844 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
00009848 0000                       		dc.w byte_97D7-Map_obj1F
0000984A 04                         byte_975E:	dc.b 4
0000984B F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
00009850 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009855 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000985A 0005 0806 00               		dc.b 0,	5, 8, 6, 0
0000985F 04                         byte_9773:	dc.b 4
00009860 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009865 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000986A 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
0000986F 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009874 04                         byte_9788:	dc.b 4
00009875 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000987A EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
0000987F FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009884 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
00009889 04                         byte_979D:	dc.b 4
0000988A EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
0000988F EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009894 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
00009899 FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
0000989E 06                         byte_97B2:	dc.b 6
0000989F F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
000098A4 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
000098A9 F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
000098AE F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
000098B3 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
000098B8 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
000098BD 01                         byte_97D1:	dc.b 1
000098BE F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
000098C3 01                         byte_97D7:	dc.b 1
000098C4 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
000098CA 00                         		even
000098CA 00                         		even
000098CA                            
000098CA                            ; ===========================================================================
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
000098CA                            ; ---------------------------------------------------------------------------
000098CA                            
000098CA                            Obj22:					; XREF: Obj_Index
000098CA 7000                       		moveq	#0,d0
000098CC 1028 0024                  		move.b	$24(a0),d0
000098D0 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
000098D4 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
000098D8                            ; ===========================================================================
000098D8 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
000098DA 0000                       		dc.w Obj22_Action-Obj22_Index
000098DC 0000                       		dc.w Obj22_Delete-Obj22_Index
000098DE                            ; ===========================================================================
000098DE                            
000098DE                            Obj22_Main:				; XREF: Obj22_Index
000098DE 5428 0024                  		addq.b	#2,$24(a0)
000098E2 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
000098EA 317C 0444 0002             		move.w	#$444,2(a0)
000098F0 117C 0004 0001             		move.b	#4,1(a0)
000098F6 117C 0003 0018             		move.b	#3,$18(a0)
000098FC 117C 0008 0020             		move.b	#8,$20(a0)
00009902 117C 0018 0019             		move.b	#$18,$19(a0)
00009908                            
00009908                            Obj22_Action:				; XREF: Obj22_Index
00009908 7000                       		moveq	#0,d0
0000990A 1028 0025                  		move.b	$25(a0),d0
0000990E 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
00009912 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
00009916 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000991C 6100 0000                  		bsr.w	AnimateSprite
00009920 6000 0000                  		bra.w	MarkObjGone
00009924                            ; ===========================================================================
00009924 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
00009926 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
00009928                            ; ===========================================================================
00009928                            
00009928                            Obj22_Move:				; XREF: Obj22_Index2
00009928 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000992C 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000992E 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009934 6600                       		bne.s	Obj22_Fire	; if yes, branch
00009936 5428 0025                  		addq.b	#2,$25(a0)
0000993A 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009940 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
00009946 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000994C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009952 6600                       		bne.s	locret_986C	; if not, branch
00009954 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
00009958                            
00009958                            locret_986C:
00009958 4E75                       		rts	
0000995A                            ; ===========================================================================
0000995A                            
0000995A                            Obj22_Fire:				; XREF: Obj22_Move
0000995A 6100 0000                  		bsr.w	SingleObjLoad
0000995E 6600                       		bne.s	locret_98D0
00009960 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009964 3368 0008 0008             		move.w	8(a0),8(a1)
0000996A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009970 0669 001C 000C             		addi.w	#$1C,$C(a1)
00009976 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000997C 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009982 303C 0018                  		move.w	#$18,d0
00009986 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000998C 6600                       		bne.s	loc_98AA	; if not, branch
0000998E 4440                       		neg.w	d0
00009990 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009994                            
00009994                            loc_98AA:
00009994 D169 0008                  		add.w	d0,8(a1)
00009998 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000999E 337C 000E 0032             		move.w	#$E,$32(a1)
000099A4 2348 003C                  		move.l	a0,$3C(a1)
000099A8 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
000099AE 317C 003B 0032             		move.w	#$3B,$32(a0)
000099B4 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
000099BA                            
000099BA                            locret_98D0:
000099BA 4E75                       		rts	
000099BC                            ; ===========================================================================
000099BC                            
000099BC                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
000099BC 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000099C0 6B00                       		bmi.s	Obj22_ChgDir
000099C2 6100 0000                  		bsr.w	SpeedToPos
000099C6 4A28 0034                  		tst.b	$34(a0)
000099CA 6600                       		bne.s	locret_992A
000099CC 3038 D008                  		move.w	($FFFFD008).w,d0
000099D0 9068 0008                  		sub.w	8(a0),d0
000099D4 6A00                       		bpl.s	Obj22_SetNrSonic
000099D6 4440                       		neg.w	d0
000099D8                            
000099D8                            Obj22_SetNrSonic:
000099D8 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
000099DC 6400                       		bcc.s	locret_992A	; if not, branch
000099DE 4A28 0001                  		tst.b	1(a0)
000099E2 6A00                       		bpl.s	locret_992A
000099E4 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
000099EA 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
000099F0 6000                       		bra.s	Obj22_Stop
000099F2                            ; ===========================================================================
000099F2                            
000099F2                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
000099F2 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
000099F8 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
000099FE 317C 003B 0032             		move.w	#59,$32(a0)
00009A04                            
00009A04                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
00009A04 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
00009A08 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
00009A0E 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
00009A14                            
00009A14                            locret_992A:
00009A14 4E75                       		rts	
00009A16                            ; ===========================================================================
00009A16                            
00009A16                            Obj22_Delete:				; XREF: Obj22_Index
00009A16 6100 0000                  		bsr.w	DeleteObject
00009A1A 4E75                       		rts	
00009A1C                            ; ===========================================================================
00009A1C                            ; ---------------------------------------------------------------------------
00009A1C                            ; Object 23 - missile that Buzz	Bomber throws
00009A1C                            ; ---------------------------------------------------------------------------
00009A1C                            
00009A1C                            Obj23:					; XREF: Obj_Index
00009A1C 7000                       		moveq	#0,d0
00009A1E 1028 0024                  		move.b	$24(a0),d0
00009A22 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
00009A26 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
00009A2A                            ; ===========================================================================
00009A2A 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009A2C 0000                       		dc.w Obj23_Animate-Obj23_Index
00009A2E 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009A30 0000                       		dc.w Obj23_Delete-Obj23_Index
00009A32 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009A34                            ; ===========================================================================
00009A34                            
00009A34                            Obj23_Main:				; XREF: Obj23_Index
00009A34 5368 0032                  		subq.w	#1,$32(a0)
00009A38 6A00                       		bpl.s	Obj23_ChkCancel
00009A3A 5428 0024                  		addq.b	#2,$24(a0)
00009A3E 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
00009A46 317C 2444 0002             		move.w	#$2444,2(a0)
00009A4C 117C 0004 0001             		move.b	#4,1(a0)
00009A52 117C 0003 0018             		move.b	#3,$18(a0)
00009A58 117C 0008 0019             		move.b	#8,$19(a0)
00009A5E 0228 0003 0022             		andi.b	#3,$22(a0)
00009A64 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
00009A68 6700                       		beq.s	Obj23_Animate	; if not, branch
00009A6A 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009A70 117C 0087 0020             		move.b	#$87,$20(a0)
00009A76 117C 0001 001C             		move.b	#1,$1C(a0)
00009A7C 6000                       		bra.s	Obj23_Animate2
00009A7E                            ; ===========================================================================
00009A7E                            
00009A7E                            Obj23_Animate:				; XREF: Obj23_Index
00009A7E 6100                       		bsr.s	Obj23_ChkCancel
00009A80 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009A86 6100 0000                  		bsr.w	AnimateSprite
00009A8A 6000 0000                  		bra.w	DisplaySprite
00009A8E                            ; ---------------------------------------------------------------------------
00009A8E                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009A8E                            ; destroyed, and if it has, then cancel	the missile
00009A8E                            ; ---------------------------------------------------------------------------
00009A8E                            
00009A8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A8E                            
00009A8E                            
00009A8E                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009A8E 2268 003C                  		movea.l	$3C(a0),a1
00009A92 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
00009A96 6700                       		beq.s	Obj23_Delete	; if yes, branch
00009A98 4E75                       		rts	
00009A9A                            ; End of function Obj23_ChkCancel
00009A9A                            
00009A9A                            ; ===========================================================================
00009A9A                            
00009A9A                            Obj23_FromBuzz:				; XREF: Obj23_Index
00009A9A 0828 0007 0022             		btst	#7,$22(a0)
00009AA0 6600                       		bne.s	Obj23_Explode
00009AA2 117C 0087 0020             		move.b	#$87,$20(a0)
00009AA8 117C 0001 001C             		move.b	#1,$1C(a0)
00009AAE 6100 0000                  		bsr.w	SpeedToPos
00009AB2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009AB8 6100 0000                  		bsr.w	AnimateSprite
00009ABC 6100 0000                  		bsr.w	DisplaySprite
00009AC0 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009AC4 0640 00E0                  		addi.w	#$E0,d0
00009AC8 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
00009ACC 6500                       		bcs.s	Obj23_Delete	; if yes, branch
00009ACE 4E75                       		rts	
00009AD0                            ; ===========================================================================
00009AD0                            
00009AD0                            Obj23_Explode:				; XREF: Obj23_FromBuzz
00009AD0 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
00009AD4 117C 0000 0024             		move.b	#0,$24(a0)
00009ADA 6000 F30A                  		bra.w	Obj24
00009ADE                            ; ===========================================================================
00009ADE                            
00009ADE                            Obj23_Delete:				; XREF: Obj23_Index
00009ADE 6100 0000                  		bsr.w	DeleteObject
00009AE2 4E75                       		rts	
00009AE4                            ; ===========================================================================
00009AE4                            
00009AE4                            Obj23_FromNewt:				; XREF: Obj23_Index
00009AE4 4A28 0001                  		tst.b	1(a0)
00009AE8 6AF4                       		bpl.s	Obj23_Delete
00009AEA 6100 0000                  		bsr.w	SpeedToPos
00009AEE                            
00009AEE                            Obj23_Animate2:				; XREF: Obj23_Main
00009AEE 43F9 0000 0000             		lea	(Ani_obj23).l,a1
00009AF4 6100 0000                  		bsr.w	AnimateSprite
00009AF8 6100 0000                  		bsr.w	DisplaySprite
00009AFC 4E75                       		rts	
00009AFE                            ; ===========================================================================
00009AFE                            Ani_obj22:
00009AFE                            	include "_anim\obj22.asm"
00009AFE                            ; ---------------------------------------------------------------------------
00009AFE                            ; Animation script - Buzz Bomber enemy
00009AFE                            ; ---------------------------------------------------------------------------
00009AFE 0000                       		dc.w byte_9A1E-Ani_obj22
00009B00 0000                       		dc.w byte_9A22-Ani_obj22
00009B02 0000                       		dc.w byte_9A26-Ani_obj22
00009B04 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
00009B08 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
00009B0C 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
00009B10                            		even
00009B10                            		even
00009B10                            
00009B10                            Ani_obj23:
00009B10                            	include "_anim\obj23.asm"
00009B10                            ; ---------------------------------------------------------------------------
00009B10                            ; Animation script - missile that Buzz Bomber throws
00009B10                            ; ---------------------------------------------------------------------------
00009B10 0000                       		dc.w byte_9A2E-Ani_obj23
00009B12 0000                       		dc.w byte_9A32-Ani_obj23
00009B14 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
00009B18 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009B1C                            		even
00009B1C                            		even
00009B1C                            
00009B1C                            ; ---------------------------------------------------------------------------
00009B1C                            ; Sprite mappings - Buzz Bomber	enemy
00009B1C                            ; ---------------------------------------------------------------------------
00009B1C                            Map_obj22:
00009B1C                            	include "_maps\obj22.asm"
00009B1C                            Map_e97a:
00009B1C 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
00009B1E 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
00009B20 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
00009B22 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
00009B24 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
00009B26 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
00009B28 06                         Map_e97a_C: 	dc.b $6
00009B29 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009B2E F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009B33 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009B38 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009B3D F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009B42 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009B47 06                         Map_e97a_2B: 	dc.b $6
00009B48 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009B4D F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009B52 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009B57 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009B5C F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009B61 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009B66 07                         Map_e97a_4A: 	dc.b $7
00009B67 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
00009B6C F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009B71 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009B76 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009B7B 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009B80 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009B85 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009B8A 07                         Map_e97a_6E: 	dc.b $7
00009B8B 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
00009B90 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
00009B95 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
00009B9A 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
00009B9F 0404 0018 00               	dc.b $4, $4, $0, $18, $0
00009BA4 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
00009BA9 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
00009BAE 06                         Map_e97a_92: 	dc.b $6
00009BAF F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009BB4 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009BB9 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009BBE 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009BC3 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
00009BC8 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
00009BCD 04                         Map_e97a_B1: 	dc.b $4
00009BCE F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
00009BD3 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
00009BD8 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
00009BDD 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
00009BE2                            	even
00009BE2                            	even
00009BE2                            
00009BE2                            ; ---------------------------------------------------------------------------
00009BE2                            ; Sprite mappings - missile that Buzz Bomber throws
00009BE2                            ; ---------------------------------------------------------------------------
00009BE2                            Map_obj23:
00009BE2                            	include "_maps\obj23.asm"
00009BE2                            ; ---------------------------------------------------------------------------
00009BE2                            ; Sprite mappings - missile that Buzz Bomber throws
00009BE2                            ; ---------------------------------------------------------------------------
00009BE2 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009BE6 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009BEA 01                         byte_9B0E:	dc.b 1
00009BEB F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009BF0 01                         byte_9B14:	dc.b 1
00009BF1 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009BF6 01                         byte_9B1A:	dc.b 1
00009BF7 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009BFC 01                         byte_9B20:	dc.b 1
00009BFD F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009C02                            		even
00009C02                            		even
00009C02                            
00009C02                            ; ===========================================================================
00009C02                            ; ---------------------------------------------------------------------------
00009C02                            ; Object 25 - rings
00009C02                            ; ---------------------------------------------------------------------------
00009C02                            
00009C02                            Obj25:					; XREF: Obj_Index
00009C02 7000                       		moveq	#0,d0
00009C04 1028 0024                  		move.b	$24(a0),d0
00009C08 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009C0C 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009C10                            ; ===========================================================================
00009C10 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009C12 0000                       		dc.w Obj25_Animate-Obj25_Index
00009C14 0000                       		dc.w Obj25_Collect-Obj25_Index
00009C16 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009C18 0000                       		dc.w Obj25_Delete-Obj25_Index
00009C1A                            ; ---------------------------------------------------------------------------
00009C1A                            ; Distances between rings (format: horizontal, vertical)
00009C1A                            ; ---------------------------------------------------------------------------
00009C1A 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009C1C 1800                       		dc.b $18, 0		; horizontal normal
00009C1E 2000                       		dc.b $20, 0		; horizontal wide
00009C20 0010                       		dc.b 0,	$10		; vertical tight
00009C22 0018                       		dc.b 0,	$18		; vertical normal
00009C24 0020                       		dc.b 0,	$20		; vertical wide
00009C26 1010                       		dc.b $10, $10		; diagonal
00009C28 1818                       		dc.b $18, $18
00009C2A 2020                       		dc.b $20, $20
00009C2C F010                       		dc.b $F0, $10
00009C2E E818                       		dc.b $E8, $18
00009C30 E020                       		dc.b $E0, $20
00009C32 1008                       		dc.b $10, 8
00009C34 1810                       		dc.b $18, $10
00009C36 F008                       		dc.b $F0, 8
00009C38 E810                       		dc.b $E8, $10
00009C3A                            ; ===========================================================================
00009C3A                            
00009C3A                            Obj25_Main:				; XREF: Obj25_Index
00009C3A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009C3E 7000                       		moveq	#0,d0
00009C40 1028 0023                  		move.b	$23(a0),d0
00009C44 45F2 0002                  		lea	2(a2,d0.w),a2
00009C48 1812                       		move.b	(a2),d4
00009C4A 1228 0028                  		move.b	$28(a0),d1
00009C4E 1001                       		move.b	d1,d0
00009C50 0241 0007                  		andi.w	#7,d1
00009C54 0C41 0007                  		cmpi.w	#7,d1
00009C58 6600                       		bne.s	loc_9B80
00009C5A 7206                       		moveq	#6,d1
00009C5C                            
00009C5C                            loc_9B80:
00009C5C 4841                       		swap	d1
00009C5E 323C 0000                  		move.w	#0,d1
00009C62 E808                       		lsr.b	#4,d0
00009C64 D040                       		add.w	d0,d0
00009C66 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009C6A 4885                       		ext.w	d5
00009C6C 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009C70 4886                       		ext.w	d6
00009C72 2248                       		movea.l	a0,a1
00009C74 3428 0008                  		move.w	8(a0),d2
00009C78 3628 000C                  		move.w	$C(a0),d3
00009C7C E20C                       		lsr.b	#1,d4
00009C7E 6500                       		bcs.s	loc_9C02
00009C80 0892 0007                  		bclr	#7,(a2)
00009C84 6000                       		bra.s	loc_9BBA
00009C86                            ; ===========================================================================
00009C86                            
00009C86                            Obj25_MakeRings:
00009C86 4841                       		swap	d1
00009C88 E20C                       		lsr.b	#1,d4
00009C8A 6500                       		bcs.s	loc_9C02
00009C8C 0892 0007                  		bclr	#7,(a2)
00009C90 6100 0000                  		bsr.w	SingleObjLoad
00009C94 6600                       		bne.s	loc_9C0E
00009C96                            
00009C96                            loc_9BBA:				; XREF: Obj25_Main
00009C96 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00009C9A 5429 0024                  		addq.b	#2,$24(a1)
00009C9E 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00009CA2 3368 0008 0032             		move.w	8(a0),$32(a1)
00009CA8 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00009CAC 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009CB4 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009CBA 137C 0004 0001             		move.b	#4,1(a1)
00009CC0 137C 0002 0018             		move.b	#2,$18(a1)
00009CC6 137C 0047 0020             		move.b	#$47,$20(a1)
00009CCC 137C 0008 0019             		move.b	#8,$19(a1)
00009CD2 1368 0023 0023             		move.b	$23(a0),$23(a1)
00009CD8 1341 0034                  		move.b	d1,$34(a1)
00009CDC                            
00009CDC                            loc_9C02:
00009CDC 5241                       		addq.w	#1,d1
00009CDE D445                       		add.w	d5,d2		; add ring spacing value to d2
00009CE0 D646                       		add.w	d6,d3		; add ring spacing value to d3
00009CE2 4841                       		swap	d1
00009CE4 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
00009CE8                            
00009CE8                            loc_9C0E:
00009CE8 0812 0000                  		btst	#0,(a2)
00009CEC 6600 0000                  		bne.w	DeleteObject
00009CF0                            
00009CF0                            Obj25_Animate:				; XREF: Obj25_Index
00009CF0 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
00009CF6 6100 0000                  		bsr.w	DisplaySprite
00009CFA 3028 0032                  		move.w	$32(a0),d0
00009CFE 0240 FF80                  		andi.w	#$FF80,d0
00009D02 3238 F700                  		move.w	($FFFFF700).w,d1
00009D06 0441 0080                  		subi.w	#$80,d1
00009D0A 0241 FF80                  		andi.w	#$FF80,d1
00009D0E 9041                       		sub.w	d1,d0
00009D10 0C40 0280                  		cmpi.w	#$280,d0
00009D14 6200                       		bhi.s	Obj25_Delete
00009D16 4E75                       		rts	
00009D18                            ; ===========================================================================
00009D18                            
00009D18                            Obj25_Collect:				; XREF: Obj25_Index
00009D18 5428 0024                  		addq.b	#2,$24(a0)
00009D1C 117C 0000 0020             		move.b	#0,$20(a0)
00009D22 117C 0001 0018             		move.b	#1,$18(a0)
00009D28 6100 0000                  		bsr.w	CollectRing
00009D2C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009D30 7000                       		moveq	#0,d0
00009D32 1028 0023                  		move.b	$23(a0),d0
00009D36 1228 0034                  		move.b	$34(a0),d1
00009D3A 03F2 0002                  		bset	d1,2(a2,d0.w)
00009D3E                            
00009D3E                            Obj25_Sparkle:				; XREF: Obj25_Index
00009D3E 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009D44 6100 0000                  		bsr.w	AnimateSprite
00009D48 6000 0000                  		bra.w	DisplaySprite
00009D4C                            ; ===========================================================================
00009D4C                            
00009D4C                            Obj25_Delete:				; XREF: Obj25_Index
00009D4C 6000 0000                  		bra.w	DeleteObject
00009D50                            
00009D50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009D50                            
00009D50                            
00009D50                            CollectRing:				; XREF: Obj25_Collect
00009D50 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
00009D54 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
00009D5A 303C 00B5                  		move.w	#$B5,d0		; play ring sound
00009D5E 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
00009D64 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009D66 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
00009D6C 6700                       		beq.s	loc_9CA4
00009D6E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
00009D74 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009D76 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
00009D7C 6600                       		bne.s	Obj25_PlaySnd
00009D7E                            
00009D7E                            loc_9CA4:
00009D7E 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00009D82 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00009D86 303C 0088                  		move.w	#$88,d0		; play extra life music
00009D8A                            
00009D8A                            Obj25_PlaySnd:
00009D8A 4EF9 0000 139C             		jmp	(PlaySound_Special).l
00009D90                            ; End of function CollectRing
00009D90                            
00009D90                            ; ===========================================================================
00009D90                            ; ---------------------------------------------------------------------------
00009D90                            ; Object 37 - rings flying out of Sonic	when he's hit
00009D90                            ; ---------------------------------------------------------------------------
00009D90                            
00009D90                            Obj37:					; XREF: Obj_Index
00009D90 7000                       		moveq	#0,d0
00009D92 1028 0024                  		move.b	$24(a0),d0
00009D96 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00009D9A 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
00009D9E                            ; ===========================================================================
00009D9E 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00009DA0 0000                       		dc.w Obj37_Bounce-Obj37_Index
00009DA2 0000                       		dc.w Obj37_Collect-Obj37_Index
00009DA4 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00009DA6 0000                       		dc.w Obj37_Delete-Obj37_Index
00009DA8                            ; ===========================================================================
00009DA8                            
00009DA8                            Obj37_CountRings:			; XREF: Obj37_Index
00009DA8 2248                       		movea.l	a0,a1
00009DAA 7A00                       		moveq	#0,d5
00009DAC 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
00009DB0 7020                       		moveq	#32,d0
00009DB2 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
00009DB4 6500                       		bcs.s	loc_9CDE	; if not, branch
00009DB6 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
00009DB8                            
00009DB8                            loc_9CDE:
00009DB8 5345                       		subq.w	#1,d5
00009DBA 383C 0288                  		move.w	#$288,d4
00009DBE 6000                       		bra.s	Obj37_MakeRings
00009DC0                            ; ===========================================================================
00009DC0                            
00009DC0                            Obj37_Loop:
00009DC0 6100 0000                  		bsr.w	SingleObjLoad
00009DC4 6600 0000                  		bne.w	Obj37_ResetCounter
00009DC8                            
00009DC8                            Obj37_MakeRings:			; XREF: Obj37_CountRings
00009DC8 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
00009DCC 5429 0024                  		addq.b	#2,$24(a1)
00009DD0 137C 0008 0016             		move.b	#8,$16(a1)
00009DD6 137C 0008 0017             		move.b	#8,$17(a1)
00009DDC 3368 0008 0008             		move.w	8(a0),8(a1)
00009DE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009DE8 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009DF0 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009DF6 137C 0004 0001             		move.b	#4,1(a1)
00009DFC 137C 0003 0018             		move.b	#3,$18(a1)
00009E02 137C 0047 0020             		move.b	#$47,$20(a1)
00009E08 137C 0008 0019             		move.b	#8,$19(a1)
00009E0E 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
00009E14 4A44                       		tst.w	d4
00009E16 6B00                       		bmi.s	loc_9D62
00009E18 3004                       		move.w	d4,d0
00009E1A 6100 8BBE                  		bsr.w	CalcSine
00009E1E 3404                       		move.w	d4,d2
00009E20 E04A                       		lsr.w	#8,d2
00009E22 E560                       		asl.w	d2,d0
00009E24 E561                       		asl.w	d2,d1
00009E26 3400                       		move.w	d0,d2
00009E28 3601                       		move.w	d1,d3
00009E2A 0604 0010                  		addi.b	#$10,d4
00009E2E 6400                       		bcc.s	loc_9D62
00009E30 0444 0080                  		subi.w	#$80,d4
00009E34 6400                       		bcc.s	loc_9D62
00009E36 383C 0288                  		move.w	#$288,d4
00009E3A                            
00009E3A                            loc_9D62:
00009E3A 3342 0010                  		move.w	d2,$10(a1)
00009E3E 3343 0012                  		move.w	d3,$12(a1)
00009E42 4442                       		neg.w	d2
00009E44 4444                       		neg.w	d4
00009E46 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00009E4A                            
00009E4A                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00009E4A 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00009E50 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00009E56 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
00009E5C 303C 00C6                  		move.w	#$C6,d0
00009E60 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play ring loss sound
00009E66                            
00009E66                            Obj37_Bounce:				; XREF: Obj37_Index
00009E66 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
00009E6C 6100 0000                  		bsr.w	SpeedToPos
00009E70 0668 0018 0012             		addi.w	#$18,$12(a0)
00009E76 6B00                       		bmi.s	Obj37_ChkDel
00009E78 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00009E7C D007                       		add.b	d7,d0
00009E7E 0200 0003                  		andi.b	#3,d0
00009E82 6600                       		bne.s	Obj37_ChkDel
00009E84 4EB9 0000 0000             		jsr	ObjHitFloor
00009E8A 4A41                       		tst.w	d1
00009E8C 6A00                       		bpl.s	Obj37_ChkDel
00009E8E D368 000C                  		add.w	d1,$C(a0)
00009E92 3028 0012                  		move.w	$12(a0),d0
00009E96 E440                       		asr.w	#2,d0
00009E98 9168 0012                  		sub.w	d0,$12(a0)
00009E9C 4468 0012                  		neg.w	$12(a0)
00009EA0                            
00009EA0                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00009EA0 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00009EA4 6700                       		beq.s	Obj37_Delete
00009EA6 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009EAA 0640 00E0                  		addi.w	#$E0,d0
00009EAE B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
00009EB2 6500                       		bcs.s	Obj37_Delete	; if yes, branch
00009EB4 6000 0000                  		bra.w	DisplaySprite
00009EB8                            ; ===========================================================================
00009EB8                            
00009EB8                            Obj37_Collect:				; XREF: Obj37_Index
00009EB8 5428 0024                  		addq.b	#2,$24(a0)
00009EBC 117C 0000 0020             		move.b	#0,$20(a0)
00009EC2 117C 0001 0018             		move.b	#1,$18(a0)
00009EC8 6100 FE86                  		bsr.w	CollectRing
00009ECC                            
00009ECC                            Obj37_Sparkle:				; XREF: Obj37_Index
00009ECC 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009ED2 6100 0000                  		bsr.w	AnimateSprite
00009ED6 6000 0000                  		bra.w	DisplaySprite
00009EDA                            ; ===========================================================================
00009EDA                            
00009EDA                            Obj37_Delete:				; XREF: Obj37_Index
00009EDA 6000 0000                  		bra.w	DeleteObject
00009EDE                            ; ===========================================================================
00009EDE                            ; ---------------------------------------------------------------------------
00009EDE                            ; Object 4B - giant ring for entry to special stage
00009EDE                            ; ---------------------------------------------------------------------------
00009EDE                            
00009EDE                            Obj4B:					; XREF: Obj_Index
00009EDE 7000                       		moveq	#0,d0
00009EE0 1028 0024                  		move.b	$24(a0),d0
00009EE4 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00009EE8 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00009EEC                            ; ===========================================================================
00009EEC 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00009EEE 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00009EF0 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00009EF2 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00009EF4                            ; ===========================================================================
00009EF4                            
00009EF4                            Obj4B_Main:				; XREF: Obj4B_Index
00009EF4 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00009EFC 317C 2400 0002             		move.w	#$2400,2(a0)
00009F02 0028 0004 0001             		ori.b	#4,1(a0)
00009F08 117C 0040 0019             		move.b	#$40,$19(a0)
00009F0E 4A28 0001                  		tst.b	1(a0)
00009F12 6A00                       		bpl.s	Obj4B_Animate
00009F14 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
00009F1A 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
00009F1E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00009F24 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
00009F26 4E75                       		rts	
00009F28                            ; ===========================================================================
00009F28                            
00009F28                            Obj4B_Okay:				; XREF: Obj4B_Main
00009F28 5428 0024                  		addq.b	#2,$24(a0)
00009F2C 117C 0002 0018             		move.b	#2,$18(a0)
00009F32 117C 0052 0020             		move.b	#$52,$20(a0)
00009F38 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00009F3E                            
00009F3E                            Obj4B_Animate:				; XREF: Obj4B_Index
00009F3E 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
00009F44 3028 0008                  		move.w	8(a0),d0
00009F48 0240 FF80                  		andi.w	#$FF80,d0
00009F4C 3238 F700                  		move.w	($FFFFF700).w,d1
00009F50 0441 0080                  		subi.w	#$80,d1
00009F54 0241 FF80                  		andi.w	#$FF80,d1
00009F58 9041                       		sub.w	d1,d0
00009F5A 0C40 0280                  		cmpi.w	#$280,d0
00009F5E 6200 0000                  		bhi.w	DeleteObject
00009F62 6000 0000                  		bra.w	DisplaySprite
00009F66                            ; ===========================================================================
00009F66                            
00009F66                            Obj4B_Collect:				; XREF: Obj4B_Index
00009F66 5528 0024                  		subq.b	#2,$24(a0)
00009F6A 117C 0000 0020             		move.b	#0,$20(a0)
00009F70 6100 0000                  		bsr.w	SingleObjLoad
00009F74 6600 0000                  		bne.w	Obj4B_PlaySnd
00009F78 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00009F7C 3368 0008 0008             		move.w	8(a0),8(a1)
00009F82 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009F88 2348 003C                  		move.l	a0,$3C(a1)
00009F8C 3038 D008                  		move.w	($FFFFD008).w,d0
00009F90 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00009F94 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00009F96 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00009F9C                            
00009F9C                            Obj4B_PlaySnd:
00009F9C 303C 00C3                  		move.w	#$C3,d0
00009FA0 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00009FA6 6096                       		bra.s	Obj4B_Animate
00009FA8                            ; ===========================================================================
00009FA8                            
00009FA8                            Obj4B_Delete:				; XREF: Obj4B_Index
00009FA8 6000 0000                  		bra.w	DeleteObject
00009FAC                            ; ===========================================================================
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            ; Object 7C - flash effect when	you collect the	giant ring
00009FAC                            ; ---------------------------------------------------------------------------
00009FAC                            
00009FAC                            Obj7C:					; XREF: Obj_Index
00009FAC 7000                       		moveq	#0,d0
00009FAE 1028 0024                  		move.b	$24(a0),d0
00009FB2 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00009FB6 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00009FBA                            ; ===========================================================================
00009FBA 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00009FBC 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00009FBE 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00009FC0                            ; ===========================================================================
00009FC0                            
00009FC0                            Obj7C_Main:				; XREF: Obj7C_Index
00009FC0 5428 0024                  		addq.b	#2,$24(a0)
00009FC4 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
00009FCC 317C 2462 0002             		move.w	#$2462,2(a0)
00009FD2 0028 0004 0001             		ori.b	#4,1(a0)
00009FD8 117C 0000 0018             		move.b	#0,$18(a0)
00009FDE 117C 0020 0019             		move.b	#$20,$19(a0)
00009FE4 117C 00FF 001A             		move.b	#$FF,$1A(a0)
00009FEA                            
00009FEA                            Obj7C_ChkDel:				; XREF: Obj7C_Index
00009FEA 6100                       		bsr.s	Obj7C_Collect
00009FEC 3028 0008                  		move.w	8(a0),d0
00009FF0 0240 FF80                  		andi.w	#$FF80,d0
00009FF4 3238 F700                  		move.w	($FFFFF700).w,d1
00009FF8 0441 0080                  		subi.w	#$80,d1
00009FFC 0241 FF80                  		andi.w	#$FF80,d1
0000A000 9041                       		sub.w	d1,d0
0000A002 0C40 0280                  		cmpi.w	#$280,d0
0000A006 6200 0000                  		bhi.w	DeleteObject
0000A00A 6000 0000                  		bra.w	DisplaySprite
0000A00E                            
0000A00E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A00E                            
0000A00E                            
0000A00E                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000A00E 5328 001E                  		subq.b	#1,$1E(a0)
0000A012 6A00                       		bpl.s	locret_9F76
0000A014 117C 0001 001E             		move.b	#1,$1E(a0)
0000A01A 5228 001A                  		addq.b	#1,$1A(a0)
0000A01E 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000A024 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000A026 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000A02C 6600                       		bne.s	locret_9F76	; if not, branch
0000A02E 2268 003C                  		movea.l	$3C(a0),a1
0000A032 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000A038 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000A03E 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000A044 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000A048 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000A04C                            
0000A04C                            locret_9F76:
0000A04C 4E75                       		rts	
0000A04E                            ; ===========================================================================
0000A04E                            
0000A04E                            Obj7C_End:				; XREF: Obj7C_Collect
0000A04E 5428 0024                  		addq.b	#2,$24(a0)
0000A052 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000A058 588F                       		addq.l	#4,sp
0000A05A 4E75                       		rts	
0000A05C                            ; End of function Obj7C_Collect
0000A05C                            
0000A05C                            ; ===========================================================================
0000A05C                            
0000A05C                            Obj7C_Delete:				; XREF: Obj7C_Index
0000A05C 6000 0000                  		bra.w	DeleteObject
0000A060                            ; ===========================================================================
0000A060                            Ani_obj25:
0000A060                            	include "_anim\obj25.asm"
0000A060                            ; ---------------------------------------------------------------------------
0000A060                            ; Animation script - ring
0000A060                            ; ---------------------------------------------------------------------------
0000A060 0000                       		dc.w byte_9F8C-Ani_obj25
0000A062 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000A068                            		even
0000A068                            		even
0000A068                            
0000A068                            ; ---------------------------------------------------------------------------
0000A068                            ; Sprite mappings - rings
0000A068                            ; ---------------------------------------------------------------------------
0000A068                            Map_obj25:
0000A068                            	include "_maps\obj25.asm"
0000A068                            ; ---------------------------------------------------------------------------
0000A068                            ; Sprite mappings - rings
0000A068                            ; ---------------------------------------------------------------------------
0000A068 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000A06C 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000A070 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000A074 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000A078 01                         byte_9FA2:	dc.b 1
0000A079 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000A07E 01                         byte_9FA8:	dc.b 1
0000A07F F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000A084 01                         byte_9FAE:	dc.b 1
0000A085 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000A08A 01                         byte_9FB4:	dc.b 1
0000A08B F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000A090 01                         byte_9FBA:	dc.b 1
0000A091 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000A096 01                         byte_9FC0:	dc.b 1
0000A097 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000A09C 01                         byte_9FC6:	dc.b 1
0000A09D F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000A0A2 01                         byte_9FCC:	dc.b 1
0000A0A3 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000A0A8                            		even
0000A0A8                            		even
0000A0A8                            
0000A0A8                            ; ---------------------------------------------------------------------------
0000A0A8                            ; Sprite mappings - giant ring
0000A0A8                            ; ---------------------------------------------------------------------------
0000A0A8                            Map_obj4B:
0000A0A8                            	include "_maps\obj4B.asm"
0000A0A8                            ; ---------------------------------------------------------------------------
0000A0A8                            ; Sprite mappings - giant ring
0000A0A8                            ; ---------------------------------------------------------------------------
0000A0A8 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000A0AC 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000A0B0 0A                         byte_9FDA:	dc.b $A
0000A0B1 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000A0B6 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000A0BB E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000A0C0 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000A0C5 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000A0CA F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000A0CF 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000A0D4 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000A0D9 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000A0DE 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000A0E3 08                         byte_A00D:	dc.b 8
0000A0E4 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000A0E9 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000A0EE E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000A0F3 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000A0F8 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000A0FD 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000A102 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000A107 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000A10C 04                         byte_A036:	dc.b 4
0000A10D E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A112 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A117 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A11C 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A121 08                         byte_A04B:	dc.b 8
0000A122 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A127 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A12C E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A131 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A136 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A13B 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A140 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A145 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A14A                            		even
0000A14A                            		even
0000A14A                            
0000A14A                            ; ---------------------------------------------------------------------------
0000A14A                            ; Sprite mappings - flash effect when you collect the giant ring
0000A14A                            ; ---------------------------------------------------------------------------
0000A14A                            Map_obj7C:
0000A14A                            	include "_maps\obj7C.asm"
0000A14A                            ; ---------------------------------------------------------------------------
0000A14A                            ; Sprite mappings - flash effect when you collect the giant ring
0000A14A                            ; ---------------------------------------------------------------------------
0000A14A 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A14E 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A152 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A156 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A15A 02                         byte_A084:	dc.b 2
0000A15B E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A160 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A165 04                         byte_A08F:	dc.b 4
0000A166 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A16B E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A170 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A175 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A17A 04                         byte_A0A4:	dc.b 4
0000A17B E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A180 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A185 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A18A 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A18F 04                         byte_A0B9:	dc.b 4
0000A190 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A195 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A19A 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A19F 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A1A4 04                         byte_A0CE:	dc.b 4
0000A1A5 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A1AA E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A1AF 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A1B4 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A1B9 04                         byte_A0E3:	dc.b 4
0000A1BA E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A1BF E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A1C4 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A1C9 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A1CE 02                         byte_A0F8:	dc.b 2
0000A1CF E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A1D4 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A1D9 04                         byte_A103:	dc.b 4
0000A1DA E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A1DF E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A1E4 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A1E9 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A1EE                            		even
0000A1EE                            		even
0000A1EE                            
0000A1EE                            ; ===========================================================================
0000A1EE                            ; ---------------------------------------------------------------------------
0000A1EE                            ; Object 26 - monitors
0000A1EE                            ; ---------------------------------------------------------------------------
0000A1EE                            
0000A1EE                            Obj26:					; XREF: Obj_Index
0000A1EE 7000                       		moveq	#0,d0
0000A1F0 1028 0024                  		move.b	$24(a0),d0
0000A1F4 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A1F8 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A1FC                            ; ===========================================================================
0000A1FC 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A1FE 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A200 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A202 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A204 0000                       		dc.w Obj26_Display-Obj26_Index
0000A206                            ; ===========================================================================
0000A206                            
0000A206                            Obj26_Main:				; XREF: Obj26_Index
0000A206 5428 0024                  		addq.b	#2,$24(a0)
0000A20A 117C 000E 0016             		move.b	#$E,$16(a0)
0000A210 117C 000E 0017             		move.b	#$E,$17(a0)
0000A216 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A21E 317C 0680 0002             		move.w	#$680,2(a0)
0000A224 117C 0004 0001             		move.b	#4,1(a0)
0000A22A 117C 0003 0018             		move.b	#3,$18(a0)
0000A230 117C 000F 0019             		move.b	#$F,$19(a0)
0000A236 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A23A 7000                       		moveq	#0,d0
0000A23C 1028 0023                  		move.b	$23(a0),d0
0000A240 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A246 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A24C 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A24E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A254 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A25A 4E75                       		rts	
0000A25C                            ; ===========================================================================
0000A25C                            
0000A25C                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A25C 117C 0046 0020             		move.b	#$46,$20(a0)
0000A262 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A268                            
0000A268                            Obj26_Solid:				; XREF: Obj26_Index
0000A268 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A26C 6700                       		beq.s	loc_A1EC	; if not, branch
0000A26E 5500                       		subq.b	#2,d0
0000A270 6600                       		bne.s	Obj26_Fall
0000A272 7200                       		moveq	#0,d1
0000A274 1228 0019                  		move.b	$19(a0),d1
0000A278 0641 000B                  		addi.w	#$B,d1
0000A27C 6100 D448                  		bsr.w	ExitPlatform
0000A280 0829 0003 0022             		btst	#3,$22(a1)
0000A286 6600 0000                  		bne.w	loc_A1BC
0000A28A 4228 0025                  		clr.b	$25(a0)
0000A28E 6000 0000                  		bra.w	Obj26_Animate
0000A292                            ; ===========================================================================
0000A292                            
0000A292                            loc_A1BC:				; XREF: Obj26_Solid
0000A292 363C 0010                  		move.w	#$10,d3
0000A296 3428 0008                  		move.w	8(a0),d2
0000A29A 6100 D988                  		bsr.w	MvSonicOnPtfm
0000A29E 6000 0000                  		bra.w	Obj26_Animate
0000A2A2                            ; ===========================================================================
0000A2A2                            
0000A2A2                            Obj26_Fall:				; XREF: Obj26_Solid
0000A2A2 6100 0000                  		bsr.w	ObjectFall
0000A2A6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A2AC 4A41                       		tst.w	d1
0000A2AE 6A00 0000                  		bpl.w	Obj26_Animate
0000A2B2 D368 000C                  		add.w	d1,$C(a0)
0000A2B6 4268 0012                  		clr.w	$12(a0)
0000A2BA 4228 0025                  		clr.b	$25(a0)
0000A2BE 6000 0000                  		bra.w	Obj26_Animate
0000A2C2                            ; ===========================================================================
0000A2C2                            
0000A2C2                            loc_A1EC:				; XREF: Obj26_Solid
0000A2C2 323C 001A                  		move.w	#$1A,d1
0000A2C6 343C 000F                  		move.w	#$F,d2
0000A2CA 6100 0000                  		bsr.w	Obj26_SolidSides
0000A2CE 6700 0000                  		beq.w	loc_A25C
0000A2D2 4A69 0012                  		tst.w	$12(a1)
0000A2D6 6B00                       		bmi.s	loc_A20A
0000A2D8 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A2DE 6700                       		beq.s	loc_A25C	; if yes, branch
0000A2E0                            
0000A2E0                            loc_A20A:
0000A2E0 4A41                       		tst.w	d1
0000A2E2 6A00                       		bpl.s	loc_A220
0000A2E4 9769 000C                  		sub.w	d3,$C(a1)
0000A2E8 6100 D2CA                  		bsr.w	loc_74AE
0000A2EC 117C 0002 0025             		move.b	#2,$25(a0)
0000A2F2 6000 0000                  		bra.w	Obj26_Animate
0000A2F6                            ; ===========================================================================
0000A2F6                            
0000A2F6                            loc_A220:
0000A2F6 4A40                       		tst.w	d0
0000A2F8 6700 0000                  		beq.w	loc_A246
0000A2FC 6B00                       		bmi.s	loc_A230
0000A2FE 4A69 0010                  		tst.w	$10(a1)
0000A302 6B00                       		bmi.s	loc_A246
0000A304 6000                       		bra.s	loc_A236
0000A306                            ; ===========================================================================
0000A306                            
0000A306                            loc_A230:
0000A306 4A69 0010                  		tst.w	$10(a1)
0000A30A 6A00                       		bpl.s	loc_A246
0000A30C                            
0000A30C                            loc_A236:
0000A30C 9169 0008                  		sub.w	d0,8(a1)
0000A310 337C 0000 0014             		move.w	#0,$14(a1)
0000A316 337C 0000 0010             		move.w	#0,$10(a1)
0000A31C                            
0000A31C                            loc_A246:
0000A31C 0829 0001 0022             		btst	#1,$22(a1)
0000A322 6600                       		bne.s	loc_A26A
0000A324 08E9 0005 0022             		bset	#5,$22(a1)
0000A32A 08E8 0005 0022             		bset	#5,$22(a0)
0000A330 6000                       		bra.s	Obj26_Animate
0000A332                            ; ===========================================================================
0000A332                            
0000A332                            loc_A25C:
0000A332 0828 0005 0022             		btst	#5,$22(a0)
0000A338 6700                       		beq.s	Obj26_Animate
0000A33A 337C 0001 001C             		move.w	#1,$1C(a1)
0000A340                            
0000A340                            loc_A26A:
0000A340 08A8 0005 0022             		bclr	#5,$22(a0)
0000A346 08A9 0005 0022             		bclr	#5,$22(a1)
0000A34C                            
0000A34C                            Obj26_Animate:				; XREF: Obj26_Index
0000A34C 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A352 6100 0000                  		bsr.w	AnimateSprite
0000A356                            
0000A356                            Obj26_Display:				; XREF: Obj26_Index
0000A356 6100 0000                  		bsr.w	DisplaySprite
0000A35A 3028 0008                  		move.w	8(a0),d0
0000A35E 0240 FF80                  		andi.w	#$FF80,d0
0000A362 3238 F700                  		move.w	($FFFFF700).w,d1
0000A366 0441 0080                  		subi.w	#$80,d1
0000A36A 0241 FF80                  		andi.w	#$FF80,d1
0000A36E 9041                       		sub.w	d1,d0
0000A370 0C40 0280                  		cmpi.w	#$280,d0
0000A374 6200 0000                  		bhi.w	DeleteObject
0000A378 4E75                       		rts	
0000A37A                            ; ===========================================================================
0000A37A                            
0000A37A                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A37A 5428 0024                  		addq.b	#2,$24(a0)
0000A37E 117C 0000 0020             		move.b	#0,$20(a0)
0000A384 6100 0000                  		bsr.w	SingleObjLoad
0000A388 6600                       		bne.s	Obj26_Explode
0000A38A 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A38E 3368 0008 0008             		move.w	8(a0),8(a1)
0000A394 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A39A 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A3A0                            
0000A3A0                            Obj26_Explode:
0000A3A0 6100 0000                  		bsr.w	SingleObjLoad
0000A3A4 6600                       		bne.s	Obj26_SetBroken
0000A3A6 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000A3AA 5429 0024                  		addq.b	#2,$24(a1)
0000A3AE 3368 0008 0008             		move.w	8(a0),8(a1)
0000A3B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A3BA                            
0000A3BA                            Obj26_SetBroken:
0000A3BA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A3BE 7000                       		moveq	#0,d0
0000A3C0 1028 0023                  		move.b	$23(a0),d0
0000A3C4 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A3CA 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A3D0 6000 0000                  		bra.w	DisplaySprite
0000A3D4                            ; ===========================================================================
0000A3D4                            ; ---------------------------------------------------------------------------
0000A3D4                            ; Object 2E - contents of monitors
0000A3D4                            ; ---------------------------------------------------------------------------
0000A3D4                            
0000A3D4                            Obj2E:					; XREF: Obj_Index
0000A3D4 7000                       		moveq	#0,d0
0000A3D6 1028 0024                  		move.b	$24(a0),d0
0000A3DA 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A3DE 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A3E2 6000 0000                  		bra.w	DisplaySprite
0000A3E6                            ; ===========================================================================
0000A3E6 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A3E8 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A3EA 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A3EC                            ; ===========================================================================
0000A3EC                            
0000A3EC                            Obj2E_Main:				; XREF: Obj2E_Index
0000A3EC 5428 0024                  		addq.b	#2,$24(a0)
0000A3F0 317C 0680 0002             		move.w	#$680,2(a0)
0000A3F6 117C 0024 0001             		move.b	#$24,1(a0)
0000A3FC 117C 0003 0018             		move.b	#3,$18(a0)
0000A402 117C 0008 0019             		move.b	#8,$19(a0)
0000A408 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A40E 7000                       		moveq	#0,d0
0000A410 1028 001C                  		move.b	$1C(a0),d0
0000A414 5400                       		addq.b	#2,d0
0000A416 1140 001A                  		move.b	d0,$1A(a0)
0000A41A 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A420 D000                       		add.b	d0,d0
0000A422 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A426 5249                       		addq.w	#1,a1
0000A428 2149 0004                  		move.l	a1,4(a0)
0000A42C                            
0000A42C                            Obj2E_Move:				; XREF: Obj2E_Index
0000A42C 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A430 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A434 6100 0000                  		bsr.w	SpeedToPos
0000A438 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A43E 4E75                       		rts	
0000A440                            ; ===========================================================================
0000A440                            
0000A440                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A440 5428 0024                  		addq.b	#2,$24(a0)
0000A444 317C 001D 001E             		move.w	#29,$1E(a0)
0000A44A 1028 001C                  		move.b	$1C(a0),d0
0000A44E 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A452 6600                       		bne.s	Obj2E_ChkSonic
0000A454 4E75                       		rts			; Eggman monitor does nothing
0000A456                            ; ===========================================================================
0000A456                            
0000A456                            Obj2E_ChkSonic:
0000A456 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A45A 6600                       		bne.s	Obj2E_ChkShoes
0000A45C                            
0000A45C                            ExtraLife:
0000A45C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A460 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A464 303C 0088                  		move.w	#$88,d0
0000A468 4EF9 0000 1396             		jmp	(PlaySound).l	; play extra life music
0000A46E                            ; ===========================================================================
0000A46E                            
0000A46E                            Obj2E_ChkShoes:
0000A46E 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A472 6600                       		bne.s	Obj2E_ChkShield
0000A474 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A47A 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A480 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A486 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A48C 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A492 303C 00E2                  		move.w	#$E2,d0
0000A496 4EF9 0000 1396             		jmp	(PlaySound).l	; Speed	up the music
0000A49C                            ; ===========================================================================
0000A49C                            
0000A49C                            Obj2E_ChkShield:
0000A49C 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A4A0 6600                       		bne.s	Obj2E_ChkInvinc
0000A4A2 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A4A8 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A4AE 303C 00AF                  		move.w	#$AF,d0
0000A4B2 4EF9 0000 1396             		jmp	(PlaySound).l	; play shield sound
0000A4B8                            ; ===========================================================================
0000A4B8                            
0000A4B8                            Obj2E_ChkInvinc:
0000A4B8 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A4BC 6600                       		bne.s	Obj2E_ChkRings
0000A4BE 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A4C4 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A4CA 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A4D0 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A4D6 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A4DC 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A4E2 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A4E8 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A4EE 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A4F4 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A4FA 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A4FE 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A500 303C 0087                  		move.w	#$87,d0
0000A504 4EF9 0000 1396             		jmp	(PlaySound).l	; play invincibility music
0000A50A                            ; ===========================================================================
0000A50A                            
0000A50A                            Obj2E_NoMusic:
0000A50A 4E75                       		rts	
0000A50C                            ; ===========================================================================
0000A50C                            
0000A50C                            Obj2E_ChkRings:
0000A50C 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A510 6600                       		bne.s	Obj2E_ChkS
0000A512 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A518 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A51E 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A524 6500                       		bcs.s	Obj2E_RingSound
0000A526 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A52C 6700 FF2E                  		beq.w	ExtraLife
0000A530 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A536 6500                       		bcs.s	Obj2E_RingSound
0000A538 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A53E 6700 FF1C                  		beq.w	ExtraLife
0000A542                            
0000A542                            Obj2E_RingSound:
0000A542 303C 00B5                  		move.w	#$B5,d0
0000A546 4EF9 0000 1396             		jmp	(PlaySound).l	; play ring sound
0000A54C                            ; ===========================================================================
0000A54C                            
0000A54C                            Obj2E_ChkS:
0000A54C 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A550 6600                       		bne.s	Obj2E_ChkEnd
0000A552                            		; nop	
0000A552 7201                       		moveq	#1,d1
0000A554 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000A558                            
0000A558                            Obj2E_ChkEnd:
0000A558 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A55A                            ; ===========================================================================
0000A55A                            
0000A55A                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A55A 5368 001E                  		subq.w	#1,$1E(a0)
0000A55E 6B00 0000                  		bmi.w	DeleteObject
0000A562 4E75                       		rts	
0000A564                            ; ---------------------------------------------------------------------------
0000A564                            ; Subroutine to	make the sides of a monitor solid
0000A564                            ; ---------------------------------------------------------------------------
0000A564                            
0000A564                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A564                            
0000A564                            
0000A564                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A564 43F8 D000                  		lea	($FFFFD000).w,a1
0000A568 3029 0008                  		move.w	8(a1),d0
0000A56C 9068 0008                  		sub.w	8(a0),d0
0000A570 D041                       		add.w	d1,d0
0000A572 6B00                       		bmi.s	loc_A4E6
0000A574 3601                       		move.w	d1,d3
0000A576 D643                       		add.w	d3,d3
0000A578 B043                       		cmp.w	d3,d0
0000A57A 6200                       		bhi.s	loc_A4E6
0000A57C 1629 0016                  		move.b	$16(a1),d3
0000A580 4883                       		ext.w	d3
0000A582 D443                       		add.w	d3,d2
0000A584 3629 000C                  		move.w	$C(a1),d3
0000A588 9668 000C                  		sub.w	$C(a0),d3
0000A58C D642                       		add.w	d2,d3
0000A58E 6B00                       		bmi.s	loc_A4E6
0000A590 D442                       		add.w	d2,d2
0000A592 B642                       		cmp.w	d2,d3
0000A594 6400                       		bcc.s	loc_A4E6
0000A596 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A59A 6B00                       		bmi.s	loc_A4E6
0000A59C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A5A2 6400                       		bcc.s	loc_A4E6
0000A5A4 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A5A8 6600                       		bne.s	loc_A4E6
0000A5AA B240                       		cmp.w	d0,d1
0000A5AC 6400                       		bcc.s	loc_A4DC
0000A5AE D241                       		add.w	d1,d1
0000A5B0 9041                       		sub.w	d1,d0
0000A5B2                            
0000A5B2                            loc_A4DC:
0000A5B2 0C43 0010                  		cmpi.w	#$10,d3
0000A5B6 6500                       		bcs.s	loc_A4EA
0000A5B8                            
0000A5B8                            loc_A4E2:
0000A5B8 7201                       		moveq	#1,d1
0000A5BA 4E75                       		rts	
0000A5BC                            ; ===========================================================================
0000A5BC                            
0000A5BC                            loc_A4E6:
0000A5BC 7200                       		moveq	#0,d1
0000A5BE 4E75                       		rts	
0000A5C0                            ; ===========================================================================
0000A5C0                            
0000A5C0                            loc_A4EA:
0000A5C0 7200                       		moveq	#0,d1
0000A5C2 1228 0019                  		move.b	$19(a0),d1
0000A5C6 5841                       		addq.w	#4,d1
0000A5C8 3401                       		move.w	d1,d2
0000A5CA D442                       		add.w	d2,d2
0000A5CC D269 0008                  		add.w	8(a1),d1
0000A5D0 9268 0008                  		sub.w	8(a0),d1
0000A5D4 6BE2                       		bmi.s	loc_A4E2
0000A5D6 B242                       		cmp.w	d2,d1
0000A5D8 64DE                       		bcc.s	loc_A4E2
0000A5DA 72FF                       		moveq	#-1,d1
0000A5DC 4E75                       		rts	
0000A5DE                            ; End of function Obj26_SolidSides
0000A5DE                            
0000A5DE                            ; ===========================================================================
0000A5DE                            Ani_obj26:
0000A5DE                            	include "_anim\obj26.asm"
0000A5DE                            ; ---------------------------------------------------------------------------
0000A5DE                            ; Animation script - monitors
0000A5DE                            ; ---------------------------------------------------------------------------
0000A5DE 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A5E4 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A5EA 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A5F0 0000                       		dc.w byte_A582-Ani_obj26
0000A5F2 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A5F8 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A604 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A610 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A61C 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A628 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A634 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A640 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A64C 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A658 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A660                            		even
0000A660                            		even
0000A660                            
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            ; Sprite mappings - monitors
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            Map_obj26:
0000A660                            	include "_maps\obj26.asm"
0000A660                            ; ---------------------------------------------------------------------------
0000A660                            ; Sprite mappings - monitors
0000A660                            ; ---------------------------------------------------------------------------
0000A660 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000A664 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000A668 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000A66C 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000A670 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000A674 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000A678 01                         byte_A5A2:	dc.b 1			; static monitor
0000A679 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A67E 02                         byte_A5A8:	dc.b 2			; static monitor
0000A67F F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000A684 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A689 02                         byte_A5B3:	dc.b 2			; static monitor
0000A68A F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000A68F EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A694 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000A695 F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000A69A EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A69F 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000A6A0 F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000A6A5 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6AA 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000A6AB F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000A6B0 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6B5 02                         byte_A5DF:	dc.b 2			; shield monitor
0000A6B6 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000A6BB EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6C0 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000A6C1 F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000A6C6 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6CB 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000A6CC F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000A6D1 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6D6 02                         byte_A600:	dc.b 2			; 'S' monitor
0000A6D7 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000A6DC EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6E1 02                         byte_A60B:	dc.b 2			; goggles monitor
0000A6E2 F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000A6E7 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A6EC 01                         byte_A616:	dc.b 1			; broken monitor
0000A6ED FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000A6F2                            		even
0000A6F2                            		even
0000A6F2                            
0000A6F2                            ; ===========================================================================
0000A6F2                            ; ---------------------------------------------------------------------------
0000A6F2                            ; Object 0E - Sonic on the title screen
0000A6F2                            ; ---------------------------------------------------------------------------
0000A6F2                            
0000A6F2                            Obj0E:					; XREF: Obj_Index
0000A6F2 7000                       		moveq	#0,d0
0000A6F4 1028 0024                  		move.b	$24(a0),d0
0000A6F8 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000A6FC 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000A700                            ; ===========================================================================
0000A700 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000A702 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000A704 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000A706 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000A708                            ; ===========================================================================
0000A708                            
0000A708                            Obj0E_Main:				; XREF: Obj0E_Index
0000A708 5428 0024                  		addq.b	#2,$24(a0)
0000A70C 317C 00F0 0008             		move.w	#$F0,8(a0)
0000A712 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000A718 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000A720 317C 2300 0002             		move.w	#$2300,2(a0)
0000A726 117C 0001 0018             		move.b	#1,$18(a0)
0000A72C 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000A732 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A738 6100 0000                  		bsr.w	AnimateSprite
0000A73C                            
0000A73C                            Obj0E_Delay:				; XREF: Obj0E_Index
0000A73C 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000A740 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000A742 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000A746 6000 0000                  		bra.w	DisplaySprite
0000A74A                            ; ===========================================================================
0000A74A                            
0000A74A                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000A74A 4E75                       		rts	
0000A74C                            ; ===========================================================================
0000A74C                            
0000A74C                            Obj0E_Move:				; XREF: Obj0E_Index
0000A74C 5168 000A                  		subq.w	#8,$A(a0)
0000A750 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000A756 6600                       		bne.s	Obj0E_Display
0000A758 5428 0024                  		addq.b	#2,$24(a0)
0000A75C                            
0000A75C                            Obj0E_Display:
0000A75C 6000 0000                  		bra.w	DisplaySprite
0000A760                            ; ===========================================================================
0000A760 4E75                       		rts	
0000A762                            ; ===========================================================================
0000A762                            
0000A762                            Obj0E_Animate:				; XREF: Obj0E_Index
0000A762 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A768 6100 0000                  		bsr.w	AnimateSprite
0000A76C 6000 0000                  		bra.w	DisplaySprite
0000A770                            ; ===========================================================================
0000A770 4E75                       		rts	
0000A772                            ; ===========================================================================
0000A772                            ; ---------------------------------------------------------------------------
0000A772                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000A772                            ; ---------------------------------------------------------------------------
0000A772                            
0000A772                            Obj0F:					; XREF: Obj_Index
0000A772 7000                       		moveq	#0,d0
0000A774 1028 0024                  		move.b	$24(a0),d0
0000A778 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000A77C 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000A780 6000 0000                  		bra.w	DisplaySprite
0000A784                            ; ===========================================================================
0000A784 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000A786 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000A788 0000                       		dc.w locret_A6F8-Obj0F_Index
0000A78A                            ; ===========================================================================
0000A78A                            
0000A78A                            Obj0F_Main:				; XREF: Obj0F_Index
0000A78A 5428 0024                  		addq.b	#2,$24(a0)
0000A78E 317C 00D0 0008             		move.w	#$D0,8(a0)
0000A794 317C 0130 000A             		move.w	#$130,$A(a0)
0000A79A 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000A7A2 317C 0200 0002             		move.w	#$200,2(a0)
0000A7A8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000A7AE 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000A7B0 5428 0024                  		addq.b	#2,$24(a0)
0000A7B4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000A7BA 6600                       		bne.s	locret_A6F8	; if not, branch
0000A7BC 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000A7C2 317C 0170 0008             		move.w	#$170,8(a0)
0000A7C8 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000A7CE                            
0000A7CE                            locret_A6F8:				; XREF: Obj0F_Index
0000A7CE 4E75                       		rts	
0000A7D0                            ; ===========================================================================
0000A7D0                            
0000A7D0                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000A7D0 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000A7D6 6000 0000                  		bra.w	AnimateSprite
0000A7DA                            ; ===========================================================================
0000A7DA                            Ani_obj0E:
0000A7DA                            	include "_anim\obj0E.asm"
0000A7DA                            ; ---------------------------------------------------------------------------
0000A7DA                            ; Animation script - Sonic on the title screen
0000A7DA                            ; ---------------------------------------------------------------------------
0000A7DA 0000                       		dc.w byte_A706-Ani_obj0E
0000A7DC 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000A7E8                            		even
0000A7E8                            		even
0000A7E8                            
0000A7E8                            Ani_obj0F:
0000A7E8                            	include "_anim\obj0F.asm"
0000A7E8                            ; ---------------------------------------------------------------------------
0000A7E8                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000A7E8                            ; ---------------------------------------------------------------------------
0000A7E8 0000                       		dc.w byte_A714-Ani_obj0F
0000A7EA 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000A7EE                            		even
0000A7EE                            		even
0000A7EE                            
0000A7EE                            ; ---------------------------------------------------------------------------
0000A7EE                            ; Subroutine to	animate	a sprite using an animation script
0000A7EE                            ; ---------------------------------------------------------------------------
0000A7EE                            
0000A7EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A7EE                            
0000A7EE                            
0000A7EE                            AnimateSprite:
0000A7EE 7000                       		moveq	#0,d0
0000A7F0 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000A7F4 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000A7F8 6700                       		beq.s	Anim_Run	; if not, branch
0000A7FA 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000A7FE 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A804 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000A80A                            
0000A80A                            Anim_Run:
0000A80A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A80E 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000A810 D040                       		add.w	d0,d0
0000A812 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000A816 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000A81A 7200                       		moveq	#0,d1
0000A81C 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000A820 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000A824 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000A826                            
0000A826                            Anim_Next:
0000A826 1200                       		move.b	d0,d1
0000A828 0200 001F                  		andi.b	#$1F,d0
0000A82C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000A830 1028 0022                  		move.b	$22(a0),d0
0000A834 E719                       		rol.b	#3,d1
0000A836 B101                       		eor.b	d0,d1
0000A838 0201 0003                  		andi.b	#3,d1
0000A83C 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000A842 8328 0001                  		or.b	d1,1(a0)
0000A846 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000A84A                            
0000A84A                            Anim_Wait:
0000A84A 4E75                       		rts	
0000A84C                            ; ===========================================================================
0000A84C                            
0000A84C                            Anim_End_FF:
0000A84C 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000A84E 6600                       		bne.s	Anim_End_FE	; if not, branch
0000A850 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000A856 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000A85A 60CA                       		bra.s	Anim_Next
0000A85C                            ; ===========================================================================
0000A85C                            
0000A85C                            Anim_End_FE:
0000A85C 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000A85E 6600                       		bne.s	Anim_End_FD	; if not, branch
0000A860 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000A864 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000A868 9200                       		sub.b	d0,d1
0000A86A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000A86E 60B6                       		bra.s	Anim_Next
0000A870                            ; ===========================================================================
0000A870                            
0000A870                            Anim_End_FD:
0000A870 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000A872 6600                       		bne.s	Anim_End_FC	; if not, branch
0000A874 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000A87A                            
0000A87A                            Anim_End_FC:
0000A87A 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000A87C 6600                       		bne.s	Anim_End_FB	; if not, branch
0000A87E 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000A882                            
0000A882                            Anim_End_FB:
0000A882 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000A884 6600                       		bne.s	Anim_End_FA	; if not, branch
0000A886 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A88C 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000A890                            
0000A890                            Anim_End_FA:
0000A890 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000A892 6600                       		bne.s	Anim_End	; if not, branch
0000A894 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000A898                            
0000A898                            Anim_End:
0000A898 4E75                       		rts	
0000A89A                            ; End of function AnimateSprite
0000A89A                            
0000A89A                            ; ===========================================================================
0000A89A                            ; ---------------------------------------------------------------------------
0000A89A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A89A                            ; ---------------------------------------------------------------------------
0000A89A                            Map_obj0F:
0000A89A                            	include "_maps\obj0F.asm"
0000A89A                            ; ---------------------------------------------------------------------------
0000A89A                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A89A                            ; ---------------------------------------------------------------------------
0000A89A 0000                       		dc.w byte_A7CD-Map_obj0F
0000A89C 0000                       		dc.w byte_A7CC-Map_obj0F
0000A89E 0000                       		dc.w byte_A7EB-Map_obj0F
0000A8A0 0000                       		dc.w byte_A882-Map_obj0F
0000A8A2 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000A8A3 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000A8A8 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000A8AD 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000A8B2 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000A8B7 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000A8BC 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000A8C1 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000A8C2 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8C7 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8CC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8D1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8D6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8DB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8E0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8E5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8EA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8EF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A8F4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8F9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A8FE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A903 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A908 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A90D D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A912 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A917 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A91C D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A921 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A926 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A92B F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A930 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A935 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A93A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A93F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A944 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A949 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A94E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A953 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A958 01                         byte_A882:	dc.b 1			; "TM"
0000A959 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000A95E                            		even
0000A95E                            		even
0000A95E                            
0000A95E                            ; ---------------------------------------------------------------------------
0000A95E                            ; Sprite mappings - Sonic on the title screen
0000A95E                            ; ---------------------------------------------------------------------------
0000A95E                            Map_obj0E:
0000A95E                            	include "_maps\obj0E.asm"
0000A95E                            ; ---------------------------------------------------------------------------
0000A95E                            ; Sprite mappings - Sonic on the title screen
0000A95E                            ; ---------------------------------------------------------------------------
0000A95E 0000                       		dc.w byte_A898-Map_obj0E
0000A960 0000                       		dc.w byte_A8CB-Map_obj0E
0000A962 0000                       		dc.w byte_A917-Map_obj0E
0000A964 0000                       		dc.w byte_A96D-Map_obj0E
0000A966 0000                       		dc.w byte_A9AF-Map_obj0E
0000A968 0000                       		dc.w byte_A9E7-Map_obj0E
0000A96A 0000                       		dc.w byte_AA47-Map_obj0E
0000A96C 0000                       		dc.w byte_AAB1-Map_obj0E
0000A96E 0A                         byte_A898:	dc.b $A
0000A96F 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000A974 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000A979 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000A97E 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000A983 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000A988 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000A98D 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000A992 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000A997 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000A99C 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000A9A1 0F                         byte_A8CB:	dc.b $F
0000A9A2 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000A9A7 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000A9AC 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000A9B1 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000A9B6 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000A9BB 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000A9C0 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000A9C5 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000A9CA 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000A9CF 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000A9D4 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000A9D9 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000A9DE 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000A9E3 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000A9E8 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000A9ED 11                         byte_A917:	dc.b $11
0000A9EE 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000A9F3 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000A9F8 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000A9FD 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000AA02 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000AA07 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000AA0C 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000AA11 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000AA16 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000AA1B 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000AA20 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000AA25 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000AA2A 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000AA2F 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000AA34 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000AA39 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000AA3E 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000AA43 0D                         byte_A96D:	dc.b $D
0000AA44 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000AA49 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000AA4E 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000AA53 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000AA58 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000AA5D 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000AA62 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000AA67 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000AA6C 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000AA71 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000AA76 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000AA7B 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000AA80 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000AA85 0B                         byte_A9AF:	dc.b $B
0000AA86 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000AA8B 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000AA90 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000AA95 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000AA9A 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000AA9F 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000AAA4 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000AAA9 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000AAAE 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000AAB3 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000AAB8 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000AABD 13                         byte_A9E7:	dc.b $13
0000AABE 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000AAC3 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000AAC8 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000AACD 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000AAD2 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AAD7 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AADC 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AAE1 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AAE6 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AAEB 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AAF0 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AAF5 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AAFA 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AAFF 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AB04 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AB09 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AB0E 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AB13 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AB18 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AB1D 15                         byte_AA47:	dc.b $15
0000AB1E 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000AB23 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000AB28 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000AB2D 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000AB32 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000AB37 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000AB3C 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AB41 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AB46 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AB4B 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AB50 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AB55 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AB5A 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AB5F 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AB64 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AB69 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AB6E 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AB73 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AB78 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AB7D 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AB82 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AB87 16                         byte_AAB1:	dc.b $16
0000AB88 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000AB8D 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000AB92 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000AB97 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000AB9C 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000ABA1 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000ABA6 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000ABAB 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000ABB0 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000ABB5 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000ABBA 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000ABBF 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000ABC4 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000ABC9 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000ABCE 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000ABD3 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000ABD8 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000ABDD 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000ABE2 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000ABE7 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000ABEC 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000ABF1 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000ABF6                            		even
0000ABF6                            		even
0000ABF6                            
0000ABF6                            ; ===========================================================================
0000ABF6                            ; ---------------------------------------------------------------------------
0000ABF6                            ; Object 2B - Chopper enemy (GHZ)
0000ABF6                            ; ---------------------------------------------------------------------------
0000ABF6                            
0000ABF6                            Obj2B:					; XREF: Obj_Index
0000ABF6 7000                       		moveq	#0,d0
0000ABF8 1028 0024                  		move.b	$24(a0),d0
0000ABFC 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AC00 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AC04 6000 0000                  		bra.w	MarkObjGone
0000AC08                            ; ===========================================================================
0000AC08 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AC0A 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AC0C                            ; ===========================================================================
0000AC0C                            
0000AC0C                            Obj2B_Main:				; XREF: Obj2B_Index
0000AC0C 5428 0024                  		addq.b	#2,$24(a0)
0000AC10 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000AC18 317C 047B 0002             		move.w	#$47B,2(a0)
0000AC1E 117C 0004 0001             		move.b	#4,1(a0)
0000AC24 117C 0004 0018             		move.b	#4,$18(a0)
0000AC2A 117C 0009 0020             		move.b	#9,$20(a0)
0000AC30 117C 0010 0019             		move.b	#$10,$19(a0)
0000AC36 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AC3C 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000AC42                            
0000AC42                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000AC42 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000AC48 6100 FBA4                  		bsr.w	AnimateSprite
0000AC4C 6100 0000                  		bsr.w	SpeedToPos
0000AC50 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000AC56 3028 0030                  		move.w	$30(a0),d0
0000AC5A B068 000C                  		cmp.w	$C(a0),d0
0000AC5E 6400                       		bcc.s	Obj2B_ChgAni
0000AC60 3140 000C                  		move.w	d0,$C(a0)
0000AC64 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AC6A                            
0000AC6A                            Obj2B_ChgAni:
0000AC6A 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000AC70 0440 00C0                  		subi.w	#$C0,d0
0000AC74 B068 000C                  		cmp.w	$C(a0),d0
0000AC78 6400                       		bcc.s	locret_ABB6
0000AC7A 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000AC80 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000AC84 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000AC86 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000AC8C                            
0000AC8C                            locret_ABB6:
0000AC8C 4E75                       		rts	
0000AC8E                            ; ===========================================================================
0000AC8E                            Ani_obj2B:
0000AC8E                            	include "_anim\obj2B.asm"
0000AC8E                            ; ---------------------------------------------------------------------------
0000AC8E                            ; Animation script - Chopper enemy
0000AC8E                            ; ---------------------------------------------------------------------------
0000AC8E 0000                       		dc.w byte_ABBE-Ani_obj2B
0000AC90 0000                       		dc.w byte_ABC2-Ani_obj2B
0000AC92 0000                       		dc.w byte_ABC6-Ani_obj2B
0000AC94 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000AC98 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000AC9C 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000ACA0 00                         		even
0000ACA0 00                         		even
0000ACA0                            
0000ACA0                            ; ---------------------------------------------------------------------------
0000ACA0                            ; Sprite mappings - Chopper enemy (GHZ)
0000ACA0                            ; ---------------------------------------------------------------------------
0000ACA0                            Map_obj2B:
0000ACA0                            	include "_maps\obj2B.asm"
0000ACA0                            ; ---------------------------------------------------------------------------
0000ACA0                            ; Sprite mappings - Chopper enemy (GHZ)
0000ACA0                            ; ---------------------------------------------------------------------------
0000ACA0 0000                       		dc.w byte_ABCE-Map_obj2B
0000ACA2 0000                       		dc.w byte_ABD4-Map_obj2B
0000ACA4 01                         byte_ABCE:	dc.b 1
0000ACA5 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000ACAA 01                         byte_ABD4:	dc.b 1
0000ACAB F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000ACB0                            		even
0000ACB0                            		even
0000ACB0                            
0000ACB0                            ; ===========================================================================
0000ACB0                            ; ---------------------------------------------------------------------------
0000ACB0                            ; Object 2C - Jaws enemy (LZ)
0000ACB0                            ; ---------------------------------------------------------------------------
0000ACB0                            
0000ACB0                            Obj2C:					; XREF: Obj_Index
0000ACB0 7000                       		moveq	#0,d0
0000ACB2 1028 0024                  		move.b	$24(a0),d0
0000ACB6 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000ACBA 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000ACBE                            ; ===========================================================================
0000ACBE 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000ACC0 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000ACC2                            ; ===========================================================================
0000ACC2                            
0000ACC2                            Obj2C_Main:				; XREF: Obj2C_Index
0000ACC2 5428 0024                  		addq.b	#2,$24(a0)
0000ACC6 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000ACCE 317C 2486 0002             		move.w	#$2486,2(a0)
0000ACD4 0028 0004 0001             		ori.b	#4,1(a0)
0000ACDA 117C 000A 0020             		move.b	#$A,$20(a0)
0000ACE0 117C 0004 0018             		move.b	#4,$18(a0)
0000ACE6 117C 0010 0019             		move.b	#$10,$19(a0)
0000ACEC 7000                       		moveq	#0,d0
0000ACEE 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000ACF2 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000ACF4 5340                       		subq.w	#1,d0
0000ACF6 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000ACFA 3140 0032                  		move.w	d0,$32(a0)
0000ACFE 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000AD04 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000AD0A 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000AD0C 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000AD10                            
0000AD10                            Obj2C_Turn:				; XREF: Obj2C_Index
0000AD10 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000AD14 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000AD16 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000AD1C 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000AD20 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000AD26 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000AD2C                            
0000AD2C                            Obj2C_Animate:
0000AD2C 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000AD32 6100 FABA                  		bsr.w	AnimateSprite
0000AD36 6100 0000                  		bsr.w	SpeedToPos
0000AD3A 6000 0000                  		bra.w	MarkObjGone
0000AD3E                            ; ===========================================================================
0000AD3E                            Ani_obj2C:
0000AD3E                            	include "_anim\obj2C.asm"
0000AD3E                            ; ---------------------------------------------------------------------------
0000AD3E                            ; Animation script - Jaws enemy
0000AD3E                            ; ---------------------------------------------------------------------------
0000AD3E 0000                       		dc.w byte_AC6A-Ani_obj2C
0000AD40 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000AD46                            		even
0000AD46                            		even
0000AD46                            
0000AD46                            ; ---------------------------------------------------------------------------
0000AD46                            ; Sprite mappings - Jaws enemy (LZ)
0000AD46                            ; ---------------------------------------------------------------------------
0000AD46                            Map_obj2C:
0000AD46                            	include "_maps\obj2C.asm"
0000AD46                            ; ---------------------------------------------------------------------------
0000AD46                            ; Sprite mappings - Jaws enemy (LZ)
0000AD46                            ; ---------------------------------------------------------------------------
0000AD46 0000                       		dc.w byte_AC78-Map_obj2C
0000AD48 0000                       		dc.w byte_AC83-Map_obj2C
0000AD4A 0000                       		dc.w byte_AC8E-Map_obj2C
0000AD4C 0000                       		dc.w byte_AC99-Map_obj2C
0000AD4E 02                         byte_AC78:	dc.b 2
0000AD4F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AD54 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000AD59 02                         byte_AC83:	dc.b 2
0000AD5A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AD5F F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000AD64 02                         byte_AC8E:	dc.b 2
0000AD65 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AD6A F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000AD6F 02                         byte_AC99:	dc.b 2
0000AD70 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AD75 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000AD7A                            		even
0000AD7A                            		even
0000AD7A                            
0000AD7A                            ; ===========================================================================
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A                            ; Object 2D - Burrobot enemy (LZ)
0000AD7A                            ; ---------------------------------------------------------------------------
0000AD7A                            
0000AD7A                            Obj2D:					; XREF: Obj_Index
0000AD7A 7000                       		moveq	#0,d0
0000AD7C 1028 0024                  		move.b	$24(a0),d0
0000AD80 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000AD84 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000AD88                            ; ===========================================================================
0000AD88 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000AD8A 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000AD8C                            ; ===========================================================================
0000AD8C                            
0000AD8C                            Obj2D_Main:				; XREF: Obj2D_Index
0000AD8C 5428 0024                  		addq.b	#2,$24(a0)
0000AD90 117C 0013 0016             		move.b	#$13,$16(a0)
0000AD96 117C 0008 0017             		move.b	#8,$17(a0)
0000AD9C 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000ADA4 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000ADAA 0028 0004 0001             		ori.b	#4,1(a0)
0000ADB0 117C 0004 0018             		move.b	#4,$18(a0)
0000ADB6 117C 0005 0020             		move.b	#5,$20(a0)
0000ADBC 117C 000C 0019             		move.b	#$C,$19(a0)
0000ADC2 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000ADC6 117C 0002 001C             		move.b	#2,$1C(a0)
0000ADCC                            
0000ADCC                            Obj2D_Action:				; XREF: Obj2D_Index
0000ADCC 7000                       		moveq	#0,d0
0000ADCE 1028 0025                  		move.b	$25(a0),d0
0000ADD2 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000ADD6 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000ADDA 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000ADE0 6100 FA0C                  		bsr.w	AnimateSprite
0000ADE4 6000 0000                  		bra.w	MarkObjGone
0000ADE8                            ; ===========================================================================
0000ADE8 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000ADEA 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000ADEC 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000ADEE 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000ADF0                            ; ===========================================================================
0000ADF0                            
0000ADF0                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000ADF0 5368 0030                  		subq.w	#1,$30(a0)
0000ADF4 6A00                       		bpl.s	locret_AD42
0000ADF6 5428 0025                  		addq.b	#2,$25(a0)
0000ADFA 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000AE00 317C 0080 0010             		move.w	#$80,$10(a0)
0000AE06 117C 0001 001C             		move.b	#1,$1C(a0)
0000AE0C 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000AE12 6700                       		beq.s	locret_AD42
0000AE14 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000AE18                            
0000AE18                            locret_AD42:
0000AE18 4E75                       		rts	
0000AE1A                            ; ===========================================================================
0000AE1A                            
0000AE1A                            Obj2D_Move:				; XREF: Obj2D_Index2
0000AE1A 5368 0030                  		subq.w	#1,$30(a0)
0000AE1E 6B00                       		bmi.s	loc_AD84
0000AE20 6100 0000                  		bsr.w	SpeedToPos
0000AE24 0868 0000 0032             		bchg	#0,$32(a0)
0000AE2A 6600                       		bne.s	loc_AD78
0000AE2C 3628 0008                  		move.w	8(a0),d3
0000AE30 0643 000C                  		addi.w	#$C,d3
0000AE34 0828 0000 0022             		btst	#0,$22(a0)
0000AE3A 6600                       		bne.s	loc_AD6A
0000AE3C 0443 0018                  		subi.w	#$18,d3
0000AE40                            
0000AE40                            loc_AD6A:
0000AE40 4EB9 0000 0000             		jsr	ObjHitFloor2
0000AE46 0C41 000C                  		cmpi.w	#$C,d1
0000AE4A 6C00                       		bge.s	loc_AD84
0000AE4C 4E75                       		rts	
0000AE4E                            ; ===========================================================================
0000AE4E                            
0000AE4E                            loc_AD78:				; XREF: Obj2D_Move
0000AE4E 4EB9 0000 0000             		jsr	ObjHitFloor
0000AE54 D368 000C                  		add.w	d1,$C(a0)
0000AE58 4E75                       		rts	
0000AE5A                            ; ===========================================================================
0000AE5A                            
0000AE5A                            loc_AD84:				; XREF: Obj2D_Move
0000AE5A 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000AE60 6700                       		beq.s	loc_ADA4
0000AE62 5528 0025                  		subq.b	#2,$25(a0)
0000AE66 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AE6C 317C 0000 0010             		move.w	#0,$10(a0)
0000AE72 117C 0000 001C             		move.b	#0,$1C(a0)
0000AE78 4E75                       		rts	
0000AE7A                            ; ===========================================================================
0000AE7A                            
0000AE7A                            loc_ADA4:
0000AE7A 5428 0025                  		addq.b	#2,$25(a0)
0000AE7E 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AE84 117C 0002 001C             		move.b	#2,$1C(a0)
0000AE8A 4E75                       		rts	
0000AE8C                            ; ===========================================================================
0000AE8C                            
0000AE8C                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000AE8C 6100 0000                  		bsr.w	SpeedToPos
0000AE90 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AE96 6B00                       		bmi.s	locret_ADF0
0000AE98 117C 0003 001C             		move.b	#3,$1C(a0)
0000AE9E 4EB9 0000 0000             		jsr	ObjHitFloor
0000AEA4 4A41                       		tst.w	d1
0000AEA6 6A00                       		bpl.s	locret_ADF0
0000AEA8 D368 000C                  		add.w	d1,$C(a0)
0000AEAC 317C 0000 0012             		move.w	#0,$12(a0)
0000AEB2 117C 0001 001C             		move.b	#1,$1C(a0)
0000AEB8 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000AEBE 5528 0025                  		subq.b	#2,$25(a0)
0000AEC2 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AEC6                            
0000AEC6                            locret_ADF0:
0000AEC6 4E75                       		rts	
0000AEC8                            ; ===========================================================================
0000AEC8                            
0000AEC8                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000AEC8 343C 0060                  		move.w	#$60,d2
0000AECC 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000AED0 6400                       		bcc.s	locret_AE20
0000AED2 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000AED6 9068 000C                  		sub.w	$C(a0),d0
0000AEDA 6400                       		bcc.s	locret_AE20
0000AEDC 0C40 FF80                  		cmpi.w	#-$80,d0
0000AEE0 6500                       		bcs.s	locret_AE20
0000AEE2 4A78 FE08                  		tst.w	($FFFFFE08).w
0000AEE6 6600                       		bne.s	locret_AE20
0000AEE8 5528 0025                  		subq.b	#2,$25(a0)
0000AEEC 3141 0010                  		move.w	d1,$10(a0)
0000AEF0 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AEF6                            
0000AEF6                            locret_AE20:
0000AEF6 4E75                       		rts	
0000AEF8                            
0000AEF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AEF8                            
0000AEF8                            
0000AEF8                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000AEF8 323C 0080                  		move.w	#$80,d1
0000AEFC 08E8 0000 0022             		bset	#0,$22(a0)
0000AF02 3038 D008                  		move.w	($FFFFD008).w,d0
0000AF06 9068 0008                  		sub.w	8(a0),d0
0000AF0A 6400                       		bcc.s	loc_AE40
0000AF0C 4440                       		neg.w	d0
0000AF0E 4441                       		neg.w	d1
0000AF10 08A8 0000 0022             		bclr	#0,$22(a0)
0000AF16                            
0000AF16                            loc_AE40:
0000AF16 B042                       		cmp.w	d2,d0
0000AF18 4E75                       		rts	
0000AF1A                            ; End of function Obj2D_ChkSonic2
0000AF1A                            
0000AF1A                            ; ===========================================================================
0000AF1A                            Ani_obj2D:
0000AF1A                            	include "_anim\obj2D.asm"
0000AF1A                            ; ---------------------------------------------------------------------------
0000AF1A                            ; Animation script - Burrobot enemy
0000AF1A                            ; ---------------------------------------------------------------------------
0000AF1A 0000                       		dc.w byte_AE4C-Ani_obj2D
0000AF1C 0000                       		dc.w byte_AE50-Ani_obj2D
0000AF1E 0000                       		dc.w byte_AE54-Ani_obj2D
0000AF20 0000                       		dc.w byte_AE58-Ani_obj2D
0000AF22 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000AF26 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000AF2A 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000AF2E 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000AF32 00                         		even
0000AF32 00                         		even
0000AF32                            
0000AF32                            ; ---------------------------------------------------------------------------
0000AF32                            ; Sprite mappings - Burrobot enemy (LZ)
0000AF32                            ; ---------------------------------------------------------------------------
0000AF32                            Map_obj2D:
0000AF32                            	include "_maps\obj2D.asm"
0000AF32                            ; ---------------------------------------------------------------------------
0000AF32                            ; Sprite mappings - Burrobot enemy (LZ)
0000AF32                            ; ---------------------------------------------------------------------------
0000AF32 0000                       		dc.w byte_AE6A-Map_obj2D
0000AF34 0000                       		dc.w byte_AE75-Map_obj2D
0000AF36 0000                       		dc.w byte_AE80-Map_obj2D
0000AF38 0000                       		dc.w byte_AE8B-Map_obj2D
0000AF3A 0000                       		dc.w byte_AE96-Map_obj2D
0000AF3C 0000                       		dc.w byte_AEA1-Map_obj2D
0000AF3E 0000                       		dc.w byte_AEAC-Map_obj2D
0000AF40 02                         byte_AE6A:	dc.b 2
0000AF41 EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000AF46 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AF4B 02                         byte_AE75:	dc.b 2
0000AF4C EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AF51 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000AF56 02                         byte_AE80:	dc.b 2
0000AF57 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000AF5C 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000AF61 02                         byte_AE8B:	dc.b 2
0000AF62 E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000AF67 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000AF6C 02                         byte_AE96:	dc.b 2
0000AF6D E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000AF72 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000AF77 02                         byte_AEA1:	dc.b 2
0000AF78 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000AF7D F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000AF82 02                         byte_AEAC:	dc.b 2
0000AF83 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AF88 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AF8E 00                         		even
0000AF8E 00                         		even
0000AF8E                            
0000AF8E                            ; ===========================================================================
0000AF8E                            ; ---------------------------------------------------------------------------
0000AF8E                            ; Object 2F - large moving platforms (MZ)
0000AF8E                            ; ---------------------------------------------------------------------------
0000AF8E                            
0000AF8E                            Obj2F:					; XREF: Obj_Index
0000AF8E 7000                       		moveq	#0,d0
0000AF90 1028 0024                  		move.b	$24(a0),d0
0000AF94 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000AF98 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000AF9C                            ; ===========================================================================
0000AF9C 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000AF9E 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000AFA0                            
0000AFA0 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000AFA2 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000AFA4 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000AFA6 0140                       		dc.b 1,	$40
0000AFA8 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000AFAA 0220                       		dc.b 2,	$20
0000AFAC                            ; ===========================================================================
0000AFAC                            
0000AFAC                            Obj2F_Main:				; XREF: Obj2F_Index
0000AFAC 5428 0024                  		addq.b	#2,$24(a0)
0000AFB0 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000AFB8 317C C000 0002             		move.w	#$C000,2(a0)
0000AFBE 117C 0004 0001             		move.b	#4,1(a0)
0000AFC4 117C 0005 0018             		move.b	#5,$18(a0)
0000AFCA 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000AFD0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000AFD6 7000                       		moveq	#0,d0
0000AFD8 1028 0028                  		move.b	$28(a0),d0
0000AFDC E448                       		lsr.w	#2,d0
0000AFDE 0240 001C                  		andi.w	#$1C,d0
0000AFE2 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000AFE6 3019                       		move.w	(a1)+,d0
0000AFE8 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000AFEC 214A 0030                  		move.l	a2,$30(a0)
0000AFF0 1159 001A                  		move.b	(a1)+,$1A(a0)
0000AFF4 1151 0019                  		move.b	(a1),$19(a0)
0000AFF8 0228 000F 0028             		andi.b	#$F,$28(a0)
0000AFFE 117C 0040 0016             		move.b	#$40,$16(a0)
0000B004 08E8 0004 0001             		bset	#4,1(a0)
0000B00A                            
0000B00A                            Obj2F_Action:				; XREF: Obj2F_Index
0000B00A 6100 0000                  		bsr.w	Obj2F_Types
0000B00E 4A28 0025                  		tst.b	$25(a0)
0000B012 6700                       		beq.s	Obj2F_Solid
0000B014 7200                       		moveq	#0,d1
0000B016 1228 0019                  		move.b	$19(a0),d1
0000B01A 0641 000B                  		addi.w	#$B,d1
0000B01E 6100 C6A6                  		bsr.w	ExitPlatform
0000B022 0829 0003 0022             		btst	#3,$22(a1)
0000B028 6600 0000                  		bne.w	Obj2F_Slope
0000B02C 4228 0025                  		clr.b	$25(a0)
0000B030 6000                       		bra.s	Obj2F_Display
0000B032                            ; ===========================================================================
0000B032                            
0000B032                            Obj2F_Slope:				; XREF: Obj2F_Action
0000B032 7200                       		moveq	#0,d1
0000B034 1228 0019                  		move.b	$19(a0),d1
0000B038 0641 000B                  		addi.w	#$B,d1
0000B03C 2468 0030                  		movea.l	$30(a0),a2
0000B040 3428 0008                  		move.w	8(a0),d2
0000B044 6100 D5DE                  		bsr.w	SlopeObject2
0000B048 6000                       		bra.s	Obj2F_Display
0000B04A                            ; ===========================================================================
0000B04A                            
0000B04A                            Obj2F_Solid:				; XREF: Obj2F_Action
0000B04A 7200                       		moveq	#0,d1
0000B04C 1228 0019                  		move.b	$19(a0),d1
0000B050 0641 000B                  		addi.w	#$B,d1
0000B054 343C 0020                  		move.w	#$20,d2
0000B058 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000B05E 6600                       		bne.s	loc_AF8E
0000B060 343C 0030                  		move.w	#$30,d2
0000B064                            
0000B064                            loc_AF8E:
0000B064 2468 0030                  		movea.l	$30(a0),a2
0000B068 6100 0000                  		bsr.w	SolidObject2F
0000B06C                            
0000B06C                            Obj2F_Display:				; XREF: Obj2F_Action
0000B06C 6100 0000                  		bsr.w	DisplaySprite
0000B070 6000 0000                  		bra.w	Obj2F_ChkDel
0000B074                            
0000B074                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B074                            
0000B074                            
0000B074                            Obj2F_Types:				; XREF: Obj2F_Action
0000B074 7000                       		moveq	#0,d0
0000B076 1028 0028                  		move.b	$28(a0),d0
0000B07A 0240 0007                  		andi.w	#7,d0
0000B07E D040                       		add.w	d0,d0
0000B080 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000B084 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000B088                            ; End of function Obj2F_Types
0000B088                            
0000B088                            ; ===========================================================================
0000B088 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000B08A 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000B08C 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000B08E 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000B090 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000B092 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000B094                            ; ===========================================================================
0000B094                            
0000B094                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000B094 4E75                       		rts			; type 00 platform doesn't move
0000B096                            ; ===========================================================================
0000B096                            
0000B096                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000B096 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000B09A 323C 0020                  		move.w	#$20,d1
0000B09E 6000                       		bra.s	Obj2F_Move
0000B0A0                            ; ===========================================================================
0000B0A0                            
0000B0A0                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000B0A0 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000B0A4 323C 0030                  		move.w	#$30,d1
0000B0A8 6000                       		bra.s	Obj2F_Move
0000B0AA                            ; ===========================================================================
0000B0AA                            
0000B0AA                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000B0AA 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000B0AE 323C 0040                  		move.w	#$40,d1
0000B0B2 6000                       		bra.s	Obj2F_Move
0000B0B4                            ; ===========================================================================
0000B0B4                            
0000B0B4                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000B0B4 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000B0B8 323C 0060                  		move.w	#$60,d1
0000B0BC                            
0000B0BC                            Obj2F_Move:
0000B0BC 0828 0003 0028             		btst	#3,$28(a0)
0000B0C2 6700                       		beq.s	loc_AFF2
0000B0C4 4440                       		neg.w	d0
0000B0C6 D041                       		add.w	d1,d0
0000B0C8                            
0000B0C8                            loc_AFF2:
0000B0C8 3228 002C                  		move.w	$2C(a0),d1
0000B0CC 9240                       		sub.w	d0,d1
0000B0CE 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000B0D2 4E75                       		rts	
0000B0D4                            ; ===========================================================================
0000B0D4                            
0000B0D4                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000B0D4 1028 0034                  		move.b	$34(a0),d0
0000B0D8 4A28 0025                  		tst.b	$25(a0)
0000B0DC 6600                       		bne.s	loc_B010
0000B0DE 5500                       		subq.b	#2,d0
0000B0E0 6400                       		bcc.s	loc_B01C
0000B0E2 7000                       		moveq	#0,d0
0000B0E4 6000                       		bra.s	loc_B01C
0000B0E6                            ; ===========================================================================
0000B0E6                            
0000B0E6                            loc_B010:
0000B0E6 5800                       		addq.b	#4,d0
0000B0E8 0C00 0040                  		cmpi.b	#$40,d0
0000B0EC 6500                       		bcs.s	loc_B01C
0000B0EE 103C 0040                  		move.b	#$40,d0
0000B0F2                            
0000B0F2                            loc_B01C:
0000B0F2 1140 0034                  		move.b	d0,$34(a0)
0000B0F6 4EB9 0000 29DA             		jsr	(CalcSine).l
0000B0FC E848                       		lsr.w	#4,d0
0000B0FE 3200                       		move.w	d0,d1
0000B100 D068 002C                  		add.w	$2C(a0),d0
0000B104 3140 000C                  		move.w	d0,$C(a0)
0000B108 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000B10E 6600                       		bne.s	loc_B07A
0000B110 4A28 0035                  		tst.b	$35(a0)
0000B114 6600                       		bne.s	loc_B07A
0000B116 117C 0001 0035             		move.b	#1,$35(a0)
0000B11C 6100 0000                  		bsr.w	SingleObjLoad2
0000B120 6600                       		bne.s	loc_B07A
0000B122 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B126 3368 0008 0008             		move.w	8(a0),8(a1)
0000B12C 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B132 5069 002C                  		addq.w	#8,$2C(a1)
0000B136 5769 002C                  		subq.w	#3,$2C(a1)
0000B13A 0469 0040 0008             		subi.w	#$40,8(a1)
0000B140 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B146 2348 0038                  		move.l	a0,$38(a1)
0000B14A 2448                       		movea.l	a0,a2
0000B14C 6100                       		bsr.s	sub_B09C
0000B14E                            
0000B14E                            loc_B07A:
0000B14E 7400                       		moveq	#0,d2
0000B150 45E8 0036                  		lea	$36(a0),a2
0000B154 141A                       		move.b	(a2)+,d2
0000B156 5302                       		subq.b	#1,d2
0000B158 6500                       		bcs.s	locret_B09A
0000B15A                            
0000B15A                            loc_B086:
0000B15A 7000                       		moveq	#0,d0
0000B15C 101A                       		move.b	(a2)+,d0
0000B15E ED48                       		lsl.w	#6,d0
0000B160 0640 D000                  		addi.w	#-$3000,d0
0000B164 3240                       		movea.w	d0,a1
0000B166 3341 003C                  		move.w	d1,$3C(a1)
0000B16A 51CA FFEE                  		dbf	d2,loc_B086
0000B16E                            
0000B16E                            locret_B09A:
0000B16E 4E75                       		rts	
0000B170                            
0000B170                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B170                            
0000B170                            
0000B170                            sub_B09C:
0000B170 45EA 0036                  		lea	$36(a2),a2
0000B174 7000                       		moveq	#0,d0
0000B176 1012                       		move.b	(a2),d0
0000B178 5212                       		addq.b	#1,(a2)
0000B17A 45F2 0001                  		lea	1(a2,d0.w),a2
0000B17E 3009                       		move.w	a1,d0
0000B180 0440 D000                  		subi.w	#-$3000,d0
0000B184 EC48                       		lsr.w	#6,d0
0000B186 0240 007F                  		andi.w	#$7F,d0
0000B18A 1480                       		move.b	d0,(a2)
0000B18C 4E75                       		rts	
0000B18E                            ; End of function sub_B09C
0000B18E                            
0000B18E                            ; ===========================================================================
0000B18E                            
0000B18E                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B18E 4A28 0035                  		tst.b	$35(a0)
0000B192 6700                       		beq.s	loc_B0C6
0000B194 4A28 0001                  		tst.b	1(a0)
0000B198 6A00                       		bpl.s	Obj2F_DelFlames
0000B19A                            
0000B19A                            loc_B0C6:
0000B19A 3028 002A                  		move.w	$2A(a0),d0
0000B19E 0240 FF80                  		andi.w	#$FF80,d0
0000B1A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000B1A6 0441 0080                  		subi.w	#$80,d1
0000B1AA 0241 FF80                  		andi.w	#$FF80,d1
0000B1AE 9041                       		sub.w	d1,d0
0000B1B0 0C40 0280                  		cmpi.w	#$280,d0
0000B1B4 6200 0000                  		bhi.w	DeleteObject
0000B1B8 4E75                       		rts	
0000B1BA                            ; ===========================================================================
0000B1BA                            
0000B1BA                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B1BA 7400                       		moveq	#0,d2
0000B1BC                            
0000B1BC                            loc_B0E8:
0000B1BC 45E8 0036                  		lea	$36(a0),a2
0000B1C0 1412                       		move.b	(a2),d2
0000B1C2 421A                       		clr.b	(a2)+
0000B1C4 5302                       		subq.b	#1,d2
0000B1C6 6500                       		bcs.s	locret_B116
0000B1C8                            
0000B1C8                            loc_B0F4:
0000B1C8 7000                       		moveq	#0,d0
0000B1CA 1012                       		move.b	(a2),d0
0000B1CC 421A                       		clr.b	(a2)+
0000B1CE ED48                       		lsl.w	#6,d0
0000B1D0 0640 D000                  		addi.w	#-$3000,d0
0000B1D4 3240                       		movea.w	d0,a1
0000B1D6 6100 0000                  		bsr.w	DeleteObject2
0000B1DA 51CA FFEC                  		dbf	d2,loc_B0F4
0000B1DE 117C 0000 0035             		move.b	#0,$35(a0)
0000B1E4 117C 0000 0034             		move.b	#0,$34(a0)
0000B1EA                            
0000B1EA                            locret_B116:
0000B1EA 4E75                       		rts	
0000B1EC                            ; ===========================================================================
0000B1EC                            ; ---------------------------------------------------------------------------
0000B1EC                            ; Collision data for large moving platforms (MZ)
0000B1EC                            ; ---------------------------------------------------------------------------
0000B1EC                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B238                            		even
0000B238                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B264                            		even
0000B264                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B2B0                            		even
0000B2B0                            ; ===========================================================================
0000B2B0                            ; ---------------------------------------------------------------------------
0000B2B0                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B2B0                            ; (appears when	you walk on sinking platforms)
0000B2B0                            ; ---------------------------------------------------------------------------
0000B2B0                            
0000B2B0                            Obj35:					; XREF: Obj_Index
0000B2B0 7000                       		moveq	#0,d0
0000B2B2 1028 0024                  		move.b	$24(a0),d0
0000B2B6 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B2BA 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B2BE                            ; ===========================================================================
0000B2BE 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B2C0 0000                       		dc.w loc_B238-Obj35_Index
0000B2C2 0000                       		dc.w Obj35_Move-Obj35_Index
0000B2C4                            ; ===========================================================================
0000B2C4                            
0000B2C4                            Obj35_Main:				; XREF: Obj35_Index
0000B2C4 5428 0024                  		addq.b	#2,$24(a0)
0000B2C8 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B2D0 317C 0345 0002             		move.w	#$345,2(a0)
0000B2D6 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B2DC 117C 0004 0001             		move.b	#4,1(a0)
0000B2E2 117C 0001 0018             		move.b	#1,$18(a0)
0000B2E8 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B2EE 117C 0008 0019             		move.b	#8,$19(a0)
0000B2F4 303C 00C8                  		move.w	#$C8,d0
0000B2F8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000B2FE 4A28 0028                  		tst.b	$28(a0)
0000B302 6700                       		beq.s	loc_B238
0000B304 5428 0024                  		addq.b	#2,$24(a0)
0000B308 6000 0000                  		bra.w	Obj35_Move
0000B30C                            ; ===========================================================================
0000B30C                            
0000B30C                            loc_B238:				; XREF: Obj35_Index
0000B30C 2268 0030                  		movea.l	$30(a0),a1
0000B310 3228 0008                  		move.w	8(a0),d1
0000B314 9268 002A                  		sub.w	$2A(a0),d1
0000B318 0641 000C                  		addi.w	#$C,d1
0000B31C 3001                       		move.w	d1,d0
0000B31E E248                       		lsr.w	#1,d0
0000B320 1031 0000                  		move.b	(a1,d0.w),d0
0000B324 4440                       		neg.w	d0
0000B326 D068 002C                  		add.w	$2C(a0),d0
0000B32A 3400                       		move.w	d0,d2
0000B32C D068 003C                  		add.w	$3C(a0),d0
0000B330 3140 000C                  		move.w	d0,$C(a0)
0000B334 0C41 0084                  		cmpi.w	#$84,d1
0000B338 6400                       		bcc.s	loc_B2B0
0000B33A 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B342 0C41 0080                  		cmpi.w	#$80,d1
0000B346 6400                       		bcc.s	loc_B2B0
0000B348 2028 0008                  		move.l	8(a0),d0
0000B34C 0680 0008 0000             		addi.l	#$80000,d0
0000B352 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B358 6600                       		bne.s	loc_B2B0
0000B35A 6100 0000                  		bsr.w	SingleObjLoad2
0000B35E 6600                       		bne.s	loc_B2B0
0000B360 12BC 0035                  		move.b	#$35,0(a1)
0000B364 3368 0008 0008             		move.w	8(a0),8(a1)
0000B36A 3342 002C                  		move.w	d2,$2C(a1)
0000B36E 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B374 137C 0001 0028             		move.b	#1,$28(a1)
0000B37A 2468 0038                  		movea.l	$38(a0),a2
0000B37E 6100 FDF0                  		bsr.w	sub_B09C
0000B382                            
0000B382                            loc_B2B0:
0000B382 6000                       		bra.s	Obj35_Animate
0000B384                            ; ===========================================================================
0000B384                            
0000B384                            Obj35_Move:				; XREF: Obj35_Index
0000B384 3028 002C                  		move.w	$2C(a0),d0
0000B388 D068 003C                  		add.w	$3C(a0),d0
0000B38C 3140 000C                  		move.w	d0,$C(a0)
0000B390                            
0000B390                            Obj35_Animate:				; XREF: loc_B238
0000B390 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B396 6100 F456                  		bsr.w	AnimateSprite
0000B39A 6000 0000                  		bra.w	DisplaySprite
0000B39E                            ; ===========================================================================
0000B39E                            Ani_obj35:
0000B39E                            	include "_anim\obj35.asm"
0000B39E                            ; ---------------------------------------------------------------------------
0000B39E                            ; Animation script - fireball that sits on the	floor (MZ)
0000B39E                            ; ---------------------------------------------------------------------------
0000B39E 0000                       		dc.w byte_B2CE-Ani_obj35
0000B3A0 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B3A6                            		even
0000B3A6                            		even
0000B3A6                            
0000B3A6                            ; ---------------------------------------------------------------------------
0000B3A6                            ; Sprite mappings - large moving platforms (MZ)
0000B3A6                            ; ---------------------------------------------------------------------------
0000B3A6                            Map_obj2F:
0000B3A6                            	include "_maps\obj2F.asm"
0000B3A6                            ; ---------------------------------------------------------------------------
0000B3A6                            ; Sprite mappings - large moving platforms (MZ)
0000B3A6                            ; ---------------------------------------------------------------------------
0000B3A6 0000                       		dc.w byte_B2DA-Map_obj2F
0000B3A8 0000                       		dc.w byte_B31C-Map_obj2F
0000B3AA 0000                       		dc.w byte_B34F-Map_obj2F
0000B3AC 0D                         byte_B2DA:	dc.b $D
0000B3AD D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B3B2 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B3B7 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B3BC D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B3C1 F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B3C6 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B3CB D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B3D0 D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B3D5 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B3DA F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B3DF 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B3E4 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B3E9 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B3EE 0A                         byte_B31C:	dc.b $A
0000B3EF D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B3F4 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B3F9 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B3FE C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B403 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B408 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B40D C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B412 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B417 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B41C E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B421 06                         byte_B34F:	dc.b 6
0000B422 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B427 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B42C 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B431 D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B436 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B43B 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B440                            		even
0000B440                            		even
0000B440                            
0000B440                            ; ---------------------------------------------------------------------------
0000B440                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B440                            ; ---------------------------------------------------------------------------
0000B440                            Map_obj14:
0000B440                            	include "_maps\obj14.asm"
0000B440                            ; ---------------------------------------------------------------------------
0000B440                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B440                            ; ---------------------------------------------------------------------------
0000B440 0000                       		dc.w byte_B37A-Map_obj14
0000B442 0000                       		dc.w byte_B380-Map_obj14
0000B444 0000                       		dc.w byte_B386-Map_obj14
0000B446 0000                       		dc.w byte_B38C-Map_obj14
0000B448 0000                       		dc.w byte_B392-Map_obj14
0000B44A 0000                       		dc.w byte_B398-Map_obj14
0000B44C 01                         byte_B37A:	dc.b 1
0000B44D E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B452 01                         byte_B380:	dc.b 1
0000B453 E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B458 01                         byte_B386:	dc.b 1
0000B459 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B45E 01                         byte_B38C:	dc.b 1
0000B45F F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B464 01                         byte_B392:	dc.b 1
0000B465 F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B46A 01                         byte_B398:	dc.b 1
0000B46B F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B470                            		even
0000B470                            		even
0000B470                            
0000B470                            ; ===========================================================================
0000B470                            ; ---------------------------------------------------------------------------
0000B470                            ; Object 30 - large green glassy blocks	(MZ)
0000B470                            ; ---------------------------------------------------------------------------
0000B470                            
0000B470                            Obj30:					; XREF: Obj_Index
0000B470 7000                       		moveq	#0,d0
0000B472 1028 0024                  		move.b	$24(a0),d0
0000B476 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B47A 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B47E 3028 0008                  		move.w	8(a0),d0
0000B482 0240 FF80                  		andi.w	#$FF80,d0
0000B486 3238 F700                  		move.w	($FFFFF700).w,d1
0000B48A 0441 0080                  		subi.w	#$80,d1
0000B48E 0241 FF80                  		andi.w	#$FF80,d1
0000B492 9041                       		sub.w	d1,d0
0000B494 0C40 0280                  		cmpi.w	#$280,d0
0000B498 6200 0000                  		bhi.w	Obj30_Delete
0000B49C 6000 0000                  		bra.w	DisplaySprite
0000B4A0                            ; ===========================================================================
0000B4A0                            
0000B4A0                            Obj30_Delete:
0000B4A0 6000 0000                  		bra.w	DeleteObject
0000B4A4                            ; ===========================================================================
0000B4A4 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B4A6 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B4A8 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B4AA 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B4AC 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B4AE                            
0000B4AE 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B4B1 0400 01                    		dc.b 4,	0, 1
0000B4B4 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B4B7 0800 01                    		dc.b 8,	0, 1
0000B4BA                            ; ===========================================================================
0000B4BA                            
0000B4BA                            Obj30_Main:				; XREF: Obj30_Index
0000B4BA 45F9 0000 B4AE             		lea	(Obj30_Vars1).l,a2
0000B4C0 7201                       		moveq	#1,d1
0000B4C2 117C 0048 0016             		move.b	#$48,$16(a0)
0000B4C8 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B4CE 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B4D0 45F9 0000 B4B4             		lea	(Obj30_Vars2).l,a2
0000B4D6 7201                       		moveq	#1,d1
0000B4D8 117C 0038 0016             		move.b	#$38,$16(a0)
0000B4DE                            
0000B4DE                            loc_B40C:
0000B4DE 2248                       		movea.l	a0,a1
0000B4E0 6000                       		bra.s	Obj30_Load	; load main object
0000B4E2                            ; ===========================================================================
0000B4E2                            
0000B4E2                            Obj30_Loop:
0000B4E2 6100 0000                  		bsr.w	SingleObjLoad2
0000B4E6 6600                       		bne.s	loc_B480
0000B4E8                            
0000B4E8                            Obj30_Load:				; XREF: Obj30_Main
0000B4E8 135A 0024                  		move.b	(a2)+,$24(a1)
0000B4EC 12BC 0030                  		move.b	#$30,0(a1)
0000B4F0 3368 0008 0008             		move.w	8(a0),8(a1)
0000B4F6 101A                       		move.b	(a2)+,d0
0000B4F8 4880                       		ext.w	d0
0000B4FA D068 000C                  		add.w	$C(a0),d0
0000B4FE 3340 000C                  		move.w	d0,$C(a1)
0000B502 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B50A 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B510 137C 0004 0001             		move.b	#4,1(a1)
0000B516 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B51C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B522 137C 0020 0019             		move.b	#$20,$19(a1)
0000B528 137C 0004 0018             		move.b	#4,$18(a1)
0000B52E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B532 2348 003C                  		move.l	a0,$3C(a1)
0000B536 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B53A                            
0000B53A 137C 0010 0019             		move.b	#$10,$19(a1)
0000B540 137C 0003 0018             		move.b	#3,$18(a1)
0000B546 5029 0028                  		addq.b	#8,$28(a1)
0000B54A 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B550                            
0000B550                            loc_B480:
0000B550 317C 0090 0032             		move.w	#$90,$32(a0)
0000B556 08E8 0004 0001             		bset	#4,1(a0)
0000B55C                            
0000B55C                            Obj30_Block012:				; XREF: Obj30_Index
0000B55C 6100 0000                  		bsr.w	Obj30_Types
0000B560 323C 002B                  		move.w	#$2B,d1
0000B564 343C 0048                  		move.w	#$48,d2
0000B568 363C 0049                  		move.w	#$49,d3
0000B56C 3828 0008                  		move.w	8(a0),d4
0000B570 6000 0000                  		bra.w	SolidObject
0000B574                            ; ===========================================================================
0000B574                            
0000B574                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B574 2268 003C                  		movea.l	$3C(a0),a1
0000B578 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B57E 6000 0000                  		bra.w	Obj30_Types
0000B582                            ; ===========================================================================
0000B582                            
0000B582                            Obj30_Block34:				; XREF: Obj30_Index
0000B582 6100 0000                  		bsr.w	Obj30_Types
0000B586 323C 002B                  		move.w	#$2B,d1
0000B58A 343C 0038                  		move.w	#$38,d2
0000B58E 363C 0039                  		move.w	#$39,d3
0000B592 3828 0008                  		move.w	8(a0),d4
0000B596 6000 0000                  		bra.w	SolidObject
0000B59A                            ; ===========================================================================
0000B59A                            
0000B59A                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B59A 2268 003C                  		movea.l	$3C(a0),a1
0000B59E 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B5A4 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B5AA 6000 0002                  		bra.w	*+4
0000B5AE                            
0000B5AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B5AE                            
0000B5AE                            
0000B5AE                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B5AE 7000                       		moveq	#0,d0
0000B5B0 1028 0028                  		move.b	$28(a0),d0
0000B5B4 0240 0007                  		andi.w	#7,d0
0000B5B8 D040                       		add.w	d0,d0
0000B5BA 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B5BE 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B5C2                            ; End of function Obj30_Types
0000B5C2                            
0000B5C2                            ; ===========================================================================
0000B5C2 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B5C4 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B5C6 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B5C8 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B5CA 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B5CC                            ; ===========================================================================
0000B5CC                            
0000B5CC                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B5CC 4E75                       		rts	
0000B5CE                            ; ===========================================================================
0000B5CE                            
0000B5CE                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B5CE 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B5D2 323C 0040                  		move.w	#$40,d1
0000B5D6 6000                       		bra.s	loc_B514
0000B5D8                            ; ===========================================================================
0000B5D8                            
0000B5D8                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B5D8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B5DC 323C 0040                  		move.w	#$40,d1
0000B5E0 4440                       		neg.w	d0
0000B5E2 D041                       		add.w	d1,d0
0000B5E4                            
0000B5E4                            loc_B514:				; XREF: Obj30_Type01
0000B5E4 0828 0003 0028             		btst	#3,$28(a0)
0000B5EA 6700                       		beq.s	loc_B526
0000B5EC 4440                       		neg.w	d0
0000B5EE D041                       		add.w	d1,d0
0000B5F0 E208                       		lsr.b	#1,d0
0000B5F2 0640 0020                  		addi.w	#$20,d0
0000B5F6                            
0000B5F6                            loc_B526:
0000B5F6 6000 0000                  		bra.w	loc_B5EE
0000B5FA                            ; ===========================================================================
0000B5FA                            
0000B5FA                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B5FA 0828 0003 0028             		btst	#3,$28(a0)
0000B600 6700                       		beq.s	loc_B53E
0000B602 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B606 0440 0010                  		subi.w	#$10,d0
0000B60A 6000 0000                  		bra.w	loc_B5EE
0000B60E                            ; ===========================================================================
0000B60E                            
0000B60E                            loc_B53E:
0000B60E 0828 0003 0022             		btst	#3,$22(a0)
0000B614 6600                       		bne.s	loc_B54E
0000B616 08A8 0000 0034             		bclr	#0,$34(a0)
0000B61C 6000                       		bra.s	loc_B582
0000B61E                            ; ===========================================================================
0000B61E                            
0000B61E                            loc_B54E:
0000B61E 4A28 0034                  		tst.b	$34(a0)
0000B622 6600                       		bne.s	loc_B582
0000B624 117C 0001 0034             		move.b	#1,$34(a0)
0000B62A 08E8 0000 0035             		bset	#0,$35(a0)
0000B630 6700                       		beq.s	loc_B582
0000B632 08E8 0007 0034             		bset	#7,$34(a0)
0000B638 317C 0010 0036             		move.w	#$10,$36(a0)
0000B63E 117C 000A 0038             		move.b	#$A,$38(a0)
0000B644 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000B64A 6600                       		bne.s	loc_B582
0000B64C 317C 0040 0036             		move.w	#$40,$36(a0)
0000B652                            
0000B652                            loc_B582:
0000B652 4A28 0034                  		tst.b	$34(a0)
0000B656 6A00                       		bpl.s	loc_B5AA
0000B658 4A28 0038                  		tst.b	$38(a0)
0000B65C 6700                       		beq.s	loc_B594
0000B65E 5328 0038                  		subq.b	#1,$38(a0)
0000B662 6600                       		bne.s	loc_B5AA
0000B664                            
0000B664                            loc_B594:
0000B664 4A68 0032                  		tst.w	$32(a0)
0000B668 6700                       		beq.s	loc_B5A4
0000B66A 5368 0032                  		subq.w	#1,$32(a0)
0000B66E 5368 0036                  		subq.w	#1,$36(a0)
0000B672 6600                       		bne.s	loc_B5AA
0000B674                            
0000B674                            loc_B5A4:
0000B674 08A8 0007 0034             		bclr	#7,$34(a0)
0000B67A                            
0000B67A                            loc_B5AA:
0000B67A 3028 0032                  		move.w	$32(a0),d0
0000B67E 6000                       		bra.s	loc_B5EE
0000B680                            ; ===========================================================================
0000B680                            
0000B680                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000B680 0828 0003 0028             		btst	#3,$28(a0)
0000B686 6700                       		beq.s	Obj30_ChkSwitch
0000B688 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B68C 0440 0010                  		subi.w	#$10,d0
0000B690 6000                       		bra.s	loc_B5EE
0000B692                            ; ===========================================================================
0000B692                            
0000B692                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000B692 4A28 0034                  		tst.b	$34(a0)
0000B696 6600                       		bne.s	loc_B5E0
0000B698 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000B69C 7000                       		moveq	#0,d0
0000B69E 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000B6A2 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000B6A4 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000B6A8 6700                       		beq.s	loc_B5EA	; if not, branch
0000B6AA 117C 0001 0034             		move.b	#1,$34(a0)
0000B6B0                            
0000B6B0                            loc_B5E0:
0000B6B0 4A68 0032                  		tst.w	$32(a0)
0000B6B4 6700                       		beq.s	loc_B5EA
0000B6B6 5568 0032                  		subq.w	#2,$32(a0)
0000B6BA                            
0000B6BA                            loc_B5EA:
0000B6BA 3028 0032                  		move.w	$32(a0),d0
0000B6BE                            
0000B6BE                            loc_B5EE:
0000B6BE 3228 0030                  		move.w	$30(a0),d1
0000B6C2 9240                       		sub.w	d0,d1
0000B6C4 3141 000C                  		move.w	d1,$C(a0)
0000B6C8 4E75                       		rts	
0000B6CA                            ; ===========================================================================
0000B6CA                            ; ---------------------------------------------------------------------------
0000B6CA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B6CA                            ; ---------------------------------------------------------------------------
0000B6CA                            Map_obj30:
0000B6CA                            	include "_maps\obj30.asm"
0000B6CA                            ; ---------------------------------------------------------------------------
0000B6CA                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B6CA                            ; ---------------------------------------------------------------------------
0000B6CA 0000                       		dc.w byte_B600-Map_obj30
0000B6CC 0000                       		dc.w byte_B63D-Map_obj30
0000B6CE 0000                       		dc.w byte_B648-Map_obj30
0000B6D0 0C                         byte_B600:	dc.b $C
0000B6D1 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000B6D6 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000B6DB C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000B6E0 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000B6E5 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000B6EA E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000B6EF 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000B6F4 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000B6F9 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000B6FE 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000B703 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000B708 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000B70D 02                         byte_B63D:	dc.b 2
0000B70E 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000B713 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000B718 0A                         byte_B648:	dc.b $A
0000B719 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000B71E C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000B723 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000B728 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000B72D F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000B732 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000B737 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000B73C 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000B741 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000B746 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000B74C 00                         		even
0000B74C 00                         		even
0000B74C                            
0000B74C                            ; ===========================================================================
0000B74C                            ; ---------------------------------------------------------------------------
0000B74C                            ; Object 31 - stomping metal blocks on chains (MZ)
0000B74C                            ; ---------------------------------------------------------------------------
0000B74C                            
0000B74C                            Obj31:					; XREF: Obj_Index
0000B74C 7000                       		moveq	#0,d0
0000B74E 1028 0024                  		move.b	$24(a0),d0
0000B752 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000B756 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000B75A                            ; ===========================================================================
0000B75A 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000B75C 0000                       		dc.w loc_B798-Obj31_Index
0000B75E 0000                       		dc.w loc_B7FE-Obj31_Index
0000B760 0000                       		dc.w Obj31_Display2-Obj31_Index
0000B762 0000                       		dc.w loc_B7E2-Obj31_Index
0000B764                            
0000B764 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000B766 0100                       		dc.b 1,	0
0000B768                            
0000B768 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000B76B 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000B76E 08CC 03                    		dc.b 8,	$CC, 3
0000B771 06F0 02                    		dc.b 6,	$F0, 2
0000B774                            
0000B774 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000B778 5000 7800                  		dc.w $5000, $7800
0000B77C 3800 5800                  		dc.w $3800, $5800
0000B780 B800                       		dc.w $B800
0000B782                            ; ===========================================================================
0000B782                            
0000B782                            Obj31_Main:				; XREF: Obj31_Index
0000B782 7000                       		moveq	#0,d0
0000B784 1028 0028                  		move.b	$28(a0),d0
0000B788 6A00                       		bpl.s	loc_B6CE
0000B78A 0240 007F                  		andi.w	#$7F,d0
0000B78E D040                       		add.w	d0,d0
0000B790 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000B794 115A 003A                  		move.b	(a2)+,$3A(a0)
0000B798 101A                       		move.b	(a2)+,d0
0000B79A 1140 0028                  		move.b	d0,$28(a0)
0000B79E                            
0000B79E                            loc_B6CE:
0000B79E 0200 000F                  		andi.b	#$F,d0
0000B7A2 D040                       		add.w	d0,d0
0000B7A4 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000B7A8 4A40                       		tst.w	d0
0000B7AA 6600                       		bne.s	loc_B6E0
0000B7AC 3142 0032                  		move.w	d2,$32(a0)
0000B7B0                            
0000B7B0                            loc_B6E0:
0000B7B0 45F9 0000 B768             		lea	(Obj31_Var).l,a2
0000B7B6 2248                       		movea.l	a0,a1
0000B7B8 7203                       		moveq	#3,d1
0000B7BA 6000                       		bra.s	Obj31_MakeStomper
0000B7BC                            ; ===========================================================================
0000B7BC                            
0000B7BC                            Obj31_Loop:
0000B7BC 6100 0000                  		bsr.w	SingleObjLoad2
0000B7C0 6600 0000                  		bne.w	Obj31_SetSize
0000B7C4                            
0000B7C4                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000B7C4 135A 0024                  		move.b	(a2)+,$24(a1)
0000B7C8 12BC 0031                  		move.b	#$31,0(a1)
0000B7CC 3368 0008 0008             		move.w	8(a0),8(a1)
0000B7D2 101A                       		move.b	(a2)+,d0
0000B7D4 4880                       		ext.w	d0
0000B7D6 D068 000C                  		add.w	$C(a0),d0
0000B7DA 3340 000C                  		move.w	d0,$C(a1)
0000B7DE 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000B7E6 337C 0300 0002             		move.w	#$300,2(a1)
0000B7EC 137C 0004 0001             		move.b	#4,1(a1)
0000B7F2 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B7F8 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B7FE 137C 0010 0019             		move.b	#$10,$19(a1)
0000B804 3342 0034                  		move.w	d2,$34(a1)
0000B808 137C 0004 0018             		move.b	#4,$18(a1)
0000B80E 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B812 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000B818 6600                       		bne.s	loc_B76A
0000B81A 5341                       		subq.w	#1,d1
0000B81C 1028 0028                  		move.b	$28(a0),d0
0000B820 0240 00F0                  		andi.w	#$F0,d0
0000B824 0C40 0020                  		cmpi.w	#$20,d0
0000B828 679A                       		beq.s	Obj31_MakeStomper
0000B82A 137C 0038 0019             		move.b	#$38,$19(a1)
0000B830 137C 0090 0020             		move.b	#$90,$20(a1)
0000B836 5241                       		addq.w	#1,d1
0000B838                            
0000B838                            loc_B76A:
0000B838 2348 003C                  		move.l	a0,$3C(a1)
0000B83C 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000B840                            
0000B840 137C 0003 0018             		move.b	#3,$18(a1)
0000B846                            
0000B846                            Obj31_SetSize:
0000B846 7000                       		moveq	#0,d0
0000B848 1028 0028                  		move.b	$28(a0),d0
0000B84C E648                       		lsr.w	#3,d0
0000B84E 0200 000E                  		andi.b	#$E,d0
0000B852 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000B856 115A 0019                  		move.b	(a2)+,$19(a0)
0000B85A 115A 001A                  		move.b	(a2)+,$1A(a0)
0000B85E 6000                       		bra.s	loc_B798
0000B860                            ; ===========================================================================
0000B860 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000B862 3009                       		dc.b $30, 9
0000B864 100A                       		dc.b $10, $A
0000B866                            ; ===========================================================================
0000B866                            
0000B866                            loc_B798:				; XREF: Obj31_Index
0000B866 6100 0000                  		bsr.w	Obj31_Types
0000B86A 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000B870 7200                       		moveq	#0,d1
0000B872 1228 0019                  		move.b	$19(a0),d1
0000B876 0641 000B                  		addi.w	#$B,d1
0000B87A 343C 000C                  		move.w	#$C,d2
0000B87E 363C 000D                  		move.w	#$D,d3
0000B882 3828 0008                  		move.w	8(a0),d4
0000B886 6100 0000                  		bsr.w	SolidObject
0000B88A 0828 0003 0022             		btst	#3,$22(a0)
0000B890 6700                       		beq.s	Obj31_Display
0000B892 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B898 6400                       		bcc.s	Obj31_Display
0000B89A 2448                       		movea.l	a0,a2
0000B89C 41F8 D000                  		lea	($FFFFD000).w,a0
0000B8A0 4EB9 0000 0000             		jsr	KillSonic
0000B8A6 204A                       		movea.l	a2,a0
0000B8A8                            
0000B8A8                            Obj31_Display:
0000B8A8 6100 0000                  		bsr.w	DisplaySprite
0000B8AC 6000 0000                  		bra.w	Obj31_ChkDel
0000B8B0                            ; ===========================================================================
0000B8B0                            
0000B8B0                            loc_B7E2:				; XREF: Obj31_Index
0000B8B0 117C 0080 0016             		move.b	#$80,$16(a0)
0000B8B6 08E8 0004 0001             		bset	#4,1(a0)
0000B8BC 2268 003C                  		movea.l	$3C(a0),a1
0000B8C0 1029 0032                  		move.b	$32(a1),d0
0000B8C4 EA08                       		lsr.b	#5,d0
0000B8C6 5600                       		addq.b	#3,d0
0000B8C8 1140 001A                  		move.b	d0,$1A(a0)
0000B8CC                            
0000B8CC                            loc_B7FE:				; XREF: Obj31_Index
0000B8CC 2268 003C                  		movea.l	$3C(a0),a1
0000B8D0 7000                       		moveq	#0,d0
0000B8D2 1029 0032                  		move.b	$32(a1),d0
0000B8D6 D068 0030                  		add.w	$30(a0),d0
0000B8DA 3140 000C                  		move.w	d0,$C(a0)
0000B8DE                            
0000B8DE                            Obj31_Display2:				; XREF: Obj31_Index
0000B8DE 6100 0000                  		bsr.w	DisplaySprite
0000B8E2                            
0000B8E2                            Obj31_ChkDel:				; XREF: Obj31_Display
0000B8E2 3028 0008                  		move.w	8(a0),d0
0000B8E6 0240 FF80                  		andi.w	#$FF80,d0
0000B8EA 3238 F700                  		move.w	($FFFFF700).w,d1
0000B8EE 0441 0080                  		subi.w	#$80,d1
0000B8F2 0241 FF80                  		andi.w	#$FF80,d1
0000B8F6 9041                       		sub.w	d1,d0
0000B8F8 0C40 0280                  		cmpi.w	#$280,d0
0000B8FC 6200 0000                  		bhi.w	DeleteObject
0000B900 4E75                       		rts	
0000B902                            ; ===========================================================================
0000B902                            
0000B902                            Obj31_Types:				; XREF: loc_B798
0000B902 1028 0028                  		move.b	$28(a0),d0
0000B906 0240 000F                  		andi.w	#$F,d0
0000B90A D040                       		add.w	d0,d0
0000B90C 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000B910 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000B914                            ; ===========================================================================
0000B914 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000B916 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B918 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B91A 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B91C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B91E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B920 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B922                            ; ===========================================================================
0000B922                            
0000B922                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000B922 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000B926 7000                       		moveq	#0,d0
0000B928 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000B92C 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000B930 6700                       		beq.s	loc_B8A8	; if not, branch
0000B932 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000B936 6A00                       		bpl.s	loc_B872
0000B938 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B93E 6700                       		beq.s	loc_B8A0
0000B940                            
0000B940                            loc_B872:
0000B940 4A68 0032                  		tst.w	$32(a0)
0000B944 6700                       		beq.s	loc_B8A0
0000B946 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B94A 0200 000F                  		andi.b	#$F,d0
0000B94E 6600                       		bne.s	loc_B892
0000B950 4A28 0001                  		tst.b	1(a0)
0000B954 6A00                       		bpl.s	loc_B892
0000B956 303C 00C7                  		move.w	#$C7,d0
0000B95A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B960                            
0000B960                            loc_B892:
0000B960 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B966 6400                       		bcc.s	Obj31_Restart
0000B968 317C 0000 0032             		move.w	#0,$32(a0)
0000B96E                            
0000B96E                            loc_B8A0:
0000B96E 317C 0000 0012             		move.w	#0,$12(a0)
0000B974 6000                       		bra.s	Obj31_Restart
0000B976                            ; ===========================================================================
0000B976                            
0000B976                            loc_B8A8:				; XREF: Obj31_Type00
0000B976 3228 0034                  		move.w	$34(a0),d1
0000B97A B268 0032                  		cmp.w	$32(a0),d1
0000B97E 6700                       		beq.s	Obj31_Restart
0000B980 3028 0012                  		move.w	$12(a0),d0
0000B984 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B98A D168 0032                  		add.w	d0,$32(a0)
0000B98E B268 0032                  		cmp.w	$32(a0),d1
0000B992 6200                       		bhi.s	Obj31_Restart
0000B994 3141 0032                  		move.w	d1,$32(a0)
0000B998 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B99E 4A28 0001                  		tst.b	1(a0)
0000B9A2 6A00                       		bpl.s	Obj31_Restart
0000B9A4 303C 00BD                  		move.w	#$BD,d0
0000B9A8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000B9AE                            
0000B9AE                            Obj31_Restart:
0000B9AE 7000                       		moveq	#0,d0
0000B9B0 1028 0032                  		move.b	$32(a0),d0
0000B9B4 D068 0030                  		add.w	$30(a0),d0
0000B9B8 3140 000C                  		move.w	d0,$C(a0)
0000B9BC 4E75                       		rts	
0000B9BE                            ; ===========================================================================
0000B9BE                            
0000B9BE                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000B9BE 4A68 0036                  		tst.w	$36(a0)
0000B9C2 6700                       		beq.s	loc_B938
0000B9C4 4A68 0038                  		tst.w	$38(a0)
0000B9C8 6700                       		beq.s	loc_B902
0000B9CA 5368 0038                  		subq.w	#1,$38(a0)
0000B9CE 6000                       		bra.s	loc_B97C
0000B9D0                            ; ===========================================================================
0000B9D0                            
0000B9D0                            loc_B902:
0000B9D0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B9D4 0200 000F                  		andi.b	#$F,d0
0000B9D8 6600                       		bne.s	loc_B91C
0000B9DA 4A28 0001                  		tst.b	1(a0)
0000B9DE 6A00                       		bpl.s	loc_B91C
0000B9E0 303C 00C7                  		move.w	#$C7,d0
0000B9E4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B9EA                            
0000B9EA                            loc_B91C:
0000B9EA 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B9F0 6400                       		bcc.s	loc_B97C
0000B9F2 317C 0000 0032             		move.w	#0,$32(a0)
0000B9F8 317C 0000 0012             		move.w	#0,$12(a0)
0000B9FE 317C 0000 0036             		move.w	#0,$36(a0)
0000BA04 6000                       		bra.s	loc_B97C
0000BA06                            ; ===========================================================================
0000BA06                            
0000BA06                            loc_B938:				; XREF: Obj31_Type01
0000BA06 3228 0034                  		move.w	$34(a0),d1
0000BA0A B268 0032                  		cmp.w	$32(a0),d1
0000BA0E 6700                       		beq.s	loc_B97C
0000BA10 3028 0012                  		move.w	$12(a0),d0
0000BA14 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000BA1A D168 0032                  		add.w	d0,$32(a0)
0000BA1E B268 0032                  		cmp.w	$32(a0),d1
0000BA22 6200                       		bhi.s	loc_B97C
0000BA24 3141 0032                  		move.w	d1,$32(a0)
0000BA28 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000BA2E 317C 0001 0036             		move.w	#1,$36(a0)
0000BA34 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BA3A 4A28 0001                  		tst.b	1(a0)
0000BA3E 6A00                       		bpl.s	loc_B97C
0000BA40 303C 00BD                  		move.w	#$BD,d0
0000BA44 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000BA4A                            
0000BA4A                            loc_B97C:
0000BA4A 6000 FF62                  		bra.w	Obj31_Restart
0000BA4E                            ; ===========================================================================
0000BA4E                            
0000BA4E                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000BA4E 3038 D008                  		move.w	($FFFFD008).w,d0
0000BA52 9068 0008                  		sub.w	8(a0),d0
0000BA56 6400                       		bcc.s	loc_B98C
0000BA58 4440                       		neg.w	d0
0000BA5A                            
0000BA5A                            loc_B98C:
0000BA5A 0C40 0090                  		cmpi.w	#$90,d0
0000BA5E 6400                       		bcc.s	loc_B996
0000BA60 5228 0028                  		addq.b	#1,$28(a0)
0000BA64                            
0000BA64                            loc_B996:
0000BA64 6000 FF48                  		bra.w	Obj31_Restart
0000BA68                            ; ===========================================================================
0000BA68                            ; ---------------------------------------------------------------------------
0000BA68                            ; Object 45 - spiked metal block from beta version (MZ)
0000BA68                            ; ---------------------------------------------------------------------------
0000BA68                            
0000BA68                            Obj45:					; XREF: Obj_Index
0000BA68 7000                       		moveq	#0,d0
0000BA6A 1028 0024                  		move.b	$24(a0),d0
0000BA6E 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000BA72 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000BA76                            ; ===========================================================================
0000BA76 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000BA78 0000                       		dc.w Obj45_Solid-Obj45_Index
0000BA7A 0000                       		dc.w loc_BA8E-Obj45_Index
0000BA7C 0000                       		dc.w Obj45_Display-Obj45_Index
0000BA7E 0000                       		dc.w loc_BA7A-Obj45_Index
0000BA80                            
0000BA80 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000BA83 04E4 01                    		dc.b	4, $E4,	  1
0000BA86 0834 03                    		dc.b	8, $34,	  3
0000BA89 0628 02                    		dc.b	6, $28,	  2
0000BA8C                            
0000BA8C 3800                       word_B9BE:	dc.w $3800
0000BA8E A000                       		dc.w -$6000
0000BA90 5000                       		dc.w $5000
0000BA92                            ; ===========================================================================
0000BA92                            
0000BA92                            Obj45_Main:				; XREF: Obj45_Index
0000BA92 7000                       		moveq	#0,d0
0000BA94 1028 0028                  		move.b	$28(a0),d0
0000BA98 D040                       		add.w	d0,d0
0000BA9A 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000BA9E 45F9 0000 BA80             		lea	(Obj45_Var).l,a2
0000BAA4 2248                       		movea.l	a0,a1
0000BAA6 7203                       		moveq	#3,d1
0000BAA8 6000                       		bra.s	Obj45_Load
0000BAAA                            ; ===========================================================================
0000BAAA                            
0000BAAA                            Obj45_Loop:
0000BAAA 6100 0000                  		bsr.w	SingleObjLoad2
0000BAAE 6600                       		bne.s	loc_BA52
0000BAB0                            
0000BAB0                            Obj45_Load:				; XREF: Obj45_Main
0000BAB0 135A 0024                  		move.b	(a2)+,$24(a1)
0000BAB4 12BC 0045                  		move.b	#$45,0(a1)
0000BAB8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000BABE 101A                       		move.b	(a2)+,d0
0000BAC0 4880                       		ext.w	d0
0000BAC2 D068 0008                  		add.w	8(a0),d0
0000BAC6 3340 0008                  		move.w	d0,8(a1)
0000BACA 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000BAD2 337C 0300 0002             		move.w	#$300,2(a1)
0000BAD8 137C 0004 0001             		move.b	#4,1(a1)
0000BADE 3369 0008 0030             		move.w	8(a1),$30(a1)
0000BAE4 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000BAEA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000BAF0 137C 0020 0019             		move.b	#$20,$19(a1)
0000BAF6 3342 0034                  		move.w	d2,$34(a1)
0000BAFA 137C 0004 0018             		move.b	#4,$18(a1)
0000BB00 0C12 0001                  		cmpi.b	#1,(a2)
0000BB04 6600                       		bne.s	loc_BA40
0000BB06 137C 0091 0020             		move.b	#$91,$20(a1)
0000BB0C                            
0000BB0C                            loc_BA40:
0000BB0C 135A 001A                  		move.b	(a2)+,$1A(a1)
0000BB10 2348 003C                  		move.l	a0,$3C(a1)
0000BB14 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BB18                            
0000BB18 137C 0003 0018             		move.b	#3,$18(a1)
0000BB1E                            
0000BB1E                            loc_BA52:
0000BB1E 117C 0010 0019             		move.b	#$10,$19(a0)
0000BB24                            
0000BB24                            Obj45_Solid:				; XREF: Obj45_Index
0000BB24 3F28 0008                  		move.w	8(a0),-(sp)
0000BB28 6100 0000                  		bsr.w	Obj45_Move
0000BB2C 323C 0017                  		move.w	#$17,d1
0000BB30 343C 0020                  		move.w	#$20,d2
0000BB34 363C 0020                  		move.w	#$20,d3
0000BB38 381F                       		move.w	(sp)+,d4
0000BB3A 6100 0000                  		bsr.w	SolidObject
0000BB3E 6100 0000                  		bsr.w	DisplaySprite
0000BB42 6000 0000                  		bra.w	Obj45_ChkDel
0000BB46                            ; ===========================================================================
0000BB46                            
0000BB46                            loc_BA7A:				; XREF: Obj45_Index
0000BB46 2268 003C                  		movea.l	$3C(a0),a1
0000BB4A 1029 0032                  		move.b	$32(a1),d0
0000BB4E 0600 0010                  		addi.b	#$10,d0
0000BB52 EA08                       		lsr.b	#5,d0
0000BB54 5600                       		addq.b	#3,d0
0000BB56 1140 001A                  		move.b	d0,$1A(a0)
0000BB5A                            
0000BB5A                            loc_BA8E:				; XREF: Obj45_Index
0000BB5A 2268 003C                  		movea.l	$3C(a0),a1
0000BB5E 7000                       		moveq	#0,d0
0000BB60 1029 0032                  		move.b	$32(a1),d0
0000BB64 4440                       		neg.w	d0
0000BB66 D068 0030                  		add.w	$30(a0),d0
0000BB6A 3140 0008                  		move.w	d0,8(a0)
0000BB6E                            
0000BB6E                            Obj45_Display:				; XREF: Obj45_Index
0000BB6E 6100 0000                  		bsr.w	DisplaySprite
0000BB72                            
0000BB72                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BB72 3028 003A                  		move.w	$3A(a0),d0
0000BB76 0240 FF80                  		andi.w	#$FF80,d0
0000BB7A 3238 F700                  		move.w	($FFFFF700).w,d1
0000BB7E 0441 0080                  		subi.w	#$80,d1
0000BB82 0241 FF80                  		andi.w	#$FF80,d1
0000BB86 9041                       		sub.w	d1,d0
0000BB88 0C40 0280                  		cmpi.w	#$280,d0
0000BB8C 6200 0000                  		bhi.w	DeleteObject
0000BB90 4E75                       		rts	
0000BB92                            
0000BB92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BB92                            
0000BB92                            
0000BB92                            Obj45_Move:				; XREF: Obj45_Solid
0000BB92 7000                       		moveq	#0,d0
0000BB94 1028 0028                  		move.b	$28(a0),d0
0000BB98 D040                       		add.w	d0,d0
0000BB9A 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BB9E 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BBA2                            ; End of function Obj45_Move
0000BBA2                            
0000BBA2                            ; ===========================================================================
0000BBA2 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BBA4 0000                       		dc.w loc_BADA-off_BAD6
0000BBA6                            ; ===========================================================================
0000BBA6                            
0000BBA6                            loc_BADA:				; XREF: off_BAD6
0000BBA6 4A68 0036                  		tst.w	$36(a0)
0000BBAA 6700                       		beq.s	loc_BB08
0000BBAC 4A68 0038                  		tst.w	$38(a0)
0000BBB0 6700                       		beq.s	loc_BAEC
0000BBB2 5368 0038                  		subq.w	#1,$38(a0)
0000BBB6 6000                       		bra.s	loc_BB3C
0000BBB8                            ; ===========================================================================
0000BBB8                            
0000BBB8                            loc_BAEC:
0000BBB8 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BBBE 6400                       		bcc.s	loc_BB3C
0000BBC0 317C 0000 0032             		move.w	#0,$32(a0)
0000BBC6 317C 0000 0010             		move.w	#0,$10(a0)
0000BBCC 317C 0000 0036             		move.w	#0,$36(a0)
0000BBD2 6000                       		bra.s	loc_BB3C
0000BBD4                            ; ===========================================================================
0000BBD4                            
0000BBD4                            loc_BB08:				; XREF: loc_BADA
0000BBD4 3228 0034                  		move.w	$34(a0),d1
0000BBD8 B268 0032                  		cmp.w	$32(a0),d1
0000BBDC 6700                       		beq.s	loc_BB3C
0000BBDE 3028 0010                  		move.w	$10(a0),d0
0000BBE2 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BBE8 D168 0032                  		add.w	d0,$32(a0)
0000BBEC B268 0032                  		cmp.w	$32(a0),d1
0000BBF0 6200                       		bhi.s	loc_BB3C
0000BBF2 3141 0032                  		move.w	d1,$32(a0)
0000BBF6 317C 0000 0010             		move.w	#0,$10(a0)
0000BBFC 317C 0001 0036             		move.w	#1,$36(a0)
0000BC02 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BC08                            
0000BC08                            loc_BB3C:
0000BC08 7000                       		moveq	#0,d0
0000BC0A 1028 0032                  		move.b	$32(a0),d0
0000BC0E 4440                       		neg.w	d0
0000BC10 D068 0030                  		add.w	$30(a0),d0
0000BC14 3140 0008                  		move.w	d0,8(a0)
0000BC18 4E75                       		rts	
0000BC1A                            ; ===========================================================================
0000BC1A                            ; ---------------------------------------------------------------------------
0000BC1A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BC1A                            ; ---------------------------------------------------------------------------
0000BC1A                            Map_obj31:
0000BC1A                            	include "_maps\obj31.asm"
0000BC1A                            ; ---------------------------------------------------------------------------
0000BC1A                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BC1A                            ; ---------------------------------------------------------------------------
0000BC1A 0000                       		dc.w byte_BB64-Map_obj31
0000BC1C 0000                       		dc.w byte_BB7E-Map_obj31
0000BC1E 0000                       		dc.w byte_BB98-Map_obj31
0000BC20 0000                       		dc.w byte_BB9E-Map_obj31
0000BC22 0000                       		dc.w byte_BBA9-Map_obj31
0000BC24 0000                       		dc.w byte_BBBE-Map_obj31
0000BC26 0000                       		dc.w byte_BBDD-Map_obj31
0000BC28 0000                       		dc.w byte_BC06-Map_obj31
0000BC2A 0000                       		dc.w byte_BC06-Map_obj31
0000BC2C 0000                       		dc.w byte_BC39-Map_obj31
0000BC2E 0000                       		dc.w byte_BC53-Map_obj31
0000BC30 05                         byte_BB64:	dc.b 5
0000BC31 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000BC36 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000BC3B EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BC40 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000BC45 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000BC4A 05                         byte_BB7E:	dc.b 5
0000BC4B F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000BC50 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000BC55 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000BC5A F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000BC5F F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000BC64 01                         byte_BB98:	dc.b 1
0000BC65 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000BC6A 02                         byte_BB9E:	dc.b 2
0000BC6B 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC70 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC75 04                         byte_BBA9:	dc.b 4
0000BC76 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC7B F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BC80 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BC85 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BC8A 06                         byte_BBBE:	dc.b 6
0000BC8B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BC90 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BC95 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BC9A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BC9F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BCA4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BCA9 08                         byte_BBDD:	dc.b 8
0000BCAA A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BCAF B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BCB4 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BCB9 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BCBE E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BCC3 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BCC8 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BCCD 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BCD2 0A                         byte_BC06:	dc.b $A
0000BCD3 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000BCD8 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000BCDD A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BCE2 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BCE7 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BCEC D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BCF1 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BCF6 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BCFB 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BD00 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BD05 05                         byte_BC39:	dc.b 5
0000BD06 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000BD0B F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000BD10 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000BD15 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000BD1A EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BD1F 01                         byte_BC53:	dc.b 1
0000BD20 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000BD26 00                         		even
0000BD26 00                         		even
0000BD26                            
0000BD26                            ; ---------------------------------------------------------------------------
0000BD26                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BD26                            ; ---------------------------------------------------------------------------
0000BD26                            Map_obj45:
0000BD26                            	include "_maps\obj45.asm"
0000BD26                            ; ---------------------------------------------------------------------------
0000BD26                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BD26                            ; ---------------------------------------------------------------------------
0000BD26 0000                       		dc.w byte_BC6C-Map_obj45
0000BD28 0000                       		dc.w byte_BC7C-Map_obj45
0000BD2A 0000                       		dc.w byte_BC8C-Map_obj45
0000BD2C 0000                       		dc.w byte_BC92-Map_obj45
0000BD2E 0000                       		dc.w byte_BC9D-Map_obj45
0000BD30 0000                       		dc.w byte_BCB2-Map_obj45
0000BD32 0000                       		dc.w byte_BCD1-Map_obj45
0000BD34 0000                       		dc.w byte_BCFA-Map_obj45
0000BD36 0000                       		dc.w byte_BCFA-Map_obj45
0000BD38 03                         byte_BC6C:	dc.b 3
0000BD39 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000BD3E 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000BD43 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000BD48 03                         byte_BC7C:	dc.b 3
0000BD49 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000BD4E FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000BD53 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000BD58 01                         byte_BC8C:	dc.b 1
0000BD59 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000BD5E 02                         byte_BC92:	dc.b 2
0000BD5F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD64 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD69 04                         byte_BC9D:	dc.b 4
0000BD6A F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD6F F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD74 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD79 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD7E 06                         byte_BCB2:	dc.b 6
0000BD7F F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BD84 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BD89 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BD8E F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BD93 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BD98 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BD9D 08                         byte_BCD1:	dc.b 8
0000BD9E F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BDA3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BDA8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BDAD F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BDB2 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BDB7 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BDBC F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BDC1 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BDC6 08                         byte_BCFA:	dc.b 8
0000BDC7 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BDCC F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BDD1 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BDD6 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BDDB F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BDE0 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BDE5 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BDEA F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BDEF F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000BDF4 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000BDFA 00                         		even
0000BDFA 00                         		even
0000BDFA                            
0000BDFA                            ; ===========================================================================
0000BDFA                            ; ---------------------------------------------------------------------------
0000BDFA                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000BDFA                            ; ---------------------------------------------------------------------------
0000BDFA                            
0000BDFA                            Obj32:					; XREF: Obj_Index
0000BDFA 7000                       		moveq	#0,d0
0000BDFC 1028 0024                  		move.b	$24(a0),d0
0000BE00 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000BE04 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000BE08                            ; ===========================================================================
0000BE08 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000BE0A 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000BE0C                            ; ===========================================================================
0000BE0C                            
0000BE0C                            Obj32_Main:				; XREF: Obj32_Index
0000BE0C 5428 0024                  		addq.b	#2,$24(a0)
0000BE10 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000BE18 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000BE1E 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000BE24 6700                       		beq.s	loc_BD60
0000BE26 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000BE2C                            
0000BE2C                            loc_BD60:
0000BE2C 117C 0004 0001             		move.b	#4,1(a0)
0000BE32 117C 0010 0019             		move.b	#$10,$19(a0)
0000BE38 117C 0004 0018             		move.b	#4,$18(a0)
0000BE3E 5668 000C                  		addq.w	#3,$C(a0)
0000BE42                            
0000BE42                            Obj32_Pressed:				; XREF: Obj32_Index
0000BE42 4A28 0001                  		tst.b	1(a0)
0000BE46 6A00                       		bpl.s	Obj32_Display
0000BE48 323C 001B                  		move.w	#$1B,d1
0000BE4C 343C 0005                  		move.w	#5,d2
0000BE50 363C 0005                  		move.w	#5,d3
0000BE54 3828 0008                  		move.w	8(a0),d4
0000BE58 6100 0000                  		bsr.w	SolidObject
0000BE5C 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000BE62 1028 0028                  		move.b	$28(a0),d0
0000BE66 0240 000F                  		andi.w	#$F,d0
0000BE6A 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000BE6E 47F3 0000                  		lea	(a3,d0.w),a3
0000BE72 7600                       		moveq	#0,d3
0000BE74 0828 0006 0028             		btst	#6,$28(a0)
0000BE7A 6700                       		beq.s	loc_BDB2
0000BE7C 7607                       		moveq	#7,d3
0000BE7E                            
0000BE7E                            loc_BDB2:
0000BE7E 4A28 0028                  		tst.b	$28(a0)
0000BE82 6A00                       		bpl.s	loc_BDBE
0000BE84 6100 0000                  		bsr.w	Obj32_MZBlock
0000BE88 6600                       		bne.s	loc_BDC8
0000BE8A                            
0000BE8A                            loc_BDBE:
0000BE8A 4A28 0025                  		tst.b	$25(a0)
0000BE8E 6600                       		bne.s	loc_BDC8
0000BE90 0793                       		bclr	d3,(a3)
0000BE92 6000                       		bra.s	loc_BDDE
0000BE94                            ; ===========================================================================
0000BE94                            
0000BE94                            loc_BDC8:
0000BE94 4A13                       		tst.b	(a3)
0000BE96 6600                       		bne.s	loc_BDD6
0000BE98 303C 00CD                  		move.w	#$CD,d0
0000BE9C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play switch sound
0000BEA2                            
0000BEA2                            loc_BDD6:
0000BEA2 07D3                       		bset	d3,(a3)
0000BEA4 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000BEAA                            
0000BEAA                            loc_BDDE:
0000BEAA 0828 0005 0028             		btst	#5,$28(a0)
0000BEB0 6700                       		beq.s	Obj32_Display
0000BEB2 5328 001E                  		subq.b	#1,$1E(a0)
0000BEB6 6A00                       		bpl.s	Obj32_Display
0000BEB8 117C 0007 001E             		move.b	#7,$1E(a0)
0000BEBE 0868 0001 001A             		bchg	#1,$1A(a0)
0000BEC4                            
0000BEC4                            Obj32_Display:
0000BEC4 6100 0000                  		bsr.w	DisplaySprite
0000BEC8 3028 0008                  		move.w	8(a0),d0
0000BECC 0240 FF80                  		andi.w	#$FF80,d0
0000BED0 3238 F700                  		move.w	($FFFFF700).w,d1
0000BED4 0441 0080                  		subi.w	#$80,d1
0000BED8 0241 FF80                  		andi.w	#$FF80,d1
0000BEDC 9041                       		sub.w	d1,d0
0000BEDE 0C40 0280                  		cmpi.w	#$280,d0
0000BEE2 6200 0000                  		bhi.w	Obj32_Delete
0000BEE6 4E75                       		rts	
0000BEE8                            ; ===========================================================================
0000BEE8                            
0000BEE8                            Obj32_Delete:
0000BEE8 6100 0000                  		bsr.w	DeleteObject
0000BEEC 4E75                       		rts	
0000BEEE                            
0000BEEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BEEE                            
0000BEEE                            
0000BEEE                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000BEEE 3F03                       		move.w	d3,-(sp)
0000BEF0 3428 0008                  		move.w	8(a0),d2
0000BEF4 3628 000C                  		move.w	$C(a0),d3
0000BEF8 0442 0010                  		subi.w	#$10,d2
0000BEFC 5143                       		subq.w	#8,d3
0000BEFE 383C 0020                  		move.w	#$20,d4
0000BF02 3A3C 0010                  		move.w	#$10,d5
0000BF06 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000BF0A 3C3C 005F                  		move.w	#$5F,d6
0000BF0E                            
0000BF0E                            Obj32_MZLoop:
0000BF0E 4A29 0001                  		tst.b	1(a1)
0000BF12 6A00                       		bpl.s	loc_BE4E
0000BF14 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000BF18 6700                       		beq.s	loc_BE5E	; if yes, branch
0000BF1A                            
0000BF1A                            loc_BE4E:
0000BF1A 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000BF1E 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000BF22                            
0000BF22 361F                       		move.w	(sp)+,d3
0000BF24 7000                       		moveq	#0,d0
0000BF26                            
0000BF26                            locret_BE5A:
0000BF26 4E75                       		rts	
0000BF28                            ; ===========================================================================
0000BF28 1010                       Obj32_MZData:	dc.b $10, $10
0000BF2A                            ; ===========================================================================
0000BF2A                            
0000BF2A                            loc_BE5E:				; XREF: Obj32_MZBlock
0000BF2A 7001                       		moveq	#1,d0
0000BF2C 0240 003F                  		andi.w	#$3F,d0
0000BF30 D040                       		add.w	d0,d0
0000BF32 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000BF36 121A                       		move.b	(a2)+,d1
0000BF38 4881                       		ext.w	d1
0000BF3A 3029 0008                  		move.w	8(a1),d0
0000BF3E 9041                       		sub.w	d1,d0
0000BF40 9042                       		sub.w	d2,d0
0000BF42 6400                       		bcc.s	loc_BE80
0000BF44 D241                       		add.w	d1,d1
0000BF46 D041                       		add.w	d1,d0
0000BF48 6500                       		bcs.s	loc_BE84
0000BF4A 60CE                       		bra.s	loc_BE4E
0000BF4C                            ; ===========================================================================
0000BF4C                            
0000BF4C                            loc_BE80:
0000BF4C B044                       		cmp.w	d4,d0
0000BF4E 62CA                       		bhi.s	loc_BE4E
0000BF50                            
0000BF50                            loc_BE84:
0000BF50 121A                       		move.b	(a2)+,d1
0000BF52 4881                       		ext.w	d1
0000BF54 3029 000C                  		move.w	$C(a1),d0
0000BF58 9041                       		sub.w	d1,d0
0000BF5A 9043                       		sub.w	d3,d0
0000BF5C 6400                       		bcc.s	loc_BE9A
0000BF5E D241                       		add.w	d1,d1
0000BF60 D041                       		add.w	d1,d0
0000BF62 6500                       		bcs.s	loc_BE9E
0000BF64 60B4                       		bra.s	loc_BE4E
0000BF66                            ; ===========================================================================
0000BF66                            
0000BF66                            loc_BE9A:
0000BF66 B045                       		cmp.w	d5,d0
0000BF68 62B0                       		bhi.s	loc_BE4E
0000BF6A                            
0000BF6A                            loc_BE9E:
0000BF6A 361F                       		move.w	(sp)+,d3
0000BF6C 7001                       		moveq	#1,d0
0000BF6E 4E75                       		rts	
0000BF70                            ; End of function Obj32_MZBlock
0000BF70                            
0000BF70                            ; ===========================================================================
0000BF70                            ; ---------------------------------------------------------------------------
0000BF70                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BF70                            ; ---------------------------------------------------------------------------
0000BF70                            Map_obj32:
0000BF70                            	include "_maps\obj32.asm"
0000BF70                            ; ---------------------------------------------------------------------------
0000BF70                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BF70                            ; ---------------------------------------------------------------------------
0000BF70 0000                       		dc.w byte_BEAC-Map_obj32
0000BF72 0000                       		dc.w byte_BEB7-Map_obj32
0000BF74 0000                       		dc.w byte_BEC2-Map_obj32
0000BF76 0000                       		dc.w byte_BEB7-Map_obj32
0000BF78 02                         byte_BEAC:	dc.b 2
0000BF79 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000BF7E F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000BF83 02                         byte_BEB7:	dc.b 2
0000BF84 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000BF89 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000BF8E 02                         byte_BEC2:	dc.b 2
0000BF8F F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000BF94 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000BF99 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000BF9E                            		even
0000BF9E                            		even
0000BF9E                            
0000BF9E                            ; ===========================================================================
0000BF9E                            ; ---------------------------------------------------------------------------
0000BF9E                            ; Object 33 - pushable blocks (MZ, LZ)
0000BF9E                            ; ---------------------------------------------------------------------------
0000BF9E                            
0000BF9E                            Obj33:					; XREF: Obj_Index
0000BF9E 7000                       		moveq	#0,d0
0000BFA0 1028 0024                  		move.b	$24(a0),d0
0000BFA4 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000BFA8 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000BFAC                            ; ===========================================================================
0000BFAC 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000BFAE 0000                       		dc.w loc_BF6E-Obj33_Index
0000BFB0 0000                       		dc.w loc_C02C-Obj33_Index
0000BFB2                            
0000BFB2 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000BFB4 4001                       		dc.b $40, 1
0000BFB6                            ; ===========================================================================
0000BFB6                            
0000BFB6                            Obj33_Main:				; XREF: Obj33_Index
0000BFB6 5428 0024                  		addq.b	#2,$24(a0)
0000BFBA 117C 000F 0016             		move.b	#$F,$16(a0)
0000BFC0 117C 000F 0017             		move.b	#$F,$17(a0)
0000BFC6 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000BFCE 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000BFD4 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000BFDA 6600                       		bne.s	loc_BF16
0000BFDC 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000BFE2                            
0000BFE2                            loc_BF16:
0000BFE2 117C 0004 0001             		move.b	#4,1(a0)
0000BFE8 117C 0003 0018             		move.b	#3,$18(a0)
0000BFEE 3168 0008 0034             		move.w	8(a0),$34(a0)
0000BFF4 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000BFFA 7000                       		moveq	#0,d0
0000BFFC 1028 0028                  		move.b	$28(a0),d0
0000C000 D040                       		add.w	d0,d0
0000C002 0240 000E                  		andi.w	#$E,d0
0000C006 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000C00A 115A 0019                  		move.b	(a2)+,$19(a0)
0000C00E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C012 4A28 0028                  		tst.b	$28(a0)
0000C016 6700                       		beq.s	Obj33_ChkGone
0000C018 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000C01E                            
0000C01E                            Obj33_ChkGone:
0000C01E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C022 7000                       		moveq	#0,d0
0000C024 1028 0023                  		move.b	$23(a0),d0
0000C028 6700                       		beq.s	loc_BF6E
0000C02A 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000C030 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000C036 6600 0000                  		bne.w	DeleteObject
0000C03A                            
0000C03A                            loc_BF6E:				; XREF: Obj33_Index
0000C03A 4A28 0032                  		tst.b	$32(a0)
0000C03E 6600 0000                  		bne.w	loc_C046
0000C042 7200                       		moveq	#0,d1
0000C044 1228 0019                  		move.b	$19(a0),d1
0000C048 0641 000B                  		addi.w	#$B,d1
0000C04C 343C 0010                  		move.w	#$10,d2
0000C050 363C 0011                  		move.w	#$11,d3
0000C054 3828 0008                  		move.w	8(a0),d4
0000C058 6100 0000                  		bsr.w	loc_C186
0000C05C 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000C062 6600                       		bne.s	loc_BFC6	; if not, branch
0000C064 08A8 0007 0028             		bclr	#7,$28(a0)
0000C06A 3028 0008                  		move.w	8(a0),d0
0000C06E 0C40 0A20                  		cmpi.w	#$A20,d0
0000C072 6500                       		bcs.s	loc_BFC6
0000C074 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000C078 6400                       		bcc.s	loc_BFC6
0000C07A 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000C07E 0440 001C                  		subi.w	#$1C,d0
0000C082 3140 000C                  		move.w	d0,$C(a0)
0000C086 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000C08C 08E8 0007 0028             		bset	#7,$28(a0)
0000C092                            
0000C092                            loc_BFC6:
0000C092 3028 0008                  		move.w	8(a0),d0
0000C096 0240 FF80                  		andi.w	#$FF80,d0
0000C09A 3238 F700                  		move.w	($FFFFF700).w,d1
0000C09E 0441 0080                  		subi.w	#$80,d1
0000C0A2 0241 FF80                  		andi.w	#$FF80,d1
0000C0A6 9041                       		sub.w	d1,d0
0000C0A8 0C40 0280                  		cmpi.w	#$280,d0
0000C0AC 6200                       		bhi.s	loc_BFE6
0000C0AE 6000 0000                  		bra.w	DisplaySprite
0000C0B2                            ; ===========================================================================
0000C0B2                            
0000C0B2                            loc_BFE6:
0000C0B2 3028 0034                  		move.w	$34(a0),d0
0000C0B6 0240 FF80                  		andi.w	#$FF80,d0
0000C0BA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C0BE 0441 0080                  		subi.w	#$80,d1
0000C0C2 0241 FF80                  		andi.w	#$FF80,d1
0000C0C6 9041                       		sub.w	d1,d0
0000C0C8 0C40 0280                  		cmpi.w	#$280,d0
0000C0CC 6200                       		bhi.s	loc_C016
0000C0CE 3168 0034 0008             		move.w	$34(a0),8(a0)
0000C0D4 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000C0DA 117C 0004 0024             		move.b	#4,$24(a0)
0000C0E0 6000                       		bra.s	loc_C02C
0000C0E2                            ; ===========================================================================
0000C0E2                            
0000C0E2                            loc_C016:
0000C0E2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000C0E6 7000                       		moveq	#0,d0
0000C0E8 1028 0023                  		move.b	$23(a0),d0
0000C0EC 6700                       		beq.s	loc_C028
0000C0EE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000C0F4                            
0000C0F4                            loc_C028:
0000C0F4 6000 0000                  		bra.w	DeleteObject
0000C0F8                            ; ===========================================================================
0000C0F8                            
0000C0F8                            loc_C02C:				; XREF: Obj33_Index
0000C0F8 6100 0000                  		bsr.w	ChkObjOnScreen2
0000C0FC 6700                       		beq.s	locret_C044
0000C0FE 117C 0002 0024             		move.b	#2,$24(a0)
0000C104 4228 0032                  		clr.b	$32(a0)
0000C108 4268 0010                  		clr.w	$10(a0)
0000C10C 4268 0012                  		clr.w	$12(a0)
0000C110                            
0000C110                            locret_C044:
0000C110 4E75                       		rts	
0000C112                            ; ===========================================================================
0000C112                            
0000C112                            loc_C046:				; XREF: loc_BF6E
0000C112 3F28 0008                  		move.w	8(a0),-(sp)
0000C116 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C11C 6400                       		bcc.s	loc_C056
0000C11E 6100 0000                  		bsr.w	SpeedToPos
0000C122                            
0000C122                            loc_C056:
0000C122 0828 0001 0022             		btst	#1,$22(a0)
0000C128 6700                       		beq.s	loc_C0A0
0000C12A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C130 4EB9 0000 0000             		jsr	ObjHitFloor
0000C136 4A41                       		tst.w	d1
0000C138 6A00 0000                  		bpl.w	loc_C09E
0000C13C D368 000C                  		add.w	d1,$C(a0)
0000C140 4268 0012                  		clr.w	$12(a0)
0000C144 08A8 0001 0022             		bclr	#1,$22(a0)
0000C14A 3011                       		move.w	(a1),d0
0000C14C 0240 03FF                  		andi.w	#$3FF,d0
0000C150 0C40 016A                  		cmpi.w	#$16A,d0
0000C154 6500                       		bcs.s	loc_C09E
0000C156 3028 0030                  		move.w	$30(a0),d0
0000C15A E640                       		asr.w	#3,d0
0000C15C 3140 0010                  		move.w	d0,$10(a0)
0000C160 117C 0001 0032             		move.b	#1,$32(a0)
0000C166 4268 000E                  		clr.w	$E(a0)
0000C16A                            
0000C16A                            loc_C09E:
0000C16A 6000                       		bra.s	loc_C0E6
0000C16C                            ; ===========================================================================
0000C16C                            
0000C16C                            loc_C0A0:
0000C16C 4A68 0010                  		tst.w	$10(a0)
0000C170 6700 0000                  		beq.w	loc_C0D6
0000C174 6B00                       		bmi.s	loc_C0BC
0000C176 7600                       		moveq	#0,d3
0000C178 1628 0019                  		move.b	$19(a0),d3
0000C17C 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C182 4A41                       		tst.w	d1		; has block touched a wall?
0000C184 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C186 6000                       		bra.s	loc_C0E6
0000C188                            ; ===========================================================================
0000C188                            
0000C188                            loc_C0BC:
0000C188 7600                       		moveq	#0,d3
0000C18A 1628 0019                  		move.b	$19(a0),d3
0000C18E 4643                       		not.w	d3
0000C190 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C196 4A41                       		tst.w	d1		; has block touched a wall?
0000C198 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C19A 6000                       		bra.s	loc_C0E6
0000C19C                            ; ===========================================================================
0000C19C                            
0000C19C                            Obj33_StopPush:
0000C19C 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C1A0 6000                       		bra.s	loc_C0E6
0000C1A2                            ; ===========================================================================
0000C1A2                            
0000C1A2                            loc_C0D6:
0000C1A2 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C1AA 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C1B0 6400                       		bcc.s	loc_C104
0000C1B2                            
0000C1B2                            loc_C0E6:
0000C1B2 7200                       		moveq	#0,d1
0000C1B4 1228 0019                  		move.b	$19(a0),d1
0000C1B8 0641 000B                  		addi.w	#$B,d1
0000C1BC 343C 0010                  		move.w	#$10,d2
0000C1C0 363C 0011                  		move.w	#$11,d3
0000C1C4 381F                       		move.w	(sp)+,d4
0000C1C6 6100 0000                  		bsr.w	loc_C186
0000C1CA 6100                       		bsr.s	Obj33_ChkLava
0000C1CC 6000 FEC4                  		bra.w	loc_BFC6
0000C1D0                            ; ===========================================================================
0000C1D0                            
0000C1D0                            loc_C104:
0000C1D0 381F                       		move.w	(sp)+,d4
0000C1D2 43F8 D000                  		lea	($FFFFD000).w,a1
0000C1D6 08A9 0003 0022             		bclr	#3,$22(a1)
0000C1DC 08A8 0003 0022             		bclr	#3,$22(a0)
0000C1E2 6000 FECE                  		bra.w	loc_BFE6
0000C1E6                            ; ===========================================================================
0000C1E6                            
0000C1E6                            Obj33_ChkLava:
0000C1E6 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C1EC 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C1EE 343C FFE0                  		move.w	#-$20,d2
0000C1F2 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C1F8 6700                       		beq.s	Obj33_LoadLava
0000C1FA 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C200 6700                       		beq.s	Obj33_LoadLava
0000C202 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C208 6700                       		beq.s	Obj33_LoadLava
0000C20A 4E75                       		rts	
0000C20C                            ; ===========================================================================
0000C20C                            
0000C20C                            Obj33_ChkLava2:
0000C20C 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C212 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C214 343C 0020                  		move.w	#$20,d2
0000C218 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C21E 6700                       		beq.s	Obj33_LoadLava
0000C220 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C226 6700                       		beq.s	Obj33_LoadLava
0000C228                            
0000C228                            Obj33_NoLava:
0000C228 4E75                       		rts	
0000C22A                            ; ===========================================================================
0000C22A                            
0000C22A                            Obj33_LoadLava:
0000C22A 6100 0000                  		bsr.w	SingleObjLoad
0000C22E 6600                       		bne.s	locret_C184
0000C230 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C234 3368 0008 0008             		move.w	8(a0),8(a1)
0000C23A D569 0008                  		add.w	d2,8(a1)
0000C23E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C244 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C24A 2348 003C                  		move.l	a0,$3C(a1)
0000C24E                            
0000C24E                            locret_C184:
0000C24E 4E75                       		rts	
0000C250                            ; ===========================================================================
0000C250                            
0000C250                            loc_C186:				; XREF: loc_BF6E
0000C250 1028 0025                  		move.b	$25(a0),d0
0000C254 6700 0000                  		beq.w	loc_C218
0000C258 5500                       		subq.b	#2,d0
0000C25A 6600                       		bne.s	loc_C1AA
0000C25C 6100 B468                  		bsr.w	ExitPlatform
0000C260 0829 0003 0022             		btst	#3,$22(a1)
0000C266 6600                       		bne.s	loc_C1A4
0000C268 4228 0025                  		clr.b	$25(a0)
0000C26C 4E75                       		rts	
0000C26E                            ; ===========================================================================
0000C26E                            
0000C26E                            loc_C1A4:
0000C26E 3404                       		move.w	d4,d2
0000C270 6000 B9B2                  		bra.w	MvSonicOnPtfm
0000C274                            ; ===========================================================================
0000C274                            
0000C274                            loc_C1AA:
0000C274 5500                       		subq.b	#2,d0
0000C276 6600                       		bne.s	loc_C1F2
0000C278 6100 0000                  		bsr.w	SpeedToPos
0000C27C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C282 4EB9 0000 0000             		jsr	ObjHitFloor
0000C288 4A41                       		tst.w	d1
0000C28A 6A00 0000                  		bpl.w	locret_C1F0
0000C28E D368 000C                  		add.w	d1,$C(a0)
0000C292 4268 0012                  		clr.w	$12(a0)
0000C296 4228 0025                  		clr.b	$25(a0)
0000C29A 3011                       		move.w	(a1),d0
0000C29C 0240 03FF                  		andi.w	#$3FF,d0
0000C2A0 0C40 016A                  		cmpi.w	#$16A,d0
0000C2A4 6500                       		bcs.s	locret_C1F0
0000C2A6 3028 0030                  		move.w	$30(a0),d0
0000C2AA E640                       		asr.w	#3,d0
0000C2AC 3140 0010                  		move.w	d0,$10(a0)
0000C2B0 117C 0001 0032             		move.b	#1,$32(a0)
0000C2B6 4268 000E                  		clr.w	$E(a0)
0000C2BA                            
0000C2BA                            locret_C1F0:
0000C2BA 4E75                       		rts	
0000C2BC                            ; ===========================================================================
0000C2BC                            
0000C2BC                            loc_C1F2:
0000C2BC 6100 0000                  		bsr.w	SpeedToPos
0000C2C0 3028 0008                  		move.w	8(a0),d0
0000C2C4 0240 000C                  		andi.w	#$C,d0
0000C2C8 6600 0000                  		bne.w	locret_C2E4
0000C2CC 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C2D2 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C2D8 4268 0010                  		clr.w	$10(a0)
0000C2DC 5528 0025                  		subq.b	#2,$25(a0)
0000C2E0 4E75                       		rts	
0000C2E2                            ; ===========================================================================
0000C2E2                            
0000C2E2                            loc_C218:
0000C2E2 6100 0000                  		bsr.w	loc_FAC8
0000C2E6 4A44                       		tst.w	d4
0000C2E8 6700 0000                  		beq.w	locret_C2E4
0000C2EC 6B00 0000                  		bmi.w	locret_C2E4
0000C2F0 4A28 0032                  		tst.b	$32(a0)
0000C2F4 6700                       		beq.s	loc_C230
0000C2F6 6000 0000                  		bra.w	locret_C2E4
0000C2FA                            ; ===========================================================================
0000C2FA                            
0000C2FA                            loc_C230:
0000C2FA 4A40                       		tst.w	d0
0000C2FC 6700 0000                  		beq.w	locret_C2E4
0000C300 6B00                       		bmi.s	loc_C268
0000C302 0829 0000 0022             		btst	#0,$22(a1)
0000C308 6600 0000                  		bne.w	locret_C2E4
0000C30C 3F00                       		move.w	d0,-(sp)
0000C30E 7600                       		moveq	#0,d3
0000C310 1628 0019                  		move.b	$19(a0),d3
0000C314 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C31A 301F                       		move.w	(sp)+,d0
0000C31C 4A41                       		tst.w	d1
0000C31E 6B00 0000                  		bmi.w	locret_C2E4
0000C322 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C32A 7001                       		moveq	#1,d0
0000C32C 323C 0040                  		move.w	#$40,d1
0000C330 6000                       		bra.s	loc_C294
0000C332                            ; ===========================================================================
0000C332                            
0000C332                            loc_C268:
0000C332 0829 0000 0022             		btst	#0,$22(a1)
0000C338 6700                       		beq.s	locret_C2E4
0000C33A 3F00                       		move.w	d0,-(sp)
0000C33C 7600                       		moveq	#0,d3
0000C33E 1628 0019                  		move.b	$19(a0),d3
0000C342 4643                       		not.w	d3
0000C344 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C34A 301F                       		move.w	(sp)+,d0
0000C34C 4A41                       		tst.w	d1
0000C34E 6B00                       		bmi.s	locret_C2E4
0000C350 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C358 70FF                       		moveq	#-1,d0
0000C35A 323C FFC0                  		move.w	#-$40,d1
0000C35E                            
0000C35E                            loc_C294:
0000C35E 43F8 D000                  		lea	($FFFFD000).w,a1
0000C362 D169 0008                  		add.w	d0,8(a1)
0000C366 3341 0014                  		move.w	d1,$14(a1)
0000C36A 337C 0000 0010             		move.w	#0,$10(a1)
0000C370 3F00                       		move.w	d0,-(sp)
0000C372 303C 00A7                  		move.w	#$A7,d0
0000C376 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C37C 301F                       		move.w	(sp)+,d0
0000C37E 4A28 0028                  		tst.b	$28(a0)
0000C382 6B00                       		bmi.s	locret_C2E4
0000C384 3F00                       		move.w	d0,-(sp)
0000C386 4EB9 0000 0000             		jsr	ObjHitFloor
0000C38C 301F                       		move.w	(sp)+,d0
0000C38E 0C41 0004                  		cmpi.w	#4,d1
0000C392 6F00                       		ble.s	loc_C2E0
0000C394 317C 0400 0010             		move.w	#$400,$10(a0)
0000C39A 4A40                       		tst.w	d0
0000C39C 6A00                       		bpl.s	loc_C2D8
0000C39E 4468 0010                  		neg.w	$10(a0)
0000C3A2                            
0000C3A2                            loc_C2D8:
0000C3A2 117C 0006 0025             		move.b	#6,$25(a0)
0000C3A8 6000                       		bra.s	locret_C2E4
0000C3AA                            ; ===========================================================================
0000C3AA                            
0000C3AA                            loc_C2E0:
0000C3AA D368 000C                  		add.w	d1,$C(a0)
0000C3AE                            
0000C3AE                            locret_C2E4:
0000C3AE 4E75                       		rts	
0000C3B0                            ; ===========================================================================
0000C3B0                            ; ---------------------------------------------------------------------------
0000C3B0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C3B0                            ; ---------------------------------------------------------------------------
0000C3B0                            Map_obj33:
0000C3B0                            	include "_maps\obj33.asm"
0000C3B0                            ; ---------------------------------------------------------------------------
0000C3B0                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C3B0                            ; ---------------------------------------------------------------------------
0000C3B0 0000                       		dc.w byte_C2EA-Map_obj33
0000C3B2 0000                       		dc.w byte_C2F0-Map_obj33
0000C3B4 01                         byte_C2EA:	dc.b 1
0000C3B5 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C3BA 04                         byte_C2F0:	dc.b 4
0000C3BB F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C3C0 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C3C5 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C3CA F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C3D0 00                         		even
0000C3D0 00                         		even
0000C3D0                            
0000C3D0                            ; ===========================================================================
0000C3D0                            ; ---------------------------------------------------------------------------
0000C3D0                            ; Object 34 - zone title cards
0000C3D0                            ; ---------------------------------------------------------------------------
0000C3D0                            
0000C3D0                            Obj34:					; XREF: Obj_Index
0000C3D0 7000                       		moveq	#0,d0
0000C3D2 1028 0024                  		move.b	$24(a0),d0
0000C3D6 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C3DA 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C3DE                            ; ===========================================================================
0000C3DE 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C3E0 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C3E2 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C3E4 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C3E6                            ; ===========================================================================
0000C3E6                            
0000C3E6                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C3E6 2248                       		movea.l	a0,a1
0000C3E8 7000                       		moveq	#0,d0
0000C3EA 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C3EE 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C3F4 6600                       		bne.s	Obj34_CheckFZ
0000C3F6 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C3F8                            
0000C3F8                            Obj34_CheckFZ:
0000C3F8 3400                       		move.w	d0,d2
0000C3FA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C400 6600                       		bne.s	Obj34_LoadConfig
0000C402 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C404 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C406                            
0000C406                            Obj34_LoadConfig:
0000C406 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C40C E948                       		lsl.w	#4,d0
0000C40E D6C0                       		adda.w	d0,a3
0000C410 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C416 7203                       		moveq	#3,d1
0000C418                            
0000C418                            Obj34_Loop:
0000C418 12BC 0034                  		move.b	#$34,0(a1)
0000C41C 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C420 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C424 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C428 335A 000A                  		move.w	(a2)+,$A(a1)
0000C42C 135A 0024                  		move.b	(a2)+,$24(a1)
0000C430 101A                       		move.b	(a2)+,d0
0000C432 6600                       		bne.s	Obj34_ActNumber
0000C434 1002                       		move.b	d2,d0
0000C436                            
0000C436                            Obj34_ActNumber:
0000C436 0C00 0007                  		cmpi.b	#7,d0
0000C43A 6600                       		bne.s	Obj34_MakeSprite
0000C43C D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C440 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C446 6600                       		bne.s	Obj34_MakeSprite
0000C448 5300                       		subq.b	#1,d0
0000C44A                            
0000C44A                            Obj34_MakeSprite:
0000C44A 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C44E 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C456 337C 8580 0002             		move.w	#$8580,2(a1)
0000C45C 137C 0078 0019             		move.b	#$78,$19(a1)
0000C462 137C 0000 0001             		move.b	#0,1(a1)
0000C468 137C 0000 0018             		move.b	#0,$18(a1)
0000C46E 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C474 43E9 0040                  		lea	$40(a1),a1	; next object
0000C478 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C47C                            
0000C47C                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C47C 7210                       		moveq	#$10,d1		; set horizontal speed
0000C47E 3028 0030                  		move.w	$30(a0),d0
0000C482 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C486 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C488 6C00                       		bge.s	Obj34_Move
0000C48A 4441                       		neg.w	d1
0000C48C                            
0000C48C                            Obj34_Move:
0000C48C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C490                            
0000C490                            loc_C3C8:
0000C490 3028 0008                  		move.w	8(a0),d0
0000C494 6B00                       		bmi.s	locret_C3D8
0000C496 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C49A 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C49C 6000 0000                  		bra.w	DisplaySprite
0000C4A0                            ; ===========================================================================
0000C4A0                            
0000C4A0                            locret_C3D8:
0000C4A0 4E75                       		rts	
0000C4A2                            ; ===========================================================================
0000C4A2                            
0000C4A2                            Obj34_Wait:				; XREF: Obj34_Index
0000C4A2 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C4A6 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C4A8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C4AC 6000 0000                  		bra.w	DisplaySprite
0000C4B0                            ; ===========================================================================
0000C4B0                            
0000C4B0                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C4B0 4A28 0001                  		tst.b	1(a0)
0000C4B4 6A00                       		bpl.s	Obj34_ChangeArt
0000C4B6 7220                       		moveq	#$20,d1
0000C4B8 3028 0032                  		move.w	$32(a0),d0
0000C4BC B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C4C0 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C4C2 6C00                       		bge.s	Obj34_Move2
0000C4C4 4441                       		neg.w	d1
0000C4C6                            
0000C4C6                            Obj34_Move2:
0000C4C6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C4CA 3028 0008                  		move.w	8(a0),d0
0000C4CE 6B00                       		bmi.s	locret_C412
0000C4D0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C4D4 6400                       		bcc.s	locret_C412	; if yes, branch
0000C4D6 6000 0000                  		bra.w	DisplaySprite
0000C4DA                            ; ===========================================================================
0000C4DA                            
0000C4DA                            locret_C412:
0000C4DA 4E75                       		rts	
0000C4DC                            ; ===========================================================================
0000C4DC                            
0000C4DC                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C4DC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C4E2 6600                       		bne.s	Obj34_Delete
0000C4E4 7002                       		moveq	#2,d0
0000C4E6 4EB9 0000 1580             		jsr	(LoadPLC).l	; load explosion patterns
0000C4EC 7000                       		moveq	#0,d0
0000C4EE 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C4F2 0640 0015                  		addi.w	#$15,d0
0000C4F6 4EB9 0000 1580             		jsr	(LoadPLC).l	; load animal patterns
0000C4FC                            
0000C4FC                            Obj34_Delete:
0000C4FC 6000 0000                  		bra.w	DeleteObject
0000C500                            ; ===========================================================================
0000C500 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C502 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C504 00E4                       		dc.w $E4
0000C506 0206                       		dc.b 2,	6
0000C508 00EA                       		dc.w $EA
0000C50A 0207                       		dc.b 2,	7
0000C50C 00E0                       		dc.w $E0
0000C50E 020A                       		dc.b 2,	$A
0000C510                            ; ---------------------------------------------------------------------------
0000C510                            ; Title	card configuration data
0000C510                            ; Format:
0000C510                            ; 4 bytes per item (YYYY XXXX)
0000C510                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C510                            ; ---------------------------------------------------------------------------
0000C510 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C520 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C530 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C540 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C550 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C560 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C570 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C580                            ; ===========================================================================
0000C580                            ; ---------------------------------------------------------------------------
0000C580                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C580                            ; ---------------------------------------------------------------------------
0000C580                            
0000C580                            Obj39:					; XREF: Obj_Index
0000C580 7000                       		moveq	#0,d0
0000C582 1028 0024                  		move.b	$24(a0),d0
0000C586 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C58A 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C58E                            ; ===========================================================================
0000C58E 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C590 0000                       		dc.w loc_C50C-Obj39_Index
0000C592 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C594                            ; ===========================================================================
0000C594                            
0000C594                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C594 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C598 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C59A 4E75                       		rts	
0000C59C                            ; ===========================================================================
0000C59C                            
0000C59C                            Obj39_Main:
0000C59C 5428 0024                  		addq.b	#2,$24(a0)
0000C5A0 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C5A6 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C5AC 6700                       		beq.s	loc_C4EC	; if not, branch
0000C5AE 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C5B4                            
0000C5B4                            loc_C4EC:
0000C5B4 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C5BA 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C5C2 317C 855E 0002             		move.w	#$855E,2(a0)
0000C5C8 117C 0000 0001             		move.b	#0,1(a0)
0000C5CE 117C 0000 0018             		move.b	#0,$18(a0)
0000C5D4                            
0000C5D4                            loc_C50C:				; XREF: Obj39_Index
0000C5D4 7210                       		moveq	#$10,d1		; set horizontal speed
0000C5D6 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C5DC 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C5DE 6500                       		bcs.s	Obj39_Move
0000C5E0 4441                       		neg.w	d1
0000C5E2                            
0000C5E2                            Obj39_Move:
0000C5E2 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C5E6 6000 0000                  		bra.w	DisplaySprite
0000C5EA                            ; ===========================================================================
0000C5EA                            
0000C5EA                            Obj39_SetWait:				; XREF: Obj39_Main
0000C5EA 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C5F0 5428 0024                  		addq.b	#2,$24(a0)
0000C5F4 4E75                       		rts	
0000C5F6                            ; ===========================================================================
0000C5F6                            
0000C5F6                            Obj39_Wait:				; XREF: Obj39_Index
0000C5F6 1038 F605                  		move.b	($FFFFF605).w,d0
0000C5FA 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C5FE 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C600 0828 0000 001A             		btst	#0,$1A(a0)
0000C606 6600                       		bne.s	Obj39_Display
0000C608 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C60C 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C60E 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C612 6000 0000                  		bra.w	DisplaySprite
0000C616                            ; ===========================================================================
0000C616                            
0000C616                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000C616 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000C61A 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000C61C 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000C622 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000C626 6600                       		bne.s	Obj39_Display	; if yes, branch
0000C628 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000C62E 6000                       		bra.s	Obj39_Display
0000C630                            ; ===========================================================================
0000C630                            
0000C630                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000C630 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C636                            
0000C636                            Obj39_Display:				; XREF: Obj39_ChgMode
0000C636 6000 0000                  		bra.w	DisplaySprite
0000C63A                            ; ===========================================================================
0000C63A                            ; ---------------------------------------------------------------------------
0000C63A                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000C63A                            ; ---------------------------------------------------------------------------
0000C63A                            
0000C63A                            Obj3A:					; XREF: Obj_Index
0000C63A 7000                       		moveq	#0,d0
0000C63C 1028 0024                  		move.b	$24(a0),d0
0000C640 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000C644 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000C648                            ; ===========================================================================
0000C648 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000C64A 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000C64C 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C64E 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000C650 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C652 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000C654 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C656 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000C658 0000                       		dc.w loc_C766-Obj3A_Index
0000C65A                            ; ===========================================================================
0000C65A                            
0000C65A                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000C65A 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C65E 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000C660 4E75                       		rts	
0000C662                            ; ===========================================================================
0000C662                            
0000C662                            Obj3A_Main:
0000C662 2248                       		movea.l	a0,a1
0000C664 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000C66A 7206                       		moveq	#6,d1
0000C66C                            
0000C66C                            Obj3A_Loop:
0000C66C 12BC 003A                  		move.b	#$3A,0(a1)
0000C670 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000C674 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000C678 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C67C 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C680 135A 0024                  		move.b	(a2)+,$24(a1)
0000C684 101A                       		move.b	(a2)+,d0
0000C686 0C00 0006                  		cmpi.b	#6,d0
0000C68A 6600                       		bne.s	loc_C5CA
0000C68C D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000C690                            
0000C690                            loc_C5CA:
0000C690 1340 001A                  		move.b	d0,$1A(a1)
0000C694 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000C69C 337C 8580 0002             		move.w	#$8580,2(a1)
0000C6A2 137C 0000 0001             		move.b	#0,1(a1)
0000C6A8 43E9 0040                  		lea	$40(a1),a1
0000C6AC 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000C6B0                            
0000C6B0                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000C6B0 7210                       		moveq	#$10,d1		; set horizontal speed
0000C6B2 3028 0030                  		move.w	$30(a0),d0
0000C6B6 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C6BA 6700                       		beq.s	loc_C61A	; if yes, branch
0000C6BC 6C00                       		bge.s	Obj3A_Move
0000C6BE 4441                       		neg.w	d1
0000C6C0                            
0000C6C0                            Obj3A_Move:
0000C6C0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C6C4                            
0000C6C4                            loc_C5FE:				; XREF: loc_C61A
0000C6C4 3028 0008                  		move.w	8(a0),d0
0000C6C8 6B00                       		bmi.s	locret_C60E
0000C6CA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C6CE 6400                       		bcc.s	locret_C60E	; if yes, branch
0000C6D0 6000 0000                  		bra.w	DisplaySprite
0000C6D4                            ; ===========================================================================
0000C6D4                            
0000C6D4                            locret_C60E:
0000C6D4 4E75                       		rts	
0000C6D6                            ; ===========================================================================
0000C6D6                            
0000C6D6                            loc_C610:				; XREF: loc_C61A
0000C6D6 117C 000E 0024             		move.b	#$E,$24(a0)
0000C6DC 6000 0000                  		bra.w	Obj3A_ChkPos2
0000C6E0                            ; ===========================================================================
0000C6E0                            
0000C6E0                            loc_C61A:				; XREF: Obj3A_ChkPos
0000C6E0 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000C6E6 67EE                       		beq.s	loc_C610
0000C6E8 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C6EE 66D4                       		bne.s	loc_C5FE
0000C6F0 5428 0024                  		addq.b	#2,$24(a0)
0000C6F4 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C6FA                            
0000C6FA                            Obj3A_Wait:				; XREF: Obj3A_Index
0000C6FA 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C6FE 6600                       		bne.s	Obj3A_Display
0000C700 5428 0024                  		addq.b	#2,$24(a0)
0000C704                            
0000C704                            Obj3A_Display:
0000C704 6000 0000                  		bra.w	DisplaySprite
0000C708                            ; ===========================================================================
0000C708                            
0000C708                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000C708 6100 0000                  		bsr.w	DisplaySprite
0000C70C 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000C712 7000                       		moveq	#0,d0
0000C714 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000C718 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000C71A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C71E 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000C724                            
0000C724                            Obj3A_RingBonus:
0000C724 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C728 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000C72A 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C72E 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C734                            
0000C734                            Obj3A_ChkBonus:
0000C734 4A40                       		tst.w	d0		; is there any bonus?
0000C736 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000C738 303C 00C5                  		move.w	#$C5,d0
0000C73C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C742 5428 0024                  		addq.b	#2,$24(a0)
0000C746 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000C74C 6600                       		bne.s	Obj3A_SetDelay
0000C74E 5828 0024                  		addq.b	#4,$24(a0)
0000C752                            
0000C752                            Obj3A_SetDelay:
0000C752 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C758                            
0000C758                            locret_C692:
0000C758 4E75                       		rts	
0000C75A                            ; ===========================================================================
0000C75A                            
0000C75A                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000C75A 4EB9 0000 0000             		jsr	AddPoints
0000C760 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C764 0200 0003                  		andi.b	#3,d0
0000C768 66EE                       		bne.s	locret_C692
0000C76A 303C 00CD                  		move.w	#$CD,d0
0000C76E 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C774                            ; ===========================================================================
0000C774                            
0000C774                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000C774 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C778 0240 0007                  		andi.w	#7,d0
0000C77C E748                       		lsl.w	#3,d0
0000C77E 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000C782 0241 0003                  		andi.w	#3,d1
0000C786 D241                       		add.w	d1,d1
0000C788 D041                       		add.w	d1,d0
0000C78A 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000C78E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000C792 4A40                       		tst.w	d0
0000C794 6600                       		bne.s	Obj3A_ChkSS
0000C796 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000C79C 6000                       		bra.s	Obj3A_Display2
0000C79E                            ; ===========================================================================
0000C79E                            
0000C79E                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000C79E 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000C7A2 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000C7A6 6700                       		beq.s	loc_C6EA	; if not, branch
0000C7A8 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000C7AE 6000                       		bra.s	Obj3A_Display2
0000C7B0                            ; ===========================================================================
0000C7B0                            
0000C7B0                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000C7B0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C7B6                            
0000C7B6                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000C7B6 6000 0000                  		bra.w	DisplaySprite
0000C7BA                            ; ===========================================================================
0000C7BA                            ; ---------------------------------------------------------------------------
0000C7BA                            ; Level	order array
0000C7BA                            ; ---------------------------------------------------------------------------
0000C7BA                            LevelOrder:	incbin	misc\lvl_ord.bin
0000C7EA                            		even
0000C7EA                            ; ===========================================================================
0000C7EA                            
0000C7EA                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000C7EA 7220                       		moveq	#$20,d1		; set horizontal speed
0000C7EC 3028 0032                  		move.w	$32(a0),d0
0000C7F0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000C7F4 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000C7F6 6C00                       		bge.s	Obj3A_Move2
0000C7F8 4441                       		neg.w	d1
0000C7FA                            
0000C7FA                            Obj3A_Move2:
0000C7FA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C7FE 3028 0008                  		move.w	8(a0),d0
0000C802 6B00                       		bmi.s	locret_C748
0000C804 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C808 6400                       		bcc.s	locret_C748	; if yes, branch
0000C80A 6000 0000                  		bra.w	DisplaySprite
0000C80E                            ; ===========================================================================
0000C80E                            
0000C80E                            locret_C748:
0000C80E 4E75                       		rts	
0000C810                            ; ===========================================================================
0000C810                            
0000C810                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000C810 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C816 6600 0000                  		bne.w	DeleteObject
0000C81A 5428 0024                  		addq.b	#2,$24(a0)
0000C81E 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000C822 303C 008D                  		move.w	#$8D,d0
0000C826 4EF9 0000 1396             		jmp	(PlaySound).l	; play FZ music
0000C82C                            ; ===========================================================================
0000C82C                            
0000C82C                            loc_C766:				; XREF: Obj3A_Index
0000C82C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000C830 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000C836 6700 0000                  		beq.w	DeleteObject
0000C83A 4E75                       		rts	
0000C83C                            ; ===========================================================================
0000C83C 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000C842 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000C844 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000C84A 0201                       		dc.b 2,	1
0000C84C 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000C852 0206                       		dc.b 2,	6
0000C854 0520 0120 00EC             		dc.w $520, $120, $EC
0000C85A 0202                       		dc.b 2,	2
0000C85C 0540 0120 00FC             		dc.w $540, $120, $FC
0000C862 0203                       		dc.b 2,	3
0000C864 0560 0120 010C             		dc.w $560, $120, $10C
0000C86A 0204                       		dc.b 2,	4
0000C86C 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000C872 0205                       		dc.b 2,	5
0000C874                            ; ===========================================================================
0000C874                            ; ---------------------------------------------------------------------------
0000C874                            ; Object 7E - special stage results screen
0000C874                            ; ---------------------------------------------------------------------------
0000C874                            
0000C874                            Obj7E:					; XREF: Obj_Index
0000C874 7000                       		moveq	#0,d0
0000C876 1028 0024                  		move.b	$24(a0),d0
0000C87A 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000C87E 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000C882                            ; ===========================================================================
0000C882 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000C884 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000C886 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C888 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000C88A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C88C 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C88E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C890 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000C892 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C894 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C896 0000                       		dc.w loc_C91A-Obj7E_Index
0000C898                            ; ===========================================================================
0000C898                            
0000C898                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000C898 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C89C 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000C89E 4E75                       		rts	
0000C8A0                            ; ===========================================================================
0000C8A0                            
0000C8A0                            Obj7E_Main:
0000C8A0 2248                       		movea.l	a0,a1
0000C8A2 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000C8A8 7203                       		moveq	#3,d1
0000C8AA 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000C8B0 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000C8B2 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000C8B4                            
0000C8B4                            Obj7E_Loop:
0000C8B4 12BC 007E                  		move.b	#$7E,0(a1)
0000C8B8 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000C8BC 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C8C0 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C8C4 135A 0024                  		move.b	(a2)+,$24(a1)
0000C8C8 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C8CC 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000C8D4 337C 8580 0002             		move.w	#$8580,2(a1)
0000C8DA 137C 0000 0001             		move.b	#0,1(a1)
0000C8E0 43E9 0040                  		lea	$40(a1),a1
0000C8E4 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000C8E8                            
0000C8E8 7007                       		moveq	#7,d0
0000C8EA 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000C8EE 6700                       		beq.s	loc_C842
0000C8F0 7000                       		moveq	#0,d0
0000C8F2 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000C8F6 6600                       		bne.s	loc_C842	; if not, branch
0000C8F8 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000C8FA 317C 0018 0008             		move.w	#$18,8(a0)
0000C900 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000C906                            
0000C906                            loc_C842:
0000C906 1140 001A                  		move.b	d0,$1A(a0)
0000C90A                            
0000C90A                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000C90A 7210                       		moveq	#$10,d1		; set horizontal speed
0000C90C 3028 0030                  		move.w	$30(a0),d0
0000C910 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C914 6700                       		beq.s	loc_C86C	; if yes, branch
0000C916 6C00                       		bge.s	Obj7E_Move
0000C918 4441                       		neg.w	d1
0000C91A                            
0000C91A                            Obj7E_Move:
0000C91A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C91E                            
0000C91E                            loc_C85A:				; XREF: loc_C86C
0000C91E 3028 0008                  		move.w	8(a0),d0
0000C922 6B00                       		bmi.s	locret_C86A
0000C924 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C928 6400                       		bcc.s	locret_C86A	; if yes, branch
0000C92A 6000 0000                  		bra.w	DisplaySprite
0000C92E                            ; ===========================================================================
0000C92E                            
0000C92E                            locret_C86A:
0000C92E 4E75                       		rts	
0000C930                            ; ===========================================================================
0000C930                            
0000C930                            loc_C86C:				; XREF: Obj7E_ChkPos
0000C930 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C936 66E6                       		bne.s	loc_C85A
0000C938 5428 0024                  		addq.b	#2,$24(a0)
0000C93C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C942 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000C948                            
0000C948                            Obj7E_Wait:				; XREF: Obj7E_Index
0000C948 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C94C 6600                       		bne.s	Obj7E_Display
0000C94E 5428 0024                  		addq.b	#2,$24(a0)
0000C952                            
0000C952                            Obj7E_Display:
0000C952 6000 0000                  		bra.w	DisplaySprite
0000C956                            ; ===========================================================================
0000C956                            
0000C956                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000C956 6100 0000                  		bsr.w	DisplaySprite
0000C95A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000C960 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C964 6700                       		beq.s	loc_C8C4	; if yes, branch
0000C966 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C96C 700A                       		moveq	#10,d0		; add 10 to score
0000C96E 4EB9 0000 0000             		jsr	AddPoints
0000C974 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C978 0200 0003                  		andi.b	#3,d0
0000C97C 6600                       		bne.s	locret_C8EA
0000C97E 303C 00CD                  		move.w	#$CD,d0
0000C982 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C988                            ; ===========================================================================
0000C988                            
0000C988                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000C988 303C 00C5                  		move.w	#$C5,d0
0000C98C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C992 5428 0024                  		addq.b	#2,$24(a0)
0000C996 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C99C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000C9A2 6500                       		bcs.s	locret_C8EA	; if not, branch
0000C9A4 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000C9AA 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000C9AE                            
0000C9AE                            locret_C8EA:
0000C9AE 4E75                       		rts	
0000C9B0                            ; ===========================================================================
0000C9B0                            
0000C9B0                            Obj7E_Exit:				; XREF: Obj7E_Index
0000C9B0 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C9B6 6000 0000                  		bra.w	DisplaySprite
0000C9BA                            ; ===========================================================================
0000C9BA                            
0000C9BA                            Obj7E_Continue:				; XREF: Obj7E_Index
0000C9BA 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000C9C0 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000C9C6 303C 00BF                  		move.w	#$BF,d0
0000C9CA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play continues music
0000C9D0 5428 0024                  		addq.b	#2,$24(a0)
0000C9D4 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000C9DA 6000 0000                  		bra.w	DisplaySprite
0000C9DE                            ; ===========================================================================
0000C9DE                            
0000C9DE                            loc_C91A:				; XREF: Obj7E_Index
0000C9DE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C9E2 0200 000F                  		andi.b	#$F,d0
0000C9E6 6600                       		bne.s	Obj7E_Display2
0000C9E8 0868 0000 001A             		bchg	#0,$1A(a0)
0000C9EE                            
0000C9EE                            Obj7E_Display2:
0000C9EE 6000 0000                  		bra.w	DisplaySprite
0000C9F2                            ; ===========================================================================
0000C9F2 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000C9F8 0200                       		dc.b 2,	0		; rountine number, frame number
0000C9FA 0320 0120 0118             		dc.w $320, $120, $118
0000CA00 0201                       		dc.b 2,	1
0000CA02 0360 0120 0128             		dc.w $360, $120, $128
0000CA08 0202                       		dc.b 2,	2
0000CA0A 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000CA10 0203                       		dc.b 2,	3
0000CA12 03A0 0120 0138             		dc.w $3A0, $120, $138
0000CA18 0206                       		dc.b 2,	6
0000CA1A                            ; ===========================================================================
0000CA1A                            ; ---------------------------------------------------------------------------
0000CA1A                            ; Object 7F - chaos emeralds from the special stage results screen
0000CA1A                            ; ---------------------------------------------------------------------------
0000CA1A                            
0000CA1A                            Obj7F:					; XREF: Obj_Index
0000CA1A 7000                       		moveq	#0,d0
0000CA1C 1028 0024                  		move.b	$24(a0),d0
0000CA20 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000CA24 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000CA28                            ; ===========================================================================
0000CA28 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000CA2A 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000CA2C                            
0000CA2C                            ; ---------------------------------------------------------------------------
0000CA2C                            ; X-axis positions for chaos emeralds
0000CA2C                            ; ---------------------------------------------------------------------------
0000CA2C 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000CA38                            ; ===========================================================================
0000CA38                            
0000CA38                            Obj7F_Main:				; XREF: Obj7F_Index
0000CA38 2248                       		movea.l	a0,a1
0000CA3A 45F9 0000 CA2C             		lea	(Obj7F_PosData).l,a2
0000CA40 7400                       		moveq	#0,d2
0000CA42 7200                       		moveq	#0,d1
0000CA44 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000CA48 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000CA4A 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000CA4E                            
0000CA4E                            Obj7F_Loop:
0000CA4E 12BC 007F                  		move.b	#$7F,0(a1)
0000CA52 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000CA56 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000CA5C 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000CA60 1633 2000                  		move.b	(a3,d2.w),d3
0000CA64 1343 001A                  		move.b	d3,$1A(a1)
0000CA68 1343 001C                  		move.b	d3,$1C(a1)
0000CA6C 5202                       		addq.b	#1,d2
0000CA6E 5429 0024                  		addq.b	#2,$24(a1)
0000CA72 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000CA7A 337C 8541 0002             		move.w	#$8541,2(a1)
0000CA80 137C 0000 0001             		move.b	#0,1(a1)
0000CA86 43E9 0040                  		lea	$40(a1),a1	; next object
0000CA8A 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000CA8E                            
0000CA8E                            Obj7F_Flash:				; XREF: Obj7F_Index
0000CA8E 1028 001A                  		move.b	$1A(a0),d0
0000CA92 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000CA98 0C00 0006                  		cmpi.b	#6,d0
0000CA9C 6600                       		bne.s	Obj7F_Display
0000CA9E 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000CAA4                            
0000CAA4                            Obj7F_Display:
0000CAA4 6000 0000                  		bra.w	DisplaySprite
0000CAA8                            ; ===========================================================================
0000CAA8                            ; ---------------------------------------------------------------------------
0000CAA8                            ; Sprite mappings - zone title cards
0000CAA8                            ; ---------------------------------------------------------------------------
0000CAA8 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000CAAA 0000                       		dc.w byte_CA2C-Map_obj34
0000CAAC 0000                       		dc.w byte_CA5A-Map_obj34
0000CAAE 0000                       		dc.w byte_CA7A-Map_obj34
0000CAB0 0000                       		dc.w byte_CAA8-Map_obj34
0000CAB2 0000                       		dc.w byte_CADC-Map_obj34
0000CAB4 0000                       		dc.w byte_CB10-Map_obj34
0000CAB6 0000                       		dc.w byte_CB26-Map_obj34
0000CAB8 0000                       		dc.w byte_CB31-Map_obj34
0000CABA 0000                       		dc.w byte_CB3C-Map_obj34
0000CABC 0000                       		dc.w byte_CB47-Map_obj34
0000CABE 0000                       		dc.w byte_CB8A-Map_obj34
0000CAC0 0C                         byte_C9FE:	dc.b $C	;  GREEN HILL | CRUNCHY ROLL
0000CAC1 F805 0008 80               		dc.b $F8, 5, 0, 8, $80		; C
0000CAC6 F805 003A 90               		dc.b $F8, 5, 0, $3A, $90	; R
0000CACB F805 0046 A0               		dc.b $F8, 5, 0, $46, $A0	; U
0000CAD0 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	; N
0000CAD5 F805 0008 C0               		dc.b $F8, 5, 0, 8, $C0		; C
0000CADA F805 001C D0               		dc.b $F8, 5, 0, $1C, $D0	; H
0000CADF F805 004A E0               		dc.b $F8, 5, 0, $4A, $E0	; Y
0000CAE4 F800 0056 F0               		dc.b $F8, 0, 0, $56, $F0	; Space
0000CAE9 F805 003A 00               		dc.b $F8, 5, 0, $3A, $0	; R
0000CAEE F805 0032 10               		dc.b $F8, 5, 0, $32, $10	; O
0000CAF3 F805 0026 20               		dc.b $F8, 5, 0, $26, $20	; L
0000CAF8 F805 0026 30               		dc.b $F8, 5, 0, $26, $30	; L
0000CAFD 16                         byte_CA2C:	dc.b $16	;  LABYRINTH | I LIKE FILE EGGSPLORER
0000CAFE F801 0020 80               		dc.b $F8, 1, 0, $20, $80	; I
0000CB03 F800 0056 88               		dc.b $F8, 0, 0, $56, $88	; Space
0000CB08 F805 0026 98               		dc.b $F8, 5, 0, $26, $98	; L
0000CB0D F801 0020 A8               		dc.b $F8, 1, 0, $20, $A8	; I
0000CB12 F805 0022 B0               		dc.b $F8, 5, 0, $22, $B0	; K
0000CB17 F805 0010 C0               		dc.b $F8, 5, 0, $10, $C0	; E
0000CB1C F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CB21 F805 0014 E0               		dc.b $F8, 5, 0, $14, $E0	; F
0000CB26 F801 0020 F0               		dc.b $F8, 1, 0, $20, $F0	; I
0000CB2B F805 0026 F8               		dc.b $F8, 5, 0, $26, $F8	; L
0000CB30 F805 0010 08               		dc.b $F8, 5, 0, $10, $8	; E
0000CB35 F800 0056 18               		dc.b $F8, 0, 0, $56, $18	; Space
0000CB3A F805 0010 28               		dc.b $F8, 5, 0, $10, $28	; E
0000CB3F F805 0018 38               		dc.b $F8, 5, 0, $18, $38	; G
0000CB44 F805 0018 48               		dc.b $F8, 5, 0, $18, $48	; G
0000CB49 F805 003E 58               		dc.b $F8, 5, 0, $3E, $58	; S
0000CB4E F805 0036 68               		dc.b $F8, 5, 0, $36, $68	; P
0000CB53 F805 0026 78               		dc.b $F8, 5, 0, $26, $78	; L
0000CB58 F805 0032 88               		dc.b $F8, 5, 0, $32, $88	; O
0000CB5D F805 003A 98               		dc.b $F8, 5, 0, $3A, $98	; R
0000CB62 F805 0010 A8               		dc.b $F8, 5, 0, $10, $A8	; E
0000CB67 F805 003A B8               		dc.b $F8, 5, 0, $3A, $B8	; R
0000CB6C 05                         byte_CA5A:	dc.b 5	;  MARBLE | MARBL
0000CB6D F805 002A 80               		dc.b $F8, 5, 0, $2A, $80	; M
0000CB72 F805 0000 90               		dc.b $F8, 5, 0, 0, $90		; A
0000CB77 F805 003A A0               		dc.b $F8, 5, 0, $3A, $A0	; R
0000CB7C F805 0004 B0               		dc.b $F8, 5, 0, 4, $B0		; B
0000CB81 F805 0026 C0               		dc.b $F8, 5, 0, $26, $C0	; L
0000CB86 11                         byte_CA7A:	dc.b $11	;  STAR LIGHT | DONT GET RIDOTHIS
0000CB87 F805 000C 80               		dc.b $F8, 5, 0, $0C, $80	; D
0000CB8C F805 0032 90               		dc.b $F8, 5, 0, $32, $90	; O
0000CB91 F805 002E A0               		dc.b $F8, 5, 0, $2E, $A0	; N
0000CB96 F805 0042 B0               		dc.b $F8, 5, 0, $42, $B0	; T
0000CB9B F800 0056 C0               		dc.b $F8, 0, 0, $56, $C0	; Space
0000CBA0 F805 0018 D0               		dc.b $F8, 5, 0, $18, $D0	; G
0000CBA5 F805 0010 E0               		dc.b $F8, 5, 0, $10, $E0	; E
0000CBAA F805 0042 F0               		dc.b $F8, 5, 0, $42, $F0	; T
0000CBAF F800 0056 00               		dc.b $F8, 0, 0, $56, $0	; Space
0000CBB4 F805 003A 10               		dc.b $F8, 5, 0, $3A, $10	; R
0000CBB9 F801 0020 20               		dc.b $F8, 1, 0, $20, $20	; I
0000CBBE F805 000C 28               		dc.b $F8, 5, 0, $0C, $28	; D
0000CBC3 F805 0032 38               		dc.b $F8, 5, 0, $32, $38	; O
0000CBC8 F805 0042 48               		dc.b $F8, 5, 0, $42, $48	; T
0000CBCD F805 001C 58               		dc.b $F8, 5, 0, $1C, $58	; H
0000CBD2 F801 0020 68               		dc.b $F8, 1, 0, $20, $68	; I
0000CBD7 F805 003E 70               		dc.b $F8, 5, 0, $3E, $70	; S
0000CBDC 15                         byte_CAA8:	dc.b $15	;  SPRING YARD | THE PIG FROM BARNYARD
0000CBDD F805 0042 80               		dc.b $F8, 5, 0, $42, $80	; T
0000CBE2 F805 001C 90               		dc.b $F8, 5, 0, $1C, $90	; H
0000CBE7 F805 0010 A0               		dc.b $F8, 5, 0, $10, $A0	; E
0000CBEC F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CBF1 F805 0036 C0               		dc.b $F8, 5, 0, $36, $C0	; P
0000CBF6 F801 0020 D0               		dc.b $F8, 1, 0, $20, $D0	; I
0000CBFB F805 0018 D8               		dc.b $F8, 5, 0, $18, $D8	; G
0000CC00 F800 0056 E8               		dc.b $F8, 0, 0, $56, $E8	; Space
0000CC05 F805 0014 F8               		dc.b $F8, 5, 0, $14, $F8	; F
0000CC0A F805 003A 08               		dc.b $F8, 5, 0, $3A, $8	; R
0000CC0F F805 0032 18               		dc.b $F8, 5, 0, $32, $18	; O
0000CC14 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	; M
0000CC19 F800 0056 38               		dc.b $F8, 0, 0, $56, $38	; Space
0000CC1E F805 0004 48               		dc.b $F8, 5, 0, 4, $48		; B
0000CC23 F805 0000 58               		dc.b $F8, 5, 0, 0, $58		; A
0000CC28 F805 003A 68               		dc.b $F8, 5, 0, $3A, $68	; R
0000CC2D F805 002E 78               		dc.b $F8, 5, 0, $2E, $78	; N
0000CC32 F805 004A 88               		dc.b $F8, 5, 0, $4A, $88	; Y
0000CC37 F805 0000 98               		dc.b $F8, 5, 0, 0, $98		; A
0000CC3C F805 003A A8               		dc.b $F8, 5, 0, $3A, $A8	; R
0000CC41 F805 000C B8               		dc.b $F8, 5, 0, $0C, $B8	; D
0000CC46 07                         byte_CADC:	dc.b 7	;  SCRAP BRAIN | Z Z Z Z
0000CC47 F805 004E 80               		dc.b $F8, 5, 0, $4E, $80	; Z
0000CC4C F800 0056 90               		dc.b $F8, 0, 0, $56, $90	; Space
0000CC51 F805 004E A0               		dc.b $F8, 5, 0, $4E, $A0	; Z
0000CC56 F800 0056 B0               		dc.b $F8, 0, 0, $56, $B0	; Space
0000CC5B F805 004E C0               		dc.b $F8, 5, 0, $4E, $C0	; Z
0000CC60 F800 0056 D0               		dc.b $F8, 0, 0, $56, $D0	; Space
0000CC65 F805 004E E0               		dc.b $F8, 5, 0, $4E, $E0	; Z
0000CC6A 04                         byte_CB10:	dc.b 4			; ZONE
0000CC6B F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000CC70 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000CC75 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000CC7A F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CC7F 00                         		dc.b 0
0000CC80 02                         byte_CB26:	dc.b 2			; ACT 1
0000CC81 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CC86 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000CC8B 02                         byte_CB31:	dc.b 2			; ACT 2
0000CC8C 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CC91 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000CC96 02                         byte_CB3C:	dc.b 2			; ACT 3
0000CC97 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CC9C F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000CCA1 0D                         byte_CB47:	dc.b $D			; Oval
0000CCA2 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000CCA7 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000CCAC EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000CCB1 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000CCB6 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000CCBB 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000CCC0 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000CCC5 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000CCCA EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000CCCF F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000CCD4 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000CCD9 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000CCDE 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000CCE3 00                         		dc.b 0
0000CCE4 05                         byte_CB8A:	dc.b 5			; FINAL
0000CCE5 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000CCEA F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000CCEF F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CCF4 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000CCF9 F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000CCFE                            		even
0000CCFE                            ; ---------------------------------------------------------------------------
0000CCFE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CCFE                            ; ---------------------------------------------------------------------------
0000CCFE                            Map_obj39:
0000CCFE                            	include "_maps\obj39.asm"
0000CCFE                            ; ---------------------------------------------------------------------------
0000CCFE                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CCFE                            ; ---------------------------------------------------------------------------
0000CCFE 0000                       		dc.w byte_CBAC-Map_obj39
0000CD00 0000                       		dc.w byte_CBB7-Map_obj39
0000CD02 0000                       		dc.w byte_CBC2-Map_obj39
0000CD04 0000                       		dc.w byte_CBCD-Map_obj39
0000CD06 02                         byte_CBAC:	dc.b 2
0000CD07 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000CD0C F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000CD11 02                         byte_CBB7:	dc.b 2
0000CD12 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000CD17 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000CD1C 02                         byte_CBC2:	dc.b 2
0000CD1D F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000CD22 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000CD27 02                         byte_CBCD:	dc.b 2
0000CD28 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000CD2D F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000CD32                            		even
0000CD32                            		even
0000CD32                            
0000CD32                            ; ---------------------------------------------------------------------------
0000CD32                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000CD32                            ; ---------------------------------------------------------------------------
0000CD32 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000CD34 0000                       		dc.w byte_CC13-Map_obj3A
0000CD36 0000                       		dc.w byte_CC32-Map_obj3A
0000CD38 0000                       		dc.w byte_CC51-Map_obj3A
0000CD3A 0000                       		dc.w byte_CC75-Map_obj3A
0000CD3C FF6F                       		dc.w byte_CB47-Map_obj3A
0000CD3E FF4E                       		dc.w byte_CB26-Map_obj3A
0000CD40 FF59                       		dc.w byte_CB31-Map_obj3A
0000CD42 FF64                       		dc.w byte_CB3C-Map_obj3A
0000CD44 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000CD45 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000CD4A F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000CD4F F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000CD54 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000CD59 F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000CD5E F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000CD63 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000CD68 F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000CD6D F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000CD72 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000CD77 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000CD7C F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000CD81 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000CD86 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000CD8B F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000CD90 06                         byte_CC13:	dc.b 6			; PASSED
0000CD91 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000CD96 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CD9B F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000CDA0 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000CDA5 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CDAA F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000CDAF 06                         byte_CC32:	dc.b 6			; SCORE
0000CDB0 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CDB5 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CDBA F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CDBF F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CDC4 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CDC9 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CDCE 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000CDCF F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000CDD4 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CDD9 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CDDE F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CDE3 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CDE8 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000CDED F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CDF2 07                         byte_CC75:	dc.b 7			; RING BONUS
0000CDF3 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CDF8 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CDFD F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CE02 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CE07 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CE0C F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CE11 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CE16                            		even
0000CE16                            ; ---------------------------------------------------------------------------
0000CE16                            ; Sprite mappings - special stage results screen
0000CE16                            ; ---------------------------------------------------------------------------
0000CE16 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000CE18 0000                       		dc.w byte_CCEE-Map_obj7E
0000CE1A 0000                       		dc.w byte_CD0D-Map_obj7E
0000CE1C FE8B                       		dc.w byte_CB47-Map_obj7E
0000CE1E 0000                       		dc.w byte_CD31-Map_obj7E
0000CE20 0000                       		dc.w byte_CD46-Map_obj7E
0000CE22 0000                       		dc.w byte_CD5B-Map_obj7E
0000CE24 0000                       		dc.w byte_CD6B-Map_obj7E
0000CE26 0000                       		dc.w byte_CDA8-Map_obj7E
0000CE28 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000CE29 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000CE2E F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000CE33 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000CE38 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000CE3D F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000CE42 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000CE47 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000CE4C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CE51 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000CE56 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000CE5B F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000CE60 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000CE65 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000CE6A 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000CE6B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CE70 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CE75 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CE7A F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CE7F F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CE84 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CE89 07                         byte_CD0D:	dc.b 7
0000CE8A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CE8F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CE94 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CE99 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CE9E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CEA3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CEA8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CEAD 04                         byte_CD31:	dc.b 4
0000CEAE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CEB3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CEB8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CEBD F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000CEC2 04                         byte_CD46:	dc.b 4
0000CEC3 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CEC8 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CECD F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CED2 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000CED7 03                         byte_CD5B:	dc.b 3
0000CED8 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CEDD F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CEE2 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CEE7 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000CEE8 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000CEED F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000CEF2 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000CEF7 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000CEFC F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CF01 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000CF06 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000CF0B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000CF10 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CF15 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000CF1A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000CF1F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000CF24 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000CF25 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000CF2A F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000CF2F F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000CF34 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000CF39 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000CF3E F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000CF43 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000CF48 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000CF4D F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000CF52 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000CF57 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000CF5C F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000CF61 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000CF66 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000CF6B F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000CF70                            		even
0000CF70                            ; ---------------------------------------------------------------------------
0000CF70                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CF70                            ; ---------------------------------------------------------------------------
0000CF70                            Map_obj7F:
0000CF70                            	include "_maps\obj7F.asm"
0000CF70                            ; ---------------------------------------------------------------------------
0000CF70                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CF70                            ; ---------------------------------------------------------------------------
0000CF70 0000                       		dc.w byte_CE02-Map_obj7F
0000CF72 0000                       		dc.w byte_CE08-Map_obj7F
0000CF74 0000                       		dc.w byte_CE0E-Map_obj7F
0000CF76 0000                       		dc.w byte_CE14-Map_obj7F
0000CF78 0000                       		dc.w byte_CE1A-Map_obj7F
0000CF7A 0000                       		dc.w byte_CE20-Map_obj7F
0000CF7C 0000                       		dc.w byte_CE26-Map_obj7F
0000CF7E 01                         byte_CE02:	dc.b 1
0000CF7F F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000CF84 01                         byte_CE08:	dc.b 1
0000CF85 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CF8A 01                         byte_CE0E:	dc.b 1
0000CF8B F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000CF90 01                         byte_CE14:	dc.b 1
0000CF91 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000CF96 01                         byte_CE1A:	dc.b 1
0000CF97 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000CF9C 01                         byte_CE20:	dc.b 1
0000CF9D F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000CFA2 00                         byte_CE26:	dc.b 0			; Blank frame
0000CFA4 00                         		even
0000CFA4 00                         		even
0000CFA4                            
0000CFA4                            ; ===========================================================================
0000CFA4                            ; ---------------------------------------------------------------------------
0000CFA4                            ; Object 36 - spikes
0000CFA4                            ; ---------------------------------------------------------------------------
0000CFA4                            
0000CFA4                            Obj36:					; XREF: Obj_Index
0000CFA4 7000                       		moveq	#0,d0
0000CFA6 1028 0024                  		move.b	$24(a0),d0
0000CFAA 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000CFAE 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000CFB2                            ; ===========================================================================
0000CFB2 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000CFB4 0000                       		dc.w Obj36_Solid-Obj36_Index
0000CFB6                            
0000CFB6 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000CFB8 0110                       		dc.b 1,	$10
0000CFBA 0204                       		dc.b 2,	4
0000CFBC 031C                       		dc.b 3,	$1C
0000CFBE 0440                       		dc.b 4,	$40
0000CFC0 0510                       		dc.b 5,	$10
0000CFC2                            ; ===========================================================================
0000CFC2                            
0000CFC2                            Obj36_Main:				; XREF: Obj36_Index
0000CFC2 5428 0024                  		addq.b	#2,$24(a0)
0000CFC6 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000CFCE 317C 051B 0002             		move.w	#$51B,2(a0)
0000CFD4 0028 0004 0001             		ori.b	#4,1(a0)
0000CFDA 117C 0004 0018             		move.b	#4,$18(a0)
0000CFE0 1028 0028                  		move.b	$28(a0),d0
0000CFE4 0228 000F 0028             		andi.b	#$F,$28(a0)
0000CFEA 0240 00F0                  		andi.w	#$F0,d0
0000CFEE 43F9 0000 CFB6             		lea	(Obj36_Var).l,a1
0000CFF4 E648                       		lsr.w	#3,d0
0000CFF6 D2C0                       		adda.w	d0,a1
0000CFF8 1159 001A                  		move.b	(a1)+,$1A(a0)
0000CFFC 1159 0019                  		move.b	(a1)+,$19(a0)
0000D000 3168 0008 0030             		move.w	8(a0),$30(a0)
0000D006 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000D00C                            
0000D00C                            Obj36_Solid:				; XREF: Obj36_Index
0000D00C 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000D010 343C 0004                  		move.w	#4,d2
0000D014 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000D01A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000D01C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000D022 6600                       		bne.s	Obj36_Upright	; if not, branch
0000D024 343C 0014                  		move.w	#$14,d2
0000D028                            
0000D028                            ; Spikes types $1x and $5x face	sideways
0000D028                            
0000D028                            Obj36_SideWays:				; XREF: Obj36_Solid
0000D028 323C 001B                  		move.w	#$1B,d1
0000D02C 3602                       		move.w	d2,d3
0000D02E 5243                       		addq.w	#1,d3
0000D030 3828 0008                  		move.w	8(a0),d4
0000D034 6100 0000                  		bsr.w	SolidObject
0000D038 0828 0003 0022             		btst	#3,$22(a0)
0000D03E 6600                       		bne.s	Obj36_Display
0000D040 0C44 0001                  		cmpi.w	#1,d4
0000D044 6700                       		beq.s	Obj36_Hurt
0000D046 6000                       		bra.s	Obj36_Display
0000D048                            ; ===========================================================================
0000D048                            
0000D048                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000D048                            
0000D048                            Obj36_Upright:				; XREF: Obj36_Solid
0000D048 7200                       		moveq	#0,d1
0000D04A 1228 0019                  		move.b	$19(a0),d1
0000D04E 0641 000B                  		addi.w	#$B,d1
0000D052 343C 0010                  		move.w	#$10,d2
0000D056 363C 0011                  		move.w	#$11,d3
0000D05A 3828 0008                  		move.w	8(a0),d4
0000D05E 6100 0000                  		bsr.w	SolidObject
0000D062 0828 0003 0022             		btst	#3,$22(a0)
0000D068 6600                       		bne.s	Obj36_Hurt
0000D06A 4A44                       		tst.w	d4
0000D06C 6A00                       		bpl.s	Obj36_Display
0000D06E                            
0000D06E                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000D06E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000D072 6600                       		bne.s	Obj36_Display	; if yes, branch
0000D074 2F08                       		move.l	a0,-(sp)
0000D076 2448                       		movea.l	a0,a2
0000D078 41F8 D000                  		lea	($FFFFD000).w,a0
0000D07C 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D082 6400                       		bcc.s	loc_CF20
0000D084 2628 000C                  		move.l	$C(a0),d3
0000D088 3028 0012                  		move.w	$12(a0),d0
0000D08C 48C0                       		ext.l	d0
0000D08E E180                       		asl.l	#8,d0
0000D090 9680                       		sub.l	d0,d3
0000D092 2143 000C                  		move.l	d3,$C(a0)
0000D096 4EB9 0000 0000             		jsr	HurtSonic
0000D09C                            
0000D09C                            loc_CF20:
0000D09C 205F                       		movea.l	(sp)+,a0
0000D09E                            
0000D09E                            Obj36_Display:
0000D09E 6100 0000                  		bsr.w	DisplaySprite
0000D0A2 3028 0030                  		move.w	$30(a0),d0
0000D0A6 0240 FF80                  		andi.w	#$FF80,d0
0000D0AA 3238 F700                  		move.w	($FFFFF700).w,d1
0000D0AE 0441 0080                  		subi.w	#$80,d1
0000D0B2 0241 FF80                  		andi.w	#$FF80,d1
0000D0B6 9041                       		sub.w	d1,d0
0000D0B8 0C40 0280                  		cmpi.w	#$280,d0
0000D0BC 6200 0000                  		bhi.w	DeleteObject
0000D0C0 4E75                       		rts	
0000D0C2                            ; ===========================================================================
0000D0C2                            
0000D0C2                            Obj36_Type0x:				; XREF: Obj36_Solid
0000D0C2 7000                       		moveq	#0,d0
0000D0C4 1028 0028                  		move.b	$28(a0),d0
0000D0C8 D040                       		add.w	d0,d0
0000D0CA 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000D0CE 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000D0D2                            ; ===========================================================================
0000D0D2 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000D0D4 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000D0D6 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000D0D8                            ; ===========================================================================
0000D0D8                            
0000D0D8                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000D0D8 4E75                       		rts			; don't move the object
0000D0DA                            ; ===========================================================================
0000D0DA                            
0000D0DA                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000D0DA 6100 0000                  		bsr.w	Obj36_Wait
0000D0DE 7000                       		moveq	#0,d0
0000D0E0 1028 0034                  		move.b	$34(a0),d0
0000D0E4 D068 0032                  		add.w	$32(a0),d0
0000D0E8 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000D0EC 4E75                       		rts	
0000D0EE                            ; ===========================================================================
0000D0EE                            
0000D0EE                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000D0EE 6100 0000                  		bsr.w	Obj36_Wait
0000D0F2 7000                       		moveq	#0,d0
0000D0F4 1028 0034                  		move.b	$34(a0),d0
0000D0F8 D068 0030                  		add.w	$30(a0),d0
0000D0FC 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000D100 4E75                       		rts	
0000D102                            ; ===========================================================================
0000D102                            
0000D102                            Obj36_Wait:
0000D102 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000D106 6700                       		beq.s	loc_CFA4	; if yes, branch
0000D108 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000D10C 6600                       		bne.s	locret_CFE6
0000D10E 4A28 0001                  		tst.b	1(a0)
0000D112 6A00                       		bpl.s	locret_CFE6
0000D114 303C 00B6                  		move.w	#$B6,d0
0000D118 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000D11E 6000                       		bra.s	locret_CFE6
0000D120                            ; ===========================================================================
0000D120                            
0000D120                            loc_CFA4:
0000D120 4A68 0036                  		tst.w	$36(a0)
0000D124 6700                       		beq.s	loc_CFC6
0000D126 0468 0800 0034             		subi.w	#$800,$34(a0)
0000D12C 6400                       		bcc.s	locret_CFE6
0000D12E 317C 0000 0034             		move.w	#0,$34(a0)
0000D134 317C 0000 0036             		move.w	#0,$36(a0)
0000D13A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D140 6000                       		bra.s	locret_CFE6
0000D142                            ; ===========================================================================
0000D142                            
0000D142                            loc_CFC6:
0000D142 0668 0800 0034             		addi.w	#$800,$34(a0)
0000D148 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000D14E 6500                       		bcs.s	locret_CFE6
0000D150 317C 2000 0034             		move.w	#$2000,$34(a0)
0000D156 317C 0001 0036             		move.w	#1,$36(a0)
0000D15C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000D162                            
0000D162                            locret_CFE6:
0000D162 4E75                       		rts	
0000D164                            ; ===========================================================================
0000D164                            ; ---------------------------------------------------------------------------
0000D164                            ; Sprite mappings - spikes
0000D164                            ; ---------------------------------------------------------------------------
0000D164                            Map_obj36:
0000D164                            	include "_maps\obj36.asm"
0000D164                            ; ---------------------------------------------------------------------------
0000D164                            ; Sprite mappings - spikes
0000D164                            ; ---------------------------------------------------------------------------
0000D164 0000                       		dc.w byte_CFF4-Map_obj36
0000D166 0000                       		dc.w byte_D004-Map_obj36
0000D168 0000                       		dc.w byte_D014-Map_obj36
0000D16A 0000                       		dc.w byte_D01A-Map_obj36
0000D16C 0000                       		dc.w byte_D02A-Map_obj36
0000D16E 0000                       		dc.w byte_D049-Map_obj36
0000D170 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000D171 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000D176 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D17B F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000D180 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000D181 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000D186 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D18B 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000D190 01                         byte_D014:	dc.b 1			; 1 spike
0000D191 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D196 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000D197 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000D19C F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000D1A1 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000D1A6 06                         byte_D02A:	dc.b 6			; 6 spikes
0000D1A7 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000D1AC F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000D1B1 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000D1B6 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000D1BB F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000D1C0 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000D1C5 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000D1C6 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000D1CC 00                         		even
0000D1CC 00                         		even
0000D1CC                            
0000D1CC                            ; ===========================================================================
0000D1CC                            ; ---------------------------------------------------------------------------
0000D1CC                            ; Object 3B - purple rock (GHZ)
0000D1CC                            ; ---------------------------------------------------------------------------
0000D1CC                            
0000D1CC                            Obj3B:					; XREF: Obj_Index
0000D1CC 7000                       		moveq	#0,d0
0000D1CE 1028 0024                  		move.b	$24(a0),d0
0000D1D2 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D1D6 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D1DA                            ; ===========================================================================
0000D1DA 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D1DC 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D1DE                            ; ===========================================================================
0000D1DE                            
0000D1DE                            Obj3B_Main:				; XREF: Obj3B_Index
0000D1DE 5428 0024                  		addq.b	#2,$24(a0)
0000D1E2 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D1EA 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D1F0 117C 0004 0001             		move.b	#4,1(a0)
0000D1F6 117C 0013 0019             		move.b	#$13,$19(a0)
0000D1FC 117C 0004 0018             		move.b	#4,$18(a0)
0000D202                            
0000D202                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D202 323C 001B                  		move.w	#$1B,d1
0000D206 343C 0010                  		move.w	#$10,d2
0000D20A 363C 0010                  		move.w	#$10,d3
0000D20E 3828 0008                  		move.w	8(a0),d4
0000D212 6100 0000                  		bsr.w	SolidObject
0000D216 6100 0000                  		bsr.w	DisplaySprite
0000D21A 3028 0008                  		move.w	8(a0),d0
0000D21E 0240 FF80                  		andi.w	#$FF80,d0
0000D222 3238 F700                  		move.w	($FFFFF700).w,d1
0000D226 0441 0080                  		subi.w	#$80,d1
0000D22A 0241 FF80                  		andi.w	#$FF80,d1
0000D22E 9041                       		sub.w	d1,d0
0000D230 0C40 0280                  		cmpi.w	#$280,d0
0000D234 6200 0000                  		bhi.w	DeleteObject
0000D238 4E75                       		rts	
0000D23A                            ; ===========================================================================
0000D23A                            ; ---------------------------------------------------------------------------
0000D23A                            ; Object 49 - waterfall	sound effect (GHZ)
0000D23A                            ; ---------------------------------------------------------------------------
0000D23A                            
0000D23A                            Obj49:					; XREF: Obj_Index
0000D23A 7000                       		moveq	#0,d0
0000D23C 1028 0024                  		move.b	$24(a0),d0
0000D240 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D244 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D248                            ; ===========================================================================
0000D248 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D24A 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D24C                            ; ===========================================================================
0000D24C                            
0000D24C                            Obj49_Main:				; XREF: Obj49_Index
0000D24C 5428 0024                  		addq.b	#2,$24(a0)
0000D250 117C 0004 0001             		move.b	#4,1(a0)
0000D256                            
0000D256                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D256 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D25A 0200 003F                  		andi.b	#$3F,d0
0000D25E 6600                       		bne.s	Obj49_ChkDel
0000D260 303C 00D0                  		move.w	#$D0,d0
0000D264 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D26A                            
0000D26A                            Obj49_ChkDel:
0000D26A 3028 0008                  		move.w	8(a0),d0
0000D26E 0240 FF80                  		andi.w	#$FF80,d0
0000D272 3238 F700                  		move.w	($FFFFF700).w,d1
0000D276 0441 0080                  		subi.w	#$80,d1
0000D27A 0241 FF80                  		andi.w	#$FF80,d1
0000D27E 9041                       		sub.w	d1,d0
0000D280 0C40 0280                  		cmpi.w	#$280,d0
0000D284 6200 0000                  		bhi.w	DeleteObject
0000D288 4E75                       		rts	
0000D28A                            ; ===========================================================================
0000D28A                            ; ---------------------------------------------------------------------------
0000D28A                            ; Sprite mappings - purple rock	(GHZ)
0000D28A                            ; ---------------------------------------------------------------------------
0000D28A                            Map_obj3B:
0000D28A                            	include "_maps\obj3B.asm"
0000D28A                            ; ---------------------------------------------------------------------------
0000D28A                            ; Sprite mappings - purple rock	(GHZ)
0000D28A                            ; ---------------------------------------------------------------------------
0000D28A 0000                       		dc.w byte_D110-Map_obj3B
0000D28C 02                         byte_D110:	dc.b 2
0000D28D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D292 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D298 00                         		even
0000D298 00                         		even
0000D298                            
0000D298                            ; ===========================================================================
0000D298                            ; ---------------------------------------------------------------------------
0000D298                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D298                            ; ---------------------------------------------------------------------------
0000D298                            
0000D298                            Obj3C:					; XREF: Obj_Index
0000D298 7000                       		moveq	#0,d0
0000D29A 1028 0024                  		move.b	$24(a0),d0
0000D29E 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D2A2 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D2A6 6000 0000                  		bra.w	MarkObjGone
0000D2AA                            ; ===========================================================================
0000D2AA 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D2AC 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D2AE 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D2B0                            ; ===========================================================================
0000D2B0                            
0000D2B0                            Obj3C_Main:				; XREF: Obj3C_Index
0000D2B0 5428 0024                  		addq.b	#2,$24(a0)
0000D2B4 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D2BC 317C 450F 0002             		move.w	#$450F,2(a0)
0000D2C2 117C 0004 0001             		move.b	#4,1(a0)
0000D2C8 117C 0010 0019             		move.b	#$10,$19(a0)
0000D2CE 117C 0004 0018             		move.b	#4,$18(a0)
0000D2D4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D2DA                            
0000D2DA                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D2DA 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D2E0 323C 001B                  		move.w	#$1B,d1
0000D2E4 343C 0020                  		move.w	#$20,d2
0000D2E8 363C 0020                  		move.w	#$20,d3
0000D2EC 3828 0008                  		move.w	8(a0),d4
0000D2F0 6100 0000                  		bsr.w	SolidObject
0000D2F4 0828 0005 0022             		btst	#5,$22(a0)
0000D2FA 6600                       		bne.s	Obj3C_ChkRoll
0000D2FC                            
0000D2FC                            locret_D180:
0000D2FC 4E75                       		rts	
0000D2FE                            ; ===========================================================================
0000D2FE                            
0000D2FE                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D2FE 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D304 66F6                       		bne.s	locret_D180	; if not, branch
0000D306 3028 0030                  		move.w	$30(a0),d0
0000D30A 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D30C 4440                       		neg.w	d0
0000D30E                            
0000D30E                            Obj3C_ChkSpeed:
0000D30E 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D312 65E8                       		bcs.s	locret_D180	; if not, branch
0000D314 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D31A 5869 0008                  		addq.w	#4,8(a1)
0000D31E 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D324 3028 0008                  		move.w	8(a0),d0
0000D328 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D32C 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D32E 5169 0008                  		subq.w	#8,8(a1)
0000D332 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D338                            
0000D338                            Obj3C_Smash:
0000D338 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D33E 08A8 0005 0022             		bclr	#5,$22(a0)
0000D344 08A9 0005 0022             		bclr	#5,$22(a1)
0000D34A 7207                       		moveq	#7,d1		; load 8 fragments
0000D34C 343C 0070                  		move.w	#$70,d2
0000D350 6100                       		bsr.s	SmashObject
0000D352                            
0000D352                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D352 6100 0000                  		bsr.w	SpeedToPos
0000D356 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D35C 6100 0000                  		bsr.w	DisplaySprite
0000D360 4A28 0001                  		tst.b	1(a0)
0000D364 6A00 0000                  		bpl.w	DeleteObject
0000D368 4E75                       		rts	
0000D36A                            
0000D36A                            ; ---------------------------------------------------------------------------
0000D36A                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D36A                            ; ---------------------------------------------------------------------------
0000D36A                            
0000D36A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D36A                            
0000D36A                            
0000D36A                            SmashObject:				; XREF: Obj3C_Smash
0000D36A 7000                       		moveq	#0,d0
0000D36C 1028 001A                  		move.b	$1A(a0),d0
0000D370 D040                       		add.w	d0,d0
0000D372 2668 0004                  		movea.l	4(a0),a3
0000D376 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D37A 524B                       		addq.w	#1,a3
0000D37C 08E8 0005 0001             		bset	#5,1(a0)
0000D382 1810                       		move.b	0(a0),d4
0000D384 1A28 0001                  		move.b	1(a0),d5
0000D388 2248                       		movea.l	a0,a1
0000D38A 6000                       		bra.s	Smash_LoadFrag
0000D38C                            ; ===========================================================================
0000D38C                            
0000D38C                            Smash_Loop:
0000D38C 6100 0000                  		bsr.w	SingleObjLoad
0000D390 6600                       		bne.s	Smash_PlaySnd
0000D392 5A4B                       		addq.w	#5,a3
0000D394                            
0000D394                            Smash_LoadFrag:				; XREF: SmashObject
0000D394 137C 0004 0024             		move.b	#4,$24(a1)
0000D39A 1284                       		move.b	d4,0(a1)
0000D39C 234B 0004                  		move.l	a3,4(a1)
0000D3A0 1345 0001                  		move.b	d5,1(a1)
0000D3A4 3368 0008 0008             		move.w	8(a0),8(a1)
0000D3AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D3B0 3368 0002 0002             		move.w	2(a0),2(a1)
0000D3B6 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D3BC 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D3C2 335C 0010                  		move.w	(a4)+,$10(a1)
0000D3C6 335C 0012                  		move.w	(a4)+,$12(a1)
0000D3CA B3C8                       		cmpa.l	a0,a1
0000D3CC 6400                       		bcc.s	loc_D268
0000D3CE 2F08                       		move.l	a0,-(sp)
0000D3D0 2049                       		movea.l	a1,a0
0000D3D2 6100 0000                  		bsr.w	SpeedToPos
0000D3D6 D568 0012                  		add.w	d2,$12(a0)
0000D3DA 205F                       		movea.l	(sp)+,a0
0000D3DC 6100 0000                  		bsr.w	DisplaySprite2
0000D3E0                            
0000D3E0                            loc_D268:
0000D3E0 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D3E4                            
0000D3E4                            Smash_PlaySnd:
0000D3E4 303C 00CB                  		move.w	#$CB,d0
0000D3E8 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D3EE                            ; End of function SmashObject
0000D3EE                            
0000D3EE                            ; ===========================================================================
0000D3EE                            ; Smashed block	fragment speeds
0000D3EE                            ;
0000D3EE 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D3F2 0600 FF00                  		dc.w $600, $FF00
0000D3F6 0600 0100                  		dc.w $600, $100
0000D3FA 0400 0500                  		dc.w $400, $500
0000D3FE 0600 FA00                  		dc.w $600, $FA00
0000D402 0800 FE00                  		dc.w $800, $FE00
0000D406 0800 0200                  		dc.w $800, $200
0000D40A 0600 0600                  		dc.w $600, $600
0000D40E                            
0000D40E FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D412 F800 FE00                  		dc.w $F800, $FE00
0000D416 F800 0200                  		dc.w $F800, $200
0000D41A FA00 0600                  		dc.w $FA00, $600
0000D41E FC00 FB00                  		dc.w $FC00, $FB00
0000D422 FA00 FF00                  		dc.w $FA00, $FF00
0000D426 FA00 0100                  		dc.w $FA00, $100
0000D42A FC00 0500                  		dc.w $FC00, $500
0000D42E                            ; ---------------------------------------------------------------------------
0000D42E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D42E                            ; ---------------------------------------------------------------------------
0000D42E                            Map_obj3C:
0000D42E                            	include "_maps\obj3C.asm"
0000D42E                            ; ---------------------------------------------------------------------------
0000D42E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D42E                            ; ---------------------------------------------------------------------------
0000D42E 0000                       		dc.w byte_D2BC-Map_obj3C
0000D430 0000                       		dc.w byte_D2E5-Map_obj3C
0000D432 0000                       		dc.w byte_D30E-Map_obj3C
0000D434 08                         byte_D2BC:	dc.b 8
0000D435 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D43A F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D43F 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D444 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D449 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D44E F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D453 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D458 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D45D 08                         byte_D2E5:	dc.b 8
0000D45E E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D463 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D468 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D46D 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D472 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D477 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D47C 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D481 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D486 08                         byte_D30E:	dc.b 8
0000D487 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D48C F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D491 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D496 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D49B E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D4A0 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D4A5 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D4AA 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D4B0 00                         		even
0000D4B0 00                         		even
0000D4B0                            
0000D4B0                            ; ---------------------------------------------------------------------------
0000D4B0                            ; Object code loading subroutine
0000D4B0                            ; ---------------------------------------------------------------------------
0000D4B0                            
0000D4B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D4B0                            
0000D4B0                            
0000D4B0                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D4B0 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D4B4 7E7F                       		moveq	#$7F,d7
0000D4B6 7000                       		moveq	#0,d0
0000D4B8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D4BE 6400                       		bcc.s	loc_D362
0000D4C0                            
0000D4C0                            loc_D348:
0000D4C0 1010                       		move.b	(a0),d0		; load object number from RAM
0000D4C2 6700                       		beq.s	loc_D358
0000D4C4 D040                       		add.w	d0,d0
0000D4C6 D040                       		add.w	d0,d0
0000D4C8 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D4CC 4E91                       		jsr	(a1)		; run the object's code
0000D4CE 7000                       		moveq	#0,d0
0000D4D0                            
0000D4D0                            loc_D358:
0000D4D0 41E8 0040                  		lea	$40(a0),a0	; next object
0000D4D4 51CF FFEA                  		dbf	d7,loc_D348
0000D4D8 4E75                       		rts	
0000D4DA                            ; ===========================================================================
0000D4DA                            
0000D4DA                            loc_D362:
0000D4DA 7E1F                       		moveq	#$1F,d7
0000D4DC 61E2                       		bsr.s	loc_D348
0000D4DE 7E5F                       		moveq	#$5F,d7
0000D4E0                            
0000D4E0                            loc_D368:
0000D4E0 7000                       		moveq	#0,d0
0000D4E2 1010                       		move.b	(a0),d0
0000D4E4 6700                       		beq.s	loc_D378
0000D4E6 4A28 0001                  		tst.b	1(a0)
0000D4EA 6A00                       		bpl.s	loc_D378
0000D4EC 6100 0000                  		bsr.w	DisplaySprite
0000D4F0                            
0000D4F0                            loc_D378:
0000D4F0 41E8 0040                  		lea	$40(a0),a0
0000D4F4                            
0000D4F4                            loc_D37C:
0000D4F4 51CF FFEA                  		dbf	d7,loc_D368
0000D4F8 4E75                       		rts	
0000D4FA                            ; End of function ObjectsLoad
0000D4FA                            
0000D4FA                            ; ===========================================================================
0000D4FA                            ; ---------------------------------------------------------------------------
0000D4FA                            ; Object pointers
0000D4FA                            ; ---------------------------------------------------------------------------
0000D4FA                            Obj_Index:
0000D4FA                            	include "_inc\Object pointers.asm"
0000D4FA                            ; ---------------------------------------------------------------------------
0000D4FA                            ; Object pointers
0000D4FA                            ; ---------------------------------------------------------------------------
0000D4FA 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D50A 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D51A 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D52A 0000 0000 0000 A6F2 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D53A 0000 7432 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D54A 0000 7A58 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D55A 0000 82A6 0000 830E 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D56A 0000 8958 0000 8C46 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D57A 0000 0000 0000 98CA 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D58A 0000 9C02 0000 A1EE 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D59A 0000 9502 0000 8A2E 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D5AA 0000 AD7A 0000 A3D4 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D5BA 0000 B74C 0000 BDFA 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D5CA 0000 B2B0 0000 CFA4 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D5DA 0000 C580 0000 C63A 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D5EA 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D5FA 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D60A 0000 BA68 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000D61A 0000 D23A 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000D62A 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000D63A 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000D64A 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000D65A 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000D66A 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000D67A 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000D68A 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000D69A 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000D6AA 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000D6BA 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000D6CA 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000D6DA 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000D6EA 0000 0000 0000 C874 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000D6FA 0000 4F52 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000D70A 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000D71A 0000 560C 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D71A 0000 560C 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D72A                            
0000D72A                            ; ---------------------------------------------------------------------------
0000D72A                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000D72A                            ; ---------------------------------------------------------------------------
0000D72A                            
0000D72A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D72A                            
0000D72A                            
0000D72A                            ObjectFall:
0000D72A 2428 0008                  		move.l	8(a0),d2
0000D72E 2628 000C                  		move.l	$C(a0),d3
0000D732 3028 0010                  		move.w	$10(a0),d0
0000D736 48C0                       		ext.l	d0
0000D738 E180                       		asl.l	#8,d0
0000D73A D480                       		add.l	d0,d2
0000D73C 3028 0012                  		move.w	$12(a0),d0
0000D740 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000D746 48C0                       		ext.l	d0
0000D748 E180                       		asl.l	#8,d0
0000D74A D680                       		add.l	d0,d3
0000D74C 2142 0008                  		move.l	d2,8(a0)
0000D750 2143 000C                  		move.l	d3,$C(a0)
0000D754 4E75                       		rts	
0000D756                            ; End of function ObjectFall
0000D756                            
0000D756                            ; ---------------------------------------------------------------------------
0000D756                            ; Subroutine translating object	speed to update	object position
0000D756                            ; ---------------------------------------------------------------------------
0000D756                            
0000D756                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D756                            
0000D756                            
0000D756                            SpeedToPos:
0000D756 2428 0008                  		move.l	8(a0),d2
0000D75A 2628 000C                  		move.l	$C(a0),d3
0000D75E 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000D762 48C0                       		ext.l	d0
0000D764 E180                       		asl.l	#8,d0		; multiply speed by $100
0000D766 D480                       		add.l	d0,d2		; add to x-axis	position
0000D768 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000D76C 48C0                       		ext.l	d0
0000D76E E180                       		asl.l	#8,d0		; multiply by $100
0000D770 D680                       		add.l	d0,d3		; add to y-axis	position
0000D772 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000D776 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000D77A 4E75                       		rts	
0000D77C                            ; End of function SpeedToPos
0000D77C                            
0000D77C                            ; ---------------------------------------------------------------------------
0000D77C                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000D77C                            ; ---------------------------------------------------------------------------
0000D77C                            
0000D77C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D77C                            
0000D77C                            
0000D77C                            DisplaySprite:
0000D77C 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000D780 3028 0018                  		move.w	$18(a0),d0
0000D784 E248                       		lsr.w	#1,d0
0000D786 0240 0380                  		andi.w	#$380,d0
0000D78A D2C0                       		adda.w	d0,a1
0000D78C 0C51 007E                  		cmpi.w	#$7E,(a1)
0000D790 6400                       		bcc.s	locret_D620
0000D792 5451                       		addq.w	#2,(a1)
0000D794 D2D1                       		adda.w	(a1),a1
0000D796 3288                       		move.w	a0,(a1)
0000D798                            
0000D798                            locret_D620:
0000D798 4E75                       		rts	
0000D79A                            ; End of function DisplaySprite
0000D79A                            
0000D79A                            ; ---------------------------------------------------------------------------
0000D79A                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000D79A                            ; ---------------------------------------------------------------------------
0000D79A                            
0000D79A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D79A                            
0000D79A                            
0000D79A                            DisplaySprite2:
0000D79A 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000D79E 3029 0018                  		move.w	$18(a1),d0
0000D7A2 E248                       		lsr.w	#1,d0
0000D7A4 0240 0380                  		andi.w	#$380,d0
0000D7A8 D4C0                       		adda.w	d0,a2
0000D7AA 0C52 007E                  		cmpi.w	#$7E,(a2)
0000D7AE 6400                       		bcc.s	locret_D63E
0000D7B0 5452                       		addq.w	#2,(a2)
0000D7B2 D4D2                       		adda.w	(a2),a2
0000D7B4 3489                       		move.w	a1,(a2)
0000D7B6                            
0000D7B6                            locret_D63E:
0000D7B6 4E75                       		rts	
0000D7B8                            ; End of function DisplaySprite2
0000D7B8                            
0000D7B8                            ; ---------------------------------------------------------------------------
0000D7B8                            ; Subroutine to	delete an object
0000D7B8                            ; ---------------------------------------------------------------------------
0000D7B8                            
0000D7B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7B8                            
0000D7B8                            
0000D7B8                            DeleteObject:
0000D7B8 2248                       		movea.l	a0,a1
0000D7BA                            
0000D7BA                            DeleteObject2:
0000D7BA 7200                       		moveq	#0,d1
0000D7BC 700F                       		moveq	#$F,d0
0000D7BE                            
0000D7BE                            loc_D646:
0000D7BE 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000D7C0 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000D7C4 4E75                       		rts	
0000D7C6                            ; End of function DeleteObject
0000D7C6                            
0000D7C6                            ; ===========================================================================
0000D7C6 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000D7CA 00FF F700                  		dc.l $FFF700		; main screen x-position
0000D7CE 00FF F708                  		dc.l $FFF708		; background x-position	1
0000D7D2 00FF F718                  		dc.l $FFF718		; background x-position	2
0000D7D6                            ; ---------------------------------------------------------------------------
0000D7D6                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000D7D6                            ; ---------------------------------------------------------------------------
0000D7D6                            
0000D7D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D7D6                            
0000D7D6                            
0000D7D6                            BuildSprites:				; XREF: TitleScreen; et al
0000D7D6 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000D7DA 7A00                       		moveq	#0,d5
0000D7DC 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000D7E0 7E07                       		moveq	#7,d7
0000D7E2                            
0000D7E2                            loc_D66A:
0000D7E2 4A54                       		tst.w	(a4)
0000D7E4 6700 0000                  		beq.w	loc_D72E
0000D7E8 7C02                       		moveq	#2,d6
0000D7EA                            
0000D7EA                            loc_D672:
0000D7EA 3074 6000                  		movea.w	(a4,d6.w),a0
0000D7EE 4A10                       		tst.b	(a0)
0000D7F0 6700 0000                  		beq.w	loc_D726
0000D7F4 08A8 0007 0001             		bclr	#7,1(a0)
0000D7FA 1028 0001                  		move.b	1(a0),d0
0000D7FE 1800                       		move.b	d0,d4
0000D800 0240 000C                  		andi.w	#$C,d0
0000D804 6700                       		beq.s	loc_D6DE
0000D806 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000D80A 7000                       		moveq	#0,d0
0000D80C 1028 0019                  		move.b	$19(a0),d0
0000D810 3628 0008                  		move.w	8(a0),d3
0000D814 9651                       		sub.w	(a1),d3
0000D816 3203                       		move.w	d3,d1
0000D818 D240                       		add.w	d0,d1
0000D81A 6B00 0000                  		bmi.w	loc_D726
0000D81E 3203                       		move.w	d3,d1
0000D820 9240                       		sub.w	d0,d1
0000D822 0C41 0140                  		cmpi.w	#$140,d1
0000D826 6C00                       		bge.s	loc_D726
0000D828 0643 0080                  		addi.w	#$80,d3
0000D82C 0804 0004                  		btst	#4,d4
0000D830 6700                       		beq.s	loc_D6E8
0000D832 7000                       		moveq	#0,d0
0000D834 1028 0016                  		move.b	$16(a0),d0
0000D838 3428 000C                  		move.w	$C(a0),d2
0000D83C 9469 0004                  		sub.w	4(a1),d2
0000D840 3202                       		move.w	d2,d1
0000D842 D240                       		add.w	d0,d1
0000D844 6B00                       		bmi.s	loc_D726
0000D846 3202                       		move.w	d2,d1
0000D848 9240                       		sub.w	d0,d1
0000D84A 0C41 00E0                  		cmpi.w	#$E0,d1
0000D84E 6C00                       		bge.s	loc_D726
0000D850 0642 0080                  		addi.w	#$80,d2
0000D854 6000                       		bra.s	loc_D700
0000D856                            ; ===========================================================================
0000D856                            
0000D856                            loc_D6DE:
0000D856 3428 000A                  		move.w	$A(a0),d2
0000D85A 3628 0008                  		move.w	8(a0),d3
0000D85E 6000                       		bra.s	loc_D700
0000D860                            ; ===========================================================================
0000D860                            
0000D860                            loc_D6E8:
0000D860 3428 000C                  		move.w	$C(a0),d2
0000D864 9469 0004                  		sub.w	4(a1),d2
0000D868 0642 0080                  		addi.w	#$80,d2
0000D86C 0C42 0060                  		cmpi.w	#$60,d2
0000D870 6500                       		bcs.s	loc_D726
0000D872 0C42 0180                  		cmpi.w	#$180,d2
0000D876 6400                       		bcc.s	loc_D726
0000D878                            
0000D878                            loc_D700:
0000D878 2268 0004                  		movea.l	4(a0),a1
0000D87C 7200                       		moveq	#0,d1
0000D87E 0804 0005                  		btst	#5,d4
0000D882 6600                       		bne.s	loc_D71C
0000D884 1228 001A                  		move.b	$1A(a0),d1
0000D888 D201                       		add.b	d1,d1
0000D88A D2F1 1000                  		adda.w	(a1,d1.w),a1
0000D88E 1219                       		move.b	(a1)+,d1
0000D890 5301                       		subq.b	#1,d1
0000D892 6B00                       		bmi.s	loc_D720
0000D894                            
0000D894                            loc_D71C:
0000D894 6100 0000                  		bsr.w	sub_D750
0000D898                            
0000D898                            loc_D720:
0000D898 08E8 0007 0001             		bset	#7,1(a0)
0000D89E                            
0000D89E                            loc_D726:
0000D89E 5446                       		addq.w	#2,d6
0000D8A0 5554                       		subq.w	#2,(a4)
0000D8A2 6600 FF46                  		bne.w	loc_D672
0000D8A6                            
0000D8A6                            loc_D72E:
0000D8A6 49EC 0080                  		lea	$80(a4),a4
0000D8AA 51CF FF36                  		dbf	d7,loc_D66A
0000D8AE 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000D8B2 0C05 0050                  		cmpi.b	#$50,d5
0000D8B6 6700                       		beq.s	loc_D748
0000D8B8 24BC 0000 0000             		move.l	#0,(a2)
0000D8BE 4E75                       		rts	
0000D8C0                            ; ===========================================================================
0000D8C0                            
0000D8C0                            loc_D748:
0000D8C0 157C 0000 FFFB             		move.b	#0,-5(a2)
0000D8C6 4E75                       		rts	
0000D8C8                            ; End of function BuildSprites
0000D8C8                            
0000D8C8                            
0000D8C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8C8                            
0000D8C8                            
0000D8C8                            sub_D750:				; XREF: BuildSprites
0000D8C8 3668 0002                  		movea.w	2(a0),a3
0000D8CC 0804 0000                  		btst	#0,d4
0000D8D0 6600                       		bne.s	loc_D796
0000D8D2 0804 0001                  		btst	#1,d4
0000D8D6 6600 0000                  		bne.w	loc_D7E4
0000D8DA                            ; End of function sub_D750
0000D8DA                            
0000D8DA                            
0000D8DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D8DA                            
0000D8DA                            
0000D8DA                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000D8DA 0C05 0050                  		cmpi.b	#$50,d5
0000D8DE 6700                       		beq.s	locret_D794
0000D8E0 1019                       		move.b	(a1)+,d0
0000D8E2 4880                       		ext.w	d0
0000D8E4 D042                       		add.w	d2,d0
0000D8E6 34C0                       		move.w	d0,(a2)+
0000D8E8 14D9                       		move.b	(a1)+,(a2)+
0000D8EA 5205                       		addq.b	#1,d5
0000D8EC 14C5                       		move.b	d5,(a2)+
0000D8EE 1019                       		move.b	(a1)+,d0
0000D8F0 E148                       		lsl.w	#8,d0
0000D8F2 1019                       		move.b	(a1)+,d0
0000D8F4 D04B                       		add.w	a3,d0
0000D8F6 34C0                       		move.w	d0,(a2)+
0000D8F8 1019                       		move.b	(a1)+,d0
0000D8FA 4880                       		ext.w	d0
0000D8FC D043                       		add.w	d3,d0
0000D8FE 0240 01FF                  		andi.w	#$1FF,d0
0000D902 6600                       		bne.s	loc_D78E
0000D904 5240                       		addq.w	#1,d0
0000D906                            
0000D906                            loc_D78E:
0000D906 34C0                       		move.w	d0,(a2)+
0000D908 51C9 FFD0                  		dbf	d1,sub_D762
0000D90C                            
0000D90C                            locret_D794:
0000D90C 4E75                       		rts	
0000D90E                            ; End of function sub_D762
0000D90E                            
0000D90E                            ; ===========================================================================
0000D90E                            
0000D90E                            loc_D796:
0000D90E 0804 0001                  		btst	#1,d4
0000D912 6600 0000                  		bne.w	loc_D82A
0000D916                            
0000D916                            loc_D79E:
0000D916 0C05 0050                  		cmpi.b	#$50,d5
0000D91A 6700                       		beq.s	locret_D7E2
0000D91C 1019                       		move.b	(a1)+,d0
0000D91E 4880                       		ext.w	d0
0000D920 D042                       		add.w	d2,d0
0000D922 34C0                       		move.w	d0,(a2)+
0000D924 1819                       		move.b	(a1)+,d4
0000D926 14C4                       		move.b	d4,(a2)+
0000D928 5205                       		addq.b	#1,d5
0000D92A 14C5                       		move.b	d5,(a2)+
0000D92C 1019                       		move.b	(a1)+,d0
0000D92E E148                       		lsl.w	#8,d0
0000D930 1019                       		move.b	(a1)+,d0
0000D932 D04B                       		add.w	a3,d0
0000D934 0A40 0800                  		eori.w	#$800,d0
0000D938 34C0                       		move.w	d0,(a2)+
0000D93A 1019                       		move.b	(a1)+,d0
0000D93C 4880                       		ext.w	d0
0000D93E 4440                       		neg.w	d0
0000D940 D804                       		add.b	d4,d4
0000D942 0244 0018                  		andi.w	#$18,d4
0000D946 5044                       		addq.w	#8,d4
0000D948 9044                       		sub.w	d4,d0
0000D94A D043                       		add.w	d3,d0
0000D94C 0240 01FF                  		andi.w	#$1FF,d0
0000D950 6600                       		bne.s	loc_D7DC
0000D952 5240                       		addq.w	#1,d0
0000D954                            
0000D954                            loc_D7DC:
0000D954 34C0                       		move.w	d0,(a2)+
0000D956 51C9 FFBE                  		dbf	d1,loc_D79E
0000D95A                            
0000D95A                            locret_D7E2:
0000D95A 4E75                       		rts	
0000D95C                            ; ===========================================================================
0000D95C                            
0000D95C                            loc_D7E4:				; XREF: sub_D750
0000D95C 0C05 0050                  		cmpi.b	#$50,d5
0000D960 6700                       		beq.s	locret_D828
0000D962 1019                       		move.b	(a1)+,d0
0000D964 1811                       		move.b	(a1),d4
0000D966 4880                       		ext.w	d0
0000D968 4440                       		neg.w	d0
0000D96A E70C                       		lsl.b	#3,d4
0000D96C 0244 0018                  		andi.w	#$18,d4
0000D970 5044                       		addq.w	#8,d4
0000D972 9044                       		sub.w	d4,d0
0000D974 D042                       		add.w	d2,d0
0000D976 34C0                       		move.w	d0,(a2)+
0000D978 14D9                       		move.b	(a1)+,(a2)+
0000D97A 5205                       		addq.b	#1,d5
0000D97C 14C5                       		move.b	d5,(a2)+
0000D97E 1019                       		move.b	(a1)+,d0
0000D980 E148                       		lsl.w	#8,d0
0000D982 1019                       		move.b	(a1)+,d0
0000D984 D04B                       		add.w	a3,d0
0000D986 0A40 1000                  		eori.w	#$1000,d0
0000D98A 34C0                       		move.w	d0,(a2)+
0000D98C 1019                       		move.b	(a1)+,d0
0000D98E 4880                       		ext.w	d0
0000D990 D043                       		add.w	d3,d0
0000D992 0240 01FF                  		andi.w	#$1FF,d0
0000D996 6600                       		bne.s	loc_D822
0000D998 5240                       		addq.w	#1,d0
0000D99A                            
0000D99A                            loc_D822:
0000D99A 34C0                       		move.w	d0,(a2)+
0000D99C 51C9 FFBE                  		dbf	d1,loc_D7E4
0000D9A0                            
0000D9A0                            locret_D828:
0000D9A0 4E75                       		rts	
0000D9A2                            ; ===========================================================================
0000D9A2                            
0000D9A2                            loc_D82A:
0000D9A2 0C05 0050                  		cmpi.b	#$50,d5
0000D9A6 6700                       		beq.s	locret_D87C
0000D9A8 1019                       		move.b	(a1)+,d0
0000D9AA 1811                       		move.b	(a1),d4
0000D9AC 4880                       		ext.w	d0
0000D9AE 4440                       		neg.w	d0
0000D9B0 E70C                       		lsl.b	#3,d4
0000D9B2 0244 0018                  		andi.w	#$18,d4
0000D9B6 5044                       		addq.w	#8,d4
0000D9B8 9044                       		sub.w	d4,d0
0000D9BA D042                       		add.w	d2,d0
0000D9BC 34C0                       		move.w	d0,(a2)+
0000D9BE 1819                       		move.b	(a1)+,d4
0000D9C0 14C4                       		move.b	d4,(a2)+
0000D9C2 5205                       		addq.b	#1,d5
0000D9C4 14C5                       		move.b	d5,(a2)+
0000D9C6 1019                       		move.b	(a1)+,d0
0000D9C8 E148                       		lsl.w	#8,d0
0000D9CA 1019                       		move.b	(a1)+,d0
0000D9CC D04B                       		add.w	a3,d0
0000D9CE 0A40 1800                  		eori.w	#$1800,d0
0000D9D2 34C0                       		move.w	d0,(a2)+
0000D9D4 1019                       		move.b	(a1)+,d0
0000D9D6 4880                       		ext.w	d0
0000D9D8 4440                       		neg.w	d0
0000D9DA D804                       		add.b	d4,d4
0000D9DC 0244 0018                  		andi.w	#$18,d4
0000D9E0 5044                       		addq.w	#8,d4
0000D9E2 9044                       		sub.w	d4,d0
0000D9E4 D043                       		add.w	d3,d0
0000D9E6 0240 01FF                  		andi.w	#$1FF,d0
0000D9EA 6600                       		bne.s	loc_D876
0000D9EC 5240                       		addq.w	#1,d0
0000D9EE                            
0000D9EE                            loc_D876:
0000D9EE 34C0                       		move.w	d0,(a2)+
0000D9F0 51C9 FFB0                  		dbf	d1,loc_D82A
0000D9F4                            
0000D9F4                            locret_D87C:
0000D9F4 4E75                       		rts	
0000D9F6                            ; ---------------------------------------------------------------------------
0000D9F6                            ; Subroutine to	check if an object is on the screen
0000D9F6                            ; ---------------------------------------------------------------------------
0000D9F6                            
0000D9F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D9F6                            
0000D9F6                            
0000D9F6                            ChkObjOnScreen:
0000D9F6 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000D9FA 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000D9FE 6B00                       		bmi.s	NotOnScreen
0000DA00 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000DA04 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DA06                            
0000DA06 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000DA0A 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000DA0E 6B00                       		bmi.s	NotOnScreen
0000DA10 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000DA14 6C00                       		bge.s	NotOnScreen	; if not, branch
0000DA16                            
0000DA16 7000                       		moveq	#0,d0		; set flag to 0
0000DA18 4E75                       		rts	
0000DA1A                            ; ===========================================================================
0000DA1A                            
0000DA1A                            NotOnScreen:				; XREF: ChkObjOnScreen
0000DA1A 7001                       		moveq	#1,d0		; set flag to 1
0000DA1C 4E75                       		rts	
0000DA1E                            ; End of function ChkObjOnScreen
0000DA1E                            
0000DA1E                            
0000DA1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA1E                            
0000DA1E                            
0000DA1E                            ChkObjOnScreen2:
0000DA1E 7200                       		moveq	#0,d1
0000DA20 1228 0019                  		move.b	$19(a0),d1
0000DA24 3028 0008                  		move.w	8(a0),d0
0000DA28 9078 F700                  		sub.w	($FFFFF700).w,d0
0000DA2C D041                       		add.w	d1,d0
0000DA2E 6B00                       		bmi.s	NotOnScreen2
0000DA30 D241                       		add.w	d1,d1
0000DA32 9041                       		sub.w	d1,d0
0000DA34 0C40 0140                  		cmpi.w	#320,d0
0000DA38 6C00                       		bge.s	NotOnScreen2
0000DA3A                            
0000DA3A 3228 000C                  		move.w	$C(a0),d1
0000DA3E 9278 F704                  		sub.w	($FFFFF704).w,d1
0000DA42 6B00                       		bmi.s	NotOnScreen2
0000DA44 0C41 00E0                  		cmpi.w	#224,d1
0000DA48 6C00                       		bge.s	NotOnScreen2
0000DA4A                            
0000DA4A 7000                       		moveq	#0,d0
0000DA4C 4E75                       		rts	
0000DA4E                            ; ===========================================================================
0000DA4E                            
0000DA4E                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000DA4E 7001                       		moveq	#1,d0
0000DA50 4E75                       		rts	
0000DA52                            ; End of function ChkObjOnScreen2
0000DA52                            
0000DA52                            ; ---------------------------------------------------------------------------
0000DA52                            ; Subroutine to	load a level's objects
0000DA52                            ; ---------------------------------------------------------------------------
0000DA52                            
0000DA52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA52                            
0000DA52                            
0000DA52                            ObjPosLoad:				; XREF: Level; et al
0000DA52 7000                       		moveq	#0,d0
0000DA54 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000DA58 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000DA5C 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000DA60                            ; End of function ObjPosLoad
0000DA60                            
0000DA60                            ; ===========================================================================
0000DA60 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000DA62 0000                       		dc.w OPL_Next-OPL_Index
0000DA64                            ; ===========================================================================
0000DA64                            
0000DA64                            OPL_Main:				; XREF: OPL_Index
0000DA64 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000DA68 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000DA6C ED08                       		lsl.b	#6,d0
0000DA6E E848                       		lsr.w	#4,d0
0000DA70 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000DA76 2248                       		movea.l	a0,a1
0000DA78 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000DA7C 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DA80 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DA84 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000DA88 21C9 F778                  		move.l	a1,($FFFFF778).w
0000DA8C 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000DA90 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DA94 34FC 0101                  		move.w	#$101,(a2)+
0000DA98 303C 005E                  		move.w	#$5E,d0
0000DA9C                            
0000DA9C                            OPL_ClrList:
0000DA9C 429A                       		clr.l	(a2)+
0000DA9E 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000DAA2                            
0000DAA2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DAA6 7400                       		moveq	#0,d2
0000DAA8 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DAAC 0446 0080                  		subi.w	#$80,d6
0000DAB0 6400                       		bcc.s	loc_D93C
0000DAB2 7C00                       		moveq	#0,d6
0000DAB4                            
0000DAB4                            loc_D93C:
0000DAB4 0246 FF80                  		andi.w	#$FF80,d6
0000DAB8 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DABC                            
0000DABC                            loc_D944:
0000DABC BC50                       		cmp.w	(a0),d6
0000DABE 6300                       		bls.s	loc_D956
0000DAC0 4A28 0004                  		tst.b	4(a0)
0000DAC4 6A00                       		bpl.s	loc_D952
0000DAC6 1412                       		move.b	(a2),d2
0000DAC8 5212                       		addq.b	#1,(a2)
0000DACA                            
0000DACA                            loc_D952:
0000DACA 5C48                       		addq.w	#6,a0
0000DACC 60EE                       		bra.s	loc_D944
0000DACE                            ; ===========================================================================
0000DACE                            
0000DACE                            loc_D956:
0000DACE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DAD2 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DAD6 0446 0080                  		subi.w	#$80,d6
0000DADA 6500                       		bcs.s	loc_D976
0000DADC                            
0000DADC                            loc_D964:
0000DADC BC50                       		cmp.w	(a0),d6
0000DADE 6300                       		bls.s	loc_D976
0000DAE0 4A28 0004                  		tst.b	4(a0)
0000DAE4 6A00                       		bpl.s	loc_D972
0000DAE6 522A 0001                  		addq.b	#1,1(a2)
0000DAEA                            
0000DAEA                            loc_D972:
0000DAEA 5C48                       		addq.w	#6,a0
0000DAEC 60EE                       		bra.s	loc_D964
0000DAEE                            ; ===========================================================================
0000DAEE                            
0000DAEE                            loc_D976:
0000DAEE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DAF2 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000DAF8                            
0000DAF8                            OPL_Next:				; XREF: OPL_Index
0000DAF8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000DAFC 7400                       		moveq	#0,d2
0000DAFE 3C38 F700                  		move.w	($FFFFF700).w,d6
0000DB02 0246 FF80                  		andi.w	#$FF80,d6
0000DB06 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000DB0A 6700 0000                  		beq.w	locret_DA3A
0000DB0E 6C00                       		bge.s	loc_D9F6
0000DB10 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DB14 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DB18 0446 0080                  		subi.w	#$80,d6
0000DB1C 6500                       		bcs.s	loc_D9D2
0000DB1E                            
0000DB1E                            loc_D9A6:
0000DB1E BC68 FFFA                  		cmp.w	-6(a0),d6
0000DB22 6C00                       		bge.s	loc_D9D2
0000DB24 5D48                       		subq.w	#6,a0
0000DB26 4A28 0004                  		tst.b	4(a0)
0000DB2A 6A00                       		bpl.s	loc_D9BC
0000DB2C 532A 0001                  		subq.b	#1,1(a2)
0000DB30 142A 0001                  		move.b	1(a2),d2
0000DB34                            
0000DB34                            loc_D9BC:
0000DB34 6100 0000                  		bsr.w	loc_DA3C
0000DB38 6600                       		bne.s	loc_D9C6
0000DB3A 5D48                       		subq.w	#6,a0
0000DB3C 60E0                       		bra.s	loc_D9A6
0000DB3E                            ; ===========================================================================
0000DB3E                            
0000DB3E                            loc_D9C6:
0000DB3E 4A28 0004                  		tst.b	4(a0)
0000DB42 6A00                       		bpl.s	loc_D9D0
0000DB44 522A 0001                  		addq.b	#1,1(a2)
0000DB48                            
0000DB48                            loc_D9D0:
0000DB48 5C48                       		addq.w	#6,a0
0000DB4A                            
0000DB4A                            loc_D9D2:
0000DB4A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DB4E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DB52 0646 0300                  		addi.w	#$300,d6
0000DB56                            
0000DB56                            loc_D9DE:
0000DB56 BC68 FFFA                  		cmp.w	-6(a0),d6
0000DB5A 6E00                       		bgt.s	loc_D9F0
0000DB5C 4A28 FFFE                  		tst.b	-2(a0)
0000DB60 6A00                       		bpl.s	loc_D9EC
0000DB62 5312                       		subq.b	#1,(a2)
0000DB64                            
0000DB64                            loc_D9EC:
0000DB64 5D48                       		subq.w	#6,a0
0000DB66 60EE                       		bra.s	loc_D9DE
0000DB68                            ; ===========================================================================
0000DB68                            
0000DB68                            loc_D9F0:
0000DB68 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DB6C 4E75                       		rts	
0000DB6E                            ; ===========================================================================
0000DB6E                            
0000DB6E                            loc_D9F6:
0000DB6E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000DB72 2078 F770                  		movea.l	($FFFFF770).w,a0
0000DB76 0646 0280                  		addi.w	#$280,d6
0000DB7A                            
0000DB7A                            loc_DA02:
0000DB7A BC50                       		cmp.w	(a0),d6
0000DB7C 6300                       		bls.s	loc_DA16
0000DB7E 4A28 0004                  		tst.b	4(a0)
0000DB82 6A00                       		bpl.s	loc_DA10
0000DB84 1412                       		move.b	(a2),d2
0000DB86 5212                       		addq.b	#1,(a2)
0000DB88                            
0000DB88                            loc_DA10:
0000DB88 6100 0000                  		bsr.w	loc_DA3C
0000DB8C 67EC                       		beq.s	loc_DA02
0000DB8E                            
0000DB8E                            loc_DA16:
0000DB8E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000DB92 2078 F774                  		movea.l	($FFFFF774).w,a0
0000DB96 0446 0300                  		subi.w	#$300,d6
0000DB9A 6500                       		bcs.s	loc_DA36
0000DB9C                            
0000DB9C                            loc_DA24:
0000DB9C BC50                       		cmp.w	(a0),d6
0000DB9E 6300                       		bls.s	loc_DA36
0000DBA0 4A28 0004                  		tst.b	4(a0)
0000DBA4 6A00                       		bpl.s	loc_DA32
0000DBA6 522A 0001                  		addq.b	#1,1(a2)
0000DBAA                            
0000DBAA                            loc_DA32:
0000DBAA 5C48                       		addq.w	#6,a0
0000DBAC 60EE                       		bra.s	loc_DA24
0000DBAE                            ; ===========================================================================
0000DBAE                            
0000DBAE                            loc_DA36:
0000DBAE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000DBB2                            
0000DBB2                            locret_DA3A:
0000DBB2 4E75                       		rts	
0000DBB4                            ; ===========================================================================
0000DBB4                            
0000DBB4                            loc_DA3C:
0000DBB4 4A28 0004                  		tst.b	4(a0)
0000DBB8 6A00                       		bpl.s	OPL_MakeItem
0000DBBA 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000DBC0 6700                       		beq.s	OPL_MakeItem
0000DBC2 5C48                       		addq.w	#6,a0
0000DBC4 7000                       		moveq	#0,d0
0000DBC6 4E75                       		rts	
0000DBC8                            ; ===========================================================================
0000DBC8                            
0000DBC8                            OPL_MakeItem:
0000DBC8 6100 0000                  		bsr.w	SingleObjLoad
0000DBCC 6600                       		bne.s	locret_DA8A
0000DBCE 3358 0008                  		move.w	(a0)+,8(a1)
0000DBD2 3018                       		move.w	(a0)+,d0
0000DBD4 3200                       		move.w	d0,d1
0000DBD6 0240 0FFF                  		andi.w	#$FFF,d0
0000DBDA 3340 000C                  		move.w	d0,$C(a1)
0000DBDE E559                       		rol.w	#2,d1
0000DBE0 0201 0003                  		andi.b	#3,d1
0000DBE4 1341 0001                  		move.b	d1,1(a1)
0000DBE8 1341 0022                  		move.b	d1,$22(a1)
0000DBEC 1018                       		move.b	(a0)+,d0
0000DBEE 6A00                       		bpl.s	loc_DA80
0000DBF0 0200 007F                  		andi.b	#$7F,d0
0000DBF4 1342 0023                  		move.b	d2,$23(a1)
0000DBF8                            
0000DBF8                            loc_DA80:
0000DBF8 1280                       		move.b	d0,0(a1)
0000DBFA 1358 0028                  		move.b	(a0)+,$28(a1)
0000DBFE 7000                       		moveq	#0,d0
0000DC00                            
0000DC00                            locret_DA8A:
0000DC00 4E75                       		rts	
0000DC02                            ; ---------------------------------------------------------------------------
0000DC02                            ; Single object	loading	subroutine
0000DC02                            ; ---------------------------------------------------------------------------
0000DC02                            
0000DC02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC02                            
0000DC02                            
0000DC02                            SingleObjLoad:
0000DC02 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DC06 303C 005F                  		move.w	#$5F,d0
0000DC0A                            
0000DC0A                            loc_DA94:
0000DC0A 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DC0C 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DC0E 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000DC12 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000DC16                            
0000DC16                            locret_DAA0:
0000DC16 4E75                       		rts	
0000DC18                            ; End of function SingleObjLoad
0000DC18                            
0000DC18                            
0000DC18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DC18                            
0000DC18                            
0000DC18                            SingleObjLoad2:
0000DC18 2248                       		movea.l	a0,a1
0000DC1A 303C F000                  		move.w	#-$1000,d0
0000DC1E 9048                       		sub.w	a0,d0
0000DC20 EC48                       		lsr.w	#6,d0
0000DC22 5340                       		subq.w	#1,d0
0000DC24 6500                       		bcs.s	locret_DABC
0000DC26                            
0000DC26                            loc_DAB0:
0000DC26 4A11                       		tst.b	(a1)
0000DC28 6700                       		beq.s	locret_DABC
0000DC2A 43E9 0040                  		lea	$40(a1),a1
0000DC2E 51C8 FFF6                  		dbf	d0,loc_DAB0
0000DC32                            
0000DC32                            locret_DABC:
0000DC32 4E75                       		rts	
0000DC34                            ; End of function SingleObjLoad2
0000DC34                            
0000DC34                            ; ===========================================================================
0000DC34                            ; ---------------------------------------------------------------------------
0000DC34                            ; Object 41 - springs
0000DC34                            ; ---------------------------------------------------------------------------
0000DC34                            
0000DC34                            Obj41:					; XREF: Obj_Index
0000DC34 7000                       		moveq	#0,d0
0000DC36 1028 0024                  		move.b	$24(a0),d0
0000DC3A 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000DC3E 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000DC42 6100 FB38                  		bsr.w	DisplaySprite
0000DC46 3028 0008                  		move.w	8(a0),d0
0000DC4A 0240 FF80                  		andi.w	#$FF80,d0
0000DC4E 3238 F700                  		move.w	($FFFFF700).w,d1
0000DC52 0441 0080                  		subi.w	#$80,d1
0000DC56 0241 FF80                  		andi.w	#$FF80,d1
0000DC5A 9041                       		sub.w	d1,d0
0000DC5C 0C40 0280                  		cmpi.w	#$280,d0
0000DC60 6200 FB56                  		bhi.w	DeleteObject
0000DC64 4E75                       		rts	
0000DC66                            ; ===========================================================================
0000DC66 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000DC68 0000                       		dc.w Obj41_Up-Obj41_Index
0000DC6A 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000DC6C 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000DC6E 0000                       		dc.w Obj41_LR-Obj41_Index
0000DC70 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000DC72 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000DC74 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000DC76 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000DC78 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000DC7A                            
0000DC7A F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000DC7C F600                       		dc.w -$A00		; power	of yellow spring
0000DC7E                            ; ===========================================================================
0000DC7E                            
0000DC7E                            Obj41_Main:				; XREF: Obj41_Index
0000DC7E 5428 0024                  		addq.b	#2,$24(a0)
0000DC82 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000DC8A 317C 0523 0002             		move.w	#$523,2(a0)
0000DC90 0028 0004 0001             		ori.b	#4,1(a0)
0000DC96 117C 0010 0019             		move.b	#$10,$19(a0)
0000DC9C 117C 0004 0018             		move.b	#4,$18(a0)
0000DCA2 1028 0028                  		move.b	$28(a0),d0
0000DCA6 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000DCAA 6700                       		beq.s	loc_DB54	; if not, branch
0000DCAC 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000DCB2 117C 0001 001C             		move.b	#1,$1C(a0)
0000DCB8 117C 0003 001A             		move.b	#3,$1A(a0)
0000DCBE 317C 0533 0002             		move.w	#$533,2(a0)
0000DCC4 117C 0008 0019             		move.b	#8,$19(a0)
0000DCCA                            
0000DCCA                            loc_DB54:
0000DCCA 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000DCCE 6700                       		beq.s	loc_DB66	; if not, branch
0000DCD0 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000DCD6 08E8 0001 0022             		bset	#1,$22(a0)
0000DCDC                            
0000DCDC                            loc_DB66:
0000DCDC 0800 0001                  		btst	#1,d0
0000DCE0 6700                       		beq.s	loc_DB72
0000DCE2 08E8 0005 0002             		bset	#5,2(a0)
0000DCE8                            
0000DCE8                            loc_DB72:
0000DCE8 0240 000F                  		andi.w	#$F,d0
0000DCEC 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000DCF2 4E75                       		rts	
0000DCF4                            ; ===========================================================================
0000DCF4                            
0000DCF4                            Obj41_Up:				; XREF: Obj41_Index
0000DCF4 323C 001B                  		move.w	#$1B,d1
0000DCF8 343C 0008                  		move.w	#8,d2
0000DCFC 363C 0010                  		move.w	#$10,d3
0000DD00 3828 0008                  		move.w	8(a0),d4
0000DD04 6100 0000                  		bsr.w	SolidObject
0000DD08 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000DD0C 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000DD0E 4E75                       		rts	
0000DD10                            ; ===========================================================================
0000DD10                            
0000DD10                            Obj41_BounceUp:				; XREF: Obj41_Up
0000DD10 5428 0024                  		addq.b	#2,$24(a0)
0000DD14 5069 000C                  		addq.w	#8,$C(a1)
0000DD18 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000DD1E 08E9 0001 0022             		bset	#1,$22(a1)
0000DD24 08A9 0003 0022             		bclr	#3,$22(a1)
0000DD2A 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000DD30 137C 0002 0024             		move.b	#2,$24(a1)
0000DD36 08A8 0003 0022             		bclr	#3,$22(a0)
0000DD3C 4228 0025                  		clr.b	$25(a0)
0000DD40 303C 00CC                  		move.w	#$CC,d0
0000DD44 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DD4A                            
0000DD4A                            Obj41_AniUp:				; XREF: Obj41_Index
0000DD4A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DD50 6000 CA9C                  		bra.w	AnimateSprite
0000DD54                            ; ===========================================================================
0000DD54                            
0000DD54                            Obj41_ResetUp:				; XREF: Obj41_Index
0000DD54 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DD5A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000DD5E 4E75                       		rts	
0000DD60                            ; ===========================================================================
0000DD60                            
0000DD60                            Obj41_LR:				; XREF: Obj41_Index
0000DD60 323C 0013                  		move.w	#$13,d1
0000DD64 343C 000E                  		move.w	#$E,d2
0000DD68 363C 000F                  		move.w	#$F,d3
0000DD6C 3828 0008                  		move.w	8(a0),d4
0000DD70 6100 0000                  		bsr.w	SolidObject
0000DD74 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DD7A 6600                       		bne.s	loc_DC0C
0000DD7C 117C 0008 0024             		move.b	#8,$24(a0)
0000DD82                            
0000DD82                            loc_DC0C:
0000DD82 0828 0005 0022             		btst	#5,$22(a0)
0000DD88 6600                       		bne.s	Obj41_BounceLR
0000DD8A 4E75                       		rts	
0000DD8C                            ; ===========================================================================
0000DD8C                            
0000DD8C                            Obj41_BounceLR:				; XREF: Obj41_LR
0000DD8C 5428 0024                  		addq.b	#2,$24(a0)
0000DD90 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000DD96 5069 0008                  		addq.w	#8,8(a1)
0000DD9A 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000DDA0 6600                       		bne.s	loc_DC36	; if yes, branch
0000DDA2 0469 0010 0008             		subi.w	#$10,8(a1)
0000DDA8 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000DDAC                            
0000DDAC                            loc_DC36:
0000DDAC 337C 000F 003E             		move.w	#$F,$3E(a1)
0000DDB2 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DDB8 0869 0000 0022             		bchg	#0,$22(a1)
0000DDBE 0829 0002 0022             		btst	#2,$22(a1)
0000DDC4 6600                       		bne.s	loc_DC56
0000DDC6 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000DDCC                            
0000DDCC                            loc_DC56:
0000DDCC 08A8 0005 0022             		bclr	#5,$22(a0)
0000DDD2 08A9 0005 0022             		bclr	#5,$22(a1)
0000DDD8 303C 00CC                  		move.w	#$CC,d0
0000DDDC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DDE2                            
0000DDE2                            Obj41_AniLR:				; XREF: Obj41_Index
0000DDE2 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DDE8 6000 CA04                  		bra.w	AnimateSprite
0000DDEC                            ; ===========================================================================
0000DDEC                            
0000DDEC                            Obj41_ResetLR:				; XREF: Obj41_Index
0000DDEC 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000DDF2 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000DDF6 4E75                       		rts	
0000DDF8                            ; ===========================================================================
0000DDF8                            
0000DDF8                            Obj41_Dwn:				; XREF: Obj41_Index
0000DDF8 323C 001B                  		move.w	#$1B,d1
0000DDFC 343C 0008                  		move.w	#8,d2
0000DE00 363C 0010                  		move.w	#$10,d3
0000DE04 3828 0008                  		move.w	8(a0),d4
0000DE08 6100 0000                  		bsr.w	SolidObject
0000DE0C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DE12 6600                       		bne.s	loc_DCA4
0000DE14 117C 000E 0024             		move.b	#$E,$24(a0)
0000DE1A                            
0000DE1A                            loc_DCA4:
0000DE1A 4A28 0025                  		tst.b	$25(a0)
0000DE1E 6600                       		bne.s	locret_DCAE
0000DE20 4A44                       		tst.w	d4
0000DE22 6B00                       		bmi.s	Obj41_BounceDwn
0000DE24                            
0000DE24                            locret_DCAE:
0000DE24 4E75                       		rts	
0000DE26                            ; ===========================================================================
0000DE26                            
0000DE26                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000DE26 5428 0024                  		addq.b	#2,$24(a0)
0000DE2A 5169 000C                  		subq.w	#8,$C(a1)
0000DE2E 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000DE34 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000DE38 08E9 0001 0022             		bset	#1,$22(a1)
0000DE3E 08A9 0003 0022             		bclr	#3,$22(a1)
0000DE44 137C 0002 0024             		move.b	#2,$24(a1)
0000DE4A 08A8 0003 0022             		bclr	#3,$22(a0)
0000DE50 4228 0025                  		clr.b	$25(a0)
0000DE54 303C 00CC                  		move.w	#$CC,d0
0000DE58 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DE5E                            
0000DE5E                            Obj41_AniDwn:				; XREF: Obj41_Index
0000DE5E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DE64 6000 C988                  		bra.w	AnimateSprite
0000DE68                            ; ===========================================================================
0000DE68                            
0000DE68                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000DE68 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DE6E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000DE72 4E75                       		rts	
0000DE74                            ; ===========================================================================
0000DE74                            Ani_obj41:
0000DE74                            	include "_anim\obj41.asm"
0000DE74                            ; ---------------------------------------------------------------------------
0000DE74                            ; Animation script - springs
0000DE74                            ; ---------------------------------------------------------------------------
0000DE74 0000                       		dc.w byte_DD02-Ani_obj41
0000DE76 0000                       		dc.w byte_DD0E-Ani_obj41
0000DE78 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000DE84 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000DE90                            		even
0000DE90                            		even
0000DE90                            
0000DE90                            ; ---------------------------------------------------------------------------
0000DE90                            ; Sprite mappings - springs
0000DE90                            ; ---------------------------------------------------------------------------
0000DE90                            Map_obj41:
0000DE90                            	include "_maps\obj41.asm"
0000DE90                            ; ---------------------------------------------------------------------------
0000DE90                            ; Sprite mappings - springs
0000DE90                            ; ---------------------------------------------------------------------------
0000DE90 0000                       		dc.w byte_DD26-Map_obj41
0000DE92 0000                       		dc.w byte_DD31-Map_obj41
0000DE94 0000                       		dc.w byte_DD37-Map_obj41
0000DE96 0000                       		dc.w byte_DD47-Map_obj41
0000DE98 0000                       		dc.w byte_DD4D-Map_obj41
0000DE9A 0000                       		dc.w byte_DD53-Map_obj41
0000DE9C 02                         byte_DD26:	dc.b 2
0000DE9D F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000DEA2 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000DEA7 01                         byte_DD31:	dc.b 1
0000DEA8 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000DEAD 03                         byte_DD37:	dc.b 3
0000DEAE E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000DEB3 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000DEB8 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000DEBD 01                         byte_DD47:	dc.b 1
0000DEBE F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000DEC3 01                         byte_DD4D:	dc.b 1
0000DEC4 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000DEC9 04                         byte_DD53:	dc.b 4
0000DECA F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000DECF F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000DED4 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000DED9 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000DEDE                            		even
0000DEDE                            		even
0000DEDE                            
0000DEDE                            ; ===========================================================================
0000DEDE                            ; ---------------------------------------------------------------------------
0000DEDE                            ; Object 42 - Newtron enemy (GHZ)
0000DEDE                            ; ---------------------------------------------------------------------------
0000DEDE                            
0000DEDE                            Obj42:					; XREF: Obj_Index
0000DEDE 7000                       		moveq	#0,d0
0000DEE0 1028 0024                  		move.b	$24(a0),d0
0000DEE4 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000DEE8 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000DEEC                            ; ===========================================================================
0000DEEC 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000DEEE 0000                       		dc.w Obj42_Action-Obj42_Index
0000DEF0 0000                       		dc.w Obj42_Delete-Obj42_Index
0000DEF2                            ; ===========================================================================
0000DEF2                            
0000DEF2                            Obj42_Main:				; XREF: Obj42_Index
0000DEF2 5428 0024                  		addq.b	#2,$24(a0)
0000DEF6 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000DEFE 317C 049B 0002             		move.w	#$49B,2(a0)
0000DF04 117C 0004 0001             		move.b	#4,1(a0)
0000DF0A 117C 0004 0018             		move.b	#4,$18(a0)
0000DF10 117C 0014 0019             		move.b	#$14,$19(a0)
0000DF16 117C 0010 0016             		move.b	#$10,$16(a0)
0000DF1C 117C 0008 0017             		move.b	#8,$17(a0)
0000DF22                            
0000DF22                            Obj42_Action:				; XREF: Obj42_Index
0000DF22 7000                       		moveq	#0,d0
0000DF24 1028 0025                  		move.b	$25(a0),d0
0000DF28 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000DF2C 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000DF30 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000DF36 6100 C8B6                  		bsr.w	AnimateSprite
0000DF3A 6000 0000                  		bra.w	MarkObjGone
0000DF3E                            ; ===========================================================================
0000DF3E 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000DF40 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000DF42 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000DF44 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000DF46 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000DF48                            ; ===========================================================================
0000DF48                            
0000DF48                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000DF48 08E8 0000 0022             		bset	#0,$22(a0)
0000DF4E 3038 D008                  		move.w	($FFFFD008).w,d0
0000DF52 9068 0008                  		sub.w	8(a0),d0
0000DF56 6400                       		bcc.s	loc_DDEA
0000DF58 4440                       		neg.w	d0
0000DF5A 08A8 0000 0022             		bclr	#0,$22(a0)
0000DF60                            
0000DF60                            loc_DDEA:
0000DF60 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000DF64 6400                       		bcc.s	locret_DE12	; if not, branch
0000DF66 5428 0025                  		addq.b	#2,$25(a0)
0000DF6A 117C 0001 001C             		move.b	#1,$1C(a0)
0000DF70 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000DF74 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000DF76 317C 249B 0002             		move.w	#$249B,2(a0)
0000DF7C 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000DF82 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000DF88                            
0000DF88                            locret_DE12:
0000DF88 4E75                       		rts	
0000DF8A                            ; ===========================================================================
0000DF8A                            
0000DF8A                            Obj42_Type00:				; XREF: Obj42_Index2
0000DF8A 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000DF90 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000DF92 08E8 0000 0022             		bset	#0,$22(a0)
0000DF98 3038 D008                  		move.w	($FFFFD008).w,d0
0000DF9C 9068 0008                  		sub.w	8(a0),d0
0000DFA0 6400                       		bcc.s	locret_DE32
0000DFA2 08A8 0000 0022             		bclr	#0,$22(a0)
0000DFA8                            
0000DFA8                            locret_DE32:
0000DFA8 4E75                       		rts	
0000DFAA                            ; ===========================================================================
0000DFAA                            
0000DFAA                            Obj42_Fall:				; XREF: Obj42_Type00
0000DFAA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DFB0 6600                       		bne.s	loc_DE42
0000DFB2 117C 000C 0020             		move.b	#$C,$20(a0)
0000DFB8                            
0000DFB8                            loc_DE42:
0000DFB8 6100 F770                  		bsr.w	ObjectFall
0000DFBC 6100 0000                  		bsr.w	ObjHitFloor
0000DFC0 4A41                       		tst.w	d1		; has newtron hit the floor?
0000DFC2 6A00                       		bpl.s	locret_DE86	; if not, branch
0000DFC4 D368 000C                  		add.w	d1,$C(a0)
0000DFC8 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000DFCE 5428 0025                  		addq.b	#2,$25(a0)
0000DFD2 117C 0002 001C             		move.b	#2,$1C(a0)
0000DFD8 0828 0005 0002             		btst	#5,2(a0)
0000DFDE 6700                       		beq.s	Obj42_Move
0000DFE0 5228 001C                  		addq.b	#1,$1C(a0)
0000DFE4                            
0000DFE4                            Obj42_Move:
0000DFE4 117C 000D 0020             		move.b	#$D,$20(a0)
0000DFEA 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000DFF0 0828 0000 0022             		btst	#0,$22(a0)
0000DFF6 6600                       		bne.s	locret_DE86
0000DFF8 4468 0010                  		neg.w	$10(a0)
0000DFFC                            
0000DFFC                            locret_DE86:
0000DFFC 4E75                       		rts	
0000DFFE                            ; ===========================================================================
0000DFFE                            
0000DFFE                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000DFFE 6100 F756                  		bsr.w	SpeedToPos
0000E002 6100 0000                  		bsr.w	ObjHitFloor
0000E006 0C41 FFF8                  		cmpi.w	#-8,d1
0000E00A 6D00                       		blt.s	loc_DEA2
0000E00C 0C41 000C                  		cmpi.w	#$C,d1
0000E010 6C00                       		bge.s	loc_DEA2
0000E012 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000E016 4E75                       		rts	
0000E018                            ; ===========================================================================
0000E018                            
0000E018                            loc_DEA2:
0000E018 5428 0025                  		addq.b	#2,$25(a0)
0000E01C 4E75                       		rts	
0000E01E                            ; ===========================================================================
0000E01E                            
0000E01E                            Obj42_Speed:				; XREF: Obj42_Index2
0000E01E 6100 F736                  		bsr.w	SpeedToPos
0000E022 4E75                       		rts	
0000E024                            ; ===========================================================================
0000E024                            
0000E024                            Obj42_Type01:				; XREF: Obj42_Index2
0000E024 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000E02A 6600                       		bne.s	Obj42_FireMissile
0000E02C 117C 000C 0020             		move.b	#$C,$20(a0)
0000E032                            
0000E032                            Obj42_FireMissile:
0000E032 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000E038 6600                       		bne.s	locret_DF14
0000E03A 4A28 0032                  		tst.b	$32(a0)
0000E03E 6600                       		bne.s	locret_DF14
0000E040 117C 0001 0032             		move.b	#1,$32(a0)
0000E046 6100 FBBA                  		bsr.w	SingleObjLoad
0000E04A 6600                       		bne.s	locret_DF14
0000E04C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000E050 3368 0008 0008             		move.w	8(a0),8(a1)
0000E056 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E05C 5169 000C                  		subq.w	#8,$C(a1)
0000E060 337C 0200 0010             		move.w	#$200,$10(a1)
0000E066 303C 0014                  		move.w	#$14,d0
0000E06A 0828 0000 0022             		btst	#0,$22(a0)
0000E070 6600                       		bne.s	loc_DF04
0000E072 4440                       		neg.w	d0
0000E074 4469 0010                  		neg.w	$10(a1)
0000E078                            
0000E078                            loc_DF04:
0000E078 D169 0008                  		add.w	d0,8(a1)
0000E07C 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000E082 137C 0001 0028             		move.b	#1,$28(a1)
0000E088                            
0000E088                            locret_DF14:
0000E088 4E75                       		rts	
0000E08A                            ; ===========================================================================
0000E08A                            
0000E08A                            Obj42_Delete:				; XREF: Obj42_Index
0000E08A 6000 F72C                  		bra.w	DeleteObject
0000E08E                            ; ===========================================================================
0000E08E                            Ani_obj42:
0000E08E                            	include "_anim\obj42.asm"
0000E08E                            ; ---------------------------------------------------------------------------
0000E08E                            ; Animation script - Newtron enemy
0000E08E                            ; ---------------------------------------------------------------------------
0000E08E 0000                       		dc.w byte_DF24-Ani_obj42
0000E090 0000                       		dc.w byte_DF28-Ani_obj42
0000E092 0000                       		dc.w byte_DF30-Ani_obj42
0000E094 0000                       		dc.w byte_DF34-Ani_obj42
0000E096 0000                       		dc.w byte_DF38-Ani_obj42
0000E098 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000E09C 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000E0A4 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000E0A8 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000E0AC 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000E0B6                            		even
0000E0B6                            		even
0000E0B6                            
0000E0B6                            ; ---------------------------------------------------------------------------
0000E0B6                            ; Sprite mappings - Newtron enemy (GHZ)
0000E0B6                            ; ---------------------------------------------------------------------------
0000E0B6                            Map_obj42:
0000E0B6                            	include "_maps\obj42.asm"
0000E0B6                            ; ---------------------------------------------------------------------------
0000E0B6                            ; Sprite mappings - Newtron enemy (GHZ)
0000E0B6                            ; ---------------------------------------------------------------------------
0000E0B6 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000E0BA 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000E0BE 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000E0C2 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000E0C6 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000E0CA 0000                       		dc.w byte_DFF8-Map_obj42
0000E0CC 03                         byte_DF58:	dc.b 3
0000E0CD EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000E0D2 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000E0D7 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000E0DC 03                         byte_DF68:	dc.b 3
0000E0DD EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000E0E2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E0E7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E0EC 03                         byte_DF78:	dc.b 3
0000E0ED EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000E0F2 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E0F7 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000E0FC 04                         byte_DF88:	dc.b 4
0000E0FD EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000E102 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000E107 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000E10C 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000E111 03                         byte_DF9D:	dc.b 3
0000E112 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000E117 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000E11C 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000E121 02                         byte_DFAD:	dc.b 2
0000E122 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E127 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E12C 03                         byte_DFB8:	dc.b 3
0000E12D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E132 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E137 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000E13C 03                         byte_DFC8:	dc.b 3
0000E13D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E142 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E147 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000E14C 03                         byte_DFD8:	dc.b 3
0000E14D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E152 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E157 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000E15C 03                         byte_DFE8:	dc.b 3
0000E15D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000E162 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000E167 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000E16C 00                         byte_DFF8:	dc.b 0
0000E16E 00                         		even
0000E16E 00                         		even
0000E16E                            
0000E16E                            ; ===========================================================================
0000E16E                            ; ---------------------------------------------------------------------------
0000E16E                            ; Object 43 - Roller enemy (SYZ)
0000E16E                            ; ---------------------------------------------------------------------------
0000E16E                            
0000E16E                            Obj43:					; XREF: Obj_Index
0000E16E 7000                       		moveq	#0,d0
0000E170 1028 0024                  		move.b	$24(a0),d0
0000E174 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000E178 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000E17C                            ; ===========================================================================
0000E17C 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000E17E 0000                       		dc.w Obj43_Action-Obj43_Index
0000E180                            ; ===========================================================================
0000E180                            
0000E180                            Obj43_Main:				; XREF: Obj43_Index
0000E180 117C 000E 0016             		move.b	#$E,$16(a0)
0000E186 117C 0008 0017             		move.b	#8,$17(a0)
0000E18C 6100 F59C                  		bsr.w	ObjectFall
0000E190 6100 0000                  		bsr.w	ObjHitFloor
0000E194 4A41                       		tst.w	d1
0000E196 6A00                       		bpl.s	locret_E052
0000E198 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000E19C 317C 0000 0012             		move.w	#0,$12(a0)
0000E1A2 5428 0024                  		addq.b	#2,$24(a0)
0000E1A6 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000E1AE 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000E1B4 117C 0004 0001             		move.b	#4,1(a0)
0000E1BA 117C 0004 0018             		move.b	#4,$18(a0)
0000E1C0 117C 0010 0019             		move.b	#$10,$19(a0)
0000E1C6                            
0000E1C6                            locret_E052:
0000E1C6 4E75                       		rts	
0000E1C8                            ; ===========================================================================
0000E1C8                            
0000E1C8                            Obj43_Action:				; XREF: Obj43_Index
0000E1C8 7000                       		moveq	#0,d0
0000E1CA 1028 0025                  		move.b	$25(a0),d0
0000E1CE 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E1D2 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E1D6 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E1DC 6100 C610                  		bsr.w	AnimateSprite
0000E1E0 3028 0008                  		move.w	8(a0),d0
0000E1E4 0240 FF80                  		andi.w	#$FF80,d0
0000E1E8 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1EC 0441 0080                  		subi.w	#$80,d1
0000E1F0 0241 FF80                  		andi.w	#$FF80,d1
0000E1F4 9041                       		sub.w	d1,d0
0000E1F6 0C40 0280                  		cmpi.w	#$280,d0
0000E1FA 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E1FE 6000 F57C                  		bra.w	DisplaySprite
0000E202                            ; ===========================================================================
0000E202                            
0000E202                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E202 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E206 7000                       		moveq	#0,d0
0000E208 1028 0023                  		move.b	$23(a0),d0
0000E20C 6700                       		beq.s	Obj43_Delete
0000E20E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E214                            
0000E214                            Obj43_Delete:
0000E214 6000 F5A2                  		bra.w	DeleteObject
0000E218                            ; ===========================================================================
0000E218 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E21A 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E21C 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E21E 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E220                            ; ===========================================================================
0000E220                            
0000E220                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E220 3038 D008                  		move.w	($FFFFD008).w,d0
0000E224 0440 0100                  		subi.w	#$100,d0
0000E228 6500                       		bcs.s	loc_E0D2
0000E22A 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E22E 6500                       		bcs.s	loc_E0D2
0000E230 5828 0025                  		addq.b	#4,$25(a0)
0000E234 117C 0002 001C             		move.b	#2,$1C(a0)
0000E23A 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E240 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E246                            
0000E246                            loc_E0D2:
0000E246 588F                       		addq.l	#4,sp
0000E248 4E75                       		rts	
0000E24A                            ; ===========================================================================
0000E24A                            
0000E24A                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E24A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E250 6700                       		beq.s	loc_E0F8
0000E252 5368 0030                  		subq.w	#1,$30(a0)
0000E256 6A00                       		bpl.s	locret_E0F6
0000E258 117C 0001 001C             		move.b	#1,$1C(a0)
0000E25E 317C 0700 0010             		move.w	#$700,$10(a0)
0000E264 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E26A                            
0000E26A                            locret_E0F6:
0000E26A 4E75                       		rts	
0000E26C                            ; ===========================================================================
0000E26C                            
0000E26C                            loc_E0F8:
0000E26C 5428 0025                  		addq.b	#2,$25(a0)
0000E270 4E75                       		rts	
0000E272                            ; ===========================================================================
0000E272                            
0000E272                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E272 6100 0000                  		bsr.w	Obj43_Stop
0000E276 6100 F4DE                  		bsr.w	SpeedToPos
0000E27A 6100 0000                  		bsr.w	ObjHitFloor
0000E27E 0C41 FFF8                  		cmpi.w	#-8,d1
0000E282 6D00                       		blt.s	Obj43_Jump
0000E284 0C41 000C                  		cmpi.w	#$C,d1
0000E288 6C00                       		bge.s	Obj43_Jump
0000E28A D368 000C                  		add.w	d1,$C(a0)
0000E28E 4E75                       		rts	
0000E290                            ; ===========================================================================
0000E290                            
0000E290                            Obj43_Jump:
0000E290 5428 0025                  		addq.b	#2,$25(a0)
0000E294 08E8 0000 0032             		bset	#0,$32(a0)
0000E29A 6700                       		beq.s	locret_E12E
0000E29C 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E2A2                            
0000E2A2                            locret_E12E:
0000E2A2 4E75                       		rts	
0000E2A4                            ; ===========================================================================
0000E2A4                            
0000E2A4                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E2A4 6100 F484                  		bsr.w	ObjectFall
0000E2A8 4A68 0012                  		tst.w	$12(a0)
0000E2AC 6B00                       		bmi.s	locret_E150
0000E2AE 6100 0000                  		bsr.w	ObjHitFloor
0000E2B2 4A41                       		tst.w	d1
0000E2B4 6A00                       		bpl.s	locret_E150
0000E2B6 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E2BA 5528 0025                  		subq.b	#2,$25(a0)
0000E2BE 317C 0000 0012             		move.w	#0,$12(a0)
0000E2C4                            
0000E2C4                            locret_E150:
0000E2C4 4E75                       		rts	
0000E2C6                            
0000E2C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2C6                            
0000E2C6                            
0000E2C6                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E2C6 4A28 0032                  		tst.b	$32(a0)
0000E2CA 6B00                       		bmi.s	locret_E188
0000E2CC 3038 D008                  		move.w	($FFFFD008).w,d0
0000E2D0 0440 0030                  		subi.w	#$30,d0
0000E2D4 9068 0008                  		sub.w	8(a0),d0
0000E2D8 6400                       		bcc.s	locret_E188
0000E2DA 117C 0000 001C             		move.b	#0,$1C(a0)
0000E2E0 117C 000E 0020             		move.b	#$E,$20(a0)
0000E2E6 4268 0010                  		clr.w	$10(a0)
0000E2EA 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E2F0 117C 0002 0025             		move.b	#2,$25(a0)
0000E2F6 08E8 0007 0032             		bset	#7,$32(a0)
0000E2FC                            
0000E2FC                            locret_E188:
0000E2FC 4E75                       		rts	
0000E2FE                            ; End of function Obj43_Stop
0000E2FE                            
0000E2FE                            ; ===========================================================================
0000E2FE                            Ani_obj43:
0000E2FE                            	include "_anim\obj43.asm"
0000E2FE                            ; ---------------------------------------------------------------------------
0000E2FE                            ; Animation script - Roller enemy
0000E2FE                            ; ---------------------------------------------------------------------------
0000E2FE 0000                       		dc.w byte_E190-Ani_obj43
0000E300 0000                       		dc.w byte_E196-Ani_obj43
0000E302 0000                       		dc.w byte_E19C-Ani_obj43
0000E304 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E30A 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E310 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E316 00                         		even
0000E316 00                         		even
0000E316                            
0000E316                            ; ---------------------------------------------------------------------------
0000E316                            ; Sprite mappings - Roller enemy (SYZ)
0000E316                            ; ---------------------------------------------------------------------------
0000E316                            Map_obj43:
0000E316                            	include "_maps\obj43.asm"
0000E316                            ; ---------------------------------------------------------------------------
0000E316                            ; Sprite mappings - Roller enemy (SYZ)
0000E316                            ; ---------------------------------------------------------------------------
0000E316 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E31A 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E31E 0000                       		dc.w byte_E1CE-Map_obj43
0000E320 02                         byte_E1AC:	dc.b 2
0000E321 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E326 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E32B 02                         byte_E1B7:	dc.b 2
0000E32C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E331 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E336 01                         byte_E1C2:	dc.b 1
0000E337 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E33C 01                         byte_E1C8:	dc.b 1
0000E33D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E342 01                         byte_E1CE:	dc.b 1
0000E343 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E348                            		even
0000E348                            		even
0000E348                            
0000E348                            ; ===========================================================================
0000E348                            ; ---------------------------------------------------------------------------
0000E348                            ; Object 44 - walls (GHZ)
0000E348                            ; ---------------------------------------------------------------------------
0000E348                            
0000E348                            Obj44:					; XREF: Obj_Index
0000E348 7000                       		moveq	#0,d0
0000E34A 1028 0024                  		move.b	$24(a0),d0
0000E34E 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E352 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E356                            ; ===========================================================================
0000E356 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E358 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E35A 0000                       		dc.w Obj44_Display-Obj44_Index
0000E35C                            ; ===========================================================================
0000E35C                            
0000E35C                            Obj44_Main:				; XREF: Obj44_Index
0000E35C 5428 0024                  		addq.b	#2,$24(a0)
0000E360 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E368 317C 434C 0002             		move.w	#$434C,2(a0)
0000E36E 0028 0004 0001             		ori.b	#4,1(a0)
0000E374 117C 0008 0019             		move.b	#8,$19(a0)
0000E37A 117C 0006 0018             		move.b	#6,$18(a0)
0000E380 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E386 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E38C 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E38E 5428 0024                  		addq.b	#2,$24(a0)
0000E392 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E394                            ; ===========================================================================
0000E394                            
0000E394                            Obj44_Solid:				; XREF: Obj44_Index
0000E394 323C 0013                  		move.w	#$13,d1
0000E398 343C 0028                  		move.w	#$28,d2
0000E39C 6100 A7BE                  		bsr.w	Obj44_SolidWall
0000E3A0                            
0000E3A0                            Obj44_Display:				; XREF: Obj44_Index
0000E3A0 6100 F3DA                  		bsr.w	DisplaySprite
0000E3A4 3028 0008                  		move.w	8(a0),d0
0000E3A8 0240 FF80                  		andi.w	#$FF80,d0
0000E3AC 3238 F700                  		move.w	($FFFFF700).w,d1
0000E3B0 0441 0080                  		subi.w	#$80,d1
0000E3B4 0241 FF80                  		andi.w	#$FF80,d1
0000E3B8 9041                       		sub.w	d1,d0
0000E3BA 0C40 0280                  		cmpi.w	#$280,d0
0000E3BE 6200 F3F8                  		bhi.w	DeleteObject
0000E3C2 4E75                       		rts	
0000E3C4                            ; ===========================================================================
0000E3C4                            ; ---------------------------------------------------------------------------
0000E3C4                            ; Sprite mappings - walls (GHZ)
0000E3C4                            ; ---------------------------------------------------------------------------
0000E3C4                            Map_obj44:
0000E3C4                            	include "_maps\obj44.asm"
0000E3C4                            ; ---------------------------------------------------------------------------
0000E3C4                            ; Sprite mappings - walls (GHZ)
0000E3C4                            ; ---------------------------------------------------------------------------
0000E3C4 0000                       		dc.w byte_E256-Map_obj44
0000E3C6 0000                       		dc.w byte_E26B-Map_obj44
0000E3C8 0000                       		dc.w byte_E280-Map_obj44
0000E3CA 04                         byte_E256:	dc.b 4
0000E3CB E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E3D0 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E3D5 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E3DA 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E3DF 04                         byte_E26B:	dc.b 4
0000E3E0 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E3E5 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E3EA 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E3EF 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E3F4 04                         byte_E280:	dc.b 4
0000E3F5 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E3FA F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E3FF 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E404 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E40A 00                         		even
0000E40A 00                         		even
0000E40A                            
0000E40A                            ; ===========================================================================
0000E40A                            ; ---------------------------------------------------------------------------
0000E40A                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E40A                            ; ---------------------------------------------------------------------------
0000E40A                            
0000E40A                            Obj13:					; XREF: Obj_Index
0000E40A 7000                       		moveq	#0,d0
0000E40C 1028 0024                  		move.b	$24(a0),d0
0000E410 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E414 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E418 6000 0000                  		bra.w	Obj14_ChkDel
0000E41C                            ; ===========================================================================
0000E41C 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E41E 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E420                            ; ---------------------------------------------------------------------------
0000E420                            ;
0000E420                            ; Lava ball production rates
0000E420                            ;
0000E420 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E426                            ; ===========================================================================
0000E426                            
0000E426                            Obj13_Main:				; XREF: Obj13_Index
0000E426 5428 0024                  		addq.b	#2,$24(a0)
0000E42A 1028 0028                  		move.b	$28(a0),d0
0000E42E E848                       		lsr.w	#4,d0
0000E430 0240 000F                  		andi.w	#$F,d0
0000E434 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E43A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E440 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E446                            
0000E446                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E446 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E44A 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E44C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E452 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E456 6600                       		bne.s	locret_E302
0000E458 6100 F7A8                  		bsr.w	SingleObjLoad
0000E45C 6600                       		bne.s	locret_E302
0000E45E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E462 3368 0008 0008             		move.w	8(a0),8(a1)
0000E468 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E46E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E474                            
0000E474                            locret_E302:
0000E474 4E75                       		rts	
0000E476                            ; ===========================================================================
0000E476                            ; ---------------------------------------------------------------------------
0000E476                            ; Object 14 - lava balls (MZ, SLZ)
0000E476                            ; ---------------------------------------------------------------------------
0000E476                            
0000E476                            Obj14:					; XREF: Obj_Index
0000E476 7000                       		moveq	#0,d0
0000E478 1028 0024                  		move.b	$24(a0),d0
0000E47C 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E480 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E484 6000 F2F6                  		bra.w	DisplaySprite
0000E488                            ; ===========================================================================
0000E488 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E48A 0000                       		dc.w Obj14_Action-Obj14_Index
0000E48C 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E48E                            
0000E48E FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E498 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E4A0                            ; ===========================================================================
0000E4A0                            
0000E4A0                            Obj14_Main:				; XREF: Obj14_Index
0000E4A0 5428 0024                  		addq.b	#2,$24(a0)
0000E4A4 117C 0008 0016             		move.b	#8,$16(a0)
0000E4AA 117C 0008 0017             		move.b	#8,$17(a0)
0000E4B0 217C 0000 B440 0004        		move.l	#Map_obj14,4(a0)
0000E4B8 317C 0345 0002             		move.w	#$345,2(a0)
0000E4BE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E4C4 6600                       		bne.s	loc_E35A
0000E4C6 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E4CC                            
0000E4CC                            loc_E35A:
0000E4CC 117C 0004 0001             		move.b	#4,1(a0)
0000E4D2 117C 0003 0018             		move.b	#3,$18(a0)
0000E4D8 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E4DE 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E4E4 4A28 0029                  		tst.b	$29(a0)
0000E4E8 6700                       		beq.s	Obj14_SetSpeed
0000E4EA 5428 0018                  		addq.b	#2,$18(a0)
0000E4EE                            
0000E4EE                            Obj14_SetSpeed:
0000E4EE 7000                       		moveq	#0,d0
0000E4F0 1028 0028                  		move.b	$28(a0),d0
0000E4F4 D040                       		add.w	d0,d0
0000E4F6 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E4FC 117C 0008 0019             		move.b	#8,$19(a0)
0000E502 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E508 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E50A 117C 0010 0019             		move.b	#$10,$19(a0)
0000E510 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E516 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E51C 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E522                            
0000E522                            Obj14_PlaySnd:
0000E522 303C 00AE                  		move.w	#$AE,d0
0000E526 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E52C                            
0000E52C                            Obj14_Action:				; XREF: Obj14_Index
0000E52C 7000                       		moveq	#0,d0
0000E52E 1028 0028                  		move.b	$28(a0),d0
0000E532 D040                       		add.w	d0,d0
0000E534 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E538 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E53C 6100 F218                  		bsr.w	SpeedToPos
0000E540 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E546 6100 C2A6                  		bsr.w	AnimateSprite
0000E54A                            
0000E54A                            Obj14_ChkDel:				; XREF: Obj13
0000E54A 3028 0008                  		move.w	8(a0),d0
0000E54E 0240 FF80                  		andi.w	#$FF80,d0
0000E552 3238 F700                  		move.w	($FFFFF700).w,d1
0000E556 0441 0080                  		subi.w	#$80,d1
0000E55A 0241 FF80                  		andi.w	#$FF80,d1
0000E55E 9041                       		sub.w	d1,d0
0000E560 0C40 0280                  		cmpi.w	#$280,d0
0000E564 6200 F252                  		bhi.w	DeleteObject
0000E568 4E75                       		rts	
0000E56A                            ; ===========================================================================
0000E56A 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E56E 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E572 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E576 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E57A 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E57C                            ; ===========================================================================
0000E57C                            ; lavaball types 00-03 fly up and fall back down
0000E57C                            
0000E57C                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E57C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E582 3028 0030                  		move.w	$30(a0),d0
0000E586 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E58A 6400                       		bcc.s	loc_E41E	; if not, branch
0000E58C 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E590                            
0000E590                            loc_E41E:
0000E590 08A8 0001 0022             		bclr	#1,$22(a0)
0000E596 4A68 0012                  		tst.w	$12(a0)
0000E59A 6A00                       		bpl.s	locret_E430
0000E59C 08E8 0001 0022             		bset	#1,$22(a0)
0000E5A2                            
0000E5A2                            locret_E430:
0000E5A2 4E75                       		rts	
0000E5A4                            ; ===========================================================================
0000E5A4                            ; lavaball type	04 flies up until it hits the ceiling
0000E5A4                            
0000E5A4                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E5A4 08E8 0001 0022             		bset	#1,$22(a0)
0000E5AA 6100 0000                  		bsr.w	ObjHitCeiling
0000E5AE 4A41                       		tst.w	d1
0000E5B0 6A00                       		bpl.s	locret_E452
0000E5B2 117C 0008 0028             		move.b	#8,$28(a0)
0000E5B8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E5BE 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E5C4                            
0000E5C4                            locret_E452:
0000E5C4 4E75                       		rts	
0000E5C6                            ; ===========================================================================
0000E5C6                            ; lavaball type	05 falls down until it hits the	floor
0000E5C6                            
0000E5C6                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E5C6 08A8 0001 0022             		bclr	#1,$22(a0)
0000E5CC 6100 0000                  		bsr.w	ObjHitFloor
0000E5D0 4A41                       		tst.w	d1
0000E5D2 6A00                       		bpl.s	locret_E474
0000E5D4 117C 0008 0028             		move.b	#8,$28(a0)
0000E5DA 117C 0001 001C             		move.b	#1,$1C(a0)
0000E5E0 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E5E6                            
0000E5E6                            locret_E474:
0000E5E6 4E75                       		rts	
0000E5E8                            ; ===========================================================================
0000E5E8                            ; lavaball types 06-07 move sideways
0000E5E8                            
0000E5E8                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E5E8 08E8 0000 0022             		bset	#0,$22(a0)
0000E5EE 76F8                       		moveq	#-8,d3
0000E5F0 6100 0000                  		bsr.w	ObjHitWallLeft
0000E5F4 4A41                       		tst.w	d1
0000E5F6 6A00                       		bpl.s	locret_E498
0000E5F8 117C 0008 0028             		move.b	#8,$28(a0)
0000E5FE 117C 0003 001C             		move.b	#3,$1C(a0)
0000E604 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E60A                            
0000E60A                            locret_E498:
0000E60A 4E75                       		rts	
0000E60C                            ; ===========================================================================
0000E60C                            
0000E60C                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E60C 08A8 0000 0022             		bclr	#0,$22(a0)
0000E612 7608                       		moveq	#8,d3
0000E614 6100 0000                  		bsr.w	ObjHitWallRight
0000E618 4A41                       		tst.w	d1
0000E61A 6A00                       		bpl.s	locret_E4BC
0000E61C 117C 0008 0028             		move.b	#8,$28(a0)
0000E622 117C 0003 001C             		move.b	#3,$1C(a0)
0000E628 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E62E                            
0000E62E                            locret_E4BC:
0000E62E 4E75                       		rts	
0000E630                            ; ===========================================================================
0000E630                            
0000E630                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000E630 4E75                       		rts	
0000E632                            ; ===========================================================================
0000E632                            
0000E632                            Obj14_Delete:				; XREF: Obj14_Index
0000E632 6000 F184                  		bra.w	DeleteObject
0000E636                            ; ===========================================================================
0000E636                            Ani_obj14:
0000E636                            	include "_anim\obj14.asm"
0000E636                            ; ---------------------------------------------------------------------------
0000E636                            ; Animation script - lava balls
0000E636                            ; ---------------------------------------------------------------------------
0000E636 0000                       		dc.w byte_E4CC-Ani_obj14
0000E638 0000                       		dc.w byte_E4D2-Ani_obj14
0000E63A 0000                       		dc.w byte_E4D6-Ani_obj14
0000E63C 0000                       		dc.w byte_E4DC-Ani_obj14
0000E63E 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000E644 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000E648 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000E64E 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000E652                            		even
0000E652                            		even
0000E652                            
0000E652                            ; ===========================================================================
0000E652                            ; ---------------------------------------------------------------------------
0000E652                            ; Object 6D - flame thrower (SBZ)
0000E652                            ; ---------------------------------------------------------------------------
0000E652                            
0000E652                            Obj6D:					; XREF: Obj_Index
0000E652 7000                       		moveq	#0,d0
0000E654 1028 0024                  		move.b	$24(a0),d0
0000E658 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000E65C 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000E660                            ; ===========================================================================
0000E660 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000E662 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000E664                            ; ===========================================================================
0000E664                            
0000E664                            Obj6D_Main:				; XREF: Obj6D_Index
0000E664 5428 0024                  		addq.b	#2,$24(a0)
0000E668 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000E670 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000E676 0028 0004 0001             		ori.b	#4,1(a0)
0000E67C 117C 0001 0018             		move.b	#1,$18(a0)
0000E682 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E688 117C 000C 0019             		move.b	#$C,$19(a0)
0000E68E 1028 0028                  		move.b	$28(a0),d0
0000E692 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000E696 D040                       		add.w	d0,d0		; multiply by 2
0000E698 3140 0030                  		move.w	d0,$30(a0)
0000E69C 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000E6A0 1028 0028                  		move.b	$28(a0),d0
0000E6A4 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000E6A8 EB48                       		lsl.w	#5,d0		; multiply by $20
0000E6AA 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000E6AE 117C 000A 0036             		move.b	#$A,$36(a0)
0000E6B4 0828 0001 0022             		btst	#1,$22(a0)
0000E6BA 6700                       		beq.s	Obj6D_Action
0000E6BC 117C 0002 001C             		move.b	#2,$1C(a0)
0000E6C2 117C 0015 0036             		move.b	#$15,$36(a0)
0000E6C8                            
0000E6C8                            Obj6D_Action:				; XREF: Obj6D_Index
0000E6C8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000E6CC 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000E6CE 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000E6D4 0868 0000 001C             		bchg	#0,$1C(a0)
0000E6DA 6700                       		beq.s	loc_E57A
0000E6DC 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000E6E2 303C 00B3                  		move.w	#$B3,d0
0000E6E6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000E6EC                            
0000E6EC                            loc_E57A:
0000E6EC 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000E6F2 6100 C0FA                  		bsr.w	AnimateSprite
0000E6F6 117C 0000 0020             		move.b	#0,$20(a0)
0000E6FC 1028 0036                  		move.b	$36(a0),d0
0000E700 B028 001A                  		cmp.b	$1A(a0),d0
0000E704 6600                       		bne.s	Obj6D_ChkDel
0000E706 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000E70C                            
0000E70C                            Obj6D_ChkDel:
0000E70C 3028 0008                  		move.w	8(a0),d0
0000E710 0240 FF80                  		andi.w	#$FF80,d0
0000E714 3238 F700                  		move.w	($FFFFF700).w,d1
0000E718 0441 0080                  		subi.w	#$80,d1
0000E71C 0241 FF80                  		andi.w	#$FF80,d1
0000E720 9041                       		sub.w	d1,d0
0000E722 0C40 0280                  		cmpi.w	#$280,d0
0000E726 6200 F090                  		bhi.w	DeleteObject
0000E72A 6000 F050                  		bra.w	DisplaySprite
0000E72E                            ; ===========================================================================
0000E72E                            Ani_obj6D:
0000E72E                            	include "_anim\obj6D.asm"
0000E72E                            ; ---------------------------------------------------------------------------
0000E72E                            ; Animation script - flamethrower (SBZ)
0000E72E                            ; ---------------------------------------------------------------------------
0000E72E 0000                       		dc.w byte_E5C4-Ani_obj6D
0000E730 0000                       		dc.w byte_E5D2-Ani_obj6D
0000E732 0000                       		dc.w byte_E5DC-Ani_obj6D
0000E734 0000                       		dc.w byte_E5EA-Ani_obj6D
0000E736 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000E744 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000E74E 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000E75C 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000E766                            		even
0000E766                            		even
0000E766                            
0000E766                            ; ---------------------------------------------------------------------------
0000E766                            ; Sprite mappings - flame thrower (SBZ)
0000E766                            ; ---------------------------------------------------------------------------
0000E766                            Map_obj6D:
0000E766                            	include "_maps\obj6D.asm"
0000E766                            ; ---------------------------------------------------------------------------
0000E766                            ; Sprite mappings - flame thrower (SBZ)
0000E766                            ; ---------------------------------------------------------------------------
0000E766 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000E76A 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000E76E 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000E772 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000E776 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000E77A 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000E77E 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000E782 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000E786 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000E78A 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000E78E 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000E792 01                         byte_E620:	dc.b 1
0000E793 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E798 02                         byte_E626:	dc.b 2
0000E799 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E79E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7A3 02                         byte_E631:	dc.b 2
0000E7A4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7A9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7AE 03                         byte_E63C:	dc.b 3
0000E7AF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E7B4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E7B9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7BE 03                         byte_E64C:	dc.b 3
0000E7BF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E7C4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7C9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7CE 04                         byte_E65C:	dc.b 4
0000E7CF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E7D4 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E7D9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E7DE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7E3 04                         byte_E671:	dc.b 4
0000E7E4 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E7E9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E7EE 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E7F3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E7F8 05                         byte_E686:	dc.b 5
0000E7F9 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E7FE 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E803 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E808 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E80D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E812 05                         byte_E6A0:	dc.b 5
0000E813 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E818 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E81D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E822 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E827 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E82C 06                         byte_E6BA:	dc.b 6
0000E82D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E832 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E837 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E83C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E841 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E846 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E84B 06                         byte_E6D9:	dc.b 6
0000E84C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E851 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E856 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E85B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E860 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E865 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E86A 01                         byte_E6F8:	dc.b 1
0000E86B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E870 02                         byte_E6FE:	dc.b 2
0000E871 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E876 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E87B 02                         byte_E709:	dc.b 2
0000E87C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E881 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E886 03                         byte_E714:	dc.b 3
0000E887 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E88C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E891 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E896 03                         byte_E724:	dc.b 3
0000E897 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E89C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8A1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E8A6 04                         byte_E734:	dc.b 4
0000E8A7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E8AC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E8B1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8B6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E8BB 04                         byte_E749:	dc.b 4
0000E8BC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E8C1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E8C6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8CB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E8D0 05                         byte_E75E:	dc.b 5
0000E8D1 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E8D6 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E8DB 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E8E0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8E5 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E8EA 05                         byte_E778:	dc.b 5
0000E8EB F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E8F0 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E8F5 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E8FA 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E8FF 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E904 06                         byte_E792:	dc.b 6
0000E905 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E90A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E90F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E914 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E919 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E91E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E923 06                         byte_E7B1:	dc.b 6
0000E924 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E929 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E92E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E933 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E938 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E93D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E942                            		even
0000E942                            		even
0000E942                            
0000E942                            ; ===========================================================================
0000E942                            ; ---------------------------------------------------------------------------
0000E942                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000E942                            ; ---------------------------------------------------------------------------
0000E942                            
0000E942                            Obj46:					; XREF: Obj_Index
0000E942 7000                       		moveq	#0,d0
0000E944 1028 0024                  		move.b	$24(a0),d0
0000E948 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000E94C 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000E950                            ; ===========================================================================
0000E950 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000E952 0000                       		dc.w Obj46_Action-Obj46_Index
0000E954                            ; ===========================================================================
0000E954                            
0000E954                            Obj46_Main:				; XREF: Obj46_Index
0000E954 5428 0024                  		addq.b	#2,$24(a0)
0000E958 117C 000F 0016             		move.b	#$F,$16(a0)
0000E95E 117C 000F 0017             		move.b	#$F,$17(a0)
0000E964 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000E96C 317C 4000 0002             		move.w	#$4000,2(a0)
0000E972 117C 0004 0001             		move.b	#4,1(a0)
0000E978 117C 0003 0018             		move.b	#3,$18(a0)
0000E97E 117C 0010 0019             		move.b	#$10,$19(a0)
0000E984 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E98A 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000E990                            
0000E990                            Obj46_Action:				; XREF: Obj46_Index
0000E990 4A28 0001                  		tst.b	1(a0)
0000E994 6A00                       		bpl.s	Obj46_ChkDel
0000E996 7000                       		moveq	#0,d0
0000E998 1028 0028                  		move.b	$28(a0),d0	; get object type
0000E99C 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000E9A0 D040                       		add.w	d0,d0
0000E9A2 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000E9A6 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000E9AA 323C 001B                  		move.w	#$1B,d1
0000E9AE 343C 0010                  		move.w	#$10,d2
0000E9B2 363C 0011                  		move.w	#$11,d3
0000E9B6 3828 0008                  		move.w	8(a0),d4
0000E9BA 6100 0000                  		bsr.w	SolidObject
0000E9BE                            
0000E9BE                            Obj46_ChkDel:
0000E9BE 6100 EDBC                  		bsr.w	DisplaySprite
0000E9C2 3028 0008                  		move.w	8(a0),d0
0000E9C6 0240 FF80                  		andi.w	#$FF80,d0
0000E9CA 3238 F700                  		move.w	($FFFFF700).w,d1
0000E9CE 0441 0080                  		subi.w	#$80,d1
0000E9D2 0241 FF80                  		andi.w	#$FF80,d1
0000E9D6 9041                       		sub.w	d1,d0
0000E9D8 0C40 0280                  		cmpi.w	#$280,d0
0000E9DC 6200 EDDA                  		bhi.w	DeleteObject
0000E9E0 4E75                       		rts	
0000E9E2                            ; ===========================================================================
0000E9E2 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000E9E4 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000E9E6 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000E9E8 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000E9EA 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000E9EC                            ; ===========================================================================
0000E9EC                            
0000E9EC                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000E9EC 4E75                       		rts	
0000E9EE                            ; ===========================================================================
0000E9EE                            
0000E9EE                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000E9EE 3038 D008                  		move.w	($FFFFD008).w,d0
0000E9F2 9068 0008                  		sub.w	8(a0),d0
0000E9F6 6400                       		bcc.s	loc_E888
0000E9F8 4440                       		neg.w	d0
0000E9FA                            
0000E9FA                            loc_E888:
0000E9FA 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000E9FE 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000EA00 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000EA06                            
0000EA06                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000EA06 7000                       		moveq	#0,d0
0000EA08 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000EA0C 0828 0003 0028             		btst	#3,$28(a0)
0000EA12 6700                       		beq.s	loc_E8A8
0000EA14 4440                       		neg.w	d0
0000EA16 0640 0010                  		addi.w	#$10,d0
0000EA1A                            
0000EA1A                            loc_E8A8:
0000EA1A 3228 0030                  		move.w	$30(a0),d1
0000EA1E 9240                       		sub.w	d0,d1
0000EA20 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000EA24 4E75                       		rts	
0000EA26                            ; ===========================================================================
0000EA26                            
0000EA26                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000EA26 6100 ED2E                  		bsr.w	SpeedToPos
0000EA2A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000EA30 6100 0000                  		bsr.w	ObjHitFloor
0000EA34 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000EA36 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000EA3A D368 000C                  		add.w	d1,$C(a0)
0000EA3E 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000EA42 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EA48 117C 0004 0028             		move.b	#4,$28(a0)
0000EA4E 3011                       		move.w	(a1),d0
0000EA50 0240 03FF                  		andi.w	#$3FF,d0
0000EA54 0C40 02E8                  		cmpi.w	#$2E8,d0
0000EA58 6400                       		bcc.s	locret_E8EE
0000EA5A 117C 0000 0028             		move.b	#0,$28(a0)
0000EA60                            
0000EA60                            locret_E8EE:
0000EA60 4E75                       		rts	
0000EA62                            ; ===========================================================================
0000EA62                            
0000EA62                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000EA62 7000                       		moveq	#0,d0
0000EA64 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000EA68 E648                       		lsr.w	#3,d0
0000EA6A 3228 0030                  		move.w	$30(a0),d1
0000EA6E 9240                       		sub.w	d0,d1
0000EA70 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000EA74 4E75                       		rts	
0000EA76                            ; ===========================================================================
0000EA76                            ; ---------------------------------------------------------------------------
0000EA76                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EA76                            ; ---------------------------------------------------------------------------
0000EA76                            Map_obj46:
0000EA76                            	include "_maps\obj46.asm"
0000EA76                            ; ---------------------------------------------------------------------------
0000EA76                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000EA76                            ; ---------------------------------------------------------------------------
0000EA76 0000                       		dc.w byte_E906-Map_obj46
0000EA78 01                         byte_E906:	dc.b 1
0000EA79 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000EA7E                            		even
0000EA7E                            		even
0000EA7E                            
0000EA7E                            ; ===========================================================================
0000EA7E                            ; ---------------------------------------------------------------------------
0000EA7E                            ; Object 12 - lamp (SYZ)
0000EA7E                            ; ---------------------------------------------------------------------------
0000EA7E                            
0000EA7E                            Obj12:					; XREF: Obj_Index
0000EA7E 7000                       		moveq	#0,d0
0000EA80 1028 0024                  		move.b	$24(a0),d0
0000EA84 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000EA88 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000EA8C                            ; ===========================================================================
0000EA8C 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000EA8E 0000                       		dc.w Obj12_Animate-Obj12_Index
0000EA90                            ; ===========================================================================
0000EA90                            
0000EA90                            Obj12_Main:				; XREF: Obj12_Index
0000EA90 5428 0024                  		addq.b	#2,$24(a0)
0000EA94 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000EA9C 317C 0000 0002             		move.w	#0,2(a0)
0000EAA2 117C 0004 0001             		move.b	#4,1(a0)
0000EAA8 117C 0010 0019             		move.b	#$10,$19(a0)
0000EAAE 117C 0006 0018             		move.b	#6,$18(a0)
0000EAB4                            
0000EAB4                            Obj12_Animate:				; XREF: Obj12_Index
0000EAB4 5328 001E                  		subq.b	#1,$1E(a0)
0000EAB8 6A00                       		bpl.s	Obj12_ChkDel
0000EABA 117C 0007 001E             		move.b	#7,$1E(a0)
0000EAC0 5228 001A                  		addq.b	#1,$1A(a0)
0000EAC4 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000EACA 6500                       		bcs.s	Obj12_ChkDel
0000EACC 117C 0000 001A             		move.b	#0,$1A(a0)
0000EAD2                            
0000EAD2                            Obj12_ChkDel:
0000EAD2 3028 0008                  		move.w	8(a0),d0
0000EAD6 0240 FF80                  		andi.w	#$FF80,d0
0000EADA 3238 F700                  		move.w	($FFFFF700).w,d1
0000EADE 0441 0080                  		subi.w	#$80,d1
0000EAE2 0241 FF80                  		andi.w	#$FF80,d1
0000EAE6 9041                       		sub.w	d1,d0
0000EAE8 0C40 0280                  		cmpi.w	#$280,d0
0000EAEC 6200 ECCA                  		bhi.w	DeleteObject
0000EAF0 6000 EC8A                  		bra.w	DisplaySprite
0000EAF4                            ; ===========================================================================
0000EAF4                            ; ---------------------------------------------------------------------------
0000EAF4                            ; Sprite mappings - lamp (SYZ)
0000EAF4                            ; ---------------------------------------------------------------------------
0000EAF4                            Map_obj12:
0000EAF4                            	include "_maps\obj12.asm"
0000EAF4                            ; ---------------------------------------------------------------------------
0000EAF4                            ; Sprite mappings - lamp (SYZ)
0000EAF4                            ; ---------------------------------------------------------------------------
0000EAF4 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000EAF8 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000EAFC 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000EB00 02                         byte_E98E:	dc.b 2
0000EB01 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000EB06 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000EB0B 02                         byte_E999:	dc.b 2
0000EB0C F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000EB11 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000EB16 02                         byte_E9A4:	dc.b 2
0000EB17 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000EB1C 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000EB21 02                         byte_E9AF:	dc.b 2
0000EB22 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000EB27 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000EB2C 02                         byte_E9BA:	dc.b 2
0000EB2D F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000EB32 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000EB37 02                         byte_E9C5:	dc.b 2
0000EB38 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000EB3D 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000EB42                            		even
0000EB42                            		even
0000EB42                            
0000EB42                            ; ===========================================================================
0000EB42                            ; ---------------------------------------------------------------------------
0000EB42                            ; Object 47 - pinball bumper (SYZ)
0000EB42                            ; ---------------------------------------------------------------------------
0000EB42                            
0000EB42                            Obj47:					; XREF: Obj_Index
0000EB42 7000                       		moveq	#0,d0
0000EB44 1028 0024                  		move.b	$24(a0),d0
0000EB48 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000EB4C 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000EB50                            ; ===========================================================================
0000EB50 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000EB52 0000                       		dc.w Obj47_Hit-Obj47_Index
0000EB54                            ; ===========================================================================
0000EB54                            
0000EB54                            Obj47_Main:				; XREF: Obj47_Index
0000EB54 5428 0024                  		addq.b	#2,$24(a0)
0000EB58 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000EB60 317C 0380 0002             		move.w	#$380,2(a0)
0000EB66 117C 0004 0001             		move.b	#4,1(a0)
0000EB6C 117C 0010 0019             		move.b	#$10,$19(a0)
0000EB72 117C 0001 0018             		move.b	#1,$18(a0)
0000EB78 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000EB7E                            
0000EB7E                            Obj47_Hit:				; XREF: Obj47_Index
0000EB7E 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000EB82 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000EB86 4228 0021                  		clr.b	$21(a0)
0000EB8A 43F8 D000                  		lea	($FFFFD000).w,a1
0000EB8E 3228 0008                  		move.w	8(a0),d1
0000EB92 3428 000C                  		move.w	$C(a0),d2
0000EB96 9269 0008                  		sub.w	8(a1),d1
0000EB9A 9469 000C                  		sub.w	$C(a1),d2
0000EB9E 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0000EBA4 4EB9 0000 29DA             		jsr	(CalcSine).l
0000EBAA C3FC F900                  		muls.w	#-$700,d1
0000EBAE E081                       		asr.l	#8,d1
0000EBB0 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000EBB4 C1FC F900                  		muls.w	#-$700,d0
0000EBB8 E080                       		asr.l	#8,d0
0000EBBA 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000EBBE 08E9 0001 0022             		bset	#1,$22(a1)
0000EBC4 08A9 0004 0022             		bclr	#4,$22(a1)
0000EBCA 08A9 0005 0022             		bclr	#5,$22(a1)
0000EBD0 4229 003C                  		clr.b	$3C(a1)
0000EBD4 117C 0001 001C             		move.b	#1,$1C(a0)
0000EBDA 303C 00B4                  		move.w	#$B4,d0
0000EBDE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EBE4 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EBE8 7000                       		moveq	#0,d0
0000EBEA 1028 0023                  		move.b	$23(a0),d0
0000EBEE 6700                       		beq.s	Obj47_Score
0000EBF0 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EBF6 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EBF8 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EBFC                            
0000EBFC                            Obj47_Score:
0000EBFC 7001                       		moveq	#1,d0
0000EBFE 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EC04 6100 EFFC                  		bsr.w	SingleObjLoad
0000EC08 6600                       		bne.s	Obj47_Display
0000EC0A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EC0E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EC14 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EC1A 137C 0004 001A             		move.b	#4,$1A(a1)
0000EC20                            
0000EC20                            Obj47_Display:
0000EC20 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000EC26 6100 BBC6                  		bsr.w	AnimateSprite
0000EC2A 3028 0008                  		move.w	8(a0),d0
0000EC2E 0240 FF80                  		andi.w	#$FF80,d0
0000EC32 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC36 0441 0080                  		subi.w	#$80,d1
0000EC3A 0241 FF80                  		andi.w	#$FF80,d1
0000EC3E 9041                       		sub.w	d1,d0
0000EC40 0C40 0280                  		cmpi.w	#$280,d0
0000EC44 6200                       		bhi.s	Obj47_ChkHit
0000EC46 6000 EB34                  		bra.w	DisplaySprite
0000EC4A                            ; ===========================================================================
0000EC4A                            
0000EC4A                            Obj47_ChkHit:				; XREF: Obj47_Display
0000EC4A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EC4E 7000                       		moveq	#0,d0
0000EC50 1028 0023                  		move.b	$23(a0),d0
0000EC54 6700                       		beq.s	Obj47_Delete
0000EC56 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EC5C                            
0000EC5C                            Obj47_Delete:
0000EC5C 6000 EB5A                  		bra.w	DeleteObject
0000EC60                            ; ===========================================================================
0000EC60                            Ani_obj47:
0000EC60                            	include "_anim\obj47.asm"
0000EC60                            ; ---------------------------------------------------------------------------
0000EC60                            ; Animation script - flamethrower (SBZ)
0000EC60                            ; ---------------------------------------------------------------------------
0000EC60 0000                       		dc.w byte_EAF4-Ani_obj47
0000EC62 0000                       		dc.w byte_EAF8-Ani_obj47
0000EC64 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000EC68 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000EC70                            		even
0000EC70                            		even
0000EC70                            
0000EC70                            ; ---------------------------------------------------------------------------
0000EC70                            ; Sprite mappings - pinball bumper (SYZ)
0000EC70                            ; ---------------------------------------------------------------------------
0000EC70                            Map_obj47:
0000EC70                            	include "_maps\obj47.asm"
0000EC70                            ; ---------------------------------------------------------------------------
0000EC70                            ; Sprite mappings - pinball bumper (SYZ)
0000EC70                            ; ---------------------------------------------------------------------------
0000EC70 0000                       		dc.w byte_EB06-Map_obj47
0000EC72 0000                       		dc.w byte_EB11-Map_obj47
0000EC74 0000                       		dc.w byte_EB1C-Map_obj47
0000EC76 02                         byte_EB06:	dc.b 2
0000EC77 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000EC7C F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000EC81 02                         byte_EB11:	dc.b 2
0000EC82 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000EC87 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000EC8C 02                         byte_EB1C:	dc.b 2
0000EC8D F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000EC92 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000EC98 00                         		even
0000EC98 00                         		even
0000EC98                            
0000EC98                            ; ===========================================================================
0000EC98                            ; ---------------------------------------------------------------------------
0000EC98                            ; Object 0D - signpost at the end of a level
0000EC98                            ; ---------------------------------------------------------------------------
0000EC98                            
0000EC98                            Obj0D:					; XREF: Obj_Index
0000EC98 7000                       		moveq	#0,d0
0000EC9A 1028 0024                  		move.b	$24(a0),d0
0000EC9E 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000ECA2 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000ECA6 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000ECAC 6100 BB40                  		bsr.w	AnimateSprite
0000ECB0 6100 EACA                  		bsr.w	DisplaySprite
0000ECB4 3028 0008                  		move.w	8(a0),d0
0000ECB8 0240 FF80                  		andi.w	#$FF80,d0
0000ECBC 3238 F700                  		move.w	($FFFFF700).w,d1
0000ECC0 0441 0080                  		subi.w	#$80,d1
0000ECC4 0241 FF80                  		andi.w	#$FF80,d1
0000ECC8 9041                       		sub.w	d1,d0
0000ECCA 0C40 0280                  		cmpi.w	#$280,d0
0000ECCE 6200 EAE8                  		bhi.w	DeleteObject
0000ECD2 4E75                       		rts	
0000ECD4                            ; ===========================================================================
0000ECD4 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000ECD6 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000ECD8 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000ECDA 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000ECDC 0000                       		dc.w locret_ED1A-Obj0D_Index
0000ECDE                            ; ===========================================================================
0000ECDE                            
0000ECDE                            Obj0D_Main:				; XREF: Obj0D_Index
0000ECDE 5428 0024                  		addq.b	#2,$24(a0)
0000ECE2 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000ECEA 317C 0680 0002             		move.w	#$680,2(a0)
0000ECF0 117C 0004 0001             		move.b	#4,1(a0)
0000ECF6 117C 0018 0019             		move.b	#$18,$19(a0)
0000ECFC 117C 0004 0018             		move.b	#4,$18(a0)
0000ED02                            
0000ED02                            Obj0D_Touch:				; XREF: Obj0D_Index
0000ED02 3038 D008                  		move.w	($FFFFD008).w,d0
0000ED06 9068 0008                  		sub.w	8(a0),d0
0000ED0A 6500                       		bcs.s	locret_EBBA
0000ED0C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000ED10 6400                       		bcc.s	locret_EBBA	; if not, branch
0000ED12 303C 00CF                  		move.w	#$CF,d0
0000ED16 4EB9 0000 1396             		jsr	(PlaySound).l	; play signpost	sound
0000ED1C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000ED20 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000ED26 5428 0024                  		addq.b	#2,$24(a0)
0000ED2A                            
0000ED2A                            locret_EBBA:
0000ED2A 4E75                       		rts	
0000ED2C                            ; ===========================================================================
0000ED2C                            
0000ED2C                            Obj0D_Spin:				; XREF: Obj0D_Index
0000ED2C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000ED30 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000ED32 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000ED38 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000ED3C 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000ED42 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000ED44 5428 0024                  		addq.b	#2,$24(a0)
0000ED48                            
0000ED48                            Obj0D_Sparkle:
0000ED48 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000ED4C 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000ED4E 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000ED54 7000                       		moveq	#0,d0
0000ED56 1028 0034                  		move.b	$34(a0),d0
0000ED5A 5428 0034                  		addq.b	#2,$34(a0)
0000ED5E 0228 000E 0034             		andi.b	#$E,$34(a0)
0000ED64 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000ED68 6100 EE98                  		bsr.w	SingleObjLoad
0000ED6C 6600                       		bne.s	locret_EC42
0000ED6E 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000ED72 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000ED78 101A                       		move.b	(a2)+,d0
0000ED7A 4880                       		ext.w	d0
0000ED7C D068 0008                  		add.w	8(a0),d0
0000ED80 3340 0008                  		move.w	d0,8(a1)
0000ED84 101A                       		move.b	(a2)+,d0
0000ED86 4880                       		ext.w	d0
0000ED88 D068 000C                  		add.w	$C(a0),d0
0000ED8C 3340 000C                  		move.w	d0,$C(a1)
0000ED90 237C 0000 A068 0004        		move.l	#Map_obj25,4(a1)
0000ED98 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000ED9E 137C 0004 0001             		move.b	#4,1(a1)
0000EDA4 137C 0002 0018             		move.b	#2,$18(a1)
0000EDAA 137C 0008 0019             		move.b	#8,$19(a1)
0000EDB0                            
0000EDB0                            locret_EC42:
0000EDB0 4E75                       		rts	
0000EDB2                            ; ===========================================================================
0000EDB2 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000EDB4 0808                       		dc.b	8,   8
0000EDB6 F000                       		dc.b -$10,   0
0000EDB8 18F8                       		dc.b  $18,  -8
0000EDBA 00F8                       		dc.b	0,  -8
0000EDBC 1000                       		dc.b  $10,   0
0000EDBE E808                       		dc.b -$18,   8
0000EDC0 1810                       		dc.b  $18, $10
0000EDC2                            ; ===========================================================================
0000EDC2                            
0000EDC2                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000EDC2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000EDC6 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000EDCA 0838 0001 D022             		btst	#1,($FFFFD022).w
0000EDD0 6600                       		bne.s	loc_EC70
0000EDD2 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000EDD8 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000EDDE 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000EDE0 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000EDE6 6000                       		bra.s	loc_EC70
0000EDE8                            
0000EDE8                            Obj0D_MoveLeft:
0000EDE8 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000EDEE                            
0000EDEE                            loc_EC70:
0000EDEE 4A38 D000                  		tst.b	($FFFFD000).w
0000EDF2 6700                       		beq.s	loc_EC86
0000EDF4 3038 D008                  		move.w	($FFFFD008).w,d0
0000EDF8 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000EDFC 0641 0128                  		addi.w	#$128,d1
0000EE00 B041                       		cmp.w	d1,d0
0000EE02 6500                       		bcs.s	locret_ECEE
0000EE04                            
0000EE04                            loc_EC86:
0000EE04 5428 0024                  		addq.b	#2,$24(a0)
0000EE08                            
0000EE08                            ; ---------------------------------------------------------------------------
0000EE08                            ; Subroutine to	set up bonuses at the end of an	act
0000EE08                            ; ---------------------------------------------------------------------------
0000EE08                            
0000EE08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EE08                            
0000EE08                            
0000EE08                            GotThroughAct:				; XREF: Obj3E_EndAct
0000EE08 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000EE0C 6600                       		bne.s	locret_ECEE
0000EE0E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000EE14 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000EE18 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EE1C 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000EE22 7010                       		moveq	#$10,d0
0000EE24 4EB9 0000 15B2             		jsr	(LoadPLC2).l	; load title card patterns
0000EE2A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000EE30 7000                       		moveq	#0,d0
0000EE32 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000EE36 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000EE3A 7200                       		moveq	#0,d1
0000EE3C 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000EE40 D041                       		add.w	d1,d0		; add up your time
0000EE42 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000EE46 7214                       		moveq	#$14,d1
0000EE48 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000EE4A 6500                       		bcs.s	loc_ECD0	; if not, branch
0000EE4C 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000EE4E                            
0000EE4E                            loc_ECD0:
0000EE4E D040                       		add.w	d0,d0
0000EE50 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000EE56 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000EE5A C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000EE5E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000EE62 303C 008E                  		move.w	#$8E,d0
0000EE66 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000EE6C                            
0000EE6C                            locret_ECEE:
0000EE6C 4E75                       		rts	
0000EE6E                            ; End of function GotThroughAct
0000EE6E                            
0000EE6E                            ; ===========================================================================
0000EE6E 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000EE82 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000EE98                            ; ===========================================================================
0000EE98                            
0000EE98                            locret_ED1A:				; XREF: Obj0D_Index
0000EE98 4E75                       		rts	
0000EE9A                            ; ===========================================================================
0000EE9A                            Ani_obj0D:
0000EE9A                            	include "_anim\obj0D.asm"
0000EE9A                            ; ---------------------------------------------------------------------------
0000EE9A                            ; Animation script - signpost
0000EE9A                            ; ---------------------------------------------------------------------------
0000EE9A 0000                       		dc.w byte_ED24-Ani_obj0D
0000EE9C 0000                       		dc.w byte_ED28-Ani_obj0D
0000EE9E 0000                       		dc.w byte_ED2E-Ani_obj0D
0000EEA0 0000                       		dc.w byte_ED34-Ani_obj0D
0000EEA2 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000EEA6 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000EEAC 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000EEB2 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000EEB6 00                         		even
0000EEB6 00                         		even
0000EEB6                            
0000EEB6                            ; ---------------------------------------------------------------------------
0000EEB6                            ; Sprite mappings - signpost
0000EEB6                            ; ---------------------------------------------------------------------------
0000EEB6                            Map_obj0D:
0000EEB6                            	include "_maps\obj0D.asm"
0000EEB6                            ; ---------------------------------------------------------------------------
0000EEB6                            ; Sprite mappings - signpost
0000EEB6                            ; ---------------------------------------------------------------------------
0000EEB6 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000EEBA 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000EEBE 0000                       		dc.w byte_ED73-Map_obj0D
0000EEC0 03                         byte_ED42:	dc.b 3
0000EEC1 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000EEC6 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000EECB 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EED0 02                         byte_ED52:	dc.b 2
0000EED1 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000EED6 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EEDB 02                         byte_ED5D:	dc.b 2
0000EEDC F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000EEE1 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000EEE6 02                         byte_ED68:	dc.b 2
0000EEE7 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000EEEC 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000EEF1 03                         byte_ED73:	dc.b 3
0000EEF2 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000EEF7 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000EEFC 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000EF02 00                         		even
0000EF02 00                         		even
0000EF02                            
0000EF02                            ; ===========================================================================
0000EF02                            ; ---------------------------------------------------------------------------
0000EF02                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000EF02                            ; ---------------------------------------------------------------------------
0000EF02                            
0000EF02                            Obj4C:					; XREF: Obj_Index
0000EF02 7000                       		moveq	#0,d0
0000EF04 1028 0024                  		move.b	$24(a0),d0
0000EF08 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000EF0C 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000EF10 6000 0000                  		bra.w	Obj4D_ChkDel
0000EF14                            ; ===========================================================================
0000EF14 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000EF16 0000                       		dc.w loc_EDCC-Obj4C_Index
0000EF18 0000                       		dc.w loc_EE3E-Obj4C_Index
0000EF1A 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000EF1C 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000EF1E 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000EF20                            ; ===========================================================================
0000EF20                            
0000EF20                            Obj4C_Main:				; XREF: Obj4C_Index
0000EF20 5428 0024                  		addq.b	#2,$24(a0)
0000EF24 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000EF2C 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000EF32 117C 0004 0001             		move.b	#4,1(a0)
0000EF38 117C 0001 0018             		move.b	#1,$18(a0)
0000EF3E 117C 0038 0019             		move.b	#$38,$19(a0)
0000EF44 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000EF4A                            
0000EF4A                            loc_EDCC:				; XREF: Obj4C_Index
0000EF4A 5368 0032                  		subq.w	#1,$32(a0)
0000EF4E 6A00                       		bpl.s	locret_EDF0
0000EF50 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000EF56 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000EF5A 3228 000C                  		move.w	$C(a0),d1
0000EF5E B041                       		cmp.w	d1,d0
0000EF60 6400                       		bcc.s	locret_EDF0
0000EF62 0441 0170                  		subi.w	#$170,d1
0000EF66 B041                       		cmp.w	d1,d0
0000EF68 6500                       		bcs.s	locret_EDF0
0000EF6A 5428 0024                  		addq.b	#2,$24(a0)
0000EF6E                            
0000EF6E                            locret_EDF0:
0000EF6E 4E75                       		rts	
0000EF70                            ; ===========================================================================
0000EF70                            
0000EF70                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000EF70 5428 0024                  		addq.b	#2,$24(a0)
0000EF74 6100 ECA2                  		bsr.w	SingleObjLoad2
0000EF78 6600                       		bne.s	loc_EE18
0000EF7A 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000EF7E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EF84 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EF8A 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EF90 2348 003C                  		move.l	a0,$3C(a1)
0000EF94                            
0000EF94                            loc_EE18:
0000EF94 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF9A 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EF9E 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000EFA0 117C 0004 001C             		move.b	#4,$1C(a0)
0000EFA6 6000                       		bra.s	Obj4C_Display
0000EFA8                            ; ===========================================================================
0000EFA8                            
0000EFA8                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000EFA8 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000EFAC 08E9 0001 0022             		bset	#1,$22(a1)
0000EFB2 337C FA80 0012             		move.w	#-$580,$12(a1)
0000EFB8 6000                       		bra.s	Obj4C_Display
0000EFBA                            ; ===========================================================================
0000EFBA                            
0000EFBA                            loc_EE3E:				; XREF: Obj4C_Index
0000EFBA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EFBE 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000EFC0 5428 0024                  		addq.b	#2,$24(a0)
0000EFC4 4E75                       		rts	
0000EFC6                            ; ===========================================================================
0000EFC6                            
0000EFC6                            Obj4C_Display:				; XREF: Obj4C_Index
0000EFC6 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000EFCC 6100 B820                  		bsr.w	AnimateSprite
0000EFD0 6100 E7AA                  		bsr.w	DisplaySprite
0000EFD4 4E75                       		rts	
0000EFD6                            ; ===========================================================================
0000EFD6                            
0000EFD6                            Obj4C_Delete:				; XREF: Obj4C_Index
0000EFD6 117C 0000 001C             		move.b	#0,$1C(a0)
0000EFDC 117C 0002 0024             		move.b	#2,$24(a0)
0000EFE2 4A28 0028                  		tst.b	$28(a0)
0000EFE6 6700 E7D0                  		beq.w	DeleteObject
0000EFEA 4E75                       		rts	
0000EFEC                            ; ===========================================================================
0000EFEC                            ; ---------------------------------------------------------------------------
0000EFEC                            ; Object 4D - lava geyser / lavafall (MZ)
0000EFEC                            ; ---------------------------------------------------------------------------
0000EFEC                            
0000EFEC                            Obj4D:					; XREF: Obj_Index
0000EFEC 7000                       		moveq	#0,d0
0000EFEE 1028 0024                  		move.b	$24(a0),d0
0000EFF2 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000EFF6 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000EFFA 6000 E780                  		bra.w	DisplaySprite
0000EFFE                            ; ===========================================================================
0000EFFE 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000F000 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000F002 0000                       		dc.w loc_EFFC-Obj4D_Index
0000F004 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000F006                            
0000F006 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000F00A                            ; ===========================================================================
0000F00A                            
0000F00A                            Obj4D_Main:				; XREF: Obj4D_Index
0000F00A 5428 0024                  		addq.b	#2,$24(a0)
0000F00E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F014 4A28 0028                  		tst.b	$28(a0)
0000F018 6700                       		beq.s	loc_EEA4
0000F01A 0468 0250 000C             		subi.w	#$250,$C(a0)
0000F020                            
0000F020                            loc_EEA4:
0000F020 7000                       		moveq	#0,d0
0000F022 1028 0028                  		move.b	$28(a0),d0
0000F026 D040                       		add.w	d0,d0
0000F028 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000F02E 2248                       		movea.l	a0,a1
0000F030 7201                       		moveq	#1,d1
0000F032 6100                       		bsr.s	Obj4D_MakeLava
0000F034 6000                       		bra.s	loc_EF10
0000F036                            ; ===========================================================================
0000F036                            
0000F036                            Obj4D_Loop:
0000F036 6100 EBE0                  		bsr.w	SingleObjLoad2
0000F03A 6600                       		bne.s	loc_EF0A
0000F03C                            
0000F03C                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000F03C 12BC 004D                  		move.b	#$4D,0(a1)
0000F040 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000F048 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F04E 137C 0004 0001             		move.b	#4,1(a1)
0000F054 137C 0020 0019             		move.b	#$20,$19(a1)
0000F05A 3368 0008 0008             		move.w	8(a0),8(a1)
0000F060 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F066 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F06C 137C 0001 0018             		move.b	#1,$18(a1)
0000F072 137C 0005 001C             		move.b	#5,$1C(a1)
0000F078 4A28 0028                  		tst.b	$28(a0)
0000F07C 6700                       		beq.s	loc_EF0A
0000F07E 137C 0002 001C             		move.b	#2,$1C(a1)
0000F084                            
0000F084                            loc_EF0A:
0000F084 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000F088 4E75                       		rts	
0000F08A                            ; ===========================================================================
0000F08A                            
0000F08A                            loc_EF10:				; XREF: Obj4D_Main
0000F08A 0669 0060 000C             		addi.w	#$60,$C(a1)
0000F090 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F096 0669 0060 0030             		addi.w	#$60,$30(a1)
0000F09C 137C 0093 0020             		move.b	#$93,$20(a1)
0000F0A2 137C 0080 0016             		move.b	#$80,$16(a1)
0000F0A8 08E9 0004 0001             		bset	#4,1(a1)
0000F0AE 5829 0024                  		addq.b	#4,$24(a1)
0000F0B2 2348 003C                  		move.l	a0,$3C(a1)
0000F0B6 4A28 0028                  		tst.b	$28(a0)
0000F0BA 6700                       		beq.s	Obj4D_PlaySnd
0000F0BC 7200                       		moveq	#0,d1
0000F0BE 6100 FF76                  		bsr.w	Obj4D_Loop
0000F0C2 5429 0024                  		addq.b	#2,$24(a1)
0000F0C6 08E9 0004 0002             		bset	#4,2(a1)
0000F0CC 0669 0100 000C             		addi.w	#$100,$C(a1)
0000F0D2 137C 0000 0018             		move.b	#0,$18(a1)
0000F0D8 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000F0DE 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000F0E4 117C 0000 0028             		move.b	#0,$28(a0)
0000F0EA                            
0000F0EA                            Obj4D_PlaySnd:
0000F0EA 303C 00C8                  		move.w	#$C8,d0
0000F0EE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000F0F4                            
0000F0F4                            Obj4D_Action:				; XREF: Obj4D_Index
0000F0F4 7000                       		moveq	#0,d0
0000F0F6 1028 0028                  		move.b	$28(a0),d0
0000F0FA D040                       		add.w	d0,d0
0000F0FC 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000F100 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000F104 6100 E650                  		bsr.w	SpeedToPos
0000F108 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000F10E 6100 B6DE                  		bsr.w	AnimateSprite
0000F112                            
0000F112                            Obj4D_ChkDel:				; XREF: Obj4C
0000F112 3028 0008                  		move.w	8(a0),d0
0000F116 0240 FF80                  		andi.w	#$FF80,d0
0000F11A 3238 F700                  		move.w	($FFFFF700).w,d1
0000F11E 0441 0080                  		subi.w	#$80,d1
0000F122 0241 FF80                  		andi.w	#$FF80,d1
0000F126 9041                       		sub.w	d1,d0
0000F128 0C40 0280                  		cmpi.w	#$280,d0
0000F12C 6200 E68A                  		bhi.w	DeleteObject
0000F130 4E75                       		rts	
0000F132                            ; ===========================================================================
0000F132 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000F134 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000F136                            ; ===========================================================================
0000F136                            
0000F136                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000F136 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F13C 3028 0030                  		move.w	$30(a0),d0
0000F140 B068 000C                  		cmp.w	$C(a0),d0
0000F144 6400                       		bcc.s	locret_EFDA
0000F146 5828 0024                  		addq.b	#4,$24(a0)
0000F14A 2268 003C                  		movea.l	$3C(a0),a1
0000F14E 137C 0003 001C             		move.b	#3,$1C(a1)
0000F154                            
0000F154                            locret_EFDA:
0000F154 4E75                       		rts	
0000F156                            ; ===========================================================================
0000F156                            
0000F156                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000F156 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000F15C 3028 0030                  		move.w	$30(a0),d0
0000F160 B068 000C                  		cmp.w	$C(a0),d0
0000F164 6400                       		bcc.s	locret_EFFA
0000F166 5828 0024                  		addq.b	#4,$24(a0)
0000F16A 2268 003C                  		movea.l	$3C(a0),a1
0000F16E 137C 0001 001C             		move.b	#1,$1C(a1)
0000F174                            
0000F174                            locret_EFFA:
0000F174 4E75                       		rts	
0000F176                            ; ===========================================================================
0000F176                            
0000F176                            loc_EFFC:				; XREF: Obj4D_Index
0000F176 2268 003C                  		movea.l	$3C(a0),a1
0000F17A 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000F180 6700 0000                  		beq.w	Obj4D_Delete
0000F184 3029 000C                  		move.w	$C(a1),d0
0000F188 0640 0060                  		addi.w	#$60,d0
0000F18C 3140 000C                  		move.w	d0,$C(a0)
0000F190 9068 0030                  		sub.w	$30(a0),d0
0000F194 4440                       		neg.w	d0
0000F196 7208                       		moveq	#8,d1
0000F198 0C40 0040                  		cmpi.w	#$40,d0
0000F19C 6C00                       		bge.s	loc_F026
0000F19E 720B                       		moveq	#$B,d1
0000F1A0                            
0000F1A0                            loc_F026:
0000F1A0 0C40 0080                  		cmpi.w	#$80,d0
0000F1A4 6F00                       		ble.s	loc_F02E
0000F1A6 720E                       		moveq	#$E,d1
0000F1A8                            
0000F1A8                            loc_F02E:
0000F1A8 5328 001E                  		subq.b	#1,$1E(a0)
0000F1AC 6A00                       		bpl.s	loc_F04C
0000F1AE 117C 0007 001E             		move.b	#7,$1E(a0)
0000F1B4 5228 001B                  		addq.b	#1,$1B(a0)
0000F1B8 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000F1BE 6500                       		bcs.s	loc_F04C
0000F1C0 117C 0000 001B             		move.b	#0,$1B(a0)
0000F1C6                            
0000F1C6                            loc_F04C:
0000F1C6 1028 001B                  		move.b	$1B(a0),d0
0000F1CA D001                       		add.b	d1,d0
0000F1CC 1140 001A                  		move.b	d0,$1A(a0)
0000F1D0 6000 FF40                  		bra.w	Obj4D_ChkDel
0000F1D4                            ; ===========================================================================
0000F1D4                            
0000F1D4                            Obj4D_Delete:				; XREF: Obj4D_Index
0000F1D4 6000 E5E2                  		bra.w	DeleteObject
0000F1D8                            ; ===========================================================================
0000F1D8                            ; ---------------------------------------------------------------------------
0000F1D8                            ; Object 4E - advancing	wall of	lava (MZ)
0000F1D8                            ; ---------------------------------------------------------------------------
0000F1D8                            
0000F1D8                            Obj4E:					; XREF: Obj_Index
0000F1D8 7000                       		moveq	#0,d0
0000F1DA 1028 0024                  		move.b	$24(a0),d0
0000F1DE 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F1E2 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F1E6                            ; ===========================================================================
0000F1E6 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F1E8 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F1EA 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F1EC 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F1EE 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F1F0                            ; ===========================================================================
0000F1F0                            
0000F1F0                            Obj4E_Main:				; XREF: Obj4E_Index
0000F1F0 5828 0024                  		addq.b	#4,$24(a0)
0000F1F4 2248                       		movea.l	a0,a1
0000F1F6 7201                       		moveq	#1,d1
0000F1F8 6000                       		bra.s	Obj4E_Main2
0000F1FA                            ; ===========================================================================
0000F1FA                            
0000F1FA                            Obj4E_Loop:
0000F1FA 6100 EA1C                  		bsr.w	SingleObjLoad2
0000F1FE 6600                       		bne.s	loc_F0C8
0000F200                            
0000F200                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F200 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F204 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F20C 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F212 137C 0004 0001             		move.b	#4,1(a1)
0000F218 137C 0050 0019             		move.b	#$50,$19(a1)
0000F21E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F224 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F22A 137C 0001 0018             		move.b	#1,$18(a1)
0000F230 137C 0000 001C             		move.b	#0,$1C(a1)
0000F236 137C 0094 0020             		move.b	#$94,$20(a1)
0000F23C 2348 003C                  		move.l	a0,$3C(a1)
0000F240                            
0000F240                            loc_F0C8:
0000F240 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F244                            
0000F244 5C29 0024                  		addq.b	#6,$24(a1)
0000F248 137C 0004 001A             		move.b	#4,$1A(a1)
0000F24E                            
0000F24E                            Obj4E_Action:				; XREF: Obj4E_Index
0000F24E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F252 9068 0008                  		sub.w	8(a0),d0
0000F256 6400                       		bcc.s	Obj4E_ChkSonic
0000F258 4440                       		neg.w	d0
0000F25A                            
0000F25A                            Obj4E_ChkSonic:
0000F25A 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F25E 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F260 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F264 9068 000C                  		sub.w	$C(a0),d0
0000F268 6400                       		bcc.s	loc_F0F4
0000F26A 4440                       		neg.w	d0
0000F26C                            
0000F26C                            loc_F0F4:
0000F26C 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F270 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F272 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F278 6000                       		bra.s	Obj4E_Solid
0000F27A                            ; ===========================================================================
0000F27A                            
0000F27A                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F27A 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F27E 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F280 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F286 5528 0024                  		subq.b	#2,$24(a0)
0000F28A                            
0000F28A                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F28A 323C 002B                  		move.w	#$2B,d1
0000F28E 343C 0018                  		move.w	#$18,d2
0000F292 3602                       		move.w	d2,d3
0000F294 5243                       		addq.w	#1,d3
0000F296 3828 0008                  		move.w	8(a0),d4
0000F29A 1028 0024                  		move.b	$24(a0),d0
0000F29E 3F00                       		move.w	d0,-(sp)
0000F2A0 6100 0000                  		bsr.w	SolidObject
0000F2A4 301F                       		move.w	(sp)+,d0
0000F2A6 1140 0024                  		move.b	d0,$24(a0)
0000F2AA 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F2B0 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F2B2 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F2B6 4228 0036                  		clr.b	$36(a0)
0000F2BA                            
0000F2BA                            Obj4E_Animate:
0000F2BA 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F2C0 6100 B52C                  		bsr.w	AnimateSprite
0000F2C4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F2CA 6400                       		bcc.s	Obj4E_ChkDel
0000F2CC 6100 E488                  		bsr.w	SpeedToPos
0000F2D0                            
0000F2D0                            Obj4E_ChkDel:
0000F2D0 6100 E4AA                  		bsr.w	DisplaySprite
0000F2D4 4A28 0036                  		tst.b	$36(a0)
0000F2D8 6600                       		bne.s	locret_F17E
0000F2DA 3028 0008                  		move.w	8(a0),d0
0000F2DE 0240 FF80                  		andi.w	#$FF80,d0
0000F2E2 3238 F700                  		move.w	($FFFFF700).w,d1
0000F2E6 0441 0080                  		subi.w	#$80,d1
0000F2EA 0241 FF80                  		andi.w	#$FF80,d1
0000F2EE 9041                       		sub.w	d1,d0
0000F2F0 0C40 0280                  		cmpi.w	#$280,d0
0000F2F4 6200                       		bhi.s	Obj4E_ChkGone
0000F2F6                            
0000F2F6                            locret_F17E:
0000F2F6 4E75                       		rts	
0000F2F8                            ; ===========================================================================
0000F2F8                            
0000F2F8                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F2F8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F2FC 7000                       		moveq	#0,d0
0000F2FE 1028 0023                  		move.b	$23(a0),d0
0000F302 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F308 117C 0008 0024             		move.b	#8,$24(a0)
0000F30E 4E75                       		rts	
0000F310                            ; ===========================================================================
0000F310                            
0000F310                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F310 2268 003C                  		movea.l	$3C(a0),a1
0000F314 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F31A 6700                       		beq.s	Obj4E_Delete
0000F31C 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F322 0468 0080 0008             		subi.w	#$80,8(a0)
0000F328 6000 E452                  		bra.w	DisplaySprite
0000F32C                            ; ===========================================================================
0000F32C                            
0000F32C                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F32C 6000 E48A                  		bra.w	DeleteObject
0000F330                            ; ===========================================================================
0000F330                            ; ---------------------------------------------------------------------------
0000F330                            ; Object 54 - invisible	lava tag (MZ)
0000F330                            ; ---------------------------------------------------------------------------
0000F330                            
0000F330                            Obj54:					; XREF: Obj_Index
0000F330 7000                       		moveq	#0,d0
0000F332 1028 0024                  		move.b	$24(a0),d0
0000F336 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F33A 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F33E                            ; ===========================================================================
0000F33E 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F340 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F342                            
0000F342 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F346                            ; ===========================================================================
0000F346                            
0000F346                            Obj54_Main:				; XREF: Obj54_Index
0000F346 5428 0024                  		addq.b	#2,$24(a0)
0000F34A 7000                       		moveq	#0,d0
0000F34C 1028 0028                  		move.b	$28(a0),d0
0000F350 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F356 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F35E 117C 0084 0001             		move.b	#$84,1(a0)
0000F364                            
0000F364                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F364 3028 0008                  		move.w	8(a0),d0
0000F368 0240 FF80                  		andi.w	#$FF80,d0
0000F36C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F370 0441 0080                  		subi.w	#$80,d1
0000F374 0241 FF80                  		andi.w	#$FF80,d1
0000F378 9041                       		sub.w	d1,d0
0000F37A 6B00 E43C                  		bmi.w	DeleteObject
0000F37E 0C40 0280                  		cmpi.w	#$280,d0
0000F382 6200 E434                  		bhi.w	DeleteObject
0000F386 4E75                       		rts	
0000F388                            ; ===========================================================================
0000F388                            ; ---------------------------------------------------------------------------
0000F388                            ; Sprite mappings - invisible lava tag (MZ)
0000F388                            ; ---------------------------------------------------------------------------
0000F388                            Map_obj54:
0000F388                            	include "_maps\obj54.asm"
0000F388                            ; ---------------------------------------------------------------------------
0000F388                            ; Sprite mappings - invisible lava tag (MZ)
0000F388                            ; ---------------------------------------------------------------------------
0000F388 0000                       		dc.w byte_F212-Map_obj54
0000F38A 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F38C 00                         		even
0000F38C 00                         		even
0000F38C                            
0000F38C                            Ani_obj4C:
0000F38C                            	include "_anim\obj4C.asm"
0000F38C                            ; ---------------------------------------------------------------------------
0000F38C                            ; Animation script - geyser of lava (MZ)
0000F38C                            ; ---------------------------------------------------------------------------
0000F38C 0000                       		dc.w byte_F220-Ani_obj4C
0000F38E 0000                       		dc.w byte_F22A-Ani_obj4C
0000F390 0000                       		dc.w byte_F22E-Ani_obj4C
0000F392 0000                       		dc.w byte_F232-Ani_obj4C
0000F394 0000                       		dc.w byte_F23A-Ani_obj4C
0000F396 0000                       		dc.w byte_F23E-Ani_obj4C
0000F398 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F3A2 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F3A6 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F3AA 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F3B2 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F3B6 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F3BA                            		even
0000F3BA                            		even
0000F3BA                            
0000F3BA                            Ani_obj4E:
0000F3BA                            	include "_anim\obj4E.asm"
0000F3BA                            ; ---------------------------------------------------------------------------
0000F3BA                            ; Animation script - advancing wall of lava (MZ)
0000F3BA                            ; ---------------------------------------------------------------------------
0000F3BA 0000                       		dc.w byte_F244-Ani_obj4E
0000F3BC 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F3C2                            		even
0000F3C2                            		even
0000F3C2                            
0000F3C2                            ; ---------------------------------------------------------------------------
0000F3C2                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F3C2                            ; ---------------------------------------------------------------------------
0000F3C2                            Map_obj4C:
0000F3C2                            	include "_maps\obj4C.asm"
0000F3C2                            ; ---------------------------------------------------------------------------
0000F3C2                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F3C2                            ; ---------------------------------------------------------------------------
0000F3C2 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F3C6 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F3CA 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F3CE 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F3D2 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F3D6 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F3DA 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F3DE 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F3E2 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F3E6 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F3EA 02                         byte_F272:	dc.b 2
0000F3EB EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F3F0 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F3F5 02                         byte_F27D:	dc.b 2
0000F3F6 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F3FB EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F400 04                         byte_F288:	dc.b 4
0000F401 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F406 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F40B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F410 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F415 04                         byte_F29D:	dc.b 4
0000F416 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F41B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F420 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F425 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F42A 06                         byte_F2B2:	dc.b 6
0000F42B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F430 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F435 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F43A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F43F E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F444 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F449 06                         byte_F2D1:	dc.b 6
0000F44A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F44F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F454 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F459 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F45E E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F463 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F468 02                         byte_F2F0:	dc.b 2
0000F469 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F46E E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F473 02                         byte_F2FB:	dc.b 2
0000F474 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F479 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F47E 0A                         byte_F306:	dc.b $A
0000F47F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F484 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F489 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F48E B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F493 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F498 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F49D F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F4A2 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F4A7 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F4AC 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F4B1 0A                         byte_F339:	dc.b $A
0000F4B2 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F4B7 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F4BC B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F4C1 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F4C6 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F4CB D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F4D0 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F4D5 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F4DA 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F4DF 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F4E4 0A                         byte_F36C:	dc.b $A
0000F4E5 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F4EA 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F4EF B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F4F4 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F4F9 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F4FE D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F503 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F508 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F50D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F512 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F517 06                         byte_F39F:	dc.b 6
0000F518 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F51D 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F522 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F527 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F52C D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F531 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F536 06                         byte_F3BE:	dc.b 6
0000F537 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F53C 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F541 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F546 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F54B D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F550 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F555 06                         byte_F3DD:	dc.b 6
0000F556 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F55B 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F560 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F565 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F56A D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F56F D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F574 10                         byte_F3FC:	dc.b $10
0000F575 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F57A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F57F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F584 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F589 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F58E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F593 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F598 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F59D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F5A2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F5A7 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F5AC 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F5B1 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F5B6 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F5BB 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F5C0 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F5C5 10                         byte_F44D:	dc.b $10
0000F5C6 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F5CB 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F5D0 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F5D5 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F5DA D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F5DF D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F5E4 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F5E9 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F5EE 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F5F3 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F5F8 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F5FD 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F602 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F607 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F60C 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000F611 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000F616 10                         byte_F49E:	dc.b $10
0000F617 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F61C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F621 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F626 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F62B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F630 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F635 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F63A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F63F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F644 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F649 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000F64E 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000F653 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000F658 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000F65D 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000F662 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000F667 06                         byte_F4EF:	dc.b 6
0000F668 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000F66D E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000F672 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000F677 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000F67C D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000F681 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000F686 06                         byte_F50E:	dc.b 6
0000F687 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000F68C E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000F691 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000F696 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000F69B D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000F6A0 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000F6A5 00                         byte_F52D:	dc.b 0
0000F6A6                            		even
0000F6A6                            		even
0000F6A6                            
0000F6A6                            ; ---------------------------------------------------------------------------
0000F6A6                            ; Sprite mappings - advancing wall of lava (MZ)
0000F6A6                            ; ---------------------------------------------------------------------------
0000F6A6                            Map_obj4E:
0000F6A6                            	include "_maps\obj4E.asm"
0000F6A6                            ; ---------------------------------------------------------------------------
0000F6A6                            ; Sprite mappings - advancing wall of lava (MZ)
0000F6A6                            ; ---------------------------------------------------------------------------
0000F6A6 0000                       		dc.w byte_F538-Map_obj4E
0000F6A8 0000                       		dc.w byte_F566-Map_obj4E
0000F6AA 0000                       		dc.w byte_F594-Map_obj4E
0000F6AC 0000                       		dc.w byte_F5C2-Map_obj4E
0000F6AE 0000                       		dc.w byte_F5F0-Map_obj4E
0000F6B0 09                         byte_F538:	dc.b 9
0000F6B1 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000F6B6 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F6BB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F6C0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F6C5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F6CA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F6CF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F6D4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F6D9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F6DE 09                         byte_F566:	dc.b 9
0000F6DF E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F6E4 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000F6E9 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F6EE E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F6F3 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F6F8 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F6FD 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F702 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F707 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F70C 09                         byte_F594:	dc.b 9
0000F70D E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000F712 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F717 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F71C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F721 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F726 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F72B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F730 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F735 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F73A 09                         byte_F5C2:	dc.b 9
0000F73B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F740 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000F745 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F74A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F74F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F754 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F759 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F75E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F763 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F768 08                         byte_F5F0:	dc.b 8
0000F769 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000F76E 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F773 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F778 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F77D E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F782 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F787 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F78C 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F792 00                         		even
0000F792 00                         		even
0000F792                            
0000F792                            ; ===========================================================================
0000F792                            ; ---------------------------------------------------------------------------
0000F792                            ; Object 40 - Moto Bug enemy (GHZ)
0000F792                            ; ---------------------------------------------------------------------------
0000F792                            
0000F792                            Obj40:					; XREF: Obj_Index
0000F792 7000                       		moveq	#0,d0
0000F794 1028 0024                  		move.b	$24(a0),d0
0000F798 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000F79C 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000F7A0                            ; ===========================================================================
0000F7A0 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000F7A2 0000                       		dc.w Obj40_Action-Obj40_Index
0000F7A4 0000                       		dc.w Obj40_Animate-Obj40_Index
0000F7A6 0000                       		dc.w Obj40_Delete-Obj40_Index
0000F7A8                            ; ===========================================================================
0000F7A8                            
0000F7A8                            Obj40_Main:				; XREF: Obj40_Index
0000F7A8 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000F7B0 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000F7B6 117C 0004 0001             		move.b	#4,1(a0)
0000F7BC 117C 0004 0018             		move.b	#4,$18(a0)
0000F7C2 117C 0014 0019             		move.b	#$14,$19(a0)
0000F7C8 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000F7CC 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000F7CE 117C 000E 0016             		move.b	#$E,$16(a0)
0000F7D4 117C 0008 0017             		move.b	#8,$17(a0)
0000F7DA 117C 000C 0020             		move.b	#$C,$20(a0)
0000F7E0 6100 DF48                  		bsr.w	ObjectFall
0000F7E4 4EB9 0000 0000             		jsr	ObjHitFloor
0000F7EA 4A41                       		tst.w	d1
0000F7EC 6A00                       		bpl.s	locret_F68A
0000F7EE D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F7F2 317C 0000 0012             		move.w	#0,$12(a0)
0000F7F8 5428 0024                  		addq.b	#2,$24(a0)
0000F7FC 0868 0000 0022             		bchg	#0,$22(a0)
0000F802                            
0000F802                            locret_F68A:
0000F802 4E75                       		rts	
0000F804                            ; ===========================================================================
0000F804                            
0000F804                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000F804 5828 0024                  		addq.b	#4,$24(a0)
0000F808 6000 0000                  		bra.w	Obj40_Animate
0000F80C                            ; ===========================================================================
0000F80C                            
0000F80C                            Obj40_Action:				; XREF: Obj40_Index
0000F80C 7000                       		moveq	#0,d0
0000F80E 1028 0025                  		move.b	$25(a0),d0
0000F812 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000F816 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000F81A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F820 6100 AFCC                  		bsr.w	AnimateSprite
0000F824                            
0000F824                            ; ---------------------------------------------------------------------------
0000F824                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000F824                            ; ---------------------------------------------------------------------------
0000F824                            
0000F824                            MarkObjGone:
0000F824 3028 0008                  		move.w	8(a0),d0
0000F828 0240 FF80                  		andi.w	#$FF80,d0
0000F82C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F830 0441 0080                  		subi.w	#$80,d1
0000F834 0241 FF80                  		andi.w	#$FF80,d1
0000F838 9041                       		sub.w	d1,d0
0000F83A 0C40 0280                  		cmpi.w	#$280,d0
0000F83E 6200 0000                  		bhi.w	Mark_ChkGone
0000F842 6000 DF38                  		bra.w	DisplaySprite
0000F846                            ; ===========================================================================
0000F846                            
0000F846                            Mark_ChkGone:
0000F846 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F84A 7000                       		moveq	#0,d0
0000F84C 1028 0023                  		move.b	$23(a0),d0
0000F850 6700                       		beq.s	Mark_Delete
0000F852 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F858                            
0000F858                            Mark_Delete:
0000F858 6000 DF5E                  		bra.w	DeleteObject
0000F85C                            
0000F85C                            ; ===========================================================================
0000F85C 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000F85E 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000F860                            ; ===========================================================================
0000F860                            
0000F860                            Obj40_Move:				; XREF: Obj40_Index2
0000F860 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F864 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000F866 5428 0025                  		addq.b	#2,$25(a0)
0000F86A 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000F870 117C 0001 001C             		move.b	#1,$1C(a0)
0000F876 0868 0000 0022             		bchg	#0,$22(a0)
0000F87C 6600                       		bne.s	locret_F70A
0000F87E 4468 0010                  		neg.w	$10(a0)		; change direction
0000F882                            
0000F882                            locret_F70A:
0000F882 4E75                       		rts	
0000F884                            ; ===========================================================================
0000F884                            
0000F884                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000F884 6100 DED0                  		bsr.w	SpeedToPos
0000F888 4EB9 0000 0000             		jsr	ObjHitFloor
0000F88E 0C41 FFF8                  		cmpi.w	#-8,d1
0000F892 6D00                       		blt.s	Obj40_Pause
0000F894 0C41 000C                  		cmpi.w	#$C,d1
0000F898 6C00                       		bge.s	Obj40_Pause
0000F89A D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F89E 5328 0033                  		subq.b	#1,$33(a0)
0000F8A2 6A00                       		bpl.s	locret_F756
0000F8A4 117C 000F 0033             		move.b	#$F,$33(a0)
0000F8AA 6100 E356                  		bsr.w	SingleObjLoad
0000F8AE 6600                       		bne.s	locret_F756
0000F8B0 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000F8B4 3368 0008 0008             		move.w	8(a0),8(a1)
0000F8BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F8C0 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F8C6 137C 0002 001C             		move.b	#2,$1C(a1)
0000F8CC                            
0000F8CC                            locret_F756:
0000F8CC 4E75                       		rts	
0000F8CE                            ; ===========================================================================
0000F8CE                            
0000F8CE                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000F8CE 5528 0025                  		subq.b	#2,$25(a0)
0000F8D2 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F8D8 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000F8DE 117C 0000 001C             		move.b	#0,$1C(a0)
0000F8E4 4E75                       		rts	
0000F8E6                            ; ===========================================================================
0000F8E6                            
0000F8E6                            Obj40_Animate:				; XREF: Obj40_Index
0000F8E6 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F8EC 6100 AF00                  		bsr.w	AnimateSprite
0000F8F0 6000 DE8A                  		bra.w	DisplaySprite
0000F8F4                            ; ===========================================================================
0000F8F4                            
0000F8F4                            Obj40_Delete:				; XREF: Obj40_Index
0000F8F4 6000 DEC2                  		bra.w	DeleteObject
0000F8F8                            ; ===========================================================================
0000F8F8                            Ani_obj40:
0000F8F8                            	include "_anim\obj40.asm"
0000F8F8                            ; ---------------------------------------------------------------------------
0000F8F8                            ; Animation script - Motobug enemy
0000F8F8                            ; ---------------------------------------------------------------------------
0000F8F8 0000                       		dc.w byte_F788-Ani_obj40
0000F8FA 0000                       		dc.w byte_F78C-Ani_obj40
0000F8FC 0000                       		dc.w byte_F792-Ani_obj40
0000F8FE 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000F902 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000F908 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000F916                            		even
0000F916                            		even
0000F916                            
0000F916                            ; ---------------------------------------------------------------------------
0000F916                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F916                            ; ---------------------------------------------------------------------------
0000F916                            Map_obj40:
0000F916                            	include "_maps\obj40.asm"
0000F916                            ; ---------------------------------------------------------------------------
0000F916                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F916                            ; ---------------------------------------------------------------------------
0000F916 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0000F91A 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0000F91E 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0000F922 0000                       		dc.w byte_F804-Map_obj40
0000F924 04                         byte_F7AE:	dc.b 4
0000F925 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F92A 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0000F92F F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F934 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0000F939 04                         byte_F7C3:	dc.b 4
0000F93A F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0000F93F 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
0000F944 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0000F949 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0000F94E 05                         byte_F7D8:	dc.b 5
0000F94F F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F954 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0000F959 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F95E 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0000F963 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0000F968 01                         byte_F7F2:	dc.b 1
0000F969 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
0000F96E 01                         byte_F7F8:	dc.b 1
0000F96F FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0000F974 01                         byte_F7FE:	dc.b 1
0000F975 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
0000F97A 00                         byte_F804:	dc.b 0
0000F97C 00                         		even
0000F97C 00                         		even
0000F97C                            
0000F97C                            ; ===========================================================================
0000F97C                            ; ---------------------------------------------------------------------------
0000F97C                            ; Object 4F - blank
0000F97C                            ; ---------------------------------------------------------------------------
0000F97C                            
0000F97C                            Obj4F:					; XREF: Obj_Index
0000F97C 4E75                       		rts	
0000F97E                            
0000F97E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F97E                            
0000F97E                            
0000F97E                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000F97E 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000F982 D047                       		add.w	d7,d0
0000F984 0240 0003                  		andi.w	#3,d0
0000F988 6600                       		bne.s	loc_F836
0000F98A 7600                       		moveq	#0,d3
0000F98C 1628 0019                  		move.b	$19(a0),d3
0000F990 4A68 0010                  		tst.w	$10(a0)
0000F994 6B00                       		bmi.s	loc_F82C
0000F996 6100 0000                  		bsr.w	ObjHitWallRight
0000F99A 4A41                       		tst.w	d1
0000F99C 6A00                       		bpl.s	loc_F836
0000F99E                            
0000F99E                            loc_F828:
0000F99E 7001                       		moveq	#1,d0
0000F9A0 4E75                       		rts	
0000F9A2                            ; ===========================================================================
0000F9A2                            
0000F9A2                            loc_F82C:
0000F9A2 4643                       		not.w	d3
0000F9A4 6100 0000                  		bsr.w	ObjHitWallLeft
0000F9A8 4A41                       		tst.w	d1
0000F9AA 6BF2                       		bmi.s	loc_F828
0000F9AC                            
0000F9AC                            loc_F836:
0000F9AC 7000                       		moveq	#0,d0
0000F9AE 4E75                       		rts	
0000F9B0                            ; End of function Obj50_ChkWall
0000F9B0                            
0000F9B0                            ; ===========================================================================
0000F9B0                            ; ---------------------------------------------------------------------------
0000F9B0                            ; Object 50 - Yadrin enemy (SYZ)
0000F9B0                            ; ---------------------------------------------------------------------------
0000F9B0                            
0000F9B0                            Obj50:					; XREF: Obj_Index
0000F9B0 7000                       		moveq	#0,d0
0000F9B2 1028 0024                  		move.b	$24(a0),d0
0000F9B6 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000F9BA 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000F9BE                            ; ===========================================================================
0000F9BE 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000F9C0 0000                       		dc.w Obj50_Action-Obj50_Index
0000F9C2                            ; ===========================================================================
0000F9C2                            
0000F9C2                            Obj50_Main:				; XREF: Obj50_Index
0000F9C2 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000F9CA 317C 247B 0002             		move.w	#$247B,2(a0)
0000F9D0 117C 0004 0001             		move.b	#4,1(a0)
0000F9D6 117C 0004 0018             		move.b	#4,$18(a0)
0000F9DC 117C 0014 0019             		move.b	#$14,$19(a0)
0000F9E2 117C 0011 0016             		move.b	#$11,$16(a0)
0000F9E8 117C 0008 0017             		move.b	#8,$17(a0)
0000F9EE 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000F9F4 6100 DD34                  		bsr.w	ObjectFall
0000F9F8 6100 0000                  		bsr.w	ObjHitFloor
0000F9FC 4A41                       		tst.w	d1
0000F9FE 6A00                       		bpl.s	locret_F89E
0000FA00 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000FA04 317C 0000 0012             		move.w	#0,$12(a0)
0000FA0A 5428 0024                  		addq.b	#2,$24(a0)
0000FA0E 0868 0000 0022             		bchg	#0,$22(a0)
0000FA14                            
0000FA14                            locret_F89E:
0000FA14 4E75                       		rts	
0000FA16                            ; ===========================================================================
0000FA16                            
0000FA16                            Obj50_Action:				; XREF: Obj50_Index
0000FA16 7000                       		moveq	#0,d0
0000FA18 1028 0025                  		move.b	$25(a0),d0
0000FA1C 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000FA20 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000FA24 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000FA2A 6100 ADC2                  		bsr.w	AnimateSprite
0000FA2E 6000 FDF4                  		bra.w	MarkObjGone
0000FA32                            ; ===========================================================================
0000FA32 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000FA34 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000FA36                            ; ===========================================================================
0000FA36                            
0000FA36                            Obj50_Move:				; XREF: Obj50_Index2
0000FA36 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000FA3A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000FA3C 5428 0025                  		addq.b	#2,$25(a0)
0000FA40 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000FA46 117C 0001 001C             		move.b	#1,$1C(a0)
0000FA4C 0868 0000 0022             		bchg	#0,$22(a0)
0000FA52 6600                       		bne.s	locret_F8E2
0000FA54 4468 0010                  		neg.w	$10(a0)		; change direction
0000FA58                            
0000FA58                            locret_F8E2:
0000FA58 4E75                       		rts	
0000FA5A                            ; ===========================================================================
0000FA5A                            
0000FA5A                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000FA5A 6100 DCFA                  		bsr.w	SpeedToPos
0000FA5E 6100 0000                  		bsr.w	ObjHitFloor
0000FA62 0C41 FFF8                  		cmpi.w	#-8,d1
0000FA66 6D00                       		blt.s	Obj50_Pause
0000FA68 0C41 000C                  		cmpi.w	#$C,d1
0000FA6C 6C00                       		bge.s	Obj50_Pause
0000FA6E D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000FA72 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000FA76 6600                       		bne.s	Obj50_Pause
0000FA78 4E75                       		rts	
0000FA7A                            ; ===========================================================================
0000FA7A                            
0000FA7A                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000FA7A 5528 0025                  		subq.b	#2,$25(a0)
0000FA7E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000FA84 317C 0000 0010             		move.w	#0,$10(a0)
0000FA8A 117C 0000 001C             		move.b	#0,$1C(a0)
0000FA90 4E75                       		rts	
0000FA92                            ; ===========================================================================
0000FA92                            Ani_obj50:
0000FA92                            	include "_anim\obj50.asm"
0000FA92                            ; ---------------------------------------------------------------------------
0000FA92                            ; Animation script - Yadrin enemy
0000FA92                            ; ---------------------------------------------------------------------------
0000FA92 0000                       		dc.w byte_F920-Ani_obj50
0000FA94 0000                       		dc.w byte_F924-Ani_obj50
0000FA96 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000FA9A 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000FAA4                            		even
0000FAA4                            		even
0000FAA4                            
0000FAA4                            ; ---------------------------------------------------------------------------
0000FAA4                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FAA4                            ; ---------------------------------------------------------------------------
0000FAA4                            Map_obj50:
0000FAA4                            	include "_maps\obj50.asm"
0000FAA4                            ; ---------------------------------------------------------------------------
0000FAA4                            ; Sprite mappings - Yadrin enemy (SYZ)
0000FAA4                            ; ---------------------------------------------------------------------------
0000FAA4 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000FAA8 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000FAAC 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000FAB0 05                         byte_F93A:	dc.b 5
0000FAB1 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FAB6 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FABB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FAC0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FAC5 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FACA 05                         byte_F954:	dc.b 5
0000FACB F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FAD0 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FAD5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FADA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FADF 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FAE4 05                         byte_F96E:	dc.b 5
0000FAE5 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FAEA 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FAEF EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FAF4 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FAF9 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000FAFE 05                         byte_F988:	dc.b 5
0000FAFF F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000FB04 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000FB09 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FB0E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FB13 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FB18 05                         byte_F9A2:	dc.b 5
0000FB19 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000FB1E FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000FB23 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FB28 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FB2D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FB32 05                         byte_F9BC:	dc.b 5
0000FB33 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000FB38 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000FB3D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000FB42 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000FB47 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000FB4C                            		even
0000FB4C                            		even
0000FB4C                            
0000FB4C                            ; ---------------------------------------------------------------------------
0000FB4C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000FB4C                            ;
0000FB4C                            ; variables:
0000FB4C                            ; d1 = width
0000FB4C                            ; d2 = height /	2 (when	jumping)
0000FB4C                            ; d3 = height /	2 (when	walking)
0000FB4C                            ; d4 = x-axis position
0000FB4C                            ; ---------------------------------------------------------------------------
0000FB4C                            
0000FB4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FB4C                            
0000FB4C                            
0000FB4C                            SolidObject:
0000FB4C 4A28 0025                  		tst.b	$25(a0)
0000FB50 6700 0000                  		beq.w	loc_FAC8
0000FB54 3401                       		move.w	d1,d2
0000FB56 D442                       		add.w	d2,d2
0000FB58 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB5C 0829 0001 0022             		btst	#1,$22(a1)
0000FB62 6600                       		bne.s	loc_F9FE
0000FB64 3029 0008                  		move.w	8(a1),d0
0000FB68 9068 0008                  		sub.w	8(a0),d0
0000FB6C D041                       		add.w	d1,d0
0000FB6E 6B00                       		bmi.s	loc_F9FE
0000FB70 B042                       		cmp.w	d2,d0
0000FB72 6500                       		bcs.s	loc_FA12
0000FB74                            
0000FB74                            loc_F9FE:
0000FB74 08A9 0003 0022             		bclr	#3,$22(a1)
0000FB7A 08A8 0003 0022             		bclr	#3,$22(a0)
0000FB80 4228 0025                  		clr.b	$25(a0)
0000FB84 7800                       		moveq	#0,d4
0000FB86 4E75                       		rts	
0000FB88                            ; ===========================================================================
0000FB88                            
0000FB88                            loc_FA12:
0000FB88 3404                       		move.w	d4,d2
0000FB8A 6100 8098                  		bsr.w	MvSonicOnPtfm
0000FB8E 7800                       		moveq	#0,d4
0000FB90 4E75                       		rts	
0000FB92                            ; ===========================================================================
0000FB92                            
0000FB92                            SolidObject71:				; XREF: Obj71_Solid
0000FB92 4A28 0025                  		tst.b	$25(a0)
0000FB96 6700 0000                  		beq.w	loc_FAD0
0000FB9A 3401                       		move.w	d1,d2
0000FB9C D442                       		add.w	d2,d2
0000FB9E 43F8 D000                  		lea	($FFFFD000).w,a1
0000FBA2 0829 0001 0022             		btst	#1,$22(a1)
0000FBA8 6600                       		bne.s	loc_FA44
0000FBAA 3029 0008                  		move.w	8(a1),d0
0000FBAE 9068 0008                  		sub.w	8(a0),d0
0000FBB2 D041                       		add.w	d1,d0
0000FBB4 6B00                       		bmi.s	loc_FA44
0000FBB6 B042                       		cmp.w	d2,d0
0000FBB8 6500                       		bcs.s	loc_FA58
0000FBBA                            
0000FBBA                            loc_FA44:
0000FBBA 08A9 0003 0022             		bclr	#3,$22(a1)
0000FBC0 08A8 0003 0022             		bclr	#3,$22(a0)
0000FBC6 4228 0025                  		clr.b	$25(a0)
0000FBCA 7800                       		moveq	#0,d4
0000FBCC 4E75                       		rts	
0000FBCE                            ; ===========================================================================
0000FBCE                            
0000FBCE                            loc_FA58:
0000FBCE 3404                       		move.w	d4,d2
0000FBD0 6100 8052                  		bsr.w	MvSonicOnPtfm
0000FBD4 7800                       		moveq	#0,d4
0000FBD6 4E75                       		rts	
0000FBD8                            ; ===========================================================================
0000FBD8                            
0000FBD8                            SolidObject2F:				; XREF: Obj2F_Solid
0000FBD8 43F8 D000                  		lea	($FFFFD000).w,a1
0000FBDC 4A28 0001                  		tst.b	1(a0)
0000FBE0 6A00 0000                  		bpl.w	loc_FB92
0000FBE4 3029 0008                  		move.w	8(a1),d0
0000FBE8 9068 0008                  		sub.w	8(a0),d0
0000FBEC D041                       		add.w	d1,d0
0000FBEE 6B00 0000                  		bmi.w	loc_FB92
0000FBF2 3601                       		move.w	d1,d3
0000FBF4 D643                       		add.w	d3,d3
0000FBF6 B043                       		cmp.w	d3,d0
0000FBF8 6200 0000                  		bhi.w	loc_FB92
0000FBFC 3A00                       		move.w	d0,d5
0000FBFE 0828 0000 0001             		btst	#0,1(a0)
0000FC04 6700                       		beq.s	loc_FA94
0000FC06 4645                       		not.w	d5
0000FC08 DA43                       		add.w	d3,d5
0000FC0A                            
0000FC0A                            loc_FA94:
0000FC0A E24D                       		lsr.w	#1,d5
0000FC0C 7600                       		moveq	#0,d3
0000FC0E 1632 5000                  		move.b	(a2,d5.w),d3
0000FC12 9612                       		sub.b	(a2),d3
0000FC14 3A28 000C                  		move.w	$C(a0),d5
0000FC18 9A43                       		sub.w	d3,d5
0000FC1A 1629 0016                  		move.b	$16(a1),d3
0000FC1E 4883                       		ext.w	d3
0000FC20 D443                       		add.w	d3,d2
0000FC22 3629 000C                  		move.w	$C(a1),d3
0000FC26 9645                       		sub.w	d5,d3
0000FC28 5843                       		addq.w	#4,d3
0000FC2A D642                       		add.w	d2,d3
0000FC2C 6B00 0000                  		bmi.w	loc_FB92
0000FC30 3802                       		move.w	d2,d4
0000FC32 D844                       		add.w	d4,d4
0000FC34 B644                       		cmp.w	d4,d3
0000FC36 6400 0000                  		bcc.w	loc_FB92
0000FC3A 6000 0000                  		bra.w	loc_FB0E
0000FC3E                            ; ===========================================================================
0000FC3E                            
0000FC3E                            loc_FAC8:
0000FC3E 4A28 0001                  		tst.b	1(a0)
0000FC42 6A00 0000                  		bpl.w	loc_FB92
0000FC46                            
0000FC46                            loc_FAD0:
0000FC46 43F8 D000                  		lea	($FFFFD000).w,a1
0000FC4A 3029 0008                  		move.w	8(a1),d0
0000FC4E 9068 0008                  		sub.w	8(a0),d0
0000FC52 D041                       		add.w	d1,d0
0000FC54 6B00 0000                  		bmi.w	loc_FB92
0000FC58 3601                       		move.w	d1,d3
0000FC5A D643                       		add.w	d3,d3
0000FC5C B043                       		cmp.w	d3,d0
0000FC5E 6200 0000                  		bhi.w	loc_FB92
0000FC62 1629 0016                  		move.b	$16(a1),d3
0000FC66 4883                       		ext.w	d3
0000FC68 D443                       		add.w	d3,d2
0000FC6A 3629 000C                  		move.w	$C(a1),d3
0000FC6E 9668 000C                  		sub.w	$C(a0),d3
0000FC72 5843                       		addq.w	#4,d3
0000FC74 D642                       		add.w	d2,d3
0000FC76 6B00 0000                  		bmi.w	loc_FB92
0000FC7A 3802                       		move.w	d2,d4
0000FC7C D844                       		add.w	d4,d4
0000FC7E B644                       		cmp.w	d4,d3
0000FC80 6400 0000                  		bcc.w	loc_FB92
0000FC84                            
0000FC84                            loc_FB0E:
0000FC84 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000FC88 6B00 0000                  		bmi.w	loc_FB92
0000FC8C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000FC92 6400 0000                  		bcc.w	loc_FB92
0000FC96 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FC9A 6600 0000                  		bne.w	loc_FBAC
0000FC9E 3A00                       		move.w	d0,d5
0000FCA0 B240                       		cmp.w	d0,d1
0000FCA2 6400                       		bcc.s	loc_FB36
0000FCA4 D241                       		add.w	d1,d1
0000FCA6 9041                       		sub.w	d1,d0
0000FCA8 3A00                       		move.w	d0,d5
0000FCAA 4445                       		neg.w	d5
0000FCAC                            
0000FCAC                            loc_FB36:
0000FCAC 3203                       		move.w	d3,d1
0000FCAE B443                       		cmp.w	d3,d2
0000FCB0 6400                       		bcc.s	loc_FB44
0000FCB2 5943                       		subq.w	#4,d3
0000FCB4 9644                       		sub.w	d4,d3
0000FCB6 3203                       		move.w	d3,d1
0000FCB8 4441                       		neg.w	d1
0000FCBA                            
0000FCBA                            loc_FB44:
0000FCBA BA41                       		cmp.w	d1,d5
0000FCBC 6200 0000                  		bhi.w	loc_FBB0
0000FCC0 0C41 0004                  		cmpi.w	#4,d1
0000FCC4 6300                       		bls.s	loc_FB8C
0000FCC6 4A40                       		tst.w	d0
0000FCC8 6700                       		beq.s	loc_FB70
0000FCCA 6B00                       		bmi.s	loc_FB5E
0000FCCC 4A69 0010                  		tst.w	$10(a1)
0000FCD0 6B00                       		bmi.s	loc_FB70
0000FCD2 6000                       		bra.s	loc_FB64
0000FCD4                            ; ===========================================================================
0000FCD4                            
0000FCD4                            loc_FB5E:
0000FCD4 4A69 0010                  		tst.w	$10(a1)
0000FCD8 6A00                       		bpl.s	loc_FB70
0000FCDA                            
0000FCDA                            loc_FB64:
0000FCDA 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0000FCE0 337C 0000 0010             		move.w	#0,$10(a1)
0000FCE6                            
0000FCE6                            loc_FB70:
0000FCE6 9169 0008                  		sub.w	d0,8(a1)
0000FCEA 0829 0001 0022             		btst	#1,$22(a1)
0000FCF0 6600                       		bne.s	loc_FB8C
0000FCF2 08E9 0005 0022             		bset	#5,$22(a1)
0000FCF8 08E8 0005 0022             		bset	#5,$22(a0)
0000FCFE 7801                       		moveq	#1,d4
0000FD00 4E75                       		rts	
0000FD02                            ; ===========================================================================
0000FD02                            
0000FD02                            loc_FB8C:
0000FD02 6100                       		bsr.s	loc_FBA0
0000FD04 7801                       		moveq	#1,d4
0000FD06 4E75                       		rts	
0000FD08                            ; ===========================================================================
0000FD08                            
0000FD08                            loc_FB92:
0000FD08 0828 0005 0022             		btst	#5,$22(a0)
0000FD0E 6700                       		beq.s	loc_FBAC
0000FD10 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0000FD16                            
0000FD16                            loc_FBA0:
0000FD16 08A8 0005 0022             		bclr	#5,$22(a0)
0000FD1C 08A9 0005 0022             		bclr	#5,$22(a1)
0000FD22                            
0000FD22                            loc_FBAC:
0000FD22 7800                       		moveq	#0,d4
0000FD24 4E75                       		rts	
0000FD26                            ; ===========================================================================
0000FD26                            
0000FD26                            loc_FBB0:
0000FD26 4A43                       		tst.w	d3
0000FD28 6B00                       		bmi.s	loc_FBBC
0000FD2A 0C43 0010                  		cmpi.w	#$10,d3
0000FD2E 6500                       		bcs.s	loc_FBEE
0000FD30 60D6                       		bra.s	loc_FB92
0000FD32                            ; ===========================================================================
0000FD32                            
0000FD32                            loc_FBBC:
0000FD32 4A69 0012                  		tst.w	$12(a1)
0000FD36 6700                       		beq.s	loc_FBD6
0000FD38 6A00                       		bpl.s	loc_FBD2
0000FD3A 4A43                       		tst.w	d3
0000FD3C 6A00                       		bpl.s	loc_FBD2
0000FD3E 9769 000C                  		sub.w	d3,$C(a1)
0000FD42 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0000FD48                            
0000FD48                            loc_FBD2:
0000FD48 78FF                       		moveq	#-1,d4
0000FD4A 4E75                       		rts	
0000FD4C                            ; ===========================================================================
0000FD4C                            
0000FD4C                            loc_FBD6:
0000FD4C 0829 0001 0022             		btst	#1,$22(a1)
0000FD52 66F4                       		bne.s	loc_FBD2
0000FD54 2F08                       		move.l	a0,-(sp)
0000FD56 2049                       		movea.l	a1,a0
0000FD58 4EB9 0000 0000             		jsr	KillSonic
0000FD5E 205F                       		movea.l	(sp)+,a0
0000FD60 78FF                       		moveq	#-1,d4
0000FD62 4E75                       		rts	
0000FD64                            ; ===========================================================================
0000FD64                            
0000FD64                            loc_FBEE:
0000FD64 5943                       		subq.w	#4,d3
0000FD66 7200                       		moveq	#0,d1
0000FD68 1228 0019                  		move.b	$19(a0),d1
0000FD6C 3401                       		move.w	d1,d2
0000FD6E D442                       		add.w	d2,d2
0000FD70 D269 0008                  		add.w	8(a1),d1
0000FD74 9268 0008                  		sub.w	8(a0),d1
0000FD78 6B00                       		bmi.s	loc_FC28
0000FD7A B242                       		cmp.w	d2,d1
0000FD7C 6400                       		bcc.s	loc_FC28
0000FD7E 4A69 0012                  		tst.w	$12(a1)
0000FD82 6B00                       		bmi.s	loc_FC28
0000FD84 9769 000C                  		sub.w	d3,$C(a1)
0000FD88 5369 000C                  		subq.w	#1,$C(a1)
0000FD8C 6100                       		bsr.s	sub_FC2C
0000FD8E 117C 0002 0025             		move.b	#2,$25(a0)
0000FD94 08E8 0003 0022             		bset	#3,$22(a0)
0000FD9A 78FF                       		moveq	#-1,d4
0000FD9C 4E75                       		rts	
0000FD9E                            ; ===========================================================================
0000FD9E                            
0000FD9E                            loc_FC28:
0000FD9E 7800                       		moveq	#0,d4
0000FDA0 4E75                       		rts	
0000FDA2                            ; End of function SolidObject
0000FDA2                            
0000FDA2                            
0000FDA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FDA2                            
0000FDA2                            
0000FDA2                            sub_FC2C:				; XREF: SolidObject
0000FDA2 0829 0003 0022             		btst	#3,$22(a1)
0000FDA8 6700                       		beq.s	loc_FC4E
0000FDAA 7000                       		moveq	#0,d0
0000FDAC 1029 003D                  		move.b	$3D(a1),d0
0000FDB0 ED48                       		lsl.w	#6,d0
0000FDB2 0680 00FF D000             		addi.l	#$FFD000,d0
0000FDB8 2440                       		movea.l	d0,a2
0000FDBA 08AA 0003 0022             		bclr	#3,$22(a2)
0000FDC0 422A 0025                  		clr.b	$25(a2)
0000FDC4                            
0000FDC4                            loc_FC4E:
0000FDC4 3008                       		move.w	a0,d0
0000FDC6 0440 D000                  		subi.w	#-$3000,d0
0000FDCA EC48                       		lsr.w	#6,d0
0000FDCC 0240 007F                  		andi.w	#$7F,d0
0000FDD0 1340 003D                  		move.b	d0,$3D(a1)
0000FDD4 137C 0000 0026             		move.b	#0,$26(a1)
0000FDDA 337C 0000 0012             		move.w	#0,$12(a1)
0000FDE0 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000FDE6 0829 0001 0022             		btst	#1,$22(a1)
0000FDEC 6700                       		beq.s	loc_FC84
0000FDEE 2F08                       		move.l	a0,-(sp)
0000FDF0 2049                       		movea.l	a1,a0
0000FDF2 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000FDF8 205F                       		movea.l	(sp)+,a0
0000FDFA                            
0000FDFA                            loc_FC84:
0000FDFA 08E9 0003 0022             		bset	#3,$22(a1)
0000FE00 08E8 0003 0022             		bset	#3,$22(a0)
0000FE06 4E75                       		rts	
0000FE08                            ; End of function sub_FC2C
0000FE08                            
0000FE08                            ; ===========================================================================
0000FE08                            ; ---------------------------------------------------------------------------
0000FE08                            ; Object 51 - smashable	green block (MZ)
0000FE08                            ; ---------------------------------------------------------------------------
0000FE08                            
0000FE08                            Obj51:					; XREF: Obj_Index
0000FE08 7000                       		moveq	#0,d0
0000FE0A 1028 0024                  		move.b	$24(a0),d0
0000FE0E 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0000FE12 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0000FE16 6000 FA0C                  		bra.w	MarkObjGone
0000FE1A                            ; ===========================================================================
0000FE1A 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0000FE1C 0000                       		dc.w Obj51_Solid-Obj51_Index
0000FE1E 0000                       		dc.w Obj51_Display-Obj51_Index
0000FE20                            ; ===========================================================================
0000FE20                            
0000FE20                            Obj51_Main:				; XREF: Obj51_Index
0000FE20 5428 0024                  		addq.b	#2,$24(a0)
0000FE24 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0000FE2C 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FE32 117C 0004 0001             		move.b	#4,1(a0)
0000FE38 117C 0010 0019             		move.b	#$10,$19(a0)
0000FE3E 117C 0004 0018             		move.b	#4,$18(a0)
0000FE44 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FE4A                            
0000FE4A                            Obj51_Solid:				; XREF: Obj51_Index
0000FE4A 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0000FE50 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0000FE56 323C 001B                  		move.w	#$1B,d1
0000FE5A 343C 0010                  		move.w	#$10,d2
0000FE5E 363C 0011                  		move.w	#$11,d3
0000FE62 3828 0008                  		move.w	8(a0),d4
0000FE66 6100 FCE4                  		bsr.w	SolidObject
0000FE6A 0828 0003 0022             		btst	#3,$22(a0)
0000FE70 6600                       		bne.s	Obj51_Smash
0000FE72                            
0000FE72                            locret_FCFC:
0000FE72 4E75                       		rts	
0000FE74                            ; ===========================================================================
0000FE74                            
0000FE74                            Obj51_Smash:				; XREF: Obj51_Solid
0000FE74 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0000FE7A 66F6                       		bne.s	locret_FCFC	; if not, branch
0000FE7C 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0000FE82 08E9 0002 0022             		bset	#2,$22(a1)
0000FE88 137C 000E 0016             		move.b	#$E,$16(a1)
0000FE8E 137C 0007 0017             		move.b	#7,$17(a1)
0000FE94 137C 0002 001C             		move.b	#2,$1C(a1)
0000FE9A 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0000FEA0 08E9 0001 0022             		bset	#1,$22(a1)
0000FEA6 08A9 0003 0022             		bclr	#3,$22(a1)
0000FEAC 137C 0002 0024             		move.b	#2,$24(a1)
0000FEB2 08A8 0003 0022             		bclr	#3,$22(a0)
0000FEB8 4228 0025                  		clr.b	$25(a0)
0000FEBC 117C 0001 001A             		move.b	#1,$1A(a0)
0000FEC2 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0000FEC8 7203                       		moveq	#3,d1		; set number of	fragments to 4
0000FECA 343C 0038                  		move.w	#$38,d2
0000FECE 6100 D49A                  		bsr.w	SmashObject
0000FED2 6100 DD2E                  		bsr.w	SingleObjLoad
0000FED6 6600                       		bne.s	Obj51_Display
0000FED8 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FEDC 3368 0008 0008             		move.w	8(a0),8(a1)
0000FEE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FEE8 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0000FEEC 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0000FEF0 0C42 0006                  		cmpi.w	#6,d2
0000FEF4 6500                       		bcs.s	Obj51_Bonus
0000FEF6 7406                       		moveq	#6,d2
0000FEF8                            
0000FEF8                            Obj51_Bonus:
0000FEF8 7000                       		moveq	#0,d0
0000FEFA 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0000FEFE 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0000FF04 6500                       		bcs.s	loc_FD98	; if not, branch
0000FF06 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0000FF0A 740A                       		moveq	#10,d2
0000FF0C                            
0000FF0C                            loc_FD98:
0000FF0C 4EB9 0000 0000             		jsr	AddPoints
0000FF12 E24A                       		lsr.w	#1,d2
0000FF14 1342 001A                  		move.b	d2,$1A(a1)
0000FF18                            
0000FF18                            Obj51_Display:				; XREF: Obj51_Index
0000FF18 6100 D83C                  		bsr.w	SpeedToPos
0000FF1C 0668 0038 0012             		addi.w	#$38,$12(a0)
0000FF22 6100 D858                  		bsr.w	DisplaySprite
0000FF26 4A28 0001                  		tst.b	1(a0)
0000FF2A 6A00 D88C                  		bpl.w	DeleteObject
0000FF2E 4E75                       		rts	
0000FF30                            ; ===========================================================================
0000FF30 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0000FF34 FF00 FF00                  		dc.w $FF00, $FF00
0000FF38 0200 FE00                  		dc.w $200, $FE00
0000FF3C 0100 FF00                  		dc.w $100, $FF00
0000FF40                            
0000FF40 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48                            ; Sprite mappings - smashable green block (MZ)
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48                            Map_obj51:
0000FF48                            	include "_maps\obj51.asm"
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48                            ; Sprite mappings - smashable green block (MZ)
0000FF48                            ; ---------------------------------------------------------------------------
0000FF48 0000                       		dc.w byte_FDD8-Map_obj51
0000FF4A 0000                       		dc.w byte_FDE3-Map_obj51
0000FF4C 02                         byte_FDD8:	dc.b 2
0000FF4D F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0000FF52 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0000FF57 04                         byte_FDE3:	dc.b 4
0000FF58 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0000FF5D 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0000FF62 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0000FF67 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0000FF6C                            		even
0000FF6C                            		even
0000FF6C                            
0000FF6C                            ; ===========================================================================
0000FF6C                            ; ---------------------------------------------------------------------------
0000FF6C                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0000FF6C                            ; ---------------------------------------------------------------------------
0000FF6C                            
0000FF6C                            Obj52:					; XREF: Obj_Index
0000FF6C 7000                       		moveq	#0,d0
0000FF6E 1028 0024                  		move.b	$24(a0),d0
0000FF72 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0000FF76 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0000FF7A                            ; ===========================================================================
0000FF7A 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0000FF7C 0000                       		dc.w Obj52_Platform-Obj52_Index
0000FF7E 0000                       		dc.w Obj52_StandOn-Obj52_Index
0000FF80                            
0000FF80 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0000FF82 2001                       		dc.b $20, 1
0000FF84 2002                       		dc.b $20, 2
0000FF86 4003                       		dc.b $40, 3
0000FF88 3004                       		dc.b $30, 4
0000FF8A                            ; ===========================================================================
0000FF8A                            
0000FF8A                            Obj52_Main:				; XREF: Obj52_Index
0000FF8A 5428 0024                  		addq.b	#2,$24(a0)
0000FF8E 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0000FF96 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FF9C 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000FFA2 6600                       		bne.s	loc_FE44
0000FFA4 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0000FFAC 317C 43BC 0002             		move.w	#$43BC,2(a0)
0000FFB2 117C 0007 0016             		move.b	#7,$16(a0)
0000FFB8                            
0000FFB8                            loc_FE44:
0000FFB8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000FFBE 6600                       		bne.s	loc_FE60
0000FFC0 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0000FFC6 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0000FFCC 6700                       		beq.s	loc_FE60	; if yes, branch
0000FFCE 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0000FFD4                            
0000FFD4                            loc_FE60:
0000FFD4 117C 0004 0001             		move.b	#4,1(a0)
0000FFDA 7000                       		moveq	#0,d0
0000FFDC 1028 0028                  		move.b	$28(a0),d0
0000FFE0 E648                       		lsr.w	#3,d0
0000FFE2 0240 001E                  		andi.w	#$1E,d0
0000FFE6 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0000FFEA 115A 0019                  		move.b	(a2)+,$19(a0)
0000FFEE 115A 001A                  		move.b	(a2)+,$1A(a0)
0000FFF2 117C 0004 0018             		move.b	#4,$18(a0)
0000FFF8 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FFFE 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010004 0228 000F 0028             		andi.b	#$F,$28(a0)
0001000A                            
0001000A                            Obj52_Platform:				; XREF: Obj52_Index
0001000A 6100 0000                  		bsr.w	Obj52_Move
0001000E 7200                       		moveq	#0,d1
00010010 1228 0019                  		move.b	$19(a0),d1
00010014 4EB9 0000 7552             		jsr	(PlatformObject).l
0001001A 6000                       		bra.s	Obj52_ChkDel
0001001C                            ; ===========================================================================
0001001C                            
0001001C                            Obj52_StandOn:				; XREF: Obj52_Index
0001001C 7200                       		moveq	#0,d1
0001001E 1228 0019                  		move.b	$19(a0),d1
00010022 4EB9 0000 76C6             		jsr	(ExitPlatform).l
00010028 3F28 0008                  		move.w	8(a0),-(sp)
0001002C 6100 0000                  		bsr.w	Obj52_Move
00010030 341F                       		move.w	(sp)+,d2
00010032 4EB9 0000 7C30             		jsr	(MvSonicOnPtfm2).l
00010038                            
00010038                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010038 3028 0030                  		move.w	$30(a0),d0
0001003C 0240 FF80                  		andi.w	#$FF80,d0
00010040 3238 F700                  		move.w	($FFFFF700).w,d1
00010044 0441 0080                  		subi.w	#$80,d1
00010048 0241 FF80                  		andi.w	#$FF80,d1
0001004C 9041                       		sub.w	d1,d0
0001004E 0C40 0280                  		cmpi.w	#$280,d0
00010052 6200 D764                  		bhi.w	DeleteObject
00010056 6000 D724                  		bra.w	DisplaySprite
0001005A                            ; ===========================================================================
0001005A                            
0001005A                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001005A 7000                       		moveq	#0,d0
0001005C 1028 0028                  		move.b	$28(a0),d0
00010060 0240 000F                  		andi.w	#$F,d0
00010064 D040                       		add.w	d0,d0
00010066 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001006A 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0001006E                            ; ===========================================================================
0001006E 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00010072 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
00010076 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001007A 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0001007E 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00010082 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00010084                            ; ===========================================================================
00010084                            
00010084                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00010084 4E75                       		rts	
00010086                            ; ===========================================================================
00010086                            
00010086                            Obj52_Type01:				; XREF: Obj52_TypeIndex
00010086 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001008A 323C 0060                  		move.w	#$60,d1
0001008E 0828 0000 0022             		btst	#0,$22(a0)
00010094 6700                       		beq.s	loc_FF26
00010096 4440                       		neg.w	d0
00010098 D041                       		add.w	d1,d0
0001009A                            
0001009A                            loc_FF26:
0001009A 3228 0030                  		move.w	$30(a0),d1
0001009E 9240                       		sub.w	d0,d1
000100A0 3141 0008                  		move.w	d1,8(a0)
000100A4 4E75                       		rts	
000100A6                            ; ===========================================================================
000100A6                            
000100A6                            Obj52_Type02:				; XREF: Obj52_TypeIndex
000100A6 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
000100AC 6600                       		bne.s	Obj52_02_Wait
000100AE 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000100B2                            
000100B2                            Obj52_02_Wait:
000100B2 4E75                       		rts	
000100B4                            ; ===========================================================================
000100B4                            
000100B4                            Obj52_Type03:				; XREF: Obj52_TypeIndex
000100B4 7600                       		moveq	#0,d3
000100B6 1628 0019                  		move.b	$19(a0),d3
000100BA 6100 0000                  		bsr.w	ObjHitWallRight
000100BE 4A41                       		tst.w	d1		; has the platform hit a wall?
000100C0 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
000100C2 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000100C6 3168 0008 0030             		move.w	8(a0),$30(a0)
000100CC 4E75                       		rts	
000100CE                            ; ===========================================================================
000100CE                            
000100CE                            Obj52_03_End:
000100CE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
000100D2 4E75                       		rts	
000100D4                            ; ===========================================================================
000100D4                            
000100D4                            Obj52_Type05:				; XREF: Obj52_TypeIndex
000100D4 7600                       		moveq	#0,d3
000100D6 1628 0019                  		move.b	$19(a0),d3
000100DA 6100 0000                  		bsr.w	ObjHitWallRight
000100DE 4A41                       		tst.w	d1		; has the platform hit a wall?
000100E0 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000100E2 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000100E6 3168 0008 0030             		move.w	8(a0),$30(a0)
000100EC 4E75                       		rts	
000100EE                            ; ===========================================================================
000100EE                            
000100EE                            Obj52_05_End:
000100EE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000100F2 4E75                       		rts	
000100F4                            ; ===========================================================================
000100F4                            
000100F4                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000100F4 6100 D660                  		bsr.w	SpeedToPos
000100F8 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000100FE 6100 0000                  		bsr.w	ObjHitFloor
00010102 4A41                       		tst.w	d1		; has platform hit the floor?
00010104 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
00010108 D368 000C                  		add.w	d1,$C(a0)
0001010C 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
00010110 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
00010114                            
00010114                            locret_FFA0:
00010114 4E75                       		rts	
00010116                            ; ===========================================================================
00010116                            
00010116                            Obj52_Type07:				; XREF: Obj52_TypeIndex
00010116 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0001011A 6700                       		beq.s	Obj52_07_ChkDel
0001011C 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
00010120                            
00010120                            Obj52_07_ChkDel:
00010120 588F                       		addq.l	#4,sp
00010122 3028 0030                  		move.w	$30(a0),d0
00010126 0240 FF80                  		andi.w	#$FF80,d0
0001012A 3238 F700                  		move.w	($FFFFF700).w,d1
0001012E 0441 0080                  		subi.w	#$80,d1
00010132 0241 FF80                  		andi.w	#$FF80,d1
00010136 9041                       		sub.w	d1,d0
00010138 0C40 0280                  		cmpi.w	#$280,d0
0001013C 6200 D67A                  		bhi.w	DeleteObject
00010140 4E75                       		rts	
00010142                            ; ===========================================================================
00010142                            
00010142                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00010142 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00010146 323C 0080                  		move.w	#$80,d1
0001014A 0828 0000 0022             		btst	#0,$22(a0)
00010150 6700                       		beq.s	loc_FFE2
00010152 4440                       		neg.w	d0
00010154 D041                       		add.w	d1,d0
00010156                            
00010156                            loc_FFE2:
00010156 3228 0032                  		move.w	$32(a0),d1
0001015A 9240                       		sub.w	d0,d1
0001015C 3141 000C                  		move.w	d1,$C(a0)
00010160 4E75                       		rts	
00010162                            ; ===========================================================================
00010162                            
00010162                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00010162 7600                       		moveq	#0,d3
00010164 1628 0019                  		move.b	$19(a0),d3
00010168 D643                       		add.w	d3,d3
0001016A 7208                       		moveq	#8,d1
0001016C 0828 0000 0022             		btst	#0,$22(a0)
00010172 6700                       		beq.s	loc_10004
00010174 4441                       		neg.w	d1
00010176 4443                       		neg.w	d3
00010178                            
00010178                            loc_10004:
00010178 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0001017C 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0001017E 3028 0008                  		move.w	8(a0),d0
00010182 9068 0030                  		sub.w	$30(a0),d0
00010186 B043                       		cmp.w	d3,d0
00010188 6700                       		beq.s	Obj52_0A_Wait
0001018A D368 0008                  		add.w	d1,8(a0)	; move platform
0001018E 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00010194 4E75                       		rts	
00010196                            ; ===========================================================================
00010196                            
00010196                            Obj52_0A_Wait:
00010196 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001019A 6600                       		bne.s	locret_1002E	; if time remains, branch
0001019C 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
000101A2                            
000101A2                            locret_1002E:
000101A2 4E75                       		rts	
000101A4                            ; ===========================================================================
000101A4                            
000101A4                            Obj52_0A_Back:
000101A4 3028 0008                  		move.w	8(a0),d0
000101A8 9068 0030                  		sub.w	$30(a0),d0
000101AC 6700                       		beq.s	Obj52_0A_Reset
000101AE 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
000101B2 4E75                       		rts	
000101B4                            ; ===========================================================================
000101B4                            
000101B4                            Obj52_0A_Reset:
000101B4 4268 0036                  		clr.w	$36(a0)
000101B8 5328 0028                  		subq.b	#1,$28(a0)
000101BC 4E75                       		rts	
000101BE                            ; ===========================================================================
000101BE                            ; ---------------------------------------------------------------------------
000101BE                            ; Sprite mappings - moving blocks (MZ, SBZ)
000101BE                            ; ---------------------------------------------------------------------------
000101BE                            Map_obj52:
000101BE                            	include "_maps\obj52mz.asm"
000101BE                            ; ---------------------------------------------------------------------------
000101BE                            ; Sprite mappings - moving blocks (MZ, SBZ)
000101BE                            ; ---------------------------------------------------------------------------
000101BE 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
000101C2 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
000101C6 0000                       		dc.w byte_1008F-Map_obj52
000101C8 01                         byte_10054:	dc.b 1
000101C9 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000101CE 02                         byte_1005A:	dc.b 2
000101CF F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
000101D4 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
000101D9 04                         byte_10065:	dc.b 4
000101DA F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000101DF 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000101E4 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000101E9 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000101EE 04                         byte_1007A:	dc.b 4
000101EF F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000101F4 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000101F9 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000101FE F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010203 03                         byte_1008F:	dc.b 3
00010204 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010209 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001020E F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010214 00                         		even
00010214 00                         		even
00010214                            
00010214                            ; ---------------------------------------------------------------------------
00010214                            ; Sprite mappings - moving block (LZ)
00010214                            ; ---------------------------------------------------------------------------
00010214                            Map_obj52a:
00010214                            	include "_maps\obj52lz.asm"
00010214                            ; ---------------------------------------------------------------------------
00010214                            ; Sprite mappings - moving block (LZ)
00010214                            ; ---------------------------------------------------------------------------
00010214 0000                       		dc.w byte_100A2-Map_obj52a
00010216 01                         byte_100A2:	dc.b 1
00010217 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001021C                            		even
0001021C                            		even
0001021C                            
0001021C                            ; ===========================================================================
0001021C                            ; ---------------------------------------------------------------------------
0001021C                            ; Object 55 - Basaran enemy (MZ)
0001021C                            ; ---------------------------------------------------------------------------
0001021C                            
0001021C                            Obj55:					; XREF: Obj_Index
0001021C 7000                       		moveq	#0,d0
0001021E 1028 0024                  		move.b	$24(a0),d0
00010222 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010226 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001022A                            ; ===========================================================================
0001022A 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001022C 0000                       		dc.w Obj55_Action-Obj55_Index
0001022E                            ; ===========================================================================
0001022E                            
0001022E                            Obj55_Main:				; XREF: Obj55_Index
0001022E 5428 0024                  		addq.b	#2,$24(a0)
00010232 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001023A 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010240 117C 0004 0001             		move.b	#4,1(a0)
00010246 117C 000C 0016             		move.b	#$C,$16(a0)
0001024C 117C 0002 0018             		move.b	#2,$18(a0)
00010252 117C 000B 0020             		move.b	#$B,$20(a0)
00010258 117C 0010 0019             		move.b	#$10,$19(a0)
0001025E                            
0001025E                            Obj55_Action:				; XREF: Obj55_Index
0001025E 7000                       		moveq	#0,d0
00010260 1028 0025                  		move.b	$25(a0),d0
00010264 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010268 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
0001026C 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010272 6100 A57A                  		bsr.w	AnimateSprite
00010276 6000 F5AC                  		bra.w	MarkObjGone
0001027A                            ; ===========================================================================
0001027A 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
0001027C 0000                       		dc.w Obj55_DropFly-Obj55_Index2
0001027E 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00010280 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00010282                            ; ===========================================================================
00010282                            
00010282                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00010282 343C 0080                  		move.w	#$80,d2
00010286 6100 0000                  		bsr.w	Obj55_ChkSonic
0001028A 6400                       		bcc.s	Obj55_NoDrop
0001028C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00010290 3140 0036                  		move.w	d0,$36(a0)
00010294 9068 000C                  		sub.w	$C(a0),d0
00010298 6500                       		bcs.s	Obj55_NoDrop
0001029A 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
0001029E 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000102A0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000102A4 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000102A6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000102AA D007                       		add.b	d7,d0
000102AC 0200 0007                  		andi.b	#7,d0
000102B0 6600                       		bne.s	Obj55_NoDrop
000102B2 117C 0001 001C             		move.b	#1,$1C(a0)
000102B8 5428 0025                  		addq.b	#2,$25(a0)
000102BC                            
000102BC                            Obj55_NoDrop:
000102BC 4E75                       		rts	
000102BE                            ; ===========================================================================
000102BE                            
000102BE                            Obj55_DropFly:				; XREF: Obj55_Index2
000102BE 6100 D496                  		bsr.w	SpeedToPos
000102C2 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000102C8 343C 0080                  		move.w	#$80,d2
000102CC 6100 0000                  		bsr.w	Obj55_ChkSonic
000102D0 3028 0036                  		move.w	$36(a0),d0
000102D4 9068 000C                  		sub.w	$C(a0),d0
000102D8 6500                       		bcs.s	Obj55_ChkDel
000102DA 0C40 0010                  		cmpi.w	#$10,d0
000102DE 6400                       		bcc.s	locret_10180
000102E0 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000102E4 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000102EA 117C 0002 001C             		move.b	#2,$1C(a0)
000102F0 5428 0025                  		addq.b	#2,$25(a0)
000102F4                            
000102F4                            locret_10180:
000102F4 4E75                       		rts	
000102F6                            ; ===========================================================================
000102F6                            
000102F6                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000102F6 4A28 0001                  		tst.b	1(a0)
000102FA 6A00 D4BC                  		bpl.w	DeleteObject
000102FE 4E75                       		rts	
00010300                            ; ===========================================================================
00010300                            
00010300                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010300 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010304 0200 000F                  		andi.b	#$F,d0
00010308 6600                       		bne.s	loc_101A0
0001030A 303C 00C0                  		move.w	#$C0,d0
0001030E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flapping sound
00010314                            
00010314                            loc_101A0:
00010314 6100 D440                  		bsr.w	SpeedToPos
00010318 3038 D008                  		move.w	($FFFFD008).w,d0
0001031C 9068 0008                  		sub.w	8(a0),d0
00010320 6400                       		bcc.s	loc_101B0
00010322 4440                       		neg.w	d0
00010324                            
00010324                            loc_101B0:
00010324 0C40 0080                  		cmpi.w	#$80,d0
00010328 6500                       		bcs.s	locret_101C6
0001032A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001032E D007                       		add.b	d7,d0
00010330 0200 0007                  		andi.b	#7,d0
00010334 6600                       		bne.s	locret_101C6
00010336 5428 0025                  		addq.b	#2,$25(a0)
0001033A                            
0001033A                            locret_101C6:
0001033A 4E75                       		rts	
0001033C                            ; ===========================================================================
0001033C                            
0001033C                            Obj55_FlyUp:				; XREF: Obj55_Index2
0001033C 6100 D418                  		bsr.w	SpeedToPos
00010340 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010346 6100 0000                  		bsr.w	ObjHitCeiling
0001034A 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001034C 6A00                       		bpl.s	locret_101F4	; if not, branch
0001034E 9368 000C                  		sub.w	d1,$C(a0)
00010352 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010358 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0001035C 4268 0012                  		clr.w	$12(a0)
00010360 4228 001C                  		clr.b	$1C(a0)
00010364 4228 0025                  		clr.b	$25(a0)
00010368                            
00010368                            locret_101F4:
00010368 4E75                       		rts	
0001036A                            ; ===========================================================================
0001036A                            
0001036A                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001036A 323C 0100                  		move.w	#$100,d1
0001036E 08E8 0000 0022             		bset	#0,$22(a0)
00010374 3038 D008                  		move.w	($FFFFD008).w,d0
00010378 9068 0008                  		sub.w	8(a0),d0
0001037C 6400                       		bcc.s	loc_10214
0001037E 4440                       		neg.w	d0
00010380 4441                       		neg.w	d1
00010382 08A8 0000 0022             		bclr	#0,$22(a0)
00010388                            
00010388                            loc_10214:
00010388 B042                       		cmp.w	d2,d0
0001038A 4E75                       		rts	
0001038C                            ; ===========================================================================
0001038C 6100 D3C8                  		bsr.w	SpeedToPos
00010390 6100 D3EA                  		bsr.w	DisplaySprite
00010394 4A28 0001                  		tst.b	1(a0)
00010398 6A00 D41E                  		bpl.w	DeleteObject
0001039C 4E75                       		rts	
0001039E                            ; ===========================================================================
0001039E                            Ani_obj55:
0001039E                            	include "_anim\obj55.asm"
0001039E                            ; ---------------------------------------------------------------------------
0001039E                            ; Animation script - Basaran enemy
0001039E                            ; ---------------------------------------------------------------------------
0001039E 0000                       		dc.w byte_10230-Ani_obj55
000103A0 0000                       		dc.w byte_10234-Ani_obj55
000103A2 0000                       		dc.w byte_10238-Ani_obj55
000103A4 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000103A8 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000103AC 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000103B2                            		even
000103B2                            		even
000103B2                            
000103B2                            ; ---------------------------------------------------------------------------
000103B2                            ; Sprite mappings - Basaran enemy (MZ)
000103B2                            ; ---------------------------------------------------------------------------
000103B2                            Map_obj55:
000103B2                            	include "_maps\obj55.asm"
000103B2                            ; ---------------------------------------------------------------------------
000103B2                            ; Sprite mappings - Basaran enemy (MZ)
000103B2                            ; ---------------------------------------------------------------------------
000103B2 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000103B6 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000103BA 01                         byte_10246:	dc.b 1
000103BB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000103C0 03                         byte_1024C:	dc.b 3
000103C1 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000103C6 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000103CB 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000103D0 04                         byte_1025C:	dc.b 4
000103D1 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000103D6 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000103DB 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000103E0 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000103E5 04                         byte_10271:	dc.b 4
000103E6 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000103EB 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000103F0 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000103F5 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000103FA                            		even
000103FA                            		even
000103FA                            
000103FA                            ; ===========================================================================
000103FA                            ; ---------------------------------------------------------------------------
000103FA                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000103FA                            ; ---------------------------------------------------------------------------
000103FA                            
000103FA                            Obj56:					; XREF: Obj_Index
000103FA 7000                       		moveq	#0,d0
000103FC 1028 0024                  		move.b	$24(a0),d0
00010400 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010404 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010408                            ; ===========================================================================
00010408 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
0001040A 0000                       		dc.w Obj56_Action-Obj56_Index
0001040C                            
0001040C 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
0001040E 2020                       		dc.b  $20, $20
00010410 1020                       		dc.b  $10, $20
00010412 201A                       		dc.b  $20, $1A
00010414 1027                       		dc.b  $10, $27
00010416 1010                       		dc.b  $10, $10
00010418 0820                       		dc.b	8, $20
0001041A 4010                       		dc.b  $40, $10
0001041C                            ; ===========================================================================
0001041C                            
0001041C                            Obj56_Main:				; XREF: Obj56_Index
0001041C 5428 0024                  		addq.b	#2,$24(a0)
00010420 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010428 317C 4000 0002             		move.w	#$4000,2(a0)
0001042E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010434 6600                       		bne.s	loc_102C8
00010436 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
0001043C                            
0001043C                            loc_102C8:
0001043C 117C 0004 0001             		move.b	#4,1(a0)
00010442 117C 0003 0018             		move.b	#3,$18(a0)
00010448 7000                       		moveq	#0,d0
0001044A 1028 0028                  		move.b	$28(a0),d0
0001044E E648                       		lsr.w	#3,d0
00010450 0240 000E                  		andi.w	#$E,d0
00010454 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010458 115A 0019                  		move.b	(a2)+,$19(a0)
0001045C 1152 0016                  		move.b	(a2),$16(a0)
00010460 E248                       		lsr.w	#1,d0
00010462 1140 001A                  		move.b	d0,$1A(a0)
00010466 3168 0008 0034             		move.w	8(a0),$34(a0)
0001046C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010472 7000                       		moveq	#0,d0
00010474 1012                       		move.b	(a2),d0
00010476 D040                       		add.w	d0,d0
00010478 3140 003A                  		move.w	d0,$3A(a0)
0001047C 7000                       		moveq	#0,d0
0001047E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010484 6700                       		beq.s	loc_10332
00010486 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
0001048A 0240 000F                  		andi.w	#$F,d0
0001048E 5140                       		subq.w	#8,d0
00010490 6500                       		bcs.s	loc_10332
00010492 E548                       		lsl.w	#2,d0
00010494 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
00010498 45F2 0000                  		lea	(a2,d0.w),a2
0001049C 4A52                       		tst.w	(a2)
0001049E 6A00                       		bpl.s	loc_10332
000104A0 0868 0000 0022             		bchg	#0,$22(a0)
000104A6                            
000104A6                            loc_10332:
000104A6 1028 0028                  		move.b	$28(a0),d0
000104AA 6A00                       		bpl.s	Obj56_Action
000104AC 0200 000F                  		andi.b	#$F,d0
000104B0 1140 003C                  		move.b	d0,$3C(a0)
000104B4 117C 0005 0028             		move.b	#5,$28(a0)
000104BA 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000104C0 6600                       		bne.s	Obj56_ChkGone
000104C2 117C 000C 0028             		move.b	#$C,$28(a0)
000104C8 317C 0080 003A             		move.w	#$80,$3A(a0)
000104CE                            
000104CE                            Obj56_ChkGone:
000104CE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000104D2 7000                       		moveq	#0,d0
000104D4 1028 0023                  		move.b	$23(a0),d0
000104D8 6700                       		beq.s	Obj56_Action
000104DA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000104E0 0832 0000 0002             		btst	#0,2(a2,d0.w)
000104E6 6700                       		beq.s	Obj56_Action
000104E8 5228 0028                  		addq.b	#1,$28(a0)
000104EC 4268 003A                  		clr.w	$3A(a0)
000104F0                            
000104F0                            Obj56_Action:				; XREF: Obj56_Index
000104F0 3F28 0008                  		move.w	8(a0),-(sp)
000104F4 7000                       		moveq	#0,d0
000104F6 1028 0028                  		move.b	$28(a0),d0	; get object type
000104FA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000104FE D040                       		add.w	d0,d0
00010500 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010504 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010508 381F                       		move.w	(sp)+,d4
0001050A 4A28 0001                  		tst.b	1(a0)
0001050E 6A00                       		bpl.s	Obj56_ChkDel
00010510 7200                       		moveq	#0,d1
00010512 1228 0019                  		move.b	$19(a0),d1
00010516 0641 000B                  		addi.w	#$B,d1
0001051A 7400                       		moveq	#0,d2
0001051C 1428 0016                  		move.b	$16(a0),d2
00010520 3602                       		move.w	d2,d3
00010522 5243                       		addq.w	#1,d3
00010524 6100 F626                  		bsr.w	SolidObject
00010528                            
00010528                            Obj56_ChkDel:
00010528 3028 0034                  		move.w	$34(a0),d0
0001052C 0240 FF80                  		andi.w	#$FF80,d0
00010530 3238 F700                  		move.w	($FFFFF700).w,d1
00010534 0441 0080                  		subi.w	#$80,d1
00010538 0241 FF80                  		andi.w	#$FF80,d1
0001053C 9041                       		sub.w	d1,d0
0001053E 0C40 0280                  		cmpi.w	#$280,d0
00010542 6200 D274                  		bhi.w	DeleteObject
00010546 6000 D234                  		bra.w	DisplaySprite
0001054A                            ; ===========================================================================
0001054A 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0001054E 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010552 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010556 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001055A 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
0001055E 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010562 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010566                            ; ===========================================================================
00010566                            
00010566                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010566 4E75                       		rts	
00010568                            ; ===========================================================================
00010568                            
00010568                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010568 323C 0040                  		move.w	#$40,d1
0001056C 7000                       		moveq	#0,d0
0001056E 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010572 6000                       		bra.s	Obj56_Move_LR
00010574                            ; ===========================================================================
00010574                            
00010574                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010574 323C 0080                  		move.w	#$80,d1
00010578 7000                       		moveq	#0,d0
0001057A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001057E                            
0001057E                            Obj56_Move_LR:
0001057E 0828 0000 0022             		btst	#0,$22(a0)
00010584 6700                       		beq.s	loc_10416
00010586 4440                       		neg.w	d0
00010588 D041                       		add.w	d1,d0
0001058A                            
0001058A                            loc_10416:
0001058A 3228 0034                  		move.w	$34(a0),d1
0001058E 9240                       		sub.w	d0,d1
00010590 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010594 4E75                       		rts	
00010596                            ; ===========================================================================
00010596                            
00010596                            Obj56_Type03:				; XREF: Obj56_TypeIndex
00010596 323C 0040                  		move.w	#$40,d1
0001059A 7000                       		moveq	#0,d0
0001059C 1038 FE68                  		move.b	($FFFFFE68).w,d0
000105A0 6000                       		bra.s	Obj56_Move_UD
000105A2                            ; ===========================================================================
000105A2                            
000105A2                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000105A2 323C 0080                  		move.w	#$80,d1
000105A6 7000                       		moveq	#0,d0
000105A8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000105AC                            
000105AC                            Obj56_Move_UD:
000105AC 0828 0000 0022             		btst	#0,$22(a0)
000105B2 6700                       		beq.s	loc_10444
000105B4 4440                       		neg.w	d0
000105B6 D041                       		add.w	d1,d0
000105B8                            
000105B8                            loc_10444:
000105B8 3228 0030                  		move.w	$30(a0),d1
000105BC 9240                       		sub.w	d0,d1
000105BE 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000105C2 4E75                       		rts	
000105C4                            ; ===========================================================================
000105C4                            
000105C4                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000105C4 4A28 0038                  		tst.b	$38(a0)
000105C8 6600                       		bne.s	loc_104A4
000105CA 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000105D0 6600                       		bne.s	loc_1047A	; if not, branch
000105D2 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000105D8 6600                       		bne.s	loc_1047A
000105DA 4238 F7C9                  		clr.b	($FFFFF7C9).w
000105DE 3038 D008                  		move.w	($FFFFD008).w,d0
000105E2 B068 0008                  		cmp.w	8(a0),d0
000105E6 6400                       		bcc.s	loc_1047A
000105E8 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000105EE                            
000105EE                            loc_1047A:
000105EE 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000105F2 7000                       		moveq	#0,d0
000105F4 1028 003C                  		move.b	$3C(a0),d0
000105F8 0832 0000 0000             		btst	#0,(a2,d0.w)
000105FE 6700                       		beq.s	loc_104AE
00010600 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010606 6600                       		bne.s	loc_1049E	; if not, branch
00010608 0C00 0003                  		cmpi.b	#3,d0
0001060C 6600                       		bne.s	loc_1049E
0001060E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010612                            
00010612                            loc_1049E:
00010612 117C 0001 0038             		move.b	#1,$38(a0)
00010618                            
00010618                            loc_104A4:
00010618 4A68 003A                  		tst.w	$3A(a0)
0001061C 6700                       		beq.s	loc_104C8
0001061E 5568 003A                  		subq.w	#2,$3A(a0)
00010622                            
00010622                            loc_104AE:
00010622 3028 003A                  		move.w	$3A(a0),d0
00010626 0828 0000 0022             		btst	#0,$22(a0)
0001062C 6700                       		beq.s	loc_104BC
0001062E 4440                       		neg.w	d0
00010630                            
00010630                            loc_104BC:
00010630 3228 0030                  		move.w	$30(a0),d1
00010634 D240                       		add.w	d0,d1
00010636 3141 000C                  		move.w	d1,$C(a0)
0001063A 4E75                       		rts	
0001063C                            ; ===========================================================================
0001063C                            
0001063C                            loc_104C8:
0001063C 5228 0028                  		addq.b	#1,$28(a0)
00010640 4228 0038                  		clr.b	$38(a0)
00010644 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010648 7000                       		moveq	#0,d0
0001064A 1028 0023                  		move.b	$23(a0),d0
0001064E 67D2                       		beq.s	loc_104AE
00010650 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010656 60CA                       		bra.s	loc_104AE
00010658                            ; ===========================================================================
00010658                            
00010658                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010658 4A28 0038                  		tst.b	$38(a0)
0001065C 6600                       		bne.s	loc_10500
0001065E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010662 7000                       		moveq	#0,d0
00010664 1028 003C                  		move.b	$3C(a0),d0
00010668 4A32 0000                  		tst.b	(a2,d0.w)
0001066C 6A00                       		bpl.s	loc_10512
0001066E 117C 0001 0038             		move.b	#1,$38(a0)
00010674                            
00010674                            loc_10500:
00010674 7000                       		moveq	#0,d0
00010676 1028 0016                  		move.b	$16(a0),d0
0001067A D040                       		add.w	d0,d0
0001067C B068 003A                  		cmp.w	$3A(a0),d0
00010680 6700                       		beq.s	loc_1052C
00010682 5468 003A                  		addq.w	#2,$3A(a0)
00010686                            
00010686                            loc_10512:
00010686 3028 003A                  		move.w	$3A(a0),d0
0001068A 0828 0000 0022             		btst	#0,$22(a0)
00010690 6700                       		beq.s	loc_10520
00010692 4440                       		neg.w	d0
00010694                            
00010694                            loc_10520:
00010694 3228 0030                  		move.w	$30(a0),d1
00010698 D240                       		add.w	d0,d1
0001069A 3141 000C                  		move.w	d1,$C(a0)
0001069E 4E75                       		rts	
000106A0                            ; ===========================================================================
000106A0                            
000106A0                            loc_1052C:
000106A0 5328 0028                  		subq.b	#1,$28(a0)
000106A4 4228 0038                  		clr.b	$38(a0)
000106A8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000106AC 7000                       		moveq	#0,d0
000106AE 1028 0023                  		move.b	$23(a0),d0
000106B2 67D2                       		beq.s	loc_10512
000106B4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000106BA 60CA                       		bra.s	loc_10512
000106BC                            ; ===========================================================================
000106BC                            
000106BC                            Obj56_Type07:				; XREF: Obj56_TypeIndex
000106BC 4A28 0038                  		tst.b	$38(a0)
000106C0 6600                       		bne.s	loc_1055E
000106C2 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
000106C6 6700                       		beq.s	locret_10578
000106C8 117C 0001 0038             		move.b	#1,$38(a0)
000106CE 4268 003A                  		clr.w	$3A(a0)
000106D2                            
000106D2                            loc_1055E:
000106D2 5268 0008                  		addq.w	#1,8(a0)
000106D6 3168 0008 0034             		move.w	8(a0),$34(a0)
000106DC 5268 003A                  		addq.w	#1,$3A(a0)
000106E0 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000106E6 6600                       		bne.s	locret_10578
000106E8 4228 0028                  		clr.b	$28(a0)
000106EC                            
000106EC                            locret_10578:
000106EC 4E75                       		rts	
000106EE                            ; ===========================================================================
000106EE                            
000106EE                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000106EE 4A28 0038                  		tst.b	$38(a0)
000106F2 6600                       		bne.s	loc_10598
000106F4 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000106F8 7000                       		moveq	#0,d0
000106FA 1028 003C                  		move.b	$3C(a0),d0
000106FE 0832 0000 0000             		btst	#0,(a2,d0.w)
00010704 6700                       		beq.s	loc_105A2
00010706 117C 0001 0038             		move.b	#1,$38(a0)
0001070C                            
0001070C                            loc_10598:
0001070C 4A68 003A                  		tst.w	$3A(a0)
00010710 6700                       		beq.s	loc_105C0
00010712 5568 003A                  		subq.w	#2,$3A(a0)
00010716                            
00010716                            loc_105A2:
00010716 3028 003A                  		move.w	$3A(a0),d0
0001071A 0828 0000 0022             		btst	#0,$22(a0)
00010720 6700                       		beq.s	loc_105B4
00010722 4440                       		neg.w	d0
00010724 0640 0080                  		addi.w	#$80,d0
00010728                            
00010728                            loc_105B4:
00010728 3228 0034                  		move.w	$34(a0),d1
0001072C D240                       		add.w	d0,d1
0001072E 3141 0008                  		move.w	d1,8(a0)
00010732 4E75                       		rts	
00010734                            ; ===========================================================================
00010734                            
00010734                            loc_105C0:
00010734 5228 0028                  		addq.b	#1,$28(a0)
00010738 4228 0038                  		clr.b	$38(a0)
0001073C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010740 7000                       		moveq	#0,d0
00010742 1028 0023                  		move.b	$23(a0),d0
00010746 67CE                       		beq.s	loc_105A2
00010748 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001074E 60C6                       		bra.s	loc_105A2
00010750                            ; ===========================================================================
00010750                            
00010750                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010750 4A28 0038                  		tst.b	$38(a0)
00010754 6600                       		bne.s	loc_105F8
00010756 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001075A 7000                       		moveq	#0,d0
0001075C 1028 003C                  		move.b	$3C(a0),d0
00010760 4A32 0000                  		tst.b	(a2,d0.w)
00010764 6A00                       		bpl.s	loc_10606
00010766 117C 0001 0038             		move.b	#1,$38(a0)
0001076C                            
0001076C                            loc_105F8:
0001076C 303C 0080                  		move.w	#$80,d0
00010770 B068 003A                  		cmp.w	$3A(a0),d0
00010774 6700                       		beq.s	loc_10624
00010776 5468 003A                  		addq.w	#2,$3A(a0)
0001077A                            
0001077A                            loc_10606:
0001077A 3028 003A                  		move.w	$3A(a0),d0
0001077E 0828 0000 0022             		btst	#0,$22(a0)
00010784 6700                       		beq.s	loc_10618
00010786 4440                       		neg.w	d0
00010788 0640 0080                  		addi.w	#$80,d0
0001078C                            
0001078C                            loc_10618:
0001078C 3228 0034                  		move.w	$34(a0),d1
00010790 D240                       		add.w	d0,d1
00010792 3141 0008                  		move.w	d1,8(a0)
00010796 4E75                       		rts	
00010798                            ; ===========================================================================
00010798                            
00010798                            loc_10624:
00010798 5328 0028                  		subq.b	#1,$28(a0)
0001079C 4228 0038                  		clr.b	$38(a0)
000107A0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000107A4 7000                       		moveq	#0,d0
000107A6 1028 0023                  		move.b	$23(a0),d0
000107AA 67CE                       		beq.s	loc_10606
000107AC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000107B2 60C6                       		bra.s	loc_10606
000107B4                            ; ===========================================================================
000107B4                            
000107B4                            Obj56_Type08:				; XREF: Obj56_TypeIndex
000107B4 323C 0010                  		move.w	#$10,d1
000107B8 7000                       		moveq	#0,d0
000107BA 1038 FE88                  		move.b	($FFFFFE88).w,d0
000107BE E248                       		lsr.w	#1,d0
000107C0 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
000107C4 6000                       		bra.s	Obj56_Move_Sqr
000107C6                            ; ===========================================================================
000107C6                            
000107C6                            Obj56_Type09:				; XREF: Obj56_TypeIndex
000107C6 323C 0030                  		move.w	#$30,d1
000107CA 7000                       		moveq	#0,d0
000107CC 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000107D0 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000107D4 6000                       		bra.s	Obj56_Move_Sqr
000107D6                            ; ===========================================================================
000107D6                            
000107D6                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000107D6 323C 0050                  		move.w	#$50,d1
000107DA 7000                       		moveq	#0,d0
000107DC 1038 FE90                  		move.b	($FFFFFE90).w,d0
000107E0 3638 FE92                  		move.w	($FFFFFE92).w,d3
000107E4 6000                       		bra.s	Obj56_Move_Sqr
000107E6                            ; ===========================================================================
000107E6                            
000107E6                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000107E6 323C 0070                  		move.w	#$70,d1
000107EA 7000                       		moveq	#0,d0
000107EC 1038 FE94                  		move.b	($FFFFFE94).w,d0
000107F0 3638 FE96                  		move.w	($FFFFFE96).w,d3
000107F4                            
000107F4                            Obj56_Move_Sqr:
000107F4 4A43                       		tst.w	d3
000107F6 6600                       		bne.s	loc_1068E
000107F8 5228 0022                  		addq.b	#1,$22(a0)
000107FC 0228 0003 0022             		andi.b	#3,$22(a0)
00010802                            
00010802                            loc_1068E:
00010802 1428 0022                  		move.b	$22(a0),d2
00010806 0202 0003                  		andi.b	#3,d2
0001080A 6600                       		bne.s	loc_106AE
0001080C 9041                       		sub.w	d1,d0
0001080E D068 0034                  		add.w	$34(a0),d0
00010812 3140 0008                  		move.w	d0,8(a0)
00010816 4441                       		neg.w	d1
00010818 D268 0030                  		add.w	$30(a0),d1
0001081C 3141 000C                  		move.w	d1,$C(a0)
00010820 4E75                       		rts	
00010822                            ; ===========================================================================
00010822                            
00010822                            loc_106AE:
00010822 5302                       		subq.b	#1,d2
00010824 6600                       		bne.s	loc_106CC
00010826 5341                       		subq.w	#1,d1
00010828 9041                       		sub.w	d1,d0
0001082A 4440                       		neg.w	d0
0001082C D068 0030                  		add.w	$30(a0),d0
00010830 3140 000C                  		move.w	d0,$C(a0)
00010834 5241                       		addq.w	#1,d1
00010836 D268 0034                  		add.w	$34(a0),d1
0001083A 3141 0008                  		move.w	d1,8(a0)
0001083E 4E75                       		rts	
00010840                            ; ===========================================================================
00010840                            
00010840                            loc_106CC:
00010840 5302                       		subq.b	#1,d2
00010842 6600                       		bne.s	loc_106EA
00010844 5341                       		subq.w	#1,d1
00010846 9041                       		sub.w	d1,d0
00010848 4440                       		neg.w	d0
0001084A D068 0034                  		add.w	$34(a0),d0
0001084E 3140 0008                  		move.w	d0,8(a0)
00010852 5241                       		addq.w	#1,d1
00010854 D268 0030                  		add.w	$30(a0),d1
00010858 3141 000C                  		move.w	d1,$C(a0)
0001085C 4E75                       		rts	
0001085E                            ; ===========================================================================
0001085E                            
0001085E                            loc_106EA:
0001085E 9041                       		sub.w	d1,d0
00010860 D068 0030                  		add.w	$30(a0),d0
00010864 3140 000C                  		move.w	d0,$C(a0)
00010868 4441                       		neg.w	d1
0001086A D268 0034                  		add.w	$34(a0),d1
0001086E 3141 0008                  		move.w	d1,8(a0)
00010872 4E75                       		rts	
00010874                            ; ===========================================================================
00010874                            ; ---------------------------------------------------------------------------
00010874                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010874                            ; ---------------------------------------------------------------------------
00010874                            Map_obj56:
00010874                            	include "_maps\obj56.asm"
00010874                            ; ---------------------------------------------------------------------------
00010874                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010874                            ; ---------------------------------------------------------------------------
00010874 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010878 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001087C 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00010880 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00010884 01                         byte_10710:	dc.b 1
00010885 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001088A 04                         byte_10716:	dc.b 4
0001088B E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00010890 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00010895 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001089A 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
0001089F 02                         byte_1072B:	dc.b 2
000108A0 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
000108A5 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000108AA 04                         byte_10736:	dc.b 4
000108AB E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
000108B0 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000108B5 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000108BA 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000108BF 03                         byte_1074B:	dc.b 3
000108C0 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
000108C5 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000108CA 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000108CF 01                         byte_1075B:	dc.b 1
000108D0 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000108D5 02                         byte_10761:	dc.b 2
000108D6 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000108DB 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000108E0 04                         byte_1076C:	dc.b 4
000108E1 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000108E6 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000108EB F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000108F0 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000108F6 00                         		even
000108F6 00                         		even
000108F6                            
000108F6                            ; ===========================================================================
000108F6                            ; ---------------------------------------------------------------------------
000108F6                            ; Object 57 - spiked balls (SYZ, LZ)
000108F6                            ; ---------------------------------------------------------------------------
000108F6                            
000108F6                            Obj57:					; XREF: Obj_Index
000108F6 7000                       		moveq	#0,d0
000108F8 1028 0024                  		move.b	$24(a0),d0
000108FC 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010900 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010904                            ; ===========================================================================
00010904 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010906 0000                       		dc.w Obj57_Move-Obj57_Index
00010908 0000                       		dc.w Obj57_Display-Obj57_Index
0001090A                            ; ===========================================================================
0001090A                            
0001090A                            Obj57_Main:				; XREF: Obj57_Index
0001090A 5428 0024                  		addq.b	#2,$24(a0)
0001090E 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010916 317C 03BA 0002             		move.w	#$3BA,2(a0)
0001091C 117C 0004 0001             		move.b	#4,1(a0)
00010922 117C 0004 0018             		move.b	#4,$18(a0)
00010928 117C 0008 0019             		move.b	#8,$19(a0)
0001092E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010934 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001093A 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010940 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010946 6600                       		bne.s	loc_107E8
00010948 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001094E 317C 0310 0002             		move.w	#$310,2(a0)
00010954 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0001095C                            
0001095C                            loc_107E8:
0001095C 1228 0028                  		move.b	$28(a0),d1	; get object type
00010960 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010964 4881                       		ext.w	d1
00010966 E741                       		asl.w	#3,d1		; multiply by 8
00010968 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0001096C 1028 0022                  		move.b	$22(a0),d0
00010970 E418                       		ror.b	#2,d0
00010972 0200 00C0                  		andi.b	#-$40,d0
00010976 1140 0026                  		move.b	d0,$26(a0)
0001097A 45E8 0029                  		lea	$29(a0),a2
0001097E 1228 0028                  		move.b	$28(a0),d1	; get object type
00010982 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
00010986 14FC 0000                  		move.b	#0,(a2)+
0001098A 3601                       		move.w	d1,d3
0001098C E94B                       		lsl.w	#4,d3
0001098E 1143 003C                  		move.b	d3,$3C(a0)
00010992 5341                       		subq.w	#1,d1		; set chain length (type-1)
00010994 6500                       		bcs.s	loc_10894
00010996 0828 0003 0028             		btst	#3,$28(a0)
0001099C 6700                       		beq.s	Obj57_MakeChain
0001099E 5341                       		subq.w	#1,d1
000109A0 6500                       		bcs.s	loc_10894
000109A2                            
000109A2                            Obj57_MakeChain:
000109A2 6100 D25E                  		bsr.w	SingleObjLoad
000109A6 6600                       		bne.s	loc_10894
000109A8 5228 0029                  		addq.b	#1,$29(a0)
000109AC 3A09                       		move.w	a1,d5
000109AE 0445 D000                  		subi.w	#-$3000,d5
000109B2 EC4D                       		lsr.w	#6,d5
000109B4 0245 007F                  		andi.w	#$7F,d5
000109B8 14C5                       		move.b	d5,(a2)+
000109BA 137C 0004 0024             		move.b	#4,$24(a1)
000109C0 1290                       		move.b	0(a0),0(a1)
000109C2 2368 0004 0004             		move.l	4(a0),4(a1)
000109C8 3368 0002 0002             		move.w	2(a0),2(a1)
000109CE 1368 0001 0001             		move.b	1(a0),1(a1)
000109D4 1368 0018 0018             		move.b	$18(a0),$18(a1)
000109DA 1368 0019 0019             		move.b	$19(a0),$19(a1)
000109E0 1368 0020 0020             		move.b	$20(a0),$20(a1)
000109E6 0403 0010                  		subi.b	#$10,d3
000109EA 1343 003C                  		move.b	d3,$3C(a1)
000109EE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000109F4 6600                       		bne.s	loc_10890
000109F6 4A03                       		tst.b	d3
000109F8 6600                       		bne.s	loc_10890
000109FA 137C 0002 001A             		move.b	#2,$1A(a1)
00010A00                            
00010A00                            loc_10890:
00010A00 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010A04                            
00010A04                            loc_10894:
00010A04 3A08                       		move.w	a0,d5
00010A06 0445 D000                  		subi.w	#-$3000,d5
00010A0A EC4D                       		lsr.w	#6,d5
00010A0C 0245 007F                  		andi.w	#$7F,d5
00010A10 14C5                       		move.b	d5,(a2)+
00010A12 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010A18 6600                       		bne.s	Obj57_Move
00010A1A 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010A20 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010A26                            
00010A26                            Obj57_Move:				; XREF: Obj57_Index
00010A26 6100 0000                  		bsr.w	Obj57_MoveSub
00010A2A 6000 0000                  		bra.w	Obj57_ChkDel
00010A2E                            ; ===========================================================================
00010A2E                            
00010A2E                            Obj57_MoveSub:				; XREF: Obj57_Move
00010A2E 3028 003E                  		move.w	$3E(a0),d0
00010A32 D168 0026                  		add.w	d0,$26(a0)
00010A36 1028 0026                  		move.b	$26(a0),d0
00010A3A 4EB9 0000 29DA             		jsr	(CalcSine).l
00010A40 3428 0038                  		move.w	$38(a0),d2
00010A44 3628 003A                  		move.w	$3A(a0),d3
00010A48 45E8 0029                  		lea	$29(a0),a2
00010A4C 7C00                       		moveq	#0,d6
00010A4E 1C1A                       		move.b	(a2)+,d6
00010A50                            
00010A50                            Obj57_MoveLoop:
00010A50 7800                       		moveq	#0,d4
00010A52 181A                       		move.b	(a2)+,d4
00010A54 ED4C                       		lsl.w	#6,d4
00010A56 0684 00FF D000             		addi.l	#$FFD000,d4
00010A5C 2244                       		movea.l	d4,a1
00010A5E 7800                       		moveq	#0,d4
00010A60 1829 003C                  		move.b	$3C(a1),d4
00010A64 2A04                       		move.l	d4,d5
00010A66 C9C0                       		muls.w	d0,d4
00010A68 E084                       		asr.l	#8,d4
00010A6A CBC1                       		muls.w	d1,d5
00010A6C E085                       		asr.l	#8,d5
00010A6E D842                       		add.w	d2,d4
00010A70 DA43                       		add.w	d3,d5
00010A72 3344 000C                  		move.w	d4,$C(a1)
00010A76 3345 0008                  		move.w	d5,8(a1)
00010A7A 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00010A7E 4E75                       		rts	
00010A80                            ; ===========================================================================
00010A80                            
00010A80                            Obj57_ChkDel:				; XREF: Obj57_Move
00010A80 3028 003A                  		move.w	$3A(a0),d0
00010A84 0240 FF80                  		andi.w	#$FF80,d0
00010A88 3238 F700                  		move.w	($FFFFF700).w,d1
00010A8C 0441 0080                  		subi.w	#$80,d1
00010A90 0241 FF80                  		andi.w	#$FF80,d1
00010A94 9041                       		sub.w	d1,d0
00010A96 0C40 0280                  		cmpi.w	#$280,d0
00010A9A 6200 0000                  		bhi.w	Obj57_Delete
00010A9E 6000 CCDC                  		bra.w	DisplaySprite
00010AA2                            ; ===========================================================================
00010AA2                            
00010AA2                            Obj57_Delete:				; XREF: Obj57_ChkDel
00010AA2 7400                       		moveq	#0,d2
00010AA4 45E8 0029                  		lea	$29(a0),a2
00010AA8 141A                       		move.b	(a2)+,d2
00010AAA                            
00010AAA                            Obj57_DelLoop:
00010AAA 7000                       		moveq	#0,d0
00010AAC 101A                       		move.b	(a2)+,d0
00010AAE ED48                       		lsl.w	#6,d0
00010AB0 0680 00FF D000             		addi.l	#$FFD000,d0
00010AB6 2240                       		movea.l	d0,a1
00010AB8 6100 CD00                  		bsr.w	DeleteObject2
00010ABC 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00010AC0                            
00010AC0 4E75                       		rts	
00010AC2                            ; ===========================================================================
00010AC2                            
00010AC2                            Obj57_Display:				; XREF: Obj57_Index
00010AC2 6000 CCB8                  		bra.w	DisplaySprite
00010AC6                            ; ===========================================================================
00010AC6                            ; ---------------------------------------------------------------------------
00010AC6                            ; Sprite mappings - chain of spiked balls (SYZ)
00010AC6                            ; ---------------------------------------------------------------------------
00010AC6                            Map_obj57:
00010AC6                            	include "_maps\obj57syz.asm"
00010AC6                            ; ---------------------------------------------------------------------------
00010AC6                            ; Sprite mappings - chain of spiked balls (SYZ)
00010AC6                            ; ---------------------------------------------------------------------------
00010AC6 0000                       		dc.w byte_10958-Map_obj57
00010AC8 01                         byte_10958:	dc.b 1
00010AC9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010ACE                            		even
00010ACE                            		even
00010ACE                            
00010ACE                            ; ---------------------------------------------------------------------------
00010ACE                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010ACE                            ; ---------------------------------------------------------------------------
00010ACE                            Map_obj57a:
00010ACE                            	include "_maps\obj57lz.asm"
00010ACE                            ; ---------------------------------------------------------------------------
00010ACE                            ; Sprite mappings - spiked ball	on a chain (LZ)
00010ACE                            ; ---------------------------------------------------------------------------
00010ACE 0000                       		dc.w byte_10964-Map_obj57a
00010AD0 0000                       		dc.w byte_1096A-Map_obj57a
00010AD2 0000                       		dc.w byte_10970-Map_obj57a
00010AD4 01                         byte_10964:	dc.b 1
00010AD5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00010ADA 01                         byte_1096A:	dc.b 1
00010ADB F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010AE0 01                         byte_10970:	dc.b 1
00010AE1 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010AE6                            		even
00010AE6                            		even
00010AE6                            
00010AE6                            ; ===========================================================================
00010AE6                            ; ---------------------------------------------------------------------------
00010AE6                            ; Object 58 - giant spiked balls (SYZ)
00010AE6                            ; ---------------------------------------------------------------------------
00010AE6                            
00010AE6                            Obj58:					; XREF: Obj_Index
00010AE6 7000                       		moveq	#0,d0
00010AE8 1028 0024                  		move.b	$24(a0),d0
00010AEC 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010AF0 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010AF4                            ; ===========================================================================
00010AF4 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010AF6 0000                       		dc.w Obj58_Move-Obj58_Index
00010AF8                            ; ===========================================================================
00010AF8                            
00010AF8                            Obj58_Main:				; XREF: Obj58_Index
00010AF8 5428 0024                  		addq.b	#2,$24(a0)
00010AFC 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010B04 317C 0396 0002             		move.w	#$396,2(a0)
00010B0A 117C 0004 0001             		move.b	#4,1(a0)
00010B10 117C 0004 0018             		move.b	#4,$18(a0)
00010B16 117C 0018 0019             		move.b	#$18,$19(a0)
00010B1C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010B22 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010B28 117C 0086 0020             		move.b	#$86,$20(a0)
00010B2E 1228 0028                  		move.b	$28(a0),d1	; get object type
00010B32 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010B36 4881                       		ext.w	d1
00010B38 E741                       		asl.w	#3,d1		; multiply by 8
00010B3A 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00010B3E 1028 0022                  		move.b	$22(a0),d0
00010B42 E418                       		ror.b	#2,d0
00010B44 0200 00C0                  		andi.b	#$C0,d0
00010B48 1140 0026                  		move.b	d0,$26(a0)
00010B4C 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010B52                            
00010B52                            Obj58_Move:				; XREF: Obj58_Index
00010B52 7000                       		moveq	#0,d0
00010B54 1028 0028                  		move.b	$28(a0),d0	; get object type
00010B58 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00010B5C D040                       		add.w	d0,d0
00010B5E 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010B62 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010B66 3028 003A                  		move.w	$3A(a0),d0
00010B6A 0240 FF80                  		andi.w	#$FF80,d0
00010B6E 3238 F700                  		move.w	($FFFFF700).w,d1
00010B72 0441 0080                  		subi.w	#$80,d1
00010B76 0241 FF80                  		andi.w	#$FF80,d1
00010B7A 9041                       		sub.w	d1,d0
00010B7C 0C40 0280                  		cmpi.w	#$280,d0
00010B80 6200 CC36                  		bhi.w	DeleteObject
00010B84 6000 CBF6                  		bra.w	DisplaySprite
00010B88                            ; ===========================================================================
00010B88 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00010B8A 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00010B8C 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00010B8E 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00010B90                            ; ===========================================================================
00010B90                            
00010B90                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00010B90 4E75                       		rts	
00010B92                            ; ===========================================================================
00010B92                            
00010B92                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00010B92 323C 0060                  		move.w	#$60,d1
00010B96 7000                       		moveq	#0,d0
00010B98 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010B9C 0828 0000 0022             		btst	#0,$22(a0)
00010BA2 6700                       		beq.s	loc_10A38
00010BA4 4440                       		neg.w	d0
00010BA6 D041                       		add.w	d1,d0
00010BA8                            
00010BA8                            loc_10A38:
00010BA8 3228 003A                  		move.w	$3A(a0),d1
00010BAC 9240                       		sub.w	d0,d1
00010BAE 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00010BB2 4E75                       		rts	
00010BB4                            ; ===========================================================================
00010BB4                            
00010BB4                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00010BB4 323C 0060                  		move.w	#$60,d1
00010BB8 7000                       		moveq	#0,d0
00010BBA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00010BBE 0828 0000 0022             		btst	#0,$22(a0)
00010BC4 6700                       		beq.s	loc_10A5C
00010BC6 4440                       		neg.w	d0
00010BC8 0640 0080                  		addi.w	#$80,d0
00010BCC                            
00010BCC                            loc_10A5C:
00010BCC 3228 0038                  		move.w	$38(a0),d1
00010BD0 9240                       		sub.w	d0,d1
00010BD2 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00010BD6 4E75                       		rts	
00010BD8                            ; ===========================================================================
00010BD8                            
00010BD8                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00010BD8 3028 003E                  		move.w	$3E(a0),d0
00010BDC D168 0026                  		add.w	d0,$26(a0)
00010BE0 1028 0026                  		move.b	$26(a0),d0
00010BE4 4EB9 0000 29DA             		jsr	(CalcSine).l
00010BEA 3428 0038                  		move.w	$38(a0),d2
00010BEE 3628 003A                  		move.w	$3A(a0),d3
00010BF2 7800                       		moveq	#0,d4
00010BF4 1828 003C                  		move.b	$3C(a0),d4
00010BF8 2A04                       		move.l	d4,d5
00010BFA C9C0                       		muls.w	d0,d4
00010BFC E084                       		asr.l	#8,d4
00010BFE CBC1                       		muls.w	d1,d5
00010C00 E085                       		asr.l	#8,d5
00010C02 D842                       		add.w	d2,d4
00010C04 DA43                       		add.w	d3,d5
00010C06 3144 000C                  		move.w	d4,$C(a0)
00010C0A 3145 0008                  		move.w	d5,8(a0)
00010C0E 4E75                       		rts	
00010C10                            ; ===========================================================================
00010C10                            ; ---------------------------------------------------------------------------
00010C10                            ; Sprite mappings - SBZ	spiked ball on a chain
00010C10                            ; ---------------------------------------------------------------------------
00010C10                            Map_obj15b:
00010C10                            	include "_maps\obj15sbz.asm"
00010C10                            ; ---------------------------------------------------------------------------
00010C10                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010C10                            ; ---------------------------------------------------------------------------
00010C10 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010C14 0000                       		dc.w byte_10AC6-Map_obj15b
00010C16 05                         byte_10AA6:	dc.b 5
00010C17 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00010C1C F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00010C21 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00010C26 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00010C2B 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00010C30 01                         byte_10AC0:	dc.b 1
00010C31 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00010C36 02                         byte_10AC6:	dc.b 2
00010C37 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00010C3C E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00010C42 00                         		even
00010C42 00                         		even
00010C42                            
00010C42                            ; ===========================================================================
00010C42                            ; ---------------------------------------------------------------------------
00010C42                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00010C42                            ; ---------------------------------------------------------------------------
00010C42                            
00010C42                            Obj59:					; XREF: Obj_Index
00010C42 7000                       		moveq	#0,d0
00010C44 1028 0024                  		move.b	$24(a0),d0
00010C48 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00010C4C 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00010C50 3028 0032                  		move.w	$32(a0),d0
00010C54 0240 FF80                  		andi.w	#$FF80,d0
00010C58 3238 F700                  		move.w	($FFFFF700).w,d1
00010C5C 0441 0080                  		subi.w	#$80,d1
00010C60 0241 FF80                  		andi.w	#$FF80,d1
00010C64 9041                       		sub.w	d1,d0
00010C66 0C40 0280                  		cmpi.w	#$280,d0
00010C6A 6200 CB4C                  		bhi.w	DeleteObject
00010C6E 6000 CB0C                  		bra.w	DisplaySprite
00010C72                            ; ===========================================================================
00010C72 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00010C74 0000                       		dc.w Obj59_Platform-Obj59_Index
00010C76 0000                       		dc.w Obj59_Action-Obj59_Index
00010C78 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00010C7A                            
00010C7A 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00010C7C                            
00010C7C 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00010C7E 2001                       		dc.b $20, 1
00010C80 3401                       		dc.b $34, 1
00010C82 1003                       		dc.b $10, 3
00010C84 2003                       		dc.b $20, 3
00010C86 3403                       		dc.b $34, 3
00010C88 1401                       		dc.b $14, 1
00010C8A 2401                       		dc.b $24, 1
00010C8C 2C01                       		dc.b $2C, 1
00010C8E 1403                       		dc.b $14, 3
00010C90 2403                       		dc.b $24, 3
00010C92 2C03                       		dc.b $2C, 3
00010C94 2005                       		dc.b $20, 5
00010C96 2007                       		dc.b $20, 7
00010C98 3009                       		dc.b $30, 9
00010C9A                            ; ===========================================================================
00010C9A                            
00010C9A                            Obj59_Main:				; XREF: Obj59_Index
00010C9A 5428 0024                  		addq.b	#2,$24(a0)
00010C9E 7000                       		moveq	#0,d0
00010CA0 1028 0028                  		move.b	$28(a0),d0
00010CA4 6A00                       		bpl.s	Obj59_Main2
00010CA6 5828 0024                  		addq.b	#4,$24(a0)
00010CAA 0240 007F                  		andi.w	#$7F,d0
00010CAE C0FC 0006                  		mulu.w	#6,d0
00010CB2 3140 003C                  		move.w	d0,$3C(a0)
00010CB6 3140 003E                  		move.w	d0,$3E(a0)
00010CBA 588F                       		addq.l	#4,sp
00010CBC 4E75                       		rts	
00010CBE                            ; ===========================================================================
00010CBE                            
00010CBE                            Obj59_Main2:
00010CBE E648                       		lsr.w	#3,d0
00010CC0 0240 001E                  		andi.w	#$1E,d0
00010CC4 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00010CC8 115A 0019                  		move.b	(a2)+,$19(a0)
00010CCC 115A 001A                  		move.b	(a2)+,$1A(a0)
00010CD0 7000                       		moveq	#0,d0
00010CD2 1028 0028                  		move.b	$28(a0),d0
00010CD6 D040                       		add.w	d0,d0
00010CD8 0240 001E                  		andi.w	#$1E,d0
00010CDC 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00010CE0 101A                       		move.b	(a2)+,d0
00010CE2 E548                       		lsl.w	#2,d0
00010CE4 3140 003C                  		move.w	d0,$3C(a0)
00010CE8 115A 0028                  		move.b	(a2)+,$28(a0)
00010CEC 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00010CF4 317C 4000 0002             		move.w	#$4000,2(a0)
00010CFA 117C 0004 0001             		move.b	#4,1(a0)
00010D00 117C 0004 0018             		move.b	#4,$18(a0)
00010D06 3168 0008 0032             		move.w	8(a0),$32(a0)
00010D0C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010D12                            
00010D12                            Obj59_Platform:				; XREF: Obj59_Index
00010D12 7200                       		moveq	#0,d1
00010D14 1228 0019                  		move.b	$19(a0),d1
00010D18 4EB9 0000 7552             		jsr	(PlatformObject).l
00010D1E 6000 0000                  		bra.w	Obj59_Types
00010D22                            ; ===========================================================================
00010D22                            
00010D22                            Obj59_Action:				; XREF: Obj59_Index
00010D22 7200                       		moveq	#0,d1
00010D24 1228 0019                  		move.b	$19(a0),d1
00010D28 4EB9 0000 76C6             		jsr	(ExitPlatform).l
00010D2E 3F28 0008                  		move.w	8(a0),-(sp)
00010D32 6100 0000                  		bsr.w	Obj59_Types
00010D36 341F                       		move.w	(sp)+,d2
00010D38 4A10                       		tst.b	0(a0)
00010D3A 6700                       		beq.s	locret_10BD4
00010D3C 4EF9 0000 7C30             		jmp	(MvSonicOnPtfm2).l
00010D42                            ; ===========================================================================
00010D42                            
00010D42                            locret_10BD4:
00010D42 4E75                       		rts	
00010D44                            ; ===========================================================================
00010D44                            
00010D44                            Obj59_Types:
00010D44 7000                       		moveq	#0,d0
00010D46 1028 0028                  		move.b	$28(a0),d0
00010D4A 0240 000F                  		andi.w	#$F,d0
00010D4E D040                       		add.w	d0,d0
00010D50 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00010D54 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00010D58                            ; ===========================================================================
00010D58 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010D5C 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010D60 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010D64 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010D68 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00010D6C                            ; ===========================================================================
00010D6C                            
00010D6C                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00010D6C 4E75                       		rts	
00010D6E                            ; ===========================================================================
00010D6E                            
00010D6E                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00010D6E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00010D74 6600                       		bne.s	locret_10C0C
00010D76 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010D7A                            
00010D7A                            locret_10C0C:
00010D7A 4E75                       		rts	
00010D7C                            ; ===========================================================================
00010D7C                            
00010D7C                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00010D7C 6100 0000                  		bsr.w	Obj59_Move
00010D80 3028 0034                  		move.w	$34(a0),d0
00010D84 4440                       		neg.w	d0
00010D86 D068 0030                  		add.w	$30(a0),d0
00010D8A 3140 000C                  		move.w	d0,$C(a0)
00010D8E 4E75                       		rts	
00010D90                            ; ===========================================================================
00010D90                            
00010D90                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00010D90 6100 0000                  		bsr.w	Obj59_Move
00010D94 3028 0034                  		move.w	$34(a0),d0
00010D98 D068 0030                  		add.w	$30(a0),d0
00010D9C 3140 000C                  		move.w	d0,$C(a0)
00010DA0 4E75                       		rts	
00010DA2                            ; ===========================================================================
00010DA2                            
00010DA2                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00010DA2 6100 0000                  		bsr.w	Obj59_Move
00010DA6 3028 0034                  		move.w	$34(a0),d0
00010DAA E240                       		asr.w	#1,d0
00010DAC 4440                       		neg.w	d0
00010DAE D068 0030                  		add.w	$30(a0),d0
00010DB2 3140 000C                  		move.w	d0,$C(a0)
00010DB6 3028 0034                  		move.w	$34(a0),d0
00010DBA D068 0032                  		add.w	$32(a0),d0
00010DBE 3140 0008                  		move.w	d0,8(a0)
00010DC2 4E75                       		rts	
00010DC4                            ; ===========================================================================
00010DC4                            
00010DC4                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00010DC4 6100 0000                  		bsr.w	Obj59_Move
00010DC8 3028 0034                  		move.w	$34(a0),d0
00010DCC E240                       		asr.w	#1,d0
00010DCE D068 0030                  		add.w	$30(a0),d0
00010DD2 3140 000C                  		move.w	d0,$C(a0)
00010DD6 3028 0034                  		move.w	$34(a0),d0
00010DDA 4440                       		neg.w	d0
00010DDC D068 0032                  		add.w	$32(a0),d0
00010DE0 3140 0008                  		move.w	d0,8(a0)
00010DE4 4E75                       		rts	
00010DE6                            ; ===========================================================================
00010DE6                            
00010DE6                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00010DE6 6100 0000                  		bsr.w	Obj59_Move
00010DEA 3028 0034                  		move.w	$34(a0),d0
00010DEE 4440                       		neg.w	d0
00010DF0 D068 0030                  		add.w	$30(a0),d0
00010DF4 3140 000C                  		move.w	d0,$C(a0)
00010DF8 4A28 0028                  		tst.b	$28(a0)
00010DFC 6700 0000                  		beq.w	loc_10C94
00010E00 4E75                       		rts	
00010E02                            ; ===========================================================================
00010E02                            
00010E02                            loc_10C94:
00010E02 0828 0003 0022             		btst	#3,$22(a0)
00010E08 6700                       		beq.s	Obj59_Delete
00010E0A 08E9 0001 0022             		bset	#1,$22(a1)
00010E10 08A9 0003 0022             		bclr	#3,$22(a1)
00010E16 137C 0002 0024             		move.b	#2,$24(a1)
00010E1C                            
00010E1C                            Obj59_Delete:
00010E1C 6000 C99A                  		bra.w	DeleteObject
00010E20                            
00010E20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010E20                            
00010E20                            
00010E20                            Obj59_Move:				; XREF: Obj59_Type02; et al
00010E20 3028 0038                  		move.w	$38(a0),d0
00010E24 4A28 003A                  		tst.b	$3A(a0)
00010E28 6600                       		bne.s	loc_10CC8
00010E2A 0C40 0800                  		cmpi.w	#$800,d0
00010E2E 6400                       		bcc.s	loc_10CD0
00010E30 0640 0010                  		addi.w	#$10,d0
00010E34 6000                       		bra.s	loc_10CD0
00010E36                            ; ===========================================================================
00010E36                            
00010E36                            loc_10CC8:
00010E36 4A40                       		tst.w	d0
00010E38 6700                       		beq.s	loc_10CD0
00010E3A 0440 0010                  		subi.w	#$10,d0
00010E3E                            
00010E3E                            loc_10CD0:
00010E3E 3140 0038                  		move.w	d0,$38(a0)
00010E42 48C0                       		ext.l	d0
00010E44 E180                       		asl.l	#8,d0
00010E46 D0A8 0034                  		add.l	$34(a0),d0
00010E4A 2140 0034                  		move.l	d0,$34(a0)
00010E4E 4840                       		swap	d0
00010E50 3428 003C                  		move.w	$3C(a0),d2
00010E54 B042                       		cmp.w	d2,d0
00010E56 6300                       		bls.s	loc_10CF0
00010E58 117C 0001 003A             		move.b	#1,$3A(a0)
00010E5E                            
00010E5E                            loc_10CF0:
00010E5E D442                       		add.w	d2,d2
00010E60 B042                       		cmp.w	d2,d0
00010E62 6600                       		bne.s	locret_10CFA
00010E64 4228 0028                  		clr.b	$28(a0)
00010E68                            
00010E68                            locret_10CFA:
00010E68 4E75                       		rts	
00010E6A                            ; End of function Obj59_Move
00010E6A                            
00010E6A                            ; ===========================================================================
00010E6A                            
00010E6A                            Obj59_MakeMulti:			; XREF: Obj59_Index
00010E6A 5368 003C                  		subq.w	#1,$3C(a0)
00010E6E 6600                       		bne.s	Obj59_ChkDel
00010E70 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00010E76 6100 CD8A                  		bsr.w	SingleObjLoad
00010E7A 6600                       		bne.s	Obj59_ChkDel
00010E7C 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00010E80 3368 0008 0008             		move.w	8(a0),8(a1)
00010E86 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010E8C 137C 000E 0028             		move.b	#$E,$28(a1)
00010E92                            
00010E92                            Obj59_ChkDel:
00010E92 588F                       		addq.l	#4,sp
00010E94 3028 0008                  		move.w	8(a0),d0
00010E98 0240 FF80                  		andi.w	#$FF80,d0
00010E9C 3238 F700                  		move.w	($FFFFF700).w,d1
00010EA0 0441 0080                  		subi.w	#$80,d1
00010EA4 0241 FF80                  		andi.w	#$FF80,d1
00010EA8 9041                       		sub.w	d1,d0
00010EAA 0C40 0280                  		cmpi.w	#$280,d0
00010EAE 6200 C908                  		bhi.w	DeleteObject
00010EB2 4E75                       		rts	
00010EB4                            ; ===========================================================================
00010EB4                            ; ---------------------------------------------------------------------------
00010EB4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010EB4                            ; ---------------------------------------------------------------------------
00010EB4                            Map_obj59:
00010EB4                            	include "_maps\obj59.asm"
00010EB4                            ; ---------------------------------------------------------------------------
00010EB4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010EB4                            ; ---------------------------------------------------------------------------
00010EB4 0000                       		dc.w byte_10D4A-Map_obj59
00010EB6 03                         byte_10D4A:	dc.b 3
00010EB7 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00010EBC F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00010EC1 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00010EC6                            		even
00010EC6                            		even
00010EC6                            
00010EC6                            ; ===========================================================================
00010EC6                            ; ---------------------------------------------------------------------------
00010EC6                            ; Object 5A - platforms	moving in circles (SLZ)
00010EC6                            ; ---------------------------------------------------------------------------
00010EC6                            
00010EC6                            Obj5A:					; XREF: Obj_Index
00010EC6 7000                       		moveq	#0,d0
00010EC8 1028 0024                  		move.b	$24(a0),d0
00010ECC 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00010ED0 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00010ED4 3028 0032                  		move.w	$32(a0),d0
00010ED8 0240 FF80                  		andi.w	#$FF80,d0
00010EDC 3238 F700                  		move.w	($FFFFF700).w,d1
00010EE0 0441 0080                  		subi.w	#$80,d1
00010EE4 0241 FF80                  		andi.w	#$FF80,d1
00010EE8 9041                       		sub.w	d1,d0
00010EEA 0C40 0280                  		cmpi.w	#$280,d0
00010EEE 6200 C8C8                  		bhi.w	DeleteObject
00010EF2 6000 C888                  		bra.w	DisplaySprite
00010EF6                            ; ===========================================================================
00010EF6 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00010EF8 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00010EFA 0000                       		dc.w Obj5A_Action-Obj5A_Index
00010EFC                            ; ===========================================================================
00010EFC                            
00010EFC                            Obj5A_Main:				; XREF: Obj5A_Index
00010EFC 5428 0024                  		addq.b	#2,$24(a0)
00010F00 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00010F08 317C 4000 0002             		move.w	#$4000,2(a0)
00010F0E 117C 0004 0001             		move.b	#4,1(a0)
00010F14 117C 0004 0018             		move.b	#4,$18(a0)
00010F1A 117C 0018 0019             		move.b	#$18,$19(a0)
00010F20 3168 0008 0032             		move.w	8(a0),$32(a0)
00010F26 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010F2C                            
00010F2C                            Obj5A_Platform:				; XREF: Obj5A_Index
00010F2C 7200                       		moveq	#0,d1
00010F2E 1228 0019                  		move.b	$19(a0),d1
00010F32 4EB9 0000 7552             		jsr	(PlatformObject).l
00010F38 6000 0000                  		bra.w	Obj5A_Types
00010F3C                            ; ===========================================================================
00010F3C                            
00010F3C                            Obj5A_Action:				; XREF: Obj5A_Index
00010F3C 7200                       		moveq	#0,d1
00010F3E 1228 0019                  		move.b	$19(a0),d1
00010F42 4EB9 0000 76C6             		jsr	(ExitPlatform).l
00010F48 3F28 0008                  		move.w	8(a0),-(sp)
00010F4C 6100 0000                  		bsr.w	Obj5A_Types
00010F50 341F                       		move.w	(sp)+,d2
00010F52 4EF9 0000 7C30             		jmp	(MvSonicOnPtfm2).l
00010F58                            ; ===========================================================================
00010F58                            
00010F58                            Obj5A_Types:
00010F58 7000                       		moveq	#0,d0
00010F5A 1028 0028                  		move.b	$28(a0),d0
00010F5E 0240 000C                  		andi.w	#$C,d0
00010F62 E248                       		lsr.w	#1,d0
00010F64 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00010F68 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00010F6C                            ; ===========================================================================
00010F6C 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00010F6E 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00010F70                            ; ===========================================================================
00010F70                            
00010F70                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00010F70 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010F74 0401 0050                  		subi.b	#$50,d1
00010F78 4881                       		ext.w	d1
00010F7A 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010F7E 0402 0050                  		subi.b	#$50,d2
00010F82 4882                       		ext.w	d2
00010F84 0828 0000 0028             		btst	#0,$28(a0)
00010F8A 6700                       		beq.s	loc_10E24
00010F8C 4441                       		neg.w	d1
00010F8E 4442                       		neg.w	d2
00010F90                            
00010F90                            loc_10E24:
00010F90 0828 0001 0028             		btst	#1,$28(a0)
00010F96 6700                       		beq.s	loc_10E30
00010F98 4441                       		neg.w	d1
00010F9A C342                       		exg	d1,d2
00010F9C                            
00010F9C                            loc_10E30:
00010F9C D268 0032                  		add.w	$32(a0),d1
00010FA0 3141 0008                  		move.w	d1,8(a0)
00010FA4 D468 0030                  		add.w	$30(a0),d2
00010FA8 3142 000C                  		move.w	d2,$C(a0)
00010FAC 4E75                       		rts	
00010FAE                            ; ===========================================================================
00010FAE                            
00010FAE                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00010FAE 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010FB2 0401 0050                  		subi.b	#$50,d1
00010FB6 4881                       		ext.w	d1
00010FB8 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010FBC 0402 0050                  		subi.b	#$50,d2
00010FC0 4882                       		ext.w	d2
00010FC2 0828 0000 0028             		btst	#0,$28(a0)
00010FC8 6700                       		beq.s	loc_10E62
00010FCA 4441                       		neg.w	d1
00010FCC 4442                       		neg.w	d2
00010FCE                            
00010FCE                            loc_10E62:
00010FCE 0828 0001 0028             		btst	#1,$28(a0)
00010FD4 6700                       		beq.s	loc_10E6E
00010FD6 4441                       		neg.w	d1
00010FD8 C342                       		exg	d1,d2
00010FDA                            
00010FDA                            loc_10E6E:
00010FDA 4441                       		neg.w	d1
00010FDC D268 0032                  		add.w	$32(a0),d1
00010FE0 3141 0008                  		move.w	d1,8(a0)
00010FE4 D468 0030                  		add.w	$30(a0),d2
00010FE8 3142 000C                  		move.w	d2,$C(a0)
00010FEC 4E75                       		rts	
00010FEE                            ; ===========================================================================
00010FEE                            ; ---------------------------------------------------------------------------
00010FEE                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010FEE                            ; ---------------------------------------------------------------------------
00010FEE                            Map_obj5A:
00010FEE                            	include "_maps\obj5A.asm"
00010FEE                            ; ---------------------------------------------------------------------------
00010FEE                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010FEE                            ; ---------------------------------------------------------------------------
00010FEE 0000                       		dc.w byte_10E84-Map_obj5A
00010FF0 02                         byte_10E84:	dc.b 2
00010FF1 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00010FF6 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00010FFC 00                         		even
00010FFC 00                         		even
00010FFC                            
00010FFC                            ; ===========================================================================
00010FFC                            ; ---------------------------------------------------------------------------
00010FFC                            ; Object 5B - blocks that form a staircase (SLZ)
00010FFC                            ; ---------------------------------------------------------------------------
00010FFC                            
00010FFC                            Obj5B:					; XREF: Obj_Index
00010FFC 7000                       		moveq	#0,d0
00010FFE 1028 0024                  		move.b	$24(a0),d0
00011002 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011006 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
0001100A 3028 0030                  		move.w	$30(a0),d0
0001100E 0240 FF80                  		andi.w	#$FF80,d0
00011012 3238 F700                  		move.w	($FFFFF700).w,d1
00011016 0441 0080                  		subi.w	#$80,d1
0001101A 0241 FF80                  		andi.w	#$FF80,d1
0001101E 9041                       		sub.w	d1,d0
00011020 0C40 0280                  		cmpi.w	#$280,d0
00011024 6200 C792                  		bhi.w	DeleteObject
00011028 6000 C752                  		bra.w	DisplaySprite
0001102C                            ; ===========================================================================
0001102C 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
0001102E 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011030 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011032                            ; ===========================================================================
00011032                            
00011032                            Obj5B_Main:				; XREF: Obj5B_Index
00011032 5428 0024                  		addq.b	#2,$24(a0)
00011036 7638                       		moveq	#$38,d3
00011038 7801                       		moveq	#1,d4
0001103A 0828 0000 0022             		btst	#0,$22(a0)
00011040 6700                       		beq.s	loc_10EDA
00011042 763B                       		moveq	#$3B,d3
00011044 78FF                       		moveq	#-1,d4
00011046                            
00011046                            loc_10EDA:
00011046 3428 0008                  		move.w	8(a0),d2
0001104A 2248                       		movea.l	a0,a1
0001104C 7203                       		moveq	#3,d1
0001104E 6000                       		bra.s	Obj5B_MakeBlocks
00011050                            ; ===========================================================================
00011050                            
00011050                            Obj5B_Loop:
00011050 6100 CBC6                  		bsr.w	SingleObjLoad2
00011054 6600 0000                  		bne.w	Obj5B_Move
00011058 137C 0004 0024             		move.b	#4,$24(a1)
0001105E                            
0001105E                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
0001105E 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00011062 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001106A 337C 4000 0002             		move.w	#$4000,2(a1)
00011070 137C 0004 0001             		move.b	#4,1(a1)
00011076 137C 0003 0018             		move.b	#3,$18(a1)
0001107C 137C 0010 0019             		move.b	#$10,$19(a1)
00011082 1368 0028 0028             		move.b	$28(a0),$28(a1)
00011088 3342 0008                  		move.w	d2,8(a1)
0001108C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011092 3368 0008 0030             		move.w	8(a0),$30(a1)
00011098 3369 000C 0032             		move.w	$C(a1),$32(a1)
0001109E 0642 0020                  		addi.w	#$20,d2
000110A2 1343 0037                  		move.b	d3,$37(a1)
000110A6 2348 003C                  		move.l	a0,$3C(a1)
000110AA D604                       		add.b	d4,d3
000110AC 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
000110B0                            
000110B0                            Obj5B_Move:				; XREF: Obj5B_Index
000110B0 7000                       		moveq	#0,d0
000110B2 1028 0028                  		move.b	$28(a0),d0
000110B6 0240 0007                  		andi.w	#7,d0
000110BA D040                       		add.w	d0,d0
000110BC 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
000110C0 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
000110C4                            
000110C4                            Obj5B_Solid:				; XREF: Obj5B_Index
000110C4 2468 003C                  		movea.l	$3C(a0),a2
000110C8 7000                       		moveq	#0,d0
000110CA 1028 0037                  		move.b	$37(a0),d0
000110CE 1032 0000                  		move.b	(a2,d0.w),d0
000110D2 D068 0032                  		add.w	$32(a0),d0
000110D6 3140 000C                  		move.w	d0,$C(a0)
000110DA 7200                       		moveq	#0,d1
000110DC 1228 0019                  		move.b	$19(a0),d1
000110E0 0641 000B                  		addi.w	#$B,d1
000110E4 343C 0010                  		move.w	#$10,d2
000110E8 363C 0011                  		move.w	#$11,d3
000110EC 3828 0008                  		move.w	8(a0),d4
000110F0 6100 EA5A                  		bsr.w	SolidObject
000110F4 4A04                       		tst.b	d4
000110F6 6A00                       		bpl.s	loc_10F92
000110F8 1544 0036                  		move.b	d4,$36(a2)
000110FC                            
000110FC                            loc_10F92:
000110FC 0828 0003 0022             		btst	#3,$22(a0)
00011102 6700                       		beq.s	locret_10FA0
00011104 157C 0001 0036             		move.b	#1,$36(a2)
0001110A                            
0001110A                            locret_10FA0:
0001110A 4E75                       		rts	
0001110C                            ; ===========================================================================
0001110C 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
0001110E 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011110 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00011112 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00011114                            ; ===========================================================================
00011114                            
00011114                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00011114 4A68 0034                  		tst.w	$34(a0)
00011118 6600                       		bne.s	loc_10FC0
0001111A 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00011120 6600                       		bne.s	locret_10FBE
00011122 317C 001E 0034             		move.w	#$1E,$34(a0)
00011128                            
00011128                            locret_10FBE:
00011128 4E75                       		rts	
0001112A                            ; ===========================================================================
0001112A                            
0001112A                            loc_10FC0:
0001112A 5368 0034                  		subq.w	#1,$34(a0)
0001112E 66F8                       		bne.s	locret_10FBE
00011130 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011134 4E75                       		rts	
00011136                            ; ===========================================================================
00011136                            
00011136                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00011136 4A68 0034                  		tst.w	$34(a0)
0001113A 6600                       		bne.s	loc_10FE0
0001113C 4A28 0036                  		tst.b	$36(a0)
00011140 6A00                       		bpl.s	locret_10FDE
00011142 317C 003C 0034             		move.w	#$3C,$34(a0)
00011148                            
00011148                            locret_10FDE:
00011148 4E75                       		rts	
0001114A                            ; ===========================================================================
0001114A                            
0001114A                            loc_10FE0:
0001114A 5368 0034                  		subq.w	#1,$34(a0)
0001114E 6600                       		bne.s	loc_10FEC
00011150 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00011154 4E75                       		rts	
00011156                            ; ===========================================================================
00011156                            
00011156                            loc_10FEC:
00011156 43E8 0038                  		lea	$38(a0),a1
0001115A 3028 0034                  		move.w	$34(a0),d0
0001115E E408                       		lsr.b	#2,d0
00011160 0200 0001                  		andi.b	#1,d0
00011164 12C0                       		move.b	d0,(a1)+
00011166 0A00 0001                  		eori.b	#1,d0
0001116A 12C0                       		move.b	d0,(a1)+
0001116C 0A00 0001                  		eori.b	#1,d0
00011170 12C0                       		move.b	d0,(a1)+
00011172 0A00 0001                  		eori.b	#1,d0
00011176 12C0                       		move.b	d0,(a1)+
00011178 4E75                       		rts	
0001117A                            ; ===========================================================================
0001117A                            
0001117A                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001117A 43E8 0038                  		lea	$38(a0),a1
0001117E 0C11 0080                  		cmpi.b	#$80,(a1)
00011182 6700                       		beq.s	locret_11038
00011184 5211                       		addq.b	#1,(a1)
00011186 7200                       		moveq	#0,d1
00011188 1219                       		move.b	(a1)+,d1
0001118A 4841                       		swap	d1
0001118C E289                       		lsr.l	#1,d1
0001118E 2401                       		move.l	d1,d2
00011190 E289                       		lsr.l	#1,d1
00011192 2601                       		move.l	d1,d3
00011194 D682                       		add.l	d2,d3
00011196 4841                       		swap	d1
00011198 4842                       		swap	d2
0001119A 4843                       		swap	d3
0001119C 12C3                       		move.b	d3,(a1)+
0001119E 12C2                       		move.b	d2,(a1)+
000111A0 12C1                       		move.b	d1,(a1)+
000111A2                            
000111A2                            locret_11038:
000111A2 4E75                       		rts	
000111A4 4E75                       		rts	
000111A6                            ; ===========================================================================
000111A6                            ; ---------------------------------------------------------------------------
000111A6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000111A6                            ; ---------------------------------------------------------------------------
000111A6                            Map_obj5B:
000111A6                            	include "_maps\obj5B.asm"
000111A6                            ; ---------------------------------------------------------------------------
000111A6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
000111A6                            ; ---------------------------------------------------------------------------
000111A6 0000                       		dc.w byte_1103E-Map_obj5B
000111A8 01                         byte_1103E:	dc.b 1
000111A9 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000111AE                            		even
000111AE                            		even
000111AE                            
000111AE                            ; ===========================================================================
000111AE                            ; ---------------------------------------------------------------------------
000111AE                            ; Object 5C - metal girders in foreground (SLZ)
000111AE                            ; ---------------------------------------------------------------------------
000111AE                            
000111AE                            Obj5C:					; XREF: Obj_Index
000111AE 7000                       		moveq	#0,d0
000111B0 1028 0024                  		move.b	$24(a0),d0
000111B4 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
000111B8 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
000111BC                            ; ===========================================================================
000111BC 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
000111BE 0000                       		dc.w Obj5C_Display-Obj5C_Index
000111C0                            ; ===========================================================================
000111C0                            
000111C0                            Obj5C_Main:				; XREF: Obj5C_Index
000111C0 5428 0024                  		addq.b	#2,$24(a0)
000111C4 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
000111CC 317C 83CC 0002             		move.w	#$83CC,2(a0)
000111D2 117C 0010 0019             		move.b	#$10,$19(a0)
000111D8                            
000111D8                            Obj5C_Display:				; XREF: Obj5C_Index
000111D8 2238 F700                  		move.l	($FFFFF700).w,d1
000111DC D281                       		add.l	d1,d1
000111DE 4841                       		swap	d1
000111E0 4441                       		neg.w	d1
000111E2 3141 0008                  		move.w	d1,8(a0)
000111E6 2238 F704                  		move.l	($FFFFF704).w,d1
000111EA D281                       		add.l	d1,d1
000111EC 4841                       		swap	d1
000111EE 0241 003F                  		andi.w	#$3F,d1
000111F2 4441                       		neg.w	d1
000111F4 0641 0100                  		addi.w	#$100,d1
000111F8 3141 000A                  		move.w	d1,$A(a0)
000111FC 6000 C57E                  		bra.w	DisplaySprite
00011200                            ; ===========================================================================
00011200                            ; ---------------------------------------------------------------------------
00011200                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011200                            ; ---------------------------------------------------------------------------
00011200                            Map_obj5C:
00011200                            	include "_maps\obj5C.asm"
00011200                            ; ---------------------------------------------------------------------------
00011200                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011200                            ; ---------------------------------------------------------------------------
00011200 0000                       		dc.w byte_11098-Map_obj5C
00011202 09                         byte_11098:	dc.b 9
00011203 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011208 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001120D C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011212 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011217 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001121C 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011221 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011226 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001122B 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011230                            		even
00011230                            		even
00011230                            
00011230                            ; ===========================================================================
00011230                            ; ---------------------------------------------------------------------------
00011230                            ; Object 1B - water surface (LZ)
00011230                            ; ---------------------------------------------------------------------------
00011230                            
00011230                            Obj1B:					; XREF: Obj_Index
00011230 7000                       		moveq	#0,d0
00011232 1028 0024                  		move.b	$24(a0),d0
00011236 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001123A 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001123E                            ; ===========================================================================
0001123E 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011240 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011242                            ; ===========================================================================
00011242                            
00011242                            Obj1B_Main:				; XREF: Obj1B_Index
00011242 5428 0024                  		addq.b	#2,$24(a0)
00011246 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001124E 317C C300 0002             		move.w	#$C300,2(a0)
00011254 117C 0004 0001             		move.b	#4,1(a0)
0001125A 117C 0080 0019             		move.b	#$80,$19(a0)
00011260 3168 0008 0030             		move.w	8(a0),$30(a0)
00011266                            
00011266                            Obj1B_Action:				; XREF: Obj1B_Index
00011266 3238 F700                  		move.w	($FFFFF700).w,d1
0001126A 0241 FFE0                  		andi.w	#$FFE0,d1
0001126E D268 0030                  		add.w	$30(a0),d1
00011272 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011278 6700                       		beq.s	loc_11114
0001127A 0641 0020                  		addi.w	#$20,d1
0001127E                            
0001127E                            loc_11114:
0001127E 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00011282 3238 F646                  		move.w	($FFFFF646).w,d1
00011286 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001128A 4A28 0032                  		tst.b	$32(a0)
0001128E 6600                       		bne.s	Obj1B_Animate
00011290 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00011296 6700                       		beq.s	loc_1114A	; if not, branch
00011298 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
0001129C 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000112A2 6000                       		bra.s	Obj1B_Display
000112A4                            ; ===========================================================================
000112A4                            
000112A4                            Obj1B_Animate:				; XREF: loc_11114
000112A4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000112A8 6600                       		bne.s	Obj1B_Display	; if yes, branch
000112AA 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000112B0 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000112B4                            
000112B4                            loc_1114A:				; XREF: loc_11114
000112B4 5328 001E                  		subq.b	#1,$1E(a0)
000112B8 6A00                       		bpl.s	Obj1B_Display
000112BA 117C 0007 001E             		move.b	#7,$1E(a0)
000112C0 5228 001A                  		addq.b	#1,$1A(a0)
000112C4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000112CA 6500                       		bcs.s	Obj1B_Display
000112CC 117C 0000 001A             		move.b	#0,$1A(a0)
000112D2                            
000112D2                            Obj1B_Display:
000112D2 6000 C4A8                  		bra.w	DisplaySprite
000112D6                            ; ===========================================================================
000112D6                            ; ---------------------------------------------------------------------------
000112D6                            ; Sprite mappings - water surface (LZ)
000112D6                            ; ---------------------------------------------------------------------------
000112D6                            Map_obj1B:
000112D6                            	include "_maps\obj1B.asm"
000112D6                            ; ---------------------------------------------------------------------------
000112D6                            ; Sprite mappings - water surface (LZ)
000112D6                            ; ---------------------------------------------------------------------------
000112D6 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000112DA 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000112DE 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000112E2 03                         byte_11178:	dc.b 3
000112E3 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000112E8 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000112ED FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000112F2 03                         byte_11188:	dc.b 3
000112F3 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000112F8 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000112FD FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011302 03                         byte_11198:	dc.b 3
00011303 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011308 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001130D FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011312 06                         byte_111A8:	dc.b 6
00011313 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011318 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001131D FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011322 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011327 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001132C FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011331 06                         byte_111C7:	dc.b 6
00011332 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011337 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001133C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011341 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011346 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001134B FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011350 06                         byte_111E6:	dc.b 6
00011351 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011356 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001135B FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011360 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011365 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001136A FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011370 00                         		even
00011370 00                         		even
00011370                            
00011370                            ; ===========================================================================
00011370                            ; ---------------------------------------------------------------------------
00011370                            ; Object 0B - pole that	breaks (LZ)
00011370                            ; ---------------------------------------------------------------------------
00011370                            
00011370                            Obj0B:					; XREF: Obj_Index
00011370 7000                       		moveq	#0,d0
00011372 1028 0024                  		move.b	$24(a0),d0
00011376 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001137A 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001137E                            ; ===========================================================================
0001137E 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00011380 0000                       		dc.w Obj0B_Action-Obj0B_Index
00011382 0000                       		dc.w Obj0B_Display-Obj0B_Index
00011384                            ; ===========================================================================
00011384                            
00011384                            Obj0B_Main:				; XREF: Obj0B_Index
00011384 5428 0024                  		addq.b	#2,$24(a0)
00011388 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00011390 317C 43DE 0002             		move.w	#$43DE,2(a0)
00011396 117C 0004 0001             		move.b	#4,1(a0)
0001139C 117C 0008 0019             		move.b	#8,$19(a0)
000113A2 117C 0004 0018             		move.b	#4,$18(a0)
000113A8 117C 00E1 0020             		move.b	#$E1,$20(a0)
000113AE 7000                       		moveq	#0,d0
000113B0 1028 0028                  		move.b	$28(a0),d0	; get object type
000113B4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000113B8 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000113BC                            
000113BC                            Obj0B_Action:				; XREF: Obj0B_Index
000113BC 4A28 0032                  		tst.b	$32(a0)
000113C0 6700                       		beq.s	Obj0B_Grab
000113C2 4A68 0030                  		tst.w	$30(a0)
000113C6 6700                       		beq.s	Obj0B_MoveUp
000113C8 5368 0030                  		subq.w	#1,$30(a0)
000113CC 6600                       		bne.s	Obj0B_MoveUp
000113CE 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000113D4 6000                       		bra.s	Obj0B_Release
000113D6                            ; ===========================================================================
000113D6                            
000113D6                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000113D6 43F8 D000                  		lea	($FFFFD000).w,a1
000113DA 3028 000C                  		move.w	$C(a0),d0
000113DE 0440 0018                  		subi.w	#$18,d0
000113E2 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000113E8 6700                       		beq.s	Obj0B_MoveDown
000113EA 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000113EE B069 000C                  		cmp.w	$C(a1),d0
000113F2 6500                       		bcs.s	Obj0B_MoveDown
000113F4 3340 000C                  		move.w	d0,$C(a1)
000113F8                            
000113F8                            Obj0B_MoveDown:
000113F8 0640 0024                  		addi.w	#$24,d0
000113FC 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011402 6700                       		beq.s	Obj0B_LetGo
00011404 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011408 B069 000C                  		cmp.w	$C(a1),d0
0001140C 6400                       		bcc.s	Obj0B_LetGo
0001140E 3340 000C                  		move.w	d0,$C(a1)
00011412                            
00011412                            Obj0B_LetGo:
00011412 1038 F603                  		move.b	($FFFFF603).w,d0
00011416 0240 0070                  		andi.w	#$70,d0
0001141A 6700                       		beq.s	Obj0B_Display
0001141C                            
0001141C                            Obj0B_Release:				; XREF: Obj0B_Action
0001141C 4228 0020                  		clr.b	$20(a0)
00011420 5428 0024                  		addq.b	#2,$24(a0)
00011424 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011428 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001142C 4228 0032                  		clr.b	$32(a0)
00011430 6000                       		bra.s	Obj0B_Display
00011432                            ; ===========================================================================
00011432                            
00011432                            Obj0B_Grab:				; XREF: Obj0B_Action
00011432 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011436 6700                       		beq.s	Obj0B_Display	; if not, branch
00011438 43F8 D000                  		lea	($FFFFD000).w,a1
0001143C 3028 0008                  		move.w	8(a0),d0
00011440 0640 0014                  		addi.w	#$14,d0
00011444 B069 0008                  		cmp.w	8(a1),d0
00011448 6400                       		bcc.s	Obj0B_Display
0001144A 4228 0021                  		clr.b	$21(a0)
0001144E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011454 6400                       		bcc.s	Obj0B_Display
00011456 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0001145A 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
0001145E 3028 0008                  		move.w	8(a0),d0
00011462 0640 0014                  		addi.w	#$14,d0
00011466 3340 0008                  		move.w	d0,8(a1)
0001146A 08A9 0000 0022             		bclr	#0,$22(a1)
00011470 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011476 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001147C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011482 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
00011488                            
00011488                            Obj0B_Display:				; XREF: Obj0B_Index
00011488 6000 E39A                  		bra.w	MarkObjGone
0001148C                            ; ===========================================================================
0001148C                            ; ---------------------------------------------------------------------------
0001148C                            ; Sprite mappings - pole that breaks (LZ)
0001148C                            ; ---------------------------------------------------------------------------
0001148C                            Map_obj0B:
0001148C                            	include "_maps\obj0B.asm"
0001148C                            ; ---------------------------------------------------------------------------
0001148C                            ; Sprite mappings - pole that breaks (LZ)
0001148C                            ; ---------------------------------------------------------------------------
0001148C 0000                       		dc.w byte_11326-Map_obj0B
0001148E 0000                       		dc.w byte_11331-Map_obj0B
00011490 02                         byte_11326:	dc.b 2			; normal pole
00011491 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
00011496 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001149B 04                         byte_11331:	dc.b 4			; broken pole
0001149C E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000114A1 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000114A6 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000114AB 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000114B0                            		even
000114B0                            		even
000114B0                            
000114B0                            ; ===========================================================================
000114B0                            ; ---------------------------------------------------------------------------
000114B0                            ; Object 0C - flapping door (LZ)
000114B0                            ; ---------------------------------------------------------------------------
000114B0                            
000114B0                            Obj0C:					; XREF: Obj_Index
000114B0 7000                       		moveq	#0,d0
000114B2 1028 0024                  		move.b	$24(a0),d0
000114B6 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000114BA 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000114BE                            ; ===========================================================================
000114BE 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000114C0 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000114C2                            ; ===========================================================================
000114C2                            
000114C2                            Obj0C_Main:				; XREF: Obj0C_Index
000114C2 5428 0024                  		addq.b	#2,$24(a0)
000114C6 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000114CE 317C 4328 0002             		move.w	#$4328,2(a0)
000114D4 0028 0004 0001             		ori.b	#4,1(a0)
000114DA 117C 0028 0019             		move.b	#$28,$19(a0)
000114E0 7000                       		moveq	#0,d0
000114E2 1028 0028                  		move.b	$28(a0),d0	; get object type
000114E6 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000114EA 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000114EE                            
000114EE                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000114EE 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000114F2 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000114F4 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000114FA 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011500 4A28 0001                  		tst.b	1(a0)
00011504 6A00                       		bpl.s	Obj0C_Solid
00011506 303C 00BB                  		move.w	#$BB,d0
0001150A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play door sound
00011510                            
00011510                            Obj0C_Solid:
00011510 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011516 6100 92D6                  		bsr.w	AnimateSprite
0001151A 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001151E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011522 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011524 3038 D008                  		move.w	($FFFFD008).w,d0
00011528 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0001152C 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001152E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011534 323C 0013                  		move.w	#$13,d1
00011538 343C 0020                  		move.w	#$20,d2
0001153C 3602                       		move.w	d2,d3
0001153E 5243                       		addq.w	#1,d3
00011540 3828 0008                  		move.w	8(a0),d4
00011544 6100 E606                  		bsr.w	SolidObject	; make the door	solid
00011548                            
00011548                            Obj0C_Display:
00011548 6000 E2DA                  		bra.w	MarkObjGone
0001154C                            ; ===========================================================================
0001154C                            Ani_obj0C:
0001154C                            	include "_anim\obj0C.asm"
0001154C                            ; ---------------------------------------------------------------------------
0001154C                            ; Animation script - flapping door (LZ)
0001154C                            ; ---------------------------------------------------------------------------
0001154C 0000                       		dc.w byte_113E6-Ani_obj0C
0001154E 0000                       		dc.w byte_113EC-Ani_obj0C
00011550 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011556 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001155C                            		even
0001155C                            		even
0001155C                            
0001155C                            ; ---------------------------------------------------------------------------
0001155C                            ; Sprite mappings - flapping door (LZ)
0001155C                            ; ---------------------------------------------------------------------------
0001155C                            Map_obj0C:
0001155C                            	include "_maps\obj0C.asm"
0001155C                            ; ---------------------------------------------------------------------------
0001155C                            ; Sprite mappings - flapping door (LZ)
0001155C                            ; ---------------------------------------------------------------------------
0001155C 0000                       		dc.w byte_113F8-Map_obj0C
0001155E 0000                       		dc.w byte_11403-Map_obj0C
00011560 0000                       		dc.w byte_1140E-Map_obj0C
00011562 02                         byte_113F8:	dc.b 2
00011563 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011568 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001156D 02                         byte_11403:	dc.b 2
0001156E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011573 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011578 02                         byte_1140E:	dc.b 2
00011579 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001157E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00011584 00                         		even
00011584 00                         		even
00011584                            
00011584                            ; ===========================================================================
00011584                            ; ---------------------------------------------------------------------------
00011584                            ; Object 71 - invisible	solid blocks
00011584                            ; ---------------------------------------------------------------------------
00011584                            
00011584                            Obj71:					; XREF: Obj_Index
00011584 7000                       		moveq	#0,d0
00011586 1028 0024                  		move.b	$24(a0),d0
0001158A 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
0001158E 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00011592                            ; ===========================================================================
00011592 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00011594 0000                       		dc.w Obj71_Solid-Obj71_Index
00011596                            ; ===========================================================================
00011596                            
00011596                            Obj71_Main:				; XREF: Obj71_Index
00011596 5428 0024                  		addq.b	#2,$24(a0)
0001159A 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000115A2 317C 8680 0002             		move.w	#$8680,2(a0)
000115A8 0028 0004 0001             		ori.b	#4,1(a0)
000115AE 1028 0028                  		move.b	$28(a0),d0	; get object type
000115B2 1200                       		move.b	d0,d1
000115B4 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000115B8 0640 0010                  		addi.w	#$10,d0
000115BC E248                       		lsr.w	#1,d0
000115BE 1140 0019                  		move.b	d0,$19(a0)	; set object width
000115C2 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000115C6 5241                       		addq.w	#1,d1
000115C8 E749                       		lsl.w	#3,d1
000115CA 1141 0016                  		move.b	d1,$16(a0)	; set object height
000115CE                            
000115CE                            Obj71_Solid:				; XREF: Obj71_Index
000115CE 6100 C426                  		bsr.w	ChkObjOnScreen
000115D2 6600                       		bne.s	Obj71_ChkDel
000115D4 7200                       		moveq	#0,d1
000115D6 1228 0019                  		move.b	$19(a0),d1
000115DA 0641 000B                  		addi.w	#$B,d1
000115DE 7400                       		moveq	#0,d2
000115E0 1428 0016                  		move.b	$16(a0),d2
000115E4 3602                       		move.w	d2,d3
000115E6 5243                       		addq.w	#1,d3
000115E8 3828 0008                  		move.w	8(a0),d4
000115EC 6100 E5A4                  		bsr.w	SolidObject71
000115F0                            
000115F0                            Obj71_ChkDel:
000115F0 3028 0008                  		move.w	8(a0),d0
000115F4 0240 FF80                  		andi.w	#$FF80,d0
000115F8 3238 F700                  		move.w	($FFFFF700).w,d1
000115FC 0441 0080                  		subi.w	#$80,d1
00011600 0241 FF80                  		andi.w	#$FF80,d1
00011604 9041                       		sub.w	d1,d0
00011606 0C40 0280                  		cmpi.w	#$280,d0
0001160A 6200                       		bhi.s	Obj71_Delete
0001160C 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011610 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011612 4EFA C168                  		jmp	DisplaySprite	; if yes, display the object
00011616                            ; ===========================================================================
00011616                            
00011616                            Obj71_NoDisplay:
00011616 4E75                       		rts	
00011618                            ; ===========================================================================
00011618                            
00011618                            Obj71_Delete:
00011618 4EFA C19E                  		jmp	DeleteObject
0001161C                            ; ===========================================================================
0001161C                            ; ---------------------------------------------------------------------------
0001161C                            ; Sprite mappings - invisible solid blocks
0001161C                            ; ---------------------------------------------------------------------------
0001161C                            Map_obj71:
0001161C                            	include "_maps\obj71.asm"
0001161C                            ; ---------------------------------------------------------------------------
0001161C                            ; Sprite mappings - invisible solid blocks
0001161C                            ; ---------------------------------------------------------------------------
0001161C 0000                       		dc.w byte_114BC-Map_obj71
0001161E 0000                       		dc.w byte_114D1-Map_obj71
00011620 0000                       		dc.w byte_114E6-Map_obj71
00011622 04                         byte_114BC:	dc.b 4
00011623 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011628 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
0001162D 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011632 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011637 04                         byte_114D1:	dc.b 4
00011638 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
0001163D E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011642 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011647 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001164C 04                         byte_114E6:	dc.b 4
0001164D E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011652 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011657 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001165C 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011662 00                         		even
00011662 00                         		even
00011662                            
00011662                            ; ===========================================================================
00011662                            ; ---------------------------------------------------------------------------
00011662                            ; Object 5D - fans (SLZ)
00011662                            ; ---------------------------------------------------------------------------
00011662                            
00011662                            Obj5D:					; XREF: Obj_Index
00011662 7000                       		moveq	#0,d0
00011664 1028 0024                  		move.b	$24(a0),d0
00011668 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001166C 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011670                            ; ===========================================================================
00011670 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011672 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011674                            ; ===========================================================================
00011674                            
00011674                            Obj5D_Main:				; XREF: Obj5D_Index
00011674 5428 0024                  		addq.b	#2,$24(a0)
00011678 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00011680 317C 43A0 0002             		move.w	#$43A0,2(a0)
00011686 0028 0004 0001             		ori.b	#4,1(a0)
0001168C 117C 0010 0019             		move.b	#$10,$19(a0)
00011692 117C 0004 0018             		move.b	#4,$18(a0)
00011698                            
00011698                            Obj5D_Delay:				; XREF: Obj5D_Index
00011698 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
0001169E 6600                       		bne.s	Obj5D_Blow	; if yes, branch
000116A0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000116A4 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
000116A6 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
000116AC 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
000116B2 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
000116B4 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
000116BA                            
000116BA                            Obj5D_Blow:
000116BA 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000116BE 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000116C2 43F8 D000                  		lea	($FFFFD000).w,a1
000116C6 3029 0008                  		move.w	8(a1),d0
000116CA 9068 0008                  		sub.w	8(a0),d0
000116CE 0828 0000 0022             		btst	#0,$22(a0)
000116D4 6600                       		bne.s	Obj5D_ChkSonic
000116D6 4440                       		neg.w	d0
000116D8                            
000116D8                            Obj5D_ChkSonic:
000116D8 0640 0050                  		addi.w	#$50,d0
000116DC 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000116E0 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000116E2 3229 000C                  		move.w	$C(a1),d1
000116E6 0641 0060                  		addi.w	#$60,d1
000116EA 9268 000C                  		sub.w	$C(a0),d1
000116EE 6500                       		bcs.s	Obj5D_Animate
000116F0 0C41 0070                  		cmpi.w	#$70,d1
000116F4 6400                       		bcc.s	Obj5D_Animate
000116F6 0440 0050                  		subi.w	#$50,d0
000116FA 6400                       		bcc.s	loc_1159A
000116FC 4640                       		not.w	d0
000116FE D040                       		add.w	d0,d0
00011700                            
00011700                            loc_1159A:
00011700 0640 0060                  		addi.w	#$60,d0
00011704 0828 0000 0022             		btst	#0,$22(a0)
0001170A 6600                       		bne.s	loc_115A8
0001170C 4440                       		neg.w	d0
0001170E                            
0001170E                            loc_115A8:
0001170E 4400                       		neg.b	d0
00011710 E840                       		asr.w	#4,d0
00011712 0828 0000 0028             		btst	#0,$28(a0)
00011718 6700                       		beq.s	Obj5D_MoveSonic
0001171A 4440                       		neg.w	d0
0001171C                            
0001171C                            Obj5D_MoveSonic:
0001171C D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011720                            
00011720                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011720 5328 001E                  		subq.b	#1,$1E(a0)
00011724 6A00                       		bpl.s	Obj5D_ChkDel
00011726 117C 0000 001E             		move.b	#0,$1E(a0)
0001172C 5228 001B                  		addq.b	#1,$1B(a0)
00011730 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011736 6500                       		bcs.s	loc_115D8
00011738 117C 0000 001B             		move.b	#0,$1B(a0)
0001173E                            
0001173E                            loc_115D8:
0001173E 7000                       		moveq	#0,d0
00011740 0828 0000 0028             		btst	#0,$28(a0)
00011746 6700                       		beq.s	loc_115E4
00011748 7002                       		moveq	#2,d0
0001174A                            
0001174A                            loc_115E4:
0001174A D028 001B                  		add.b	$1B(a0),d0
0001174E 1140 001A                  		move.b	d0,$1A(a0)
00011752                            
00011752                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011752 6100 C028                  		bsr.w	DisplaySprite
00011756 3028 0008                  		move.w	8(a0),d0
0001175A 0240 FF80                  		andi.w	#$FF80,d0
0001175E 3238 F700                  		move.w	($FFFFF700).w,d1
00011762 0441 0080                  		subi.w	#$80,d1
00011766 0241 FF80                  		andi.w	#$FF80,d1
0001176A 9041                       		sub.w	d1,d0
0001176C 0C40 0280                  		cmpi.w	#$280,d0
00011770 6200 C046                  		bhi.w	DeleteObject
00011774 4E75                       		rts	
00011776                            ; ===========================================================================
00011776                            ; ---------------------------------------------------------------------------
00011776                            ; Sprite mappings - fans (SLZ)
00011776                            ; ---------------------------------------------------------------------------
00011776                            Map_obj5D:
00011776                            	include "_maps\obj5D.asm"
00011776                            ; ---------------------------------------------------------------------------
00011776                            ; Sprite mappings - fans (SLZ)
00011776                            ; ---------------------------------------------------------------------------
00011776 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001177A 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001177E 0000                       		dc.w byte_1161A-Map_obj5D
00011780 02                         byte_1161A:	dc.b 2
00011781 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
00011786 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001178B 02                         byte_11625:	dc.b 2
0001178C F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00011791 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
00011796 02                         byte_11630:	dc.b 2
00011797 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
0001179C 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000117A2 00                         		even
000117A2 00                         		even
000117A2                            
000117A2                            ; ===========================================================================
000117A2                            ; ---------------------------------------------------------------------------
000117A2                            ; Object 5E - seesaws (SLZ)
000117A2                            ; ---------------------------------------------------------------------------
000117A2                            
000117A2                            Obj5E:					; XREF: Obj_Index
000117A2 7000                       		moveq	#0,d0
000117A4 1028 0024                  		move.b	$24(a0),d0
000117A8 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
000117AC 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
000117B0 3028 0030                  		move.w	$30(a0),d0
000117B4 0240 FF80                  		andi.w	#$FF80,d0
000117B8 3238 F700                  		move.w	($FFFFF700).w,d1
000117BC 0441 0080                  		subi.w	#$80,d1
000117C0 0241 FF80                  		andi.w	#$FF80,d1
000117C4 9041                       		sub.w	d1,d0
000117C6 6B00 BFF0                  		bmi.w	DeleteObject
000117CA 0C40 0280                  		cmpi.w	#$280,d0
000117CE 6200 BFE8                  		bhi.w	DeleteObject
000117D2 6000 BFA8                  		bra.w	DisplaySprite
000117D6                            ; ===========================================================================
000117D6 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000117D8 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000117DA 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000117DC 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000117DE 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000117E0 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000117E2                            ; ===========================================================================
000117E2                            
000117E2                            Obj5E_Main:				; XREF: Obj5E_Index
000117E2 5428 0024                  		addq.b	#2,$24(a0)
000117E6 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000117EE 317C 0374 0002             		move.w	#$374,2(a0)
000117F4 0028 0004 0001             		ori.b	#4,1(a0)
000117FA 117C 0004 0018             		move.b	#4,$18(a0)
00011800 117C 0030 0019             		move.b	#$30,$19(a0)
00011806 3168 0008 0030             		move.w	8(a0),$30(a0)
0001180C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011810 6600                       		bne.s	loc_116D2	; if not, branch
00011812 6100 C404                  		bsr.w	SingleObjLoad2
00011816 6600                       		bne.s	loc_116D2
00011818 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
0001181C 5C29 0024                  		addq.b	#6,$24(a1)
00011820 3368 0008 0008             		move.w	8(a0),8(a1)
00011826 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001182C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011832 2348 003C                  		move.l	a0,$3C(a1)
00011836                            
00011836                            loc_116D2:
00011836 0828 0000 0022             		btst	#0,$22(a0)
0001183C 6700                       		beq.s	loc_116E0
0001183E 117C 0002 001A             		move.b	#2,$1A(a0)
00011844                            
00011844                            loc_116E0:
00011844 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001184A                            
0001184A                            Obj5E_Slope:				; XREF: Obj5E_Index
0001184A 1228 003A                  		move.b	$3A(a0),d1
0001184E 6100 0000                  		bsr.w	loc_11766
00011852 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011858 0828 0000 001A             		btst	#0,$1A(a0)
0001185E 6700                       		beq.s	loc_11702
00011860 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011866                            
00011866                            loc_11702:
00011866 43F8 D000                  		lea	($FFFFD000).w,a1
0001186A 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011870 323C 0030                  		move.w	#$30,d1
00011874 4EB9 0000 7626             		jsr	(SlopeObject).l
0001187A 4E75                       		rts	
0001187C                            ; ===========================================================================
0001187C                            
0001187C                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001187C 6100 0000                  		bsr.w	loc_1174A
00011880 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011886 0828 0000 001A             		btst	#0,$1A(a0)
0001188C 6700                       		beq.s	loc_11730
0001188E 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011894                            
00011894                            loc_11730:
00011894 323C 0030                  		move.w	#$30,d1
00011898 4EB9 0000 76C6             		jsr	(ExitPlatform).l
0001189E 323C 0030                  		move.w	#$30,d1
000118A2 3428 0008                  		move.w	8(a0),d2
000118A6 4EB9 0000 8624             		jsr	SlopeObject2
000118AC 4E75                       		rts	
000118AE                            ; ===========================================================================
000118AE                            
000118AE                            loc_1174A:				; XREF: Obj5E_Slope2
000118AE 7202                       		moveq	#2,d1
000118B0 43F8 D000                  		lea	($FFFFD000).w,a1
000118B4 3028 0008                  		move.w	8(a0),d0
000118B8 9069 0008                  		sub.w	8(a1),d0
000118BC 6400                       		bcc.s	loc_1175E
000118BE 4440                       		neg.w	d0
000118C0 7200                       		moveq	#0,d1
000118C2                            
000118C2                            loc_1175E:
000118C2 0C40 0008                  		cmpi.w	#8,d0
000118C6 6400                       		bcc.s	loc_11766
000118C8 7201                       		moveq	#1,d1
000118CA                            
000118CA                            loc_11766:
000118CA 1028 001A                  		move.b	$1A(a0),d0
000118CE B001                       		cmp.b	d1,d0
000118D0 6700                       		beq.s	locret_11790
000118D2 6400                       		bcc.s	loc_11772
000118D4 5400                       		addq.b	#2,d0
000118D6                            
000118D6                            loc_11772:
000118D6 5300                       		subq.b	#1,d0
000118D8 1140 001A                  		move.b	d0,$1A(a0)
000118DC 1141 003A                  		move.b	d1,$3A(a0)
000118E0 08A8 0000 0001             		bclr	#0,1(a0)
000118E6 0828 0001 001A             		btst	#1,$1A(a0)
000118EC 6700                       		beq.s	locret_11790
000118EE 08E8 0000 0001             		bset	#0,1(a0)
000118F4                            
000118F4                            locret_11790:
000118F4 4E75                       		rts	
000118F6                            ; ===========================================================================
000118F6                            
000118F6                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000118F6 5428 0024                  		addq.b	#2,$24(a0)
000118FA 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011902 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011908 0028 0004 0001             		ori.b	#4,1(a0)
0001190E 117C 0004 0018             		move.b	#4,$18(a0)
00011914 117C 008B 0020             		move.b	#$8B,$20(a0)
0001191A 117C 000C 0019             		move.b	#$C,$19(a0)
00011920 3168 0008 0030             		move.w	8(a0),$30(a0)
00011926 0668 0028 0008             		addi.w	#$28,8(a0)
0001192C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011932 117C 0001 001A             		move.b	#1,$1A(a0)
00011938 0828 0000 0022             		btst	#0,$22(a0)
0001193E 6700                       		beq.s	Obj5E_MoveSpike
00011940 0468 0050 0008             		subi.w	#$50,8(a0)
00011946 117C 0002 003A             		move.b	#2,$3A(a0)
0001194C                            
0001194C                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001194C 2268 003C                  		movea.l	$3C(a0),a1
00011950 7000                       		moveq	#0,d0
00011952 1028 003A                  		move.b	$3A(a0),d0
00011956 9029 003A                  		sub.b	$3A(a1),d0
0001195A 6700                       		beq.s	loc_1183E
0001195C 6400                       		bcc.s	loc_117FC
0001195E 4400                       		neg.b	d0
00011960                            
00011960                            loc_117FC:
00011960 323C F7E8                  		move.w	#-$818,d1
00011964 343C FEEC                  		move.w	#-$114,d2
00011968 0C00 0001                  		cmpi.b	#1,d0
0001196C 6700                       		beq.s	loc_11822
0001196E 323C F510                  		move.w	#-$AF0,d1
00011972 343C FF34                  		move.w	#-$CC,d2
00011976 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001197C 6D00                       		blt.s	loc_11822
0001197E 323C F200                  		move.w	#-$E00,d1
00011982 343C FF60                  		move.w	#-$A0,d2
00011986                            
00011986                            loc_11822:
00011986 3141 0012                  		move.w	d1,$12(a0)
0001198A 3142 0010                  		move.w	d2,$10(a0)
0001198E 3028 0008                  		move.w	8(a0),d0
00011992 9068 0030                  		sub.w	$30(a0),d0
00011996 6400                       		bcc.s	loc_11838
00011998 4468 0010                  		neg.w	$10(a0)
0001199C                            
0001199C                            loc_11838:
0001199C 5428 0024                  		addq.b	#2,$24(a0)
000119A0 6000                       		bra.s	Obj5E_SpikeFall
000119A2                            ; ===========================================================================
000119A2                            
000119A2                            loc_1183E:				; XREF: Obj5E_MoveSpike
000119A2 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000119A8 7000                       		moveq	#0,d0
000119AA 1029 001A                  		move.b	$1A(a1),d0
000119AE 343C 0028                  		move.w	#$28,d2
000119B2 3228 0008                  		move.w	8(a0),d1
000119B6 9268 0030                  		sub.w	$30(a0),d1
000119BA 6400                       		bcc.s	loc_1185C
000119BC 4442                       		neg.w	d2
000119BE 5440                       		addq.w	#2,d0
000119C0                            
000119C0                            loc_1185C:
000119C0 D040                       		add.w	d0,d0
000119C2 3228 0034                  		move.w	$34(a0),d1
000119C6 D272 0000                  		add.w	(a2,d0.w),d1
000119CA 3141 000C                  		move.w	d1,$C(a0)
000119CE D468 0030                  		add.w	$30(a0),d2
000119D2 3142 0008                  		move.w	d2,8(a0)
000119D6 4268 000E                  		clr.w	$E(a0)
000119DA 4268 000A                  		clr.w	$A(a0)
000119DE 4E75                       		rts	
000119E0                            ; ===========================================================================
000119E0                            
000119E0                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000119E0 4A68 0012                  		tst.w	$12(a0)
000119E4 6A00                       		bpl.s	loc_1189A
000119E6 6100 BD42                  		bsr.w	ObjectFall
000119EA 3028 0034                  		move.w	$34(a0),d0
000119EE 0440 002F                  		subi.w	#$2F,d0
000119F2 B068 000C                  		cmp.w	$C(a0),d0
000119F6 6E00                       		bgt.s	locret_11898
000119F8 6100 BD30                  		bsr.w	ObjectFall
000119FC                            
000119FC                            locret_11898:
000119FC 4E75                       		rts	
000119FE                            ; ===========================================================================
000119FE                            
000119FE                            loc_1189A:				; XREF: Obj5E_SpikeFall
000119FE 6100 BD2A                  		bsr.w	ObjectFall
00011A02 2268 003C                  		movea.l	$3C(a0),a1
00011A06 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
00011A0C 7000                       		moveq	#0,d0
00011A0E 1029 001A                  		move.b	$1A(a1),d0
00011A12 3228 0008                  		move.w	8(a0),d1
00011A16 9268 0030                  		sub.w	$30(a0),d1
00011A1A 6400                       		bcc.s	loc_118BA
00011A1C 5440                       		addq.w	#2,d0
00011A1E                            
00011A1E                            loc_118BA:
00011A1E D040                       		add.w	d0,d0
00011A20 3228 0034                  		move.w	$34(a0),d1
00011A24 D272 0000                  		add.w	(a2,d0.w),d1
00011A28 B268 000C                  		cmp.w	$C(a0),d1
00011A2C 6E00                       		bgt.s	locret_11938
00011A2E 2268 003C                  		movea.l	$3C(a0),a1
00011A32 7202                       		moveq	#2,d1
00011A34 4A68 0010                  		tst.w	$10(a0)
00011A38 6B00                       		bmi.s	Obj5E_Spring
00011A3A 7200                       		moveq	#0,d1
00011A3C                            
00011A3C                            Obj5E_Spring:
00011A3C 1341 003A                  		move.b	d1,$3A(a1)
00011A40 1141 003A                  		move.b	d1,$3A(a0)
00011A44 B229 001A                  		cmp.b	$1A(a1),d1
00011A48 6700                       		beq.s	loc_1192C
00011A4A 08A9 0003 0022             		bclr	#3,$22(a1)
00011A50 6700                       		beq.s	loc_1192C
00011A52 4229 0025                  		clr.b	$25(a1)
00011A56 137C 0002 0024             		move.b	#2,$24(a1)
00011A5C 45F8 D000                  		lea	($FFFFD000).w,a2
00011A60 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011A66 446A 0012                  		neg.w	$12(a2)
00011A6A 08EA 0001 0022             		bset	#1,$22(a2)
00011A70 08AA 0003 0022             		bclr	#3,$22(a2)
00011A76 422A 003C                  		clr.b	$3C(a2)
00011A7A 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00011A80 157C 0002 0024             		move.b	#2,$24(a2)
00011A86 303C 00CC                  		move.w	#$CC,d0
00011A8A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
00011A90                            
00011A90                            loc_1192C:
00011A90 4268 0010                  		clr.w	$10(a0)
00011A94 4268 0012                  		clr.w	$12(a0)
00011A98 5528 0024                  		subq.b	#2,$24(a0)
00011A9C                            
00011A9C                            locret_11938:
00011A9C 4E75                       		rts	
00011A9E                            ; ===========================================================================
00011A9E FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00011AA8                            
00011AA8                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00011AD8                            		even
00011AD8                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011B08                            		even
00011B08                            ; ---------------------------------------------------------------------------
00011B08                            ; Sprite mappings - seesaws (SLZ)
00011B08                            ; ---------------------------------------------------------------------------
00011B08                            Map_obj5E:
00011B08                            	include "_maps\obj5E.asm"
00011B08                            ; ---------------------------------------------------------------------------
00011B08                            ; Sprite mappings - seesaws (SLZ)
00011B08                            ; ---------------------------------------------------------------------------
00011B08 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011B0C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011B10 07                         byte_119AC:	dc.b 7
00011B11 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011B16 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00011B1B E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011B20 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011B25 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00011B2A F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00011B2F FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011B34 04                         byte_119D0:	dc.b 4
00011B35 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00011B3A E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00011B3F E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011B44 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00011B4A 00                         		even
00011B4A 00                         		even
00011B4A                            
00011B4A                            ; ---------------------------------------------------------------------------
00011B4A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011B4A                            ; ---------------------------------------------------------------------------
00011B4A                            Map_obj5Ea:
00011B4A                            	include "_maps\obj5Eballs.asm"
00011B4A                            ; ---------------------------------------------------------------------------
00011B4A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00011B4A                            ; ---------------------------------------------------------------------------
00011B4A 0000                       		dc.w byte_119EA-Map_obj5Ea
00011B4C 0000                       		dc.w byte_119F0-Map_obj5Ea
00011B4E 01                         byte_119EA:	dc.b 1
00011B4F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011B54 01                         byte_119F0:	dc.b 1
00011B55 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00011B5A                            		even
00011B5A                            		even
00011B5A                            
00011B5A                            ; ===========================================================================
00011B5A                            ; ---------------------------------------------------------------------------
00011B5A                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00011B5A                            ; ---------------------------------------------------------------------------
00011B5A                            
00011B5A                            Obj5F:					; XREF: Obj_Index
00011B5A 7000                       		moveq	#0,d0
00011B5C 1028 0024                  		move.b	$24(a0),d0
00011B60 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011B64 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011B68                            ; ===========================================================================
00011B68 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00011B6A 0000                       		dc.w Obj5F_Action-Obj5F_Index
00011B6C 0000                       		dc.w Obj5F_Display-Obj5F_Index
00011B6E 0000                       		dc.w Obj5F_End-Obj5F_Index
00011B70                            ; ===========================================================================
00011B70                            
00011B70                            Obj5F_Main:				; XREF: Obj5F_Index
00011B70 5428 0024                  		addq.b	#2,$24(a0)
00011B74 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00011B7C 317C 0400 0002             		move.w	#$400,2(a0)
00011B82 0028 0004 0001             		ori.b	#4,1(a0)
00011B88 117C 0003 0018             		move.b	#3,$18(a0)
00011B8E 117C 000C 0019             		move.b	#$C,$19(a0)
00011B94 1028 0028                  		move.b	$28(a0),d0
00011B98 6700                       		beq.s	loc_11A3C
00011B9A 1140 0024                  		move.b	d0,$24(a0)
00011B9E 4E75                       		rts	
00011BA0                            ; ===========================================================================
00011BA0                            
00011BA0                            loc_11A3C:
00011BA0 117C 009A 0020             		move.b	#$9A,$20(a0)
00011BA6 0868 0000 0022             		bchg	#0,$22(a0)
00011BAC                            
00011BAC                            Obj5F_Action:				; XREF: Obj5F_Index
00011BAC 7000                       		moveq	#0,d0
00011BAE 1028 0025                  		move.b	$25(a0),d0
00011BB2 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00011BB6 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00011BBA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011BC0 6100 8C2C                  		bsr.w	AnimateSprite
00011BC4 6000 DC5E                  		bra.w	MarkObjGone
00011BC8                            ; ===========================================================================
00011BC8 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00011BCA 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00011BCC 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00011BCE                            ; ===========================================================================
00011BCE                            
00011BCE                            Obj5F_Walk:				; XREF: Obj5F_Index2
00011BCE 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011BD2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011BD6 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00011BD8 5428 0025                  		addq.b	#2,$25(a0)
00011BDC 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011BE2 317C 0010 0010             		move.w	#$10,$10(a0)
00011BE8 117C 0001 001C             		move.b	#1,$1C(a0)
00011BEE 0868 0000 0022             		bchg	#0,$22(a0)
00011BF4 6700                       		beq.s	locret_11A96
00011BF6 4468 0010                  		neg.w	$10(a0)		; change direction
00011BFA                            
00011BFA                            locret_11A96:
00011BFA 4E75                       		rts	
00011BFC                            ; ===========================================================================
00011BFC                            
00011BFC                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011BFC 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011C00 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011C04 6B00                       		bmi.s	loc_11AA8
00011C06 6100 BB4E                  		bsr.w	SpeedToPos
00011C0A 4E75                       		rts	
00011C0C                            ; ===========================================================================
00011C0C                            
00011C0C                            loc_11AA8:
00011C0C 5528 0025                  		subq.b	#2,$25(a0)
00011C10 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011C16 4268 0010                  		clr.w	$10(a0)		; stop walking
00011C1A 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00011C20 4E75                       		rts	
00011C22                            ; ===========================================================================
00011C22                            
00011C22                            Obj5F_Explode:				; XREF: Obj5F_Index2
00011C22 5368 0030                  		subq.w	#1,$30(a0)
00011C26 6A00                       		bpl.s	locret_11AD0
00011C28 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00011C2C 117C 0000 0024             		move.b	#0,$24(a0)
00011C32                            
00011C32                            locret_11AD0:
00011C32 4E75                       		rts	
00011C34                            ; ===========================================================================
00011C34                            
00011C34                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00011C34 3038 D008                  		move.w	($FFFFD008).w,d0
00011C38 9068 0008                  		sub.w	8(a0),d0
00011C3C 6400                       		bcc.s	loc_11ADE
00011C3E 4440                       		neg.w	d0
00011C40                            
00011C40                            loc_11ADE:
00011C40 0C40 0060                  		cmpi.w	#$60,d0
00011C44 6400                       		bcc.s	locret_11B5E
00011C46 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011C4A 9068 000C                  		sub.w	$C(a0),d0
00011C4E 6400                       		bcc.s	Obj5F_MakeFuse
00011C50 4440                       		neg.w	d0
00011C52                            
00011C52                            Obj5F_MakeFuse:
00011C52 0C40 0060                  		cmpi.w	#$60,d0
00011C56 6400                       		bcc.s	locret_11B5E
00011C58 4A78 FE08                  		tst.w	($FFFFFE08).w
00011C5C 6600                       		bne.s	locret_11B5E
00011C5E 117C 0004 0025             		move.b	#4,$25(a0)
00011C64 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00011C6A 4268 0010                  		clr.w	$10(a0)
00011C6E 117C 0002 001C             		move.b	#2,$1C(a0)
00011C74 6100 BFA2                  		bsr.w	SingleObjLoad2
00011C78 6600                       		bne.s	locret_11B5E
00011C7A 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00011C7E 3368 0008 0008             		move.w	8(a0),8(a1)
00011C84 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011C8A 3368 000C 0034             		move.w	$C(a0),$34(a1)
00011C90 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011C96 137C 0004 0028             		move.b	#4,$28(a1)
00011C9C 137C 0003 001C             		move.b	#3,$1C(a1)
00011CA2 337C 0010 0012             		move.w	#$10,$12(a1)
00011CA8 0828 0001 0022             		btst	#1,$22(a0)
00011CAE 6700                       		beq.s	loc_11B54
00011CB0 4469 0012                  		neg.w	$12(a1)
00011CB4                            
00011CB4                            loc_11B54:
00011CB4 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00011CBA 2348 003C                  		move.l	a0,$3C(a1)
00011CBE                            
00011CBE                            locret_11B5E:
00011CBE 4E75                       		rts	
00011CC0                            ; ===========================================================================
00011CC0                            
00011CC0                            Obj5F_Display:				; XREF: Obj5F_Index
00011CC0 6100                       		bsr.s	loc_11B70
00011CC2 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011CC8 6100 8B24                  		bsr.w	AnimateSprite
00011CCC 6000 DB56                  		bra.w	MarkObjGone
00011CD0                            ; ===========================================================================
00011CD0                            
00011CD0                            loc_11B70:
00011CD0 5368 0030                  		subq.w	#1,$30(a0)
00011CD4 6B00                       		bmi.s	loc_11B7C
00011CD6 6100 BA7E                  		bsr.w	SpeedToPos
00011CDA 4E75                       		rts	
00011CDC                            ; ===========================================================================
00011CDC                            
00011CDC                            loc_11B7C:
00011CDC 4268 0030                  		clr.w	$30(a0)
00011CE0 4228 0024                  		clr.b	$24(a0)
00011CE4 3168 0034 000C             		move.w	$34(a0),$C(a0)
00011CEA 7203                       		moveq	#3,d1
00011CEC 2248                       		movea.l	a0,a1
00011CEE 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00011CF4 6000                       		bra.s	Obj5F_MakeShrap
00011CF6                            ; ===========================================================================
00011CF6                            
00011CF6                            Obj5F_Loop:
00011CF6 6100 BF20                  		bsr.w	SingleObjLoad2
00011CFA 6600                       		bne.s	loc_11BCE
00011CFC                            
00011CFC                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00011CFC 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00011D00 3368 0008 0008             		move.w	8(a0),8(a1)
00011D06 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011D0C 137C 0006 0028             		move.b	#6,$28(a1)
00011D12 137C 0004 001C             		move.b	#4,$1C(a1)
00011D18 335A 0010                  		move.w	(a2)+,$10(a1)
00011D1C 335A 0012                  		move.w	(a2)+,$12(a1)
00011D20 137C 0098 0020             		move.b	#$98,$20(a1)
00011D26 08E9 0007 0001             		bset	#7,1(a1)
00011D2C                            
00011D2C                            loc_11BCE:
00011D2C 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00011D30                            
00011D30 117C 0006 0024             		move.b	#6,$24(a0)
00011D36                            
00011D36                            Obj5F_End:				; XREF: Obj5F_Index
00011D36 6100 BA1E                  		bsr.w	SpeedToPos
00011D3A 0668 0018 0012             		addi.w	#$18,$12(a0)
00011D40 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011D46 6100 8AA6                  		bsr.w	AnimateSprite
00011D4A 4A28 0001                  		tst.b	1(a0)
00011D4E 6A00 BA68                  		bpl.w	DeleteObject
00011D52 6000 BA28                  		bra.w	DisplaySprite
00011D56                            ; ===========================================================================
00011D56 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00011D66                            
00011D66                            Ani_obj5F:
00011D66                            	include "_anim\obj5F.asm"
00011D66                            ; ---------------------------------------------------------------------------
00011D66                            ; Animation script - Bomb enemy
00011D66                            ; ---------------------------------------------------------------------------
00011D66 0000                       		dc.w byte_11C12-Ani_obj5F
00011D68 0000                       		dc.w byte_11C16-Ani_obj5F
00011D6A 0000                       		dc.w byte_11C1C-Ani_obj5F
00011D6C 0000                       		dc.w byte_11C20-Ani_obj5F
00011D6E 0000                       		dc.w byte_11C24-Ani_obj5F
00011D70 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00011D74 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00011D7A 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00011D7E 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00011D82 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00011D86                            		even
00011D86                            		even
00011D86                            
00011D86                            ; ---------------------------------------------------------------------------
00011D86                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011D86                            ; ---------------------------------------------------------------------------
00011D86                            Map_obj5F:
00011D86                            	include "_maps\obj5F.asm"
00011D86                            ; ---------------------------------------------------------------------------
00011D86                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011D86                            ; ---------------------------------------------------------------------------
00011D86 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00011D8A 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00011D8E 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00011D92 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00011D96 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00011D9A 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00011D9E 03                         byte_11C40:	dc.b 3
00011D9F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011DA4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011DA9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011DAE 03                         byte_11C50:	dc.b 3
00011DAF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011DB4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011DB9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011DBE 03                         byte_11C60:	dc.b 3
00011DBF F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011DC4 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00011DC9 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011DCE 03                         byte_11C70:	dc.b 3
00011DCF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011DD4 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00011DD9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011DDE 03                         byte_11C80:	dc.b 3
00011DDF F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011DE4 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00011DE9 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011DEE 03                         byte_11C90:	dc.b 3
00011DEF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011DF4 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00011DF9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011DFE 02                         byte_11CA0:	dc.b 2
00011DFF F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011E04 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011E09 02                         byte_11CAB:	dc.b 2
00011E0A F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011E0F 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011E14 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00011E15 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00011E1A 01                         byte_11CBC:	dc.b 1			; fuse
00011E1B E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00011E20 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00011E21 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00011E26 01                         byte_11CC8:	dc.b 1			; fireball
00011E27 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00011E2C                            		even
00011E2C                            		even
00011E2C                            
00011E2C                            ; ===========================================================================
00011E2C                            ; ---------------------------------------------------------------------------
00011E2C                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00011E2C                            ; ---------------------------------------------------------------------------
00011E2C                            
00011E2C                            Obj60:					; XREF: Obj_Index
00011E2C 7000                       		moveq	#0,d0
00011E2E 1028 0024                  		move.b	$24(a0),d0
00011E32 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00011E36 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00011E3A                            ; ===========================================================================
00011E3A 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00011E3C 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00011E3E 0000                       		dc.w Obj60_Display-Obj60_Index
00011E40 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00011E42 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00011E44                            ; ===========================================================================
00011E44                            
00011E44                            Obj60_Main:				; XREF: Obj60_Index
00011E44 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00011E4C 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00011E52 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011E58 6700                       		beq.s	loc_11D02
00011E5A 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00011E60                            
00011E60                            loc_11D02:
00011E60 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011E66 6600                       		bne.s	loc_11D10
00011E68 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00011E6E                            
00011E6E                            loc_11D10:
00011E6E 0028 0004 0001             		ori.b	#4,1(a0)
00011E74 117C 0004 0018             		move.b	#4,$18(a0)
00011E7A 117C 000B 0020             		move.b	#$B,$20(a0)
00011E80 117C 000C 0019             		move.b	#$C,$19(a0)
00011E86 7400                       		moveq	#0,d2
00011E88 45E8 0037                  		lea	$37(a0),a2
00011E8C 264A                       		movea.l	a2,a3
00011E8E 524A                       		addq.w	#1,a2
00011E90 7203                       		moveq	#3,d1
00011E92                            
00011E92                            Obj60_MakeOrbs:
00011E92 6100 BD84                  		bsr.w	SingleObjLoad2
00011E96 6600                       		bne.s	loc_11D90
00011E98 5213                       		addq.b	#1,(a3)
00011E9A 3A09                       		move.w	a1,d5
00011E9C 0445 D000                  		subi.w	#-$3000,d5
00011EA0 EC4D                       		lsr.w	#6,d5
00011EA2 0245 007F                  		andi.w	#$7F,d5
00011EA6 14C5                       		move.b	d5,(a2)+
00011EA8 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00011EAA 137C 0006 0024             		move.b	#6,$24(a1)
00011EB0 2368 0004 0004             		move.l	4(a0),4(a1)
00011EB6 3368 0002 0002             		move.w	2(a0),2(a1)
00011EBC 0029 0004 0001             		ori.b	#4,1(a1)
00011EC2 137C 0004 0018             		move.b	#4,$18(a1)
00011EC8 137C 0008 0019             		move.b	#8,$19(a1)
00011ECE 137C 0003 001A             		move.b	#3,$1A(a1)
00011ED4 137C 0098 0020             		move.b	#$98,$20(a1)
00011EDA 1342 0026                  		move.b	d2,$26(a1)
00011EDE 0602 0040                  		addi.b	#$40,d2
00011EE2 2348 003C                  		move.l	a0,$3C(a1)
00011EE6 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00011EEA                            
00011EEA                            loc_11D90:
00011EEA 7001                       		moveq	#1,d0
00011EEC 0828 0000 0022             		btst	#0,$22(a0)
00011EF2 6700                       		beq.s	Obj60_Move
00011EF4 4440                       		neg.w	d0
00011EF6                            
00011EF6                            Obj60_Move:
00011EF6 1140 0036                  		move.b	d0,$36(a0)
00011EFA 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00011F00 5428 0024                  		addq.b	#2,$24(a0)
00011F04 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00011F0A 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00011F10 6700                       		beq.s	locret_11DBC	; if not, branch
00011F12 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00011F16                            
00011F16                            locret_11DBC:
00011F16 4E75                       		rts	
00011F18                            ; ===========================================================================
00011F18                            
00011F18                            Obj60_ChkSonic:				; XREF: Obj60_Index
00011F18 3038 D008                  		move.w	($FFFFD008).w,d0
00011F1C 9068 0008                  		sub.w	8(a0),d0
00011F20 6400                       		bcc.s	loc_11DCA
00011F22 4440                       		neg.w	d0
00011F24                            
00011F24                            loc_11DCA:
00011F24 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00011F28 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011F2A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011F2E 9068 000C                  		sub.w	$C(a0),d0
00011F32 6400                       		bcc.s	loc_11DDC
00011F34 4440                       		neg.w	d0
00011F36                            
00011F36                            loc_11DDC:
00011F36 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00011F3A 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011F3C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011F40 6600                       		bne.s	Obj60_Animate	; if yes, branch
00011F42 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00011F48                            
00011F48                            Obj60_Animate:
00011F48 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00011F4E 6100 889E                  		bsr.w	AnimateSprite
00011F52 6000 0000                  		bra.w	Obj60_ChkDel
00011F56                            ; ===========================================================================
00011F56                            
00011F56                            Obj60_Display:				; XREF: Obj60_Index
00011F56 6100 B7FE                  		bsr.w	SpeedToPos
00011F5A                            
00011F5A                            Obj60_ChkDel:				; XREF: Obj60_Animate
00011F5A 3028 0008                  		move.w	8(a0),d0
00011F5E 0240 FF80                  		andi.w	#$FF80,d0
00011F62 3238 F700                  		move.w	($FFFFF700).w,d1
00011F66 0441 0080                  		subi.w	#$80,d1
00011F6A 0241 FF80                  		andi.w	#$FF80,d1
00011F6E 9041                       		sub.w	d1,d0
00011F70 0C40 0280                  		cmpi.w	#$280,d0
00011F74 6200 0000                  		bhi.w	Obj60_ChkGone
00011F78 6000 B802                  		bra.w	DisplaySprite
00011F7C                            ; ===========================================================================
00011F7C                            
00011F7C                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00011F7C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011F80 7000                       		moveq	#0,d0
00011F82 1028 0023                  		move.b	$23(a0),d0
00011F86 6700                       		beq.s	loc_11E34
00011F88 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011F8E                            
00011F8E                            loc_11E34:
00011F8E 45E8 0037                  		lea	$37(a0),a2
00011F92 7400                       		moveq	#0,d2
00011F94 141A                       		move.b	(a2)+,d2
00011F96 5342                       		subq.w	#1,d2
00011F98 6500                       		bcs.s	Obj60_Delete
00011F9A                            
00011F9A                            loc_11E40:
00011F9A 7000                       		moveq	#0,d0
00011F9C 101A                       		move.b	(a2)+,d0
00011F9E ED48                       		lsl.w	#6,d0
00011FA0 0680 00FF D000             		addi.l	#$FFD000,d0
00011FA6 2240                       		movea.l	d0,a1
00011FA8 6100 B810                  		bsr.w	DeleteObject2
00011FAC 51CA FFEC                  		dbf	d2,loc_11E40
00011FB0                            
00011FB0                            Obj60_Delete:
00011FB0 6000 B806                  		bra.w	DeleteObject
00011FB4                            ; ===========================================================================
00011FB4                            
00011FB4                            Obj60_MoveOrb:				; XREF: Obj60_Index
00011FB4 2268 003C                  		movea.l	$3C(a0),a1
00011FB8 0C11 0060                  		cmpi.b	#$60,0(a1)
00011FBC 6600 B7FA                  		bne.w	DeleteObject
00011FC0 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00011FC6 6600                       		bne.s	Obj60_Circle
00011FC8 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00011FCE 6600                       		bne.s	Obj60_Circle
00011FD0 5428 0024                  		addq.b	#2,$24(a0)
00011FD4 5329 0037                  		subq.b	#1,$37(a1)
00011FD8 6600                       		bne.s	Obj60_FireOrb
00011FDA 5429 0024                  		addq.b	#2,$24(a1)
00011FDE                            
00011FDE                            Obj60_FireOrb:
00011FDE 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00011FE4 0829 0000 0022             		btst	#0,$22(a1)
00011FEA 6700                       		beq.s	Obj60_Display2
00011FEC 4468 0010                  		neg.w	$10(a0)
00011FF0                            
00011FF0                            Obj60_Display2:
00011FF0 6000 B78A                  		bra.w	DisplaySprite
00011FF4                            ; ===========================================================================
00011FF4                            
00011FF4                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00011FF4 1028 0026                  		move.b	$26(a0),d0
00011FF8 4EB9 0000 29DA             		jsr	(CalcSine).l
00011FFE E841                       		asr.w	#4,d1
00012000 D269 0008                  		add.w	8(a1),d1
00012004 3141 0008                  		move.w	d1,8(a0)
00012008 E840                       		asr.w	#4,d0
0001200A D069 000C                  		add.w	$C(a1),d0
0001200E 3140 000C                  		move.w	d0,$C(a0)
00012012 1029 0036                  		move.b	$36(a1),d0
00012016 D128 0026                  		add.b	d0,$26(a0)
0001201A 6000 B760                  		bra.w	DisplaySprite
0001201E                            ; ===========================================================================
0001201E                            
0001201E                            Obj60_ChkDel2:				; XREF: Obj60_Index
0001201E 6100 B736                  		bsr.w	SpeedToPos
00012022 4A28 0001                  		tst.b	1(a0)
00012026 6A00 B790                  		bpl.w	DeleteObject
0001202A 6000 B750                  		bra.w	DisplaySprite
0001202E                            ; ===========================================================================
0001202E                            Ani_obj60:
0001202E                            	include "_anim\obj60.asm"
0001202E                            ; ---------------------------------------------------------------------------
0001202E                            ; Animation script - Orbinaut enemy
0001202E                            ; ---------------------------------------------------------------------------
0001202E 0000                       		dc.w byte_11EDA-Ani_obj60
00012030 0000                       		dc.w byte_11EDE-Ani_obj60
00012032 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012036 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
0001203C                            		even
0001203C                            		even
0001203C                            
0001203C                            ; ---------------------------------------------------------------------------
0001203C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001203C                            ; ---------------------------------------------------------------------------
0001203C                            Map_obj60:
0001203C                            	include "_maps\obj60.asm"
0001203C                            ; ---------------------------------------------------------------------------
0001203C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
0001203C                            ; ---------------------------------------------------------------------------
0001203C 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00012040 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00012044 01                         byte_11EEC:	dc.b 1
00012045 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001204A 01                         byte_11EF2:	dc.b 1
0001204B F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00012050 01                         byte_11EF8:	dc.b 1
00012051 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00012056 01                         byte_11EFE:	dc.b 1
00012057 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
0001205C                            		even
0001205C                            		even
0001205C                            
0001205C                            ; ===========================================================================
0001205C                            ; ---------------------------------------------------------------------------
0001205C                            ; Object 16 - harpoon (LZ)
0001205C                            ; ---------------------------------------------------------------------------
0001205C                            
0001205C                            Obj16:					; XREF: Obj_Index
0001205C 7000                       		moveq	#0,d0
0001205E 1028 0024                  		move.b	$24(a0),d0
00012062 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00012066 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001206A                            ; ===========================================================================
0001206A 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
0001206C 0000                       		dc.w Obj16_Move-Obj16_Index
0001206E 0000                       		dc.w Obj16_Wait-Obj16_Index
00012070                            ; ===========================================================================
00012070                            
00012070                            Obj16_Main:				; XREF: Obj16_Index
00012070 5428 0024                  		addq.b	#2,$24(a0)
00012074 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
0001207C 317C 03CC 0002             		move.w	#$3CC,2(a0)
00012082 0028 0004 0001             		ori.b	#4,1(a0)
00012088 117C 0004 0018             		move.b	#4,$18(a0)
0001208E 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00012094 117C 0014 0019             		move.b	#$14,$19(a0)
0001209A 317C 003C 0030             		move.w	#60,$30(a0)
000120A0                            
000120A0                            Obj16_Move:				; XREF: Obj16_Index
000120A0 43F9 0000 0000             		lea	(Ani_obj16).l,a1
000120A6 6100 8746                  		bsr.w	AnimateSprite
000120AA 7000                       		moveq	#0,d0
000120AC 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
000120B0 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
000120B6 6000 D76C                  		bra.w	MarkObjGone
000120BA                            ; ===========================================================================
000120BA 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
000120C0                            ; ===========================================================================
000120C0                            
000120C0                            Obj16_Wait:				; XREF: Obj16_Index
000120C0 5368 0030                  		subq.w	#1,$30(a0)
000120C4 6A00                       		bpl.s	Obj16_ChkDel
000120C6 317C 003C 0030             		move.w	#60,$30(a0)
000120CC 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
000120D0 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
000120D6                            
000120D6                            Obj16_ChkDel:
000120D6 6000 D74C                  		bra.w	MarkObjGone
000120DA                            ; ===========================================================================
000120DA                            Ani_obj16:
000120DA                            	include "_anim\obj16.asm"
000120DA                            ; ---------------------------------------------------------------------------
000120DA                            ; Animation script - harpoon (LZ)
000120DA                            ; ---------------------------------------------------------------------------
000120DA 0000                       		dc.w byte_11F8A-Ani_obj16
000120DC 0000                       		dc.w byte_11F8E-Ani_obj16
000120DE 0000                       		dc.w byte_11F92-Ani_obj16
000120E0 0000                       		dc.w byte_11F96-Ani_obj16
000120E2 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000120E6 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000120EA 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000120EE 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000120F2                            		even
000120F2                            		even
000120F2                            
000120F2                            ; ---------------------------------------------------------------------------
000120F2                            ; Sprite mappings - harpoon (LZ)
000120F2                            ; ---------------------------------------------------------------------------
000120F2                            Map_obj16:
000120F2                            	include "_maps\obj16.asm"
000120F2                            ; ---------------------------------------------------------------------------
000120F2                            ; Sprite mappings - harpoon (LZ)
000120F2                            ; ---------------------------------------------------------------------------
000120F2 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000120F6 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000120FA 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000120FE 01                         byte_11FA6:	dc.b 1
000120FF FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00012104 01                         byte_11FAC:	dc.b 1
00012105 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
0001210A 02                         byte_11FB2:	dc.b 2
0001210B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00012110 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00012115 01                         byte_11FBD:	dc.b 1
00012116 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
0001211B 01                         byte_11FC3:	dc.b 1
0001211C E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00012121 02                         byte_11FC9:	dc.b 2
00012122 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00012127 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
0001212C                            		even
0001212C                            		even
0001212C                            
0001212C                            ; ===========================================================================
0001212C                            ; ---------------------------------------------------------------------------
0001212C                            ; Object 61 - blocks (LZ)
0001212C                            ; ---------------------------------------------------------------------------
0001212C                            
0001212C                            Obj61:					; XREF: Obj_Index
0001212C 7000                       		moveq	#0,d0
0001212E 1028 0024                  		move.b	$24(a0),d0
00012132 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00012136 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
0001213A                            ; ===========================================================================
0001213A 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
0001213C 0000                       		dc.w Obj61_Action-Obj61_Index
0001213E                            
0001213E 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00012140 200C                       		dc.b $20, $C
00012142 1010                       		dc.b $10, $10
00012144 1010                       		dc.b $10, $10
00012146                            ; ===========================================================================
00012146                            
00012146                            Obj61_Main:				; XREF: Obj61_Index
00012146 5428 0024                  		addq.b	#2,$24(a0)
0001214A 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00012152 317C 43E6 0002             		move.w	#$43E6,2(a0)
00012158 117C 0004 0001             		move.b	#4,1(a0)
0001215E 117C 0003 0018             		move.b	#3,$18(a0)
00012164 7000                       		moveq	#0,d0
00012166 1028 0028                  		move.b	$28(a0),d0
0001216A E648                       		lsr.w	#3,d0
0001216C 0240 000E                  		andi.w	#$E,d0
00012170 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00012174 115A 0019                  		move.b	(a2)+,$19(a0)
00012178 1152 0016                  		move.b	(a2),$16(a0)
0001217C E248                       		lsr.w	#1,d0
0001217E 1140 001A                  		move.b	d0,$1A(a0)
00012182 3168 0008 0034             		move.w	8(a0),$34(a0)
00012188 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001218E 1028 0028                  		move.b	$28(a0),d0
00012192 0200 000F                  		andi.b	#$F,d0
00012196 6700                       		beq.s	Obj61_Action
00012198 0C00 0007                  		cmpi.b	#7,d0
0001219C 6700                       		beq.s	Obj61_Action
0001219E 117C 0001 0038             		move.b	#1,$38(a0)
000121A4                            
000121A4                            Obj61_Action:				; XREF: Obj61_Index
000121A4 3F28 0008                  		move.w	8(a0),-(sp)
000121A8 7000                       		moveq	#0,d0
000121AA 1028 0028                  		move.b	$28(a0),d0
000121AE 0240 000F                  		andi.w	#$F,d0
000121B2 D040                       		add.w	d0,d0
000121B4 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
000121B8 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
000121BC 381F                       		move.w	(sp)+,d4
000121BE 4A28 0001                  		tst.b	1(a0)
000121C2 6A00                       		bpl.s	Obj61_ChkDel
000121C4 7200                       		moveq	#0,d1
000121C6 1228 0019                  		move.b	$19(a0),d1
000121CA 0641 000B                  		addi.w	#$B,d1
000121CE 7400                       		moveq	#0,d2
000121D0 1428 0016                  		move.b	$16(a0),d2
000121D4 3602                       		move.w	d2,d3
000121D6 5243                       		addq.w	#1,d3
000121D8 6100 D972                  		bsr.w	SolidObject
000121DC 1144 003F                  		move.b	d4,$3F(a0)
000121E0 6100 0000                  		bsr.w	loc_12180
000121E4                            
000121E4                            Obj61_ChkDel:
000121E4 3028 0034                  		move.w	$34(a0),d0
000121E8 0240 FF80                  		andi.w	#$FF80,d0
000121EC 3238 F700                  		move.w	($FFFFF700).w,d1
000121F0 0441 0080                  		subi.w	#$80,d1
000121F4 0241 FF80                  		andi.w	#$FF80,d1
000121F8 9041                       		sub.w	d1,d0
000121FA 0C40 0280                  		cmpi.w	#$280,d0
000121FE 6200 B5B8                  		bhi.w	DeleteObject
00012202 6000 B578                  		bra.w	DisplaySprite
00012206                            ; ===========================================================================
00012206 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001220A 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001220E 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012212 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012216                            ; ===========================================================================
00012216                            
00012216                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012216 4E75                       		rts	
00012218                            ; ===========================================================================
00012218                            
00012218                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012218 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001221C 6600                       		bne.s	loc_120D6	; if yes, branch
0001221E 0828 0003 0022             		btst	#3,$22(a0)
00012224 6700                       		beq.s	locret_120D4
00012226 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
0001222C                            
0001222C                            locret_120D4:
0001222C 4E75                       		rts	
0001222E                            ; ===========================================================================
0001222E                            
0001222E                            loc_120D6:
0001222E 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012232 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012234 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012238 4228 0038                  		clr.b	$38(a0)
0001223C 4E75                       		rts	
0001223E                            ; ===========================================================================
0001223E                            
0001223E                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001223E 6100 B516                  		bsr.w	SpeedToPos
00012242 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012246 6100 0000                  		bsr.w	ObjHitFloor
0001224A 4A41                       		tst.w	d1
0001224C 6A00 0000                  		bpl.w	locret_12106
00012250 5241                       		addq.w	#1,d1
00012252 D368 000C                  		add.w	d1,$C(a0)
00012256 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001225A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001225E                            
0001225E                            locret_12106:
0001225E 4E75                       		rts	
00012260                            ; ===========================================================================
00012260                            
00012260                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012260 6100 B4F4                  		bsr.w	SpeedToPos
00012264 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012268 6100 0000                  		bsr.w	ObjHitCeiling
0001226C 4A41                       		tst.w	d1
0001226E 6A00 0000                  		bpl.w	locret_12126
00012272 9368 000C                  		sub.w	d1,$C(a0)
00012276 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001227A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001227E                            
0001227E                            locret_12126:
0001227E 4E75                       		rts	
00012280                            ; ===========================================================================
00012280                            
00012280                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00012280 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
00012286 6600                       		bne.s	locret_12138	; if not, branch
00012288 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0001228C 4228 0038                  		clr.b	$38(a0)
00012290                            
00012290                            locret_12138:
00012290 4E75                       		rts	
00012292                            ; ===========================================================================
00012292                            
00012292                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00012292 3038 F646                  		move.w	($FFFFF646).w,d0
00012296 9068 000C                  		sub.w	$C(a0),d0
0001229A 6700                       		beq.s	locret_1217E
0001229C 6400                       		bcc.s	loc_12162
0001229E 0C40 FFFE                  		cmpi.w	#-2,d0
000122A2 6C00                       		bge.s	loc_1214E
000122A4 70FE                       		moveq	#-2,d0
000122A6                            
000122A6                            loc_1214E:
000122A6 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000122AA 6100 0000                  		bsr.w	ObjHitCeiling
000122AE 4A41                       		tst.w	d1
000122B0 6A00 0000                  		bpl.w	locret_12160
000122B4 9368 000C                  		sub.w	d1,$C(a0)
000122B8                            
000122B8                            locret_12160:
000122B8 4E75                       		rts	
000122BA                            ; ===========================================================================
000122BA                            
000122BA                            loc_12162:				; XREF: Obj61_Type07
000122BA 0C40 0002                  		cmpi.w	#2,d0
000122BE 6F00                       		ble.s	loc_1216A
000122C0 7002                       		moveq	#2,d0
000122C2                            
000122C2                            loc_1216A:
000122C2 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000122C6 6100 0000                  		bsr.w	ObjHitFloor
000122CA 4A41                       		tst.w	d1
000122CC 6A00 0000                  		bpl.w	locret_1217E
000122D0 5241                       		addq.w	#1,d1
000122D2 D368 000C                  		add.w	d1,$C(a0)
000122D6                            
000122D6                            locret_1217E:
000122D6 4E75                       		rts	
000122D8                            ; ===========================================================================
000122D8                            
000122D8                            loc_12180:				; XREF: Obj61_Action
000122D8 4A28 0038                  		tst.b	$38(a0)
000122DC 6700                       		beq.s	locret_121C0
000122DE 0828 0003 0022             		btst	#3,$22(a0)
000122E4 6600                       		bne.s	loc_1219A
000122E6 4A28 003E                  		tst.b	$3E(a0)
000122EA 6700                       		beq.s	locret_121C0
000122EC 5928 003E                  		subq.b	#4,$3E(a0)
000122F0 6000                       		bra.s	loc_121A6
000122F2                            ; ===========================================================================
000122F2                            
000122F2                            loc_1219A:
000122F2 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000122F8 6700                       		beq.s	locret_121C0
000122FA 5828 003E                  		addq.b	#4,$3E(a0)
000122FE                            
000122FE                            loc_121A6:
000122FE 1028 003E                  		move.b	$3E(a0),d0
00012302 4EB9 0000 29DA             		jsr	(CalcSine).l
00012308 323C 0400                  		move.w	#$400,d1
0001230C C1C1                       		muls.w	d1,d0
0001230E 4840                       		swap	d0
00012310 D068 0030                  		add.w	$30(a0),d0
00012314 3140 000C                  		move.w	d0,$C(a0)
00012318                            
00012318                            locret_121C0:
00012318 4E75                       		rts	
0001231A                            ; ===========================================================================
0001231A                            ; ---------------------------------------------------------------------------
0001231A                            ; Sprite mappings - blocks (LZ)
0001231A                            ; ---------------------------------------------------------------------------
0001231A                            Map_obj61:
0001231A                            	include "_maps\obj61.asm"
0001231A                            ; ---------------------------------------------------------------------------
0001231A                            ; Sprite mappings - blocks (LZ)
0001231A                            ; ---------------------------------------------------------------------------
0001231A 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001231E 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012322 01                         byte_121CA:	dc.b 1
00012323 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012328 02                         byte_121D0:	dc.b 2
00012329 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001232E F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012333 01                         byte_121DB:	dc.b 1
00012334 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012339 01                         byte_121E1:	dc.b 1
0001233A F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012340 00                         		even
00012340 00                         		even
00012340                            
00012340                            ; ===========================================================================
00012340                            ; ---------------------------------------------------------------------------
00012340                            ; Object 62 - gargoyle head (LZ)
00012340                            ; ---------------------------------------------------------------------------
00012340                            
00012340                            Obj62:					; XREF: Obj_Index
00012340 7000                       		moveq	#0,d0
00012342 1028 0024                  		move.b	$24(a0),d0
00012346 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001234A 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001234E 6000 D4D4                  		bra.w	MarkObjGone
00012352                            ; ===========================================================================
00012352 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012354 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012356 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012358 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001235A                            
0001235A 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012362                            ; ===========================================================================
00012362                            
00012362                            Obj62_Main:				; XREF: Obj62_Index
00012362 5428 0024                  		addq.b	#2,$24(a0)
00012366 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001236E 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012374 0028 0004 0001             		ori.b	#4,1(a0)
0001237A 117C 0003 0018             		move.b	#3,$18(a0)
00012380 117C 0010 0019             		move.b	#$10,$19(a0)
00012386 1028 0028                  		move.b	$28(a0),d0	; get object type
0001238A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001238E 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00012394 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001239A 0228 000F 0028             		andi.b	#$F,$28(a0)
000123A0                            
000123A0                            Obj62_MakeFire:				; XREF: Obj62_Index
000123A0 5328 001E                  		subq.b	#1,$1E(a0)
000123A4 6600                       		bne.s	Obj62_NoFire
000123A6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000123AC 6100 B648                  		bsr.w	ChkObjOnScreen
000123B0 6600                       		bne.s	Obj62_NoFire
000123B2 6100 B84E                  		bsr.w	SingleObjLoad
000123B6 6600                       		bne.s	Obj62_NoFire
000123B8 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000123BC 5829 0024                  		addq.b	#4,$24(a1)
000123C0 3368 0008 0008             		move.w	8(a0),8(a1)
000123C6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000123CC 1368 0001 0001             		move.b	1(a0),1(a1)
000123D2 1368 0022 0022             		move.b	$22(a0),$22(a1)
000123D8                            
000123D8                            Obj62_NoFire:
000123D8 4E75                       		rts	
000123DA                            ; ===========================================================================
000123DA                            
000123DA                            Obj62_FireBall:				; XREF: Obj62_Index
000123DA 5428 0024                  		addq.b	#2,$24(a0)
000123DE 117C 0008 0016             		move.b	#8,$16(a0)
000123E4 117C 0008 0017             		move.b	#8,$17(a0)
000123EA 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000123F2 317C 02E9 0002             		move.w	#$2E9,2(a0)
000123F8 0028 0004 0001             		ori.b	#4,1(a0)
000123FE 117C 0004 0018             		move.b	#4,$18(a0)
00012404 117C 0098 0020             		move.b	#$98,$20(a0)
0001240A 117C 0008 0019             		move.b	#8,$19(a0)
00012410 117C 0002 001A             		move.b	#2,$1A(a0)
00012416 5068 000C                  		addq.w	#8,$C(a0)
0001241A 317C 0200 0010             		move.w	#$200,$10(a0)
00012420 0828 0000 0022             		btst	#0,$22(a0)
00012426 6600                       		bne.s	Obj62_Sound
00012428 4468 0010                  		neg.w	$10(a0)
0001242C                            
0001242C                            Obj62_Sound:
0001242C 303C 00AE                  		move.w	#$AE,d0
00012430 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012436                            
00012436                            Obj62_AniFire:				; XREF: Obj62_Index
00012436 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001243A 0200 0007                  		andi.b	#7,d0
0001243E 6600                       		bne.s	Obj62_StopFire
00012440 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012446                            
00012446                            Obj62_StopFire:
00012446 6100 B30E                  		bsr.w	SpeedToPos
0001244A 0828 0000 0022             		btst	#0,$22(a0)
00012450 6600                       		bne.s	Obj62_StopFire2
00012452 76F8                       		moveq	#-8,d3
00012454 6100 0000                  		bsr.w	ObjHitWallLeft
00012458 4A41                       		tst.w	d1
0001245A 6B00 B35C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001245E 4E75                       		rts	
00012460                            ; ===========================================================================
00012460                            
00012460                            Obj62_StopFire2:
00012460 7608                       		moveq	#8,d3
00012462 6100 0000                  		bsr.w	ObjHitWallRight
00012466 4A41                       		tst.w	d1
00012468 6B00 B34E                  		bmi.w	DeleteObject
0001246C 4E75                       		rts	
0001246E                            ; ===========================================================================
0001246E                            ; ---------------------------------------------------------------------------
0001246E                            ; Sprite mappings - gargoyle head (LZ)
0001246E                            ; ---------------------------------------------------------------------------
0001246E                            Map_obj62:
0001246E                            	include "_maps\obj62.asm"
0001246E                            ; ---------------------------------------------------------------------------
0001246E                            ; Sprite mappings - gargoyle head (LZ)
0001246E                            ; ---------------------------------------------------------------------------
0001246E 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012472 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012476 03                         byte_12320:	dc.b 3
00012477 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001247C F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00012481 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
00012486 01                         byte_12330:	dc.b 1
00012487 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
0001248C 01                         byte_12336:	dc.b 1
0001248D FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00012492                            		even
00012492                            		even
00012492                            
00012492                            ; ===========================================================================
00012492                            ; ---------------------------------------------------------------------------
00012492                            ; Object 63 - platforms	on a conveyor belt (LZ)
00012492                            ; ---------------------------------------------------------------------------
00012492                            
00012492                            Obj63:					; XREF: Obj_Index
00012492 7000                       		moveq	#0,d0
00012494 1028 0024                  		move.b	$24(a0),d0
00012498 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
0001249C 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000124A0 3028 0030                  		move.w	$30(a0),d0
000124A4 0240 FF80                  		andi.w	#$FF80,d0
000124A8 3238 F700                  		move.w	($FFFFF700).w,d1
000124AC 0441 0080                  		subi.w	#$80,d1
000124B0 0241 FF80                  		andi.w	#$FF80,d1
000124B4 9041                       		sub.w	d1,d0
000124B6 0C40 0280                  		cmpi.w	#$280,d0
000124BA 6200                       		bhi.s	loc_1236A
000124BC                            
000124BC                            Obj63_Display:				; XREF: loc_1236A
000124BC 6000 B2BE                  		bra.w	DisplaySprite
000124C0                            ; ===========================================================================
000124C0                            
000124C0                            loc_1236A:				; XREF: Obj63
000124C0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000124C6 6600                       		bne.s	loc_12378
000124C8 0C40 FF80                  		cmpi.w	#-$80,d0
000124CC 64EE                       		bcc.s	Obj63_Display
000124CE                            
000124CE                            loc_12378:
000124CE 1028 002F                  		move.b	$2F(a0),d0
000124D2 6A00 B2E4                  		bpl.w	DeleteObject
000124D6 0240 007F                  		andi.w	#$7F,d0
000124DA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000124DE 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000124E4 6000 B2D2                  		bra.w	DeleteObject
000124E8                            ; ===========================================================================
000124E8 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000124EA 0000                       		dc.w loc_124B2-Obj63_Index
000124EC 0000                       		dc.w loc_124C2-Obj63_Index
000124EE 0000                       		dc.w loc_124DE-Obj63_Index
000124F0                            ; ===========================================================================
000124F0                            
000124F0                            Obj63_Main:				; XREF: Obj63_Index
000124F0 1028 0028                  		move.b	$28(a0),d0
000124F4 6B00 0000                  		bmi.w	loc_12460
000124F8 5428 0024                  		addq.b	#2,$24(a0)
000124FC 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012504 317C 43F6 0002             		move.w	#$43F6,2(a0)
0001250A 0028 0004 0001             		ori.b	#4,1(a0)
00012510 117C 0010 0019             		move.b	#$10,$19(a0)
00012516 117C 0004 0018             		move.b	#4,$18(a0)
0001251C 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012522 6600                       		bne.s	loc_123E2
00012524 5828 0024                  		addq.b	#4,$24(a0)
00012528 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001252E 117C 0001 0018             		move.b	#1,$18(a0)
00012534 6000 0000                  		bra.w	loc_124DE
00012538                            ; ===========================================================================
00012538                            
00012538                            loc_123E2:
00012538 117C 0004 001A             		move.b	#4,$1A(a0)
0001253E 7000                       		moveq	#0,d0
00012540 1028 0028                  		move.b	$28(a0),d0
00012544 3200                       		move.w	d0,d1
00012546 E648                       		lsr.w	#3,d0
00012548 0240 001E                  		andi.w	#$1E,d0
0001254C 45FA 0000                  		lea	Obj63_Data(pc),a2
00012550 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012554 315A 0038                  		move.w	(a2)+,$38(a0)
00012558 315A 0030                  		move.w	(a2)+,$30(a0)
0001255C 214A 003C                  		move.l	a2,$3C(a0)
00012560 0241 000F                  		andi.w	#$F,d1
00012564 E549                       		lsl.w	#2,d1
00012566 1141 0038                  		move.b	d1,$38(a0)
0001256A 117C 0004 003A             		move.b	#4,$3A(a0)
00012570 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012574 6700                       		beq.s	loc_1244C
00012576 117C 0001 003B             		move.b	#1,$3B(a0)
0001257C 4428 003A                  		neg.b	$3A(a0)
00012580 7200                       		moveq	#0,d1
00012582 1228 0038                  		move.b	$38(a0),d1
00012586 D228 003A                  		add.b	$3A(a0),d1
0001258A B228 0039                  		cmp.b	$39(a0),d1
0001258E 6500                       		bcs.s	loc_12448
00012590 1001                       		move.b	d1,d0
00012592 7200                       		moveq	#0,d1
00012594 4A00                       		tst.b	d0
00012596 6A00                       		bpl.s	loc_12448
00012598 1228 0039                  		move.b	$39(a0),d1
0001259C 5901                       		subq.b	#4,d1
0001259E                            
0001259E                            loc_12448:
0001259E 1141 0038                  		move.b	d1,$38(a0)
000125A2                            
000125A2                            loc_1244C:
000125A2 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000125A8 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000125AE 6100 0000                  		bsr.w	Obj63_ChangeDir
000125B2 6000 0000                  		bra.w	loc_124B2
000125B6                            ; ===========================================================================
000125B6                            
000125B6                            loc_12460:				; XREF: Obj63_Main
000125B6 1140 002F                  		move.b	d0,$2F(a0)
000125BA 0240 007F                  		andi.w	#$7F,d0
000125BE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000125C2 08F2 0000 0000             		bset	#0,(a2,d0.w)
000125C8 6600 B1EE                  		bne.w	DeleteObject
000125CC D040                       		add.w	d0,d0
000125CE 0240 001E                  		andi.w	#$1E,d0
000125D2 0640 0070                  		addi.w	#$70,d0
000125D6 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000125DC D4F2 0000                  		adda.w	(a2,d0.w),a2
000125E0 321A                       		move.w	(a2)+,d1
000125E2 2248                       		movea.l	a0,a1
000125E4 6000                       		bra.s	Obj63_MakePtfms
000125E6                            ; ===========================================================================
000125E6                            
000125E6                            Obj63_Loop:
000125E6 6100 B61A                  		bsr.w	SingleObjLoad
000125EA 6600                       		bne.s	loc_124AA
000125EC                            
000125EC                            Obj63_MakePtfms:			; XREF: loc_12460
000125EC 12BC 0063                  		move.b	#$63,0(a1)
000125F0 335A 0008                  		move.w	(a2)+,8(a1)
000125F4 335A 000C                  		move.w	(a2)+,$C(a1)
000125F8 301A                       		move.w	(a2)+,d0
000125FA 1340 0028                  		move.b	d0,$28(a1)
000125FE                            
000125FE                            loc_124AA:
000125FE 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012602                            
00012602 588F                       		addq.l	#4,sp
00012604 4E75                       		rts	
00012606                            ; ===========================================================================
00012606                            
00012606                            loc_124B2:				; XREF: Obj63_Index
00012606 7200                       		moveq	#0,d1
00012608 1228 0019                  		move.b	$19(a0),d1
0001260C 4EB9 0000 7552             		jsr	(PlatformObject).l
00012612 6000 0000                  		bra.w	sub_12502
00012616                            ; ===========================================================================
00012616                            
00012616                            loc_124C2:				; XREF: Obj63_Index
00012616 7200                       		moveq	#0,d1
00012618 1228 0019                  		move.b	$19(a0),d1
0001261C 4EB9 0000 76C6             		jsr	(ExitPlatform).l
00012622 3F28 0008                  		move.w	8(a0),-(sp)
00012626 6100 0000                  		bsr.w	sub_12502
0001262A 341F                       		move.w	(sp)+,d2
0001262C 4EF9 0000 7C30             		jmp	(MvSonicOnPtfm2).l
00012632                            ; ===========================================================================
00012632                            
00012632                            loc_124DE:				; XREF: Obj63_Index
00012632 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012636 0240 0003                  		andi.w	#3,d0
0001263A 6600                       		bne.s	loc_124FC
0001263C 7201                       		moveq	#1,d1
0001263E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012642 6700                       		beq.s	loc_124F2
00012644 4401                       		neg.b	d1
00012646                            
00012646                            loc_124F2:
00012646 D328 001A                  		add.b	d1,$1A(a0)
0001264A 0228 0003 001A             		andi.b	#3,$1A(a0)
00012650                            
00012650                            loc_124FC:
00012650 588F                       		addq.l	#4,sp
00012652 6000 D1D0                  		bra.w	MarkObjGone
00012656                            
00012656                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012656                            
00012656                            
00012656                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012656 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001265A 6700                       		beq.s	loc_12520
0001265C 4A28 003B                  		tst.b	$3B(a0)
00012660 6600                       		bne.s	loc_12520
00012662 117C 0001 003B             		move.b	#1,$3B(a0)
00012668 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001266E 4428 003A                  		neg.b	$3A(a0)
00012672 6000                       		bra.s	loc_12534
00012674                            ; ===========================================================================
00012674                            
00012674                            loc_12520:
00012674 3028 0008                  		move.w	8(a0),d0
00012678 B068 0034                  		cmp.w	$34(a0),d0
0001267C 6600                       		bne.s	loc_1256A
0001267E 3028 000C                  		move.w	$C(a0),d0
00012682 B068 0036                  		cmp.w	$36(a0),d0
00012686 6600                       		bne.s	loc_1256A
00012688                            
00012688                            loc_12534:
00012688 7200                       		moveq	#0,d1
0001268A 1228 0038                  		move.b	$38(a0),d1
0001268E D228 003A                  		add.b	$3A(a0),d1
00012692 B228 0039                  		cmp.b	$39(a0),d1
00012696 6500                       		bcs.s	loc_12552
00012698 1001                       		move.b	d1,d0
0001269A 7200                       		moveq	#0,d1
0001269C 4A00                       		tst.b	d0
0001269E 6A00                       		bpl.s	loc_12552
000126A0 1228 0039                  		move.b	$39(a0),d1
000126A4 5901                       		subq.b	#4,d1
000126A6                            
000126A6                            loc_12552:
000126A6 1141 0038                  		move.b	d1,$38(a0)
000126AA 2268 003C                  		movea.l	$3C(a0),a1
000126AE 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000126B4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000126BA 6100 0000                  		bsr.w	Obj63_ChangeDir
000126BE                            
000126BE                            loc_1256A:
000126BE 6100 B096                  		bsr.w	SpeedToPos
000126C2 4E75                       		rts	
000126C4                            ; End of function sub_12502
000126C4                            
000126C4                            
000126C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000126C4                            
000126C4                            
000126C4                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000126C4 7000                       		moveq	#0,d0
000126C6 343C FF00                  		move.w	#-$100,d2
000126CA 3028 0008                  		move.w	8(a0),d0
000126CE 9068 0034                  		sub.w	$34(a0),d0
000126D2 6400                       		bcc.s	loc_12584
000126D4 4440                       		neg.w	d0
000126D6 4442                       		neg.w	d2
000126D8                            
000126D8                            loc_12584:
000126D8 7200                       		moveq	#0,d1
000126DA 363C FF00                  		move.w	#-$100,d3
000126DE 3228 000C                  		move.w	$C(a0),d1
000126E2 9268 0036                  		sub.w	$36(a0),d1
000126E6 6400                       		bcc.s	loc_12598
000126E8 4441                       		neg.w	d1
000126EA 4443                       		neg.w	d3
000126EC                            
000126EC                            loc_12598:
000126EC B240                       		cmp.w	d0,d1
000126EE 6500                       		bcs.s	loc_125C2
000126F0 3028 0008                  		move.w	8(a0),d0
000126F4 9068 0034                  		sub.w	$34(a0),d0
000126F8 6700                       		beq.s	loc_125AE
000126FA 48C0                       		ext.l	d0
000126FC E180                       		asl.l	#8,d0
000126FE 81C1                       		divs.w	d1,d0
00012700 4440                       		neg.w	d0
00012702                            
00012702                            loc_125AE:
00012702 3140 0010                  		move.w	d0,$10(a0)
00012706 3143 0012                  		move.w	d3,$12(a0)
0001270A 4840                       		swap	d0
0001270C 3140 000A                  		move.w	d0,$A(a0)
00012710 4268 000E                  		clr.w	$E(a0)
00012714 4E75                       		rts	
00012716                            ; ===========================================================================
00012716                            
00012716                            loc_125C2:				; XREF: Obj63_ChangeDir
00012716 3228 000C                  		move.w	$C(a0),d1
0001271A 9268 0036                  		sub.w	$36(a0),d1
0001271E 6700                       		beq.s	loc_125D4
00012720 48C1                       		ext.l	d1
00012722 E181                       		asl.l	#8,d1
00012724 83C0                       		divs.w	d0,d1
00012726 4441                       		neg.w	d1
00012728                            
00012728                            loc_125D4:
00012728 3141 0012                  		move.w	d1,$12(a0)
0001272C 3142 0010                  		move.w	d2,$10(a0)
00012730 4841                       		swap	d1
00012732 3141 000E                  		move.w	d1,$E(a0)
00012736 4268 000A                  		clr.w	$A(a0)
0001273A 4E75                       		rts	
0001273C                            ; End of function Obj63_ChangeDir
0001273C                            
0001273C                            ; ===========================================================================
0001273C 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001273E 0000                       		dc.w word_12610-Obj63_Data
00012740 0000                       		dc.w word_12628-Obj63_Data
00012742 0000                       		dc.w word_1263C-Obj63_Data
00012744 0000                       		dc.w word_12650-Obj63_Data
00012746 0000                       		dc.w word_12668-Obj63_Data
00012748 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012758 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012764 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012774 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001277C 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00012790 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000127A4 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000127BC 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000127D0                            
000127D0                            ; ---------------------------------------------------------------------------
000127D0                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000127D0                            ; ---------------------------------------------------------------------------
000127D0                            Map_obj63:
000127D0                            	include "_maps\obj63.asm"
000127D0                            ; ---------------------------------------------------------------------------
000127D0                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000127D0                            ; ---------------------------------------------------------------------------
000127D0 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000127D4 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000127D8 0000                       		dc.w byte_1269E-Map_obj63
000127DA 01                         byte_12686:	dc.b 1
000127DB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000127E0 01                         byte_1268C:	dc.b 1
000127E1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000127E6 01                         byte_12692:	dc.b 1
000127E7 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000127EC 01                         byte_12698:	dc.b 1
000127ED F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000127F2 01                         byte_1269E:	dc.b 1
000127F3 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000127F8                            		even
000127F8                            		even
000127F8                            
000127F8                            ; ===========================================================================
000127F8                            ; ---------------------------------------------------------------------------
000127F8                            ; Object 64 - bubbles (LZ)
000127F8                            ; ---------------------------------------------------------------------------
000127F8                            
000127F8                            Obj64:					; XREF: Obj_Index
000127F8 7000                       		moveq	#0,d0
000127FA 1028 0024                  		move.b	$24(a0),d0
000127FE 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012802 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012806                            ; ===========================================================================
00012806 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012808 0000                       		dc.w Obj64_Animate-Obj64_Index
0001280A 0000                       		dc.w Obj64_ChkWater-Obj64_Index
0001280C 0000                       		dc.w Obj64_Display2-Obj64_Index
0001280E 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012810 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012812                            ; ===========================================================================
00012812                            
00012812                            Obj64_Main:				; XREF: Obj64_Index
00012812 5428 0024                  		addq.b	#2,$24(a0)
00012816 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001281E 317C 8348 0002             		move.w	#$8348,2(a0)
00012824 117C 0084 0001             		move.b	#$84,1(a0)
0001282A 117C 0010 0019             		move.b	#$10,$19(a0)
00012830 117C 0001 0018             		move.b	#1,$18(a0)
00012836 1028 0028                  		move.b	$28(a0),d0	; get object type
0001283A 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001283C 5028 0024                  		addq.b	#8,$24(a0)
00012840 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012844 1140 0032                  		move.b	d0,$32(a0)
00012848 1140 0033                  		move.b	d0,$33(a0)
0001284C 117C 0006 001C             		move.b	#6,$1C(a0)
00012852 6000 0000                  		bra.w	Obj64_BblMaker
00012856                            ; ===========================================================================
00012856                            
00012856                            Obj64_Bubble:				; XREF: Obj64_Main
00012856 1140 001C                  		move.b	d0,$1C(a0)
0001285A 3168 0008 0030             		move.w	8(a0),$30(a0)
00012860 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012866 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001286C 1140 0026                  		move.b	d0,$26(a0)
00012870                            
00012870                            Obj64_Animate:				; XREF: Obj64_Index
00012870 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012876 4EB9 0000 A7EE             		jsr	AnimateSprite
0001287C 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00012882 6600                       		bne.s	Obj64_ChkWater
00012884 117C 0001 002E             		move.b	#1,$2E(a0)
0001288A                            
0001288A                            Obj64_ChkWater:				; XREF: Obj64_Index
0001288A 3038 F646                  		move.w	($FFFFF646).w,d0
0001288E B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00012892 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00012894                            
00012894                            Obj64_Burst:				; XREF: Obj64_Wobble
00012894 117C 0006 0024             		move.b	#6,$24(a0)
0001289A 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
0001289E 6000 0000                  		bra.w	Obj64_Display2
000128A2                            ; ===========================================================================
000128A2                            
000128A2                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000128A2 1028 0026                  		move.b	$26(a0),d0
000128A6 5228 0026                  		addq.b	#1,$26(a0)
000128AA 0240 007F                  		andi.w	#$7F,d0
000128AE 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000128B4 1031 0000                  		move.b	(a1,d0.w),d0
000128B8 4880                       		ext.w	d0
000128BA D068 0030                  		add.w	$30(a0),d0
000128BE 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000128C2 4A28 002E                  		tst.b	$2E(a0)
000128C6 6700                       		beq.s	Obj64_Display
000128C8 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000128CC 6700                       		beq.s	Obj64_Display	; if not, branch
000128CE                            
000128CE 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000128D2 303C 00AD                  		move.w	#$AD,d0
000128D6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000128DC 43F8 D000                  		lea	($FFFFD000).w,a1
000128E0 4269 0010                  		clr.w	$10(a1)
000128E4 4269 0012                  		clr.w	$12(a1)
000128E8 4269 0014                  		clr.w	$14(a1)
000128EC 137C 0015 001C             		move.b	#$15,$1C(a1)
000128F2 337C 0023 003E             		move.w	#$23,$3E(a1)
000128F8 137C 0000 003C             		move.b	#0,$3C(a1)
000128FE 08A9 0005 0022             		bclr	#5,$22(a1)
00012904 08A9 0004 0022             		bclr	#4,$22(a1)
0001290A 0829 0002 0022             		btst	#2,$22(a1)
00012910 6700 FF82                  		beq.w	Obj64_Burst
00012914 08A9 0002 0022             		bclr	#2,$22(a1)
0001291A 137C 0013 0016             		move.b	#$13,$16(a1)
00012920 137C 0009 0017             		move.b	#9,$17(a1)
00012926 5B69 000C                  		subq.w	#5,$C(a1)
0001292A 6000 FF68                  		bra.w	Obj64_Burst
0001292E                            ; ===========================================================================
0001292E                            
0001292E                            Obj64_Display:				; XREF: Obj64_Wobble
0001292E 6100 AE26                  		bsr.w	SpeedToPos
00012932 4A28 0001                  		tst.b	1(a0)
00012936 6A00                       		bpl.s	Obj64_Delete
00012938 4EFA AE42                  		jmp	DisplaySprite
0001293C                            ; ===========================================================================
0001293C                            
0001293C                            Obj64_Delete:
0001293C 4EFA AE7A                  		jmp	DeleteObject
00012940                            ; ===========================================================================
00012940                            
00012940                            Obj64_Display2:				; XREF: Obj64_Index
00012940 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012946 4EB9 0000 A7EE             		jsr	AnimateSprite
0001294C 4A28 0001                  		tst.b	1(a0)
00012950 6A00                       		bpl.s	Obj64_Delete2
00012952 4EFA AE28                  		jmp	DisplaySprite
00012956                            ; ===========================================================================
00012956                            
00012956                            Obj64_Delete2:
00012956 4EFA AE60                  		jmp	DeleteObject
0001295A                            ; ===========================================================================
0001295A                            
0001295A                            Obj64_Delete3:				; XREF: Obj64_Index
0001295A 6000 AE5C                  		bra.w	DeleteObject
0001295E                            ; ===========================================================================
0001295E                            
0001295E                            Obj64_BblMaker:				; XREF: Obj64_Index
0001295E 4A68 0036                  		tst.w	$36(a0)
00012962 6600                       		bne.s	loc_12874
00012964 3038 F646                  		move.w	($FFFFF646).w,d0
00012968 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001296C 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00012970 4A28 0001                  		tst.b	1(a0)
00012974 6A00 0000                  		bpl.w	Obj64_ChkDel
00012978 5368 0038                  		subq.w	#1,$38(a0)
0001297C 6A00 0000                  		bpl.w	loc_12914
00012980 317C 0001 0036             		move.w	#1,$36(a0)
00012986                            
00012986                            loc_1283A:
00012986 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001298C 3200                       		move.w	d0,d1
0001298E 0240 0007                  		andi.w	#7,d0
00012992 0C40 0006                  		cmpi.w	#6,d0
00012996 64EE                       		bcc.s	loc_1283A
00012998                            
00012998 1140 0034                  		move.b	d0,$34(a0)
0001299C 0241 000C                  		andi.w	#$C,d1
000129A0 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000129A6 D2C1                       		adda.w	d1,a1
000129A8 2149 003C                  		move.l	a1,$3C(a0)
000129AC 5328 0032                  		subq.b	#1,$32(a0)
000129B0 6A00                       		bpl.s	loc_12872
000129B2 1168 0033 0032             		move.b	$33(a0),$32(a0)
000129B8 08E8 0007 0036             		bset	#7,$36(a0)
000129BE                            
000129BE                            loc_12872:
000129BE 6000                       		bra.s	loc_1287C
000129C0                            ; ===========================================================================
000129C0                            
000129C0                            loc_12874:				; XREF: Obj64_BblMaker
000129C0 5368 0038                  		subq.w	#1,$38(a0)
000129C4 6A00 0000                  		bpl.w	loc_12914
000129C8                            
000129C8                            loc_1287C:
000129C8 4EB9 0000 29B4             		jsr	(RandomNumber).l
000129CE 0240 001F                  		andi.w	#$1F,d0
000129D2 3140 0038                  		move.w	d0,$38(a0)
000129D6 6100 B22A                  		bsr.w	SingleObjLoad
000129DA 6600                       		bne.s	loc_128F8
000129DC 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000129E0 3368 0008 0008             		move.w	8(a0),8(a1)
000129E6 4EB9 0000 29B4             		jsr	(RandomNumber).l
000129EC 0240 000F                  		andi.w	#$F,d0
000129F0 5140                       		subq.w	#8,d0
000129F2 D169 0008                  		add.w	d0,8(a1)
000129F6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000129FC 7000                       		moveq	#0,d0
000129FE 1028 0034                  		move.b	$34(a0),d0
00012A02 2468 003C                  		movea.l	$3C(a0),a2
00012A06 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
00012A0C 0828 0007 0036             		btst	#7,$36(a0)
00012A12 6700                       		beq.s	loc_128F8
00012A14 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012A1A 0240 0003                  		andi.w	#3,d0
00012A1E 6600                       		bne.s	loc_128E4
00012A20 08E8 0006 0036             		bset	#6,$36(a0)
00012A26 6600                       		bne.s	loc_128F8
00012A28 137C 0002 0028             		move.b	#2,$28(a1)
00012A2E                            
00012A2E                            loc_128E4:
00012A2E 4A28 0034                  		tst.b	$34(a0)
00012A32 6600                       		bne.s	loc_128F8
00012A34 08E8 0006 0036             		bset	#6,$36(a0)
00012A3A 6600                       		bne.s	loc_128F8
00012A3C 137C 0002 0028             		move.b	#2,$28(a1)
00012A42                            
00012A42                            loc_128F8:
00012A42 5328 0034                  		subq.b	#1,$34(a0)
00012A46 6A00                       		bpl.s	loc_12914
00012A48 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012A4E 0240 007F                  		andi.w	#$7F,d0
00012A52 0640 0080                  		addi.w	#$80,d0
00012A56 D168 0038                  		add.w	d0,$38(a0)
00012A5A 4268 0036                  		clr.w	$36(a0)
00012A5E                            
00012A5E                            loc_12914:
00012A5E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012A64 4EB9 0000 A7EE             		jsr	AnimateSprite
00012A6A                            
00012A6A                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012A6A 3028 0008                  		move.w	8(a0),d0
00012A6E 0240 FF80                  		andi.w	#$FF80,d0
00012A72 3238 F700                  		move.w	($FFFFF700).w,d1
00012A76 0441 0080                  		subi.w	#$80,d1
00012A7A 0241 FF80                  		andi.w	#$FF80,d1
00012A7E 9041                       		sub.w	d1,d0
00012A80 0C40 0280                  		cmpi.w	#$280,d0
00012A84 6200 AD32                  		bhi.w	DeleteObject
00012A88 3038 F646                  		move.w	($FFFFF646).w,d0
00012A8C B068 000C                  		cmp.w	$C(a0),d0
00012A90 6500 ACEA                  		bcs.w	DisplaySprite
00012A94 4E75                       		rts	
00012A96                            ; ===========================================================================
00012A96                            ; bubble production sequence
00012A96                            
00012A96                            ; 0 = small bubble, 1 =	large bubble
00012A96                            
00012A96 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00012AA8                            
00012AA8                            ; ===========================================================================
00012AA8                            
00012AA8                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00012AA8 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012AAC 6B00                       		bmi.s	loc_12998
00012AAE 43F8 D000                  		lea	($FFFFD000).w,a1
00012AB2 3029 0008                  		move.w	8(a1),d0
00012AB6 3228 0008                  		move.w	8(a0),d1
00012ABA 0441 0010                  		subi.w	#$10,d1
00012ABE B240                       		cmp.w	d0,d1
00012AC0 6400                       		bcc.s	loc_12998
00012AC2 0641 0020                  		addi.w	#$20,d1
00012AC6 B240                       		cmp.w	d0,d1
00012AC8 6500                       		bcs.s	loc_12998
00012ACA 3029 000C                  		move.w	$C(a1),d0
00012ACE 3228 000C                  		move.w	$C(a0),d1
00012AD2 B240                       		cmp.w	d0,d1
00012AD4 6400                       		bcc.s	loc_12998
00012AD6 0641 0010                  		addi.w	#$10,d1
00012ADA B240                       		cmp.w	d0,d1
00012ADC 6500                       		bcs.s	loc_12998
00012ADE 7001                       		moveq	#1,d0
00012AE0 4E75                       		rts	
00012AE2                            ; ===========================================================================
00012AE2                            
00012AE2                            loc_12998:
00012AE2 7000                       		moveq	#0,d0
00012AE4 4E75                       		rts	
00012AE6                            ; ===========================================================================
00012AE6                            Ani_obj64:
00012AE6                            	include "_anim\obj64.asm"
00012AE6                            ; ---------------------------------------------------------------------------
00012AE6                            ; Animation script - bubbles (LZ)
00012AE6                            ; ---------------------------------------------------------------------------
00012AE6 0000                       		dc.w byte_129AA-Ani_obj64
00012AE8 0000                       		dc.w byte_129B0-Ani_obj64
00012AEA 0000                       		dc.w byte_129B6-Ani_obj64
00012AEC 0000                       		dc.w byte_129BE-Ani_obj64
00012AEE 0000                       		dc.w byte_129BE-Ani_obj64
00012AF0 0000                       		dc.w byte_129C0-Ani_obj64
00012AF2 0000                       		dc.w byte_129C6-Ani_obj64
00012AF4 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012AFA 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00012B00 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012B08 04FC                       byte_129BE:	dc.b 4,	$FC
00012B0A 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00012B10 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012B16 00                         		even
00012B16 00                         		even
00012B16                            
00012B16                            ; ---------------------------------------------------------------------------
00012B16                            ; Sprite mappings - bubbles (LZ)
00012B16                            ; ---------------------------------------------------------------------------
00012B16                            Map_obj64:
00012B16                            	include "_maps\obj64.asm"
00012B16                            ; ---------------------------------------------------------------------------
00012B16                            ; Sprite mappings - bubbles (LZ)
00012B16                            ; ---------------------------------------------------------------------------
00012B16 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012B1A 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00012B1E 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012B22 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012B26 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012B2A 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00012B2E 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012B32 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012B36 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012B3A 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00012B3E 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012B42 0000                       		dc.w byte_12A9C-Map_obj64
00012B44 01                         byte_129FA:	dc.b 1
00012B45 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012B4A 01                         byte_12A00:	dc.b 1
00012B4B FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00012B50 01                         byte_12A06:	dc.b 1
00012B51 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012B56 01                         byte_12A0C:	dc.b 1
00012B57 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00012B5C 01                         byte_12A12:	dc.b 1
00012B5D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012B62 01                         byte_12A18:	dc.b 1
00012B63 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012B68 01                         byte_12A1E:	dc.b 1
00012B69 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00012B6E 04                         byte_12A24:	dc.b 4
00012B6F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012B74 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012B79 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00012B7E 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00012B83 04                         byte_12A39:	dc.b 4
00012B84 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00012B89 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00012B8E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00012B93 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00012B98 01                         byte_12A4E:	dc.b 1
00012B99 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00012B9E 01                         byte_12A54:	dc.b 1
00012B9F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00012BA4 01                         byte_12A5A:	dc.b 1
00012BA5 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00012BAA 01                         byte_12A60:	dc.b 1
00012BAB F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00012BB0 01                         byte_12A66:	dc.b 1
00012BB1 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00012BB6 01                         byte_12A6C:	dc.b 1
00012BB7 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00012BBC 01                         byte_12A72:	dc.b 1
00012BBD F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00012BC2 01                         byte_12A78:	dc.b 1
00012BC3 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00012BC8 01                         byte_12A7E:	dc.b 1
00012BC9 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00012BCE 01                         byte_12A84:	dc.b 1
00012BCF F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00012BD4 01                         byte_12A8A:	dc.b 1
00012BD5 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00012BDA 01                         byte_12A90:	dc.b 1
00012BDB F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00012BE0 01                         byte_12A96:	dc.b 1
00012BE1 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012BE6 00                         byte_12A9C:	dc.b 0
00012BE8 00                         		even
00012BE8 00                         		even
00012BE8                            
00012BE8                            ; ===========================================================================
00012BE8                            ; ---------------------------------------------------------------------------
00012BE8                            ; Object 65 - waterfalls (LZ)
00012BE8                            ; ---------------------------------------------------------------------------
00012BE8                            
00012BE8                            Obj65:					; XREF: Obj_Index
00012BE8 7000                       		moveq	#0,d0
00012BEA 1028 0024                  		move.b	$24(a0),d0
00012BEE 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012BF2 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012BF6                            ; ===========================================================================
00012BF6 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012BF8 0000                       		dc.w Obj65_Animate-Obj65_Index
00012BFA 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012BFC 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012BFE 0000                       		dc.w loc_12B36-Obj65_Index
00012C00                            ; ===========================================================================
00012C00                            
00012C00                            Obj65_Main:				; XREF: Obj65_Index
00012C00 5828 0024                  		addq.b	#4,$24(a0)
00012C04 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012C0C 317C 4259 0002             		move.w	#$4259,2(a0)
00012C12 0028 0004 0001             		ori.b	#4,1(a0)
00012C18 117C 0018 0019             		move.b	#$18,$19(a0)
00012C1E 117C 0001 0018             		move.b	#1,$18(a0)
00012C24 1028 0028                  		move.b	$28(a0),d0	; get object type
00012C28 6A00                       		bpl.s	loc_12AE6
00012C2A 08E8 0007 0002             		bset	#7,2(a0)
00012C30                            
00012C30                            loc_12AE6:
00012C30 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00012C34 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00012C38 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00012C3C 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00012C3E 4228 0018                  		clr.b	$18(a0)
00012C42 5528 0024                  		subq.b	#2,$24(a0)
00012C46 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00012C4C 6700                       		beq.s	loc_12B0A	; if not, branch
00012C4E 117C 0006 0024             		move.b	#6,$24(a0)
00012C54                            
00012C54                            loc_12B0A:
00012C54 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00012C5A 6700                       		beq.s	Obj65_Animate	; if not, branch
00012C5C 117C 0008 0024             		move.b	#8,$24(a0)
00012C62                            
00012C62                            Obj65_Animate:				; XREF: Obj65_Index
00012C62 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00012C68 4EB9 0000 A7EE             		jsr	AnimateSprite
00012C6E                            
00012C6E                            Obj65_ChkDel:				; XREF: Obj65_Index
00012C6E 6000 CBB4                  		bra.w	MarkObjGone
00012C72                            ; ===========================================================================
00012C72                            
00012C72                            Obj65_FixHeight:			; XREF: Obj65_Index
00012C72 3038 F646                  		move.w	($FFFFF646).w,d0
00012C76 0440 0010                  		subi.w	#$10,d0
00012C7A 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00012C7E 60E2                       		bra.s	Obj65_Animate
00012C80                            ; ===========================================================================
00012C80                            
00012C80                            loc_12B36:				; XREF: Obj65_Index
00012C80 08A8 0007 0002             		bclr	#7,2(a0)
00012C86 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00012C8C 6600                       		bne.s	Obj65_Animate2
00012C8E 08E8 0007 0002             		bset	#7,2(a0)
00012C94                            
00012C94                            Obj65_Animate2:
00012C94 60CC                       		bra.s	Obj65_Animate
00012C96                            ; ===========================================================================
00012C96                            Ani_obj65:
00012C96                            	include "_anim\obj65.asm"
00012C96                            ; ---------------------------------------------------------------------------
00012C96                            ; Animation script - waterfall (LZ)
00012C96                            ; ---------------------------------------------------------------------------
00012C96 0000                       		dc.w byte_12B4E-Ani_obj65
00012C98 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00012C9E 00                         		even
00012C9E 00                         		even
00012C9E                            
00012C9E                            ; ---------------------------------------------------------------------------
00012C9E                            ; Sprite mappings - waterfalls (LZ)
00012C9E                            ; ---------------------------------------------------------------------------
00012C9E                            Map_obj65:
00012C9E                            	include "_maps\obj65.asm"
00012C9E                            ; ---------------------------------------------------------------------------
00012C9E                            ; Sprite mappings - waterfalls (LZ)
00012C9E                            ; ---------------------------------------------------------------------------
00012C9E 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00012CA2 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00012CA6 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00012CAA 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00012CAE 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00012CB2 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00012CB6 01                         byte_12B6C:	dc.b 1
00012CB7 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00012CBC 02                         byte_12B72:	dc.b 2
00012CBD F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00012CC2 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00012CC7 02                         byte_12B7D:	dc.b 2
00012CC8 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012CCD 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012CD2 01                         byte_12B88:	dc.b 1
00012CD3 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00012CD8 02                         byte_12B8E:	dc.b 2
00012CD9 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012CDE 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012CE3 01                         byte_12B99:	dc.b 1
00012CE4 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00012CE9 01                         byte_12B9F:	dc.b 1
00012CEA F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00012CEF 01                         byte_12BA5:	dc.b 1
00012CF0 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00012CF5 02                         byte_12BAB:	dc.b 2
00012CF6 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00012CFB 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00012D00 02                         byte_12BB6:	dc.b 2
00012D01 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00012D06 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00012D0B 02                         byte_12BC1:	dc.b 2
00012D0C F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00012D11 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00012D16 02                         byte_12BCC:	dc.b 2
00012D17 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00012D1C F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00012D22 00                         		even
00012D22 00                         		even
00012D22                            
00012D22                            ; ===========================================================================
00012D22                            ; ---------------------------------------------------------------------------
00012D22                            ; Object 01 - Sonic
00012D22                            ; ---------------------------------------------------------------------------
00012D22                            
00012D22                            Obj01:					; XREF: Obj_Index
00012D22 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00012D26 6700                       		beq.s	Obj01_Normal	; if not, branch
00012D28 4EF9 0000 0000             		jmp	DebugMode
00012D2E                            ; ===========================================================================
00012D2E                            
00012D2E                            Obj01_Normal:
00012D2E 7000                       		moveq	#0,d0
00012D30 1028 0024                  		move.b	$24(a0),d0
00012D34 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00012D38 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00012D3C                            ; ===========================================================================
00012D3C 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00012D3E 0000                       		dc.w Obj01_Control-Obj01_Index
00012D40 0000                       		dc.w Obj01_Hurt-Obj01_Index
00012D42 0000                       		dc.w Obj01_Death-Obj01_Index
00012D44 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00012D46                            ; ===========================================================================
00012D46                            
00012D46                            Obj01_Main:				; XREF: Obj01_Index
00012D46 5428 0024                  		addq.b	#2,$24(a0)
00012D4A 117C 0013 0016             		move.b	#$13,$16(a0)
00012D50 117C 0009 0017             		move.b	#9,$17(a0)
00012D56 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00012D5E 317C 0780 0002             		move.w	#$780,2(a0)
00012D64 117C 0002 0018             		move.b	#2,$18(a0)
00012D6A 117C 0018 0019             		move.b	#$18,$19(a0)
00012D70 117C 0004 0001             		move.b	#4,1(a0)
00012D76 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00012D7C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00012D82 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00012D88                            
00012D88                            Obj01_Control:				; XREF: Obj01_Index
00012D88 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00012D8C 6700                       		beq.s	loc_12C58	; if not, branch
00012D8E 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00012D94 6700                       		beq.s	loc_12C58	; if not, branch
00012D96 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00012D9C 4238 F7CC                  		clr.b	($FFFFF7CC).w
00012DA0 4E75                       		rts	
00012DA2                            ; ===========================================================================
00012DA2                            
00012DA2                            loc_12C58:
00012DA2 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00012DA6 6600                       		bne.s	loc_12C64	; if yes, branch
00012DA8 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00012DAE                            
00012DAE                            loc_12C64:
00012DAE 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00012DB4 6600                       		bne.s	loc_12C7E	; if yes, branch
00012DB6 7000                       		moveq	#0,d0
00012DB8 1028 0022                  		move.b	$22(a0),d0
00012DBC 0240 0006                  		andi.w	#6,d0
00012DC0 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00012DC4 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00012DC8                            
00012DC8                            loc_12C7E:
00012DC8 6100                       		bsr.s	Sonic_Display
00012DCA 6100 0000                  		bsr.w	Sonic_RecordPos
00012DCE 6100 0000                  		bsr.w	Sonic_Water
00012DD2 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00012DD8 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00012DDE 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00012DE2 6700                       		beq.s	loc_12CA6
00012DE4 4A28 001C                  		tst.b	$1C(a0)
00012DE8 6600                       		bne.s	loc_12CA6
00012DEA 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00012DF0                            
00012DF0                            loc_12CA6:
00012DF0 6100 0000                  		bsr.w	Sonic_Animate
00012DF4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012DF8 6B00                       		bmi.s	loc_12CB6
00012DFA 4EB9 0000 0000             		jsr	TouchResponse
00012E00                            
00012E00                            loc_12CB6:
00012E00 6100 0000                  		bsr.w	Sonic_Loops
00012E04 6100 0000                  		bsr.w	LoadSonicDynPLC
00012E08 4E75                       		rts	
00012E0A                            ; ===========================================================================
00012E0A 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00012E0C 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00012E0E 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00012E10 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00012E12                            ; ---------------------------------------------------------------------------
00012E12                            ; Music	to play	after invincibility wears off
00012E12                            ; ---------------------------------------------------------------------------
00012E12                            MusicList2:	incbin	misc\muslist2.bin
00012E18                            		even
00012E18                            ; ===========================================================================
00012E18                            
00012E18                            Sonic_Display:				; XREF: loc_12C7E
00012E18 3028 0030                  		move.w	$30(a0),d0
00012E1C 6700                       		beq.s	Obj01_Display
00012E1E 5368 0030                  		subq.w	#1,$30(a0)
00012E22 E648                       		lsr.w	#3,d0
00012E24 6400                       		bcc.s	Obj01_ChkInvin
00012E26                            
00012E26                            Obj01_Display:
00012E26 4EBA A954                  		jsr	DisplaySprite
00012E2A                            
00012E2A                            Obj01_ChkInvin:
00012E2A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00012E2E 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00012E30 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00012E34 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00012E36 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00012E3A 6600                       		bne.s	Obj01_ChkShoes
00012E3C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00012E40 6600                       		bne.s	Obj01_RmvInvin
00012E42 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00012E48 6500                       		bcs.s	Obj01_RmvInvin
00012E4A 7000                       		moveq	#0,d0
00012E4C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00012E50 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
00012E56 6600                       		bne.s	Obj01_PlayMusic
00012E58 7005                       		moveq	#5,d0		; play SBZ music
00012E5A                            
00012E5A                            Obj01_PlayMusic:
00012E5A 43F9 0001 2E12             		lea	(MusicList2).l,a1
00012E60 1031 0000                  		move.b	(a1,d0.w),d0
00012E64 4EB9 0000 1396             		jsr	(PlaySound).l	; play normal music
00012E6A                            
00012E6A                            Obj01_RmvInvin:
00012E6A 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00012E70                            
00012E70                            Obj01_ChkShoes:
00012E70 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00012E74 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00012E76 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00012E7A 6700                       		beq.s	Obj01_ExitChk
00012E7C 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00012E80 6600                       		bne.s	Obj01_ExitChk
00012E82 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012E88 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012E8E 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012E94 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00012E9A 303C 00E3                  		move.w	#$E3,d0
00012E9E 4EF9 0000 1396             		jmp	(PlaySound).l	; run music at normal speed
00012EA4                            ; ===========================================================================
00012EA4                            
00012EA4                            Obj01_ExitChk:
00012EA4 4E75                       		rts	
00012EA6                            
00012EA6                            ; ---------------------------------------------------------------------------
00012EA6                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00012EA6                            ; ---------------------------------------------------------------------------
00012EA6                            
00012EA6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012EA6                            
00012EA6                            
00012EA6                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00012EA6 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00012EAA 43F8 CB00                  		lea	($FFFFCB00).w,a1
00012EAE 43F1 0000                  		lea	(a1,d0.w),a1
00012EB2 32E8 0008                  		move.w	8(a0),(a1)+
00012EB6 32E8 000C                  		move.w	$C(a0),(a1)+
00012EBA 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00012EBE 4E75                       		rts	
00012EC0                            ; End of function Sonic_RecordPos
00012EC0                            
00012EC0                            ; ---------------------------------------------------------------------------
00012EC0                            ; Subroutine for Sonic when he's underwater
00012EC0                            ; ---------------------------------------------------------------------------
00012EC0                            
00012EC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012EC0                            
00012EC0                            
00012EC0                            Sonic_Water:				; XREF: loc_12C7E
00012EC0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00012EC6 6700                       		beq.s	Obj01_InWater	; if yes, branch
00012EC8                            
00012EC8                            locret_12D80:
00012EC8 4E75                       		rts	
00012ECA                            ; ===========================================================================
00012ECA                            
00012ECA                            Obj01_InWater:
00012ECA 3038 F646                  		move.w	($FFFFF646).w,d0
00012ECE B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00012ED2 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00012ED4 08E8 0006 0022             		bset	#6,$22(a0)
00012EDA 66EC                       		bne.s	locret_12D80
00012EDC 6100 0000                  		bsr.w	ResumeMusic
00012EE0 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00012EE6 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00012EEC 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00012EF2 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00012EF8 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00012EFE E0E8 0010                  		asr	$10(a0)
00012F02 E0E8 0012                  		asr	$12(a0)
00012F06 E0E8 0012                  		asr	$12(a0)
00012F0A 67BC                       		beq.s	locret_12D80
00012F0C 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012F12 303C 00AA                  		move.w	#$AA,d0
00012F16 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play splash sound
00012F1C                            ; ===========================================================================
00012F1C                            
00012F1C                            Obj01_OutWater:
00012F1C 08A8 0006 0022             		bclr	#6,$22(a0)
00012F22 67A4                       		beq.s	locret_12D80
00012F24 6100 0000                  		bsr.w	ResumeMusic
00012F28 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012F2E 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012F34 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012F3A E1E8 0012                  		asl	$12(a0)
00012F3E 6700 FF88                  		beq.w	locret_12D80
00012F42 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012F48 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00012F4E 6E00                       		bgt.s	loc_12E0E
00012F50 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00012F56                            
00012F56                            loc_12E0E:
00012F56 303C 00AA                  		move.w	#$AA,d0
00012F5A 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play splash sound
00012F60                            ; End of function Sonic_Water
00012F60                            
00012F60                            ; ===========================================================================
00012F60                            ; ---------------------------------------------------------------------------
00012F60                            ; Modes	for controlling	Sonic
00012F60                            ; ---------------------------------------------------------------------------
00012F60                            
00012F60                            Obj01_MdNormal:				; XREF: Obj01_Modes
00012F60 6100 0000                  		bsr.w	Sonic_Jump
00012F64 6100 0000                  		bsr.w	Sonic_SlopeResist
00012F68 6100 0000                  		bsr.w	Sonic_Move
00012F6C 6100 0000                  		bsr.w	Sonic_Roll
00012F70 6100 0000                  		bsr.w	Sonic_LevelBound
00012F74 4EBA A7E0                  		jsr	SpeedToPos
00012F78 6100 0000                  		bsr.w	Sonic_AnglePos
00012F7C 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012F80 4E75                       		rts	
00012F82                            ; ===========================================================================
00012F82                            
00012F82                            Obj01_MdJump:				; XREF: Obj01_Modes
00012F82 6100 0000                  		bsr.w	Sonic_JumpHeight
00012F86 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012F8A 6100 0000                  		bsr.w	Sonic_LevelBound
00012F8E 4EBA A79A                  		jsr	ObjectFall
00012F92 0828 0006 0022             		btst	#6,$22(a0)
00012F98 6700                       		beq.s	loc_12E5C
00012F9A 0468 0028 0012             		subi.w	#$28,$12(a0)
00012FA0                            
00012FA0                            loc_12E5C:
00012FA0 6100 0000                  		bsr.w	Sonic_JumpAngle
00012FA4 6100 0000                  		bsr.w	Sonic_Floor
00012FA8 4E75                       		rts	
00012FAA                            ; ===========================================================================
00012FAA                            
00012FAA                            Obj01_MdRoll:				; XREF: Obj01_Modes
00012FAA 6100 0000                  		bsr.w	Sonic_Jump
00012FAE 6100 0000                  		bsr.w	Sonic_RollRepel
00012FB2 6100 0000                  		bsr.w	Sonic_RollSpeed
00012FB6 6100 0000                  		bsr.w	Sonic_LevelBound
00012FBA 4EBA A79A                  		jsr	SpeedToPos
00012FBE 6100 0000                  		bsr.w	Sonic_AnglePos
00012FC2 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012FC6 4E75                       		rts	
00012FC8                            ; ===========================================================================
00012FC8                            
00012FC8                            Obj01_MdJump2:				; XREF: Obj01_Modes
00012FC8 6100 0000                  		bsr.w	Sonic_JumpHeight
00012FCC 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012FD0 6100 0000                  		bsr.w	Sonic_LevelBound
00012FD4 4EBA A754                  		jsr	ObjectFall
00012FD8 0828 0006 0022             		btst	#6,$22(a0)
00012FDE 6700                       		beq.s	loc_12EA6
00012FE0 0468 0028 0012             		subi.w	#$28,$12(a0)
00012FE6                            
00012FE6                            loc_12EA6:
00012FE6 6100 0000                  		bsr.w	Sonic_JumpAngle
00012FEA 6100 0000                  		bsr.w	Sonic_Floor
00012FEE 4E75                       		rts	
00012FF0                            ; ---------------------------------------------------------------------------
00012FF0                            ; Subroutine to	make Sonic walk/run
00012FF0                            ; ---------------------------------------------------------------------------
00012FF0                            
00012FF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012FF0                            
00012FF0                            
00012FF0                            Sonic_Move:				; XREF: Obj01_MdNormal
00012FF0 3C38 F760                  		move.w	($FFFFF760).w,d6
00012FF4 3A38 F762                  		move.w	($FFFFF762).w,d5
00012FF8 3838 F764                  		move.w	($FFFFF764).w,d4
00012FFC 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013000 6600 0000                  		bne.w	loc_12FEE
00013004 4A68 003E                  		tst.w	$3E(a0)
00013008 6600 0000                  		bne.w	Obj01_ResetScr
0001300C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00013012 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00013014 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001301A 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
0001301C 6100 0000                  		bsr.w	Sonic_MoveLeft
00013020                            
00013020                            Obj01_NotLeft:
00013020 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00013026 6700                       		beq.s	Obj01_NotRight	; if not, branch
00013028 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001302E 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00013030 6100 0000                  		bsr.w	Sonic_MoveLeft
00013034 6000                       		bra.s	Obj01_NotRight
00013036                            
00013036                            Obj01_MoveRight:
00013036 6100 0000                  		bsr.w	Sonic_MoveRight
0001303A                            
0001303A                            Obj01_NotRight:
0001303A 1028 0026                  		move.b	$26(a0),d0
0001303E 0600 0020                  		addi.b	#$20,d0
00013042 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00013046 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001304A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001304E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00013052 08A8 0005 0022             		bclr	#5,$22(a0)
00013058 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001305E 0828 0003 0022             		btst	#3,$22(a0)
00013064 6700                       		beq.s	Sonic_Balance
00013066 7000                       		moveq	#0,d0
00013068 1028 003D                  		move.b	$3D(a0),d0
0001306C ED48                       		lsl.w	#6,d0
0001306E 43F8 D000                  		lea	($FFFFD000).w,a1
00013072 43F1 0000                  		lea	(a1,d0.w),a1
00013076 4A29 0022                  		tst.b	$22(a1)
0001307A 6B00                       		bmi.s	Sonic_LookUp
0001307C 7200                       		moveq	#0,d1
0001307E 1229 0019                  		move.b	$19(a1),d1
00013082 3401                       		move.w	d1,d2
00013084 D442                       		add.w	d2,d2
00013086 5942                       		subq.w	#4,d2
00013088 D268 0008                  		add.w	8(a0),d1
0001308C 9269 0008                  		sub.w	8(a1),d1
00013090 0C41 0004                  		cmpi.w	#4,d1
00013094 6D00                       		blt.s	loc_12F6A
00013096 B242                       		cmp.w	d2,d1
00013098 6C00                       		bge.s	loc_12F5A
0001309A 6000                       		bra.s	Sonic_LookUp
0001309C                            ; ===========================================================================
0001309C                            
0001309C                            Sonic_Balance:
0001309C 4EB9 0000 0000             		jsr	ObjHitFloor
000130A2 0C41 000C                  		cmpi.w	#$C,d1
000130A6 6D00                       		blt.s	Sonic_LookUp
000130A8 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000130AE 6600                       		bne.s	loc_12F62
000130B0                            
000130B0                            loc_12F5A:
000130B0 08A8 0000 0022             		bclr	#0,$22(a0)
000130B6 6000                       		bra.s	loc_12F70
000130B8                            ; ===========================================================================
000130B8                            
000130B8                            loc_12F62:
000130B8 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000130BE 6600                       		bne.s	Sonic_LookUp
000130C0                            
000130C0                            loc_12F6A:
000130C0 08E8 0000 0022             		bset	#0,$22(a0)
000130C6                            
000130C6                            loc_12F70:
000130C6 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000130CC 6000                       		bra.s	Obj01_ResetScr
000130CE                            ; ===========================================================================
000130CE                            
000130CE                            Sonic_LookUp:
000130CE 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000130D4 6700                       		beq.s	Sonic_Duck	; if not, branch
000130D6 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000130DC 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000130E2 6700                       		beq.s	loc_12FC2
000130E4 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000130E8 6000                       		bra.s	loc_12FC2
000130EA                            ; ===========================================================================
000130EA                            
000130EA                            Sonic_Duck:
000130EA 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
000130F0 6700                       		beq.s	Obj01_ResetScr	; if not, branch
000130F2 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
000130F8 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
000130FE 6700                       		beq.s	loc_12FC2
00013100 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013104 6000                       		bra.s	loc_12FC2
00013106                            ; ===========================================================================
00013106                            
00013106                            Obj01_ResetScr:
00013106 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001310C 6700                       		beq.s	loc_12FC2	; if yes, branch
0001310E 6400                       		bcc.s	loc_12FBE
00013110 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00013114                            
00013114                            loc_12FBE:
00013114 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00013118                            
00013118                            loc_12FC2:
00013118 1038 F602                  		move.b	($FFFFF602).w,d0
0001311C 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00013120 6600                       		bne.s	loc_12FEE	; if yes, branch
00013122 3028 0014                  		move.w	$14(a0),d0
00013126 6700                       		beq.s	loc_12FEE
00013128 6B00                       		bmi.s	loc_12FE2
0001312A 9045                       		sub.w	d5,d0
0001312C 6400                       		bcc.s	loc_12FDC
0001312E 303C 0000                  		move.w	#0,d0
00013132                            
00013132                            loc_12FDC:
00013132 3140 0014                  		move.w	d0,$14(a0)
00013136 6000                       		bra.s	loc_12FEE
00013138                            ; ===========================================================================
00013138                            
00013138                            loc_12FE2:
00013138 D045                       		add.w	d5,d0
0001313A 6400                       		bcc.s	loc_12FEA
0001313C 303C 0000                  		move.w	#0,d0
00013140                            
00013140                            loc_12FEA:
00013140 3140 0014                  		move.w	d0,$14(a0)
00013144                            
00013144                            loc_12FEE:
00013144 1028 0026                  		move.b	$26(a0),d0
00013148 4EB9 0000 29DA             		jsr	(CalcSine).l
0001314E C3E8 0014                  		muls.w	$14(a0),d1
00013152 E081                       		asr.l	#8,d1
00013154 3141 0010                  		move.w	d1,$10(a0)
00013158 C1E8 0014                  		muls.w	$14(a0),d0
0001315C E080                       		asr.l	#8,d0
0001315E 3140 0012                  		move.w	d0,$12(a0)
00013162                            
00013162                            loc_1300C:
00013162 1028 0026                  		move.b	$26(a0),d0
00013166 0600 0040                  		addi.b	#$40,d0
0001316A 6B00                       		bmi.s	locret_1307C
0001316C 123C 0040                  		move.b	#$40,d1
00013170 4A68 0014                  		tst.w	$14(a0)
00013174 6700                       		beq.s	locret_1307C
00013176 6B00                       		bmi.s	loc_13024
00013178 4441                       		neg.w	d1
0001317A                            
0001317A                            loc_13024:
0001317A 1028 0026                  		move.b	$26(a0),d0
0001317E D001                       		add.b	d1,d0
00013180 3F00                       		move.w	d0,-(sp)
00013182 6100 0000                  		bsr.w	Sonic_WalkSpeed
00013186 301F                       		move.w	(sp)+,d0
00013188 4A41                       		tst.w	d1
0001318A 6A00                       		bpl.s	locret_1307C
0001318C E141                       		asl.w	#8,d1
0001318E 0600 0020                  		addi.b	#$20,d0
00013192 0200 00C0                  		andi.b	#$C0,d0
00013196 6700                       		beq.s	loc_13078
00013198 0C00 0040                  		cmpi.b	#$40,d0
0001319C 6700                       		beq.s	loc_13066
0001319E 0C00 0080                  		cmpi.b	#$80,d0
000131A2 6700                       		beq.s	loc_13060
000131A4 D368 0010                  		add.w	d1,$10(a0)
000131A8 08E8 0005 0022             		bset	#5,$22(a0)
000131AE 317C 0000 0014             		move.w	#0,$14(a0)
000131B4 4E75                       		rts	
000131B6                            ; ===========================================================================
000131B6                            
000131B6                            loc_13060:
000131B6 9368 0012                  		sub.w	d1,$12(a0)
000131BA 4E75                       		rts	
000131BC                            ; ===========================================================================
000131BC                            
000131BC                            loc_13066:
000131BC 9368 0010                  		sub.w	d1,$10(a0)
000131C0 08E8 0005 0022             		bset	#5,$22(a0)
000131C6 317C 0000 0014             		move.w	#0,$14(a0)
000131CC 4E75                       		rts	
000131CE                            ; ===========================================================================
000131CE                            
000131CE                            loc_13078:
000131CE D368 0012                  		add.w	d1,$12(a0)
000131D2                            
000131D2                            locret_1307C:
000131D2 4E75                       		rts	
000131D4                            ; End of function Sonic_Move
000131D4                            
000131D4                            
000131D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000131D4                            
000131D4                            
000131D4                            Sonic_MoveLeft:				; XREF: Sonic_Move
000131D4 3028 0014                  		move.w	$14(a0),d0
000131D8 6700                       		beq.s	loc_13086
000131DA 6A00                       		bpl.s	loc_130B2
000131DC                            
000131DC                            loc_13086:
000131DC 08E8 0000 0022             		bset	#0,$22(a0)
000131E2 6600                       		bne.s	loc_1309A
000131E4 08A8 0005 0022             		bclr	#5,$22(a0)
000131EA 117C 0001 001D             		move.b	#1,$1D(a0)
000131F0                            
000131F0                            loc_1309A:
000131F0 9045                       		sub.w	d5,d0
000131F2 3206                       		move.w	d6,d1
000131F4 4441                       		neg.w	d1
000131F6 B041                       		cmp.w	d1,d0
000131F8 6E00                       		bgt.s	loc_130A6
000131FA 3001                       		move.w	d1,d0
000131FC                            
000131FC                            loc_130A6:
000131FC 3140 0014                  		move.w	d0,$14(a0)
00013200 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013206 4E75                       		rts	
00013208                            ; ===========================================================================
00013208                            
00013208                            loc_130B2:				; XREF: Sonic_MoveLeft
00013208 9044                       		sub.w	d4,d0
0001320A 6400                       		bcc.s	loc_130BA
0001320C 303C FF80                  		move.w	#-$80,d0
00013210                            
00013210                            loc_130BA:
00013210 3140 0014                  		move.w	d0,$14(a0)
00013214 1028 0026                  		move.b	$26(a0),d0
00013218 0600 0020                  		addi.b	#$20,d0
0001321C 0200 00C0                  		andi.b	#$C0,d0
00013220 6600                       		bne.s	locret_130E8
00013222 0C40 0400                  		cmpi.w	#$400,d0
00013226 6D00                       		blt.s	locret_130E8
00013228 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001322E 08A8 0000 0022             		bclr	#0,$22(a0)
00013234 303C 00A4                  		move.w	#$A4,d0
00013238 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stopping sound
0001323E                            
0001323E                            locret_130E8:
0001323E 4E75                       		rts	
00013240                            ; End of function Sonic_MoveLeft
00013240                            
00013240                            
00013240                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013240                            
00013240                            
00013240                            Sonic_MoveRight:			; XREF: Sonic_Move
00013240 3028 0014                  		move.w	$14(a0),d0
00013244 6B00                       		bmi.s	loc_13118
00013246 08A8 0000 0022             		bclr	#0,$22(a0)
0001324C 6700                       		beq.s	loc_13104
0001324E 08A8 0005 0022             		bclr	#5,$22(a0)
00013254 117C 0001 001D             		move.b	#1,$1D(a0)
0001325A                            
0001325A                            loc_13104:
0001325A D045                       		add.w	d5,d0
0001325C B046                       		cmp.w	d6,d0
0001325E 6D00                       		blt.s	loc_1310C
00013260 3006                       		move.w	d6,d0
00013262                            
00013262                            loc_1310C:
00013262 3140 0014                  		move.w	d0,$14(a0)
00013266 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001326C 4E75                       		rts	
0001326E                            ; ===========================================================================
0001326E                            
0001326E                            loc_13118:				; XREF: Sonic_MoveRight
0001326E D044                       		add.w	d4,d0
00013270 6400                       		bcc.s	loc_13120
00013272 303C 0080                  		move.w	#$80,d0
00013276                            
00013276                            loc_13120:
00013276 3140 0014                  		move.w	d0,$14(a0)
0001327A 1028 0026                  		move.b	$26(a0),d0
0001327E 0600 0020                  		addi.b	#$20,d0
00013282 0200 00C0                  		andi.b	#$C0,d0
00013286 6600                       		bne.s	locret_1314E
00013288 0C40 FC00                  		cmpi.w	#-$400,d0
0001328C 6E00                       		bgt.s	locret_1314E
0001328E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013294 08E8 0000 0022             		bset	#0,$22(a0)
0001329A 303C 00A4                  		move.w	#$A4,d0
0001329E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stopping sound
000132A4                            
000132A4                            locret_1314E:
000132A4 4E75                       		rts	
000132A6                            ; End of function Sonic_MoveRight
000132A6                            
000132A6                            ; ---------------------------------------------------------------------------
000132A6                            ; Subroutine to	change Sonic's speed as he rolls
000132A6                            ; ---------------------------------------------------------------------------
000132A6                            
000132A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132A6                            
000132A6                            
000132A6                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000132A6 3C38 F760                  		move.w	($FFFFF760).w,d6
000132AA E346                       		asl.w	#1,d6
000132AC 3A38 F762                  		move.w	($FFFFF762).w,d5
000132B0 E245                       		asr.w	#1,d5
000132B2 3838 F764                  		move.w	($FFFFF764).w,d4
000132B6 E444                       		asr.w	#2,d4
000132B8 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000132BC 6600 0000                  		bne.w	loc_131CC
000132C0 4A68 003E                  		tst.w	$3E(a0)
000132C4 6600                       		bne.s	loc_13188
000132C6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000132CC 6700                       		beq.s	loc_1317C	; if not, branch
000132CE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000132D4 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000132D6 6100 0000                  		bsr.w	Sonic_RollLeft
000132DA                            
000132DA                            loc_1317C:
000132DA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000132E0 6700                       		beq.s	loc_13188	; if not, branch
000132E2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000132E8 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
000132EA 6100 0000                  		bsr.w	Sonic_RollLeft
000132EE 6000                       		bra.s	loc_13188
000132F0                            
000132F0                            SonicRS_RollRight:
000132F0 6100 0000                  		bsr.w	Sonic_RollRight
000132F4                            
000132F4                            loc_13188:
000132F4 3028 0014                  		move.w	$14(a0),d0
000132F8 6700                       		beq.s	loc_131AA
000132FA 6B00                       		bmi.s	loc_1319E
000132FC 9045                       		sub.w	d5,d0
000132FE 6400                       		bcc.s	loc_13198
00013300 303C 0000                  		move.w	#0,d0
00013304                            
00013304                            loc_13198:
00013304 3140 0014                  		move.w	d0,$14(a0)
00013308 6000                       		bra.s	loc_131AA
0001330A                            ; ===========================================================================
0001330A                            
0001330A                            loc_1319E:				; XREF: Sonic_RollSpeed
0001330A D045                       		add.w	d5,d0
0001330C 6400                       		bcc.s	loc_131A6
0001330E 303C 0000                  		move.w	#0,d0
00013312                            
00013312                            loc_131A6:
00013312 3140 0014                  		move.w	d0,$14(a0)
00013316                            
00013316                            loc_131AA:
00013316 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001331A 6600                       		bne.s	loc_131CC	; if yes, branch
0001331C 08A8 0002 0022             		bclr	#2,$22(a0)
00013322 117C 0013 0016             		move.b	#$13,$16(a0)
00013328 117C 0009 0017             		move.b	#9,$17(a0)
0001332E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013334 5B68 000C                  		subq.w	#5,$C(a0)
00013338                            
00013338                            loc_131CC:
00013338 1028 0026                  		move.b	$26(a0),d0
0001333C 4EB9 0000 29DA             		jsr	(CalcSine).l
00013342 C1E8 0014                  		muls.w	$14(a0),d0
00013346 E080                       		asr.l	#8,d0
00013348 3140 0012                  		move.w	d0,$12(a0)
0001334C C3E8 0014                  		muls.w	$14(a0),d1
00013350 E081                       		asr.l	#8,d1
00013352 0C41 1000                  		cmpi.w	#$1000,d1
00013356 6F00                       		ble.s	loc_131F0
00013358 323C 1000                  		move.w	#$1000,d1
0001335C                            
0001335C                            loc_131F0:
0001335C 0C41 F000                  		cmpi.w	#-$1000,d1
00013360 6C00                       		bge.s	loc_131FA
00013362 323C F000                  		move.w	#-$1000,d1
00013366                            
00013366                            loc_131FA:
00013366 3141 0010                  		move.w	d1,$10(a0)
0001336A 6000 FDF6                  		bra.w	loc_1300C
0001336E                            ; End of function Sonic_RollSpeed
0001336E                            
0001336E                            
0001336E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001336E                            
0001336E                            
0001336E                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
0001336E 3028 0014                  		move.w	$14(a0),d0
00013372 6700                       		beq.s	loc_1320A
00013374 6A00                       		bpl.s	loc_13218
00013376                            
00013376                            loc_1320A:
00013376 08E8 0000 0022             		bset	#0,$22(a0)
0001337C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013382 4E75                       		rts	
00013384                            ; ===========================================================================
00013384                            
00013384                            loc_13218:
00013384 9044                       		sub.w	d4,d0
00013386 6400                       		bcc.s	loc_13220
00013388 303C FF80                  		move.w	#-$80,d0
0001338C                            
0001338C                            loc_13220:
0001338C 3140 0014                  		move.w	d0,$14(a0)
00013390 4E75                       		rts	
00013392                            ; End of function Sonic_RollLeft
00013392                            
00013392                            
00013392                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013392                            
00013392                            
00013392                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013392 3028 0014                  		move.w	$14(a0),d0
00013396 6B00                       		bmi.s	loc_1323A
00013398 08A8 0000 0022             		bclr	#0,$22(a0)
0001339E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000133A4 4E75                       		rts	
000133A6                            ; ===========================================================================
000133A6                            
000133A6                            loc_1323A:
000133A6 D044                       		add.w	d4,d0
000133A8 6400                       		bcc.s	loc_13242
000133AA 303C 0080                  		move.w	#$80,d0
000133AE                            
000133AE                            loc_13242:
000133AE 3140 0014                  		move.w	d0,$14(a0)
000133B2 4E75                       		rts	
000133B4                            ; End of function Sonic_RollRight
000133B4                            
000133B4                            ; ---------------------------------------------------------------------------
000133B4                            ; Subroutine to	change Sonic's direction while jumping
000133B4                            ; ---------------------------------------------------------------------------
000133B4                            
000133B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133B4                            
000133B4                            
000133B4                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000133B4 3C38 F760                  		move.w	($FFFFF760).w,d6
000133B8 3A38 F762                  		move.w	($FFFFF762).w,d5
000133BC E345                       		asl.w	#1,d5
000133BE 0828 0004 0022             		btst	#4,$22(a0)
000133C4 6600                       		bne.s	Obj01_ResetScr2
000133C6 3028 0010                  		move.w	$10(a0),d0
000133CA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000133D0 6700                       		beq.s	loc_13278	; if not, branch
000133D2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000133D8 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
000133DA 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000133DE 6E00                       		bgt.s	loc_13278
000133E0 3001                       		move.w	d1,d0
000133E2                            
000133E2                            loc_13278:
000133E2 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000133E8 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000133EA 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000133F0 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
000133F2 6100 0000                  		bsr.w	SonicCJD_JumpLeft
000133F6 6E00                       		bgt.s	Obj01_JumpMove
000133F8 3001                       		move.w	d1,d0
000133FA 6000                       		bra.s	Obj01_JumpMove
000133FC                            
000133FC                            SonicCJD_JumpLeft:
000133FC 08E8 0000 0022             		bset	#0,$22(a0)
00013402 9045                       		sub.w	d5,d0
00013404 3206                       		move.w	d6,d1
00013406 4441                       		neg.w	d1
00013408 B041                       		cmp.w	d1,d0
0001340A                            		; bgt.s	loc_13278
0001340A                            		; move.w	d1,d0
0001340A 4E75                       		rts
0001340C                            
0001340C                            SonicCJD_JumpRight:
0001340C 08A8 0000 0022             		bclr	#0,$22(a0)
00013412 D045                       		add.w	d5,d0
00013414 B046                       		cmp.w	d6,d0
00013416 6D00                       		blt.s	Obj01_JumpMove
00013418 3006                       		move.w	d6,d0
0001341A                            
0001341A                            Obj01_JumpMove:
0001341A 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
0001341E                            
0001341E                            Obj01_ResetScr2:
0001341E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
00013424 6700                       		beq.s	loc_132A4	; if yes, branch
00013426 6400                       		bcc.s	loc_132A0
00013428 5878 F73E                  		addq.w	#4,($FFFFF73E).w
0001342C                            
0001342C                            loc_132A0:
0001342C 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013430                            
00013430                            loc_132A4:
00013430 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013436 6500                       		bcs.s	locret_132D2	; if yes, branch
00013438 3028 0010                  		move.w	$10(a0),d0
0001343C 3200                       		move.w	d0,d1
0001343E EA41                       		asr.w	#5,d1
00013440 6700                       		beq.s	locret_132D2
00013442 6B00                       		bmi.s	loc_132C6
00013444 9041                       		sub.w	d1,d0
00013446 6400                       		bcc.s	loc_132C0
00013448 303C 0000                  		move.w	#0,d0
0001344C                            
0001344C                            loc_132C0:
0001344C 3140 0010                  		move.w	d0,$10(a0)
00013450 4E75                       		rts	
00013452                            ; ===========================================================================
00013452                            
00013452                            loc_132C6:
00013452 9041                       		sub.w	d1,d0
00013454 6500                       		bcs.s	loc_132CE
00013456 303C 0000                  		move.w	#0,d0
0001345A                            
0001345A                            loc_132CE:
0001345A 3140 0010                  		move.w	d0,$10(a0)
0001345E                            
0001345E                            locret_132D2:
0001345E 4E75                       		rts	
00013460                            ; End of function Sonic_ChgJumpDir
00013460                            
00013460                            ; ===========================================================================
00013460                            ; ---------------------------------------------------------------------------
00013460                            ; Unused subroutine to squash Sonic
00013460                            ; ---------------------------------------------------------------------------
00013460 1028 0026                  		move.b	$26(a0),d0
00013464 0600 0020                  		addi.b	#$20,d0
00013468 0200 00C0                  		andi.b	#$C0,d0
0001346C 6600                       		bne.s	locret_13302
0001346E 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013472 4A41                       		tst.w	d1
00013474 6A00                       		bpl.s	locret_13302
00013476 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
0001347C 317C 0000 0010             		move.w	#0,$10(a0)
00013482 317C 0000 0012             		move.w	#0,$12(a0)
00013488 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
0001348E                            
0001348E                            locret_13302:
0001348E 4E75                       		rts	
00013490                            ; ---------------------------------------------------------------------------
00013490                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013490                            ; ---------------------------------------------------------------------------
00013490                            
00013490                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013490                            
00013490                            
00013490                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013490 2228 0008                  		move.l	8(a0),d1
00013494 3028 0010                  		move.w	$10(a0),d0
00013498 48C0                       		ext.l	d0
0001349A E180                       		asl.l	#8,d0
0001349C D280                       		add.l	d0,d1
0001349E 4841                       		swap	d1
000134A0 3038 F728                  		move.w	($FFFFF728).w,d0
000134A4 0640 0010                  		addi.w	#$10,d0
000134A8 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000134AA 6200                       		bhi.s	Boundary_Sides	; if yes, branch
000134AC 3038 F72A                  		move.w	($FFFFF72A).w,d0
000134B0 0640 0128                  		addi.w	#$128,d0
000134B4 4A38 F7AA                  		tst.b	($FFFFF7AA).w
000134B8 6600                       		bne.s	loc_13332
000134BA 0640 0040                  		addi.w	#$40,d0
000134BE                            
000134BE                            loc_13332:
000134BE B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
000134C0 6300                       		bls.s	Boundary_Sides	; if yes, branch
000134C2                            
000134C2                            loc_13336:
000134C2 3038 F72E                  		move.w	($FFFFF72E).w,d0
000134C6 0640 00E0                  		addi.w	#$E0,d0
000134CA B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000134CE 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000134D0 4E75                       		rts	
000134D2                            ; ===========================================================================
000134D2                            
000134D2                            Boundary_Bottom:
000134D2 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
000134D8 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
000134DC 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000134E2 6500 0000                  		bcs.w	KillSonic
000134E6 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000134EA 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000134F0 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
000134F6 4E75                       		rts	
000134F8                            ; ===========================================================================
000134F8                            
000134F8                            Boundary_Sides:
000134F8 3140 0008                  		move.w	d0,8(a0)
000134FC 317C 0000 000A             		move.w	#0,$A(a0)
00013502 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00013508 317C 0000 0014             		move.w	#0,$14(a0)
0001350E 60B2                       		bra.s	loc_13336
00013510                            ; End of function Sonic_LevelBound
00013510                            
00013510                            ; ---------------------------------------------------------------------------
00013510                            ; Subroutine allowing Sonic to roll when he's moving
00013510                            ; ---------------------------------------------------------------------------
00013510                            
00013510                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013510                            
00013510                            
00013510                            Sonic_Roll:				; XREF: Obj01_MdNormal
00013510 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00013514 6600                       		bne.s	Obj01_NoRoll
00013516 3028 0014                  		move.w	$14(a0),d0
0001351A 6A00                       		bpl.s	loc_13392
0001351C 4440                       		neg.w	d0
0001351E                            
0001351E                            loc_13392:
0001351E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00013522 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00013524 1038 F602                  		move.b	($FFFFF602).w,d0
00013528 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
0001352C 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
0001352E 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013534 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013536                            
00013536                            Obj01_NoRoll:
00013536 4E75                       		rts	
00013538                            ; ===========================================================================
00013538                            
00013538                            Obj01_ChkRoll:
00013538 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
0001353E 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013540 4E75                       		rts	
00013542                            ; ===========================================================================
00013542                            
00013542                            Obj01_DoRoll:
00013542 08E8 0002 0022             		bset	#2,$22(a0)
00013548 117C 000E 0016             		move.b	#$E,$16(a0)
0001354E 117C 0007 0017             		move.b	#7,$17(a0)
00013554 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001355A 5A68 000C                  		addq.w	#5,$C(a0)
0001355E 303C 00BE                  		move.w	#$BE,d0
00013562 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rolling sound
00013568 4A68 0014                  		tst.w	$14(a0)
0001356C 6600                       		bne.s	locret_133E8
0001356E 317C 0200 0014             		move.w	#$200,$14(a0)
00013574                            
00013574                            locret_133E8:
00013574 4E75                       		rts	
00013576                            ; End of function Sonic_Roll
00013576                            
00013576                            ; ---------------------------------------------------------------------------
00013576                            ; Subroutine allowing Sonic to jump
00013576                            ; ---------------------------------------------------------------------------
00013576                            
00013576                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013576                            
00013576                            
00013576                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013576 1038 F603                  		move.b	($FFFFF603).w,d0
0001357A 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001357E 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013582 7000                       		moveq	#0,d0
00013584 1028 0026                  		move.b	$26(a0),d0
00013588 0600 0080                  		addi.b	#$80,d0
0001358C 6100 0000                  		bsr.w	sub_14D48
00013590 0C41 0006                  		cmpi.w	#6,d1
00013594 6D00 0000                  		blt.w	locret_1348E
00013598 343C 0680                  		move.w	#$680,d2
0001359C 0828 0006 0022             		btst	#6,$22(a0)
000135A2 6700                       		beq.s	loc_1341C
000135A4 343C 0380                  		move.w	#$380,d2
000135A8                            
000135A8                            loc_1341C:
000135A8 7000                       		moveq	#0,d0
000135AA 1028 0026                  		move.b	$26(a0),d0
000135AE 0400 0040                  		subi.b	#$40,d0
000135B2 4EB9 0000 29DA             		jsr	(CalcSine).l
000135B8 C3C2                       		muls.w	d2,d1
000135BA E081                       		asr.l	#8,d1
000135BC D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
000135C0 C1C2                       		muls.w	d2,d0
000135C2 E080                       		asr.l	#8,d0
000135C4 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
000135C8 08E8 0001 0022             		bset	#1,$22(a0)
000135CE 08A8 0005 0022             		bclr	#5,$22(a0)
000135D4 588F                       		addq.l	#4,sp
000135D6 117C 0001 003C             		move.b	#1,$3C(a0)
000135DC 4228 0038                  		clr.b	$38(a0)
000135E0 303C 00A0                  		move.w	#$A0,d0
000135E4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play jumping sound
000135EA 117C 0013 0016             		move.b	#$13,$16(a0)
000135F0 117C 0009 0017             		move.b	#9,$17(a0)
000135F6 0828 0002 0022             		btst	#2,$22(a0)
000135FC 6600                       		bne.s	loc_13490
000135FE 117C 000E 0016             		move.b	#$E,$16(a0)
00013604 117C 0007 0017             		move.b	#7,$17(a0)
0001360A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
00013610 08E8 0002 0022             		bset	#2,$22(a0)
00013616 5A68 000C                  		addq.w	#5,$C(a0)
0001361A                            
0001361A                            locret_1348E:
0001361A 4E75                       		rts	
0001361C                            ; ===========================================================================
0001361C                            
0001361C                            loc_13490:
0001361C 08E8 0004 0022             		bset	#4,$22(a0)
00013622 4E75                       		rts	
00013624                            ; End of function Sonic_Jump
00013624                            
00013624                            
00013624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013624                            
00013624                            
00013624                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013624 4A28 003C                  		tst.b	$3C(a0)
00013628 6700                       		beq.s	loc_134C4
0001362A 323C FC00                  		move.w	#-$400,d1
0001362E 0828 0006 0022             		btst	#6,$22(a0)
00013634 6700                       		beq.s	loc_134AE
00013636 323C FE00                  		move.w	#-$200,d1
0001363A                            
0001363A                            loc_134AE:
0001363A B268 0012                  		cmp.w	$12(a0),d1
0001363E 6F00                       		ble.s	locret_134C2
00013640 1038 F602                  		move.b	($FFFFF602).w,d0
00013644 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013648 6600                       		bne.s	locret_134C2	; if yes, branch
0001364A 3141 0012                  		move.w	d1,$12(a0)
0001364E                            
0001364E                            locret_134C2:
0001364E 4E75                       		rts	
00013650                            ; ===========================================================================
00013650                            
00013650                            loc_134C4:
00013650 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013656 6C00                       		bge.s	locret_134D2
00013658 317C F040 0012             		move.w	#-$FC0,$12(a0)
0001365E                            
0001365E                            locret_134D2:
0001365E 4E75                       		rts	
00013660                            ; End of function Sonic_JumpHeight
00013660                            
00013660                            ; ---------------------------------------------------------------------------
00013660                            ; Subroutine to	slow Sonic walking up a	slope
00013660                            ; ---------------------------------------------------------------------------
00013660                            
00013660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013660                            
00013660                            
00013660                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013660 1028 0026                  		move.b	$26(a0),d0
00013664 0600 0060                  		addi.b	#$60,d0
00013668 0C00 00C0                  		cmpi.b	#$C0,d0
0001366C 6400                       		bcc.s	locret_13508
0001366E 1028 0026                  		move.b	$26(a0),d0
00013672 4EB9 0000 29DA             		jsr	(CalcSine).l
00013678 C1FC 0020                  		muls.w	#$20,d0
0001367C E080                       		asr.l	#8,d0
0001367E 4A68 0014                  		tst.w	$14(a0)
00013682 6700                       		beq.s	locret_13508
00013684 6B00                       		bmi.s	loc_13504
00013686 4A40                       		tst.w	d0
00013688 6700                       		beq.s	locret_13502
0001368A D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
0001368E                            
0001368E                            locret_13502:
0001368E 4E75                       		rts	
00013690                            ; ===========================================================================
00013690                            
00013690                            loc_13504:
00013690 D168 0014                  		add.w	d0,$14(a0)
00013694                            
00013694                            locret_13508:
00013694 4E75                       		rts	
00013696                            ; End of function Sonic_SlopeResist
00013696                            
00013696                            ; ---------------------------------------------------------------------------
00013696                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013696                            ; ---------------------------------------------------------------------------
00013696                            
00013696                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013696                            
00013696                            
00013696                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013696 1028 0026                  		move.b	$26(a0),d0
0001369A 0600 0060                  		addi.b	#$60,d0
0001369E 0C00 00C0                  		cmpi.b	#-$40,d0
000136A2 6400                       		bcc.s	locret_13544
000136A4 1028 0026                  		move.b	$26(a0),d0
000136A8 4EB9 0000 29DA             		jsr	(CalcSine).l
000136AE C1FC 0050                  		muls.w	#$50,d0
000136B2 E080                       		asr.l	#8,d0
000136B4 4A68 0014                  		tst.w	$14(a0)
000136B8 6B00                       		bmi.s	loc_1353A
000136BA 4A40                       		tst.w	d0
000136BC 6A00                       		bpl.s	loc_13534
000136BE E480                       		asr.l	#2,d0
000136C0                            
000136C0                            loc_13534:
000136C0 D168 0014                  		add.w	d0,$14(a0)
000136C4 4E75                       		rts	
000136C6                            ; ===========================================================================
000136C6                            
000136C6                            loc_1353A:
000136C6 4A40                       		tst.w	d0
000136C8 6B00                       		bmi.s	loc_13540
000136CA E480                       		asr.l	#2,d0
000136CC                            
000136CC                            loc_13540:
000136CC D168 0014                  		add.w	d0,$14(a0)
000136D0                            
000136D0                            locret_13544:
000136D0 4E75                       		rts	
000136D2                            ; End of function Sonic_RollRepel
000136D2                            
000136D2                            ; ---------------------------------------------------------------------------
000136D2                            ; Subroutine to	push Sonic down	a slope
000136D2                            ; ---------------------------------------------------------------------------
000136D2                            
000136D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136D2                            
000136D2                            
000136D2                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
000136D2 4E71                       		nop	
000136D4 4A28 0038                  		tst.b	$38(a0)
000136D8 6600                       		bne.s	locret_13580
000136DA 4A68 003E                  		tst.w	$3E(a0)
000136DE 6600                       		bne.s	loc_13582
000136E0 1028 0026                  		move.b	$26(a0),d0
000136E4 0600 0020                  		addi.b	#$20,d0
000136E8 0200 00C0                  		andi.b	#$C0,d0
000136EC 6700                       		beq.s	locret_13580
000136EE 3028 0014                  		move.w	$14(a0),d0
000136F2 6A00                       		bpl.s	loc_1356A
000136F4 4440                       		neg.w	d0
000136F6                            
000136F6                            loc_1356A:
000136F6 0C40 0280                  		cmpi.w	#$280,d0
000136FA 6400                       		bcc.s	locret_13580
000136FC 4268 0014                  		clr.w	$14(a0)
00013700 08E8 0001 0022             		bset	#1,$22(a0)
00013706 317C 001E 003E             		move.w	#$1E,$3E(a0)
0001370C                            
0001370C                            locret_13580:
0001370C 4E75                       		rts	
0001370E                            ; ===========================================================================
0001370E                            
0001370E                            loc_13582:
0001370E 5368 003E                  		subq.w	#1,$3E(a0)
00013712 4E75                       		rts	
00013714                            ; End of function Sonic_SlopeRepel
00013714                            
00013714                            ; ---------------------------------------------------------------------------
00013714                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00013714                            ; ---------------------------------------------------------------------------
00013714                            
00013714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013714                            
00013714                            
00013714                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00013714 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013718 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001371A 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
0001371C                            
0001371C 5400                       		addq.b	#2,d0		; increase angle
0001371E 6400                       		bcc.s	loc_13596
00013720 7000                       		moveq	#0,d0
00013722                            
00013722                            loc_13596:
00013722 6000                       		bra.s	loc_1359E
00013724                            ; ===========================================================================
00013724                            
00013724                            loc_13598:
00013724 5500                       		subq.b	#2,d0		; decrease angle
00013726 6400                       		bcc.s	loc_1359E
00013728 7000                       		moveq	#0,d0
0001372A                            
0001372A                            loc_1359E:
0001372A 1140 0026                  		move.b	d0,$26(a0)
0001372E                            
0001372E                            locret_135A2:
0001372E 4E75                       		rts	
00013730                            ; End of function Sonic_JumpAngle
00013730                            
00013730                            ; ---------------------------------------------------------------------------
00013730                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013730                            ; ---------------------------------------------------------------------------
00013730                            
00013730                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013730                            
00013730                            
00013730                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013730 3228 0010                  		move.w	$10(a0),d1
00013734 3428 0012                  		move.w	$12(a0),d2
00013738 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0001373E 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013742 0400 0020                  		subi.b	#$20,d0
00013746 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001374A 0200 00C0                  		andi.b	#$C0,d0
0001374E 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013752 0C00 0040                  		cmpi.b	#$40,d0
00013756 6700 0000                  		beq.w	loc_13680
0001375A 0C00 0080                  		cmpi.b	#$80,d0
0001375E 6700 0000                  		beq.w	loc_136E2
00013762 0C00 00C0                  		cmpi.b	#-$40,d0
00013766 6700 0000                  		beq.w	loc_1373E
0001376A 6100 0000                  		bsr.w	Sonic_HitWall
0001376E 4A41                       		tst.w	d1
00013770 6A00                       		bpl.s	loc_135F0
00013772 9368 0008                  		sub.w	d1,8(a0)
00013776 317C 0000 0010             		move.w	#0,$10(a0)
0001377C                            
0001377C                            loc_135F0:
0001377C 6100 0000                  		bsr.w	sub_14EB4
00013780 4A41                       		tst.w	d1
00013782 6A00                       		bpl.s	loc_13602
00013784 D368 0008                  		add.w	d1,8(a0)
00013788 317C 0000 0010             		move.w	#0,$10(a0)
0001378E                            
0001378E                            loc_13602:
0001378E 6100 0000                  		bsr.w	Sonic_HitFloor
00013792 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013796 4A41                       		tst.w	d1
00013798 6A00                       		bpl.s	locret_1367E
0001379A 1428 0012                  		move.b	$12(a0),d2
0001379E 5002                       		addq.b	#8,d2
000137A0 4402                       		neg.b	d2
000137A2 B202                       		cmp.b	d2,d1
000137A4 6C00                       		bge.s	loc_1361E
000137A6 B002                       		cmp.b	d2,d0
000137A8 6D00                       		blt.s	locret_1367E
000137AA                            
000137AA                            loc_1361E:
000137AA D368 000C                  		add.w	d1,$C(a0)
000137AE 1143 0026                  		move.b	d3,$26(a0)
000137B2 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000137B6 117C 0000 001C             		move.b	#0,$1C(a0)
000137BC 1003                       		move.b	d3,d0
000137BE 0600 0020                  		addi.b	#$20,d0
000137C2 0200 0040                  		andi.b	#$40,d0
000137C6 6600                       		bne.s	loc_1365C
000137C8 1003                       		move.b	d3,d0
000137CA 0600 0010                  		addi.b	#$10,d0
000137CE 0200 0020                  		andi.b	#$20,d0
000137D2 6700                       		beq.s	loc_1364E
000137D4 E0E8 0012                  		asr	$12(a0)
000137D8 6000                       		bra.s	loc_13670
000137DA                            ; ===========================================================================
000137DA                            
000137DA                            loc_1364E:
000137DA 317C 0000 0012             		move.w	#0,$12(a0)
000137E0 3168 0010 0014             		move.w	$10(a0),$14(a0)
000137E6 4E75                       		rts	
000137E8                            ; ===========================================================================
000137E8                            
000137E8                            loc_1365C:
000137E8 317C 0000 0010             		move.w	#0,$10(a0)
000137EE 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000137F4 6F00                       		ble.s	loc_13670
000137F6 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000137FC                            
000137FC                            loc_13670:
000137FC 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013802 4A03                       		tst.b	d3
00013804 6A00                       		bpl.s	locret_1367E
00013806 4468 0014                  		neg.w	$14(a0)
0001380A                            
0001380A                            locret_1367E:
0001380A 4E75                       		rts	
0001380C                            ; ===========================================================================
0001380C                            
0001380C                            loc_13680:
0001380C 6100 0000                  		bsr.w	Sonic_HitWall
00013810 4A41                       		tst.w	d1
00013812 6A00                       		bpl.s	loc_1369A
00013814 9368 0008                  		sub.w	d1,8(a0)
00013818 317C 0000 0010             		move.w	#0,$10(a0)
0001381E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013824 4E75                       		rts	
00013826                            ; ===========================================================================
00013826                            
00013826                            loc_1369A:
00013826 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001382A 4A41                       		tst.w	d1
0001382C 6A00                       		bpl.s	loc_136B4
0001382E 9368 000C                  		sub.w	d1,$C(a0)
00013832 4A68 0012                  		tst.w	$12(a0)
00013836 6A00                       		bpl.s	locret_136B2
00013838 317C 0000 0012             		move.w	#0,$12(a0)
0001383E                            
0001383E                            locret_136B2:
0001383E 4E75                       		rts	
00013840                            ; ===========================================================================
00013840                            
00013840                            loc_136B4:
00013840 4A68 0012                  		tst.w	$12(a0)
00013844 6B00                       		bmi.s	locret_136E0
00013846 6100 0000                  		bsr.w	Sonic_HitFloor
0001384A 4A41                       		tst.w	d1
0001384C 6A00                       		bpl.s	locret_136E0
0001384E D368 000C                  		add.w	d1,$C(a0)
00013852 1143 0026                  		move.b	d3,$26(a0)
00013856 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001385A 117C 0000 001C             		move.b	#0,$1C(a0)
00013860 317C 0000 0012             		move.w	#0,$12(a0)
00013866 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001386C                            
0001386C                            locret_136E0:
0001386C 4E75                       		rts	
0001386E                            ; ===========================================================================
0001386E                            
0001386E                            loc_136E2:
0001386E 6100 0000                  		bsr.w	Sonic_HitWall
00013872 4A41                       		tst.w	d1
00013874 6A00                       		bpl.s	loc_136F4
00013876 9368 0008                  		sub.w	d1,8(a0)
0001387A 317C 0000 0010             		move.w	#0,$10(a0)
00013880                            
00013880                            loc_136F4:
00013880 6100 0000                  		bsr.w	sub_14EB4
00013884 4A41                       		tst.w	d1
00013886 6A00                       		bpl.s	loc_13706
00013888 D368 0008                  		add.w	d1,8(a0)
0001388C 317C 0000 0010             		move.w	#0,$10(a0)
00013892                            
00013892                            loc_13706:
00013892 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013896 4A41                       		tst.w	d1
00013898 6A00                       		bpl.s	locret_1373C
0001389A 9368 000C                  		sub.w	d1,$C(a0)
0001389E 1003                       		move.b	d3,d0
000138A0 0600 0020                  		addi.b	#$20,d0
000138A4 0200 0040                  		andi.b	#$40,d0
000138A8 6600                       		bne.s	loc_13726
000138AA 317C 0000 0012             		move.w	#0,$12(a0)
000138B0 4E75                       		rts	
000138B2                            ; ===========================================================================
000138B2                            
000138B2                            loc_13726:
000138B2 1143 0026                  		move.b	d3,$26(a0)
000138B6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000138BA 3168 0012 0014             		move.w	$12(a0),$14(a0)
000138C0 4A03                       		tst.b	d3
000138C2 6A00                       		bpl.s	locret_1373C
000138C4 4468 0014                  		neg.w	$14(a0)
000138C8                            
000138C8                            locret_1373C:
000138C8 4E75                       		rts	
000138CA                            ; ===========================================================================
000138CA                            
000138CA                            loc_1373E:
000138CA 6100 0000                  		bsr.w	sub_14EB4
000138CE 4A41                       		tst.w	d1
000138D0 6A00                       		bpl.s	loc_13758
000138D2 D368 0008                  		add.w	d1,8(a0)
000138D6 317C 0000 0010             		move.w	#0,$10(a0)
000138DC 3168 0012 0014             		move.w	$12(a0),$14(a0)
000138E2 4E75                       		rts	
000138E4                            ; ===========================================================================
000138E4                            
000138E4                            loc_13758:
000138E4 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000138E8 4A41                       		tst.w	d1
000138EA 6A00                       		bpl.s	loc_13772
000138EC 9368 000C                  		sub.w	d1,$C(a0)
000138F0 4A68 0012                  		tst.w	$12(a0)
000138F4 6A00                       		bpl.s	locret_13770
000138F6 317C 0000 0012             		move.w	#0,$12(a0)
000138FC                            
000138FC                            locret_13770:
000138FC 4E75                       		rts	
000138FE                            ; ===========================================================================
000138FE                            
000138FE                            loc_13772:
000138FE 4A68 0012                  		tst.w	$12(a0)
00013902 6B00                       		bmi.s	locret_1379E
00013904 6100 0000                  		bsr.w	Sonic_HitFloor
00013908 4A41                       		tst.w	d1
0001390A 6A00                       		bpl.s	locret_1379E
0001390C D368 000C                  		add.w	d1,$C(a0)
00013910 1143 0026                  		move.b	d3,$26(a0)
00013914 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013918 117C 0000 001C             		move.b	#0,$1C(a0)
0001391E 317C 0000 0012             		move.w	#0,$12(a0)
00013924 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001392A                            
0001392A                            locret_1379E:
0001392A 4E75                       		rts	
0001392C                            ; End of function Sonic_Floor
0001392C                            
0001392C                            ; ---------------------------------------------------------------------------
0001392C                            ; Subroutine to	reset Sonic's mode when he lands on the floor
0001392C                            ; ---------------------------------------------------------------------------
0001392C                            
0001392C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001392C                            
0001392C                            
0001392C                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
0001392C 0828 0004 0022             		btst	#4,$22(a0)
00013932 6700                       		beq.s	loc_137AE
00013934 4E71                       		nop	
00013936 4E71                       		nop	
00013938 4E71                       		nop	
0001393A                            
0001393A                            loc_137AE:
0001393A 08A8 0005 0022             		bclr	#5,$22(a0)
00013940 08A8 0001 0022             		bclr	#1,$22(a0)
00013946 08A8 0004 0022             		bclr	#4,$22(a0)
0001394C 0828 0002 0022             		btst	#2,$22(a0)
00013952 6700                       		beq.s	loc_137E4
00013954 08A8 0002 0022             		bclr	#2,$22(a0)
0001395A 117C 0013 0016             		move.b	#$13,$16(a0)
00013960 117C 0009 0017             		move.b	#9,$17(a0)
00013966 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001396C 5B68 000C                  		subq.w	#5,$C(a0)
00013970                            
00013970                            loc_137E4:
00013970 117C 0000 003C             		move.b	#0,$3C(a0)
00013976 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001397C 4E75                       		rts	
0001397E                            ; End of function Sonic_ResetOnFloor
0001397E                            
0001397E                            ; ===========================================================================
0001397E                            ; ---------------------------------------------------------------------------
0001397E                            ; Sonic	when he	gets hurt
0001397E                            ; ---------------------------------------------------------------------------
0001397E                            
0001397E                            Obj01_Hurt:				; XREF: Obj01_Index
0001397E 4EBA 9DD6                  		jsr	SpeedToPos
00013982 0668 0030 0012             		addi.w	#$30,$12(a0)
00013988 0828 0006 0022             		btst	#6,$22(a0)
0001398E 6700                       		beq.s	loc_1380C
00013990 0468 0020 0012             		subi.w	#$20,$12(a0)
00013996                            
00013996                            loc_1380C:
00013996 6100 0000                  		bsr.w	Sonic_HurtStop
0001399A 6100 FAF4                  		bsr.w	Sonic_LevelBound
0001399E 6100 F506                  		bsr.w	Sonic_RecordPos
000139A2 6100 0000                  		bsr.w	Sonic_Animate
000139A6 6100 0000                  		bsr.w	LoadSonicDynPLC
000139AA 4EFA 9DD0                  		jmp	DisplaySprite
000139AE                            
000139AE                            ; ---------------------------------------------------------------------------
000139AE                            ; Subroutine to	stop Sonic falling after he's been hurt
000139AE                            ; ---------------------------------------------------------------------------
000139AE                            
000139AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000139AE                            
000139AE                            
000139AE                            Sonic_HurtStop:				; XREF: Obj01_Hurt
000139AE 3038 F72E                  		move.w	($FFFFF72E).w,d0
000139B2 0640 00E0                  		addi.w	#$E0,d0
000139B6 B068 000C                  		cmp.w	$C(a0),d0
000139BA 6500 0000                  		bcs.w	KillSonic
000139BE 6100 FD70                  		bsr.w	Sonic_Floor
000139C2 0828 0001 0022             		btst	#1,$22(a0)
000139C8 6600                       		bne.s	locret_13860
000139CA 7000                       		moveq	#0,d0
000139CC 3140 0012                  		move.w	d0,$12(a0)
000139D0 3140 0010                  		move.w	d0,$10(a0)
000139D4 3140 0014                  		move.w	d0,$14(a0)
000139D8 117C 0000 001C             		move.b	#0,$1C(a0)
000139DE 5528 0024                  		subq.b	#2,$24(a0)
000139E2 317C 0078 0030             		move.w	#$78,$30(a0)
000139E8                            
000139E8                            locret_13860:
000139E8 4E75                       		rts	
000139EA                            ; End of function Sonic_HurtStop
000139EA                            
000139EA                            ; ===========================================================================
000139EA                            ; ---------------------------------------------------------------------------
000139EA                            ; Sonic	when he	dies
000139EA                            ; ---------------------------------------------------------------------------
000139EA                            
000139EA                            Obj01_Death:				; XREF: Obj01_Index
000139EA 6100 0000                  		bsr.w	GameOver
000139EE 4EBA 9D3A                  		jsr	ObjectFall
000139F2 6100 F4B2                  		bsr.w	Sonic_RecordPos
000139F6 6100 0000                  		bsr.w	Sonic_Animate
000139FA 6100 0000                  		bsr.w	LoadSonicDynPLC
000139FE 4EFA 9D7C                  		jmp	DisplaySprite
00013A02                            
00013A02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A02                            
00013A02                            
00013A02                            GameOver:				; XREF: Obj01_Death
00013A02 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013A06 0640 0100                  		addi.w	#$100,d0
00013A0A B068 000C                  		cmp.w	$C(a0),d0
00013A0E 6400 0000                  		bcc.w	locret_13900
00013A12 317C FFC8 0012             		move.w	#-$38,$12(a0)
00013A18 5428 0024                  		addq.b	#2,$24(a0)
00013A1C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00013A20 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00013A24 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00013A28 6600                       		bne.s	loc_138D4
00013A2A 317C 0000 003A             		move.w	#0,$3A(a0)
00013A30 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013A36 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013A3C 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013A42 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013A46                            
00013A46                            loc_138C2:
00013A46 303C 008F                  		move.w	#$8F,d0
00013A4A 4EB9 0000 1396             		jsr	(PlaySound).l	; play game over music
00013A50 7003                       		moveq	#3,d0
00013A52 4EF9 0000 1580             		jmp	(LoadPLC).l	; load game over patterns
00013A58                            ; ===========================================================================
00013A58                            
00013A58                            loc_138D4:
00013A58 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013A5E 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013A62 6700                       		beq.s	locret_13900	; if not, branch
00013A64 317C 0000 003A             		move.w	#0,$3A(a0)
00013A6A 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013A70 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013A76 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00013A7C 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013A82 60C2                       		bra.s	loc_138C2
00013A84                            ; ===========================================================================
00013A84                            
00013A84                            locret_13900:
00013A84 4E75                       		rts	
00013A86                            ; End of function GameOver
00013A86                            
00013A86                            ; ===========================================================================
00013A86                            ; ---------------------------------------------------------------------------
00013A86                            ; Sonic	when the level is restarted
00013A86                            ; ---------------------------------------------------------------------------
00013A86                            
00013A86                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013A86 4A68 003A                  		tst.w	$3A(a0)
00013A8A 6700                       		beq.s	locret_13914
00013A8C 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013A90 6600                       		bne.s	locret_13914
00013A92 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00013A98                            
00013A98                            locret_13914:
00013A98 4E75                       		rts	
00013A9A                            
00013A9A                            ; ---------------------------------------------------------------------------
00013A9A                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00013A9A                            ; ---------------------------------------------------------------------------
00013A9A                            
00013A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013A9A                            
00013A9A                            
00013A9A                            Sonic_Loops:				; XREF: Obj01_Control
00013A9A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013AA0 6700                       		beq.s	loc_13926	; if yes, branch
00013AA2 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013AA6 6600 0000                  		bne.w	locret_139C2	; if not, branch
00013AAA                            
00013AAA                            loc_13926:
00013AAA 3028 000C                  		move.w	$C(a0),d0
00013AAE E248                       		lsr.w	#1,d0
00013AB0 0240 0380                  		andi.w	#$380,d0
00013AB4 1228 0008                  		move.b	8(a0),d1
00013AB8 0241 007F                  		andi.w	#$7F,d1
00013ABC D041                       		add.w	d1,d0
00013ABE 43F8 A400                  		lea	($FFFFA400).w,a1
00013AC2 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013AC6 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00013ACA 6700 FA6C                  		beq.w	Obj01_ChkRoll
00013ACE B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00013AD2 6700 FA64                  		beq.w	Obj01_ChkRoll
00013AD6 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00013ADA 6700                       		beq.s	loc_13976
00013ADC B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00013AE0 6700                       		beq.s	loc_13966
00013AE2 08A8 0006 0001             		bclr	#6,1(a0)
00013AE8 4E75                       		rts	
00013AEA                            ; ===========================================================================
00013AEA                            
00013AEA                            loc_13966:
00013AEA 0828 0001 0022             		btst	#1,$22(a0)
00013AF0 6700                       		beq.s	loc_13976
00013AF2 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013AF8 4E75                       		rts	
00013AFA                            ; ===========================================================================
00013AFA                            
00013AFA                            loc_13976:
00013AFA 3428 0008                  		move.w	8(a0),d2
00013AFE 0C02 002C                  		cmpi.b	#$2C,d2
00013B02 6400                       		bcc.s	loc_13988
00013B04 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013B0A 4E75                       		rts	
00013B0C                            ; ===========================================================================
00013B0C                            
00013B0C                            loc_13988:
00013B0C 0C02 00E0                  		cmpi.b	#-$20,d2
00013B10 6500                       		bcs.s	loc_13996
00013B12 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013B18 4E75                       		rts	
00013B1A                            ; ===========================================================================
00013B1A                            
00013B1A                            loc_13996:
00013B1A 0828 0006 0001             		btst	#6,1(a0)
00013B20 6600                       		bne.s	loc_139B2
00013B22 1228 0026                  		move.b	$26(a0),d1
00013B26 6700                       		beq.s	locret_139C2
00013B28 0C01 0080                  		cmpi.b	#-$80,d1
00013B2C 6200                       		bhi.s	locret_139C2
00013B2E 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013B34 4E75                       		rts	
00013B36                            ; ===========================================================================
00013B36                            
00013B36                            loc_139B2:
00013B36 1228 0026                  		move.b	$26(a0),d1
00013B3A 0C01 0080                  		cmpi.b	#-$80,d1
00013B3E 6300                       		bls.s	locret_139C2
00013B40 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013B46                            
00013B46                            locret_139C2:
00013B46 4E75                       		rts	
00013B48                            ; End of function Sonic_Loops
00013B48                            
00013B48                            ; ---------------------------------------------------------------------------
00013B48                            ; Subroutine to	animate	Sonic's sprites
00013B48                            ; ---------------------------------------------------------------------------
00013B48                            
00013B48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B48                            
00013B48                            
00013B48                            Sonic_Animate:				; XREF: Obj01_Control; et al
00013B48 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013B4E 7000                       		moveq	#0,d0
00013B50 1028 001C                  		move.b	$1C(a0),d0
00013B54 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00013B58 6700                       		beq.s	SAnim_Do	; if not, branch
00013B5A 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013B5E 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013B64 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00013B6A                            
00013B6A                            SAnim_Do:
00013B6A D040                       		add.w	d0,d0
00013B6C D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013B70 1011                       		move.b	(a1),d0
00013B72 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013B74 1228 0022                  		move.b	$22(a0),d1
00013B78 0201 0001                  		andi.b	#1,d1
00013B7C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013B82 8328 0001                  		or.b	d1,1(a0)
00013B86 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013B8A 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00013B8C 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013B90                            
00013B90                            SAnim_Do2:
00013B90 7200                       		moveq	#0,d1
00013B92 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013B96 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00013B9A 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00013B9C                            
00013B9C                            SAnim_Next:
00013B9C 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013BA0 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013BA4                            
00013BA4                            SAnim_Delay:
00013BA4 4E75                       		rts	
00013BA6                            ; ===========================================================================
00013BA6                            
00013BA6                            SAnim_End_FF:
00013BA6 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00013BA8 6600                       		bne.s	SAnim_End_FE	; if not, branch
00013BAA 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013BB0 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013BB4 60E6                       		bra.s	SAnim_Next
00013BB6                            ; ===========================================================================
00013BB6                            
00013BB6                            SAnim_End_FE:
00013BB6 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00013BB8 6600                       		bne.s	SAnim_End_FD	; if not, branch
00013BBA 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013BBE 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013BC2 9200                       		sub.b	d0,d1
00013BC4 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00013BC8 60D2                       		bra.s	SAnim_Next
00013BCA                            ; ===========================================================================
00013BCA                            
00013BCA                            SAnim_End_FD:
00013BCA 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00013BCC 6600                       		bne.s	SAnim_End	; if not, branch
00013BCE 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00013BD4                            
00013BD4                            SAnim_End:
00013BD4 4E75                       		rts	
00013BD6                            ; ===========================================================================
00013BD6                            
00013BD6                            SAnim_WalkRun:				; XREF: SAnim_Do
00013BD6 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00013BDA 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00013BDC 5200                       		addq.b	#1,d0		; is animation walking/running?
00013BDE 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00013BE2 7200                       		moveq	#0,d1
00013BE4 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00013BE8 1428 0022                  		move.b	$22(a0),d2
00013BEC 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00013BF0 6600                       		bne.s	loc_13A70	; if yes, branch
00013BF2 4600                       		not.b	d0		; reverse angle
00013BF4                            
00013BF4                            loc_13A70:
00013BF4 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00013BF8 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00013BFA 7203                       		moveq	#3,d1
00013BFC                            
00013BFC                            loc_13A78:
00013BFC 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013C02 B302                       		eor.b	d1,d2
00013C04 8528 0001                  		or.b	d2,1(a0)
00013C08 0828 0005 0022             		btst	#5,$22(a0)
00013C0E 6600 0000                  		bne.w	SAnim_Push
00013C12 E808                       		lsr.b	#4,d0		; divide angle by $10
00013C14 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00013C18 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013C1C 6A00                       		bpl.s	loc_13A9C
00013C1E 4442                       		neg.w	d2
00013C20                            
00013C20                            loc_13A9C:
00013C20 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00013C26 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00013C2A 6400                       		bcc.s	loc_13AB4	; if yes, branch
00013C2C 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00013C32 1200                       		move.b	d0,d1
00013C34 E209                       		lsr.b	#1,d1
00013C36 D001                       		add.b	d1,d0
00013C38                            
00013C38                            loc_13AB4:
00013C38 D000                       		add.b	d0,d0
00013C3A 1600                       		move.b	d0,d3
00013C3C 4442                       		neg.w	d2
00013C3E 0642 0800                  		addi.w	#$800,d2
00013C42 6A00                       		bpl.s	loc_13AC2
00013C44 7400                       		moveq	#0,d2
00013C46                            
00013C46                            loc_13AC2:
00013C46 E04A                       		lsr.w	#8,d2
00013C48 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013C4C 6100 FF42                  		bsr.w	SAnim_Do2
00013C50 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00013C54 4E75                       		rts	
00013C56                            ; ===========================================================================
00013C56                            
00013C56                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00013C56 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00013C58 6600                       		bne.s	SAnim_Push	; if not, branch
00013C5A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013C5E 6A00                       		bpl.s	loc_13ADE
00013C60 4442                       		neg.w	d2
00013C62                            
00013C62                            loc_13ADE:
00013C62 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00013C68 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00013C6C 6400                       		bcc.s	loc_13AF0	; if yes, branch
00013C6E 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00013C74                            
00013C74                            loc_13AF0:
00013C74 4442                       		neg.w	d2
00013C76 0642 0400                  		addi.w	#$400,d2
00013C7A 6A00                       		bpl.s	loc_13AFA
00013C7C 7400                       		moveq	#0,d2
00013C7E                            
00013C7E                            loc_13AFA:
00013C7E E04A                       		lsr.w	#8,d2
00013C80 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013C84 1228 0022                  		move.b	$22(a0),d1
00013C88 0201 0001                  		andi.b	#1,d1
00013C8C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013C92 8328 0001                  		or.b	d1,1(a0)
00013C96 6000 FEF8                  		bra.w	SAnim_Do2
00013C9A                            ; ===========================================================================
00013C9A                            
00013C9A                            SAnim_Push:				; XREF: SAnim_RollJump
00013C9A 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013C9E 6B00                       		bmi.s	loc_13B1E
00013CA0 4442                       		neg.w	d2
00013CA2                            
00013CA2                            loc_13B1E:
00013CA2 0642 0800                  		addi.w	#$800,d2
00013CA6 6A00                       		bpl.s	loc_13B26
00013CA8 7400                       		moveq	#0,d2
00013CAA                            
00013CAA                            loc_13B26:
00013CAA EC4A                       		lsr.w	#6,d2
00013CAC 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013CB0 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00013CB6 1228 0022                  		move.b	$22(a0),d1
00013CBA 0201 0001                  		andi.b	#1,d1
00013CBE 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013CC4 8328 0001                  		or.b	d1,1(a0)
00013CC8 6000 FEC6                  		bra.w	SAnim_Do2
00013CCC                            ; End of function Sonic_Animate
00013CCC                            
00013CCC                            ; ===========================================================================
00013CCC                            SonicAniData:
00013CCC                            	include "_anim\Sonic.asm"
00013CCC                            ; ---------------------------------------------------------------------------
00013CCC                            ; Animation script - Sonic
00013CCC                            ; ---------------------------------------------------------------------------
00013CCC 0000                       		dc.w SonAni_Walk-SonicAniData
00013CCE 0000                       		dc.w SonAni_Run-SonicAniData
00013CD0 0000                       		dc.w SonAni_Roll-SonicAniData
00013CD2 0000                       		dc.w SonAni_Roll2-SonicAniData
00013CD4 0000                       		dc.w SonAni_Push-SonicAniData
00013CD6 0000                       		dc.w SonAni_Wait-SonicAniData
00013CD8 0000                       		dc.w SonAni_Balance-SonicAniData
00013CDA 0000                       		dc.w SonAni_LookUp-SonicAniData
00013CDC 0000                       		dc.w SonAni_Duck-SonicAniData
00013CDE 0000                       		dc.w SonAni_Warp1-SonicAniData
00013CE0 0000                       		dc.w SonAni_Warp2-SonicAniData
00013CE2 0000                       		dc.w SonAni_Warp3-SonicAniData
00013CE4 0000                       		dc.w SonAni_Warp4-SonicAniData
00013CE6 0000                       		dc.w SonAni_Stop-SonicAniData
00013CE8 0000                       		dc.w SonAni_Float1-SonicAniData
00013CEA 0000                       		dc.w SonAni_Float2-SonicAniData
00013CEC 0000                       		dc.w SonAni_Spring-SonicAniData
00013CEE 0000                       		dc.w SonAni_LZHang-SonicAniData
00013CF0 0000                       		dc.w SonAni_Leap1-SonicAniData
00013CF2 0000                       		dc.w SonAni_Leap2-SonicAniData
00013CF4 0000                       		dc.w SonAni_Surf-SonicAniData
00013CF6 0000                       		dc.w SonAni_Bubble-SonicAniData
00013CF8 0000                       		dc.w SonAni_Death1-SonicAniData
00013CFA 0000                       		dc.w SonAni_Drown-SonicAniData
00013CFC 0000                       		dc.w SonAni_Death2-SonicAniData
00013CFE 0000                       		dc.w SonAni_Shrink-SonicAniData
00013D00 0000                       		dc.w SonAni_Hurt-SonicAniData
00013D02 0000                       		dc.w SonAni_LZSlide-SonicAniData
00013D04 0000                       		dc.w SonAni_Blank-SonicAniData
00013D06 0000                       		dc.w SonAni_Float3-SonicAniData
00013D08 0000                       		dc.w SonAni_Float4-SonicAniData
00013D0A FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00013D12 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00013D1A FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00013D22 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00013D2A FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00013D32 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00013D48 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00013D4C 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00013D50 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00013D54 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00013D58 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00013D5C 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00013D60 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00013D64 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00013D68 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00013D6C 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00013D74 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00013D78 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00013D7C 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00013D82 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00013D88 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00013D8C 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00013D94 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00013D98 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00013D9C 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00013DA0 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00013DAA 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00013DAE 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00013DB2 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00013DB6 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00013DBE 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00013DC2                            		even
00013DC2                            		even
00013DC2                            
00013DC2                            ; ---------------------------------------------------------------------------
00013DC2                            ; Sonic	pattern	loading	subroutine
00013DC2                            ; ---------------------------------------------------------------------------
00013DC2                            
00013DC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013DC2                            
00013DC2                            
00013DC2                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00013DC2 7000                       		moveq	#0,d0
00013DC4 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00013DC8 B038 F766                  		cmp.b	($FFFFF766).w,d0
00013DCC 6700                       		beq.s	locret_13C96
00013DCE 11C0 F766                  		move.b	d0,($FFFFF766).w
00013DD2 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00013DD8 D040                       		add.w	d0,d0
00013DDA D4F2 0000                  		adda.w	(a2,d0.w),a2
00013DDE 7200                       		moveq	#0,d1
00013DE0 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00013DE2 5301                       		subq.b	#1,d1
00013DE4 6B00                       		bmi.s	locret_13C96
00013DE6 47F8 C800                  		lea	($FFFFC800).w,a3
00013DEA 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00013DF0                            
00013DF0                            SPLC_ReadEntry:
00013DF0 7400                       		moveq	#0,d2
00013DF2 141A                       		move.b	(a2)+,d2
00013DF4 3002                       		move.w	d2,d0
00013DF6 E808                       		lsr.b	#4,d0
00013DF8 E14A                       		lsl.w	#8,d2
00013DFA 141A                       		move.b	(a2)+,d2
00013DFC EB4A                       		lsl.w	#5,d2
00013DFE 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00013E04 D3C2                       		adda.l	d2,a1
00013E06                            
00013E06                            SPLC_LoadTile:
00013E06 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00013E0A 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00013E0E 47EB 0020                  		lea	$20(a3),a3	; next tile
00013E12 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00013E16                            
00013E16 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00013E1A                            
00013E1A                            locret_13C96:
00013E1A 4E75                       		rts	
00013E1C                            ; End of function LoadSonicDynPLC
00013E1C                            
00013E1C                            ; ===========================================================================
00013E1C                            ; ---------------------------------------------------------------------------
00013E1C                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00013E1C                            ; ---------------------------------------------------------------------------
00013E1C                            
00013E1C                            Obj0A:					; XREF: Obj_Index
00013E1C 7000                       		moveq	#0,d0
00013E1E 1028 0024                  		move.b	$24(a0),d0
00013E22 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00013E26 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00013E2A                            ; ===========================================================================
00013E2A 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00013E2E 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00013E32 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00013E36 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00013E3A 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00013E3C                            ; ===========================================================================
00013E3C                            
00013E3C                            Obj0A_Main:				; XREF: Obj0A_Index
00013E3C 5428 0024                  		addq.b	#2,$24(a0)
00013E40 217C 0001 2B16 0004        		move.l	#Map_obj64,4(a0)
00013E48 317C 8348 0002             		move.w	#$8348,2(a0)
00013E4E 117C 0084 0001             		move.b	#$84,1(a0)
00013E54 117C 0010 0019             		move.b	#$10,$19(a0)
00013E5A 117C 0001 0018             		move.b	#1,$18(a0)
00013E60 1028 0028                  		move.b	$28(a0),d0
00013E64 6A00                       		bpl.s	loc_13D00
00013E66 5028 0024                  		addq.b	#8,$24(a0)
00013E6A 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00013E72 317C 0440 0002             		move.w	#$440,2(a0)
00013E78 0240 007F                  		andi.w	#$7F,d0
00013E7C 1140 0033                  		move.b	d0,$33(a0)
00013E80 6000 0000                  		bra.w	Obj0A_Countdown
00013E84                            ; ===========================================================================
00013E84                            
00013E84                            loc_13D00:
00013E84 1140 001C                  		move.b	d0,$1C(a0)
00013E88 3168 0008 0030             		move.w	8(a0),$30(a0)
00013E8E 317C FF78 0012             		move.w	#-$88,$12(a0)
00013E94                            
00013E94                            Obj0A_Animate:				; XREF: Obj0A_Index
00013E94 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013E9A 4EB9 0000 A7EE             		jsr	AnimateSprite
00013EA0                            
00013EA0                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00013EA0 3038 F646                  		move.w	($FFFFF646).w,d0
00013EA4 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00013EA8 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00013EAA 117C 0006 0024             		move.b	#6,$24(a0)
00013EB0 5E28 001C                  		addq.b	#7,$1C(a0)
00013EB4 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00013EBA 6700                       		beq.s	Obj0A_Display
00013EBC 6000                       		bra.s	Obj0A_Display
00013EBE                            ; ===========================================================================
00013EBE                            
00013EBE                            Obj0A_Wobble:
00013EBE 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013EC2 6700                       		beq.s	loc_13D44
00013EC4 5868 0030                  		addq.w	#4,$30(a0)
00013EC8                            
00013EC8                            loc_13D44:
00013EC8 1028 0026                  		move.b	$26(a0),d0
00013ECC 5228 0026                  		addq.b	#1,$26(a0)
00013ED0 0240 007F                  		andi.w	#$7F,d0
00013ED4 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013EDA 1031 0000                  		move.b	(a1,d0.w),d0
00013EDE 4880                       		ext.w	d0
00013EE0 D068 0030                  		add.w	$30(a0),d0
00013EE4 3140 0008                  		move.w	d0,8(a0)
00013EE8 6100                       		bsr.s	Obj0A_ShowNumber
00013EEA 4EBA 986A                  		jsr	SpeedToPos
00013EEE 4A28 0001                  		tst.b	1(a0)
00013EF2 6A00                       		bpl.s	Obj0A_Delete
00013EF4 4EFA 9886                  		jmp	DisplaySprite
00013EF8                            ; ===========================================================================
00013EF8                            
00013EF8                            Obj0A_Delete:
00013EF8 4EFA 98BE                  		jmp	DeleteObject
00013EFC                            ; ===========================================================================
00013EFC                            
00013EFC                            Obj0A_Display:				; XREF: Obj0A_Index
00013EFC 6100                       		bsr.s	Obj0A_ShowNumber
00013EFE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013F04 4EB9 0000 A7EE             		jsr	AnimateSprite
00013F0A 4EFA 9870                  		jmp	DisplaySprite
00013F0E                            ; ===========================================================================
00013F0E                            
00013F0E                            Obj0A_Delete2:				; XREF: Obj0A_Index
00013F0E 4EFA 98A8                  		jmp	DeleteObject
00013F12                            ; ===========================================================================
00013F12                            
00013F12                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00013F12 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00013F18 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00013F1A 5368 0038                  		subq.w	#1,$38(a0)
00013F1E 6600                       		bne.s	Obj0A_Display2
00013F20 117C 000E 0024             		move.b	#$E,$24(a0)
00013F26 5E28 001C                  		addq.b	#7,$1C(a0)
00013F2A 60D0                       		bra.s	Obj0A_Display
00013F2C                            ; ===========================================================================
00013F2C                            
00013F2C                            Obj0A_Display2:
00013F2C 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013F32 4EB9 0000 A7EE             		jsr	AnimateSprite
00013F38 4A28 0001                  		tst.b	1(a0)
00013F3C 6A00                       		bpl.s	Obj0A_Delete3
00013F3E 4EFA 983C                  		jmp	DisplaySprite
00013F42                            ; ===========================================================================
00013F42                            
00013F42                            Obj0A_Delete3:
00013F42 4EFA 9874                  		jmp	DeleteObject
00013F46                            ; ===========================================================================
00013F46                            
00013F46                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00013F46 4A68 0038                  		tst.w	$38(a0)
00013F4A 6700                       		beq.s	locret_13E1A
00013F4C 5368 0038                  		subq.w	#1,$38(a0)
00013F50 6600                       		bne.s	locret_13E1A
00013F52 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00013F58 6400                       		bcc.s	locret_13E1A
00013F5A 317C 000F 0038             		move.w	#$F,$38(a0)
00013F60 4268 0012                  		clr.w	$12(a0)
00013F64 117C 0080 0001             		move.b	#$80,1(a0)
00013F6A 3028 0008                  		move.w	8(a0),d0
00013F6E 9078 F700                  		sub.w	($FFFFF700).w,d0
00013F72 0640 0080                  		addi.w	#$80,d0
00013F76 3140 0008                  		move.w	d0,8(a0)
00013F7A 3028 000C                  		move.w	$C(a0),d0
00013F7E 9078 F704                  		sub.w	($FFFFF704).w,d0
00013F82 0640 0080                  		addi.w	#$80,d0
00013F86 3140 000A                  		move.w	d0,$A(a0)
00013F8A 117C 000C 0024             		move.b	#$C,$24(a0)
00013F90                            
00013F90                            locret_13E1A:
00013F90 4E75                       		rts	
00013F92                            ; ===========================================================================
00013F92                            Obj0A_WobbleData:
00013F92 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00013FA3 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00013FB4 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00013FC5 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00013FD5 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00013FE2 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00013FEF FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00013FFC FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00014009 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00014012                            ; ===========================================================================
00014012                            
00014012                            Obj0A_Countdown:			; XREF: Obj0A_Index
00014012 4A68 002C                  		tst.w	$2C(a0)
00014016 6600 0000                  		bne.w	loc_13F86
0001401A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00014020 6400 0000                  		bcc.w	locret_1408C
00014024 0838 0006 D022             		btst	#6,($FFFFD022).w
0001402A 6700 0000                  		beq.w	locret_1408C
0001402E 5368 0038                  		subq.w	#1,$38(a0)
00014032 6A00 0000                  		bpl.w	loc_13FAC
00014036 317C 003B 0038             		move.w	#59,$38(a0)
0001403C 317C 0001 0036             		move.w	#1,$36(a0)
00014042 4EB9 0000 29B4             		jsr	(RandomNumber).l
00014048 0240 0001                  		andi.w	#1,d0
0001404C 1140 0034                  		move.b	d0,$34(a0)
00014050 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00014054 0C40 0019                  		cmpi.w	#$19,d0
00014058 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
0001405A 0C40 0014                  		cmpi.w	#$14,d0
0001405E 6700                       		beq.s	Obj0A_WarnSound
00014060 0C40 000F                  		cmpi.w	#$F,d0
00014064 6700                       		beq.s	Obj0A_WarnSound
00014066 0C40 000C                  		cmpi.w	#$C,d0
0001406A 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
0001406C 6600                       		bne.s	loc_13F02
0001406E 303C 0092                  		move.w	#$92,d0
00014072 4EB9 0000 1396             		jsr	(PlaySound).l	; play countdown music
00014078                            
00014078                            loc_13F02:
00014078 5328 0032                  		subq.b	#1,$32(a0)
0001407C 6A00                       		bpl.s	Obj0A_ReduceAir
0001407E 1168 0033 0032             		move.b	$33(a0),$32(a0)
00014084 08E8 0007 0036             		bset	#7,$36(a0)
0001408A 6000                       		bra.s	Obj0A_ReduceAir
0001408C                            ; ===========================================================================
0001408C                            
0001408C                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
0001408C 303C 00C2                  		move.w	#$C2,d0
00014090 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00014096                            
00014096                            Obj0A_ReduceAir:
00014096 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
0001409A 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
0001409E 6100 0000                  		bsr.w	ResumeMusic
000140A2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
000140A8 303C 00B2                  		move.w	#$B2,d0
000140AC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play drowning sound
000140B2 117C 000A 0034             		move.b	#$A,$34(a0)
000140B8 317C 0001 0036             		move.w	#1,$36(a0)
000140BE 317C 0078 002C             		move.w	#$78,$2C(a0)
000140C4 2F08                       		move.l	a0,-(sp)
000140C6 41F8 D000                  		lea	($FFFFD000).w,a0
000140CA 6100 F860                  		bsr.w	Sonic_ResetOnFloor
000140CE 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
000140D4 08E8 0001 0022             		bset	#1,$22(a0)
000140DA 08E8 0007 0002             		bset	#7,2(a0)
000140E0 317C 0000 0012             		move.w	#0,$12(a0)
000140E6 317C 0000 0010             		move.w	#0,$10(a0)
000140EC 317C 0000 0014             		move.w	#0,$14(a0)
000140F2 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000140F8 205F                       		movea.l	(sp)+,a0
000140FA 4E75                       		rts	
000140FC                            ; ===========================================================================
000140FC                            
000140FC                            loc_13F86:
000140FC 5368 002C                  		subq.w	#1,$2C(a0)
00014100 6600                       		bne.s	loc_13F94
00014102 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00014108 4E75                       		rts	
0001410A                            ; ===========================================================================
0001410A                            
0001410A                            loc_13F94:
0001410A 2F08                       		move.l	a0,-(sp)
0001410C 41F8 D000                  		lea	($FFFFD000).w,a0
00014110 4EBA 9644                  		jsr	SpeedToPos
00014114 0668 0010 0012             		addi.w	#$10,$12(a0)
0001411A 205F                       		movea.l	(sp)+,a0
0001411C 6000                       		bra.s	loc_13FAC
0001411E                            ; ===========================================================================
0001411E                            
0001411E                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
0001411E 6000                       		bra.s	Obj0A_MakeItem
00014120                            ; ===========================================================================
00014120                            
00014120                            loc_13FAC:
00014120 4A68 0036                  		tst.w	$36(a0)
00014124 6700 0000                  		beq.w	locret_1408C
00014128 5368 003A                  		subq.w	#1,$3A(a0)
0001412C 6A00 0000                  		bpl.w	locret_1408C
00014130                            
00014130                            Obj0A_MakeItem:
00014130 4EB9 0000 29B4             		jsr	(RandomNumber).l
00014136 0240 000F                  		andi.w	#$F,d0
0001413A 3140 003A                  		move.w	d0,$3A(a0)
0001413E 4EBA 9AC2                  		jsr	SingleObjLoad
00014142 6600 0000                  		bne.w	locret_1408C
00014146 12BC 000A                  		move.b	#$A,0(a1)	; load object
0001414A 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00014150 7006                       		moveq	#6,d0
00014152 0838 0000 D022             		btst	#0,($FFFFD022).w
00014158 6700                       		beq.s	loc_13FF2
0001415A 4440                       		neg.w	d0
0001415C 137C 0040 0026             		move.b	#$40,$26(a1)
00014162                            
00014162                            loc_13FF2:
00014162 D169 0008                  		add.w	d0,8(a1)
00014166 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
0001416C 137C 0006 0028             		move.b	#6,$28(a1)
00014172 4A68 002C                  		tst.w	$2C(a0)
00014176 6700 0000                  		beq.w	loc_1403E
0001417A 0268 0007 003A             		andi.w	#7,$3A(a0)
00014180 0668 0000 003A             		addi.w	#0,$3A(a0)
00014186 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001418A 0440 000C                  		subi.w	#$C,d0
0001418E 3340 000C                  		move.w	d0,$C(a1)
00014192 4EB9 0000 29B4             		jsr	(RandomNumber).l
00014198 1340 0026                  		move.b	d0,$26(a1)
0001419C 3038 FE04                  		move.w	($FFFFFE04).w,d0
000141A0 0200 0003                  		andi.b	#3,d0
000141A4 6600                       		bne.s	loc_14082
000141A6 137C 000E 0028             		move.b	#$E,$28(a1)
000141AC 6000                       		bra.s	loc_14082
000141AE                            ; ===========================================================================
000141AE                            
000141AE                            loc_1403E:
000141AE 0828 0007 0036             		btst	#7,$36(a0)
000141B4 6700                       		beq.s	loc_14082
000141B6 3438 FE14                  		move.w	($FFFFFE14).w,d2
000141BA E24A                       		lsr.w	#1,d2
000141BC 4EB9 0000 29B4             		jsr	(RandomNumber).l
000141C2 0240 0003                  		andi.w	#3,d0
000141C6 6600                       		bne.s	loc_1406A
000141C8 08E8 0006 0036             		bset	#6,$36(a0)
000141CE 6600                       		bne.s	loc_14082
000141D0 1342 0028                  		move.b	d2,$28(a1)
000141D4 337C 001C 0038             		move.w	#$1C,$38(a1)
000141DA                            
000141DA                            loc_1406A:
000141DA 4A28 0034                  		tst.b	$34(a0)
000141DE 6600                       		bne.s	loc_14082
000141E0 08E8 0006 0036             		bset	#6,$36(a0)
000141E6 6600                       		bne.s	loc_14082
000141E8 1342 0028                  		move.b	d2,$28(a1)
000141EC 337C 001C 0038             		move.w	#$1C,$38(a1)
000141F2                            
000141F2                            loc_14082:
000141F2 5328 0034                  		subq.b	#1,$34(a0)
000141F6 6A00                       		bpl.s	locret_1408C
000141F8 4268 0036                  		clr.w	$36(a0)
000141FC                            
000141FC                            locret_1408C:
000141FC 4E75                       		rts	
000141FE                            
000141FE                            ; ---------------------------------------------------------------------------
000141FE                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000141FE                            ; ---------------------------------------------------------------------------
000141FE                            
000141FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141FE                            
000141FE                            
000141FE                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000141FE 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00014204 6200                       		bhi.s	loc_140AC
00014206 303C 0082                  		move.w	#$82,d0		; play LZ music
0001420A 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00014210 6600                       		bne.s	loc_140A6
00014212 303C 0086                  		move.w	#$86,d0		; play SBZ music
00014216                            
00014216                            loc_140A6:
00014216 4EB9 0000 1396             		jsr	(PlaySound).l
0001421C                            
0001421C                            loc_140AC:
0001421C 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00014222 4238 D372                  		clr.b	($FFFFD372).w
00014226 4E75                       		rts	
00014228                            ; End of function ResumeMusic
00014228                            
00014228                            ; ===========================================================================
00014228                            Ani_obj0A:
00014228                            	include "_anim\obj0A.asm"
00014228                            ; ---------------------------------------------------------------------------
00014228                            ; Animation script - countdown numbers and bubbles (LZ)
00014228                            ; ---------------------------------------------------------------------------
00014228 0000                       		dc.w byte_140D6-Ani_obj0A
0001422A 0000                       		dc.w byte_140E0-Ani_obj0A
0001422C 0000                       		dc.w byte_140EA-Ani_obj0A
0001422E 0000                       		dc.w byte_140F4-Ani_obj0A
00014230 0000                       		dc.w byte_140FE-Ani_obj0A
00014232 0000                       		dc.w byte_14108-Ani_obj0A
00014234 0000                       		dc.w byte_14112-Ani_obj0A
00014236 0000                       		dc.w byte_14118-Ani_obj0A
00014238 0000                       		dc.w byte_14120-Ani_obj0A
0001423A 0000                       		dc.w byte_14128-Ani_obj0A
0001423C 0000                       		dc.w byte_14130-Ani_obj0A
0001423E 0000                       		dc.w byte_14138-Ani_obj0A
00014240 0000                       		dc.w byte_14140-Ani_obj0A
00014242 0000                       		dc.w byte_14148-Ani_obj0A
00014244 0000                       		dc.w byte_1414A-Ani_obj0A
00014246 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014250 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001425A 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014264 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001426E 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00014278 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014282 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00014288 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014290 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00014298 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
000142A0 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
000142A8 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
000142B0 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
000142B8 0EFC                       byte_14148:	dc.b $E, $FC
000142BA 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
000142C0                            		even
000142C0                            		even
000142C0                            
000142C0                            ; ---------------------------------------------------------------------------
000142C0                            ; Sprite mappings - drowning countdown numbers (LZ)
000142C0                            ; ---------------------------------------------------------------------------
000142C0                            Map_obj0A:
000142C0                            	include "_maps\obj0A.asm"
000142C0                            ; ---------------------------------------------------------------------------
000142C0                            ; Sprite mappings - drowning countdown numbers (LZ)
000142C0                            ; ---------------------------------------------------------------------------
000142C0 0000                       		dc.w byte_14152-Map_obj0A
000142C2 01                         byte_14152:	dc.b 1
000142C3 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000142C8                            		even
000142C8                            		even
000142C8                            
000142C8                            ; ===========================================================================
000142C8                            ; ---------------------------------------------------------------------------
000142C8                            ; Object 38 - shield and invincibility stars
000142C8                            ; ---------------------------------------------------------------------------
000142C8                            
000142C8                            Obj38:					; XREF: Obj_Index
000142C8 7000                       		moveq	#0,d0
000142CA 1028 0024                  		move.b	$24(a0),d0
000142CE 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000142D2 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
000142D6                            ; ===========================================================================
000142D6 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
000142D8 0000                       		dc.w Obj38_Shield-Obj38_Index
000142DA 0000                       		dc.w Obj38_Stars-Obj38_Index
000142DC                            ; ===========================================================================
000142DC                            
000142DC                            Obj38_Main:				; XREF: Obj38_Index
000142DC 5428 0024                  		addq.b	#2,$24(a0)
000142E0 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
000142E8 117C 0004 0001             		move.b	#4,1(a0)
000142EE 117C 0001 0018             		move.b	#1,$18(a0)
000142F4 117C 0010 0019             		move.b	#$10,$19(a0)
000142FA 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000142FE 6600                       		bne.s	Obj38_DoStars	; if not, branch
00014300 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
00014306 4E75                       		rts	
00014308                            ; ===========================================================================
00014308                            
00014308                            Obj38_DoStars:
00014308 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
0001430C 317C 055C 0002             		move.w	#$55C,2(a0)
00014312 4E75                       		rts	
00014314                            ; ===========================================================================
00014314                            
00014314                            Obj38_Shield:				; XREF: Obj38_Index
00014314 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00014318 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
0001431A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
0001431E 6700                       		beq.s	Obj38_Delete	; if not, branch
00014320 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014326 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001432C 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014332 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014338 4EB9 0000 A7EE             		jsr	AnimateSprite
0001433E 4EFA 943C                  		jmp	DisplaySprite
00014342                            ; ===========================================================================
00014342                            
00014342                            Obj38_RmvShield:
00014342 4E75                       		rts	
00014344                            ; ===========================================================================
00014344                            
00014344                            Obj38_Delete:
00014344 4EFA 9472                  		jmp	DeleteObject
00014348                            ; ===========================================================================
00014348                            
00014348                            Obj38_Stars:				; XREF: Obj38_Index
00014348 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001434C 6700                       		beq.s	Obj38_Delete2	; if not, branch
0001434E 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014352 1228 001C                  		move.b	$1C(a0),d1
00014356 5301                       		subq.b	#1,d1
00014358 6000                       		bra.s	Obj38_StarTrail
0001435A                            ; ===========================================================================
0001435A E909                       		lsl.b	#4,d1
0001435C 5801                       		addq.b	#4,d1
0001435E 9001                       		sub.b	d1,d0
00014360 1228 0030                  		move.b	$30(a0),d1
00014364 9001                       		sub.b	d1,d0
00014366 5801                       		addq.b	#4,d1
00014368 0201 000F                  		andi.b	#$F,d1
0001436C 1141 0030                  		move.b	d1,$30(a0)
00014370 6000                       		bra.s	Obj38_StarTrail2a
00014372                            ; ===========================================================================
00014372                            
00014372                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014372 E709                       		lsl.b	#3,d1
00014374 1401                       		move.b	d1,d2
00014376 D201                       		add.b	d1,d1
00014378 D202                       		add.b	d2,d1
0001437A 5801                       		addq.b	#4,d1
0001437C 9001                       		sub.b	d1,d0
0001437E 1228 0030                  		move.b	$30(a0),d1
00014382 9001                       		sub.b	d1,d0
00014384 5801                       		addq.b	#4,d1
00014386 0C01 0018                  		cmpi.b	#$18,d1
0001438A 6500                       		bcs.s	Obj38_StarTrail2
0001438C 7200                       		moveq	#0,d1
0001438E                            
0001438E                            Obj38_StarTrail2:
0001438E 1141 0030                  		move.b	d1,$30(a0)
00014392                            
00014392                            Obj38_StarTrail2a:
00014392 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014396 43F1 0000                  		lea	(a1,d0.w),a1
0001439A 3159 0008                  		move.w	(a1)+,8(a0)
0001439E 3159 000C                  		move.w	(a1)+,$C(a0)
000143A2 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000143A8 43F9 0000 0000             		lea	(Ani_obj38).l,a1
000143AE 4EB9 0000 A7EE             		jsr	AnimateSprite
000143B4 4EFA 93C6                  		jmp	DisplaySprite
000143B8                            ; ===========================================================================
000143B8                            
000143B8                            Obj38_Delete2:				; XREF: Obj38_Stars
000143B8 4EFA 93FE                  		jmp	DeleteObject
000143BC                            ; ===========================================================================
000143BC                            ; ---------------------------------------------------------------------------
000143BC                            ; Object 4A - special stage entry from beta
000143BC                            ; ---------------------------------------------------------------------------
000143BC                            
000143BC                            Obj4A:					; XREF: Obj_Index
000143BC 7000                       		moveq	#0,d0
000143BE 1028 0024                  		move.b	$24(a0),d0
000143C2 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
000143C6 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
000143CA                            ; ===========================================================================
000143CA 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
000143CC 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
000143CE 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
000143D0                            ; ===========================================================================
000143D0                            
000143D0                            Obj4A_Main:				; XREF: Obj4A_Index
000143D0 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
000143D4 6700                       		beq.s	Obj4A_Main2	; if yes, branch
000143D6 4E75                       		rts	
000143D8                            ; ===========================================================================
000143D8                            
000143D8                            Obj4A_Main2:
000143D8 5428 0024                  		addq.b	#2,$24(a0)
000143DC 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
000143E4 117C 0004 0001             		move.b	#4,1(a0)
000143EA 117C 0001 0018             		move.b	#1,$18(a0)
000143F0 117C 0038 0019             		move.b	#$38,$19(a0)
000143F6 317C 0541 0002             		move.w	#$541,2(a0)
000143FC 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
00014402                            
00014402                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
00014402 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00014408 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
0001440E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014414 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
0001441A 4EB9 0000 A7EE             		jsr	AnimateSprite
00014420 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00014426 6600                       		bne.s	Obj4A_Display
00014428 4A38 D000                  		tst.b	($FFFFD000).w
0001442C 6700                       		beq.s	Obj4A_Display
0001442E 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014434 303C 00A8                  		move.w	#$A8,d0
00014438 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001443E                            
0001443E                            Obj4A_Display:
0001443E 4EFA 933C                  		jmp	DisplaySprite
00014442                            ; ===========================================================================
00014442                            
00014442                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014442 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014446 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00014448 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0001444E 4EFA 9368                  		jmp	DeleteObject
00014452                            ; ===========================================================================
00014452                            
00014452                            Obj4A_Wait:
00014452 4E75                       		rts	
00014454                            ; ===========================================================================
00014454                            ; ---------------------------------------------------------------------------
00014454                            ; Object 08 - water splash (LZ)
00014454                            ; ---------------------------------------------------------------------------
00014454                            
00014454                            Obj08:					; XREF: Obj_Index
00014454 7000                       		moveq	#0,d0
00014456 1028 0024                  		move.b	$24(a0),d0
0001445A 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001445E 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014462                            ; ===========================================================================
00014462 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014464 0000                       		dc.w Obj08_Display-Obj08_Index
00014466 0000                       		dc.w Obj08_Delete-Obj08_Index
00014468                            ; ===========================================================================
00014468                            
00014468                            Obj08_Main:				; XREF: Obj08_Index
00014468 5428 0024                  		addq.b	#2,$24(a0)
0001446C 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014474 0028 0004 0001             		ori.b	#4,1(a0)
0001447A 117C 0001 0018             		move.b	#1,$18(a0)
00014480 117C 0010 0019             		move.b	#$10,$19(a0)
00014486 317C 4259 0002             		move.w	#$4259,2(a0)
0001448C 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014492                            
00014492                            Obj08_Display:				; XREF: Obj08_Index
00014492 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00014498 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001449E 4EB9 0000 A7EE             		jsr	AnimateSprite
000144A4 4EFA 92D6                  		jmp	DisplaySprite
000144A8                            ; ===========================================================================
000144A8                            
000144A8                            Obj08_Delete:				; XREF: Obj08_Index
000144A8 4EFA 930E                  		jmp	DeleteObject	; delete when animation	is complete
000144AC                            ; ===========================================================================
000144AC                            Ani_obj38:
000144AC                            	include "_anim\obj38.asm"
000144AC                            ; ---------------------------------------------------------------------------
000144AC                            ; Animation script - shield and invincibility stars
000144AC                            ; ---------------------------------------------------------------------------
000144AC 0000                       		dc.w byte_14356-Ani_obj38
000144AE 0000                       		dc.w byte_1435E-Ani_obj38
000144B0 0000                       		dc.w byte_14364-Ani_obj38
000144B2 0000                       		dc.w byte_1437E-Ani_obj38
000144B4 0000                       		dc.w byte_14398-Ani_obj38
000144B6 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
000144BE 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000144C4 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000144D5 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000144DE 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000144EF 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000144F8 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
00014509 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
00014512                            		even
00014512                            		even
00014512                            
00014512                            ; ---------------------------------------------------------------------------
00014512                            ; Sprite mappings - shield and invincibility stars
00014512                            ; ---------------------------------------------------------------------------
00014512                            Map_obj38:
00014512                            	include "_maps\obj38.asm"
00014512                            ; ---------------------------------------------------------------------------
00014512                            ; Sprite mappings - shield and invincibility stars
00014512                            ; ---------------------------------------------------------------------------
00014512 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
00014516 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
0001451A 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
0001451E 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
00014522 04                         byte_143C2:	dc.b 4
00014523 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014528 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
0001452D 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014532 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014537 04                         byte_143D7:	dc.b 4
00014538 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
0001453D E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014542 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014547 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
0001454C 04                         byte_143EC:	dc.b 4
0001454D E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014552 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014557 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001455C 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014561 04                         byte_14401:	dc.b 4
00014562 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014567 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
0001456C 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014571 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014576 04                         byte_14416:	dc.b 4
00014577 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001457C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014581 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014586 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
0001458B 04                         byte_1442B:	dc.b 4
0001458C E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014591 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014596 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0001459B 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000145A0 04                         byte_14440:	dc.b 4
000145A1 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000145A6 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000145AB 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000145B0 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000145B6 00                         		even
000145B6 00                         		even
000145B6                            
000145B6                            Ani_obj4A:
000145B6                            	include "_anim\obj4A.asm"
000145B6                            ; ---------------------------------------------------------------------------
000145B6                            ; Animation script - special stage entry effect from beta
000145B6                            ; ---------------------------------------------------------------------------
000145B6 0000                       		dc.w byte_14458-Ani_obj4A
000145B8 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
000145CC                            		even
000145CC                            		even
000145CC                            
000145CC                            ; ---------------------------------------------------------------------------
000145CC                            ; Sprite mappings - special stage entry	from beta
000145CC                            ; ---------------------------------------------------------------------------
000145CC                            Map_obj4A:
000145CC                            	include "_maps\obj4A.asm"
000145CC                            ; ---------------------------------------------------------------------------
000145CC                            ; Sprite mappings - special stage entry	from beta
000145CC                            ; ---------------------------------------------------------------------------
000145CC 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
000145D0 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
000145D4 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
000145D8 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
000145DC 03                         byte_1447C:	dc.b 3
000145DD F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000145E2 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000145E7 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000145EC 03                         byte_1448C:	dc.b 3
000145ED F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000145F2 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000145F7 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000145FC 05                         byte_1449C:	dc.b 5
000145FD E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
00014602 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
00014607 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
0001460C 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
00014611 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
00014616 09                         byte_144B6:	dc.b 9
00014617 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
0001461C F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
00014621 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00014626 0005 0034 10               		dc.b 0,	5, 0, $34, $10
0001462B F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014630 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014635 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001463A 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001463F F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014644 12                         byte_144E4:	dc.b $12
00014645 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001464A F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001464F F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014654 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00014659 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001465E 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014663 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00014668 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001466D 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014672 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014677 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001467C 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014681 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014686 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001468B 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014690 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014695 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001469A F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001469F 11                         byte_1453F:	dc.b $11
000146A0 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
000146A5 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
000146AA 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
000146AF 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
000146B4 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
000146B9 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
000146BE 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
000146C3 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000146C8 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000146CD 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000146D2 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000146D7 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000146DC F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000146E1 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000146E6 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000146EB 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000146F0 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000146F5 09                         byte_14595:	dc.b 9
000146F6 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000146FB 0400 0825 28               		dc.b 4,	0, 8, $25, $28
00014700 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
00014705 0400 0826 40               		dc.b 4,	0, 8, $26, $40
0001470A FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
0001470F FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
00014714 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
00014719 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
0001471E 04                         		dc.b 4
0001471F 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00014724                            		even
00014724                            		even
00014724                            
00014724                            Ani_obj08:
00014724                            	include "_anim\obj08.asm"
00014724                            ; ---------------------------------------------------------------------------
00014724                            ; Animation script - water splash (LZ)
00014724                            ; ---------------------------------------------------------------------------
00014724 0000                       		dc.w byte_145C6-Ani_obj08
00014726 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
0001472C                            		even
0001472C                            		even
0001472C                            
0001472C                            ; ---------------------------------------------------------------------------
0001472C                            ; Sprite mappings - water splash (LZ)
0001472C                            ; ---------------------------------------------------------------------------
0001472C                            Map_obj08:
0001472C                            	include "_maps\obj08.asm"
0001472C                            ; ---------------------------------------------------------------------------
0001472C                            ; Sprite mappings - water splash (LZ)
0001472C                            ; ---------------------------------------------------------------------------
0001472C 0000                       		dc.w byte_145D2-Map_obj08
0001472E 0000                       		dc.w byte_145DD-Map_obj08
00014730 0000                       		dc.w byte_145E8-Map_obj08
00014732 02                         byte_145D2:	dc.b 2
00014733 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00014738 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001473D 02                         byte_145DD:	dc.b 2
0001473E E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014743 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00014748 01                         byte_145E8:	dc.b 1
00014749 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001474E                            		even
0001474E                            		even
0001474E                            
0001474E                            ; ---------------------------------------------------------------------------
0001474E                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001474E                            ; ---------------------------------------------------------------------------
0001474E                            
0001474E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001474E                            
0001474E                            
0001474E                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001474E 0828 0003 0022             		btst	#3,$22(a0)
00014754 6700                       		beq.s	loc_14602
00014756 7000                       		moveq	#0,d0
00014758 11C0 F768                  		move.b	d0,($FFFFF768).w
0001475C 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014760 4E75                       		rts	
00014762                            ; ===========================================================================
00014762                            
00014762                            loc_14602:
00014762 7003                       		moveq	#3,d0
00014764 11C0 F768                  		move.b	d0,($FFFFF768).w
00014768 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001476C 1028 0026                  		move.b	$26(a0),d0
00014770 0600 0020                  		addi.b	#$20,d0
00014774 6A00                       		bpl.s	loc_14624
00014776 1028 0026                  		move.b	$26(a0),d0
0001477A 6A00                       		bpl.s	loc_1461E
0001477C 5300                       		subq.b	#1,d0
0001477E                            
0001477E                            loc_1461E:
0001477E 0600 0020                  		addi.b	#$20,d0
00014782 6000                       		bra.s	loc_14630
00014784                            ; ===========================================================================
00014784                            
00014784                            loc_14624:
00014784 1028 0026                  		move.b	$26(a0),d0
00014788 6A00                       		bpl.s	loc_1462C
0001478A 5200                       		addq.b	#1,d0
0001478C                            
0001478C                            loc_1462C:
0001478C 0600 001F                  		addi.b	#$1F,d0
00014790                            
00014790                            loc_14630:
00014790 0200 00C0                  		andi.b	#$C0,d0
00014794 0C00 0040                  		cmpi.b	#$40,d0
00014798 6700 0000                  		beq.w	Sonic_WalkVertL
0001479C 0C00 0080                  		cmpi.b	#$80,d0
000147A0 6700 0000                  		beq.w	Sonic_WalkCeiling
000147A4 0C00 00C0                  		cmpi.b	#$C0,d0
000147A8 6700 0000                  		beq.w	Sonic_WalkVertR
000147AC 3428 000C                  		move.w	$C(a0),d2
000147B0 3628 0008                  		move.w	8(a0),d3
000147B4 7000                       		moveq	#0,d0
000147B6 1028 0016                  		move.b	$16(a0),d0
000147BA 4880                       		ext.w	d0
000147BC D440                       		add.w	d0,d2
000147BE 1028 0017                  		move.b	$17(a0),d0
000147C2 4880                       		ext.w	d0
000147C4 D640                       		add.w	d0,d3
000147C6 49F8 F768                  		lea	($FFFFF768).w,a4
000147CA 367C 0010                  		movea.w	#$10,a3
000147CE 3C3C 0000                  		move.w	#0,d6
000147D2 7A0D                       		moveq	#$D,d5
000147D4 6100 0000                  		bsr.w	FindFloor
000147D8 3F01                       		move.w	d1,-(sp)
000147DA 3428 000C                  		move.w	$C(a0),d2
000147DE 3628 0008                  		move.w	8(a0),d3
000147E2 7000                       		moveq	#0,d0
000147E4 1028 0016                  		move.b	$16(a0),d0
000147E8 4880                       		ext.w	d0
000147EA D440                       		add.w	d0,d2
000147EC 1028 0017                  		move.b	$17(a0),d0
000147F0 4880                       		ext.w	d0
000147F2 4440                       		neg.w	d0
000147F4 D640                       		add.w	d0,d3
000147F6 49F8 F76A                  		lea	($FFFFF76A).w,a4
000147FA 367C 0010                  		movea.w	#$10,a3
000147FE 3C3C 0000                  		move.w	#0,d6
00014802 7A0D                       		moveq	#$D,d5
00014804 6100 0000                  		bsr.w	FindFloor
00014808 301F                       		move.w	(sp)+,d0
0001480A 6100 0000                  		bsr.w	Sonic_Angle
0001480E 4A41                       		tst.w	d1
00014810 6700                       		beq.s	locret_146BE
00014812 6A00                       		bpl.s	loc_146C0
00014814 0C41 FFF2                  		cmpi.w	#-$E,d1
00014818 6D00                       		blt.s	locret_146E6
0001481A D368 000C                  		add.w	d1,$C(a0)
0001481E                            
0001481E                            locret_146BE:
0001481E 4E75                       		rts	
00014820                            ; ===========================================================================
00014820                            
00014820                            loc_146C0:
00014820 0C41 000E                  		cmpi.w	#$E,d1
00014824 6E00                       		bgt.s	loc_146CC
00014826                            
00014826                            loc_146C6:
00014826 D368 000C                  		add.w	d1,$C(a0)
0001482A 4E75                       		rts	
0001482C                            ; ===========================================================================
0001482C                            
0001482C                            loc_146CC:
0001482C 4A28 0038                  		tst.b	$38(a0)
00014830 66F4                       		bne.s	loc_146C6
00014832 08E8 0001 0022             		bset	#1,$22(a0)
00014838 08A8 0005 0022             		bclr	#5,$22(a0)
0001483E 117C 0001 001D             		move.b	#1,$1D(a0)
00014844 4E75                       		rts	
00014846                            ; ===========================================================================
00014846                            
00014846                            locret_146E6:
00014846 4E75                       		rts	
00014848                            ; End of function Sonic_AnglePos
00014848                            
00014848                            ; ===========================================================================
00014848 2428 0008                  		move.l	8(a0),d2
0001484C 3028 0010                  		move.w	$10(a0),d0
00014850 48C0                       		ext.l	d0
00014852 E180                       		asl.l	#8,d0
00014854 9480                       		sub.l	d0,d2
00014856 2142 0008                  		move.l	d2,8(a0)
0001485A 303C 0038                  		move.w	#$38,d0
0001485E 48C0                       		ext.l	d0
00014860 E180                       		asl.l	#8,d0
00014862 9680                       		sub.l	d0,d3
00014864 2143 000C                  		move.l	d3,$C(a0)
00014868 4E75                       		rts	
0001486A                            ; ===========================================================================
0001486A                            
0001486A                            locret_1470A:
0001486A 4E75                       		rts	
0001486C                            ; ===========================================================================
0001486C 2628 000C                  		move.l	$C(a0),d3
00014870 3028 0012                  		move.w	$12(a0),d0
00014874 0440 0038                  		subi.w	#$38,d0
00014878 3140 0012                  		move.w	d0,$12(a0)
0001487C 48C0                       		ext.l	d0
0001487E E180                       		asl.l	#8,d0
00014880 9680                       		sub.l	d0,d3
00014882 2143 000C                  		move.l	d3,$C(a0)
00014886 4E75                       		rts	
00014888 4E75                       		rts	
0001488A                            ; ===========================================================================
0001488A 2428 0008                  		move.l	8(a0),d2
0001488E 2628 000C                  		move.l	$C(a0),d3
00014892 3028 0010                  		move.w	$10(a0),d0
00014896 48C0                       		ext.l	d0
00014898 E180                       		asl.l	#8,d0
0001489A 9480                       		sub.l	d0,d2
0001489C 3028 0012                  		move.w	$12(a0),d0
000148A0 48C0                       		ext.l	d0
000148A2 E180                       		asl.l	#8,d0
000148A4 9680                       		sub.l	d0,d3
000148A6 2142 0008                  		move.l	d2,8(a0)
000148AA 2143 000C                  		move.l	d3,$C(a0)
000148AE 4E75                       		rts	
000148B0                            
000148B0                            ; ---------------------------------------------------------------------------
000148B0                            ; Subroutine to	change Sonic's angle as he walks along the floor
000148B0                            ; ---------------------------------------------------------------------------
000148B0                            
000148B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148B0                            
000148B0                            
000148B0                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
000148B0 1438 F76A                  		move.b	($FFFFF76A).w,d2
000148B4 B240                       		cmp.w	d0,d1
000148B6 6F00                       		ble.s	loc_1475E
000148B8 1438 F768                  		move.b	($FFFFF768).w,d2
000148BC 3200                       		move.w	d0,d1
000148BE                            
000148BE                            loc_1475E:
000148BE 0802 0000                  		btst	#0,d2
000148C2 6600                       		bne.s	loc_1476A
000148C4 1142 0026                  		move.b	d2,$26(a0)
000148C8 4E75                       		rts	
000148CA                            ; ===========================================================================
000148CA                            
000148CA                            loc_1476A:
000148CA 1428 0026                  		move.b	$26(a0),d2
000148CE 0602 0020                  		addi.b	#$20,d2
000148D2 0202 00C0                  		andi.b	#$C0,d2
000148D6 1142 0026                  		move.b	d2,$26(a0)
000148DA 4E75                       		rts	
000148DC                            ; End of function Sonic_Angle
000148DC                            
000148DC                            ; ---------------------------------------------------------------------------
000148DC                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000148DC                            ; ---------------------------------------------------------------------------
000148DC                            
000148DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000148DC                            
000148DC                            
000148DC                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000148DC 3428 000C                  		move.w	$C(a0),d2
000148E0 3628 0008                  		move.w	8(a0),d3
000148E4 7000                       		moveq	#0,d0
000148E6 1028 0017                  		move.b	$17(a0),d0
000148EA 4880                       		ext.w	d0
000148EC 4440                       		neg.w	d0
000148EE D440                       		add.w	d0,d2
000148F0 1028 0016                  		move.b	$16(a0),d0
000148F4 4880                       		ext.w	d0
000148F6 D640                       		add.w	d0,d3
000148F8 49F8 F768                  		lea	($FFFFF768).w,a4
000148FC 367C 0010                  		movea.w	#$10,a3
00014900 3C3C 0000                  		move.w	#0,d6
00014904 7A0D                       		moveq	#$D,d5
00014906 6100 0000                  		bsr.w	FindWall
0001490A 3F01                       		move.w	d1,-(sp)
0001490C 3428 000C                  		move.w	$C(a0),d2
00014910 3628 0008                  		move.w	8(a0),d3
00014914 7000                       		moveq	#0,d0
00014916 1028 0017                  		move.b	$17(a0),d0
0001491A 4880                       		ext.w	d0
0001491C D440                       		add.w	d0,d2
0001491E 1028 0016                  		move.b	$16(a0),d0
00014922 4880                       		ext.w	d0
00014924 D640                       		add.w	d0,d3
00014926 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001492A 367C 0010                  		movea.w	#$10,a3
0001492E 3C3C 0000                  		move.w	#0,d6
00014932 7A0D                       		moveq	#$D,d5
00014934 6100 0000                  		bsr.w	FindWall
00014938 301F                       		move.w	(sp)+,d0
0001493A 6100 FF74                  		bsr.w	Sonic_Angle
0001493E 4A41                       		tst.w	d1
00014940 6700                       		beq.s	locret_147F0
00014942 6A00                       		bpl.s	loc_147F2
00014944 0C41 FFF2                  		cmpi.w	#-$E,d1
00014948 6D00 FF20                  		blt.w	locret_1470A
0001494C D368 0008                  		add.w	d1,8(a0)
00014950                            
00014950                            locret_147F0:
00014950 4E75                       		rts	
00014952                            ; ===========================================================================
00014952                            
00014952                            loc_147F2:
00014952 0C41 000E                  		cmpi.w	#$E,d1
00014956 6E00                       		bgt.s	loc_147FE
00014958                            
00014958                            loc_147F8:
00014958 D368 0008                  		add.w	d1,8(a0)
0001495C 4E75                       		rts	
0001495E                            ; ===========================================================================
0001495E                            
0001495E                            loc_147FE:
0001495E 4A28 0038                  		tst.b	$38(a0)
00014962 66F4                       		bne.s	loc_147F8
00014964 08E8 0001 0022             		bset	#1,$22(a0)
0001496A 08A8 0005 0022             		bclr	#5,$22(a0)
00014970 117C 0001 001D             		move.b	#1,$1D(a0)
00014976 4E75                       		rts	
00014978                            ; End of function Sonic_WalkVertR
00014978                            
00014978                            ; ---------------------------------------------------------------------------
00014978                            ; Subroutine allowing Sonic to walk upside-down
00014978                            ; ---------------------------------------------------------------------------
00014978                            
00014978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014978                            
00014978                            
00014978                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00014978 3428 000C                  		move.w	$C(a0),d2
0001497C 3628 0008                  		move.w	8(a0),d3
00014980 7000                       		moveq	#0,d0
00014982 1028 0016                  		move.b	$16(a0),d0
00014986 4880                       		ext.w	d0
00014988 9440                       		sub.w	d0,d2
0001498A 0A42 000F                  		eori.w	#$F,d2
0001498E 1028 0017                  		move.b	$17(a0),d0
00014992 4880                       		ext.w	d0
00014994 D640                       		add.w	d0,d3
00014996 49F8 F768                  		lea	($FFFFF768).w,a4
0001499A 367C FFF0                  		movea.w	#-$10,a3
0001499E 3C3C 1000                  		move.w	#$1000,d6
000149A2 7A0D                       		moveq	#$D,d5
000149A4 6100 0000                  		bsr.w	FindFloor
000149A8 3F01                       		move.w	d1,-(sp)
000149AA 3428 000C                  		move.w	$C(a0),d2
000149AE 3628 0008                  		move.w	8(a0),d3
000149B2 7000                       		moveq	#0,d0
000149B4 1028 0016                  		move.b	$16(a0),d0
000149B8 4880                       		ext.w	d0
000149BA 9440                       		sub.w	d0,d2
000149BC 0A42 000F                  		eori.w	#$F,d2
000149C0 1028 0017                  		move.b	$17(a0),d0
000149C4 4880                       		ext.w	d0
000149C6 9640                       		sub.w	d0,d3
000149C8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000149CC 367C FFF0                  		movea.w	#-$10,a3
000149D0 3C3C 1000                  		move.w	#$1000,d6
000149D4 7A0D                       		moveq	#$D,d5
000149D6 6100 0000                  		bsr.w	FindFloor
000149DA 301F                       		move.w	(sp)+,d0
000149DC 6100 FED2                  		bsr.w	Sonic_Angle
000149E0 4A41                       		tst.w	d1
000149E2 6700                       		beq.s	locret_14892
000149E4 6A00                       		bpl.s	loc_14894
000149E6 0C41 FFF2                  		cmpi.w	#-$E,d1
000149EA 6D00 FE5A                  		blt.w	locret_146E6
000149EE 9368 000C                  		sub.w	d1,$C(a0)
000149F2                            
000149F2                            locret_14892:
000149F2 4E75                       		rts	
000149F4                            ; ===========================================================================
000149F4                            
000149F4                            loc_14894:
000149F4 0C41 000E                  		cmpi.w	#$E,d1
000149F8 6E00                       		bgt.s	loc_148A0
000149FA                            
000149FA                            loc_1489A:
000149FA 9368 000C                  		sub.w	d1,$C(a0)
000149FE 4E75                       		rts	
00014A00                            ; ===========================================================================
00014A00                            
00014A00                            loc_148A0:
00014A00 4A28 0038                  		tst.b	$38(a0)
00014A04 66F4                       		bne.s	loc_1489A
00014A06 08E8 0001 0022             		bset	#1,$22(a0)
00014A0C 08A8 0005 0022             		bclr	#5,$22(a0)
00014A12 117C 0001 001D             		move.b	#1,$1D(a0)
00014A18 4E75                       		rts	
00014A1A                            ; End of function Sonic_WalkCeiling
00014A1A                            
00014A1A                            ; ---------------------------------------------------------------------------
00014A1A                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00014A1A                            ; ---------------------------------------------------------------------------
00014A1A                            
00014A1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A1A                            
00014A1A                            
00014A1A                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00014A1A 3428 000C                  		move.w	$C(a0),d2
00014A1E 3628 0008                  		move.w	8(a0),d3
00014A22 7000                       		moveq	#0,d0
00014A24 1028 0017                  		move.b	$17(a0),d0
00014A28 4880                       		ext.w	d0
00014A2A 9440                       		sub.w	d0,d2
00014A2C 1028 0016                  		move.b	$16(a0),d0
00014A30 4880                       		ext.w	d0
00014A32 9640                       		sub.w	d0,d3
00014A34 0A43 000F                  		eori.w	#$F,d3
00014A38 49F8 F768                  		lea	($FFFFF768).w,a4
00014A3C 367C FFF0                  		movea.w	#-$10,a3
00014A40 3C3C 0800                  		move.w	#$800,d6
00014A44 7A0D                       		moveq	#$D,d5
00014A46 6100 0000                  		bsr.w	FindWall
00014A4A 3F01                       		move.w	d1,-(sp)
00014A4C 3428 000C                  		move.w	$C(a0),d2
00014A50 3628 0008                  		move.w	8(a0),d3
00014A54 7000                       		moveq	#0,d0
00014A56 1028 0017                  		move.b	$17(a0),d0
00014A5A 4880                       		ext.w	d0
00014A5C D440                       		add.w	d0,d2
00014A5E 1028 0016                  		move.b	$16(a0),d0
00014A62 4880                       		ext.w	d0
00014A64 9640                       		sub.w	d0,d3
00014A66 0A43 000F                  		eori.w	#$F,d3
00014A6A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014A6E 367C FFF0                  		movea.w	#-$10,a3
00014A72 3C3C 0800                  		move.w	#$800,d6
00014A76 7A0D                       		moveq	#$D,d5
00014A78 6100 0000                  		bsr.w	FindWall
00014A7C 301F                       		move.w	(sp)+,d0
00014A7E 6100 FE30                  		bsr.w	Sonic_Angle
00014A82 4A41                       		tst.w	d1
00014A84 6700                       		beq.s	locret_14934
00014A86 6A00                       		bpl.s	loc_14936
00014A88 0C41 FFF2                  		cmpi.w	#-$E,d1
00014A8C 6D00 FDDC                  		blt.w	locret_1470A
00014A90 9368 0008                  		sub.w	d1,8(a0)
00014A94                            
00014A94                            locret_14934:
00014A94 4E75                       		rts	
00014A96                            ; ===========================================================================
00014A96                            
00014A96                            loc_14936:
00014A96 0C41 000E                  		cmpi.w	#$E,d1
00014A9A 6E00                       		bgt.s	loc_14942
00014A9C                            
00014A9C                            loc_1493C:
00014A9C 9368 0008                  		sub.w	d1,8(a0)
00014AA0 4E75                       		rts	
00014AA2                            ; ===========================================================================
00014AA2                            
00014AA2                            loc_14942:
00014AA2 4A28 0038                  		tst.b	$38(a0)
00014AA6 66F4                       		bne.s	loc_1493C
00014AA8 08E8 0001 0022             		bset	#1,$22(a0)
00014AAE 08A8 0005 0022             		bclr	#5,$22(a0)
00014AB4 117C 0001 001D             		move.b	#1,$1D(a0)
00014ABA 4E75                       		rts	
00014ABC                            ; End of function Sonic_WalkVertL
00014ABC                            
00014ABC                            ; ---------------------------------------------------------------------------
00014ABC                            ; Subroutine to	find which tile	the object is standing on
00014ABC                            ; ---------------------------------------------------------------------------
00014ABC                            
00014ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014ABC                            
00014ABC                            
00014ABC                            Floor_ChkTile:				; XREF: FindFloor; et al
00014ABC 3002                       		move.w	d2,d0
00014ABE E248                       		lsr.w	#1,d0
00014AC0 0240 0380                  		andi.w	#$380,d0
00014AC4 3203                       		move.w	d3,d1
00014AC6 E049                       		lsr.w	#8,d1
00014AC8 0241 007F                  		andi.w	#$7F,d1
00014ACC D041                       		add.w	d1,d0
00014ACE 72FF                       		moveq	#-1,d1
00014AD0 43F8 A400                  		lea	($FFFFA400).w,a1
00014AD4 1231 0000                  		move.b	(a1,d0.w),d1
00014AD8 6700                       		beq.s	loc_14996
00014ADA 6B00                       		bmi.s	loc_1499A
00014ADC 5301                       		subq.b	#1,d1
00014ADE 4881                       		ext.w	d1
00014AE0 EE59                       		ror.w	#7,d1
00014AE2 3002                       		move.w	d2,d0
00014AE4 D040                       		add.w	d0,d0
00014AE6 0240 01E0                  		andi.w	#$1E0,d0
00014AEA D240                       		add.w	d0,d1
00014AEC 3003                       		move.w	d3,d0
00014AEE E648                       		lsr.w	#3,d0
00014AF0 0240 001E                  		andi.w	#$1E,d0
00014AF4 D240                       		add.w	d0,d1
00014AF6                            
00014AF6                            loc_14996:
00014AF6 2241                       		movea.l	d1,a1
00014AF8 4E75                       		rts	
00014AFA                            ; ===========================================================================
00014AFA                            
00014AFA                            loc_1499A:
00014AFA 0241 007F                  		andi.w	#$7F,d1
00014AFE 0828 0006 0001             		btst	#6,1(a0)
00014B04 6700                       		beq.s	loc_149B2
00014B06 5241                       		addq.w	#1,d1
00014B08 0C41 0029                  		cmpi.w	#$29,d1
00014B0C 6600                       		bne.s	loc_149B2
00014B0E 323C 0051                  		move.w	#$51,d1
00014B12                            
00014B12                            loc_149B2:
00014B12 5301                       		subq.b	#1,d1
00014B14 EE59                       		ror.w	#7,d1
00014B16 3002                       		move.w	d2,d0
00014B18 D040                       		add.w	d0,d0
00014B1A 0240 01E0                  		andi.w	#$1E0,d0
00014B1E D240                       		add.w	d0,d1
00014B20 3003                       		move.w	d3,d0
00014B22 E648                       		lsr.w	#3,d0
00014B24 0240 001E                  		andi.w	#$1E,d0
00014B28 D240                       		add.w	d0,d1
00014B2A 2241                       		movea.l	d1,a1
00014B2C 4E75                       		rts	
00014B2E                            ; End of function Floor_ChkTile
00014B2E                            
00014B2E                            
00014B2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B2E                            
00014B2E                            
00014B2E                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014B2E 618C                       		bsr.s	Floor_ChkTile
00014B30 3011                       		move.w	(a1),d0
00014B32 3800                       		move.w	d0,d4
00014B34 0240 07FF                  		andi.w	#$7FF,d0
00014B38 6700                       		beq.s	loc_149DE
00014B3A 0B04                       		btst	d5,d4
00014B3C 6600                       		bne.s	loc_149EC
00014B3E                            
00014B3E                            loc_149DE:
00014B3E D44B                       		add.w	a3,d2
00014B40 6100 0000                  		bsr.w	FindFloor2
00014B44 944B                       		sub.w	a3,d2
00014B46 0641 0010                  		addi.w	#$10,d1
00014B4A 4E75                       		rts	
00014B4C                            ; ===========================================================================
00014B4C                            
00014B4C                            loc_149EC:
00014B4C 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014B50 1032 0000                  		move.b	(a2,d0.w),d0
00014B54 0240 00FF                  		andi.w	#$FF,d0
00014B58 67E4                       		beq.s	loc_149DE
00014B5A 45F9 0000 0000             		lea	(AngleMap).l,a2
00014B60 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014B64 E948                       		lsl.w	#4,d0
00014B66 3203                       		move.w	d3,d1
00014B68 0804 000B                  		btst	#$B,d4
00014B6C 6700                       		beq.s	loc_14A12
00014B6E 4641                       		not.w	d1
00014B70 4414                       		neg.b	(a4)
00014B72                            
00014B72                            loc_14A12:
00014B72 0804 000C                  		btst	#$C,d4
00014B76 6700                       		beq.s	loc_14A22
00014B78 0614 0040                  		addi.b	#$40,(a4)
00014B7C 4414                       		neg.b	(a4)
00014B7E 0414 0040                  		subi.b	#$40,(a4)
00014B82                            
00014B82                            loc_14A22:
00014B82 0241 000F                  		andi.w	#$F,d1
00014B86 D240                       		add.w	d0,d1
00014B88 45F9 0000 0000             		lea	(CollArray1).l,a2
00014B8E 1032 1000                  		move.b	(a2,d1.w),d0
00014B92 4880                       		ext.w	d0
00014B94 BD44                       		eor.w	d6,d4
00014B96 0804 000C                  		btst	#$C,d4
00014B9A 6700                       		beq.s	loc_14A3E
00014B9C 4440                       		neg.w	d0
00014B9E                            
00014B9E                            loc_14A3E:
00014B9E 4A40                       		tst.w	d0
00014BA0 679C                       		beq.s	loc_149DE
00014BA2 6B00                       		bmi.s	loc_14A5A
00014BA4 0C00 0010                  		cmpi.b	#$10,d0
00014BA8 6700                       		beq.s	loc_14A66
00014BAA 3202                       		move.w	d2,d1
00014BAC 0241 000F                  		andi.w	#$F,d1
00014BB0 D041                       		add.w	d1,d0
00014BB2 323C 000F                  		move.w	#$F,d1
00014BB6 9240                       		sub.w	d0,d1
00014BB8 4E75                       		rts	
00014BBA                            ; ===========================================================================
00014BBA                            
00014BBA                            loc_14A5A:
00014BBA 3202                       		move.w	d2,d1
00014BBC 0241 000F                  		andi.w	#$F,d1
00014BC0 D041                       		add.w	d1,d0
00014BC2 6A00 FF7A                  		bpl.w	loc_149DE
00014BC6                            
00014BC6                            loc_14A66:
00014BC6 944B                       		sub.w	a3,d2
00014BC8 6100 0000                  		bsr.w	FindFloor2
00014BCC D44B                       		add.w	a3,d2
00014BCE 0441 0010                  		subi.w	#$10,d1
00014BD2 4E75                       		rts	
00014BD4                            ; End of function FindFloor
00014BD4                            
00014BD4                            
00014BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BD4                            
00014BD4                            
00014BD4                            FindFloor2:				; XREF: FindFloor
00014BD4 6100 FEE6                  		bsr.w	Floor_ChkTile
00014BD8 3011                       		move.w	(a1),d0
00014BDA 3800                       		move.w	d0,d4
00014BDC 0240 07FF                  		andi.w	#$7FF,d0
00014BE0 6700                       		beq.s	loc_14A86
00014BE2 0B04                       		btst	d5,d4
00014BE4 6600                       		bne.s	loc_14A94
00014BE6                            
00014BE6                            loc_14A86:
00014BE6 323C 000F                  		move.w	#$F,d1
00014BEA 3002                       		move.w	d2,d0
00014BEC 0240 000F                  		andi.w	#$F,d0
00014BF0 9240                       		sub.w	d0,d1
00014BF2 4E75                       		rts	
00014BF4                            ; ===========================================================================
00014BF4                            
00014BF4                            loc_14A94:
00014BF4 2478 F796                  		movea.l	($FFFFF796).w,a2
00014BF8 1032 0000                  		move.b	(a2,d0.w),d0
00014BFC 0240 00FF                  		andi.w	#$FF,d0
00014C00 67E4                       		beq.s	loc_14A86
00014C02 45F9 0000 0000             		lea	(AngleMap).l,a2
00014C08 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014C0C E948                       		lsl.w	#4,d0
00014C0E 3203                       		move.w	d3,d1
00014C10 0804 000B                  		btst	#$B,d4
00014C14 6700                       		beq.s	loc_14ABA
00014C16 4641                       		not.w	d1
00014C18 4414                       		neg.b	(a4)
00014C1A                            
00014C1A                            loc_14ABA:
00014C1A 0804 000C                  		btst	#$C,d4
00014C1E 6700                       		beq.s	loc_14ACA
00014C20 0614 0040                  		addi.b	#$40,(a4)
00014C24 4414                       		neg.b	(a4)
00014C26 0414 0040                  		subi.b	#$40,(a4)
00014C2A                            
00014C2A                            loc_14ACA:
00014C2A 0241 000F                  		andi.w	#$F,d1
00014C2E D240                       		add.w	d0,d1
00014C30 45F9 0000 0000             		lea	(CollArray1).l,a2
00014C36 1032 1000                  		move.b	(a2,d1.w),d0
00014C3A 4880                       		ext.w	d0
00014C3C BD44                       		eor.w	d6,d4
00014C3E 0804 000C                  		btst	#$C,d4
00014C42 6700                       		beq.s	loc_14AE6
00014C44 4440                       		neg.w	d0
00014C46                            
00014C46                            loc_14AE6:
00014C46 4A40                       		tst.w	d0
00014C48 679C                       		beq.s	loc_14A86
00014C4A 6B00                       		bmi.s	loc_14AFC
00014C4C 3202                       		move.w	d2,d1
00014C4E 0241 000F                  		andi.w	#$F,d1
00014C52 D041                       		add.w	d1,d0
00014C54 323C 000F                  		move.w	#$F,d1
00014C58 9240                       		sub.w	d0,d1
00014C5A 4E75                       		rts	
00014C5C                            ; ===========================================================================
00014C5C                            
00014C5C                            loc_14AFC:
00014C5C 3202                       		move.w	d2,d1
00014C5E 0241 000F                  		andi.w	#$F,d1
00014C62 D041                       		add.w	d1,d0
00014C64 6A00 FF80                  		bpl.w	loc_14A86
00014C68 4641                       		not.w	d1
00014C6A 4E75                       		rts	
00014C6C                            ; End of function FindFloor2
00014C6C                            
00014C6C                            
00014C6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C6C                            
00014C6C                            
00014C6C                            FindWall:				; XREF: Sonic_WalkVertR; et al
00014C6C 6100 FE4E                  		bsr.w	Floor_ChkTile
00014C70 3011                       		move.w	(a1),d0
00014C72 3800                       		move.w	d0,d4
00014C74 0240 07FF                  		andi.w	#$7FF,d0
00014C78 6700                       		beq.s	loc_14B1E
00014C7A 0B04                       		btst	d5,d4
00014C7C 6600                       		bne.s	loc_14B2C
00014C7E                            
00014C7E                            loc_14B1E:
00014C7E D64B                       		add.w	a3,d3
00014C80 6100 0000                  		bsr.w	FindWall2
00014C84 964B                       		sub.w	a3,d3
00014C86 0641 0010                  		addi.w	#$10,d1
00014C8A 4E75                       		rts	
00014C8C                            ; ===========================================================================
00014C8C                            
00014C8C                            loc_14B2C:
00014C8C 2478 F796                  		movea.l	($FFFFF796).w,a2
00014C90 1032 0000                  		move.b	(a2,d0.w),d0
00014C94 0240 00FF                  		andi.w	#$FF,d0
00014C98 67E4                       		beq.s	loc_14B1E
00014C9A 45F9 0000 0000             		lea	(AngleMap).l,a2
00014CA0 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014CA4 E948                       		lsl.w	#4,d0
00014CA6 3202                       		move.w	d2,d1
00014CA8 0804 000C                  		btst	#$C,d4
00014CAC 6700                       		beq.s	loc_14B5A
00014CAE 4641                       		not.w	d1
00014CB0 0614 0040                  		addi.b	#$40,(a4)
00014CB4 4414                       		neg.b	(a4)
00014CB6 0414 0040                  		subi.b	#$40,(a4)
00014CBA                            
00014CBA                            loc_14B5A:
00014CBA 0804 000B                  		btst	#$B,d4
00014CBE 6700                       		beq.s	loc_14B62
00014CC0 4414                       		neg.b	(a4)
00014CC2                            
00014CC2                            loc_14B62:
00014CC2 0241 000F                  		andi.w	#$F,d1
00014CC6 D240                       		add.w	d0,d1
00014CC8 45F9 0000 0000             		lea	(CollArray2).l,a2
00014CCE 1032 1000                  		move.b	(a2,d1.w),d0
00014CD2 4880                       		ext.w	d0
00014CD4 BD44                       		eor.w	d6,d4
00014CD6 0804 000B                  		btst	#$B,d4
00014CDA 6700                       		beq.s	loc_14B7E
00014CDC 4440                       		neg.w	d0
00014CDE                            
00014CDE                            loc_14B7E:
00014CDE 4A40                       		tst.w	d0
00014CE0 679C                       		beq.s	loc_14B1E
00014CE2 6B00                       		bmi.s	loc_14B9A
00014CE4 0C00 0010                  		cmpi.b	#$10,d0
00014CE8 6700                       		beq.s	loc_14BA6
00014CEA 3203                       		move.w	d3,d1
00014CEC 0241 000F                  		andi.w	#$F,d1
00014CF0 D041                       		add.w	d1,d0
00014CF2 323C 000F                  		move.w	#$F,d1
00014CF6 9240                       		sub.w	d0,d1
00014CF8 4E75                       		rts	
00014CFA                            ; ===========================================================================
00014CFA                            
00014CFA                            loc_14B9A:
00014CFA 3203                       		move.w	d3,d1
00014CFC 0241 000F                  		andi.w	#$F,d1
00014D00 D041                       		add.w	d1,d0
00014D02 6A00 FF7A                  		bpl.w	loc_14B1E
00014D06                            
00014D06                            loc_14BA6:
00014D06 964B                       		sub.w	a3,d3
00014D08 6100 0000                  		bsr.w	FindWall2
00014D0C D64B                       		add.w	a3,d3
00014D0E 0441 0010                  		subi.w	#$10,d1
00014D12 4E75                       		rts	
00014D14                            ; End of function FindWall
00014D14                            
00014D14                            
00014D14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D14                            
00014D14                            
00014D14                            FindWall2:				; XREF: FindWall
00014D14 6100 FDA6                  		bsr.w	Floor_ChkTile
00014D18 3011                       		move.w	(a1),d0
00014D1A 3800                       		move.w	d0,d4
00014D1C 0240 07FF                  		andi.w	#$7FF,d0
00014D20 6700                       		beq.s	loc_14BC6
00014D22 0B04                       		btst	d5,d4
00014D24 6600                       		bne.s	loc_14BD4
00014D26                            
00014D26                            loc_14BC6:
00014D26 323C 000F                  		move.w	#$F,d1
00014D2A 3003                       		move.w	d3,d0
00014D2C 0240 000F                  		andi.w	#$F,d0
00014D30 9240                       		sub.w	d0,d1
00014D32 4E75                       		rts	
00014D34                            ; ===========================================================================
00014D34                            
00014D34                            loc_14BD4:
00014D34 2478 F796                  		movea.l	($FFFFF796).w,a2
00014D38 1032 0000                  		move.b	(a2,d0.w),d0
00014D3C 0240 00FF                  		andi.w	#$FF,d0
00014D40 67E4                       		beq.s	loc_14BC6
00014D42 45F9 0000 0000             		lea	(AngleMap).l,a2
00014D48 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014D4C E948                       		lsl.w	#4,d0
00014D4E 3202                       		move.w	d2,d1
00014D50 0804 000C                  		btst	#$C,d4
00014D54 6700                       		beq.s	loc_14C02
00014D56 4641                       		not.w	d1
00014D58 0614 0040                  		addi.b	#$40,(a4)
00014D5C 4414                       		neg.b	(a4)
00014D5E 0414 0040                  		subi.b	#$40,(a4)
00014D62                            
00014D62                            loc_14C02:
00014D62 0804 000B                  		btst	#$B,d4
00014D66 6700                       		beq.s	loc_14C0A
00014D68 4414                       		neg.b	(a4)
00014D6A                            
00014D6A                            loc_14C0A:
00014D6A 0241 000F                  		andi.w	#$F,d1
00014D6E D240                       		add.w	d0,d1
00014D70 45F9 0000 0000             		lea	(CollArray2).l,a2
00014D76 1032 1000                  		move.b	(a2,d1.w),d0
00014D7A 4880                       		ext.w	d0
00014D7C BD44                       		eor.w	d6,d4
00014D7E 0804 000B                  		btst	#$B,d4
00014D82 6700                       		beq.s	loc_14C26
00014D84 4440                       		neg.w	d0
00014D86                            
00014D86                            loc_14C26:
00014D86 4A40                       		tst.w	d0
00014D88 679C                       		beq.s	loc_14BC6
00014D8A 6B00                       		bmi.s	loc_14C3C
00014D8C 3203                       		move.w	d3,d1
00014D8E 0241 000F                  		andi.w	#$F,d1
00014D92 D041                       		add.w	d1,d0
00014D94 323C 000F                  		move.w	#$F,d1
00014D98 9240                       		sub.w	d0,d1
00014D9A 4E75                       		rts	
00014D9C                            ; ===========================================================================
00014D9C                            
00014D9C                            loc_14C3C:
00014D9C 3203                       		move.w	d3,d1
00014D9E 0241 000F                  		andi.w	#$F,d1
00014DA2 D041                       		add.w	d1,d0
00014DA4 6A00 FF80                  		bpl.w	loc_14BC6
00014DA8 4641                       		not.w	d1
00014DAA 4E75                       		rts	
00014DAC                            ; End of function FindWall2
00014DAC                            
00014DAC                            ; ---------------------------------------------------------------------------
00014DAC                            ; Unused floor/wall subroutine - logs something	to do with collision
00014DAC                            ; ---------------------------------------------------------------------------
00014DAC                            
00014DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DAC                            
00014DAC                            
00014DAC                            FloorLog_Unk:				; XREF: Level
00014DAC 4E75                       		rts	
00014DAE                            
00014DAE 43F9 0000 0000             		lea	(CollArray1).l,a1
00014DB4 45F9 0000 0000             		lea	(CollArray1).l,a2
00014DBA 363C 00FF                  		move.w	#$FF,d3
00014DBE                            
00014DBE                            loc_14C5E:
00014DBE 7A10                       		moveq	#$10,d5
00014DC0 343C 000F                  		move.w	#$F,d2
00014DC4                            
00014DC4                            loc_14C64:
00014DC4 7800                       		moveq	#0,d4
00014DC6 323C 000F                  		move.w	#$F,d1
00014DCA                            
00014DCA                            loc_14C6A:
00014DCA 3019                       		move.w	(a1)+,d0
00014DCC EAA8                       		lsr.l	d5,d0
00014DCE D944                       		addx.w	d4,d4
00014DD0 51C9 FFF8                  		dbf	d1,loc_14C6A
00014DD4                            
00014DD4 34C4                       		move.w	d4,(a2)+
00014DD6 92FC 0020                  		suba.w	#$20,a1
00014DDA 5345                       		subq.w	#1,d5
00014DDC 51CA FFE6                  		dbf	d2,loc_14C64
00014DE0                            
00014DE0 D2FC 0020                  		adda.w	#$20,a1
00014DE4 51CB FFD8                  		dbf	d3,loc_14C5E
00014DE8                            
00014DE8 43F9 0000 0000             		lea	(CollArray1).l,a1
00014DEE 45F9 0000 0000             		lea	(CollArray2).l,a2
00014DF4 6100                       		bsr.s	FloorLog_Unk2
00014DF6 43F9 0000 0000             		lea	(CollArray1).l,a1
00014DFC 45F9 0000 0000             		lea	(CollArray1).l,a2
00014E02                            
00014E02                            ; End of function FloorLog_Unk
00014E02                            
00014E02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E02                            
00014E02                            
00014E02                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00014E02 363C 0FFF                  		move.w	#$FFF,d3
00014E06                            
00014E06                            loc_14CA6:
00014E06 7400                       		moveq	#0,d2
00014E08 323C 000F                  		move.w	#$F,d1
00014E0C 3019                       		move.w	(a1)+,d0
00014E0E 6700                       		beq.s	loc_14CD4
00014E10 6B00                       		bmi.s	loc_14CBE
00014E12                            
00014E12                            loc_14CB2:
00014E12 E248                       		lsr.w	#1,d0
00014E14 6400                       		bcc.s	loc_14CB8
00014E16 5202                       		addq.b	#1,d2
00014E18                            
00014E18                            loc_14CB8:
00014E18 51C9 FFF8                  		dbf	d1,loc_14CB2
00014E1C                            
00014E1C 6000                       		bra.s	loc_14CD6
00014E1E                            ; ===========================================================================
00014E1E                            
00014E1E                            loc_14CBE:
00014E1E 0C40 FFFF                  		cmpi.w	#-1,d0
00014E22 6700                       		beq.s	loc_14CD0
00014E24                            
00014E24                            loc_14CC4:
00014E24 E348                       		lsl.w	#1,d0
00014E26 6400                       		bcc.s	loc_14CCA
00014E28 5302                       		subq.b	#1,d2
00014E2A                            
00014E2A                            loc_14CCA:
00014E2A 51C9 FFF8                  		dbf	d1,loc_14CC4
00014E2E                            
00014E2E 6000                       		bra.s	loc_14CD6
00014E30                            ; ===========================================================================
00014E30                            
00014E30                            loc_14CD0:
00014E30 303C 0010                  		move.w	#$10,d0
00014E34                            
00014E34                            loc_14CD4:
00014E34 3400                       		move.w	d0,d2
00014E36                            
00014E36                            loc_14CD6:
00014E36 14C2                       		move.b	d2,(a2)+
00014E38 51CB FFCC                  		dbf	d3,loc_14CA6
00014E3C                            
00014E3C 4E75                       		rts	
00014E3E                            
00014E3E                            ; End of function FloorLog_Unk2
00014E3E                            
00014E3E                            
00014E3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E3E                            
00014E3E                            
00014E3E                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00014E3E 2628 0008                  		move.l	8(a0),d3
00014E42 2428 000C                  		move.l	$C(a0),d2
00014E46 3228 0010                  		move.w	$10(a0),d1
00014E4A 48C1                       		ext.l	d1
00014E4C E181                       		asl.l	#8,d1
00014E4E D681                       		add.l	d1,d3
00014E50 3228 0012                  		move.w	$12(a0),d1
00014E54 48C1                       		ext.l	d1
00014E56 E181                       		asl.l	#8,d1
00014E58 D481                       		add.l	d1,d2
00014E5A 4842                       		swap	d2
00014E5C 4843                       		swap	d3
00014E5E 11C0 F768                  		move.b	d0,($FFFFF768).w
00014E62 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014E66 1200                       		move.b	d0,d1
00014E68 0600 0020                  		addi.b	#$20,d0
00014E6C 6A00                       		bpl.s	loc_14D1A
00014E6E 1001                       		move.b	d1,d0
00014E70 6A00                       		bpl.s	loc_14D14
00014E72 5300                       		subq.b	#1,d0
00014E74                            
00014E74                            loc_14D14:
00014E74 0600 0020                  		addi.b	#$20,d0
00014E78 6000                       		bra.s	loc_14D24
00014E7A                            ; ===========================================================================
00014E7A                            
00014E7A                            loc_14D1A:
00014E7A 1001                       		move.b	d1,d0
00014E7C 6A00                       		bpl.s	loc_14D20
00014E7E 5200                       		addq.b	#1,d0
00014E80                            
00014E80                            loc_14D20:
00014E80 0600 001F                  		addi.b	#$1F,d0
00014E84                            
00014E84                            loc_14D24:
00014E84 0200 00C0                  		andi.b	#$C0,d0
00014E88 6700 0000                  		beq.w	loc_14DF0
00014E8C 0C00 0080                  		cmpi.b	#$80,d0
00014E90 6700 0000                  		beq.w	loc_14F7C
00014E94 0201 0038                  		andi.b	#$38,d1
00014E98 6600                       		bne.s	loc_14D3C
00014E9A 5042                       		addq.w	#8,d2
00014E9C                            
00014E9C                            loc_14D3C:
00014E9C 0C00 0040                  		cmpi.b	#$40,d0
00014EA0 6700 0000                  		beq.w	loc_1504A
00014EA4 6000 0000                  		bra.w	loc_14EBC
00014EA8                            
00014EA8                            ; End of function Sonic_WalkSpeed
00014EA8                            
00014EA8                            
00014EA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014EA8                            
00014EA8                            
00014EA8                            sub_14D48:				; XREF: Sonic_Jump
00014EA8 11C0 F768                  		move.b	d0,($FFFFF768).w
00014EAC 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014EB0 0600 0020                  		addi.b	#$20,d0
00014EB4 0200 00C0                  		andi.b	#$C0,d0
00014EB8 0C00 0040                  		cmpi.b	#$40,d0
00014EBC 6700 0000                  		beq.w	loc_14FD6
00014EC0 0C00 0080                  		cmpi.b	#$80,d0
00014EC4 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00014EC8 0C00 00C0                  		cmpi.b	#$C0,d0
00014ECC 6700 0000                  		beq.w	sub_14E50
00014ED0                            
00014ED0                            ; End of function sub_14D48
00014ED0                            
00014ED0                            ; ---------------------------------------------------------------------------
00014ED0                            ; Subroutine to	make Sonic land	on the floor after jumping
00014ED0                            ; ---------------------------------------------------------------------------
00014ED0                            
00014ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014ED0                            
00014ED0                            
00014ED0                            Sonic_HitFloor:				; XREF: Sonic_Floor
00014ED0 3428 000C                  		move.w	$C(a0),d2
00014ED4 3628 0008                  		move.w	8(a0),d3
00014ED8 7000                       		moveq	#0,d0
00014EDA 1028 0016                  		move.b	$16(a0),d0
00014EDE 4880                       		ext.w	d0
00014EE0 D440                       		add.w	d0,d2
00014EE2 1028 0017                  		move.b	$17(a0),d0
00014EE6 4880                       		ext.w	d0
00014EE8 D640                       		add.w	d0,d3
00014EEA 49F8 F768                  		lea	($FFFFF768).w,a4
00014EEE 367C 0010                  		movea.w	#$10,a3
00014EF2 3C3C 0000                  		move.w	#0,d6
00014EF6 7A0D                       		moveq	#$D,d5
00014EF8 6100 FC34                  		bsr.w	FindFloor
00014EFC 3F01                       		move.w	d1,-(sp)
00014EFE 3428 000C                  		move.w	$C(a0),d2
00014F02 3628 0008                  		move.w	8(a0),d3
00014F06 7000                       		moveq	#0,d0
00014F08 1028 0016                  		move.b	$16(a0),d0
00014F0C 4880                       		ext.w	d0
00014F0E D440                       		add.w	d0,d2
00014F10 1028 0017                  		move.b	$17(a0),d0
00014F14 4880                       		ext.w	d0
00014F16 9640                       		sub.w	d0,d3
00014F18 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F1C 367C 0010                  		movea.w	#$10,a3
00014F20 3C3C 0000                  		move.w	#0,d6
00014F24 7A0D                       		moveq	#$D,d5
00014F26 6100 FC06                  		bsr.w	FindFloor
00014F2A 301F                       		move.w	(sp)+,d0
00014F2C 143C 0000                  		move.b	#0,d2
00014F30                            
00014F30                            loc_14DD0:
00014F30 1638 F76A                  		move.b	($FFFFF76A).w,d3
00014F34 B240                       		cmp.w	d0,d1
00014F36 6F00                       		ble.s	loc_14DDE
00014F38 1638 F768                  		move.b	($FFFFF768).w,d3
00014F3C C141                       		exg	d0,d1
00014F3E                            
00014F3E                            loc_14DDE:
00014F3E 0803 0000                  		btst	#0,d3
00014F42 6700                       		beq.s	locret_14DE6
00014F44 1602                       		move.b	d2,d3
00014F46                            
00014F46                            locret_14DE6:
00014F46 4E75                       		rts	
00014F48                            
00014F48                            ; End of function Sonic_HitFloor
00014F48                            
00014F48                            ; ===========================================================================
00014F48 3428 000C                  		move.w	$C(a0),d2
00014F4C 3628 0008                  		move.w	8(a0),d3
00014F50                            
00014F50                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00014F50 0642 000A                  		addi.w	#$A,d2
00014F54 49F8 F768                  		lea	($FFFFF768).w,a4
00014F58 367C 0010                  		movea.w	#$10,a3
00014F5C 3C3C 0000                  		move.w	#0,d6
00014F60 7A0E                       		moveq	#$E,d5
00014F62 6100 FBCA                  		bsr.w	FindFloor
00014F66 143C 0000                  		move.b	#0,d2
00014F6A                            
00014F6A                            loc_14E0A:				; XREF: sub_14EB4
00014F6A 1638 F768                  		move.b	($FFFFF768).w,d3
00014F6E 0803 0000                  		btst	#0,d3
00014F72 6700                       		beq.s	locret_14E16
00014F74 1602                       		move.b	d2,d3
00014F76                            
00014F76                            locret_14E16:
00014F76 4E75                       		rts	
00014F78                            
00014F78                            ; ---------------------------------------------------------------------------
00014F78                            ; Subroutine allowing objects to interact with the floor
00014F78                            ; ---------------------------------------------------------------------------
00014F78                            
00014F78                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F78                            
00014F78                            
00014F78                            ObjHitFloor:
00014F78 3628 0008                  		move.w	8(a0),d3
00014F7C                            
00014F7C                            ; End of function ObjHitFloor
00014F7C                            
00014F7C                            
00014F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F7C                            
00014F7C                            
00014F7C                            ObjHitFloor2:
00014F7C 3428 000C                  		move.w	$C(a0),d2
00014F80 7000                       		moveq	#0,d0
00014F82 1028 0016                  		move.b	$16(a0),d0
00014F86 4880                       		ext.w	d0
00014F88 D440                       		add.w	d0,d2
00014F8A 49F8 F768                  		lea	($FFFFF768).w,a4
00014F8E 18BC 0000                  		move.b	#0,(a4)
00014F92 367C 0010                  		movea.w	#$10,a3
00014F96 3C3C 0000                  		move.w	#0,d6
00014F9A 7A0D                       		moveq	#$D,d5
00014F9C 6100 FB90                  		bsr.w	FindFloor
00014FA0 1638 F768                  		move.b	($FFFFF768).w,d3
00014FA4 0803 0000                  		btst	#0,d3
00014FA8 6700                       		beq.s	locret_14E4E
00014FAA 163C 0000                  		move.b	#0,d3
00014FAE                            
00014FAE                            locret_14E4E:
00014FAE 4E75                       		rts	
00014FB0                            ; End of function ObjHitFloor2
00014FB0                            
00014FB0                            
00014FB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014FB0                            
00014FB0                            
00014FB0                            sub_14E50:				; XREF: sub_14D48
00014FB0 3428 000C                  		move.w	$C(a0),d2
00014FB4 3628 0008                  		move.w	8(a0),d3
00014FB8 7000                       		moveq	#0,d0
00014FBA 1028 0017                  		move.b	$17(a0),d0
00014FBE 4880                       		ext.w	d0
00014FC0 9440                       		sub.w	d0,d2
00014FC2 1028 0016                  		move.b	$16(a0),d0
00014FC6 4880                       		ext.w	d0
00014FC8 D640                       		add.w	d0,d3
00014FCA 49F8 F768                  		lea	($FFFFF768).w,a4
00014FCE 367C 0010                  		movea.w	#$10,a3
00014FD2 3C3C 0000                  		move.w	#0,d6
00014FD6 7A0E                       		moveq	#$E,d5
00014FD8 6100 FC92                  		bsr.w	FindWall
00014FDC 3F01                       		move.w	d1,-(sp)
00014FDE 3428 000C                  		move.w	$C(a0),d2
00014FE2 3628 0008                  		move.w	8(a0),d3
00014FE6 7000                       		moveq	#0,d0
00014FE8 1028 0017                  		move.b	$17(a0),d0
00014FEC 4880                       		ext.w	d0
00014FEE D440                       		add.w	d0,d2
00014FF0 1028 0016                  		move.b	$16(a0),d0
00014FF4 4880                       		ext.w	d0
00014FF6 D640                       		add.w	d0,d3
00014FF8 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014FFC 367C 0010                  		movea.w	#$10,a3
00015000 3C3C 0000                  		move.w	#0,d6
00015004 7A0E                       		moveq	#$E,d5
00015006 6100 FC64                  		bsr.w	FindWall
0001500A 301F                       		move.w	(sp)+,d0
0001500C 143C 00C0                  		move.b	#-$40,d2
00015010 6000 FF1E                  		bra.w	loc_14DD0
00015014                            
00015014                            ; End of function sub_14E50
00015014                            
00015014                            
00015014                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015014                            
00015014                            
00015014                            sub_14EB4:				; XREF: Sonic_Floor
00015014 3428 000C                  		move.w	$C(a0),d2
00015018 3628 0008                  		move.w	8(a0),d3
0001501C                            
0001501C                            loc_14EBC:
0001501C 0643 000A                  		addi.w	#$A,d3
00015020 49F8 F768                  		lea	($FFFFF768).w,a4
00015024 367C 0010                  		movea.w	#$10,a3
00015028 3C3C 0000                  		move.w	#0,d6
0001502C 7A0E                       		moveq	#$E,d5
0001502E 6100 FC3C                  		bsr.w	FindWall
00015032 143C 00C0                  		move.b	#-$40,d2
00015036 6000 FF32                  		bra.w	loc_14E0A
0001503A                            
0001503A                            ; End of function sub_14EB4
0001503A                            
0001503A                            ; ---------------------------------------------------------------------------
0001503A                            ; Subroutine to	detect when an object hits a wall to its right
0001503A                            ; ---------------------------------------------------------------------------
0001503A                            
0001503A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001503A                            
0001503A                            
0001503A                            ObjHitWallRight:
0001503A D668 0008                  		add.w	8(a0),d3
0001503E 3428 000C                  		move.w	$C(a0),d2
00015042 49F8 F768                  		lea	($FFFFF768).w,a4
00015046 18BC 0000                  		move.b	#0,(a4)
0001504A 367C 0010                  		movea.w	#$10,a3
0001504E 3C3C 0000                  		move.w	#0,d6
00015052 7A0E                       		moveq	#$E,d5
00015054 6100 FC16                  		bsr.w	FindWall
00015058 1638 F768                  		move.b	($FFFFF768).w,d3
0001505C 0803 0000                  		btst	#0,d3
00015060 6700                       		beq.s	locret_14F06
00015062 163C 00C0                  		move.b	#-$40,d3
00015066                            
00015066                            locret_14F06:
00015066 4E75                       		rts	
00015068                            
00015068                            ; End of function ObjHitWallRight
00015068                            
00015068                            ; ---------------------------------------------------------------------------
00015068                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00015068                            ; touches them
00015068                            ; ---------------------------------------------------------------------------
00015068                            
00015068                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015068                            
00015068                            
00015068                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00015068 3428 000C                  		move.w	$C(a0),d2
0001506C 3628 0008                  		move.w	8(a0),d3
00015070 7000                       		moveq	#0,d0
00015072 1028 0016                  		move.b	$16(a0),d0
00015076 4880                       		ext.w	d0
00015078 9440                       		sub.w	d0,d2
0001507A 0A42 000F                  		eori.w	#$F,d2
0001507E 1028 0017                  		move.b	$17(a0),d0
00015082 4880                       		ext.w	d0
00015084 D640                       		add.w	d0,d3
00015086 49F8 F768                  		lea	($FFFFF768).w,a4
0001508A 367C FFF0                  		movea.w	#-$10,a3
0001508E 3C3C 1000                  		move.w	#$1000,d6
00015092 7A0E                       		moveq	#$E,d5
00015094 6100 FA98                  		bsr.w	FindFloor
00015098 3F01                       		move.w	d1,-(sp)
0001509A 3428 000C                  		move.w	$C(a0),d2
0001509E 3628 0008                  		move.w	8(a0),d3
000150A2 7000                       		moveq	#0,d0
000150A4 1028 0016                  		move.b	$16(a0),d0
000150A8 4880                       		ext.w	d0
000150AA 9440                       		sub.w	d0,d2
000150AC 0A42 000F                  		eori.w	#$F,d2
000150B0 1028 0017                  		move.b	$17(a0),d0
000150B4 4880                       		ext.w	d0
000150B6 9640                       		sub.w	d0,d3
000150B8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000150BC 367C FFF0                  		movea.w	#-$10,a3
000150C0 3C3C 1000                  		move.w	#$1000,d6
000150C4 7A0E                       		moveq	#$E,d5
000150C6 6100 FA66                  		bsr.w	FindFloor
000150CA 301F                       		move.w	(sp)+,d0
000150CC 143C 0080                  		move.b	#-$80,d2
000150D0 6000 FE5E                  		bra.w	loc_14DD0
000150D4                            ; End of function Sonic_DontRunOnWalls
000150D4                            
000150D4                            ; ===========================================================================
000150D4 3428 000C                  		move.w	$C(a0),d2
000150D8 3628 0008                  		move.w	8(a0),d3
000150DC                            
000150DC                            loc_14F7C:
000150DC 0442 000A                  		subi.w	#$A,d2
000150E0 0A42 000F                  		eori.w	#$F,d2
000150E4 49F8 F768                  		lea	($FFFFF768).w,a4
000150E8 367C FFF0                  		movea.w	#-$10,a3
000150EC 3C3C 1000                  		move.w	#$1000,d6
000150F0 7A0E                       		moveq	#$E,d5
000150F2 6100 FA3A                  		bsr.w	FindFloor
000150F6 143C 0080                  		move.b	#-$80,d2
000150FA 6000 FE6E                  		bra.w	loc_14E0A
000150FE                            
000150FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000150FE                            
000150FE                            
000150FE                            ObjHitCeiling:
000150FE 3428 000C                  		move.w	$C(a0),d2
00015102 3628 0008                  		move.w	8(a0),d3
00015106 7000                       		moveq	#0,d0
00015108 1028 0016                  		move.b	$16(a0),d0
0001510C 4880                       		ext.w	d0
0001510E 9440                       		sub.w	d0,d2
00015110 0A42 000F                  		eori.w	#$F,d2
00015114 49F8 F768                  		lea	($FFFFF768).w,a4
00015118 367C FFF0                  		movea.w	#-$10,a3
0001511C 3C3C 1000                  		move.w	#$1000,d6
00015120 7A0E                       		moveq	#$E,d5
00015122 6100 FA0A                  		bsr.w	FindFloor
00015126 1638 F768                  		move.b	($FFFFF768).w,d3
0001512A 0803 0000                  		btst	#0,d3
0001512E 6700                       		beq.s	locret_14FD4
00015130 163C 0080                  		move.b	#-$80,d3
00015134                            
00015134                            locret_14FD4:
00015134 4E75                       		rts	
00015136                            ; End of function ObjHitCeiling
00015136                            
00015136                            ; ===========================================================================
00015136                            
00015136                            loc_14FD6:				; XREF: sub_14D48
00015136 3428 000C                  		move.w	$C(a0),d2
0001513A 3628 0008                  		move.w	8(a0),d3
0001513E 7000                       		moveq	#0,d0
00015140 1028 0017                  		move.b	$17(a0),d0
00015144 4880                       		ext.w	d0
00015146 9440                       		sub.w	d0,d2
00015148 1028 0016                  		move.b	$16(a0),d0
0001514C 4880                       		ext.w	d0
0001514E 9640                       		sub.w	d0,d3
00015150 0A43 000F                  		eori.w	#$F,d3
00015154 49F8 F768                  		lea	($FFFFF768).w,a4
00015158 367C FFF0                  		movea.w	#-$10,a3
0001515C 3C3C 0800                  		move.w	#$800,d6
00015160 7A0E                       		moveq	#$E,d5
00015162 6100 FB08                  		bsr.w	FindWall
00015166 3F01                       		move.w	d1,-(sp)
00015168 3428 000C                  		move.w	$C(a0),d2
0001516C 3628 0008                  		move.w	8(a0),d3
00015170 7000                       		moveq	#0,d0
00015172 1028 0017                  		move.b	$17(a0),d0
00015176 4880                       		ext.w	d0
00015178 D440                       		add.w	d0,d2
0001517A 1028 0016                  		move.b	$16(a0),d0
0001517E 4880                       		ext.w	d0
00015180 9640                       		sub.w	d0,d3
00015182 0A43 000F                  		eori.w	#$F,d3
00015186 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001518A 367C FFF0                  		movea.w	#-$10,a3
0001518E 3C3C 0800                  		move.w	#$800,d6
00015192 7A0E                       		moveq	#$E,d5
00015194 6100 FAD6                  		bsr.w	FindWall
00015198 301F                       		move.w	(sp)+,d0
0001519A 143C 0040                  		move.b	#$40,d2
0001519E 6000 FD90                  		bra.w	loc_14DD0
000151A2                            
000151A2                            ; ---------------------------------------------------------------------------
000151A2                            ; Subroutine to	stop Sonic when	he jumps at a wall
000151A2                            ; ---------------------------------------------------------------------------
000151A2                            
000151A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151A2                            
000151A2                            
000151A2                            Sonic_HitWall:				; XREF: Sonic_Floor
000151A2 3428 000C                  		move.w	$C(a0),d2
000151A6 3628 0008                  		move.w	8(a0),d3
000151AA                            
000151AA                            loc_1504A:
000151AA 0443 000A                  		subi.w	#$A,d3
000151AE 0A43 000F                  		eori.w	#$F,d3
000151B2 49F8 F768                  		lea	($FFFFF768).w,a4
000151B6 367C FFF0                  		movea.w	#-$10,a3
000151BA 3C3C 0800                  		move.w	#$800,d6
000151BE 7A0E                       		moveq	#$E,d5
000151C0 6100 FAAA                  		bsr.w	FindWall
000151C4 143C 0040                  		move.b	#$40,d2
000151C8 6000 FDA0                  		bra.w	loc_14E0A
000151CC                            ; End of function Sonic_HitWall
000151CC                            
000151CC                            ; ---------------------------------------------------------------------------
000151CC                            ; Subroutine to	detect when an object hits a wall to its left
000151CC                            ; ---------------------------------------------------------------------------
000151CC                            
000151CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000151CC                            
000151CC                            
000151CC                            ObjHitWallLeft:
000151CC D668 0008                  		add.w	8(a0),d3
000151D0 3428 000C                  		move.w	$C(a0),d2
000151D4 49F8 F768                  		lea	($FFFFF768).w,a4
000151D8 18BC 0000                  		move.b	#0,(a4)
000151DC 367C FFF0                  		movea.w	#-$10,a3
000151E0 3C3C 0800                  		move.w	#$800,d6
000151E4 7A0E                       		moveq	#$E,d5
000151E6 6100 FA84                  		bsr.w	FindWall
000151EA 1638 F768                  		move.b	($FFFFF768).w,d3
000151EE 0803 0000                  		btst	#0,d3
000151F2 6700                       		beq.s	locret_15098
000151F4 163C 0040                  		move.b	#$40,d3
000151F8                            
000151F8                            locret_15098:
000151F8 4E75                       		rts	
000151FA                            ; End of function ObjHitWallLeft
000151FA                            
000151FA                            ; ===========================================================================
000151FA                            ; ---------------------------------------------------------------------------
000151FA                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000151FA                            ; ---------------------------------------------------------------------------
000151FA                            
000151FA                            Obj66:					; XREF: Obj_Index
000151FA 7000                       		moveq	#0,d0
000151FC 1028 0024                  		move.b	$24(a0),d0
00015200 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00015204 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00015208                            ; ===========================================================================
00015208 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
0001520A 0000                       		dc.w Obj66_Action-Obj66_Index
0001520C 0000                       		dc.w Obj66_Display-Obj66_Index
0001520E 0000                       		dc.w Obj66_Release-Obj66_Index
00015210                            ; ===========================================================================
00015210                            
00015210                            Obj66_Main:				; XREF: Obj66_Index
00015210 5428 0024                  		addq.b	#2,$24(a0)
00015214 323C 0001                  		move.w	#1,d1
00015218 2248                       		movea.l	a0,a1
0001521A 6000                       		bra.s	Obj66_MakeItem
0001521C                            ; ===========================================================================
0001521C                            
0001521C                            Obj66_Loop:
0001521C 6100 89E4                  		bsr.w	SingleObjLoad
00015220 6600                       		bne.s	loc_150FE
00015222 12BC 0066                  		move.b	#$66,0(a1)
00015226 5829 0024                  		addq.b	#4,$24(a1)
0001522A 3368 0008 0008             		move.w	8(a0),8(a1)
00015230 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015236 137C 0003 0018             		move.b	#3,$18(a1)
0001523C 137C 0010 001A             		move.b	#$10,$1A(a1)
00015242                            
00015242                            Obj66_MakeItem:				; XREF: Obj66_Main
00015242 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001524A 337C 4348 0002             		move.w	#$4348,2(a1)
00015250 0029 0004 0001             		ori.b	#4,1(a1)
00015256 137C 0038 0019             		move.b	#$38,$19(a1)
0001525C                            
0001525C                            loc_150FE:
0001525C 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015260                            
00015260 117C 0030 0019             		move.b	#$30,$19(a0)
00015266 117C 0004 0018             		move.b	#4,$18(a0)
0001526C 317C 003C 0030             		move.w	#$3C,$30(a0)
00015272 117C 0001 0034             		move.b	#1,$34(a0)
00015278 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001527E                            
0001527E                            Obj66_Action:				; XREF: Obj66_Index
0001527E 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015282 4A28 0001                  		tst.b	1(a0)
00015286 6A00 0000                  		bpl.w	Obj66_Display
0001528A 323C 0030                  		move.w	#$30,d1
0001528E 3401                       		move.w	d1,d2
00015290 3602                       		move.w	d2,d3
00015292 5243                       		addq.w	#1,d3
00015294 3828 0008                  		move.w	8(a0),d4
00015298 6100 A8B2                  		bsr.w	SolidObject
0001529C 0828 0005 0022             		btst	#5,$22(a0)
000152A2 6700 0000                  		beq.w	Obj66_Display
000152A6 43F8 D000                  		lea	($FFFFD000).w,a1
000152AA 720E                       		moveq	#$E,d1
000152AC 3029 0008                  		move.w	8(a1),d0
000152B0 B068 0008                  		cmp.w	8(a0),d0
000152B4 6500                       		bcs.s	Obj66_GrabSonic
000152B6 7207                       		moveq	#7,d1
000152B8                            
000152B8                            Obj66_GrabSonic:
000152B8 B228 001A                  		cmp.b	$1A(a0),d1
000152BC 6600                       		bne.s	Obj66_Display
000152BE 1141 0032                  		move.b	d1,$32(a0)
000152C2 5828 0024                  		addq.b	#4,$24(a0)
000152C6 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000152CC 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000152D2 337C 0800 0014             		move.w	#$800,$14(a1)
000152D8 337C 0000 0010             		move.w	#0,$10(a1)
000152DE 337C 0000 0012             		move.w	#0,$12(a1)
000152E4 08A8 0005 0022             		bclr	#5,$22(a0)
000152EA 08A9 0005 0022             		bclr	#5,$22(a1)
000152F0 08E9 0001 0022             		bset	#1,$22(a1)
000152F6 3429 0008                  		move.w	8(a1),d2
000152FA 3629 000C                  		move.w	$C(a1),d3
000152FE 6100 0000                  		bsr.w	Obj66_ChgPos
00015302 D569 0008                  		add.w	d2,8(a1)
00015306 D769 000C                  		add.w	d3,$C(a1)
0001530A E0E9 0008                  		asr	8(a1)
0001530E E0E9 000C                  		asr	$C(a1)
00015312                            
00015312                            Obj66_Display:				; XREF: Obj66_Index
00015312 6000 A510                  		bra.w	MarkObjGone
00015316                            ; ===========================================================================
00015316                            
00015316                            Obj66_Release:				; XREF: Obj66_Index
00015316 1028 001A                  		move.b	$1A(a0),d0
0001531A 0C00 0004                  		cmpi.b	#4,d0
0001531E 6700                       		beq.s	loc_151C8
00015320 0C00 0007                  		cmpi.b	#7,d0
00015324 6600                       		bne.s	loc_151F8
00015326                            
00015326                            loc_151C8:
00015326 B028 0032                  		cmp.b	$32(a0),d0
0001532A 6700                       		beq.s	loc_151F8
0001532C 43F8 D000                  		lea	($FFFFD000).w,a1
00015330 337C 0000 0010             		move.w	#0,$10(a1)
00015336 337C 0800 0012             		move.w	#$800,$12(a1)
0001533C 0C00 0004                  		cmpi.b	#4,d0
00015340 6700                       		beq.s	loc_151F0
00015342 337C 0800 0010             		move.w	#$800,$10(a1)
00015348 337C 0800 0012             		move.w	#$800,$12(a1)
0001534E                            
0001534E                            loc_151F0:
0001534E 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015352 5928 0024                  		subq.b	#4,$24(a0)
00015356                            
00015356                            loc_151F8:
00015356 6100                       		bsr.s	Obj66_ChkSwitch
00015358 6100                       		bsr.s	Obj66_ChgPos
0001535A 6000 A4C8                  		bra.w	MarkObjGone
0001535E                            
0001535E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001535E                            
0001535E                            
0001535E                            Obj66_ChkSwitch:			; XREF: Obj66_Action
0001535E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015362 7000                       		moveq	#0,d0
00015364 1028 0038                  		move.b	$38(a0),d0
00015368 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001536E 6700                       		beq.s	loc_15224	; if not, branch
00015370 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015374 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015376 4428 0034                  		neg.b	$34(a0)
0001537A 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015380 6000                       		bra.s	Obj66_Animate
00015382                            ; ===========================================================================
00015382                            
00015382                            loc_15224:
00015382 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015386                            
00015386                            Obj66_Animate:
00015386 5328 001E                  		subq.b	#1,$1E(a0)
0001538A 6A00                       		bpl.s	locret_15246
0001538C 117C 0007 001E             		move.b	#7,$1E(a0)
00015392 1228 0034                  		move.b	$34(a0),d1
00015396 1028 001A                  		move.b	$1A(a0),d0
0001539A D001                       		add.b	d1,d0
0001539C 0200 000F                  		andi.b	#$F,d0
000153A0 1140 001A                  		move.b	d0,$1A(a0)
000153A4                            
000153A4                            locret_15246:
000153A4 4E75                       		rts	
000153A6                            ; End of function Obj66_ChkSwitch
000153A6                            
000153A6                            
000153A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000153A6                            
000153A6                            
000153A6                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
000153A6 43F8 D000                  		lea	($FFFFD000).w,a1
000153AA 7000                       		moveq	#0,d0
000153AC 1028 001A                  		move.b	$1A(a0),d0
000153B0 D040                       		add.w	d0,d0
000153B2 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
000153B6 101A                       		move.b	(a2)+,d0
000153B8 4880                       		ext.w	d0
000153BA D068 0008                  		add.w	8(a0),d0
000153BE 3340 0008                  		move.w	d0,8(a1)
000153C2 101A                       		move.b	(a2)+,d0
000153C4 4880                       		ext.w	d0
000153C6 D068 000C                  		add.w	$C(a0),d0
000153CA 3340 000C                  		move.w	d0,$C(a1)
000153CE 4E75                       		rts	
000153D0                            ; End of function Obj66_ChgPos
000153D0                            
000153D0                            ; ===========================================================================
000153D0 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000153D4 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
000153D8 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
000153DC 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
000153E0 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
000153E4 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
000153E8 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000153EC E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000153F0                            ; ---------------------------------------------------------------------------
000153F0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000153F0                            ; ---------------------------------------------------------------------------
000153F0                            Map_obj66:
000153F0                            	include "_maps\obj66.asm"
000153F0                            ; ---------------------------------------------------------------------------
000153F0                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000153F0                            ; ---------------------------------------------------------------------------
000153F0 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000153F4 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000153F8 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000153FC 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
00015400 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
00015404 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
00015408 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
0001540C 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
00015410 0000                       		dc.w byte_154A4-Map_obj66
00015412 06                         byte_152B4:	dc.b 6
00015413 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
00015418 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
0001541D E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
00015422 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00015427 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
0001542C 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015431 06                         byte_152D3:	dc.b 6
00015432 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015437 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001543C F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015441 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015446 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
0001544B 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015450 06                         byte_152F2:	dc.b 6
00015451 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015456 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001545B 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015460 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015465 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001546A 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001546F 06                         byte_15311:	dc.b 6
00015470 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015475 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001547A 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001547F 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015484 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00015489 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001548E 06                         byte_15330:	dc.b 6
0001548F 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015494 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00015499 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001549E 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
000154A3 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
000154A8 200A 1800 00               		dc.b $20, $A, $18, 0, 0
000154AD 06                         byte_1534F:	dc.b 6
000154AE 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
000154B3 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
000154B8 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
000154BD 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
000154C2 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000154C7 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000154CC 06                         byte_1536E:	dc.b 6
000154CD 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000154D2 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000154D7 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000154DC 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000154E1 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000154E6 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000154EB 06                         byte_1538D:	dc.b 6
000154EC 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000154F1 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000154F6 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000154FB F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
00015500 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
00015505 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
0001550A 06                         byte_153AC:	dc.b 6
0001550B E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
00015510 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
00015515 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
0001551A E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
0001551F 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00015524 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00015529 06                         byte_153CB:	dc.b 6
0001552A D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001552F E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015534 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00015539 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001553E F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015543 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00015548 06                         byte_153EA:	dc.b 6
00015549 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001554E E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015553 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00015558 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001555D E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015562 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015567 06                         byte_15409:	dc.b 6
00015568 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001556D D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015572 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015577 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001557C E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015581 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015586 06                         byte_15428:	dc.b 6
00015587 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001558C D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015591 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015596 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001559B E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
000155A0 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
000155A5 06                         byte_15447:	dc.b 6
000155A6 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
000155AB D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
000155B0 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
000155B5 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
000155BA E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
000155BF E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000155C4 06                         byte_15466:	dc.b 6
000155C5 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000155CA D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000155CF D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000155D4 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000155D9 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000155DE E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000155E3 06                         byte_15485:	dc.b 6
000155E4 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000155E9 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000155EE DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000155F3 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000155F8 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000155FD F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
00015602 0C                         byte_154A4:	dc.b $C
00015603 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
00015608 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
0001560D E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
00015612 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
00015617 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
0001561C E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
00015621 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00015626 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
0001562B 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015630 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015635 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001563A 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015640 00                         		even
00015640 00                         		even
00015640                            
00015640                            ; ===========================================================================
00015640                            ; ---------------------------------------------------------------------------
00015640                            ; Object 67 - disc that	you run	around (SBZ)
00015640                            ; ---------------------------------------------------------------------------
00015640                            
00015640                            Obj67:					; XREF: Obj_Index
00015640 7000                       		moveq	#0,d0
00015642 1028 0024                  		move.b	$24(a0),d0
00015646 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
0001564A 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001564E                            ; ===========================================================================
0001564E 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015650 0000                       		dc.w Obj67_Action-Obj67_Index
00015652                            ; ===========================================================================
00015652                            
00015652                            Obj67_Main:				; XREF: Obj67_Index
00015652 5428 0024                  		addq.b	#2,$24(a0)
00015656 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001565E 317C C344 0002             		move.w	#$C344,2(a0)
00015664 117C 0004 0001             		move.b	#4,1(a0)
0001566A 117C 0004 0018             		move.b	#4,$18(a0)
00015670 117C 0008 0019             		move.b	#8,$19(a0)
00015676 3168 0008 0032             		move.w	8(a0),$32(a0)
0001567C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015682 117C 0018 0034             		move.b	#$18,$34(a0)
00015688 117C 0048 0038             		move.b	#$48,$38(a0)
0001568E 1228 0028                  		move.b	$28(a0),d1	; get object type
00015692 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015696 6700                       		beq.s	loc_15546
00015698 117C 0010 0034             		move.b	#$10,$34(a0)
0001569E 117C 0038 0038             		move.b	#$38,$38(a0)
000156A4                            
000156A4                            loc_15546:
000156A4 1228 0028                  		move.b	$28(a0),d1	; get object type
000156A8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000156AC 4881                       		ext.w	d1
000156AE E741                       		asl.w	#3,d1
000156B0 3141 0036                  		move.w	d1,$36(a0)
000156B4 1028 0022                  		move.b	$22(a0),d0
000156B8 E418                       		ror.b	#2,d0
000156BA 0200 00C0                  		andi.b	#-$40,d0
000156BE 1140 0026                  		move.b	d0,$26(a0)
000156C2                            
000156C2                            Obj67_Action:				; XREF: Obj67_Index
000156C2 6100 0000                  		bsr.w	Obj67_MoveSonic
000156C6 6100 0000                  		bsr.w	Obj67_MoveSpot
000156CA 6000 0000                  		bra.w	Obj67_ChkDel
000156CE                            ; ===========================================================================
000156CE                            
000156CE                            Obj67_MoveSonic:			; XREF: Obj67_Action
000156CE 7400                       		moveq	#0,d2
000156D0 1428 0038                  		move.b	$38(a0),d2
000156D4 3602                       		move.w	d2,d3
000156D6 D643                       		add.w	d3,d3
000156D8 43F8 D000                  		lea	($FFFFD000).w,a1
000156DC 3029 0008                  		move.w	8(a1),d0
000156E0 9068 0032                  		sub.w	$32(a0),d0
000156E4 D042                       		add.w	d2,d0
000156E6 B043                       		cmp.w	d3,d0
000156E8 6400                       		bcc.s	loc_155A8
000156EA 3229 000C                  		move.w	$C(a1),d1
000156EE 9268 0030                  		sub.w	$30(a0),d1
000156F2 D242                       		add.w	d2,d1
000156F4 B243                       		cmp.w	d3,d1
000156F6 6400                       		bcc.s	loc_155A8
000156F8 0829 0001 0022             		btst	#1,$22(a1)
000156FE 6700                       		beq.s	loc_155B8
00015700 4228 003A                  		clr.b	$3A(a0)
00015704 4E75                       		rts	
00015706                            ; ===========================================================================
00015706                            
00015706                            loc_155A8:
00015706 4A28 003A                  		tst.b	$3A(a0)
0001570A 6700                       		beq.s	locret_155B6
0001570C 4229 0038                  		clr.b	$38(a1)
00015710 4228 003A                  		clr.b	$3A(a0)
00015714                            
00015714                            locret_155B6:
00015714 4E75                       		rts	
00015716                            ; ===========================================================================
00015716                            
00015716                            loc_155B8:
00015716 4A28 003A                  		tst.b	$3A(a0)
0001571A 6600                       		bne.s	loc_155E2
0001571C 117C 0001 003A             		move.b	#1,$3A(a0)
00015722 0829 0002 0022             		btst	#2,$22(a1)
00015728 6600                       		bne.s	loc_155D0
0001572A 4229 001C                  		clr.b	$1C(a1)
0001572E                            
0001572E                            loc_155D0:
0001572E 08A9 0005 0022             		bclr	#5,$22(a1)
00015734 137C 0001 001D             		move.b	#1,$1D(a1)
0001573A 137C 0001 0038             		move.b	#1,$38(a1)
00015740                            
00015740                            loc_155E2:
00015740 3029 0014                  		move.w	$14(a1),d0
00015744 4A68 0036                  		tst.w	$36(a0)
00015748 6A00                       		bpl.s	loc_15608
0001574A 0C40 FC00                  		cmpi.w	#-$400,d0
0001574E 6F00                       		ble.s	loc_155FA
00015750 337C FC00 0014             		move.w	#-$400,$14(a1)
00015756 4E75                       		rts	
00015758                            ; ===========================================================================
00015758                            
00015758                            loc_155FA:
00015758 0C40 F100                  		cmpi.w	#-$F00,d0
0001575C 6C00                       		bge.s	locret_15606
0001575E 337C F100 0014             		move.w	#-$F00,$14(a1)
00015764                            
00015764                            locret_15606:
00015764 4E75                       		rts	
00015766                            ; ===========================================================================
00015766                            
00015766                            loc_15608:
00015766 0C40 0400                  		cmpi.w	#$400,d0
0001576A 6C00                       		bge.s	loc_15616
0001576C 337C 0400 0014             		move.w	#$400,$14(a1)
00015772 4E75                       		rts	
00015774                            ; ===========================================================================
00015774                            
00015774                            loc_15616:
00015774 0C40 0F00                  		cmpi.w	#$F00,d0
00015778 6F00                       		ble.s	locret_15622
0001577A 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015780                            
00015780                            locret_15622:
00015780 4E75                       		rts	
00015782                            ; ===========================================================================
00015782                            
00015782                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015782 3028 0036                  		move.w	$36(a0),d0
00015786 D168 0026                  		add.w	d0,$26(a0)
0001578A 1028 0026                  		move.b	$26(a0),d0
0001578E 4EB9 0000 29DA             		jsr	(CalcSine).l
00015794 3428 0030                  		move.w	$30(a0),d2
00015798 3628 0032                  		move.w	$32(a0),d3
0001579C 7800                       		moveq	#0,d4
0001579E 1828 0034                  		move.b	$34(a0),d4
000157A2 E14C                       		lsl.w	#8,d4
000157A4 2A04                       		move.l	d4,d5
000157A6 C9C0                       		muls.w	d0,d4
000157A8 4844                       		swap	d4
000157AA CBC1                       		muls.w	d1,d5
000157AC 4845                       		swap	d5
000157AE D842                       		add.w	d2,d4
000157B0 DA43                       		add.w	d3,d5
000157B2 3144 000C                  		move.w	d4,$C(a0)
000157B6 3145 0008                  		move.w	d5,8(a0)
000157BA 4E75                       		rts	
000157BC                            ; ===========================================================================
000157BC                            
000157BC                            Obj67_ChkDel:				; XREF: Obj67_Action
000157BC 3028 0032                  		move.w	$32(a0),d0
000157C0 0240 FF80                  		andi.w	#-$80,d0
000157C4 3238 F700                  		move.w	($FFFFF700).w,d1
000157C8 0441 0080                  		subi.w	#$80,d1
000157CC 0241 FF80                  		andi.w	#-$80,d1
000157D0 9041                       		sub.w	d1,d0
000157D2 0C40 0280                  		cmpi.w	#$280,d0
000157D6 6200                       		bhi.s	Obj67_Delete
000157D8 4EF9 0000 D77C             		jmp	DisplaySprite
000157DE                            ; ===========================================================================
000157DE                            
000157DE                            Obj67_Delete:
000157DE 4EF9 0000 D7B8             		jmp	DeleteObject
000157E4                            ; ===========================================================================
000157E4                            ; ---------------------------------------------------------------------------
000157E4                            ; Sprite mappings - disc that you run around (SBZ)
000157E4                            ; (It's just a small blob that moves around in a circle. The disc itself is
000157E4                            ; part of the level tiles.)
000157E4                            ; ---------------------------------------------------------------------------
000157E4                            Map_obj67:
000157E4                            	include "_maps\obj67.asm"
000157E4                            ; ---------------------------------------------------------------------------
000157E4                            ; Sprite mappings - disc that you run around (SBZ)
000157E4                            ; (It's just a small blob that moves around in a circle. The disc itself is
000157E4                            ; part of the level tiles.)
000157E4                            ; ---------------------------------------------------------------------------
000157E4 0000                       		dc.w byte_15688-Map_obj67
000157E6 01                         byte_15688:	dc.b 1
000157E7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000157EC                            		even
000157EC                            		even
000157EC                            
000157EC                            ; ===========================================================================
000157EC                            ; ---------------------------------------------------------------------------
000157EC                            ; Object 68 - conveyor belts (SBZ)
000157EC                            ; ---------------------------------------------------------------------------
000157EC                            
000157EC                            Obj68:					; XREF: Obj_Index
000157EC 7000                       		moveq	#0,d0
000157EE 1028 0024                  		move.b	$24(a0),d0
000157F2 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000157F6 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000157FA                            ; ===========================================================================
000157FA 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000157FC 0000                       		dc.w Obj68_Action-Obj68_Index
000157FE                            ; ===========================================================================
000157FE                            
000157FE                            Obj68_Main:				; XREF: Obj68_Index
000157FE 5428 0024                  		addq.b	#2,$24(a0)
00015802 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
00015808 1228 0028                  		move.b	$28(a0),d1	; get object type
0001580C 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015810 6700                       		beq.s	loc_156BA	; if zero, branch
00015812 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
00015818                            
00015818                            loc_156BA:
00015818 1228 0028                  		move.b	$28(a0),d1	; get object type
0001581C 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00015820 4881                       		ext.w	d1
00015822 E841                       		asr.w	#4,d1
00015824 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00015828                            
00015828                            Obj68_Action:				; XREF: Obj68_Index
00015828 6100                       		bsr.s	Obj68_MoveSonic
0001582A 3028 0008                  		move.w	8(a0),d0
0001582E 0240 FF80                  		andi.w	#$FF80,d0
00015832 3238 F700                  		move.w	($FFFFF700).w,d1
00015836 0441 0080                  		subi.w	#$80,d1
0001583A 0241 FF80                  		andi.w	#$FF80,d1
0001583E 9041                       		sub.w	d1,d0
00015840 0C40 0280                  		cmpi.w	#$280,d0
00015844 6200                       		bhi.s	Obj68_Delete
00015846 4E75                       		rts	
00015848                            ; ===========================================================================
00015848                            
00015848                            Obj68_Delete:
00015848 4EF9 0000 D7B8             		jmp	DeleteObject
0001584E                            ; ===========================================================================
0001584E                            
0001584E                            Obj68_MoveSonic:			; XREF: Obj68_Action
0001584E 7400                       		moveq	#0,d2
00015850 1428 0038                  		move.b	$38(a0),d2
00015854 3602                       		move.w	d2,d3
00015856 D643                       		add.w	d3,d3
00015858 43F8 D000                  		lea	($FFFFD000).w,a1
0001585C 3029 0008                  		move.w	8(a1),d0
00015860 9068 0008                  		sub.w	8(a0),d0
00015864 D042                       		add.w	d2,d0
00015866 B043                       		cmp.w	d3,d0
00015868 6400                       		bcc.s	locret_1572E
0001586A 3229 000C                  		move.w	$C(a1),d1
0001586E 9268 000C                  		sub.w	$C(a0),d1
00015872 0641 0030                  		addi.w	#$30,d1
00015876 0C41 0030                  		cmpi.w	#$30,d1
0001587A 6400                       		bcc.s	locret_1572E
0001587C 0829 0001 0022             		btst	#1,$22(a1)
00015882 6600                       		bne.s	locret_1572E
00015884 3028 0036                  		move.w	$36(a0),d0
00015888 D169 0008                  		add.w	d0,8(a1)
0001588C                            
0001588C                            locret_1572E:
0001588C 4E75                       		rts	
0001588E                            
0001588E                            ; ===========================================================================
0001588E                            ; ---------------------------------------------------------------------------
0001588E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001588E                            ; ---------------------------------------------------------------------------
0001588E                            
0001588E                            Obj69:					; XREF: Obj_Index
0001588E 7000                       		moveq	#0,d0
00015890 1028 0024                  		move.b	$24(a0),d0
00015894 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015898 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001589C                            ; ===========================================================================
0001589C 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001589E 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
000158A0 0000                       		dc.w Obj69_Spinner-Obj69_Index
000158A2                            ; ===========================================================================
000158A2                            
000158A2                            Obj69_Main:				; XREF: Obj69_Index
000158A2 5428 0024                  		addq.b	#2,$24(a0)
000158A6 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
000158AE 317C 4492 0002             		move.w	#$4492,2(a0)
000158B4 0028 0004 0001             		ori.b	#4,1(a0)
000158BA 117C 0080 0019             		move.b	#$80,$19(a0)
000158C0 7000                       		moveq	#0,d0
000158C2 1028 0028                  		move.b	$28(a0),d0
000158C6 0240 000F                  		andi.w	#$F,d0
000158CA C0FC 003C                  		mulu.w	#$3C,d0
000158CE 3140 0032                  		move.w	d0,$32(a0)
000158D2 4A28 0028                  		tst.b	$28(a0)
000158D6 6A00                       		bpl.s	Obj69_Trapdoor
000158D8 5428 0024                  		addq.b	#2,$24(a0)
000158DC 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000158E4 317C 04DF 0002             		move.w	#$4DF,2(a0)
000158EA 117C 0010 0019             		move.b	#$10,$19(a0)
000158F0 117C 0002 001C             		move.b	#2,$1C(a0)
000158F6 7000                       		moveq	#0,d0
000158F8 1028 0028                  		move.b	$28(a0),d0	; get object type
000158FC 3200                       		move.w	d0,d1
000158FE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015902 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
00015906 3140 0030                  		move.w	d0,$30(a0)	; set time delay
0001590A 3140 0032                  		move.w	d0,$32(a0)
0001590E 0241 0070                  		andi.w	#$70,d1
00015912 0641 0010                  		addi.w	#$10,d1
00015916 E549                       		lsl.w	#2,d1
00015918 5341                       		subq.w	#1,d1
0001591A 3141 0036                  		move.w	d1,$36(a0)
0001591E 6000                       		bra.s	Obj69_Spinner
00015920                            ; ===========================================================================
00015920                            
00015920                            Obj69_Trapdoor:				; XREF: Obj69_Index
00015920 5368 0030                  		subq.w	#1,$30(a0)
00015924 6A00                       		bpl.s	Obj69_Animate
00015926 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001592C 0868 0000 001C             		bchg	#0,$1C(a0)
00015932 4A28 0001                  		tst.b	1(a0)
00015936 6A00                       		bpl.s	Obj69_Animate
00015938 303C 00BB                  		move.w	#$BB,d0
0001593C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play door sound
00015942                            
00015942                            Obj69_Animate:
00015942 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015948 4EB9 0000 A7EE             		jsr	AnimateSprite
0001594E 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015952 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015954 323C 004B                  		move.w	#$4B,d1
00015958 343C 000C                  		move.w	#$C,d2
0001595C 3602                       		move.w	d2,d3
0001595E 5243                       		addq.w	#1,d3
00015960 3828 0008                  		move.w	8(a0),d4
00015964 6100 A1E6                  		bsr.w	SolidObject
00015968 6000 9EBA                  		bra.w	MarkObjGone
0001596C                            ; ===========================================================================
0001596C                            
0001596C                            Obj69_NotSolid:
0001596C 0828 0003 0022             		btst	#3,$22(a0)
00015972 6700                       		beq.s	Obj69_Display
00015974 43F8 D000                  		lea	($FFFFD000).w,a1
00015978 08A9 0003 0022             		bclr	#3,$22(a1)
0001597E 08A8 0003 0022             		bclr	#3,$22(a0)
00015984 4228 0025                  		clr.b	$25(a0)
00015988                            
00015988                            Obj69_Display:
00015988 6000 9E9A                  		bra.w	MarkObjGone
0001598C                            ; ===========================================================================
0001598C                            
0001598C                            Obj69_Spinner:				; XREF: Obj69_Index
0001598C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015990 C068 0036                  		and.w	$36(a0),d0
00015994 6600                       		bne.s	Obj69_Delay
00015996 117C 0001 0034             		move.b	#1,$34(a0)
0001599C                            
0001599C                            Obj69_Delay:
0001599C 4A28 0034                  		tst.b	$34(a0)
000159A0 6700                       		beq.s	Obj69_Animate2
000159A2 5368 0030                  		subq.w	#1,$30(a0)
000159A6 6A00                       		bpl.s	Obj69_Animate2
000159A8 3168 0032 0030             		move.w	$32(a0),$30(a0)
000159AE 4228 0034                  		clr.b	$34(a0)
000159B2 0868 0000 001C             		bchg	#0,$1C(a0)
000159B8                            
000159B8                            Obj69_Animate2:
000159B8 43F9 0000 0000             		lea	(Ani_obj69).l,a1
000159BE 4EB9 0000 A7EE             		jsr	AnimateSprite
000159C4 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
000159C8 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
000159CA 323C 001B                  		move.w	#$1B,d1
000159CE 343C 0007                  		move.w	#7,d2
000159D2 3602                       		move.w	d2,d3
000159D4 5243                       		addq.w	#1,d3
000159D6 3828 0008                  		move.w	8(a0),d4
000159DA 6100 A170                  		bsr.w	SolidObject
000159DE 6000 9E44                  		bra.w	MarkObjGone
000159E2                            ; ===========================================================================
000159E2                            
000159E2                            Obj69_NotSolid2:
000159E2 0828 0003 0022             		btst	#3,$22(a0)
000159E8 6700                       		beq.s	Obj69_Display2
000159EA 43F8 D000                  		lea	($FFFFD000).w,a1
000159EE 08A9 0003 0022             		bclr	#3,$22(a1)
000159F4 08A8 0003 0022             		bclr	#3,$22(a0)
000159FA 4228 0025                  		clr.b	$25(a0)
000159FE                            
000159FE                            Obj69_Display2:
000159FE 6000 9E24                  		bra.w	MarkObjGone
00015A02                            ; ===========================================================================
00015A02                            Ani_obj69:
00015A02                            	include "_anim\obj69.asm"
00015A02                            ; ---------------------------------------------------------------------------
00015A02                            ; Animation script - trapdoor (SBZ)
00015A02                            ; ---------------------------------------------------------------------------
00015A02 0000                       		dc.w byte_158AC-Ani_obj69
00015A04 0000                       		dc.w byte_158B2-Ani_obj69
00015A06 0000                       		dc.w byte_158B8-Ani_obj69
00015A08 0000                       		dc.w byte_158CC-Ani_obj69
00015A0A 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00015A10 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00015A16 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015A23 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015A2A 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015A37 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00015A3E                            		even
00015A3E                            		even
00015A3E                            
00015A3E                            ; ---------------------------------------------------------------------------
00015A3E                            ; Sprite mappings - trapdoor (SBZ)
00015A3E                            ; ---------------------------------------------------------------------------
00015A3E                            Map_obj69:
00015A3E                            	include "_maps\obj69.asm"
00015A3E                            ; ---------------------------------------------------------------------------
00015A3E                            ; Sprite mappings - trapdoor (SBZ)
00015A3E                            ; ---------------------------------------------------------------------------
00015A3E 0000                       		dc.w byte_158E6-Map_obj69
00015A40 0000                       		dc.w byte_158FB-Map_obj69
00015A42 0000                       		dc.w byte_15924-Map_obj69
00015A44 04                         byte_158E6:	dc.b 4
00015A45 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00015A4A F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00015A4F F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015A54 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015A59 08                         byte_158FB:	dc.b 8
00015A5A F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00015A5F 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015A64 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015A69 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00015A6E F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015A73 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015A78 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00015A7D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015A82 04                         byte_15924:	dc.b 4
00015A83 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015A88 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00015A8D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015A92 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015A98 00                         		even
00015A98 00                         		even
00015A98                            
00015A98                            ; ---------------------------------------------------------------------------
00015A98                            ; Sprite mappings - spinning platforms (SBZ)
00015A98                            ; ---------------------------------------------------------------------------
00015A98                            Map_obj69a:
00015A98                            	include "_maps\obj69a.asm"
00015A98                            ; ---------------------------------------------------------------------------
00015A98                            ; Sprite mappings - spinning platforms (SBZ)
00015A98                            ; ---------------------------------------------------------------------------
00015A98 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00015A9C 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015AA0 0000                       		dc.w byte_15970-Map_obj69a
00015AA2 02                         byte_15944:	dc.b 2
00015AA3 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015AA8 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00015AAD 02                         byte_1594F:	dc.b 2
00015AAE F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015AB3 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015AB8 02                         byte_1595A:	dc.b 2
00015AB9 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00015ABE 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015AC3 02                         byte_15965:	dc.b 2
00015AC4 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015AC9 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00015ACE 02                         byte_15970:	dc.b 2
00015ACF F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00015AD4 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00015ADA 00                         		even
00015ADA 00                         		even
00015ADA                            
00015ADA                            ; ===========================================================================
00015ADA                            ; ---------------------------------------------------------------------------
00015ADA                            ; Object 6A - ground saws and pizza cutters (SBZ)
00015ADA                            ; ---------------------------------------------------------------------------
00015ADA                            
00015ADA                            Obj6A:					; XREF: Obj_Index
00015ADA 7000                       		moveq	#0,d0
00015ADC 1028 0024                  		move.b	$24(a0),d0
00015AE0 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00015AE4 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00015AE8                            ; ===========================================================================
00015AE8 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00015AEA 0000                       		dc.w Obj6A_Action-Obj6A_Index
00015AEC                            ; ===========================================================================
00015AEC                            
00015AEC                            Obj6A_Main:				; XREF: Obj6A_Index
00015AEC 5428 0024                  		addq.b	#2,$24(a0)
00015AF0 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00015AF8 317C 43B5 0002             		move.w	#$43B5,2(a0)
00015AFE 117C 0004 0001             		move.b	#4,1(a0)
00015B04 117C 0004 0018             		move.b	#4,$18(a0)
00015B0A 117C 0020 0019             		move.b	#$20,$19(a0)
00015B10 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015B16 3168 000C 0038             		move.w	$C(a0),$38(a0)
00015B1C 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00015B22 6400                       		bcc.s	Obj6A_Action
00015B24 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015B2A                            
00015B2A                            Obj6A_Action:				; XREF: Obj6A_Index
00015B2A 7000                       		moveq	#0,d0
00015B2C 1028 0028                  		move.b	$28(a0),d0
00015B30 0240 0007                  		andi.w	#7,d0
00015B34 D040                       		add.w	d0,d0
00015B36 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00015B3A 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00015B3E 3028 003A                  		move.w	$3A(a0),d0
00015B42 0240 FF80                  		andi.w	#$FF80,d0
00015B46 3238 F700                  		move.w	($FFFFF700).w,d1
00015B4A 0441 0080                  		subi.w	#$80,d1
00015B4E 0241 FF80                  		andi.w	#$FF80,d1
00015B52 9041                       		sub.w	d1,d0
00015B54 0C40 0280                  		cmpi.w	#$280,d0
00015B58 6200                       		bhi.s	Obj6A_Delete
00015B5A 4EF9 0000 D77C             		jmp	DisplaySprite
00015B60                            ; ===========================================================================
00015B60                            
00015B60                            Obj6A_Delete:
00015B60 4EF9 0000 D7B8             		jmp	DeleteObject
00015B66                            ; ===========================================================================
00015B66 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00015B6A 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00015B6E 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015B70                            ; ===========================================================================
00015B70                            
00015B70                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015B70 4E75                       		rts	
00015B72                            ; ===========================================================================
00015B72                            
00015B72                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015B72 323C 0060                  		move.w	#$60,d1
00015B76 7000                       		moveq	#0,d0
00015B78 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00015B7C 0828 0000 0022             		btst	#0,$22(a0)
00015B82 6700                       		beq.s	Obj6A_Animate01
00015B84 4440                       		neg.w	d0
00015B86 D041                       		add.w	d1,d0
00015B88                            
00015B88                            Obj6A_Animate01:
00015B88 3228 003A                  		move.w	$3A(a0),d1
00015B8C 9240                       		sub.w	d0,d1
00015B8E 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015B92 5328 001E                  		subq.b	#1,$1E(a0)
00015B96 6A00                       		bpl.s	loc_15A46
00015B98 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00015B9E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00015BA4                            
00015BA4                            loc_15A46:
00015BA4 4A28 0001                  		tst.b	1(a0)
00015BA8 6A00                       		bpl.s	locret_15A60
00015BAA 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015BAE 0240 000F                  		andi.w	#$F,d0
00015BB2 6600                       		bne.s	locret_15A60
00015BB4 303C 00B0                  		move.w	#$B0,d0
00015BB8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015BBE                            
00015BBE                            locret_15A60:
00015BBE 4E75                       		rts	
00015BC0                            ; ===========================================================================
00015BC0                            
00015BC0                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00015BC0 323C 0030                  		move.w	#$30,d1
00015BC4 7000                       		moveq	#0,d0
00015BC6 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015BCA 0828 0000 0022             		btst	#0,$22(a0)
00015BD0 6700                       		beq.s	Obj6A_Animate02
00015BD2 4440                       		neg.w	d0
00015BD4 0640 0080                  		addi.w	#$80,d0
00015BD8                            
00015BD8                            Obj6A_Animate02:
00015BD8 3228 0038                  		move.w	$38(a0),d1
00015BDC 9240                       		sub.w	d0,d1
00015BDE 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00015BE2 5328 001E                  		subq.b	#1,$1E(a0)
00015BE6 6A00                       		bpl.s	loc_15A96
00015BE8 117C 0002 001E             		move.b	#2,$1E(a0)
00015BEE 0868 0000 001A             		bchg	#0,$1A(a0)
00015BF4                            
00015BF4                            loc_15A96:
00015BF4 4A28 0001                  		tst.b	1(a0)
00015BF8 6A00                       		bpl.s	locret_15AB0
00015BFA 1038 FE64                  		move.b	($FFFFFE64).w,d0
00015BFE 0C00 0018                  		cmpi.b	#$18,d0
00015C02 6600                       		bne.s	locret_15AB0
00015C04 303C 00B0                  		move.w	#$B0,d0
00015C08 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015C0E                            
00015C0E                            locret_15AB0:
00015C0E 4E75                       		rts	
00015C10                            ; ===========================================================================
00015C10                            
00015C10                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00015C10 4A28 003D                  		tst.b	$3D(a0)
00015C14 6600                       		bne.s	Obj6A_Animate03
00015C16 3038 D008                  		move.w	($FFFFD008).w,d0
00015C1A 0440 00C0                  		subi.w	#$C0,d0
00015C1E 6500                       		bcs.s	loc_15B02
00015C20 9068 0008                  		sub.w	8(a0),d0
00015C24 6500                       		bcs.s	loc_15B02
00015C26 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015C2A 0440 0080                  		subi.w	#$80,d0
00015C2E B068 000C                  		cmp.w	$C(a0),d0
00015C32 6400                       		bcc.s	locret_15B04
00015C34 0640 0100                  		addi.w	#$100,d0
00015C38 B068 000C                  		cmp.w	$C(a0),d0
00015C3C 6500                       		bcs.s	locret_15B04
00015C3E 117C 0001 003D             		move.b	#1,$3D(a0)
00015C44 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00015C4A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015C50 117C 0002 001A             		move.b	#2,$1A(a0)
00015C56 303C 00B0                  		move.w	#$B0,d0
00015C5A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015C60                            
00015C60                            loc_15B02:
00015C60 588F                       		addq.l	#4,sp
00015C62                            
00015C62                            locret_15B04:
00015C62 4E75                       		rts	
00015C64                            ; ===========================================================================
00015C64                            
00015C64                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00015C64 4EB9 0000 D756             		jsr	SpeedToPos
00015C6A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015C70 5328 001E                  		subq.b	#1,$1E(a0)
00015C74 6A00                       		bpl.s	locret_15B24
00015C76 117C 0002 001E             		move.b	#2,$1E(a0)
00015C7C 0868 0000 001A             		bchg	#0,$1A(a0)
00015C82                            
00015C82                            locret_15B24:
00015C82 4E75                       		rts	
00015C84                            ; ===========================================================================
00015C84                            
00015C84                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00015C84 4A28 003D                  		tst.b	$3D(a0)
00015C88 6600                       		bne.s	Obj6A_Animate04
00015C8A 3038 D008                  		move.w	($FFFFD008).w,d0
00015C8E 0640 00E0                  		addi.w	#$E0,d0
00015C92 9068 0008                  		sub.w	8(a0),d0
00015C96 6400                       		bcc.s	loc_15B74
00015C98 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015C9C 0440 0080                  		subi.w	#$80,d0
00015CA0 B068 000C                  		cmp.w	$C(a0),d0
00015CA4 6400                       		bcc.s	locret_15B76
00015CA6 0640 0100                  		addi.w	#$100,d0
00015CAA B068 000C                  		cmp.w	$C(a0),d0
00015CAE 6500                       		bcs.s	locret_15B76
00015CB0 117C 0001 003D             		move.b	#1,$3D(a0)
00015CB6 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00015CBC 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015CC2 117C 0002 001A             		move.b	#2,$1A(a0)
00015CC8 303C 00B0                  		move.w	#$B0,d0
00015CCC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015CD2                            
00015CD2                            loc_15B74:
00015CD2 588F                       		addq.l	#4,sp
00015CD4                            
00015CD4                            locret_15B76:
00015CD4 4E75                       		rts	
00015CD6                            ; ===========================================================================
00015CD6                            
00015CD6                            Obj6A_Animate04:
00015CD6 4EB9 0000 D756             		jsr	SpeedToPos
00015CDC 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015CE2 5328 001E                  		subq.b	#1,$1E(a0)
00015CE6 6A00                       		bpl.s	locret_15B96
00015CE8 117C 0002 001E             		move.b	#2,$1E(a0)
00015CEE 0868 0000 001A             		bchg	#0,$1A(a0)
00015CF4                            
00015CF4                            locret_15B96:
00015CF4 4E75                       		rts	
00015CF6                            ; ===========================================================================
00015CF6                            ; ---------------------------------------------------------------------------
00015CF6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015CF6                            ; ---------------------------------------------------------------------------
00015CF6                            Map_obj6A:
00015CF6                            	include "_maps\obj6A.asm"
00015CF6                            ; ---------------------------------------------------------------------------
00015CF6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015CF6                            ; ---------------------------------------------------------------------------
00015CF6 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00015CFA 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00015CFE 07                         byte_15BA0:	dc.b 7
00015CFF C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015D04 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015D09 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015D0E E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015D13 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015D18 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015D1D 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015D22 07                         byte_15BC4:	dc.b 7
00015D23 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015D28 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015D2D E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015D32 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015D37 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015D3C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015D41 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015D46 04                         byte_15BE8:	dc.b 4
00015D47 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015D4C E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015D51 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015D56 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015D5B 04                         byte_15BFD:	dc.b 4
00015D5C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015D61 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015D66 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015D6B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015D70                            		even
00015D70                            		even
00015D70                            
00015D70                            ; ===========================================================================
00015D70                            ; ---------------------------------------------------------------------------
00015D70                            ; Object 6B - stomper (SBZ)
00015D70                            ; ---------------------------------------------------------------------------
00015D70                            
00015D70                            Obj6B:					; XREF: Obj_Index
00015D70 7000                       		moveq	#0,d0
00015D72 1028 0024                  		move.b	$24(a0),d0
00015D76 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00015D7A 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00015D7E                            ; ===========================================================================
00015D7E 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00015D80 0000                       		dc.w Obj6B_Action-Obj6B_Index
00015D82                            
00015D82 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00015D86 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00015D8A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00015D8E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00015D92 8040 0005                  		dc.b  $80, $40,	  0,   5
00015D96                            ; ===========================================================================
00015D96                            
00015D96                            Obj6B_Main:				; XREF: Obj6B_Index
00015D96 5428 0024                  		addq.b	#2,$24(a0)
00015D9A 7000                       		moveq	#0,d0
00015D9C 1028 0028                  		move.b	$28(a0),d0
00015DA0 E448                       		lsr.w	#2,d0
00015DA2 0240 001C                  		andi.w	#$1C,d0
00015DA6 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00015DAA 115B 0019                  		move.b	(a3)+,$19(a0)
00015DAE 115B 0016                  		move.b	(a3)+,$16(a0)
00015DB2 E448                       		lsr.w	#2,d0
00015DB4 1140 001A                  		move.b	d0,$1A(a0)
00015DB8 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00015DC0 317C 22C0 0002             		move.w	#$22C0,2(a0)
00015DC6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00015DCC 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00015DCE 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00015DD4 6700                       		beq.s	Obj6B_SBZ3
00015DD6                            
00015DD6                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00015DD6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015DDA 7000                       		moveq	#0,d0
00015DDC 1028 0023                  		move.b	$23(a0),d0
00015DE0 6700                       		beq.s	Obj6B_Delete
00015DE2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015DE8                            
00015DE8                            Obj6B_Delete:
00015DE8 4EF9 0000 D7B8             		jmp	DeleteObject
00015DEE                            ; ===========================================================================
00015DEE                            
00015DEE                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00015DEE 317C 41F0 0002             		move.w	#$41F0,2(a0)
00015DF4 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00015DFA 6600                       		bne.s	Obj6B_SBZ12
00015DFC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015E00 7000                       		moveq	#0,d0
00015E02 1028 0023                  		move.b	$23(a0),d0
00015E06 6700                       		beq.s	Obj6B_SBZ12
00015E08 0832 0000 0002             		btst	#0,2(a2,d0.w)
00015E0E 6700                       		beq.s	Obj6B_SBZ12
00015E10 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015E14 60C0                       		bra.s	Obj6B_ChkGone
00015E16                            ; ===========================================================================
00015E16                            
00015E16                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00015E16 0028 0004 0001             		ori.b	#4,1(a0)
00015E1C 117C 0004 0018             		move.b	#4,$18(a0)
00015E22 3168 0008 0034             		move.w	8(a0),$34(a0)
00015E28 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015E2E 7000                       		moveq	#0,d0
00015E30 101B                       		move.b	(a3)+,d0
00015E32 3140 003C                  		move.w	d0,$3C(a0)
00015E36 7000                       		moveq	#0,d0
00015E38 1028 0028                  		move.b	$28(a0),d0
00015E3C 6A00                       		bpl.s	Obj6B_Action
00015E3E 0200 000F                  		andi.b	#$F,d0
00015E42 1140 003E                  		move.b	d0,$3E(a0)
00015E46 1153 0028                  		move.b	(a3),$28(a0)
00015E4A 0C13 0005                  		cmpi.b	#5,(a3)
00015E4E 6600                       		bne.s	Obj6B_ChkGone2
00015E50 08E8 0004 0001             		bset	#4,1(a0)
00015E56                            
00015E56                            Obj6B_ChkGone2:
00015E56 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015E5A 7000                       		moveq	#0,d0
00015E5C 1028 0023                  		move.b	$23(a0),d0
00015E60 6700                       		beq.s	Obj6B_Action
00015E62 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015E68                            
00015E68                            Obj6B_Action:				; XREF: Obj6B_Index
00015E68 3F28 0008                  		move.w	8(a0),-(sp)
00015E6C 7000                       		moveq	#0,d0
00015E6E 1028 0028                  		move.b	$28(a0),d0
00015E72 0240 000F                  		andi.w	#$F,d0
00015E76 D040                       		add.w	d0,d0
00015E78 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00015E7C 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00015E80 381F                       		move.w	(sp)+,d4
00015E82 4A28 0001                  		tst.b	1(a0)
00015E86 6A00                       		bpl.s	Obj6B_ChkDel
00015E88 7200                       		moveq	#0,d1
00015E8A 1228 0019                  		move.b	$19(a0),d1
00015E8E 0641 000B                  		addi.w	#$B,d1
00015E92 7400                       		moveq	#0,d2
00015E94 1428 0016                  		move.b	$16(a0),d2
00015E98 3602                       		move.w	d2,d3
00015E9A 5243                       		addq.w	#1,d3
00015E9C 6100 9CAE                  		bsr.w	SolidObject
00015EA0                            
00015EA0                            Obj6B_ChkDel:
00015EA0 3028 0034                  		move.w	$34(a0),d0
00015EA4 0240 FF80                  		andi.w	#$FF80,d0
00015EA8 3238 F700                  		move.w	($FFFFF700).w,d1
00015EAC 0441 0080                  		subi.w	#$80,d1
00015EB0 0241 FF80                  		andi.w	#$FF80,d1
00015EB4 9041                       		sub.w	d1,d0
00015EB6 0C40 0280                  		cmpi.w	#$280,d0
00015EBA 6200                       		bhi.s	loc_15D64
00015EBC 4EF9 0000 D77C             		jmp	DisplaySprite
00015EC2                            ; ===========================================================================
00015EC2                            
00015EC2                            loc_15D64:
00015EC2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00015EC8 6600                       		bne.s	Obj6B_Delete2
00015ECA 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015ECE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015ED2 7000                       		moveq	#0,d0
00015ED4 1028 0023                  		move.b	$23(a0),d0
00015ED8 6700                       		beq.s	Obj6B_Delete2
00015EDA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015EE0                            
00015EE0                            Obj6B_Delete2:
00015EE0 4EF9 0000 D7B8             		jmp	DeleteObject
00015EE6                            ; ===========================================================================
00015EE6 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00015EEA 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00015EEE 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00015EF2                            ; ===========================================================================
00015EF2                            
00015EF2                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00015EF2 4E75                       		rts	
00015EF4                            ; ===========================================================================
00015EF4                            
00015EF4                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00015EF4 4A28 0038                  		tst.b	$38(a0)
00015EF8 6600                       		bne.s	loc_15DB4
00015EFA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015EFE 7000                       		moveq	#0,d0
00015F00 1028 003E                  		move.b	$3E(a0),d0
00015F04 0832 0000 0000             		btst	#0,(a2,d0.w)
00015F0A 6700                       		beq.s	loc_15DC2
00015F0C 117C 0001 0038             		move.b	#1,$38(a0)
00015F12                            
00015F12                            loc_15DB4:
00015F12 3028 003C                  		move.w	$3C(a0),d0
00015F16 B068 003A                  		cmp.w	$3A(a0),d0
00015F1A 6700                       		beq.s	loc_15DE0
00015F1C 5468 003A                  		addq.w	#2,$3A(a0)
00015F20                            
00015F20                            loc_15DC2:
00015F20 3028 003A                  		move.w	$3A(a0),d0
00015F24 0828 0000 0022             		btst	#0,$22(a0)
00015F2A 6700                       		beq.s	loc_15DD4
00015F2C 4440                       		neg.w	d0
00015F2E 0640 0080                  		addi.w	#$80,d0
00015F32                            
00015F32                            loc_15DD4:
00015F32 3228 0034                  		move.w	$34(a0),d1
00015F36 9240                       		sub.w	d0,d1
00015F38 3141 0008                  		move.w	d1,8(a0)
00015F3C 4E75                       		rts	
00015F3E                            ; ===========================================================================
00015F3E                            
00015F3E                            loc_15DE0:
00015F3E 5228 0028                  		addq.b	#1,$28(a0)
00015F42 317C 00B4 0036             		move.w	#$B4,$36(a0)
00015F48 4228 0038                  		clr.b	$38(a0)
00015F4C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015F50 7000                       		moveq	#0,d0
00015F52 1028 0023                  		move.b	$23(a0),d0
00015F56 67C8                       		beq.s	loc_15DC2
00015F58 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00015F5E 60C0                       		bra.s	loc_15DC2
00015F60                            ; ===========================================================================
00015F60                            
00015F60                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00015F60 4A28 0038                  		tst.b	$38(a0)
00015F64 6600                       		bne.s	loc_15E14
00015F66 5368 0036                  		subq.w	#1,$36(a0)
00015F6A 6600                       		bne.s	loc_15E1E
00015F6C 117C 0001 0038             		move.b	#1,$38(a0)
00015F72                            
00015F72                            loc_15E14:
00015F72 4A68 003A                  		tst.w	$3A(a0)
00015F76 6700                       		beq.s	loc_15E3C
00015F78 5568 003A                  		subq.w	#2,$3A(a0)
00015F7C                            
00015F7C                            loc_15E1E:
00015F7C 3028 003A                  		move.w	$3A(a0),d0
00015F80 0828 0000 0022             		btst	#0,$22(a0)
00015F86 6700                       		beq.s	loc_15E30
00015F88 4440                       		neg.w	d0
00015F8A 0640 0080                  		addi.w	#$80,d0
00015F8E                            
00015F8E                            loc_15E30:
00015F8E 3228 0034                  		move.w	$34(a0),d1
00015F92 9240                       		sub.w	d0,d1
00015F94 3141 0008                  		move.w	d1,8(a0)
00015F98 4E75                       		rts	
00015F9A                            ; ===========================================================================
00015F9A                            
00015F9A                            loc_15E3C:
00015F9A 5328 0028                  		subq.b	#1,$28(a0)
00015F9E 4228 0038                  		clr.b	$38(a0)
00015FA2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015FA6 7000                       		moveq	#0,d0
00015FA8 1028 0023                  		move.b	$23(a0),d0
00015FAC 67CE                       		beq.s	loc_15E1E
00015FAE 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00015FB4 60C6                       		bra.s	loc_15E1E
00015FB6                            ; ===========================================================================
00015FB6                            
00015FB6                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00015FB6 4A28 0038                  		tst.b	$38(a0)
00015FBA 6600                       		bne.s	loc_15E7C
00015FBC 4A68 003A                  		tst.w	$3A(a0)
00015FC0 6700                       		beq.s	loc_15E6A
00015FC2 5368 003A                  		subq.w	#1,$3A(a0)
00015FC6 6000                       		bra.s	loc_15E8E
00015FC8                            ; ===========================================================================
00015FC8                            
00015FC8                            loc_15E6A:
00015FC8 5368 0036                  		subq.w	#1,$36(a0)
00015FCC 6A00                       		bpl.s	loc_15E8E
00015FCE 317C 003C 0036             		move.w	#$3C,$36(a0)
00015FD4 117C 0001 0038             		move.b	#1,$38(a0)
00015FDA                            
00015FDA                            loc_15E7C:
00015FDA 5068 003A                  		addq.w	#8,$3A(a0)
00015FDE 3028 003A                  		move.w	$3A(a0),d0
00015FE2 B068 003C                  		cmp.w	$3C(a0),d0
00015FE6 6600                       		bne.s	loc_15E8E
00015FE8 4228 0038                  		clr.b	$38(a0)
00015FEC                            
00015FEC                            loc_15E8E:
00015FEC 3028 003A                  		move.w	$3A(a0),d0
00015FF0 0828 0000 0022             		btst	#0,$22(a0)
00015FF6 6700                       		beq.s	loc_15EA0
00015FF8 4440                       		neg.w	d0
00015FFA 0640 0038                  		addi.w	#$38,d0
00015FFE                            
00015FFE                            loc_15EA0:
00015FFE 3228 0030                  		move.w	$30(a0),d1
00016002 D240                       		add.w	d0,d1
00016004 3141 000C                  		move.w	d1,$C(a0)
00016008 4E75                       		rts	
0001600A                            ; ===========================================================================
0001600A                            
0001600A                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
0001600A 4A28 0038                  		tst.b	$38(a0)
0001600E 6600                       		bne.s	loc_15ED0
00016010 4A68 003A                  		tst.w	$3A(a0)
00016014 6700                       		beq.s	loc_15EBE
00016016 5168 003A                  		subq.w	#8,$3A(a0)
0001601A 6000                       		bra.s	loc_15EF0
0001601C                            ; ===========================================================================
0001601C                            
0001601C                            loc_15EBE:
0001601C 5368 0036                  		subq.w	#1,$36(a0)
00016020 6A00                       		bpl.s	loc_15EF0
00016022 317C 003C 0036             		move.w	#$3C,$36(a0)
00016028 117C 0001 0038             		move.b	#1,$38(a0)
0001602E                            
0001602E                            loc_15ED0:
0001602E 3028 003A                  		move.w	$3A(a0),d0
00016032 B068 003C                  		cmp.w	$3C(a0),d0
00016036 6700                       		beq.s	loc_15EE0
00016038 5068 003A                  		addq.w	#8,$3A(a0)
0001603C 6000                       		bra.s	loc_15EF0
0001603E                            ; ===========================================================================
0001603E                            
0001603E                            loc_15EE0:
0001603E 5368 0036                  		subq.w	#1,$36(a0)
00016042 6A00                       		bpl.s	loc_15EF0
00016044 317C 003C 0036             		move.w	#$3C,$36(a0)
0001604A 4228 0038                  		clr.b	$38(a0)
0001604E                            
0001604E                            loc_15EF0:
0001604E 3028 003A                  		move.w	$3A(a0),d0
00016052 0828 0000 0022             		btst	#0,$22(a0)
00016058 6700                       		beq.s	loc_15F02
0001605A 4440                       		neg.w	d0
0001605C 0640 0038                  		addi.w	#$38,d0
00016060                            
00016060                            loc_15F02:
00016060 3228 0030                  		move.w	$30(a0),d1
00016064 D240                       		add.w	d0,d1
00016066 3141 000C                  		move.w	d1,$C(a0)
0001606A 4E75                       		rts	
0001606C                            ; ===========================================================================
0001606C                            
0001606C                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
0001606C 4A28 0038                  		tst.b	$38(a0)
00016070 6600                       		bne.s	loc_15F3E
00016072 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016076 7000                       		moveq	#0,d0
00016078 1028 003E                  		move.b	$3E(a0),d0
0001607C 0832 0000 0000             		btst	#0,(a2,d0.w)
00016082 6700                       		beq.s	locret_15F5C
00016084 117C 0001 0038             		move.b	#1,$38(a0)
0001608A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001608E 7000                       		moveq	#0,d0
00016090 1028 0023                  		move.b	$23(a0),d0
00016094 6700                       		beq.s	loc_15F3E
00016096 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001609C                            
0001609C                            loc_15F3E:
0001609C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
000160A4 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
000160AC 3168 0008 0034             		move.w	8(a0),$34(a0)
000160B2 0C68 0980 0008             		cmpi.w	#$980,8(a0)
000160B8 6700                       		beq.s	loc_15F5E
000160BA                            
000160BA                            locret_15F5C:
000160BA 4E75                       		rts	
000160BC                            ; ===========================================================================
000160BC                            
000160BC                            loc_15F5E:
000160BC 4228 0028                  		clr.b	$28(a0)
000160C0 4228 0038                  		clr.b	$38(a0)
000160C4 4E75                       		rts	
000160C6                            ; ===========================================================================
000160C6                            ; ---------------------------------------------------------------------------
000160C6                            ; Sprite mappings - stomper and	platforms (SBZ)
000160C6                            ; ---------------------------------------------------------------------------
000160C6                            Map_obj6B:
000160C6                            	include "_maps\obj6B.asm"
000160C6                            ; ---------------------------------------------------------------------------
000160C6                            ; Sprite mappings - stomper and	platforms (SBZ)
000160C6                            ; ---------------------------------------------------------------------------
000160C6 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000160CA 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000160CE 0000                       		dc.w byte_15FB0-Map_obj6B
000160D0 04                         byte_15F72:	dc.b 4
000160D1 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000160D6 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000160DB F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000160E0 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000160E5 08                         byte_15F87:	dc.b 8
000160E6 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000160EB E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000160F0 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000160F5 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000160FA 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000160FF 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00016104 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00016109 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
0001610E 0E                         byte_15FB0:	dc.b $E
0001610F C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00016114 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00016119 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
0001611E C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00016123 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00016128 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
0001612D C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00016132 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00016137 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
0001613C E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00016141 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00016146 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
0001614B 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00016150 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00016156 00                         		even
00016156 00                         		even
00016156                            
00016156                            ; ===========================================================================
00016156                            ; ---------------------------------------------------------------------------
00016156                            ; Object 6C - vanishing	platforms (SBZ)
00016156                            ; ---------------------------------------------------------------------------
00016156                            
00016156                            Obj6C:					; XREF: Obj_Index
00016156 7000                       		moveq	#0,d0
00016158 1028 0024                  		move.b	$24(a0),d0
0001615C 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00016160 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00016164                            ; ===========================================================================
00016164 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00016166 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00016168 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
0001616A 0000                       		dc.w loc_16068-Obj6C_Index
0001616C                            ; ===========================================================================
0001616C                            
0001616C                            Obj6C_Main:				; XREF: Obj6C_Index
0001616C 5C28 0024                  		addq.b	#6,$24(a0)
00016170 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00016178 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001617E 0028 0004 0001             		ori.b	#4,1(a0)
00016184 117C 0010 0019             		move.b	#$10,$19(a0)
0001618A 117C 0004 0018             		move.b	#4,$18(a0)
00016190 7000                       		moveq	#0,d0
00016192 1028 0028                  		move.b	$28(a0),d0	; get object type
00016196 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001619A 5240                       		addq.w	#1,d0		; add 1
0001619C EF48                       		lsl.w	#7,d0		; multiply by $80
0001619E 3200                       		move.w	d0,d1
000161A0 5340                       		subq.w	#1,d0
000161A2 3140 0030                  		move.w	d0,$30(a0)
000161A6 3140 0032                  		move.w	d0,$32(a0)
000161AA 7000                       		moveq	#0,d0
000161AC 1028 0028                  		move.b	$28(a0),d0	; get object type
000161B0 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
000161B4 0641 0080                  		addi.w	#$80,d1
000161B8 C0C1                       		mulu.w	d1,d0
000161BA E088                       		lsr.l	#8,d0
000161BC 3140 0036                  		move.w	d0,$36(a0)
000161C0 5341                       		subq.w	#1,d1
000161C2 3141 0038                  		move.w	d1,$38(a0)
000161C6                            
000161C6                            loc_16068:				; XREF: Obj6C_Index
000161C6 3038 FE04                  		move.w	($FFFFFE04).w,d0
000161CA 9068 0036                  		sub.w	$36(a0),d0
000161CE C068 0038                  		and.w	$38(a0),d0
000161D2 6600                       		bne.s	Obj6C_Animate
000161D4 5928 0024                  		subq.b	#4,$24(a0)
000161D8 6000                       		bra.s	Obj6C_Vanish
000161DA                            ; ===========================================================================
000161DA                            
000161DA                            Obj6C_Animate:
000161DA 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000161E0 4EB9 0000 A7EE             		jsr	AnimateSprite
000161E6 6000 963C                  		bra.w	MarkObjGone
000161EA                            ; ===========================================================================
000161EA                            
000161EA                            Obj6C_Vanish:				; XREF: Obj6C_Index
000161EA 5368 0030                  		subq.w	#1,$30(a0)
000161EE 6A00                       		bpl.s	loc_160AA
000161F0 317C 007F 0030             		move.w	#127,$30(a0)
000161F6 4A28 001C                  		tst.b	$1C(a0)
000161FA 6700                       		beq.s	loc_160A4
000161FC 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016202                            
00016202                            loc_160A4:
00016202 0868 0000 001C             		bchg	#0,$1C(a0)
00016208                            
00016208                            loc_160AA:
00016208 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
0001620E 4EB9 0000 A7EE             		jsr	AnimateSprite
00016214 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
0001621A 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
0001621C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00016222 6600                       		bne.s	loc_160D6
00016224 7200                       		moveq	#0,d1
00016226 1228 0019                  		move.b	$19(a0),d1
0001622A 4EB9 0000 7552             		jsr	(PlatformObject).l
00016230 6000 95F2                  		bra.w	MarkObjGone
00016234                            ; ===========================================================================
00016234                            
00016234                            loc_160D6:
00016234 7200                       		moveq	#0,d1
00016236 1228 0019                  		move.b	$19(a0),d1
0001623A 4EB9 0000 76C6             		jsr	(ExitPlatform).l
00016240 3428 0008                  		move.w	8(a0),d2
00016244 4EB9 0000 7C30             		jsr	(MvSonicOnPtfm2).l
0001624A 6000 95D8                  		bra.w	MarkObjGone
0001624E                            ; ===========================================================================
0001624E                            
0001624E                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
0001624E 0828 0003 0022             		btst	#3,$22(a0)
00016254 6700                       		beq.s	Obj6C_Display
00016256 43F8 D000                  		lea	($FFFFD000).w,a1
0001625A 08A9 0003 0022             		bclr	#3,$22(a1)
00016260 08A8 0003 0022             		bclr	#3,$22(a0)
00016266 117C 0002 0024             		move.b	#2,$24(a0)
0001626C 4228 0025                  		clr.b	$25(a0)
00016270                            
00016270                            Obj6C_Display:
00016270 6000 95B2                  		bra.w	MarkObjGone
00016274                            ; ===========================================================================
00016274                            Ani_obj6C:
00016274                            	include "_anim\obj6C.asm"
00016274                            ; ---------------------------------------------------------------------------
00016274                            ; Animation script - vanishing platforms (SBZ)
00016274                            ; ---------------------------------------------------------------------------
00016274 0000                       		dc.w byte_1611A-Ani_obj6C
00016276 0000                       		dc.w byte_16122-Ani_obj6C
00016278 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016280 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016288                            		even
00016288                            		even
00016288                            
00016288                            ; ---------------------------------------------------------------------------
00016288                            ; Sprite mappings - vanishing platforms	(SBZ)
00016288                            ; ---------------------------------------------------------------------------
00016288                            Map_obj6C:
00016288                            	include "_maps\obj6C.asm"
00016288                            ; ---------------------------------------------------------------------------
00016288                            ; Sprite mappings - vanishing platforms	(SBZ)
00016288                            ; ---------------------------------------------------------------------------
00016288 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001628C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016290 01                         byte_16132:	dc.b 1
00016291 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016296 01                         byte_16138:	dc.b 1
00016297 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001629C 01                         byte_1613E:	dc.b 1
0001629D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
000162A2 00                         byte_16144:	dc.b 0
000162A4 00                         		even
000162A4 00                         		even
000162A4                            
000162A4                            ; ===========================================================================
000162A4                            ; ---------------------------------------------------------------------------
000162A4                            ; Object 6E - electrocution orbs (SBZ)
000162A4                            ; ---------------------------------------------------------------------------
000162A4                            
000162A4                            Obj6E:					; XREF: Obj_Index
000162A4 7000                       		moveq	#0,d0
000162A6 1028 0024                  		move.b	$24(a0),d0
000162AA 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
000162AE 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
000162B2                            ; ===========================================================================
000162B2 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
000162B4 0000                       		dc.w Obj6E_Shock-Obj6E_Index
000162B6                            ; ===========================================================================
000162B6                            
000162B6                            Obj6E_Main:				; XREF: Obj6E_Index
000162B6 5428 0024                  		addq.b	#2,$24(a0)
000162BA 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
000162C2 317C 047E 0002             		move.w	#$47E,2(a0)
000162C8 0028 0004 0001             		ori.b	#4,1(a0)
000162CE 117C 0028 0019             		move.b	#$28,$19(a0)
000162D4 7000                       		moveq	#0,d0
000162D6 1028 0028                  		move.b	$28(a0),d0	; read object type
000162DA E948                       		lsl.w	#4,d0		; multiply by $10
000162DC 5340                       		subq.w	#1,d0
000162DE 3140 0034                  		move.w	d0,$34(a0)
000162E2                            
000162E2                            Obj6E_Shock:				; XREF: Obj6E_Index
000162E2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000162E6 C068 0034                  		and.w	$34(a0),d0
000162EA 6600                       		bne.s	Obj6E_Animate
000162EC 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000162F2 4A28 0001                  		tst.b	1(a0)
000162F6 6A00                       		bpl.s	Obj6E_Animate
000162F8 303C 00B1                  		move.w	#$B1,d0
000162FC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play electricity sound
00016302                            
00016302                            Obj6E_Animate:
00016302 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
00016308 4EB9 0000 A7EE             		jsr	AnimateSprite
0001630E 117C 0000 0020             		move.b	#0,$20(a0)
00016314 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
0001631A 6600                       		bne.s	Obj6E_Display	; if not, branch
0001631C 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
00016322                            
00016322                            Obj6E_Display:
00016322 6000 9500                  		bra.w	MarkObjGone
00016326                            ; ===========================================================================
00016326                            Ani_obj6E:
00016326                            	include "_anim\obj6E.asm"
00016326                            ; ---------------------------------------------------------------------------
00016326                            ; Animation script - electrocution orbs (SBZ)
00016326                            ; ---------------------------------------------------------------------------
00016326 0000                       		dc.w byte_161CC-Ani_obj6E
00016328 0000                       		dc.w byte_161D0-Ani_obj6E
0001632A 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
0001632E 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
0001633E                            		even
0001633E                            		even
0001633E                            
0001633E                            ; ---------------------------------------------------------------------------
0001633E                            ; Sprite mappings - electrocution orbs (SBZ)
0001633E                            ; ---------------------------------------------------------------------------
0001633E                            Map_obj6E:
0001633E                            	include "_maps\obj6E.asm"
0001633E                            ; ---------------------------------------------------------------------------
0001633E                            ; Sprite mappings - electrocution orbs (SBZ)
0001633E                            ; ---------------------------------------------------------------------------
0001633E 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00016342 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00016346 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
0001634A 02                         byte_161EC:	dc.b 2
0001634B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016350 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016355 03                         byte_161F7:	dc.b 3
00016356 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001635B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016360 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016365 05                         byte_16207:	dc.b 5
00016366 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001636B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016370 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016375 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001637A F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001637F 04                         byte_16221:	dc.b 4
00016380 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016385 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001638A F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001638F F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016394 06                         byte_16236:	dc.b 6
00016395 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001639A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001639F F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
000163A4 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
000163A9 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
000163AE F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
000163B3 04                         byte_16255:	dc.b 4
000163B4 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
000163B9 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
000163BE F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
000163C3 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
000163C8                            		even
000163C8                            		even
000163C8                            
000163C8                            ; ===========================================================================
000163C8                            ; ---------------------------------------------------------------------------
000163C8                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000163C8                            ; ---------------------------------------------------------------------------
000163C8                            
000163C8                            Obj6F:					; XREF: Obj_Index
000163C8 7000                       		moveq	#0,d0
000163CA 1028 0024                  		move.b	$24(a0),d0
000163CE 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000163D2 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000163D6 3028 0030                  		move.w	$30(a0),d0
000163DA 0240 FF80                  		andi.w	#$FF80,d0
000163DE 3238 F700                  		move.w	($FFFFF700).w,d1
000163E2 0441 0080                  		subi.w	#$80,d1
000163E6 0241 FF80                  		andi.w	#$FF80,d1
000163EA 9041                       		sub.w	d1,d0
000163EC 0C40 0280                  		cmpi.w	#$280,d0
000163F0 6200                       		bhi.s	loc_1629A
000163F2                            
000163F2                            Obj6F_Display:
000163F2 4EF9 0000 D77C             		jmp	DisplaySprite
000163F8                            ; ===========================================================================
000163F8                            
000163F8                            loc_1629A:
000163F8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000163FE 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
00016400 0C40 FF80                  		cmpi.w	#-$80,d0
00016404 64EC                       		bcc.s	Obj6F_Display
00016406                            
00016406                            Obj6F_Act1or2:
00016406 1028 002F                  		move.b	$2F(a0),d0
0001640A 6A00                       		bpl.s	Obj6F_Delete
0001640C 0240 007F                  		andi.w	#$7F,d0
00016410 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00016414 08B2 0000 0000             		bclr	#0,(a2,d0.w)
0001641A                            
0001641A                            Obj6F_Delete:
0001641A 4EF9 0000 D7B8             		jmp	DeleteObject
00016420                            ; ===========================================================================
00016420 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
00016422 0000                       		dc.w loc_163D8-Obj6F_Index
00016424                            ; ===========================================================================
00016424                            
00016424                            Obj6F_Main:				; XREF: Obj6F_Index
00016424 1028 0028                  		move.b	$28(a0),d0
00016428 6B00 0000                  		bmi.w	loc_16380
0001642C 5428 0024                  		addq.b	#2,$24(a0)
00016430 217C 0001 5A98 0004        		move.l	#Map_obj69a,4(a0)
00016438 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001643E 117C 0010 0019             		move.b	#$10,$19(a0)
00016444 0028 0004 0001             		ori.b	#4,1(a0)
0001644A 117C 0004 0018             		move.b	#4,$18(a0)
00016450 7000                       		moveq	#0,d0
00016452 1028 0028                  		move.b	$28(a0),d0
00016456 3200                       		move.w	d0,d1
00016458 E648                       		lsr.w	#3,d0
0001645A 0240 001E                  		andi.w	#$1E,d0
0001645E 45FA 0000                  		lea	off_164A6(pc),a2
00016462 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016466 315A 0038                  		move.w	(a2)+,$38(a0)
0001646A 315A 0030                  		move.w	(a2)+,$30(a0)
0001646E 214A 003C                  		move.l	a2,$3C(a0)
00016472 0241 000F                  		andi.w	#$F,d1
00016476 E549                       		lsl.w	#2,d1
00016478 1141 0038                  		move.b	d1,$38(a0)
0001647C 117C 0004 003A             		move.b	#4,$3A(a0)
00016482 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016486 6700                       		beq.s	loc_16356
00016488 117C 0001 003B             		move.b	#1,$3B(a0)
0001648E 4428 003A                  		neg.b	$3A(a0)
00016492 7200                       		moveq	#0,d1
00016494 1228 0038                  		move.b	$38(a0),d1
00016498 D228 003A                  		add.b	$3A(a0),d1
0001649C B228 0039                  		cmp.b	$39(a0),d1
000164A0 6500                       		bcs.s	loc_16352
000164A2 1001                       		move.b	d1,d0
000164A4 7200                       		moveq	#0,d1
000164A6 4A00                       		tst.b	d0
000164A8 6A00                       		bpl.s	loc_16352
000164AA 1228 0039                  		move.b	$39(a0),d1
000164AE 5901                       		subq.b	#4,d1
000164B0                            
000164B0                            loc_16352:
000164B0 1141 0038                  		move.b	d1,$38(a0)
000164B4                            
000164B4                            loc_16356:
000164B4 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000164BA 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000164C0 4A41                       		tst.w	d1
000164C2 6600                       		bne.s	loc_1636C
000164C4 117C 0001 001C             		move.b	#1,$1C(a0)
000164CA                            
000164CA                            loc_1636C:
000164CA 0C41 0008                  		cmpi.w	#8,d1
000164CE 6600                       		bne.s	loc_16378
000164D0 117C 0000 001C             		move.b	#0,$1C(a0)
000164D6                            
000164D6                            loc_16378:
000164D6 6100 C1EC                  		bsr.w	Obj63_ChangeDir
000164DA 6000 0000                  		bra.w	loc_163D8
000164DE                            ; ===========================================================================
000164DE                            
000164DE                            loc_16380:				; XREF: Obj6F_Main
000164DE 1140 002F                  		move.b	d0,$2F(a0)
000164E2 0240 007F                  		andi.w	#$7F,d0
000164E6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000164EA 08F2 0000 0000             		bset	#0,(a2,d0.w)
000164F0 6700                       		beq.s	loc_1639A
000164F2 4EF9 0000 D7B8             		jmp	DeleteObject
000164F8                            ; ===========================================================================
000164F8                            
000164F8                            loc_1639A:
000164F8 D040                       		add.w	d0,d0
000164FA 0240 001E                  		andi.w	#$1E,d0
000164FE 0640 0080                  		addi.w	#$80,d0
00016502 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
00016508 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001650C 321A                       		move.w	(a2)+,d1
0001650E 2248                       		movea.l	a0,a1
00016510 6000                       		bra.s	Obj6F_LoadPform
00016512                            ; ===========================================================================
00016512                            
00016512                            Obj6F_Loop:
00016512 4EB9 0000 DC02             		jsr	SingleObjLoad
00016518 6600                       		bne.s	loc_163D0
0001651A                            
0001651A                            Obj6F_LoadPform:			; XREF: loc_1639A
0001651A 12BC 006F                  		move.b	#$6F,0(a1)
0001651E 335A 0008                  		move.w	(a2)+,8(a1)
00016522 335A 000C                  		move.w	(a2)+,$C(a1)
00016526 301A                       		move.w	(a2)+,d0
00016528 1340 0028                  		move.b	d0,$28(a1)
0001652C                            
0001652C                            loc_163D0:
0001652C 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016530                            
00016530 588F                       		addq.l	#4,sp
00016532 4E75                       		rts	
00016534                            ; ===========================================================================
00016534                            
00016534                            loc_163D8:				; XREF: Obj6F_Index
00016534 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
0001653A 4EB9 0000 A7EE             		jsr	AnimateSprite
00016540 4A28 001A                  		tst.b	$1A(a0)
00016544 6600                       		bne.s	loc_16404
00016546 3F28 0008                  		move.w	8(a0),-(sp)
0001654A 6100 0000                  		bsr.w	loc_16424
0001654E 323C 001B                  		move.w	#$1B,d1
00016552 343C 0007                  		move.w	#7,d2
00016556 3602                       		move.w	d2,d3
00016558 5243                       		addq.w	#1,d3
0001655A 381F                       		move.w	(sp)+,d4
0001655C 6000 95EE                  		bra.w	SolidObject
00016560                            ; ===========================================================================
00016560                            
00016560                            loc_16404:
00016560 0828 0003 0022             		btst	#3,$22(a0)
00016566 6700                       		beq.s	loc_16420
00016568 43F8 D000                  		lea	($FFFFD000).w,a1
0001656C 08A9 0003 0022             		bclr	#3,$22(a1)
00016572 08A8 0003 0022             		bclr	#3,$22(a0)
00016578 4228 0025                  		clr.b	$25(a0)
0001657C                            
0001657C                            loc_16420:
0001657C 6000 0002                  		bra.w	*+4
00016580                            
00016580                            loc_16424:
00016580 3028 0008                  		move.w	8(a0),d0
00016584 B068 0034                  		cmp.w	$34(a0),d0
00016588 6600                       		bne.s	loc_16484
0001658A 3028 000C                  		move.w	$C(a0),d0
0001658E B068 0036                  		cmp.w	$36(a0),d0
00016592 6600                       		bne.s	loc_16484
00016594 7200                       		moveq	#0,d1
00016596 1228 0038                  		move.b	$38(a0),d1
0001659A D228 003A                  		add.b	$3A(a0),d1
0001659E B228 0039                  		cmp.b	$39(a0),d1
000165A2 6500                       		bcs.s	loc_16456
000165A4 1001                       		move.b	d1,d0
000165A6 7200                       		moveq	#0,d1
000165A8 4A00                       		tst.b	d0
000165AA 6A00                       		bpl.s	loc_16456
000165AC 1228 0039                  		move.b	$39(a0),d1
000165B0 5901                       		subq.b	#4,d1
000165B2                            
000165B2                            loc_16456:
000165B2 1141 0038                  		move.b	d1,$38(a0)
000165B6 2268 003C                  		movea.l	$3C(a0),a1
000165BA 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000165C0 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000165C6 4A41                       		tst.w	d1
000165C8 6600                       		bne.s	loc_16474
000165CA 117C 0001 001C             		move.b	#1,$1C(a0)
000165D0                            
000165D0                            loc_16474:
000165D0 0C41 0008                  		cmpi.w	#8,d1
000165D4 6600                       		bne.s	loc_16480
000165D6 117C 0000 001C             		move.b	#0,$1C(a0)
000165DC                            
000165DC                            loc_16480:
000165DC 6100 C0E6                  		bsr.w	Obj63_ChangeDir
000165E0                            
000165E0                            loc_16484:
000165E0 4EF9 0000 D756             		jmp	SpeedToPos
000165E6                            ; ===========================================================================
000165E6                            Ani_obj6F:
000165E6                            	include "_anim\obj6F.asm"
000165E6                            ; ---------------------------------------------------------------------------
000165E6                            ; Animation script - platform on conveyor belt (SBZ)
000165E6                            ; ---------------------------------------------------------------------------
000165E6 0000                       		dc.w byte_1648E-Ani_obj6F
000165E8 0000                       		dc.w byte_164A2-Ani_obj6F
000165EA 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000165F7 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000165FE 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
00016602 00                         		even
00016602 00                         		even
00016602                            
00016602 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
00016608 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
0001660E 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
00016622 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016636 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001664A 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001665E 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016672 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016686                            ; ===========================================================================
00016686                            ; ---------------------------------------------------------------------------
00016686                            ; Object 70 - large girder block (SBZ)
00016686                            ; ---------------------------------------------------------------------------
00016686                            
00016686                            Obj70:					; XREF: Obj_Index
00016686 7000                       		moveq	#0,d0
00016688 1028 0024                  		move.b	$24(a0),d0
0001668C 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016690 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016694                            ; ===========================================================================
00016694 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016696 0000                       		dc.w Obj70_Action-Obj70_Index
00016698                            ; ===========================================================================
00016698                            
00016698                            Obj70_Main:				; XREF: Obj70_Index
00016698 5428 0024                  		addq.b	#2,$24(a0)
0001669C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
000166A4 317C 42F0 0002             		move.w	#$42F0,2(a0)
000166AA 0028 0004 0001             		ori.b	#4,1(a0)
000166B0 117C 0004 0018             		move.b	#4,$18(a0)
000166B6 117C 0060 0019             		move.b	#$60,$19(a0)
000166BC 117C 0018 0016             		move.b	#$18,$16(a0)
000166C2 3168 0008 0032             		move.w	8(a0),$32(a0)
000166C8 3168 000C 0030             		move.w	$C(a0),$30(a0)
000166CE 6100 0000                  		bsr.w	Obj70_Move2
000166D2                            
000166D2                            Obj70_Action:				; XREF: Obj70_Index
000166D2 3F28 0008                  		move.w	8(a0),-(sp)
000166D6 4A68 003A                  		tst.w	$3A(a0)
000166DA 6700                       		beq.s	Obj70_Move
000166DC 5368 003A                  		subq.w	#1,$3A(a0)
000166E0 6600                       		bne.s	Obj70_Solid
000166E2                            
000166E2                            Obj70_Move:
000166E2 4EB9 0000 D756             		jsr	SpeedToPos
000166E8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000166EC 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000166EE 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000166F2                            
000166F2                            Obj70_Solid:
000166F2 381F                       		move.w	(sp)+,d4
000166F4 4A28 0001                  		tst.b	1(a0)
000166F8 6A00                       		bpl.s	Obj70_ChkDel
000166FA 7200                       		moveq	#0,d1
000166FC 1228 0019                  		move.b	$19(a0),d1
00016700 0641 000B                  		addi.w	#$B,d1
00016704 7400                       		moveq	#0,d2
00016706 1428 0016                  		move.b	$16(a0),d2
0001670A 3602                       		move.w	d2,d3
0001670C 5243                       		addq.w	#1,d3
0001670E 6100 943C                  		bsr.w	SolidObject
00016712                            
00016712                            Obj70_ChkDel:
00016712 3028 0032                  		move.w	$32(a0),d0
00016716 0240 FF80                  		andi.w	#$FF80,d0
0001671A 3238 F700                  		move.w	($FFFFF700).w,d1
0001671E 0441 0080                  		subi.w	#$80,d1
00016722 0241 FF80                  		andi.w	#$FF80,d1
00016726 9041                       		sub.w	d1,d0
00016728 0C40 0280                  		cmpi.w	#$280,d0
0001672C 6200                       		bhi.s	Obj70_Delete
0001672E 4EF9 0000 D77C             		jmp	DisplaySprite
00016734                            ; ===========================================================================
00016734                            
00016734                            Obj70_Delete:
00016734 4EF9 0000 D7B8             		jmp	DeleteObject
0001673A                            ; ===========================================================================
0001673A                            
0001673A                            Obj70_Move2:				; XREF: Obj70_Main
0001673A 1028 0038                  		move.b	$38(a0),d0
0001673E 0240 0018                  		andi.w	#$18,d0
00016742 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016748 43F1 0000                  		lea	(a1,d0.w),a1
0001674C 3159 0010                  		move.w	(a1)+,$10(a0)
00016750 3159 0012                  		move.w	(a1)+,$12(a0)
00016754 3159 0034                  		move.w	(a1)+,$34(a0)
00016758 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
0001675C 317C 0007 003A             		move.w	#7,$3A(a0)
00016762 4E75                       		rts	
00016764                            ; ===========================================================================
00016764 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001676C 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016774 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001677C 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016784                            ; ---------------------------------------------------------------------------
00016784                            ; Sprite mappings - large girder block (SBZ)
00016784                            ; ---------------------------------------------------------------------------
00016784                            Map_obj70:
00016784                            	include "_maps\obj70.asm"
00016784                            ; ---------------------------------------------------------------------------
00016784                            ; Sprite mappings - large girder block (SBZ)
00016784                            ; ---------------------------------------------------------------------------
00016784 0000                       		dc.w byte_1662A-Map_obj70
00016786 0C                         byte_1662A:	dc.b $C
00016787 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001678C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016791 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016796 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001679B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
000167A0 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
000167A5 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
000167AA 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
000167AF E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
000167B4 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000167B9 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000167BE 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000167C4 00                         		even
000167C4 00                         		even
000167C4                            
000167C4                            ; ===========================================================================
000167C4                            ; ---------------------------------------------------------------------------
000167C4                            ; Object 72 - teleporter (SBZ)
000167C4                            ; ---------------------------------------------------------------------------
000167C4                            
000167C4                            Obj72:					; XREF: Obj_Index
000167C4 7000                       		moveq	#0,d0
000167C6 1028 0024                  		move.b	$24(a0),d0
000167CA 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000167CE 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000167D2 3028 0008                  		move.w	8(a0),d0
000167D6 0240 FF80                  		andi.w	#$FF80,d0
000167DA 3238 F700                  		move.w	($FFFFF700).w,d1
000167DE 0441 0080                  		subi.w	#$80,d1
000167E2 0241 FF80                  		andi.w	#$FF80,d1
000167E6 9041                       		sub.w	d1,d0
000167E8 0C40 0280                  		cmpi.w	#$280,d0
000167EC 6200                       		bhi.s	Obj72_Delete
000167EE 4E75                       		rts	
000167F0                            ; ===========================================================================
000167F0                            
000167F0                            Obj72_Delete:
000167F0 4EF9 0000 D7B8             		jmp	DeleteObject
000167F6                            ; ===========================================================================
000167F6 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000167F8 0000                       		dc.w loc_166C8-Obj72_Index
000167FA 0000                       		dc.w loc_1675E-Obj72_Index
000167FC 0000                       		dc.w loc_16798-Obj72_Index
000167FE                            ; ===========================================================================
000167FE                            
000167FE                            Obj72_Main:				; XREF: Obj72_Index
000167FE 5428 0024                  		addq.b	#2,$24(a0)
00016802 1028 0028                  		move.b	$28(a0),d0
00016806 D040                       		add.w	d0,d0
00016808 0240 001E                  		andi.w	#$1E,d0
0001680C 45FA 0000                  		lea	Obj72_Data(pc),a2
00016810 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016814 315A 003A                  		move.w	(a2)+,$3A(a0)
00016818 214A 003C                  		move.l	a2,$3C(a0)
0001681C 315A 0036                  		move.w	(a2)+,$36(a0)
00016820 315A 0038                  		move.w	(a2)+,$38(a0)
00016824                            
00016824                            loc_166C8:				; XREF: Obj72_Index
00016824 43F8 D000                  		lea	($FFFFD000).w,a1
00016828 3029 0008                  		move.w	8(a1),d0
0001682C 9068 0008                  		sub.w	8(a0),d0
00016830 0828 0000 0022             		btst	#0,$22(a0)
00016836 6700                       		beq.s	loc_166E0
00016838 0640 000F                  		addi.w	#$F,d0
0001683C                            
0001683C                            loc_166E0:
0001683C 0C40 0010                  		cmpi.w	#$10,d0
00016840 6400                       		bcc.s	locret_1675C
00016842 3229 000C                  		move.w	$C(a1),d1
00016846 9268 000C                  		sub.w	$C(a0),d1
0001684A 0641 0020                  		addi.w	#$20,d1
0001684E 0C41 0040                  		cmpi.w	#$40,d1
00016852 6400                       		bcc.s	locret_1675C
00016854 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016858 6600                       		bne.s	locret_1675C
0001685A 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016860 6600                       		bne.s	loc_1670E
00016862 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016868 6500                       		bcs.s	locret_1675C
0001686A                            
0001686A                            loc_1670E:
0001686A 5428 0024                  		addq.b	#2,$24(a0)
0001686E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016874 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001687A 337C 0800 0014             		move.w	#$800,$14(a1)
00016880 337C 0000 0010             		move.w	#0,$10(a1)
00016886 337C 0000 0012             		move.w	#0,$12(a1)
0001688C 08A8 0005 0022             		bclr	#5,$22(a0)
00016892 08A9 0005 0022             		bclr	#5,$22(a1)
00016898 08E9 0001 0022             		bset	#1,$22(a1)
0001689E 3368 0008 0008             		move.w	8(a0),8(a1)
000168A4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000168AA 4228 0032                  		clr.b	$32(a0)
000168AE 303C 00BE                  		move.w	#$BE,d0
000168B2 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000168B8                            
000168B8                            locret_1675C:
000168B8 4E75                       		rts	
000168BA                            ; ===========================================================================
000168BA                            
000168BA                            loc_1675E:				; XREF: Obj72_Index
000168BA 43F8 D000                  		lea	($FFFFD000).w,a1
000168BE 1028 0032                  		move.b	$32(a0),d0
000168C2 5428 0032                  		addq.b	#2,$32(a0)
000168C6 4EB9 0000 29DA             		jsr	(CalcSine).l
000168CC EA40                       		asr.w	#5,d0
000168CE 3428 000C                  		move.w	$C(a0),d2
000168D2 9440                       		sub.w	d0,d2
000168D4 3342 000C                  		move.w	d2,$C(a1)
000168D8 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000168DE 6600                       		bne.s	locret_16796
000168E0 6100 0000                  		bsr.w	sub_1681C
000168E4 5428 0024                  		addq.b	#2,$24(a0)
000168E8 303C 00BC                  		move.w	#$BC,d0
000168EC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play teleport sound
000168F2                            
000168F2                            locret_16796:
000168F2 4E75                       		rts	
000168F4                            ; ===========================================================================
000168F4                            
000168F4                            loc_16798:				; XREF: Obj72_Index
000168F4 588F                       		addq.l	#4,sp
000168F6 43F8 D000                  		lea	($FFFFD000).w,a1
000168FA 5328 002E                  		subq.b	#1,$2E(a0)
000168FE 6A00                       		bpl.s	loc_167DA
00016900 3368 0036 0008             		move.w	$36(a0),8(a1)
00016906 3368 0038 000C             		move.w	$38(a0),$C(a1)
0001690C 7200                       		moveq	#0,d1
0001690E 1228 003A                  		move.b	$3A(a0),d1
00016912 5801                       		addq.b	#4,d1
00016914 B228 003B                  		cmp.b	$3B(a0),d1
00016918 6500                       		bcs.s	loc_167C2
0001691A 7200                       		moveq	#0,d1
0001691C 6000                       		bra.s	loc_16800
0001691E                            ; ===========================================================================
0001691E                            
0001691E                            loc_167C2:
0001691E 1141 003A                  		move.b	d1,$3A(a0)
00016922 2468 003C                  		movea.l	$3C(a0),a2
00016926 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
0001692C 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016932 6000 0000                  		bra.w	sub_1681C
00016936                            ; ===========================================================================
00016936                            
00016936                            loc_167DA:
00016936 2429 0008                  		move.l	8(a1),d2
0001693A 2629 000C                  		move.l	$C(a1),d3
0001693E 3029 0010                  		move.w	$10(a1),d0
00016942 48C0                       		ext.l	d0
00016944 E180                       		asl.l	#8,d0
00016946 D480                       		add.l	d0,d2
00016948 3029 0012                  		move.w	$12(a1),d0
0001694C 48C0                       		ext.l	d0
0001694E E180                       		asl.l	#8,d0
00016950 D680                       		add.l	d0,d3
00016952 2342 0008                  		move.l	d2,8(a1)
00016956 2343 000C                  		move.l	d3,$C(a1)
0001695A 4E75                       		rts	
0001695C                            ; ===========================================================================
0001695C                            
0001695C                            loc_16800:
0001695C 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016962 4228 0024                  		clr.b	$24(a0)
00016966 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001696A 337C 0000 0010             		move.w	#0,$10(a1)
00016970 337C 0200 0012             		move.w	#$200,$12(a1)
00016976 4E75                       		rts	
00016978                            
00016978                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016978                            
00016978                            
00016978                            sub_1681C:
00016978 7000                       		moveq	#0,d0
0001697A 343C 1000                  		move.w	#$1000,d2
0001697E 3028 0036                  		move.w	$36(a0),d0
00016982 9069 0008                  		sub.w	8(a1),d0
00016986 6C00                       		bge.s	loc_16830
00016988 4440                       		neg.w	d0
0001698A 4442                       		neg.w	d2
0001698C                            
0001698C                            loc_16830:
0001698C 7200                       		moveq	#0,d1
0001698E 363C 1000                  		move.w	#$1000,d3
00016992 3228 0038                  		move.w	$38(a0),d1
00016996 9269 000C                  		sub.w	$C(a1),d1
0001699A 6C00                       		bge.s	loc_16844
0001699C 4441                       		neg.w	d1
0001699E 4443                       		neg.w	d3
000169A0                            
000169A0                            loc_16844:
000169A0 B240                       		cmp.w	d0,d1
000169A2 6500                       		bcs.s	loc_1687A
000169A4 7200                       		moveq	#0,d1
000169A6 3228 0038                  		move.w	$38(a0),d1
000169AA 9269 000C                  		sub.w	$C(a1),d1
000169AE 4841                       		swap	d1
000169B0 83C3                       		divs.w	d3,d1
000169B2 7000                       		moveq	#0,d0
000169B4 3028 0036                  		move.w	$36(a0),d0
000169B8 9069 0008                  		sub.w	8(a1),d0
000169BC 6700                       		beq.s	loc_16866
000169BE 4840                       		swap	d0
000169C0 81C1                       		divs.w	d1,d0
000169C2                            
000169C2                            loc_16866:
000169C2 3340 0010                  		move.w	d0,$10(a1)
000169C6 3343 0012                  		move.w	d3,$12(a1)
000169CA 4A41                       		tst.w	d1
000169CC 6A00                       		bpl.s	loc_16874
000169CE 4441                       		neg.w	d1
000169D0                            
000169D0                            loc_16874:
000169D0 3141 002E                  		move.w	d1,$2E(a0)
000169D4 4E75                       		rts	
000169D6                            ; ===========================================================================
000169D6                            
000169D6                            loc_1687A:
000169D6 7000                       		moveq	#0,d0
000169D8 3028 0036                  		move.w	$36(a0),d0
000169DC 9069 0008                  		sub.w	8(a1),d0
000169E0 4840                       		swap	d0
000169E2 81C2                       		divs.w	d2,d0
000169E4 7200                       		moveq	#0,d1
000169E6 3228 0038                  		move.w	$38(a0),d1
000169EA 9269 000C                  		sub.w	$C(a1),d1
000169EE 6700                       		beq.s	loc_16898
000169F0 4841                       		swap	d1
000169F2 83C0                       		divs.w	d0,d1
000169F4                            
000169F4                            loc_16898:
000169F4 3341 0012                  		move.w	d1,$12(a1)
000169F8 3342 0010                  		move.w	d2,$10(a1)
000169FC 4A40                       		tst.w	d0
000169FE 6A00                       		bpl.s	loc_168A6
00016A00 4440                       		neg.w	d0
00016A02                            
00016A02                            loc_168A6:
00016A02 3140 002E                  		move.w	d0,$2E(a0)
00016A06 4E75                       		rts	
00016A08                            ; End of function sub_1681C
00016A08                            
00016A08                            ; ===========================================================================
00016A08 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00016A0E 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00016A14 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00016A18 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00016A1E 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00016A24 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00016A2A 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016A30 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016A36 0884 0298 0894             		dc.w $884, $298, $894
00016A3C 0270 0894 0190             		dc.w $270, $894, $190
00016A42 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016A48 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00016A4E 1184 0498 1158             		dc.w $1184, $498, $1158
00016A54 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00016A5A 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016A60 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016A66 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00016A6C 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016A72 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016A78 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00016A7E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016A84 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00016A8A 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016A90                            ; ===========================================================================
00016A90                            ; ---------------------------------------------------------------------------
00016A90                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016A90                            ; ---------------------------------------------------------------------------
00016A90                            
00016A90                            Obj78:					; XREF: Obj_Index
00016A90 7000                       		moveq	#0,d0
00016A92 1028 0024                  		move.b	$24(a0),d0
00016A96 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00016A9A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00016A9E                            ; ===========================================================================
00016A9E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016AA0 0000                       		dc.w Obj78_Action-Obj78_Index
00016AA2 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016AA4 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016AA6 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016AA8 0000                       		dc.w Obj78_Delete-Obj78_Index
00016AAA 0000                       		dc.w loc_16CC0-Obj78_Index
00016AAC                            ; ===========================================================================
00016AAC                            
00016AAC                            locret_16950:
00016AAC 4E75                       		rts	
00016AAE                            ; ===========================================================================
00016AAE                            
00016AAE                            Obj78_Main:				; XREF: Obj78_Index
00016AAE 117C 0007 0016             		move.b	#7,$16(a0)
00016AB4 117C 0008 0017             		move.b	#8,$17(a0)
00016ABA 4EB9 0000 D72A             		jsr	ObjectFall
00016AC0 4EBA E4B6                  		jsr	ObjHitFloor
00016AC4 4A41                       		tst.w	d1
00016AC6 6AE4                       		bpl.s	locret_16950
00016AC8 D368 000C                  		add.w	d1,$C(a0)
00016ACC 4268 0012                  		clr.w	$12(a0)
00016AD0 5428 0024                  		addq.b	#2,$24(a0)
00016AD4 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00016ADC 317C 22B0 0002             		move.w	#$22B0,2(a0)
00016AE2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00016AE8 6700                       		beq.s	loc_16996
00016AEA 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00016AF0                            
00016AF0                            loc_16996:
00016AF0 0228 0003 0001             		andi.b	#3,1(a0)
00016AF6 0028 0004 0001             		ori.b	#4,1(a0)
00016AFC 1168 0001 0022             		move.b	1(a0),$22(a0)
00016B02 117C 0004 0018             		move.b	#4,$18(a0)
00016B08 117C 0008 0019             		move.b	#8,$19(a0)
00016B0E 117C 000B 0020             		move.b	#$B,$20(a0)
00016B14 3428 0008                  		move.w	8(a0),d2
00016B18 7A0C                       		moveq	#$C,d5
00016B1A 0828 0000 0022             		btst	#0,$22(a0)
00016B20 6700                       		beq.s	loc_169CA
00016B22 4445                       		neg.w	d5
00016B24                            
00016B24                            loc_169CA:
00016B24 1C3C 0004                  		move.b	#4,d6
00016B28 7600                       		moveq	#0,d3
00016B2A 7804                       		moveq	#4,d4
00016B2C 2448                       		movea.l	a0,a2
00016B2E 7202                       		moveq	#2,d1
00016B30                            
00016B30                            Obj78_LoadBody:
00016B30 4EB9 0000 DC18             		jsr	SingleObjLoad2
00016B36 6600                       		bne.s	Obj78_QuitLoad
00016B38 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00016B3C 1346 0024                  		move.b	d6,$24(a1)
00016B40 5406                       		addq.b	#2,d6
00016B42 2368 0004 0004             		move.l	4(a0),4(a1)
00016B48 3368 0002 0002             		move.w	2(a0),2(a1)
00016B4E 137C 0005 0018             		move.b	#5,$18(a1)
00016B54 137C 0008 0019             		move.b	#8,$19(a1)
00016B5A 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016B60 D445                       		add.w	d5,d2
00016B62 3342 0008                  		move.w	d2,8(a1)
00016B66 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016B6C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016B72 1368 0022 0001             		move.b	$22(a0),1(a1)
00016B78 137C 0008 001A             		move.b	#8,$1A(a1)
00016B7E 234A 003C                  		move.l	a2,$3C(a1)
00016B82 1344 003C                  		move.b	d4,$3C(a1)
00016B86 5804                       		addq.b	#4,d4
00016B88 2449                       		movea.l	a1,a2
00016B8A                            
00016B8A                            Obj78_QuitLoad:
00016B8A 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00016B8E                            
00016B8E 117C 0007 002A             		move.b	#7,$2A(a0)
00016B94 4228 003C                  		clr.b	$3C(a0)
00016B98                            
00016B98                            Obj78_Action:				; XREF: Obj78_Index
00016B98 4A28 0022                  		tst.b	$22(a0)
00016B9C 6B00 0000                  		bmi.w	loc_16C96
00016BA0 7000                       		moveq	#0,d0
00016BA2 1028 0025                  		move.b	$25(a0),d0
00016BA6 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00016BAA 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00016BAE 1228 002B                  		move.b	$2B(a0),d1
00016BB2 6A00                       		bpl.s	Obj78_Display
00016BB4 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016BBA 1028 0026                  		move.b	$26(a0),d0
00016BBE 0240 007F                  		andi.w	#$7F,d0
00016BC2 5828 0026                  		addq.b	#4,$26(a0)
00016BC6 1031 0000                  		move.b	(a1,d0.w),d0
00016BCA 6A00                       		bpl.s	Obj78_AniHead
00016BCC 08A8 0007 002B             		bclr	#7,$2B(a0)
00016BD2 6000                       		bra.s	Obj78_Display
00016BD4                            ; ===========================================================================
00016BD4                            
00016BD4                            Obj78_AniHead:
00016BD4 0201 0010                  		andi.b	#$10,d1
00016BD8 D001                       		add.b	d1,d0
00016BDA 1140 001A                  		move.b	d0,$1A(a0)
00016BDE                            
00016BDE                            Obj78_Display:
00016BDE 3028 0008                  		move.w	8(a0),d0
00016BE2 0240 FF80                  		andi.w	#$FF80,d0
00016BE6 3238 F700                  		move.w	($FFFFF700).w,d1
00016BEA 0441 0080                  		subi.w	#$80,d1
00016BEE 0241 FF80                  		andi.w	#$FF80,d1
00016BF2 9041                       		sub.w	d1,d0
00016BF4 0C40 0280                  		cmpi.w	#$280,d0
00016BF8 6200 0000                  		bhi.w	Obj78_ChkGone
00016BFC 4EF9 0000 D77C             		jmp	DisplaySprite
00016C02                            ; ===========================================================================
00016C02                            
00016C02                            Obj78_ChkGone:
00016C02 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016C06 7000                       		moveq	#0,d0
00016C08 1028 0023                  		move.b	$23(a0),d0
00016C0C 6700                       		beq.s	loc_16ABC
00016C0E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016C14                            
00016C14                            loc_16ABC:
00016C14 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00016C1A 4E75                       		rts	
00016C1C                            ; ===========================================================================
00016C1C                            
00016C1C                            Obj78_Delete:				; XREF: Obj78_Index
00016C1C 4EF9 0000 D7B8             		jmp	DeleteObject
00016C22                            ; ===========================================================================
00016C22 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00016C24 0000                       		dc.w loc_16B02-Obj78_Index2
00016C26                            ; ===========================================================================
00016C26                            
00016C26                            Obj78_Move:				; XREF: Obj78_Index2
00016C26 5328 002A                  		subq.b	#1,$2A(a0)
00016C2A 6B00                       		bmi.s	Obj78_Move2
00016C2C 4E75                       		rts	
00016C2E                            ; ===========================================================================
00016C2E                            
00016C2E                            Obj78_Move2:
00016C2E 5428 0025                  		addq.b	#2,$25(a0)
00016C32 117C 0010 002A             		move.b	#$10,$2A(a0)
00016C38 317C FF40 0010             		move.w	#-$C0,$10(a0)
00016C3E 317C 0040 0014             		move.w	#$40,$14(a0)
00016C44 0868 0004 002B             		bchg	#4,$2B(a0)
00016C4A 6600                       		bne.s	loc_16AFC
00016C4C 4268 0010                  		clr.w	$10(a0)
00016C50 4468 0014                  		neg.w	$14(a0)
00016C54                            
00016C54                            loc_16AFC:
00016C54 08E8 0007 002B             		bset	#7,$2B(a0)
00016C5A                            
00016C5A                            loc_16B02:				; XREF: Obj78_Index2
00016C5A 5328 002A                  		subq.b	#1,$2A(a0)
00016C5E 6B00                       		bmi.s	loc_16B5E
00016C60 2F28 0008                  		move.l	8(a0),-(sp)
00016C64 2428 0008                  		move.l	8(a0),d2
00016C68 3028 0010                  		move.w	$10(a0),d0
00016C6C 0828 0000 0022             		btst	#0,$22(a0)
00016C72 6700                       		beq.s	loc_16B1E
00016C74 4440                       		neg.w	d0
00016C76                            
00016C76                            loc_16B1E:
00016C76 48C0                       		ext.l	d0
00016C78 E180                       		asl.l	#8,d0
00016C7A D480                       		add.l	d0,d2
00016C7C 2142 0008                  		move.l	d2,8(a0)
00016C80 4EBA E2F6                  		jsr	ObjHitFloor
00016C84 241F                       		move.l	(sp)+,d2
00016C86 0C41 FFF8                  		cmpi.w	#-8,d1
00016C8A 6D00                       		blt.s	loc_16B70
00016C8C 0C41 000C                  		cmpi.w	#$C,d1
00016C90 6C00                       		bge.s	loc_16B70
00016C92 D368 000C                  		add.w	d1,$C(a0)
00016C96 4842                       		swap	d2
00016C98 B468 0008                  		cmp.w	8(a0),d2
00016C9C 6700                       		beq.s	locret_16B5C
00016C9E 7000                       		moveq	#0,d0
00016CA0 1028 003C                  		move.b	$3C(a0),d0
00016CA4 5228 003C                  		addq.b	#1,$3C(a0)
00016CA8 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016CAE 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016CB2                            
00016CB2                            locret_16B5C:
00016CB2 4E75                       		rts	
00016CB4                            ; ===========================================================================
00016CB4                            
00016CB4                            loc_16B5E:
00016CB4 5528 0025                  		subq.b	#2,$25(a0)
00016CB8 117C 0007 002A             		move.b	#7,$2A(a0)
00016CBE 317C 0000 0010             		move.w	#0,$10(a0)
00016CC4 4E75                       		rts	
00016CC6                            ; ===========================================================================
00016CC6                            
00016CC6                            loc_16B70:
00016CC6 2142 0008                  		move.l	d2,8(a0)
00016CCA 0868 0000 0022             		bchg	#0,$22(a0)
00016CD0 1168 0022 0001             		move.b	$22(a0),1(a0)
00016CD6 7000                       		moveq	#0,d0
00016CD8 1028 003C                  		move.b	$3C(a0),d0
00016CDC 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00016CE2 5228 003C                  		addq.b	#1,$3C(a0)
00016CE6 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016CEC 4E75                       		rts	
00016CEE                            ; ===========================================================================
00016CEE                            
00016CEE                            Obj78_BodySeg2:				; XREF: Obj78_Index
00016CEE 2268 003C                  		movea.l	$3C(a0),a1
00016CF2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016CF8 6A00                       		bpl.s	Obj78_BodySeg1
00016CFA 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016D00 1028 0026                  		move.b	$26(a0),d0
00016D04 0240 007F                  		andi.w	#$7F,d0
00016D08 5828 0026                  		addq.b	#4,$26(a0)
00016D0C 4A31 0004                  		tst.b	4(a1,d0.w)
00016D10 6A00                       		bpl.s	Obj78_AniBody
00016D12 5828 0026                  		addq.b	#4,$26(a0)
00016D16                            
00016D16                            Obj78_AniBody:
00016D16 1031 0000                  		move.b	(a1,d0.w),d0
00016D1A 5000                       		addq.b	#8,d0
00016D1C 1140 001A                  		move.b	d0,$1A(a0)
00016D20                            
00016D20                            Obj78_BodySeg1:				; XREF: Obj78_Index
00016D20 2268 003C                  		movea.l	$3C(a0),a1
00016D24 4A28 0022                  		tst.b	$22(a0)
00016D28 6B00 0000                  		bmi.w	loc_16C90
00016D2C 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016D32 1169 0025 0025             		move.b	$25(a1),$25(a0)
00016D38 6700 0000                  		beq.w	loc_16C64
00016D3C 3169 0014 0014             		move.w	$14(a1),$14(a0)
00016D42 3029 0010                  		move.w	$10(a1),d0
00016D46 D069 0014                  		add.w	$14(a1),d0
00016D4A 3140 0010                  		move.w	d0,$10(a0)
00016D4E 2428 0008                  		move.l	8(a0),d2
00016D52 2602                       		move.l	d2,d3
00016D54 3028 0010                  		move.w	$10(a0),d0
00016D58 0828 0000 0022             		btst	#0,$22(a0)
00016D5E 6700                       		beq.s	loc_16C0C
00016D60 4440                       		neg.w	d0
00016D62                            
00016D62                            loc_16C0C:
00016D62 48C0                       		ext.l	d0
00016D64 E180                       		asl.l	#8,d0
00016D66 D480                       		add.l	d0,d2
00016D68 2142 0008                  		move.l	d2,8(a0)
00016D6C 4843                       		swap	d3
00016D6E B668 0008                  		cmp.w	8(a0),d3
00016D72 6700                       		beq.s	loc_16C64
00016D74 7000                       		moveq	#0,d0
00016D76 1028 003C                  		move.b	$3C(a0),d0
00016D7A 1231 002C                  		move.b	$2C(a1,d0.w),d1
00016D7E 0C01 0080                  		cmpi.b	#-$80,d1
00016D82 6600                       		bne.s	loc_16C50
00016D84 4843                       		swap	d3
00016D86 2143 0008                  		move.l	d3,8(a0)
00016D8A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016D8E 0868 0000 0022             		bchg	#0,$22(a0)
00016D94 1168 0022 0001             		move.b	$22(a0),1(a0)
00016D9A 5228 003C                  		addq.b	#1,$3C(a0)
00016D9E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016DA4 6000                       		bra.s	loc_16C64
00016DA6                            ; ===========================================================================
00016DA6                            
00016DA6                            loc_16C50:
00016DA6 4881                       		ext.w	d1
00016DA8 D368 000C                  		add.w	d1,$C(a0)
00016DAC 5228 003C                  		addq.b	#1,$3C(a0)
00016DB0 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016DB6 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016DBA                            
00016DBA                            loc_16C64:
00016DBA 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00016DC0 6700                       		beq.s	loc_16C90
00016DC2 0C11 0027                  		cmpi.b	#$27,0(a1)
00016DC6 6700                       		beq.s	loc_16C7C
00016DC8 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00016DCE 6600                       		bne.s	loc_16C82
00016DD0                            
00016DD0                            loc_16C7C:
00016DD0 117C 000A 0024             		move.b	#$A,$24(a0)
00016DD6                            
00016DD6                            loc_16C82:
00016DD6 4EF9 0000 D77C             		jmp	DisplaySprite
00016DDC                            
00016DDC                            ; ===========================================================================
00016DDC FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00016DE4                            ; ===========================================================================
00016DE4                            
00016DE4                            loc_16C90:
00016DE4 08E9 0007 0022             		bset	#7,$22(a1)
00016DEA                            
00016DEA                            loc_16C96:
00016DEA 7000                       		moveq	#0,d0
00016DEC 1028 0024                  		move.b	$24(a0),d0
00016DF0 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00016DF4 0828 0000 0022             		btst	#0,$22(a0)
00016DFA 6700                       		beq.s	loc_16CAA
00016DFC 4440                       		neg.w	d0
00016DFE                            
00016DFE                            loc_16CAA:
00016DFE 3140 0010                  		move.w	d0,$10(a0)
00016E02 317C FC00 0012             		move.w	#-$400,$12(a0)
00016E08 117C 000C 0024             		move.b	#$C,$24(a0)
00016E0E 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00016E14                            
00016E14                            loc_16CC0:				; XREF: Obj78_Index
00016E14 4EB9 0000 D72A             		jsr	ObjectFall
00016E1A 4A68 0012                  		tst.w	$12(a0)
00016E1E 6B00                       		bmi.s	loc_16CE0
00016E20 4EBA E156                  		jsr	ObjHitFloor
00016E24 4A41                       		tst.w	d1
00016E26 6A00                       		bpl.s	loc_16CE0
00016E28 D368 000C                  		add.w	d1,$C(a0)
00016E2C 317C FC00 0012             		move.w	#-$400,$12(a0)
00016E32                            
00016E32                            loc_16CE0:
00016E32 4A28 0001                  		tst.b	1(a0)
00016E36 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00016E3A 4EF9 0000 D77C             		jmp	DisplaySprite
00016E40                            ; ===========================================================================
00016E40                            Ani_obj78:
00016E40                            	include "_anim\obj78.asm"
00016E40                            ; ---------------------------------------------------------------------------
00016E40                            ; Animation script - Caterkiller enemy (uses non-standard format)
00016E40                            ; ---------------------------------------------------------------------------
00016E40 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00016E50 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00016E60 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00016E70 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00016E80 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00016E90 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00016EA0 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00016EB0 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00016EC0                            	even
00016EC0                            	even
00016EC0                            
00016EC0                            ; ---------------------------------------------------------------------------
00016EC0                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016EC0                            ; ---------------------------------------------------------------------------
00016EC0                            Map_obj78:
00016EC0                            	include "_maps\obj78.asm"
00016EC0                            ; ---------------------------------------------------------------------------
00016EC0                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016EC0                            ; ---------------------------------------------------------------------------
00016EC0 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00016EC4 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00016EC8 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00016ECC 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00016ED0 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00016ED4 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00016ED8 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00016EDC 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00016EE0 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00016EE4 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00016EE8 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00016EEC 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00016EF0 01                         byte_16D9E:	dc.b 1
00016EF1 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00016EF6 01                         byte_16DA4:	dc.b 1
00016EF7 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00016EFC 01                         byte_16DAA:	dc.b 1
00016EFD F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00016F02 01                         byte_16DB0:	dc.b 1
00016F03 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00016F08 01                         byte_16DB6:	dc.b 1
00016F09 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00016F0E 01                         byte_16DBC:	dc.b 1
00016F0F ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00016F14 01                         byte_16DC2:	dc.b 1
00016F15 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00016F1A 01                         byte_16DC8:	dc.b 1
00016F1B EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00016F20 01                         byte_16DCE:	dc.b 1
00016F21 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00016F26 01                         byte_16DD4:	dc.b 1
00016F27 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00016F2C 01                         byte_16DDA:	dc.b 1
00016F2D F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00016F32 01                         byte_16DE0:	dc.b 1
00016F33 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00016F38 01                         byte_16DE6:	dc.b 1
00016F39 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00016F3E 01                         byte_16DEC:	dc.b 1
00016F3F F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00016F44 01                         byte_16DF2:	dc.b 1
00016F45 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00016F4A 01                         byte_16DF8:	dc.b 1
00016F4B F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00016F50 01                         byte_16DFE:	dc.b 1
00016F51 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00016F56 01                         byte_16E04:	dc.b 1
00016F57 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00016F5C 01                         byte_16E0A:	dc.b 1
00016F5D F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00016F62 01                         byte_16E10:	dc.b 1
00016F63 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00016F68 01                         byte_16E16:	dc.b 1
00016F69 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00016F6E 01                         byte_16E1C:	dc.b 1
00016F6F ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00016F74 01                         byte_16E22:	dc.b 1
00016F75 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00016F7A 01                         byte_16E28:	dc.b 1
00016F7B EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00016F80                            		even
00016F80                            		even
00016F80                            
00016F80                            ; ===========================================================================
00016F80                            ; ---------------------------------------------------------------------------
00016F80                            ; Object 79 - lamppost
00016F80                            ; ---------------------------------------------------------------------------
00016F80                            
00016F80                            Obj79:					; XREF: Obj_Index
00016F80 7000                       		moveq	#0,d0
00016F82 1028 0024                  		move.b	$24(a0),d0
00016F86 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00016F8A 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00016F8E 4EFA 8894                  		jmp	MarkObjGone
00016F92                            ; ===========================================================================
00016F92 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00016F94 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00016F96 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00016F98 0000                       		dc.w Obj79_Twirl-Obj79_Index
00016F9A                            ; ===========================================================================
00016F9A                            
00016F9A                            Obj79_Main:				; XREF: Obj79_Index
00016F9A 5428 0024                  		addq.b	#2,$24(a0)
00016F9E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00016FA6 317C 07A0 0002             		move.w	#$7A0,2(a0)
00016FAC 117C 0004 0001             		move.b	#4,1(a0)
00016FB2 117C 0008 0019             		move.b	#8,$19(a0)
00016FB8 117C 0005 0018             		move.b	#5,$18(a0)
00016FBE 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016FC2 7000                       		moveq	#0,d0
00016FC4 1028 0023                  		move.b	$23(a0),d0
00016FC8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016FCE 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016FD4 6600                       		bne.s	Obj79_RedLamp
00016FD6 1238 FE30                  		move.b	($FFFFFE30).w,d1
00016FDA 0201 007F                  		andi.b	#$7F,d1
00016FDE 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00016FE2 0202 007F                  		andi.b	#$7F,d2
00016FE6 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00016FE8 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00016FEA                            
00016FEA                            Obj79_RedLamp:
00016FEA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016FF0 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00016FF6 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00016FFC 4E75                       		rts	
00016FFE                            ; ===========================================================================
00016FFE                            
00016FFE                            Obj79_BlueLamp:				; XREF: Obj79_Index
00016FFE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00017002 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00017006 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0001700A 6B00 0000                  		bmi.w	locret_16F90
0001700E 1238 FE30                  		move.b	($FFFFFE30).w,d1
00017012 0201 007F                  		andi.b	#$7F,d1
00017016 1428 0028                  		move.b	$28(a0),d2
0001701A 0202 007F                  		andi.b	#$7F,d2
0001701E B202                       		cmp.b	d2,d1
00017020 6500                       		bcs.s	Obj79_HitLamp
00017022 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017026 7000                       		moveq	#0,d0
00017028 1028 0023                  		move.b	$23(a0),d0
0001702C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017032 117C 0004 0024             		move.b	#4,$24(a0)
00017038 117C 0003 001A             		move.b	#3,$1A(a0)
0001703E 6000 0000                  		bra.w	locret_16F90
00017042                            ; ===========================================================================
00017042                            
00017042                            Obj79_HitLamp:
00017042 3038 D008                  		move.w	($FFFFD008).w,d0
00017046 9068 0008                  		sub.w	8(a0),d0
0001704A 5040                       		addq.w	#8,d0
0001704C 0C40 0010                  		cmpi.w	#$10,d0
00017050 6400 0000                  		bcc.w	locret_16F90
00017054 3038 D00C                  		move.w	($FFFFD00C).w,d0
00017058 9068 000C                  		sub.w	$C(a0),d0
0001705C 0640 0040                  		addi.w	#$40,d0
00017060 0C40 0068                  		cmpi.w	#$68,d0
00017064 6400                       		bcc.s	locret_16F90
00017066 303C 00A1                  		move.w	#$A1,d0
0001706A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lamppost sound
00017070 5428 0024                  		addq.b	#2,$24(a0)
00017074 4EB9 0000 DC02             		jsr	SingleObjLoad
0001707A 6600                       		bne.s	loc_16F76
0001707C 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00017080 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00017086 3368 0008 0030             		move.w	8(a0),$30(a1)
0001708C 3368 000C 0032             		move.w	$C(a0),$32(a1)
00017092 0469 0018 0032             		subi.w	#$18,$32(a1)
00017098 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
000170A0 337C 07A0 0002             		move.w	#$7A0,2(a1)
000170A6 137C 0004 0001             		move.b	#4,1(a1)
000170AC 137C 0008 0019             		move.b	#8,$19(a1)
000170B2 137C 0004 0018             		move.b	#4,$18(a1)
000170B8 137C 0002 001A             		move.b	#2,$1A(a1)
000170BE 337C 0020 0036             		move.w	#$20,$36(a1)
000170C4                            
000170C4                            loc_16F76:
000170C4 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000170CA 6100 0000                  		bsr.w	Obj79_StoreInfo
000170CE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000170D2 7000                       		moveq	#0,d0
000170D4 1028 0023                  		move.b	$23(a0),d0
000170D8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000170DE                            
000170DE                            locret_16F90:
000170DE 4E75                       		rts	
000170E0                            ; ===========================================================================
000170E0                            
000170E0                            Obj79_AfterHit:				; XREF: Obj79_Index
000170E0 4E75                       		rts	
000170E2                            ; ===========================================================================
000170E2                            
000170E2                            Obj79_Twirl:				; XREF: Obj79_Index
000170E2 5368 0036                  		subq.w	#1,$36(a0)
000170E6 6A00                       		bpl.s	loc_16FA0
000170E8 117C 0004 0024             		move.b	#4,$24(a0)
000170EE                            
000170EE                            loc_16FA0:
000170EE 1028 0026                  		move.b	$26(a0),d0
000170F2 0428 0010 0026             		subi.b	#$10,$26(a0)
000170F8 0400 0040                  		subi.b	#$40,d0
000170FC 4EB9 0000 29DA             		jsr	(CalcSine).l
00017102 C3FC 0C00                  		muls.w	#$C00,d1
00017106 4841                       		swap	d1
00017108 D268 0030                  		add.w	$30(a0),d1
0001710C 3141 0008                  		move.w	d1,8(a0)
00017110 C1FC 0C00                  		muls.w	#$C00,d0
00017114 4840                       		swap	d0
00017116 D068 0032                  		add.w	$32(a0),d0
0001711A 3140 000C                  		move.w	d0,$C(a0)
0001711E 4E75                       		rts	
00017120                            ; ===========================================================================
00017120                            ; ---------------------------------------------------------------------------
00017120                            ; Subroutine to	store information when you hit a lamppost
00017120                            ; ---------------------------------------------------------------------------
00017120                            
00017120                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00017120 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00017126 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
0001712C 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00017132 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00017138 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
0001713E 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00017144 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
0001714A 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00017150 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00017156 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
0001715C 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00017162 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00017168 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
0001716E 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00017174 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
0001717A 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00017180 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00017186 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
0001718C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00017192 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00017198 4E75                       		rts	
0001719A                            
0001719A                            ; ---------------------------------------------------------------------------
0001719A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
0001719A                            ; ---------------------------------------------------------------------------
0001719A                            
0001719A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001719A                            
0001719A                            
0001719A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
0001719A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
000171A0 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
000171A6 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
000171AC 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
000171B2 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000171B8 4278 FE20                  		clr.w	($FFFFFE20).w
000171BC 4238 FE1B                  		clr.b	($FFFFFE1B).w
000171C0 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000171C6 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000171CC 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000171D0 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000171D6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000171DC 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000171E2 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000171E8 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000171EE 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000171F4 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000171FA 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00017200 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00017206 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
0001720C 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00017212 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00017218 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0001721E 6600                       		bne.s	loc_170E4
00017220 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00017226 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
0001722C 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017232                            
00017232                            loc_170E4:
00017232 4A38 FE30                  		tst.b	($FFFFFE30).w
00017236 6A00                       		bpl.s	locret_170F6
00017238 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001723C 0440 00A0                  		subi.w	#$A0,d0
00017240 31C0 F728                  		move.w	d0,($FFFFF728).w
00017244                            
00017244                            locret_170F6:
00017244 4E75                       		rts	
00017246                            ; End of function Obj79_LoadInfo
00017246                            
00017246                            ; ===========================================================================
00017246                            ; ---------------------------------------------------------------------------
00017246                            ; Sprite mappings - lamppost
00017246                            ; ---------------------------------------------------------------------------
00017246                            Map_obj79:
00017246                            	include "_maps\obj79.asm"
00017246                            ; ---------------------------------------------------------------------------
00017246                            ; Sprite mappings - lamppost
00017246                            ; ---------------------------------------------------------------------------
00017246 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001724A 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001724E 06                         byte_17100:	dc.b 6
0001724F E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017254 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017259 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001725E F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017263 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017268 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
0001726D 04                         byte_1711F:	dc.b 4
0001726E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017273 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017278 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001727D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017282 02                         byte_17134:	dc.b 2
00017283 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017288 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001728D 06                         byte_1713F:	dc.b 6
0001728E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017293 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017298 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001729D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
000172A2 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
000172A7 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
000172AC                            		even
000172AC                            		even
000172AC                            
000172AC                            ; ===========================================================================
000172AC                            ; ---------------------------------------------------------------------------
000172AC                            ; Object 7D - hidden points at the end of a level
000172AC                            ; ---------------------------------------------------------------------------
000172AC                            
000172AC                            Obj7D:					; XREF: Obj_Index
000172AC 7000                       		moveq	#0,d0
000172AE 1028 0024                  		move.b	$24(a0),d0
000172B2 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
000172B6 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000172BA                            ; ===========================================================================
000172BA 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000172BC 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000172BE                            ; ===========================================================================
000172BE                            
000172BE                            Obj7D_Main:				; XREF: Obj7D_Index
000172BE 7410                       		moveq	#$10,d2
000172C0 3602                       		move.w	d2,d3
000172C2 D643                       		add.w	d3,d3
000172C4 43F8 D000                  		lea	($FFFFD000).w,a1
000172C8 3029 0008                  		move.w	8(a1),d0
000172CC 9068 0008                  		sub.w	8(a0),d0
000172D0 D042                       		add.w	d2,d0
000172D2 B043                       		cmp.w	d3,d0
000172D4 6400                       		bcc.s	Obj7D_ChkDel
000172D6 3229 000C                  		move.w	$C(a1),d1
000172DA 9268 000C                  		sub.w	$C(a0),d1
000172DE D242                       		add.w	d2,d1
000172E0 B243                       		cmp.w	d3,d1
000172E2 6400                       		bcc.s	Obj7D_ChkDel
000172E4 4A78 FE08                  		tst.w	($FFFFFE08).w
000172E8 6600                       		bne.s	Obj7D_ChkDel
000172EA 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000172EE 6600                       		bne.s	Obj7D_ChkDel
000172F0 5428 0024                  		addq.b	#2,$24(a0)
000172F4 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000172FC 317C 84B6 0002             		move.w	#$84B6,2(a0)
00017302 0028 0004 0001             		ori.b	#4,1(a0)
00017308 117C 0000 0018             		move.b	#0,$18(a0)
0001730E 117C 0010 0019             		move.b	#$10,$19(a0)
00017314 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0001731A 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00017320 303C 00C9                  		move.w	#$C9,d0
00017324 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play bonus sound
0001732A 7000                       		moveq	#0,d0
0001732C 1028 0028                  		move.b	$28(a0),d0
00017330 D040                       		add.w	d0,d0
00017332 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017336 4EB9 0000 0000             		jsr	AddPoints
0001733C                            
0001733C                            Obj7D_ChkDel:
0001733C 3028 0008                  		move.w	8(a0),d0
00017340 0240 FF80                  		andi.w	#$FF80,d0
00017344 3238 F700                  		move.w	($FFFFF700).w,d1
00017348 0441 0080                  		subi.w	#$80,d1
0001734C 0241 FF80                  		andi.w	#$FF80,d1
00017350 9041                       		sub.w	d1,d0
00017352 0C40 0280                  		cmpi.w	#$280,d0
00017356 6200                       		bhi.s	Obj7D_Delete
00017358 4E75                       		rts	
0001735A                            ; ===========================================================================
0001735A                            
0001735A                            Obj7D_Delete:
0001735A 4EF9 0000 D7B8             		jmp	DeleteObject
00017360                            ; ===========================================================================
00017360 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017362 03E8                       		dc.w 1000
00017364 0064                       		dc.w 100
00017366 0001                       		dc.w 1
00017368                            ; ===========================================================================
00017368                            
00017368                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017368 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001736C 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001736E 3028 0008                  		move.w	8(a0),d0
00017372 0240 FF80                  		andi.w	#-$80,d0
00017376 3238 F700                  		move.w	($FFFFF700).w,d1
0001737A 0441 0080                  		subi.w	#$80,d1
0001737E 0241 FF80                  		andi.w	#-$80,d1
00017382 9041                       		sub.w	d1,d0
00017384 0C40 0280                  		cmpi.w	#$280,d0
00017388 6200                       		bhi.s	Obj7D_Delete2
0001738A 4EF9 0000 D77C             		jmp	DisplaySprite
00017390                            ; ===========================================================================
00017390                            
00017390                            Obj7D_Delete2:
00017390 4EF9 0000 D7B8             		jmp	DeleteObject
00017396                            ; ===========================================================================
00017396                            ; ---------------------------------------------------------------------------
00017396                            ; Sprite mappings - hidden points at the end of	a level
00017396                            ; ---------------------------------------------------------------------------
00017396                            Map_obj7D:
00017396                            	include "_maps\obj7D.asm"
00017396                            ; ---------------------------------------------------------------------------
00017396                            ; Sprite mappings - hidden points at the end of	a level
00017396                            ; ---------------------------------------------------------------------------
00017396 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001739A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001739E 00                         byte_17250:	dc.b 0
0001739F 01                         byte_17251:	dc.b 1
000173A0 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
000173A5 01                         byte_17257:	dc.b 1
000173A6 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
000173AB 01                         byte_1725D:	dc.b 1
000173AC F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
000173B2 00                         		even
000173B2 00                         		even
000173B2                            
000173B2                            ; ===========================================================================
000173B2                            ; ---------------------------------------------------------------------------
000173B2                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
000173B2                            ; ---------------------------------------------------------------------------
000173B2                            
000173B2                            Obj8A:					; XREF: Obj_Index
000173B2 7000                       		moveq	#0,d0
000173B4 1028 0024                  		move.b	$24(a0),d0
000173B8 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000173BC 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000173C0                            ; ===========================================================================
000173C0 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000173C2 0000                       		dc.w Obj8A_Display-Obj8A_Index
000173C4                            ; ===========================================================================
000173C4                            
000173C4                            Obj8A_Main:				; XREF: Obj8A_Index
000173C4 5428 0024                  		addq.b	#2,$24(a0)
000173C8 317C 0120 0008             		move.w	#$120,8(a0)
000173CE 317C 00F0 000A             		move.w	#$F0,$A(a0)
000173D4 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000173DC 317C 05A0 0002             		move.w	#$5A0,2(a0)
000173E2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000173E6 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000173EA 117C 0000 0001             		move.b	#0,1(a0)
000173F0 117C 0000 0018             		move.b	#0,$18(a0)
000173F6 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000173FC 6600                       		bne.s	Obj8A_Display	; if not, branch
000173FE 317C 00A6 0002             		move.w	#$A6,2(a0)
00017404 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
0001740A 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
0001740E 6700                       		beq.s	Obj8A_Display	; if not, branch
00017410 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
00017416 6600                       		bne.s	Obj8A_Display	; if not, branch
00017418 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
0001741E 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
00017424 4EF9 0000 D7B8             		jmp	DeleteObject
0001742A                            ; ===========================================================================
0001742A                            
0001742A                            Obj8A_Display:				; XREF: Obj8A_Index
0001742A 4EF9 0000 D77C             		jmp	DisplaySprite
00017430                            ; ===========================================================================
00017430                            ; ---------------------------------------------------------------------------
00017430                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017430                            ; ---------------------------------------------------------------------------
00017430                            Map_obj8A:
00017430                            	include "_maps\obj8A.asm"
00017430                            ; --------------------------------------------------------------------------------
00017430                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
00017430                            ; --------------------------------------------------------------------------------
00017430                            
00017430                            SME_MD8yg:	
00017430 0000 0000                  		dc.w SME_MD8yg_16-SME_MD8yg, SME_MD8yg_5D-SME_MD8yg	
00017434 0000 0000                  		dc.w SME_MD8yg_AE-SME_MD8yg, SME_MD8yg_E1-SME_MD8yg	
00017438 0000 0000                  		dc.w SME_MD8yg_15A-SME_MD8yg, SME_MD8yg_1BF-SME_MD8yg	
0001743C 0000 0000                  		dc.w SME_MD8yg_242-SME_MD8yg, SME_MD8yg_2B6-SME_MD8yg	
00017440 0000 0000                  		dc.w SME_MD8yg_352-SME_MD8yg, SME_MD8yg_39E-SME_MD8yg	
00017444 0000                       		dc.w SME_MD8yg_3C7-SME_MD8yg	
00017446 0E                         SME_MD8yg_16:	dc.b $E	
00017447 F805 802E 88               		dc.b $F8, 5, $80, $2E, $88	
0001744C F805 8026 98               		dc.b $F8, 5, $80, $26, $98	
00017451 F805 801A A8               		dc.b $F8, 5, $80, $1A, $A8	
00017456 F801 8046 B8               		dc.b $F8, 1, $80, $46, $B8	
0001745B F805 801E C0               		dc.b $F8, 5, $80, $1E, $C0	
00017460 F805 803E D8               		dc.b $F8, 5, $80, $3E, $D8	
00017465 F805 800E E8               		dc.b $F8, 5, $80, $E, $E8	
0001746A F805 8004 F8               		dc.b $F8, 5, $80, 4, $F8	
0001746F F809 8008 08               		dc.b $F8, 9, $80, 8, 8	
00017474 F805 802E 28               		dc.b $F8, 5, $80, $2E, $28	
00017479 F805 803E 38               		dc.b $F8, 5, $80, $3E, $38	
0001747E F805 8004 48               		dc.b $F8, 5, $80, 4, $48	
00017483 F805 805C 58               		dc.b $F8, 5, $80, $5C, $58	
00017488 F805 805C 68               		dc.b $F8, 5, $80, $5C, $68	
0001748D 10                         SME_MD8yg_5D:	dc.b $10	
0001748E D805 0000 80               		dc.b $D8, 5, 0, 0, $80	
00017493 D805 0004 90               		dc.b $D8, 5, 0, 4, $90	
00017498 D809 0008 A0               		dc.b $D8, 9, 0, 8, $A0	
0001749D D805 000E B4               		dc.b $D8, 5, 0, $E, $B4	
000174A2 D805 0012 D0               		dc.b $D8, 5, 0, $12, $D0	
000174A7 D805 0016 E0               		dc.b $D8, 5, 0, $16, $E0	
000174AC D805 0004 F0               		dc.b $D8, 5, 0, 4, $F0	
000174B1 D805 001A 00               		dc.b $D8, 5, 0, $1A, 0	
000174B6 0805 001E C8               		dc.b 8, 5, 0, $1E, $C8	
000174BB 0805 0004 D8               		dc.b 8, 5, 0, 4, $D8	
000174C0 0805 0022 E8               		dc.b 8, 5, 0, $22, $E8	
000174C5 0805 0026 F8               		dc.b 8, 5, 0, $26, $F8	
000174CA 0805 0016 08               		dc.b 8, 5, 0, $16, 8	
000174CF 0805 002A 20               		dc.b 8, 5, 0, $2A, $20	
000174D4 0805 0004 30               		dc.b 8, 5, 0, 4, $30	
000174D9 0805 002E 44               		dc.b 8, 5, 0, $2E, $44	
000174DE 0A                         SME_MD8yg_AE:	dc.b $A	
000174DF D805 0012 80               		dc.b $D8, 5, 0, $12, $80	
000174E4 D805 0022 90               		dc.b $D8, 5, 0, $22, $90	
000174E9 D805 0026 A0               		dc.b $D8, 5, 0, $26, $A0	
000174EE D805 0000 B0               		dc.b $D8, 5, 0, 0, $B0	
000174F3 D805 0022 C0               		dc.b $D8, 5, 0, $22, $C0	
000174F8 D805 0004 D0               		dc.b $D8, 5, 0, 4, $D0	
000174FD D809 0008 E0               		dc.b $D8, 9, 0, 8, $E0	
00017502 0805 002A E8               		dc.b 8, 5, 0, $2A, $E8	
00017507 0805 0032 F8               		dc.b 8, 5, 0, $32, $F8	
0001750C 0805 0036 08               		dc.b 8, 5, 0, $36, 8	
00017511 18                         SME_MD8yg_E1:	dc.b $18	
00017512 D805 001E 88               		dc.b $D8, 5, 0, $1E, $88	
00017517 D805 003A 98               		dc.b $D8, 5, 0, $3A, $98	
0001751C D805 0004 A8               		dc.b $D8, 5, 0, 4, $A8	
00017521 D805 0022 B8               		dc.b $D8, 5, 0, $22, $B8	
00017526 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
0001752B D805 001E D8               		dc.b $D8, 5, 0, $1E, $D8	
00017530 D805 003E E8               		dc.b $D8, 5, 0, $3E, $E8	
00017535 D805 000E F8               		dc.b $D8, 5, 0, $E, $F8	
0001753A D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
0001753F D805 0042 20               		dc.b $D8, 5, 0, $42, $20	
00017544 D805 000E 30               		dc.b $D8, 5, 0, $E, $30	
00017549 D805 002E 40               		dc.b $D8, 5, 0, $2E, $40	
0001754E D801 0046 50               		dc.b $D8, 1, 0, $46, $50	
00017553 D805 0000 58               		dc.b $D8, 5, 0, 0, $58	
00017558 D805 001A 68               		dc.b $D8, 5, 0, $1A, $68	
0001755D 0805 0048 C0               		dc.b 8, 5, 0, $48, $C0	
00017562 0801 0046 D0               		dc.b 8, 1, 0, $46, $D0	
00017567 0805 0000 D8               		dc.b 8, 5, 0, 0, $D8	
0001756C 0801 0046 E8               		dc.b 8, 1, 0, $46, $E8	
00017571 0805 002E F0               		dc.b 8, 5, 0, $2E, $F0	
00017576 0805 0016 00               		dc.b 8, 5, 0, $16, 0	
0001757B 0805 0004 10               		dc.b 8, 5, 0, 4, $10	
00017580 0805 001A 20               		dc.b 8, 5, 0, $1A, $20	
00017585 0805 0042 30               		dc.b 8, 5, 0, $42, $30	
0001758A 14                         SME_MD8yg_15A:	dc.b $14	
0001758B D005 0042 A0               		dc.b $D0, 5, 0, $42, $A0	
00017590 D005 000E B0               		dc.b $D0, 5, 0, $E, $B0	
00017595 D005 002E C0               		dc.b $D0, 5, 0, $2E, $C0	
0001759A D001 0046 D0               		dc.b $D0, 1, 0, $46, $D0	
0001759F D005 0000 D8               		dc.b $D0, 5, 0, 0, $D8	
000175A4 D005 001A E8               		dc.b $D0, 5, 0, $1A, $E8	
000175A9 0005 004C E8               		dc.b 0, 5, 0, $4C, $E8	
000175AE 0001 0046 F8               		dc.b 0, 1, 0, $46, $F8	
000175B3 0005 001A 04               		dc.b 0, 5, 0, $1A, 4	
000175B8 0005 002A 14               		dc.b 0, 5, 0, $2A, $14	
000175BD 0005 0004 24               		dc.b 0, 5, 0, 4, $24	
000175C2 2005 0012 D0               		dc.b $20, 5, 0, $12, $D0	
000175C7 2005 003A E0               		dc.b $20, 5, 0, $3A, $E0	
000175CC 2005 000E F0               		dc.b $20, 5, 0, $E, $F0	
000175D1 2005 001A 00               		dc.b $20, 5, 0, $1A, 0	
000175D6 2001 0046 10               		dc.b $20, 1, 0, $46, $10	
000175DB 2005 0050 18               		dc.b $20, 5, 0, $50, $18	
000175E0 2005 0022 30               		dc.b $20, 5, 0, $22, $30	
000175E5 2001 0046 40               		dc.b $20, 1, 0, $46, $40	
000175EA 2005 000E 48               		dc.b $20, 5, 0, $E, $48	
000175EF 1A                         SME_MD8yg_1BF:	dc.b $1A	
000175F0 D805 002E 98               		dc.b $D8, 5, 0, $2E, $98	
000175F5 D805 0026 A8               		dc.b $D8, 5, 0, $26, $A8	
000175FA D805 0032 B8               		dc.b $D8, 5, 0, $32, $B8	
000175FF D805 001A C8               		dc.b $D8, 5, 0, $1A, $C8	
00017604 D805 0054 D8               		dc.b $D8, 5, 0, $54, $D8	
00017609 D805 0012 F8               		dc.b $D8, 5, 0, $12, $F8	
0001760E D805 0022 08               		dc.b $D8, 5, 0, $22, 8	
00017613 D805 0026 18               		dc.b $D8, 5, 0, $26, $18	
00017618 D805 0042 28               		dc.b $D8, 5, 0, $42, $28	
0001761D D805 0032 38               		dc.b $D8, 5, 0, $32, $38	
00017622 D805 001E 48               		dc.b $D8, 5, 0, $1E, $48	
00017627 D805 000E 58               		dc.b $D8, 5, 0, $E, $58	
0001762C 0809 0008 88               		dc.b 8, 9, 0, 8, $88	
00017631 0805 0004 9C               		dc.b 8, 5, 0, 4, $9C	
00017636 0805 002E AC               		dc.b 8, 5, 0, $2E, $AC	
0001763B 0805 0004 BC               		dc.b 8, 5, 0, 4, $BC	
00017640 0805 003E CC               		dc.b 8, 5, 0, $3E, $CC	
00017645 0805 0026 DC               		dc.b 8, 5, 0, $26, $DC	
0001764A 0805 001A F8               		dc.b 8, 5, 0, $1A, $F8	
0001764F 0805 0004 08               		dc.b 8, 5, 0, 4, 8	
00017654 0805 0058 18               		dc.b 8, 5, 0, $58, $18	
00017659 0805 0004 28               		dc.b 8, 5, 0, 4, $28	
0001765E 0809 0008 38               		dc.b 8, 9, 0, 8, $38	
00017663 0805 0032 4C               		dc.b 8, 5, 0, $32, $4C	
00017668 0805 0022 5C               		dc.b 8, 5, 0, $22, $5C	
0001766D 0805 0004 6C               		dc.b 8, 5, 0, 4, $6C	
00017672 17                         SME_MD8yg_242:	dc.b $17	
00017673 D005 002E 98               		dc.b $D0, 5, 0, $2E, $98	
00017678 D005 0026 A8               		dc.b $D0, 5, 0, $26, $A8	
0001767D D005 0032 B8               		dc.b $D0, 5, 0, $32, $B8	
00017682 D005 001A C8               		dc.b $D0, 5, 0, $1A, $C8	
00017687 D005 0054 D8               		dc.b $D0, 5, 0, $54, $D8	
0001768C D005 0012 F8               		dc.b $D0, 5, 0, $12, $F8	
00017691 D005 0022 08               		dc.b $D0, 5, 0, $22, 8	
00017696 D005 0026 18               		dc.b $D0, 5, 0, $26, $18	
0001769B D005 0000 28               		dc.b $D0, 5, 0, 0, $28	
000176A0 D005 0022 38               		dc.b $D0, 5, 0, $22, $38	
000176A5 D005 0004 48               		dc.b $D0, 5, 0, 4, $48	
000176AA D009 0008 58               		dc.b $D0, 9, 0, 8, $58	
000176AF 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
000176B4 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
000176B9 0009 0008 E8               		dc.b 0, 9, 0, 8, $E8	
000176BE 0001 0046 FC               		dc.b 0, 1, 0, $46, $FC	
000176C3 0005 003E 04               		dc.b 0, 5, 0, $3E, 4	
000176C8 0005 0004 14               		dc.b 0, 5, 0, 4, $14	
000176CD 2009 0008 D0               		dc.b $20, 9, 0, 8, $D0	
000176D2 2005 0004 E4               		dc.b $20, 5, 0, 4, $E4	
000176D7 2005 001E F4               		dc.b $20, 5, 0, $1E, $F4	
000176DC 2005 0058 04               		dc.b $20, 5, 0, $58, 4	
000176E1 2005 002A 14               		dc.b $20, 5, 0, $2A, $14	
000176E6 1F                         SME_MD8yg_2B6:	dc.b $1F	
000176E7 D805 002E 80               		dc.b $D8, 5, 0, $2E, $80	
000176EC D805 0012 90               		dc.b $D8, 5, 0, $12, $90	
000176F1 D805 000E A0               		dc.b $D8, 5, 0, $E, $A0	
000176F6 D805 001E B0               		dc.b $D8, 5, 0, $1E, $B0	
000176FB D801 0046 C0               		dc.b $D8, 1, 0, $46, $C0	
00017700 D805 0004 C8               		dc.b $D8, 5, 0, 4, $C8	
00017705 D805 0016 D8               		dc.b $D8, 5, 0, $16, $D8	
0001770A D805 003E F8               		dc.b $D8, 5, 0, $3E, $F8	
0001770F D805 003A 08               		dc.b $D8, 5, 0, $3A, 8	
00017714 D805 0004 18               		dc.b $D8, 5, 0, 4, $18	
00017719 D805 001A 28               		dc.b $D8, 5, 0, $1A, $28	
0001771E D805 0058 38               		dc.b $D8, 5, 0, $58, $38	
00017723 D805 002E 48               		dc.b $D8, 5, 0, $2E, $48	
00017728 0005 005C B0               		dc.b 0, 5, 0, $5C, $B0	
0001772D 0005 0032 C0               		dc.b 0, 5, 0, $32, $C0	
00017732 0005 004C D0               		dc.b 0, 5, 0, $4C, $D0	
00017737 0001 0046 E0               		dc.b 0, 1, 0, $46, $E0	
0001773C 0005 0026 E8               		dc.b 0, 5, 0, $26, $E8	
00017741 0009 0008 00               		dc.b 0, 9, 0, 8, 0	
00017746 0001 0046 14               		dc.b 0, 1, 0, $46, $14	
0001774B 0005 001A 1C               		dc.b 0, 5, 0, $1A, $1C	
00017750 0005 000E 2C               		dc.b 0, 5, 0, $E, $2C	
00017755 0005 0000 3C               		dc.b 0, 5, 0, 0, $3C	
0001775A 0001 0046 4C               		dc.b 0, 1, 0, $46, $4C	
0001775F 0005 002E 54               		dc.b 0, 5, 0, $2E, $54	
00017764 0005 003A 64               		dc.b 0, 5, 0, $3A, $64	
00017769 0001 0046 74               		dc.b 0, 1, 0, $46, $74	
0001776E 2005 0012 F8               		dc.b $20, 5, 0, $12, $F8	
00017773 2005 0004 08               		dc.b $20, 5, 0, 4, 8	
00017778 2005 0012 18               		dc.b $20, 5, 0, $12, $18	
0001777D 2005 0004 28               		dc.b $20, 5, 0, 4, $28	
00017782 0F                         SME_MD8yg_352:	dc.b $F	
00017783 F805 0012 80               		dc.b $F8, 5, 0, $12, $80	
00017788 F805 0022 90               		dc.b $F8, 5, 0, $22, $90	
0001778D F805 000E A0               		dc.b $F8, 5, 0, $E, $A0	
00017792 F805 002E B0               		dc.b $F8, 5, 0, $2E, $B0	
00017797 F805 000E C0               		dc.b $F8, 5, 0, $E, $C0	
0001779C F805 001A D0               		dc.b $F8, 5, 0, $1A, $D0	
000177A1 F805 003E E0               		dc.b $F8, 5, 0, $3E, $E0	
000177A6 F805 000E F0               		dc.b $F8, 5, 0, $E, $F0	
000177AB F805 0042 00               		dc.b $F8, 5, 0, $42, 0	
000177B0 F805 0048 18               		dc.b $F8, 5, 0, $48, $18	
000177B5 F805 002A 28               		dc.b $F8, 5, 0, $2A, $28	
000177BA F805 002E 40               		dc.b $F8, 5, 0, $2E, $40	
000177BF F805 000E 50               		dc.b $F8, 5, 0, $E, $50	
000177C4 F805 0000 60               		dc.b $F8, 5, 0, 0, $60	
000177C9 F805 0004 70               		dc.b $F8, 5, 0, 4, $70	
000177CE 08                         SME_MD8yg_39E:	dc.b 8	
000177CF 3005 003E C0               		dc.b $30, 5, 0, $3E, $C0	
000177D4 3005 0022 D0               		dc.b $30, 5, 0, $22, $D0	
000177D9 3005 002A E0               		dc.b $30, 5, 0, $2A, $E0	
000177DE 3005 0004 F8               		dc.b $30, 5, 0, 4, $F8	
000177E3 3005 0000 08               		dc.b $30, 5, 0, 0, 8	
000177E8 3005 0004 18               		dc.b $30, 5, 0, 4, $18	
000177ED 3001 0046 28               		dc.b $30, 1, 0, $46, $28	
000177F2 3005 001A 30               		dc.b $30, 5, 0, $1A, $30	
000177F7 17                         SME_MD8yg_3C7:	dc.b $17	
000177F8 E805 002E B4               		dc.b $E8, 5, 0, $2E, $B4	
000177FD D805 0026 C4               		dc.b $D8, 5, 0, $26, $C4	
00017802 E801 0046 44               		dc.b $E8, 1, 0, $46, $44	
00017807 E805 001E 4C               		dc.b $E8, 5, 0, $1E, $4C	
0001780C D805 003E 34               		dc.b $D8, 5, 0, $3E, $34	
00017811 D805 000E 1C               		dc.b $D8, 5, 0, $E, $1C	
00017816 D805 0004 FC               		dc.b $D8, 5, 0, 4, $FC	
0001781B E809 0008 0C               		dc.b $E8, 9, 0, 8, $C	
00017820 D805 002A B4               		dc.b $D8, 5, 0, $2A, $B4	
00017825 D805 0032 D4               		dc.b $D8, 5, 0, $32, $D4	
0001782A D805 103A EC               		dc.b $D8, 5, $10, $3A, $EC	
0001782F D805 0032 0C               		dc.b $D8, 5, 0, $32, $C	
00017834 D805 003A 44               		dc.b $D8, 5, 0, $3A, $44	
00017839 E805 0004 C4               		dc.b $E8, 5, 0, 4, $C4	
0001783E E805 0032 24               		dc.b $E8, 5, 0, $32, $24	
00017843 E809 0008 D4               		dc.b $E8, 9, 0, 8, $D4	
00017848 E805 000E EC               		dc.b $E8, 5, 0, $E, $EC	
0001784D E805 002E 34               		dc.b $E8, 5, 0, $2E, $34	
00017852 F805 001E D4               		dc.b $F8, 5, 0, $1E, $D4	
00017857 F805 0004 E4               		dc.b $F8, 5, 0, 4, $E4	
0001785C F805 0042 F4               		dc.b $F8, 5, 0, $42, $F4	
00017861 D805 000E 54               		dc.b $D8, 5, 0, $E, $54	
00017866 F805 000E 04               		dc.b $F8, 5, 0, $E, 4	
0001786C 00                         		even
0001786C 00                         		even
0001786C                            
0001786C                            ; ===========================================================================
0001786C                            ; ---------------------------------------------------------------------------
0001786C                            ; Object 3D - Eggman (GHZ)
0001786C                            ; ---------------------------------------------------------------------------
0001786C                            
0001786C                            Obj3D:					; XREF: Obj_Index
0001786C 7000                       		moveq	#0,d0
0001786E 1028 0024                  		move.b	$24(a0),d0
00017872 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017876 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001787A                            ; ===========================================================================
0001787A 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001787C 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
0001787E 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017880 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017882                            
00017882 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017884 0401                       		dc.b 4,	1
00017886 0607                       		dc.b 6,	7
00017888                            ; ===========================================================================
00017888                            
00017888                            Obj3D_Main:				; XREF: Obj3D_Index
00017888 45F9 0001 7882             		lea	(Obj3D_ObjData).l,a2
0001788E 2248                       		movea.l	a0,a1
00017890 7202                       		moveq	#2,d1
00017892 6000                       		bra.s	Obj3D_LoadBoss
00017894                            ; ===========================================================================
00017894                            
00017894                            Obj3D_Loop:
00017894 4EB9 0000 DC18             		jsr	SingleObjLoad2
0001789A 6600                       		bne.s	loc_17772
0001789C                            
0001789C                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001789C 135A 0024                  		move.b	(a2)+,$24(a1)
000178A0 12BC 003D                  		move.b	#$3D,0(a1)
000178A4 3368 0008 0008             		move.w	8(a0),8(a1)
000178AA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000178B0 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
000178B8 337C 0400 0002             		move.w	#$400,2(a1)
000178BE 137C 0004 0001             		move.b	#4,1(a1)
000178C4 137C 0020 0019             		move.b	#$20,$19(a1)
000178CA 137C 0003 0018             		move.b	#3,$18(a1)
000178D0 135A 001C                  		move.b	(a2)+,$1C(a1)
000178D4 2348 0034                  		move.l	a0,$34(a1)
000178D8 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
000178DC                            
000178DC                            loc_17772:
000178DC 3168 0008 0030             		move.w	8(a0),$30(a0)
000178E2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000178E8 117C 000F 0020             		move.b	#$F,$20(a0)
000178EE 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000178F4                            
000178F4                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000178F4 7000                       		moveq	#0,d0
000178F6 1028 0025                  		move.b	$25(a0),d0
000178FA 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000178FE 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00017902 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017908 4EB9 0000 A7EE             		jsr	AnimateSprite
0001790E 1028 0022                  		move.b	$22(a0),d0
00017912 0200 0003                  		andi.b	#3,d0
00017916 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001791C 8128 0001                  		or.b	d0,1(a0)
00017920 4EF9 0000 D77C             		jmp	DisplaySprite
00017926                            ; ===========================================================================
00017926 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00017928 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
0001792A 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
0001792C 0000                       		dc.w loc_17954-Obj3D_ShipIndex
0001792E 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00017930 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00017932 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00017934                            ; ===========================================================================
00017934                            
00017934                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00017934 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
0001793A 6100 0000                  		bsr.w	BossMove
0001793E 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00017944 6600                       		bne.s	loc_177E6
00017946 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001794C 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017950                            
00017950                            loc_177E6:
00017950 1028 003F                  		move.b	$3F(a0),d0
00017954 4EB9 0000 29DA             		jsr	(CalcSine).l
0001795A EC40                       		asr.w	#6,d0
0001795C D068 0038                  		add.w	$38(a0),d0
00017960 3140 000C                  		move.w	d0,$C(a0)
00017964 3168 0030 0008             		move.w	$30(a0),8(a0)
0001796A 5428 003F                  		addq.b	#2,$3F(a0)
0001796E 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017974 6400                       		bcc.s	locret_1784A
00017976 4A28 0022                  		tst.b	$22(a0)
0001797A 6B00                       		bmi.s	loc_1784C
0001797C 4A28 0020                  		tst.b	$20(a0)
00017980 6600                       		bne.s	locret_1784A
00017982 4A28 003E                  		tst.b	$3E(a0)
00017986 6600                       		bne.s	Obj3D_ShipFlash
00017988 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
0001798E 303C 00AC                  		move.w	#$AC,d0
00017992 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00017998                            
00017998                            Obj3D_ShipFlash:
00017998 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001799C 7000                       		moveq	#0,d0		; move 0 (black) to d0
0001799E 4A51                       		tst.w	(a1)
000179A0 6600                       		bne.s	loc_1783C
000179A2 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
000179A6                            
000179A6                            loc_1783C:
000179A6 3280                       		move.w	d0,(a1)		; load colour stored in	d0
000179A8 5328 003E                  		subq.b	#1,$3E(a0)
000179AC 6600                       		bne.s	locret_1784A
000179AE 117C 000F 0020             		move.b	#$F,$20(a0)
000179B4                            
000179B4                            locret_1784A:
000179B4 4E75                       		rts	
000179B6                            ; ===========================================================================
000179B6                            
000179B6                            loc_1784C:				; XREF: loc_177E6
000179B6 7064                       		moveq	#100,d0
000179B8 6100 0000                  		bsr.w	AddPoints
000179BC 117C 0008 0025             		move.b	#8,$25(a0)
000179C2 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000179C8 4E75                       		rts	
000179CA                            
000179CA                            ; ---------------------------------------------------------------------------
000179CA                            ; Defeated boss	subroutine
000179CA                            ; ---------------------------------------------------------------------------
000179CA                            
000179CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000179CA                            
000179CA                            
000179CA                            BossDefeated:
000179CA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000179CE 0200 0007                  		andi.b	#7,d0
000179D2 6600                       		bne.s	locret_178A2
000179D4 4EB9 0000 DC02             		jsr	SingleObjLoad
000179DA 6600                       		bne.s	locret_178A2
000179DC 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
000179E0 3368 0008 0008             		move.w	8(a0),8(a1)
000179E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000179EC 4EB9 0000 29B4             		jsr	(RandomNumber).l
000179F2 3200                       		move.w	d0,d1
000179F4 7200                       		moveq	#0,d1
000179F6 1200                       		move.b	d0,d1
000179F8 E409                       		lsr.b	#2,d1
000179FA 0441 0020                  		subi.w	#$20,d1
000179FE D369 0008                  		add.w	d1,8(a1)
00017A02 E048                       		lsr.w	#8,d0
00017A04 E608                       		lsr.b	#3,d0
00017A06 D169 000C                  		add.w	d0,$C(a1)
00017A0A                            
00017A0A                            locret_178A2:
00017A0A 4E75                       		rts	
00017A0C                            ; End of function BossDefeated
00017A0C                            
00017A0C                            ; ---------------------------------------------------------------------------
00017A0C                            ; Subroutine to	move a boss
00017A0C                            ; ---------------------------------------------------------------------------
00017A0C                            
00017A0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A0C                            
00017A0C                            
00017A0C                            BossMove:
00017A0C 2428 0030                  		move.l	$30(a0),d2
00017A10 2628 0038                  		move.l	$38(a0),d3
00017A14 3028 0010                  		move.w	$10(a0),d0
00017A18 48C0                       		ext.l	d0
00017A1A E180                       		asl.l	#8,d0
00017A1C D480                       		add.l	d0,d2
00017A1E 3028 0012                  		move.w	$12(a0),d0
00017A22 48C0                       		ext.l	d0
00017A24 E180                       		asl.l	#8,d0
00017A26 D680                       		add.l	d0,d3
00017A28 2142 0030                  		move.l	d2,$30(a0)
00017A2C 2143 0038                  		move.l	d3,$38(a0)
00017A30 4E75                       		rts	
00017A32                            ; End of function BossMove
00017A32                            
00017A32                            ; ===========================================================================
00017A32                            
00017A32                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
00017A32 317C FF00 0010             		move.w	#-$100,$10(a0)
00017A38 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017A3E 6100 FFCC                  		bsr.w	BossMove
00017A42 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017A48 6600                       		bne.s	loc_17916
00017A4A 317C 0000 0010             		move.w	#0,$10(a0)
00017A50 317C 0000 0012             		move.w	#0,$12(a0)
00017A56 5428 0025                  		addq.b	#2,$25(a0)
00017A5A 4EB9 0000 DC18             		jsr	SingleObjLoad2
00017A60 6600                       		bne.s	loc_17910
00017A62 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017A66 3368 0030 0008             		move.w	$30(a0),8(a1)
00017A6C 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017A72 2348 0034                  		move.l	a0,$34(a1)
00017A76                            
00017A76                            loc_17910:
00017A76 317C 0077 003C             		move.w	#$77,$3C(a0)
00017A7C                            
00017A7C                            loc_17916:
00017A7C 6000 FED2                  		bra.w	loc_177E6
00017A80                            ; ===========================================================================
00017A80                            
00017A80                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017A80 5368 003C                  		subq.w	#1,$3C(a0)
00017A84 6A00                       		bpl.s	Obj3D_Reverse
00017A86 5428 0025                  		addq.b	#2,$25(a0)
00017A8A 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017A90 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017A96 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00017A9C 6600                       		bne.s	Obj3D_Reverse
00017A9E 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017AA4 317C 0040 0010             		move.w	#$40,$10(a0)
00017AAA                            
00017AAA                            Obj3D_Reverse:
00017AAA 0828 0000 0022             		btst	#0,$22(a0)
00017AB0 6600                       		bne.s	loc_17950
00017AB2 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017AB6                            
00017AB6                            loc_17950:
00017AB6 6000 FE98                  		bra.w	loc_177E6
00017ABA                            ; ===========================================================================
00017ABA                            
00017ABA                            loc_17954:				; XREF: Obj3D_ShipIndex
00017ABA 5368 003C                  		subq.w	#1,$3C(a0)
00017ABE 6B00                       		bmi.s	loc_17960
00017AC0 6100 FF4A                  		bsr.w	BossMove
00017AC4 6000                       		bra.s	loc_17976
00017AC6                            ; ===========================================================================
00017AC6                            
00017AC6                            loc_17960:
00017AC6 0868 0000 0022             		bchg	#0,$22(a0)
00017ACC 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017AD2 5528 0025                  		subq.b	#2,$25(a0)
00017AD6 317C 0000 0010             		move.w	#0,$10(a0)
00017ADC                            
00017ADC                            loc_17976:
00017ADC 6000 FE72                  		bra.w	loc_177E6
00017AE0                            ; ===========================================================================
00017AE0                            
00017AE0                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017AE0 5368 003C                  		subq.w	#1,$3C(a0)
00017AE4 6B00                       		bmi.s	loc_17984
00017AE6 6000 FEE2                  		bra.w	BossDefeated
00017AEA                            ; ===========================================================================
00017AEA                            
00017AEA                            loc_17984:
00017AEA 08E8 0000 0022             		bset	#0,$22(a0)
00017AF0 08A8 0007 0022             		bclr	#7,$22(a0)
00017AF6 4268 0010                  		clr.w	$10(a0)
00017AFA 5428 0025                  		addq.b	#2,$25(a0)
00017AFE 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00017B04 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00017B08 6600                       		bne.s	locret_179AA
00017B0A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00017B10                            
00017B10                            locret_179AA:
00017B10 4E75                       		rts	
00017B12                            ; ===========================================================================
00017B12                            
00017B12                            loc_179AC:				; XREF: Obj3D_ShipIndex
00017B12 5268 003C                  		addq.w	#1,$3C(a0)
00017B16 6700                       		beq.s	loc_179BC
00017B18 6A00                       		bpl.s	loc_179C2
00017B1A 0668 0018 0012             		addi.w	#$18,$12(a0)
00017B20 6000                       		bra.s	loc_179EE
00017B22                            ; ===========================================================================
00017B22                            
00017B22                            loc_179BC:
00017B22 4268 0012                  		clr.w	$12(a0)
00017B26 6000                       		bra.s	loc_179EE
00017B28                            ; ===========================================================================
00017B28                            
00017B28                            loc_179C2:
00017B28 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00017B2E 6500                       		bcs.s	loc_179DA
00017B30 6700                       		beq.s	loc_179E0
00017B32 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00017B38 6500                       		bcs.s	loc_179EE
00017B3A 5428 0025                  		addq.b	#2,$25(a0)
00017B3E 6000                       		bra.s	loc_179EE
00017B40                            ; ===========================================================================
00017B40                            
00017B40                            loc_179DA:
00017B40 5168 0012                  		subq.w	#8,$12(a0)
00017B44 6000                       		bra.s	loc_179EE
00017B46                            ; ===========================================================================
00017B46                            
00017B46                            loc_179E0:
00017B46 4268 0012                  		clr.w	$12(a0)
00017B4A 303C 0081                  		move.w	#$81,d0
00017B4E 4EB9 0000 1396             		jsr	(PlaySound).l	; play GHZ music
00017B54                            
00017B54                            loc_179EE:
00017B54 6100 FEB6                  		bsr.w	BossMove
00017B58 6000 FDF6                  		bra.w	loc_177E6
00017B5C                            ; ===========================================================================
00017B5C                            
00017B5C                            loc_179F6:				; XREF: Obj3D_ShipIndex
00017B5C 317C 0400 0010             		move.w	#$400,$10(a0)
00017B62 317C FFC0 0012             		move.w	#-$40,$12(a0)
00017B68 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00017B6E 6700                       		beq.s	loc_17A10
00017B70 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017B74 6000                       		bra.s	loc_17A16
00017B76                            ; ===========================================================================
00017B76                            
00017B76                            loc_17A10:
00017B76 4A28 0001                  		tst.b	1(a0)
00017B7A 6A00                       		bpl.s	Obj3D_ShipDel
00017B7C                            
00017B7C                            loc_17A16:
00017B7C 6100 FE8E                  		bsr.w	BossMove
00017B80 6000 FDCE                  		bra.w	loc_177E6
00017B84                            ; ===========================================================================
00017B84                            
00017B84                            Obj3D_ShipDel:
00017B84 4EF9 0000 D7B8             		jmp	DeleteObject
00017B8A                            ; ===========================================================================
00017B8A                            
00017B8A                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00017B8A 7000                       		moveq	#0,d0
00017B8C 7201                       		moveq	#1,d1
00017B8E 2268 0034                  		movea.l	$34(a0),a1
00017B92 1029 0025                  		move.b	$25(a1),d0
00017B96 5900                       		subq.b	#4,d0
00017B98 6600                       		bne.s	loc_17A3E
00017B9A 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00017BA0 6600                       		bne.s	loc_17A46
00017BA2 7204                       		moveq	#4,d1
00017BA4                            
00017BA4                            loc_17A3E:
00017BA4 5D00                       		subq.b	#6,d0
00017BA6 6B00                       		bmi.s	loc_17A46
00017BA8 720A                       		moveq	#$A,d1
00017BAA 6000                       		bra.s	loc_17A5A
00017BAC                            ; ===========================================================================
00017BAC                            
00017BAC                            loc_17A46:
00017BAC 4A29 0020                  		tst.b	$20(a1)
00017BB0 6600                       		bne.s	loc_17A50
00017BB2 7205                       		moveq	#5,d1
00017BB4 6000                       		bra.s	loc_17A5A
00017BB6                            ; ===========================================================================
00017BB6                            
00017BB6                            loc_17A50:
00017BB6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00017BBC 6500                       		bcs.s	loc_17A5A
00017BBE 7204                       		moveq	#4,d1
00017BC0                            
00017BC0                            loc_17A5A:
00017BC0 1141 001C                  		move.b	d1,$1C(a0)
00017BC4 5500                       		subq.b	#2,d0
00017BC6 6600                       		bne.s	Obj3D_FaceDisp
00017BC8 117C 0006 001C             		move.b	#6,$1C(a0)
00017BCE 4A28 0001                  		tst.b	1(a0)
00017BD2 6A00                       		bpl.s	Obj3D_FaceDel
00017BD4                            
00017BD4                            Obj3D_FaceDisp:
00017BD4 6000                       		bra.s	Obj3D_Display
00017BD6                            ; ===========================================================================
00017BD6                            
00017BD6                            Obj3D_FaceDel:
00017BD6 4EF9 0000 D7B8             		jmp	DeleteObject
00017BDC                            ; ===========================================================================
00017BDC                            
00017BDC                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00017BDC 117C 0007 001C             		move.b	#7,$1C(a0)
00017BE2 2268 0034                  		movea.l	$34(a0),a1
00017BE6 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00017BEC 6600                       		bne.s	loc_17A96
00017BEE 117C 000B 001C             		move.b	#$B,$1C(a0)
00017BF4 4A28 0001                  		tst.b	1(a0)
00017BF8 6A00                       		bpl.s	Obj3D_FlameDel
00017BFA 6000                       		bra.s	Obj3D_FlameDisp
00017BFC                            ; ===========================================================================
00017BFC                            
00017BFC                            loc_17A96:
00017BFC 3029 0010                  		move.w	$10(a1),d0
00017C00 6700                       		beq.s	Obj3D_FlameDisp
00017C02 117C 0008 001C             		move.b	#8,$1C(a0)
00017C08                            
00017C08                            Obj3D_FlameDisp:
00017C08 6000                       		bra.s	Obj3D_Display
00017C0A                            ; ===========================================================================
00017C0A                            
00017C0A                            Obj3D_FlameDel:
00017C0A 4EF9 0000 D7B8             		jmp	DeleteObject
00017C10                            ; ===========================================================================
00017C10                            
00017C10                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00017C10 2268 0034                  		movea.l	$34(a0),a1
00017C14 3169 0008 0008             		move.w	8(a1),8(a0)
00017C1A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00017C20 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017C26 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00017C2C 4EB9 0000 A7EE             		jsr	AnimateSprite
00017C32 1028 0022                  		move.b	$22(a0),d0
00017C36 0200 0003                  		andi.b	#3,d0
00017C3A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017C40 8128 0001                  		or.b	d0,1(a0)
00017C44 4EF9 0000 D77C             		jmp	DisplaySprite
00017C4A                            ; ===========================================================================
00017C4A                            ; ---------------------------------------------------------------------------
00017C4A                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00017C4A                            ; ---------------------------------------------------------------------------
00017C4A                            
00017C4A                            Obj48:					; XREF: Obj_Index
00017C4A 7000                       		moveq	#0,d0
00017C4C 1028 0024                  		move.b	$24(a0),d0
00017C50 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00017C54 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00017C58                            ; ===========================================================================
00017C58 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00017C5A 0000                       		dc.w Obj48_Base-Obj48_Index
00017C5C 0000                       		dc.w Obj48_Display2-Obj48_Index
00017C5E 0000                       		dc.w loc_17C68-Obj48_Index
00017C60 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00017C62                            ; ===========================================================================
00017C62                            
00017C62                            Obj48_Main:				; XREF: Obj48_Index
00017C62 5428 0024                  		addq.b	#2,$24(a0)
00017C66 317C 4080 0026             		move.w	#$4080,$26(a0)
00017C6C 317C FE00 003E             		move.w	#-$200,$3E(a0)
00017C72 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00017C7A 317C 046C 0002             		move.w	#$46C,2(a0)
00017C80 45E8 0028                  		lea	$28(a0),a2
00017C84 14FC 0000                  		move.b	#0,(a2)+
00017C88 7205                       		moveq	#5,d1
00017C8A 2248                       		movea.l	a0,a1
00017C8C 6000                       		bra.s	loc_17B60
00017C8E                            ; ===========================================================================
00017C8E                            
00017C8E                            Obj48_MakeLinks:
00017C8E 4EB9 0000 DC18             		jsr	SingleObjLoad2
00017C94 6600                       		bne.s	Obj48_MakeBall
00017C96 3368 0008 0008             		move.w	8(a0),8(a1)
00017C9C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017CA2 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00017CA6 137C 0006 0024             		move.b	#6,$24(a1)
00017CAC 237C 0000 7D4A 0004        		move.l	#Map_obj15,4(a1)
00017CB4 337C 0380 0002             		move.w	#$380,2(a1)
00017CBA 137C 0001 001A             		move.b	#1,$1A(a1)
00017CC0 5228 0028                  		addq.b	#1,$28(a0)
00017CC4                            
00017CC4                            loc_17B60:				; XREF: Obj48_Main
00017CC4 3A09                       		move.w	a1,d5
00017CC6 0445 D000                  		subi.w	#$D000,d5
00017CCA EC4D                       		lsr.w	#6,d5
00017CCC 0245 007F                  		andi.w	#$7F,d5
00017CD0 14C5                       		move.b	d5,(a2)+
00017CD2 137C 0004 0001             		move.b	#4,1(a1)
00017CD8 137C 0008 0019             		move.b	#8,$19(a1)
00017CDE 137C 0006 0018             		move.b	#6,$18(a1)
00017CE4 2368 0034 0034             		move.l	$34(a0),$34(a1)
00017CEA 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00017CEE                            
00017CEE                            Obj48_MakeBall:
00017CEE 137C 0008 0024             		move.b	#8,$24(a1)
00017CF4 237C 0000 82A8 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00017CFC 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00017D02 137C 0001 001A             		move.b	#1,$1A(a1)
00017D08 137C 0005 0018             		move.b	#5,$18(a1)
00017D0E 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00017D14 4E75                       		rts	
00017D16                            ; ===========================================================================
00017D16                            
00017D16 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00017D1C                            
00017D1C                            ; ===========================================================================
00017D1C                            
00017D1C                            Obj48_Base:				; XREF: Obj48_Index
00017D1C 47F9 0001 7D16             		lea	(Obj48_PosData).l,a3
00017D22 45E8 0028                  		lea	$28(a0),a2
00017D26 7C00                       		moveq	#0,d6
00017D28 1C1A                       		move.b	(a2)+,d6
00017D2A                            
00017D2A                            loc_17BC6:
00017D2A 7800                       		moveq	#0,d4
00017D2C 181A                       		move.b	(a2)+,d4
00017D2E ED4C                       		lsl.w	#6,d4
00017D30 0684 00FF D000             		addi.l	#$FFD000,d4
00017D36 2244                       		movea.l	d4,a1
00017D38 101B                       		move.b	(a3)+,d0
00017D3A B029 003C                  		cmp.b	$3C(a1),d0
00017D3E 6700                       		beq.s	loc_17BE0
00017D40 5229 003C                  		addq.b	#1,$3C(a1)
00017D44                            
00017D44                            loc_17BE0:
00017D44 51CE FFE4                  		dbf	d6,loc_17BC6
00017D48                            
00017D48 B029 003C                  		cmp.b	$3C(a1),d0
00017D4C 6600                       		bne.s	loc_17BFA
00017D4E 2268 0034                  		movea.l	$34(a0),a1
00017D52 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00017D58 6600                       		bne.s	loc_17BFA
00017D5A 5428 0024                  		addq.b	#2,$24(a0)
00017D5E                            
00017D5E                            loc_17BFA:
00017D5E 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00017D64 6700                       		beq.s	Obj48_Display
00017D66 5268 0032                  		addq.w	#1,$32(a0)
00017D6A                            
00017D6A                            Obj48_Display:
00017D6A 6100 0000                  		bsr.w	sub_17C2A
00017D6E 1028 0026                  		move.b	$26(a0),d0
00017D72 4EB9 0000 7CBC             		jsr	(Obj15_Move2).l
00017D78 4EF9 0000 D77C             		jmp	DisplaySprite
00017D7E                            ; ===========================================================================
00017D7E                            
00017D7E                            Obj48_Display2:				; XREF: Obj48_Index
00017D7E 6100 0000                  		bsr.w	sub_17C2A
00017D82 4EB9 0000 7C7C             		jsr	(Obj48_Move).l
00017D88 4EF9 0000 D77C             		jmp	DisplaySprite
00017D8E                            
00017D8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017D8E                            
00017D8E                            
00017D8E                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00017D8E 2268 0034                  		movea.l	$34(a0),a1
00017D92 0628 0020 001B             		addi.b	#$20,$1B(a0)
00017D98 6400                       		bcc.s	loc_17C3C
00017D9A 0868 0000 001A             		bchg	#0,$1A(a0)
00017DA0                            
00017DA0                            loc_17C3C:
00017DA0 3169 0008 003A             		move.w	8(a1),$3A(a0)
00017DA6 3029 000C                  		move.w	$C(a1),d0
00017DAA D068 0032                  		add.w	$32(a0),d0
00017DAE 3140 0038                  		move.w	d0,$38(a0)
00017DB2 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017DB8 4A29 0022                  		tst.b	$22(a1)
00017DBC 6A00                       		bpl.s	locret_17C66
00017DBE 10BC 003F                  		move.b	#$3F,0(a0)
00017DC2 117C 0000 0024             		move.b	#0,$24(a0)
00017DC8                            
00017DC8                            locret_17C66:
00017DC8 4E75                       		rts	
00017DCA                            ; End of function sub_17C2A
00017DCA                            
00017DCA                            ; ===========================================================================
00017DCA                            
00017DCA                            loc_17C68:				; XREF: Obj48_Index
00017DCA 2268 0034                  		movea.l	$34(a0),a1
00017DCE 4A29 0022                  		tst.b	$22(a1)
00017DD2 6A00                       		bpl.s	Obj48_Display3
00017DD4 10BC 003F                  		move.b	#$3F,0(a0)
00017DD8 117C 0000 0024             		move.b	#0,$24(a0)
00017DDE                            
00017DDE                            Obj48_Display3:
00017DDE 4EF9 0000 D77C             		jmp	DisplaySprite
00017DE4                            ; ===========================================================================
00017DE4                            
00017DE4                            Obj48_ChkVanish:			; XREF: Obj48_Index
00017DE4 7000                       		moveq	#0,d0
00017DE6 4A28 001A                  		tst.b	$1A(a0)
00017DEA 6600                       		bne.s	Obj48_Vanish
00017DEC 5200                       		addq.b	#1,d0
00017DEE                            
00017DEE                            Obj48_Vanish:
00017DEE 1140 001A                  		move.b	d0,$1A(a0)
00017DF2 2268 0034                  		movea.l	$34(a0),a1
00017DF6 4A29 0022                  		tst.b	$22(a1)
00017DFA 6A00                       		bpl.s	Obj48_Display4
00017DFC 117C 0000 0020             		move.b	#0,$20(a0)
00017E02 6100 FBC6                  		bsr.w	BossDefeated
00017E06 5328 003C                  		subq.b	#1,$3C(a0)
00017E0A 6A00                       		bpl.s	Obj48_Display4
00017E0C 10BC 003F                  		move.b	#$3F,(a0)
00017E10 117C 0000 0024             		move.b	#0,$24(a0)
00017E16                            
00017E16                            Obj48_Display4:
00017E16 4EF9 0000 D77C             		jmp	DisplaySprite
00017E1C                            ; ===========================================================================
00017E1C                            Ani_Eggman:
00017E1C                            	include "_anim\Eggman.asm"
00017E1C                            ; ---------------------------------------------------------------------------
00017E1C                            ; Animation script - Eggman (bosses)
00017E1C                            ; ---------------------------------------------------------------------------
00017E1C 0000                       		dc.w byte_17CD4-Ani_Eggman
00017E1E 0000                       		dc.w byte_17CD8-Ani_Eggman
00017E20 0000                       		dc.w byte_17CDC-Ani_Eggman
00017E22 0000                       		dc.w byte_17CE0-Ani_Eggman
00017E24 0000                       		dc.w byte_17CE4-Ani_Eggman
00017E26 0000                       		dc.w byte_17CE8-Ani_Eggman
00017E28 0000                       		dc.w byte_17CEC-Ani_Eggman
00017E2A 0000                       		dc.w byte_17CF0-Ani_Eggman
00017E2C 0000                       		dc.w byte_17CF4-Ani_Eggman
00017E2E 0000                       		dc.w byte_17CF8-Ani_Eggman
00017E30 0000                       		dc.w byte_17CFC-Ani_Eggman
00017E32 0000                       		dc.w byte_17D00-Ani_Eggman
00017E34 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00017E38 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00017E3C 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00017E40 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00017E44 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00017E48 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00017E4C 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00017E50 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00017E54 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00017E58 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00017E5C 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00017E60 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00017E6C                            		even
00017E6C                            		even
00017E6C                            
00017E6C                            ; ---------------------------------------------------------------------------
00017E6C                            ; Sprite mappings - Eggman (boss levels)
00017E6C                            ; ---------------------------------------------------------------------------
00017E6C                            Map_Eggman:
00017E6C                            	include "_maps\Eggman.asm"
00017E6C                            Map_b908:
00017E6C 0000                       Map_b908_0: 	dc.w Map_b908_1A-Map_b908
00017E6E 0000                       Map_b908_2: 	dc.w Map_b908_39-Map_b908
00017E70 0000                       Map_b908_4: 	dc.w Map_b908_44-Map_b908
00017E72 0000                       Map_b908_6: 	dc.w Map_b908_4F-Map_b908
00017E74 0000                       Map_b908_8: 	dc.w Map_b908_5F-Map_b908
00017E76 0000                       Map_b908_A: 	dc.w Map_b908_6F-Map_b908
00017E78 0000                       Map_b908_C: 	dc.w Map_b908_7F-Map_b908
00017E7A 0000                       Map_b908_E: 	dc.w Map_b908_8F-Map_b908
00017E7C 0000                       Map_b908_10: 	dc.w Map_b908_A4-Map_b908
00017E7E 0000                       Map_b908_12: 	dc.w Map_b908_AA-Map_b908
00017E80 0000                       Map_b908_14: 	dc.w Map_b908_B0-Map_b908
00017E82 0000                       Map_b908_16: 	dc.w Map_b908_B1-Map_b908
00017E84 0000                       Map_b908_18: 	dc.w Map_b908_BC-Map_b908
00017E86 06                         Map_b908_1A: 	dc.b $6
00017E87 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00017E8C EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
00017E91 FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00017E96 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00017E9B 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
00017EA0 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00017EA5 02                         Map_b908_39: 	dc.b $2
00017EA6 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00017EAB EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
00017EB0 02                         Map_b908_44: 	dc.b $2
00017EB1 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00017EB6 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00017EBB 03                         Map_b908_4F: 	dc.b $3
00017EBC E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
00017EC1 EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00017EC6 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00017ECB 03                         Map_b908_5F: 	dc.b $3
00017ECC E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
00017ED1 EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
00017ED6 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
00017EDB 03                         Map_b908_6F: 	dc.b $3
00017EDC E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00017EE1 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00017EE6 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00017EEB 03                         Map_b908_7F: 	dc.b $3
00017EEC E404 0064 04               	dc.b $E4, $4, $0, $64, $4
00017EF1 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00017EF6 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00017EFB 04                         Map_b908_8F: 	dc.b $4
00017EFC E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
00017F01 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
00017F06 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
00017F0B EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
00017F10 01                         Map_b908_A4: 	dc.b $1
00017F11 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
00017F16 01                         Map_b908_AA: 	dc.b $1
00017F17 0405 0031 22               	dc.b $4, $5, $0, $31, $22
00017F1C 00                         Map_b908_B0: 	dc.b $0
00017F1D 02                         Map_b908_B1: 	dc.b $2
00017F1E 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
00017F23 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
00017F28 02                         Map_b908_BC: 	dc.b $2
00017F29 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
00017F2E 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00017F34 00                         	even
00017F34 00                         	even
00017F34                            
00017F34                            ; ---------------------------------------------------------------------------
00017F34                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017F34                            ; ---------------------------------------------------------------------------
00017F34                            Map_BossItems:
00017F34                            	include "_maps\Boss items.asm"
00017F34                            ; ---------------------------------------------------------------------------
00017F34                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017F34                            ; ---------------------------------------------------------------------------
00017F34 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00017F38 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00017F3C 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00017F40 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00017F44 01                         byte_17DE4:	dc.b 1
00017F45 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017F4A 02                         byte_17DEA:	dc.b 2
00017F4B FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00017F50 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017F55 00                         		dc.b 0
00017F56 01                         byte_17DF6:	dc.b 1
00017F57 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00017F5C 01                         byte_17DFC:	dc.b 1
00017F5D 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00017F62 01                         byte_17E02:	dc.b 1
00017F63 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00017F68 04                         byte_17E08:	dc.b 4
00017F69 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00017F6E F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00017F73 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00017F78 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00017F7D 00                         		dc.b 0
00017F7E 02                         byte_17E1E:	dc.b 2
00017F7F 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00017F84 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00017F89 00                         		dc.b 0
00017F8A 02                         byte_17E2A:	dc.b 2
00017F8B 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00017F90 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00017F96 00                         		even
00017F96 00                         		even
00017F96                            
00017F96                            ; ===========================================================================
00017F96                            ; ---------------------------------------------------------------------------
00017F96                            ; Object 77 - Eggman (LZ)
00017F96                            ; ---------------------------------------------------------------------------
00017F96                            
00017F96                            Obj77:					; XREF: Obj_Index
00017F96 7000                       		moveq	#0,d0
00017F98 1028 0024                  		move.b	$24(a0),d0
00017F9C 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00017FA0 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00017FA4                            ; ===========================================================================
00017FA4 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00017FA6 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00017FA8 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00017FAA 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00017FAC                            
00017FAC 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00017FAE 0401                       		dc.b 4,	1
00017FB0 0607                       		dc.b 6,	7
00017FB2                            ; ===========================================================================
00017FB2                            
00017FB2                            Obj77_Main:				; XREF: Obj77_Index
00017FB2 317C 1E10 0008             		move.w	#$1E10,8(a0)
00017FB8 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00017FBE 3168 0008 0030             		move.w	8(a0),$30(a0)
00017FC4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017FCA 117C 000F 0020             		move.b	#$F,$20(a0)
00017FD0 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017FD6 117C 0004 0018             		move.b	#4,$18(a0)
00017FDC 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00017FE0 2248                       		movea.l	a0,a1
00017FE2 7202                       		moveq	#2,d1
00017FE4 6000                       		bra.s	Obj77_LoadBoss
00017FE6                            ; ===========================================================================
00017FE6                            
00017FE6                            Obj77_Loop:
00017FE6 4EB9 0000 DC18             		jsr	SingleObjLoad2
00017FEC 6600                       		bne.s	Obj77_ShipMain
00017FEE 12BC 0077                  		move.b	#$77,0(a1)
00017FF2 3368 0008 0008             		move.w	8(a0),8(a1)
00017FF8 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017FFE                            
00017FFE                            Obj77_LoadBoss:				; XREF: Obj77_Main
00017FFE 08A8 0000 0022             		bclr	#0,$22(a0)
00018004 4229 0025                  		clr.b	$25(a1)
00018008 135A 0024                  		move.b	(a2)+,$24(a1)
0001800C 135A 001C                  		move.b	(a2)+,$1C(a1)
00018010 1368 0018 0018             		move.b	$18(a0),$18(a1)
00018016 237C 0001 7E6C 0004        		move.l	#Map_Eggman,4(a1)
0001801E 337C 0400 0002             		move.w	#$400,2(a1)
00018024 137C 0004 0001             		move.b	#4,1(a1)
0001802A 137C 0020 0019             		move.b	#$20,$19(a1)
00018030 2348 0034                  		move.l	a0,$34(a1)
00018034 51C9 FFB0                  		dbf	d1,Obj77_Loop
00018038                            
00018038                            Obj77_ShipMain:
00018038 43F8 D000                  		lea	($FFFFD000).w,a1
0001803C 7000                       		moveq	#0,d0
0001803E 1028 0025                  		move.b	$25(a0),d0
00018042 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00018046 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
0001804A 43F9 0001 7E1C             		lea	(Ani_Eggman).l,a1
00018050 4EB9 0000 A7EE             		jsr	AnimateSprite
00018056 7003                       		moveq	#3,d0
00018058 C028 0022                  		and.b	$22(a0),d0
0001805C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018062 8128 0001                  		or.b	d0,1(a0)
00018066 4EF9 0000 D77C             		jmp	DisplaySprite
0001806C                            ; ===========================================================================
0001806C 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00018070 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00018074 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00018078 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
0001807C                            ; ===========================================================================
0001807C                            
0001807C                            loc_17F1E:				; XREF: Obj77_ShipIndex
0001807C 3029 0008                  		move.w	8(a1),d0
00018080 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00018084 6500                       		bcs.s	loc_17F38
00018086 317C FE80 0012             		move.w	#-$180,$12(a0)
0001808C 317C 0060 0010             		move.w	#$60,$10(a0)
00018092 5428 0025                  		addq.b	#2,$25(a0)
00018096                            
00018096                            loc_17F38:
00018096 6100 F974                  		bsr.w	BossMove
0001809A 3168 0038 000C             		move.w	$38(a0),$C(a0)
000180A0 3168 0030 0008             		move.w	$30(a0),8(a0)
000180A6                            
000180A6                            loc_17F48:
000180A6 4A28 003D                  		tst.b	$3D(a0)
000180AA 6600                       		bne.s	loc_17F8E
000180AC 4A28 0022                  		tst.b	$22(a0)
000180B0 6B00                       		bmi.s	loc_17F92
000180B2 4A28 0020                  		tst.b	$20(a0)
000180B6 6600                       		bne.s	locret_17F8C
000180B8 4A28 003E                  		tst.b	$3E(a0)
000180BC 6600                       		bne.s	loc_17F70
000180BE 117C 0020 003E             		move.b	#$20,$3E(a0)
000180C4 303C 00AC                  		move.w	#$AC,d0
000180C8 4EB9 0000 139C             		jsr	(PlaySound_Special).l
000180CE                            
000180CE                            loc_17F70:
000180CE 43F8 FB22                  		lea	($FFFFFB22).w,a1
000180D2 7000                       		moveq	#0,d0
000180D4 4A51                       		tst.w	(a1)
000180D6 6600                       		bne.s	loc_17F7E
000180D8 303C 0EEE                  		move.w	#$EEE,d0
000180DC                            
000180DC                            loc_17F7E:
000180DC 3280                       		move.w	d0,(a1)
000180DE 5328 003E                  		subq.b	#1,$3E(a0)
000180E2 6600                       		bne.s	locret_17F8C
000180E4 117C 000F 0020             		move.b	#$F,$20(a0)
000180EA                            
000180EA                            locret_17F8C:
000180EA 4E75                       		rts	
000180EC                            ; ===========================================================================
000180EC                            
000180EC                            loc_17F8E:				; XREF: loc_17F48
000180EC 6000 F8DC                  		bra.w	BossDefeated
000180F0                            ; ===========================================================================
000180F0                            
000180F0                            loc_17F92:				; XREF: loc_17F48
000180F0 7064                       		moveq	#100,d0
000180F2 6100 0000                  		bsr.w	AddPoints
000180F6 117C 00FF 003D             		move.b	#-1,$3D(a0)
000180FC 4E75                       		rts	
000180FE                            ; ===========================================================================
000180FE                            
000180FE                            loc_17FA0:				; XREF: Obj77_ShipIndex
000180FE 70FE                       		moveq	#-2,d0
00018100 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00018106 6500                       		bcs.s	loc_17FB6
00018108 317C 1E48 0030             		move.w	#$1E48,$30(a0)
0001810E 4268 0010                  		clr.w	$10(a0)
00018112 5240                       		addq.w	#1,d0
00018114                            
00018114                            loc_17FB6:
00018114 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
0001811A 6E00                       		bgt.s	loc_17FCA
0001811C 317C 0500 0038             		move.w	#$500,$38(a0)
00018122 4268 0012                  		clr.w	$12(a0)
00018126 5240                       		addq.w	#1,d0
00018128                            
00018128                            loc_17FCA:
00018128 6600                       		bne.s	loc_17FDC
0001812A 317C 0140 0010             		move.w	#$140,$10(a0)
00018130 317C FE00 0012             		move.w	#-$200,$12(a0)
00018136 5428 0025                  		addq.b	#2,$25(a0)
0001813A                            
0001813A                            loc_17FDC:
0001813A 6000 FF5A                  		bra.w	loc_17F38
0001813E                            ; ===========================================================================
0001813E                            
0001813E                            loc_17FE0:				; XREF: Obj77_ShipIndex
0001813E 70FE                       		moveq	#-2,d0
00018140 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00018146 6500                       		bcs.s	loc_17FF6
00018148 317C 1E70 0030             		move.w	#$1E70,$30(a0)
0001814E 4268 0010                  		clr.w	$10(a0)
00018152 5240                       		addq.w	#1,d0
00018154                            
00018154                            loc_17FF6:
00018154 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
0001815A 6E00                       		bgt.s	loc_1800A
0001815C 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00018162 4268 0012                  		clr.w	$12(a0)
00018166 5240                       		addq.w	#1,d0
00018168                            
00018168                            loc_1800A:
00018168 6600                       		bne.s	loc_1801A
0001816A 317C FE80 0012             		move.w	#-$180,$12(a0)
00018170 5428 0025                  		addq.b	#2,$25(a0)
00018174 4228 003F                  		clr.b	$3F(a0)
00018178                            
00018178                            loc_1801A:
00018178 6000 FF1C                  		bra.w	loc_17F38
0001817C                            ; ===========================================================================
0001817C                            
0001817C                            loc_1801E:				; XREF: Obj77_ShipIndex
0001817C 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00018182 6E00                       		bgt.s	loc_1804E
00018184 317C 0100 0038             		move.w	#$100,$38(a0)
0001818A 317C 0140 0010             		move.w	#$140,$10(a0)
00018190 317C FF80 0012             		move.w	#-$80,$12(a0)
00018196 4A28 003D                  		tst.b	$3D(a0)
0001819A 6700                       		beq.s	loc_18046
0001819C E1E8 0010                  		asl	$10(a0)
000181A0 E1E8 0012                  		asl	$12(a0)
000181A4                            
000181A4                            loc_18046:
000181A4 5428 0025                  		addq.b	#2,$25(a0)
000181A8 6000 FEEC                  		bra.w	loc_17F38
000181AC                            ; ===========================================================================
000181AC                            
000181AC                            loc_1804E:
000181AC 08E8 0000 0022             		bset	#0,$22(a0)
000181B2 5428 003F                  		addq.b	#2,$3F(a0)
000181B6 1028 003F                  		move.b	$3F(a0),d0
000181BA 4EB9 0000 29DA             		jsr	(CalcSine).l
000181C0 4A41                       		tst.w	d1
000181C2 6A00                       		bpl.s	loc_1806C
000181C4 08A8 0000 0022             		bclr	#0,$22(a0)
000181CA                            
000181CA                            loc_1806C:
000181CA E840                       		asr.w	#4,d0
000181CC 4840                       		swap	d0
000181CE 4240                       		clr.w	d0
000181D0 D0A8 0030                  		add.l	$30(a0),d0
000181D4 4840                       		swap	d0
000181D6 3140 0008                  		move.w	d0,8(a0)
000181DA 3028 0012                  		move.w	$12(a0),d0
000181DE 3238 D00C                  		move.w	($FFFFD00C).w,d1
000181E2 9268 000C                  		sub.w	$C(a0),d1
000181E6 6500                       		bcs.s	loc_180A2
000181E8 0441 0048                  		subi.w	#$48,d1
000181EC 6500                       		bcs.s	loc_180A2
000181EE E240                       		asr.w	#1,d0
000181F0 0441 0028                  		subi.w	#$28,d1
000181F4 6500                       		bcs.s	loc_180A2
000181F6 E240                       		asr.w	#1,d0
000181F8 0441 0028                  		subi.w	#$28,d1
000181FC 6500                       		bcs.s	loc_180A2
000181FE 7000                       		moveq	#0,d0
00018200                            
00018200                            loc_180A2:
00018200 48C0                       		ext.l	d0
00018202 E180                       		asl.l	#8,d0
00018204 4A28 003D                  		tst.b	$3D(a0)
00018208 6700                       		beq.s	loc_180AE
0001820A D080                       		add.l	d0,d0
0001820C                            
0001820C                            loc_180AE:
0001820C D1A8 0038                  		add.l	d0,$38(a0)
00018210 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018216 6000 FE8E                  		bra.w	loc_17F48
0001821A                            ; ===========================================================================
0001821A                            
0001821A                            loc_180BC:				; XREF: Obj77_ShipIndex
0001821A 70FE                       		moveq	#-2,d0
0001821C 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00018222 6500                       		bcs.s	loc_180D2
00018224 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
0001822A 4268 0010                  		clr.w	$10(a0)
0001822E 5240                       		addq.w	#1,d0
00018230                            
00018230                            loc_180D2:
00018230 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00018236 6E00                       		bgt.s	loc_180E6
00018238 317C 00C0 0038             		move.w	#$C0,$38(a0)
0001823E 4268 0012                  		clr.w	$12(a0)
00018242 5240                       		addq.w	#1,d0
00018244                            
00018244                            loc_180E6:
00018244 6600                       		bne.s	loc_180F2
00018246 5428 0025                  		addq.b	#2,$25(a0)
0001824A 08A8 0000 0022             		bclr	#0,$22(a0)
00018250                            
00018250                            loc_180F2:
00018250 6000 FE44                  		bra.w	loc_17F38
00018254                            ; ===========================================================================
00018254                            
00018254                            loc_180F6:				; XREF: Obj77_ShipIndex
00018254 4A28 003D                  		tst.b	$3D(a0)
00018258 6600                       		bne.s	loc_18112
0001825A 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00018260 6D00                       		blt.s	loc_18126
00018262 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
00018268 6E00                       		bgt.s	loc_18126
0001826A 117C 0032 003C             		move.b	#$32,$3C(a0)
00018270                            
00018270                            loc_18112:
00018270 303C 0082                  		move.w	#$82,d0
00018274 4EB9 0000 1396             		jsr	(PlaySound).l	; play LZ music
0001827A 08E8 0000 0022             		bset	#0,$22(a0)
00018280 5428 0025                  		addq.b	#2,$25(a0)
00018284                            
00018284                            loc_18126:
00018284 6000 FE10                  		bra.w	loc_17F38
00018288                            ; ===========================================================================
00018288                            
00018288                            loc_1812A:				; XREF: Obj77_ShipIndex
00018288 4A28 003D                  		tst.b	$3D(a0)
0001828C 6600                       		bne.s	loc_18136
0001828E 5328 003C                  		subq.b	#1,$3C(a0)
00018292 6600                       		bne.s	loc_1814E
00018294                            
00018294                            loc_18136:
00018294 4228 003C                  		clr.b	$3C(a0)
00018298 317C 0400 0010             		move.w	#$400,$10(a0)
0001829E 317C FFC0 0012             		move.w	#-$40,$12(a0)
000182A4 4228 003D                  		clr.b	$3D(a0)
000182A8 5428 0025                  		addq.b	#2,$25(a0)
000182AC                            
000182AC                            loc_1814E:
000182AC 6000 FDE8                  		bra.w	loc_17F38
000182B0                            ; ===========================================================================
000182B0                            
000182B0                            loc_18152:				; XREF: Obj77_ShipIndex
000182B0 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
000182B6 6400                       		bcc.s	loc_18160
000182B8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000182BC 6000                       		bra.s	loc_18166
000182BE                            ; ===========================================================================
000182BE                            
000182BE                            loc_18160:
000182BE 4A28 0001                  		tst.b	1(a0)
000182C2 6A00                       		bpl.s	Obj77_ShipDel
000182C4                            
000182C4                            loc_18166:
000182C4 6000 FDD0                  		bra.w	loc_17F38
000182C8                            ; ===========================================================================
000182C8                            
000182C8                            Obj77_ShipDel:
000182C8 4EF9 0000 D7B8             		jmp	DeleteObject
000182CE                            ; ===========================================================================
000182CE                            
000182CE                            Obj77_FaceMain:				; XREF: Obj77_Index
000182CE 2268 0034                  		movea.l	$34(a0),a1
000182D2 1011                       		move.b	(a1),d0
000182D4 B010                       		cmp.b	(a0),d0
000182D6 6600                       		bne.s	Obj77_FaceDel
000182D8 7000                       		moveq	#0,d0
000182DA 1029 0025                  		move.b	$25(a1),d0
000182DE 7201                       		moveq	#1,d1
000182E0 4A28 003D                  		tst.b	$3D(a0)
000182E4 6700                       		beq.s	loc_1818C
000182E6 720A                       		moveq	#$A,d1
000182E8 6000                       		bra.s	loc_181A0
000182EA                            ; ===========================================================================
000182EA                            
000182EA                            loc_1818C:
000182EA 4A29 0020                  		tst.b	$20(a1)
000182EE 6600                       		bne.s	loc_18196
000182F0 7205                       		moveq	#5,d1
000182F2 6000                       		bra.s	loc_181A0
000182F4                            ; ===========================================================================
000182F4                            
000182F4                            loc_18196:
000182F4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000182FA 6500                       		bcs.s	loc_181A0
000182FC 7204                       		moveq	#4,d1
000182FE                            
000182FE                            loc_181A0:
000182FE 1141 001C                  		move.b	d1,$1C(a0)
00018302 0C00 000E                  		cmpi.b	#$E,d0
00018306 6600                       		bne.s	loc_181B6
00018308 117C 0006 001C             		move.b	#6,$1C(a0)
0001830E 4A28 0001                  		tst.b	1(a0)
00018312 6A00                       		bpl.s	Obj77_FaceDel
00018314                            
00018314                            loc_181B6:
00018314 6000                       		bra.s	Obj77_Display
00018316                            ; ===========================================================================
00018316                            
00018316                            Obj77_FaceDel:
00018316 4EF9 0000 D7B8             		jmp	DeleteObject
0001831C                            ; ===========================================================================
0001831C                            
0001831C                            Obj77_FlameMain:			; XREF: Obj77_Index
0001831C 117C 0007 001C             		move.b	#7,$1C(a0)
00018322 2268 0034                  		movea.l	$34(a0),a1
00018326 1011                       		move.b	(a1),d0
00018328 B010                       		cmp.b	(a0),d0
0001832A 6600                       		bne.s	Obj77_FlameDel
0001832C 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
00018332 6600                       		bne.s	loc_181F0
00018334 117C 000B 001C             		move.b	#$B,$1C(a0)
0001833A 4A28 0001                  		tst.b	1(a0)
0001833E 6A00                       		bpl.s	Obj77_FlameDel
00018340 6000                       		bra.s	loc_181F0
00018342                            ; ===========================================================================
00018342 4A69 0010                  		tst.w	$10(a1)
00018346 6700                       		beq.s	loc_181F0
00018348 117C 0008 001C             		move.b	#8,$1C(a0)
0001834E                            
0001834E                            loc_181F0:
0001834E 6000                       		bra.s	Obj77_Display
00018350                            ; ===========================================================================
00018350                            
00018350                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018350 4EF9 0000 D7B8             		jmp	DeleteObject
00018356                            ; ===========================================================================
00018356                            
00018356                            Obj77_Display:
00018356 43F9 0001 7E1C             		lea	(Ani_Eggman).l,a1
0001835C 4EB9 0000 A7EE             		jsr	AnimateSprite
00018362 2268 0034                  		movea.l	$34(a0),a1
00018366 3169 0008 0008             		move.w	8(a1),8(a0)
0001836C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018372 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018378 7003                       		moveq	#3,d0
0001837A C028 0022                  		and.b	$22(a0),d0
0001837E 0228 00FC 0001             		andi.b	#-4,1(a0)
00018384 8128 0001                  		or.b	d0,1(a0)
00018388 4EF9 0000 D77C             		jmp	DisplaySprite
0001838E                            ; ===========================================================================
0001838E                            ; ---------------------------------------------------------------------------
0001838E                            ; Object 73 - Eggman (MZ)
0001838E                            ; ---------------------------------------------------------------------------
0001838E                            
0001838E                            Obj73:					; XREF: Obj_Index
0001838E 7000                       		moveq	#0,d0
00018390 1028 0024                  		move.b	$24(a0),d0
00018394 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00018398 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001839C                            ; ===========================================================================
0001839C 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001839E 0000                       		dc.w Obj73_ShipMain-Obj73_Index
000183A0 0000                       		dc.w Obj73_FaceMain-Obj73_Index
000183A2 0000                       		dc.w Obj73_FlameMain-Obj73_Index
000183A4 0000                       		dc.w Obj73_TubeMain-Obj73_Index
000183A6                            
000183A6 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000183A9 0401 04                    		dc.b 4,	1, 4
000183AC 0607 04                    		dc.b 6,	7, 4
000183AF 0800 03                    		dc.b 8,	0, 3
000183B2                            ; ===========================================================================
000183B2                            
000183B2                            Obj73_Main:				; XREF: Obj73_Index
000183B2 3168 0008 0030             		move.w	8(a0),$30(a0)
000183B8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000183BE 117C 000F 0020             		move.b	#$F,$20(a0)
000183C4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000183CA 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
000183CE 2248                       		movea.l	a0,a1
000183D0 7203                       		moveq	#3,d1
000183D2 6000                       		bra.s	Obj73_LoadBoss
000183D4                            ; ===========================================================================
000183D4                            
000183D4                            Obj73_Loop:
000183D4 4EB9 0000 DC18             		jsr	SingleObjLoad2
000183DA 6600                       		bne.s	Obj73_ShipMain
000183DC 12BC 0073                  		move.b	#$73,0(a1)
000183E0 3368 0008 0008             		move.w	8(a0),8(a1)
000183E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000183EC                            
000183EC                            Obj73_LoadBoss:				; XREF: Obj73_Main
000183EC 08A8 0000 0022             		bclr	#0,$22(a0)
000183F2 4229 0025                  		clr.b	$25(a1)
000183F6 135A 0024                  		move.b	(a2)+,$24(a1)
000183FA 135A 001C                  		move.b	(a2)+,$1C(a1)
000183FE 135A 0018                  		move.b	(a2)+,$18(a1)
00018402 237C 0001 7E6C 0004        		move.l	#Map_Eggman,4(a1)
0001840A 337C 0400 0002             		move.w	#$400,2(a1)
00018410 137C 0004 0001             		move.b	#4,1(a1)
00018416 137C 0020 0019             		move.b	#$20,$19(a1)
0001841C 2348 0034                  		move.l	a0,$34(a1)
00018420 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00018424                            
00018424                            Obj73_ShipMain:
00018424 7000                       		moveq	#0,d0
00018426 1028 0025                  		move.b	$25(a0),d0
0001842A 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001842E 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
00018432 43F9 0001 7E1C             		lea	(Ani_Eggman).l,a1
00018438 4EB9 0000 A7EE             		jsr	AnimateSprite
0001843E 7003                       		moveq	#3,d0
00018440 C028 0022                  		and.b	$22(a0),d0
00018444 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001844A 8128 0001                  		or.b	d0,1(a0)
0001844E 4EF9 0000 D77C             		jmp	DisplaySprite
00018454                            ; ===========================================================================
00018454 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018456 0000                       		dc.w loc_183AA-Obj73_ShipIndex
00018458 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001845A 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001845C 0000                       		dc.w loc_18582-Obj73_ShipIndex
0001845E                            ; ===========================================================================
0001845E                            
0001845E                            loc_18302:				; XREF: Obj73_ShipIndex
0001845E 1028 003F                  		move.b	$3F(a0),d0
00018462 5428 003F                  		addq.b	#2,$3F(a0)
00018466 4EB9 0000 29DA             		jsr	(CalcSine).l
0001846C E440                       		asr.w	#2,d0
0001846E 3140 0012                  		move.w	d0,$12(a0)
00018472 317C FF00 0010             		move.w	#-$100,$10(a0)
00018478 6100 F592                  		bsr.w	BossMove
0001847C 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018482 6600                       		bne.s	loc_18334
00018484 5428 0025                  		addq.b	#2,$25(a0)
00018488 4228 0028                  		clr.b	$28(a0)
0001848C 42A8 0010                  		clr.l	$10(a0)
00018490                            
00018490                            loc_18334:
00018490 4EB9 0000 29B4             		jsr	(RandomNumber).l
00018496 1140 0034                  		move.b	d0,$34(a0)
0001849A                            
0001849A                            loc_1833E:
0001849A 3168 0038 000C             		move.w	$38(a0),$C(a0)
000184A0 3168 0030 0008             		move.w	$30(a0),8(a0)
000184A6 0C28 0004 0025             		cmpi.b	#4,$25(a0)
000184AC 6400                       		bcc.s	locret_18390
000184AE 4A28 0022                  		tst.b	$22(a0)
000184B2 6B00                       		bmi.s	loc_18392
000184B4 4A28 0020                  		tst.b	$20(a0)
000184B8 6600                       		bne.s	locret_18390
000184BA 4A28 003E                  		tst.b	$3E(a0)
000184BE 6600                       		bne.s	loc_18374
000184C0 117C 0028 003E             		move.b	#$28,$3E(a0)
000184C6 303C 00AC                  		move.w	#$AC,d0
000184CA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
000184D0                            
000184D0                            loc_18374:
000184D0 43F8 FB22                  		lea	($FFFFFB22).w,a1
000184D4 7000                       		moveq	#0,d0
000184D6 4A51                       		tst.w	(a1)
000184D8 6600                       		bne.s	loc_18382
000184DA 303C 0EEE                  		move.w	#$EEE,d0
000184DE                            
000184DE                            loc_18382:
000184DE 3280                       		move.w	d0,(a1)
000184E0 5328 003E                  		subq.b	#1,$3E(a0)
000184E4 6600                       		bne.s	locret_18390
000184E6 117C 000F 0020             		move.b	#$F,$20(a0)
000184EC                            
000184EC                            locret_18390:
000184EC 4E75                       		rts	
000184EE                            ; ===========================================================================
000184EE                            
000184EE                            loc_18392:				; XREF: loc_1833E
000184EE 7064                       		moveq	#100,d0
000184F0 6100 0000                  		bsr.w	AddPoints
000184F4 117C 0004 0025             		move.b	#4,$25(a0)
000184FA 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00018500 4268 0010                  		clr.w	$10(a0)
00018504 4E75                       		rts	
00018506                            ; ===========================================================================
00018506                            
00018506                            loc_183AA:				; XREF: Obj73_ShipIndex
00018506 7000                       		moveq	#0,d0
00018508 1028 0028                  		move.b	$28(a0),d0
0001850C 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
00018510 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00018514 0228 0006 0028             		andi.b	#6,$28(a0)
0001851A 6000 FF7E                  		bra.w	loc_1833E
0001851E                            ; ===========================================================================
0001851E 0000                       off_183C2:	dc.w loc_183CA-off_183C2
00018520 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018522 0000                       		dc.w loc_183CA-off_183C2
00018524 0000                       		dc.w Obj73_MakeLava2-off_183C2
00018526                            ; ===========================================================================
00018526                            
00018526                            loc_183CA:				; XREF: off_183C2
00018526 4A68 0010                  		tst.w	$10(a0)
0001852A 6600                       		bne.s	loc_183FE
0001852C 7040                       		moveq	#$40,d0
0001852E 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00018534 6700                       		beq.s	loc_183E6
00018536 6500                       		bcs.s	loc_183DE
00018538 4440                       		neg.w	d0
0001853A                            
0001853A                            loc_183DE:
0001853A 3140 0012                  		move.w	d0,$12(a0)
0001853E 6000 F4CC                  		bra.w	BossMove
00018542                            ; ===========================================================================
00018542                            
00018542                            loc_183E6:
00018542 317C 0200 0010             		move.w	#$200,$10(a0)
00018548 317C 0100 0012             		move.w	#$100,$12(a0)
0001854E 0828 0000 0022             		btst	#0,$22(a0)
00018554 6600                       		bne.s	loc_183FE
00018556 4468 0010                  		neg.w	$10(a0)
0001855A                            
0001855A                            loc_183FE:
0001855A 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018560 6400                       		bcc.s	Obj73_MakeLava
00018562 6100 F4A8                  		bsr.w	BossMove
00018566 5968 0012                  		subq.w	#4,$12(a0)
0001856A                            
0001856A                            Obj73_MakeLava:
0001856A 5328 0034                  		subq.b	#1,$34(a0)
0001856E 6400                       		bcc.s	loc_1845C
00018570 4EB9 0000 DC02             		jsr	SingleObjLoad
00018576 6600                       		bne.s	loc_1844A
00018578 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001857C 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018582 4EB9 0000 29B4             		jsr	(RandomNumber).l
00018588 0280 0000 FFFF             		andi.l	#$FFFF,d0
0001858E 80FC 0050                  		divu.w	#$50,d0
00018592 4840                       		swap	d0
00018594 0640 1878                  		addi.w	#$1878,d0
00018598 3340 0008                  		move.w	d0,8(a1)
0001859C EE09                       		lsr.b	#7,d1
0001859E 337C 00FF 0028             		move.w	#$FF,$28(a1)
000185A4                            
000185A4                            loc_1844A:
000185A4 4EB9 0000 29B4             		jsr	(RandomNumber).l
000185AA 0200 001F                  		andi.b	#$1F,d0
000185AE 0600 0040                  		addi.b	#$40,d0
000185B2 1140 0034                  		move.b	d0,$34(a0)
000185B6                            
000185B6                            loc_1845C:
000185B6 0828 0000 0022             		btst	#0,$22(a0)
000185BC 6700                       		beq.s	loc_18474
000185BE 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000185C4 6D00                       		blt.s	locret_1849C
000185C6 317C 1910 0030             		move.w	#$1910,$30(a0)
000185CC 6000                       		bra.s	loc_18482
000185CE                            ; ===========================================================================
000185CE                            
000185CE                            loc_18474:
000185CE 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
000185D4 6E00                       		bgt.s	locret_1849C
000185D6 317C 1830 0030             		move.w	#$1830,$30(a0)
000185DC                            
000185DC                            loc_18482:
000185DC 4268 0010                  		clr.w	$10(a0)
000185E0 317C FE80 0012             		move.w	#-$180,$12(a0)
000185E6 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000185EC 6400                       		bcc.s	loc_18498
000185EE 4468 0012                  		neg.w	$12(a0)
000185F2                            
000185F2                            loc_18498:
000185F2 5428 0028                  		addq.b	#2,$28(a0)
000185F6                            
000185F6                            locret_1849C:
000185F6 4E75                       		rts	
000185F8                            ; ===========================================================================
000185F8                            
000185F8                            Obj73_MakeLava2:			; XREF: off_183C2
000185F8 6100 F412                  		bsr.w	BossMove
000185FC 3028 0038                  		move.w	$38(a0),d0
00018600 0440 022C                  		subi.w	#$22C,d0
00018604 6E00                       		bgt.s	locret_184F4
00018606 303C 022C                  		move.w	#$22C,d0
0001860A 4A68 0012                  		tst.w	$12(a0)
0001860E 6700                       		beq.s	loc_184EA
00018610 4268 0012                  		clr.w	$12(a0)
00018614 317C 0050 003C             		move.w	#$50,$3C(a0)
0001861A 0868 0000 0022             		bchg	#0,$22(a0)
00018620 4EB9 0000 DC02             		jsr	SingleObjLoad
00018626 6600                       		bne.s	loc_184EA
00018628 3368 0030 0008             		move.w	$30(a0),8(a1)
0001862E 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018634 0669 0018 000C             		addi.w	#$18,$C(a1)
0001863A 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
0001863E 137C 0001 0028             		move.b	#1,$28(a1)
00018644                            
00018644                            loc_184EA:
00018644 5368 003C                  		subq.w	#1,$3C(a0)
00018648 6600                       		bne.s	locret_184F4
0001864A 5428 0028                  		addq.b	#2,$28(a0)
0001864E                            
0001864E                            locret_184F4:
0001864E 4E75                       		rts	
00018650                            ; ===========================================================================
00018650                            
00018650                            loc_184F6:				; XREF: Obj73_ShipIndex
00018650 5368 003C                  		subq.w	#1,$3C(a0)
00018654 6B00                       		bmi.s	loc_18500
00018656 6000 F372                  		bra.w	BossDefeated
0001865A                            ; ===========================================================================
0001865A                            
0001865A                            loc_18500:
0001865A 08E8 0000 0022             		bset	#0,$22(a0)
00018660 08A8 0007 0022             		bclr	#7,$22(a0)
00018666 4268 0010                  		clr.w	$10(a0)
0001866A 5428 0025                  		addq.b	#2,$25(a0)
0001866E 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018674 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018678 6600                       		bne.s	locret_1852A
0001867A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018680 4268 0012                  		clr.w	$12(a0)
00018684                            
00018684                            locret_1852A:
00018684 4E75                       		rts	
00018686                            ; ===========================================================================
00018686                            
00018686                            loc_1852C:				; XREF: Obj73_ShipIndex
00018686 5268 003C                  		addq.w	#1,$3C(a0)
0001868A 6700                       		beq.s	loc_18544
0001868C 6A00                       		bpl.s	loc_1854E
0001868E 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018694 6400                       		bcc.s	loc_18544
00018696 0668 0018 0012             		addi.w	#$18,$12(a0)
0001869C 6000                       		bra.s	loc_1857A
0001869E                            ; ===========================================================================
0001869E                            
0001869E                            loc_18544:
0001869E 4268 0012                  		clr.w	$12(a0)
000186A2 4268 003C                  		clr.w	$3C(a0)
000186A6 6000                       		bra.s	loc_1857A
000186A8                            ; ===========================================================================
000186A8                            
000186A8                            loc_1854E:
000186A8 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000186AE 6500                       		bcs.s	loc_18566
000186B0 6700                       		beq.s	loc_1856C
000186B2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000186B8 6500                       		bcs.s	loc_1857A
000186BA 5428 0025                  		addq.b	#2,$25(a0)
000186BE 6000                       		bra.s	loc_1857A
000186C0                            ; ===========================================================================
000186C0                            
000186C0                            loc_18566:
000186C0 5168 0012                  		subq.w	#8,$12(a0)
000186C4 6000                       		bra.s	loc_1857A
000186C6                            ; ===========================================================================
000186C6                            
000186C6                            loc_1856C:
000186C6 4268 0012                  		clr.w	$12(a0)
000186CA 303C 0083                  		move.w	#$83,d0
000186CE 4EB9 0000 1396             		jsr	(PlaySound).l	; play MZ music
000186D4                            
000186D4                            loc_1857A:
000186D4 6100 F336                  		bsr.w	BossMove
000186D8 6000 FDC0                  		bra.w	loc_1833E
000186DC                            ; ===========================================================================
000186DC                            
000186DC                            loc_18582:				; XREF: Obj73_ShipIndex
000186DC 317C 0500 0010             		move.w	#$500,$10(a0)
000186E2 317C FFC0 0012             		move.w	#-$40,$12(a0)
000186E8 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
000186EE 6400                       		bcc.s	loc_1859C
000186F0 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000186F4 6000                       		bra.s	loc_185A2
000186F6                            ; ===========================================================================
000186F6                            
000186F6                            loc_1859C:
000186F6 4A28 0001                  		tst.b	1(a0)
000186FA 6A00                       		bpl.s	Obj73_ShipDel
000186FC                            
000186FC                            loc_185A2:
000186FC 6100 F30E                  		bsr.w	BossMove
00018700 6000 FD98                  		bra.w	loc_1833E
00018704                            ; ===========================================================================
00018704                            
00018704                            Obj73_ShipDel:
00018704 4EF9 0000 D7B8             		jmp	DeleteObject
0001870A                            ; ===========================================================================
0001870A                            
0001870A                            Obj73_FaceMain:				; XREF: Obj73_Index
0001870A 7000                       		moveq	#0,d0
0001870C 7201                       		moveq	#1,d1
0001870E 2268 0034                  		movea.l	$34(a0),a1
00018712 1029 0025                  		move.b	$25(a1),d0
00018716 5540                       		subq.w	#2,d0
00018718 6600                       		bne.s	loc_185D2
0001871A 0829 0001 0028             		btst	#1,$28(a1)
00018720 6700                       		beq.s	loc_185DA
00018722 4A69 0012                  		tst.w	$12(a1)
00018726 6600                       		bne.s	loc_185DA
00018728 7204                       		moveq	#4,d1
0001872A 6000                       		bra.s	loc_185EE
0001872C                            ; ===========================================================================
0001872C                            
0001872C                            loc_185D2:
0001872C 5500                       		subq.b	#2,d0
0001872E 6B00                       		bmi.s	loc_185DA
00018730 720A                       		moveq	#$A,d1
00018732 6000                       		bra.s	loc_185EE
00018734                            ; ===========================================================================
00018734                            
00018734                            loc_185DA:
00018734 4A29 0020                  		tst.b	$20(a1)
00018738 6600                       		bne.s	loc_185E4
0001873A 7205                       		moveq	#5,d1
0001873C 6000                       		bra.s	loc_185EE
0001873E                            ; ===========================================================================
0001873E                            
0001873E                            loc_185E4:
0001873E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018744 6500                       		bcs.s	loc_185EE
00018746 7204                       		moveq	#4,d1
00018748                            
00018748                            loc_185EE:
00018748 1141 001C                  		move.b	d1,$1C(a0)
0001874C 5900                       		subq.b	#4,d0
0001874E 6600                       		bne.s	loc_18602
00018750 117C 0006 001C             		move.b	#6,$1C(a0)
00018756 4A28 0001                  		tst.b	1(a0)
0001875A 6A00                       		bpl.s	Obj73_FaceDel
0001875C                            
0001875C                            loc_18602:
0001875C 6000                       		bra.s	Obj73_Display
0001875E                            ; ===========================================================================
0001875E                            
0001875E                            Obj73_FaceDel:
0001875E 4EF9 0000 D7B8             		jmp	DeleteObject
00018764                            ; ===========================================================================
00018764                            
00018764                            Obj73_FlameMain:			; XREF: Obj73_Index
00018764 117C 0007 001C             		move.b	#7,$1C(a0)
0001876A 2268 0034                  		movea.l	$34(a0),a1
0001876E 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018774 6D00                       		blt.s	loc_1862A
00018776 117C 000B 001C             		move.b	#$B,$1C(a0)
0001877C 4A28 0001                  		tst.b	1(a0)
00018780 6A00                       		bpl.s	Obj73_FlameDel
00018782 6000                       		bra.s	loc_18636
00018784                            ; ===========================================================================
00018784                            
00018784                            loc_1862A:
00018784 4A69 0010                  		tst.w	$10(a1)
00018788 6700                       		beq.s	loc_18636
0001878A 117C 0008 001C             		move.b	#8,$1C(a0)
00018790                            
00018790                            loc_18636:
00018790 6000                       		bra.s	Obj73_Display
00018792                            ; ===========================================================================
00018792                            
00018792                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018792 4EF9 0000 D7B8             		jmp	DeleteObject
00018798                            ; ===========================================================================
00018798                            
00018798                            Obj73_Display:
00018798 43F9 0001 7E1C             		lea	(Ani_Eggman).l,a1
0001879E 4EB9 0000 A7EE             		jsr	AnimateSprite
000187A4                            
000187A4                            loc_1864A:
000187A4 2268 0034                  		movea.l	$34(a0),a1
000187A8 3169 0008 0008             		move.w	8(a1),8(a0)
000187AE 3169 000C 000C             		move.w	$C(a1),$C(a0)
000187B4 1169 0022 0022             		move.b	$22(a1),$22(a0)
000187BA 7003                       		moveq	#3,d0
000187BC C028 0022                  		and.b	$22(a0),d0
000187C0 0228 00FC 0001             		andi.b	#-4,1(a0)
000187C6 8128 0001                  		or.b	d0,1(a0)
000187CA 4EF9 0000 D77C             		jmp	DisplaySprite
000187D0                            ; ===========================================================================
000187D0                            
000187D0                            Obj73_TubeMain:				; XREF: Obj73_Index
000187D0 2268 0034                  		movea.l	$34(a0),a1
000187D4 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000187DA 6600                       		bne.s	loc_18688
000187DC 4A28 0001                  		tst.b	1(a0)
000187E0 6A00                       		bpl.s	Obj73_TubeDel
000187E2                            
000187E2                            loc_18688:
000187E2 217C 0001 7F34 0004        		move.l	#Map_BossItems,4(a0)
000187EA 317C 246C 0002             		move.w	#$246C,2(a0)
000187F0 117C 0004 001A             		move.b	#4,$1A(a0)
000187F6 60AC                       		bra.s	loc_1864A
000187F8                            ; ===========================================================================
000187F8                            
000187F8                            Obj73_TubeDel:
000187F8 4EF9 0000 D7B8             		jmp	DeleteObject
000187FE                            ; ===========================================================================
000187FE                            ; ---------------------------------------------------------------------------
000187FE                            ; Object 74 - lava that	Eggman drops (MZ)
000187FE                            ; ---------------------------------------------------------------------------
000187FE                            
000187FE                            Obj74:					; XREF: Obj_Index
000187FE 7000                       		moveq	#0,d0
00018800 1028 0024                  		move.b	$24(a0),d0
00018804 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00018808 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
0001880C 4EF9 0000 D77C             		jmp	DisplaySprite
00018812                            ; ===========================================================================
00018812 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00018814 0000                       		dc.w Obj74_Action-Obj74_Index
00018816 0000                       		dc.w loc_18886-Obj74_Index
00018818 0000                       		dc.w Obj74_Delete3-Obj74_Index
0001881A                            ; ===========================================================================
0001881A                            
0001881A                            Obj74_Main:				; XREF: Obj74_Index
0001881A 117C 0008 0016             		move.b	#8,$16(a0)
00018820 117C 0008 0017             		move.b	#8,$17(a0)
00018826 217C 0000 B440 0004        		move.l	#Map_obj14,4(a0)
0001882E 317C 0345 0002             		move.w	#$345,2(a0)
00018834 117C 0004 0001             		move.b	#4,1(a0)
0001883A 117C 0005 0018             		move.b	#5,$18(a0)
00018840 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018846 117C 0008 0019             		move.b	#8,$19(a0)
0001884C 5428 0024                  		addq.b	#2,$24(a0)
00018850 4A28 0028                  		tst.b	$28(a0)
00018854 6600                       		bne.s	loc_1870A
00018856 117C 008B 0020             		move.b	#$8B,$20(a0)
0001885C 5428 0024                  		addq.b	#2,$24(a0)
00018860 6000 0000                  		bra.w	loc_18886
00018864                            ; ===========================================================================
00018864                            
00018864                            loc_1870A:
00018864 117C 001E 0029             		move.b	#$1E,$29(a0)
0001886A 303C 00AE                  		move.w	#$AE,d0
0001886E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava sound
00018874                            
00018874                            Obj74_Action:				; XREF: Obj74_Index
00018874 7000                       		moveq	#0,d0
00018876 1028 0025                  		move.b	$25(a0),d0
0001887A 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
0001887E 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018882 4EB9 0000 D756             		jsr	SpeedToPos
00018888 43F9 0000 E636             		lea	(Ani_obj14).l,a1
0001888E 4EB9 0000 A7EE             		jsr	AnimateSprite
00018894 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001889A 6200                       		bhi.s	Obj74_Delete
0001889C 4E75                       		rts	
0001889E                            ; ===========================================================================
0001889E                            
0001889E                            Obj74_Delete:
0001889E 4EF9 0000 D7B8             		jmp	DeleteObject
000188A4                            ; ===========================================================================
000188A4 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
000188A6 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
000188A8 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
000188AA 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
000188AC                            ; ===========================================================================
000188AC                            
000188AC                            Obj74_Drop:				; XREF: Obj74_Index2
000188AC 08E8 0001 0022             		bset	#1,$22(a0)
000188B2 5328 0029                  		subq.b	#1,$29(a0)
000188B6 6A00                       		bpl.s	locret_18780
000188B8 117C 008B 0020             		move.b	#$8B,$20(a0)
000188BE 4228 0028                  		clr.b	$28(a0)
000188C2 0668 0018 0012             		addi.w	#$18,$12(a0)
000188C8 08A8 0001 0022             		bclr	#1,$22(a0)
000188CE 6100 C6A8                  		bsr.w	ObjHitFloor
000188D2 4A41                       		tst.w	d1
000188D4 6A00                       		bpl.s	locret_18780
000188D6 5428 0025                  		addq.b	#2,$25(a0)
000188DA                            
000188DA                            locret_18780:
000188DA 4E75                       		rts	
000188DC                            ; ===========================================================================
000188DC                            
000188DC                            Obj74_MakeFlame:			; XREF: Obj74_Index2
000188DC 5568 000C                  		subq.w	#2,$C(a0)
000188E0 08E8 0007 0002             		bset	#7,2(a0)
000188E6 317C 00A0 0010             		move.w	#$A0,$10(a0)
000188EC 4268 0012                  		clr.w	$12(a0)
000188F0 3168 0008 0030             		move.w	8(a0),$30(a0)
000188F6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000188FC 117C 0003 0029             		move.b	#3,$29(a0)
00018902 4EB9 0000 DC18             		jsr	SingleObjLoad2
00018908 6600                       		bne.s	loc_187CA
0001890A 47D1                       		lea	(a1),a3
0001890C 45D0                       		lea	(a0),a2
0001890E 7003                       		moveq	#3,d0
00018910                            
00018910                            Obj74_Loop:
00018910 26DA                       		move.l	(a2)+,(a3)+
00018912 26DA                       		move.l	(a2)+,(a3)+
00018914 26DA                       		move.l	(a2)+,(a3)+
00018916 26DA                       		move.l	(a2)+,(a3)+
00018918 51C8 FFF6                  		dbf	d0,Obj74_Loop
0001891C                            
0001891C 4469 0010                  		neg.w	$10(a1)
00018920 5429 0025                  		addq.b	#2,$25(a1)
00018924                            
00018924                            loc_187CA:
00018924 5428 0025                  		addq.b	#2,$25(a0)
00018928 4E75                       		rts	
0001892A                            
0001892A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001892A                            
0001892A                            
0001892A                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
0001892A 4EB9 0000 DC18             		jsr	SingleObjLoad2
00018930 6600                       		bne.s	locret_187EE
00018932 3368 0008 0008             		move.w	8(a0),8(a1)
00018938 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001893E 12BC 0074                  		move.b	#$74,(a1)
00018942 337C 0067 0028             		move.w	#$67,$28(a1)
00018948                            
00018948                            locret_187EE:
00018948 4E75                       		rts	
0001894A                            ; End of function Obj74_Duplicate2
0001894A                            
0001894A                            ; ===========================================================================
0001894A                            
0001894A                            Obj74_Duplicate:			; XREF: Obj74_Index2
0001894A 6100 C62C                  		bsr.w	ObjHitFloor
0001894E 4A41                       		tst.w	d1
00018950 6A00                       		bpl.s	loc_18826
00018952 3028 0008                  		move.w	8(a0),d0
00018956 0C40 1940                  		cmpi.w	#$1940,d0
0001895A 6E00                       		bgt.s	loc_1882C
0001895C 3228 0030                  		move.w	$30(a0),d1
00018960 B240                       		cmp.w	d0,d1
00018962 6700                       		beq.s	loc_1881E
00018964 0240 0010                  		andi.w	#$10,d0
00018968 0241 0010                  		andi.w	#$10,d1
0001896C B240                       		cmp.w	d0,d1
0001896E 6700                       		beq.s	loc_1881E
00018970 61B8                       		bsr.s	Obj74_Duplicate2
00018972 3168 0008 0032             		move.w	8(a0),$32(a0)
00018978                            
00018978                            loc_1881E:
00018978 3168 0008 0030             		move.w	8(a0),$30(a0)
0001897E 4E75                       		rts	
00018980                            ; ===========================================================================
00018980                            
00018980                            loc_18826:
00018980 5428 0025                  		addq.b	#2,$25(a0)
00018984 4E75                       		rts	
00018986                            ; ===========================================================================
00018986                            
00018986                            loc_1882C:
00018986 5428 0024                  		addq.b	#2,$24(a0)
0001898A 4E75                       		rts	
0001898C                            ; ===========================================================================
0001898C                            
0001898C                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001898C 08A8 0001 0022             		bclr	#1,$22(a0)
00018992 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00018998 3028 0008                  		move.w	8(a0),d0
0001899C 9068 0032                  		sub.w	$32(a0),d0
000189A0 6A00                       		bpl.s	loc_1884A
000189A2 4440                       		neg.w	d0
000189A4                            
000189A4                            loc_1884A:
000189A4 0C40 0012                  		cmpi.w	#$12,d0
000189A8 6600                       		bne.s	loc_18856
000189AA 08A8 0007 0002             		bclr	#7,2(a0)
000189B0                            
000189B0                            loc_18856:
000189B0 6100 C5C6                  		bsr.w	ObjHitFloor
000189B4 4A41                       		tst.w	d1
000189B6 6A00                       		bpl.s	locret_1887E
000189B8 5328 0029                  		subq.b	#1,$29(a0)
000189BC 6700                       		beq.s	Obj74_Delete2
000189BE 4268 0012                  		clr.w	$12(a0)
000189C2 3168 0032 0008             		move.w	$32(a0),8(a0)
000189C8 3168 0038 000C             		move.w	$38(a0),$C(a0)
000189CE 08E8 0007 0002             		bset	#7,2(a0)
000189D4 5528 0025                  		subq.b	#2,$25(a0)
000189D8                            
000189D8                            locret_1887E:
000189D8 4E75                       		rts	
000189DA                            ; ===========================================================================
000189DA                            
000189DA                            Obj74_Delete2:
000189DA 4EF9 0000 D7B8             		jmp	DeleteObject
000189E0                            ; ===========================================================================
000189E0                            
000189E0                            loc_18886:				; XREF: Obj74_Index
000189E0 08E8 0007 0002             		bset	#7,2(a0)
000189E6 5328 0029                  		subq.b	#1,$29(a0)
000189EA 6600                       		bne.s	Obj74_Animate
000189EC 117C 0001 001C             		move.b	#1,$1C(a0)
000189F2 5968 000C                  		subq.w	#4,$C(a0)
000189F6 4228 0020                  		clr.b	$20(a0)
000189FA                            
000189FA                            Obj74_Animate:
000189FA 43F9 0000 E636             		lea	(Ani_obj14).l,a1
00018A00 4EF9 0000 A7EE             		jmp	AnimateSprite
00018A06                            ; ===========================================================================
00018A06                            
00018A06                            Obj74_Delete3:				; XREF: Obj74_Index
00018A06 4EF9 0000 D7B8             		jmp	DeleteObject
00018A0C                            ; ===========================================================================
00018A0C                            
00018A0C                            Obj7A_Delete:
00018A0C 4EF9 0000 D7B8             		jmp	DeleteObject
00018A12                            ; ===========================================================================
00018A12                            ; ---------------------------------------------------------------------------
00018A12                            ; Object 7A - Eggman (SLZ)
00018A12                            ; ---------------------------------------------------------------------------
00018A12                            
00018A12                            Obj7A:					; XREF: Obj_Index
00018A12 7000                       		moveq	#0,d0
00018A14 1028 0024                  		move.b	$24(a0),d0
00018A18 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00018A1C 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00018A20                            ; ===========================================================================
00018A20 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00018A22 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00018A24 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00018A26 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00018A28 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00018A2A                            
00018A2A 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00018A2D 0401 04                    		dc.b 4,	1, 4
00018A30 0607 04                    		dc.b 6,	7, 4
00018A33 0800 03                    		dc.b 8,	0, 3
00018A36                            ; ===========================================================================
00018A36                            
00018A36                            Obj7A_Main:				; XREF: Obj7A_Index
00018A36 317C 2188 0008             		move.w	#$2188,8(a0)
00018A3C 317C 0228 000C             		move.w	#$228,$C(a0)
00018A42 3168 0008 0030             		move.w	8(a0),$30(a0)
00018A48 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018A4E 117C 000F 0020             		move.b	#$F,$20(a0)
00018A54 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00018A5A 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018A5E 2248                       		movea.l	a0,a1
00018A60 7203                       		moveq	#3,d1
00018A62 6000                       		bra.s	Obj7A_LoadBoss
00018A64                            ; ===========================================================================
00018A64                            
00018A64                            Obj7A_Loop:
00018A64 4EB9 0000 DC18             		jsr	SingleObjLoad2
00018A6A 6600                       		bne.s	loc_1895C
00018A6C 12BC 007A                  		move.b	#$7A,0(a1)
00018A70 3368 0008 0008             		move.w	8(a0),8(a1)
00018A76 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A7C                            
00018A7C                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00018A7C 08A8 0000 0022             		bclr	#0,$22(a0)
00018A82 4229 0025                  		clr.b	$25(a1)
00018A86 135A 0024                  		move.b	(a2)+,$24(a1)
00018A8A 135A 001C                  		move.b	(a2)+,$1C(a1)
00018A8E 135A 0018                  		move.b	(a2)+,$18(a1)
00018A92 237C 0001 7E6C 0004        		move.l	#Map_Eggman,4(a1)
00018A9A 337C 0400 0002             		move.w	#$400,2(a1)
00018AA0 137C 0004 0001             		move.b	#4,1(a1)
00018AA6 137C 0020 0019             		move.b	#$20,$19(a1)
00018AAC 2348 0034                  		move.l	a0,$34(a1)
00018AB0 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018AB4                            
00018AB4                            loc_1895C:
00018AB4 43F8 D040                  		lea	($FFFFD040).w,a1
00018AB8 45E8 002A                  		lea	$2A(a0),a2
00018ABC 705E                       		moveq	#$5E,d0
00018ABE 723E                       		moveq	#$3E,d1
00018AC0                            
00018AC0                            loc_18968:
00018AC0 B011                       		cmp.b	(a1),d0
00018AC2 6600                       		bne.s	loc_18974
00018AC4 4A29 0028                  		tst.b	$28(a1)
00018AC8 6700                       		beq.s	loc_18974
00018ACA 34C9                       		move.w	a1,(a2)+
00018ACC                            
00018ACC                            loc_18974:
00018ACC D2FC 0040                  		adda.w	#$40,a1
00018AD0 51C9 FFEE                  		dbf	d1,loc_18968
00018AD4                            
00018AD4                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018AD4 7000                       		moveq	#0,d0
00018AD6 1028 0025                  		move.b	$25(a0),d0
00018ADA 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018ADE 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018AE2 43F9 0001 7E1C             		lea	(Ani_Eggman).l,a1
00018AE8 4EB9 0000 A7EE             		jsr	AnimateSprite
00018AEE 7003                       		moveq	#3,d0
00018AF0 C028 0022                  		and.b	$22(a0),d0
00018AF4 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018AFA 8128 0001                  		or.b	d0,1(a0)
00018AFE 4EF9 0000 D77C             		jmp	DisplaySprite
00018B04                            ; ===========================================================================
00018B04 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00018B06 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00018B08 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00018B0A 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00018B0C 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00018B0E 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00018B10                            ; ===========================================================================
00018B10                            
00018B10                            loc_189B8:				; XREF: Obj7A_ShipIndex
00018B10 317C FF00 0010             		move.w	#-$100,$10(a0)
00018B16 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00018B1C 6400                       		bcc.s	loc_189CA
00018B1E 5428 0025                  		addq.b	#2,$25(a0)
00018B22                            
00018B22                            loc_189CA:
00018B22 6100 EEE8                  		bsr.w	BossMove
00018B26 1028 003F                  		move.b	$3F(a0),d0
00018B2A 5428 003F                  		addq.b	#2,$3F(a0)
00018B2E 4EB9 0000 29DA             		jsr	(CalcSine).l
00018B34 EC40                       		asr.w	#6,d0
00018B36 D068 0038                  		add.w	$38(a0),d0
00018B3A 3140 000C                  		move.w	d0,$C(a0)
00018B3E 3168 0030 0008             		move.w	$30(a0),8(a0)
00018B44 6000                       		bra.s	loc_189FE
00018B46                            ; ===========================================================================
00018B46                            
00018B46                            loc_189EE:
00018B46 6100 EEC4                  		bsr.w	BossMove
00018B4A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018B50 3168 0030 0008             		move.w	$30(a0),8(a0)
00018B56                            
00018B56                            loc_189FE:
00018B56 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00018B5C 6400                       		bcc.s	locret_18A44
00018B5E 4A28 0022                  		tst.b	$22(a0)
00018B62 6B00                       		bmi.s	loc_18A46
00018B64 4A28 0020                  		tst.b	$20(a0)
00018B68 6600                       		bne.s	locret_18A44
00018B6A 4A28 003E                  		tst.b	$3E(a0)
00018B6E 6600                       		bne.s	loc_18A28
00018B70 117C 0020 003E             		move.b	#$20,$3E(a0)
00018B76 303C 00AC                  		move.w	#$AC,d0
00018B7A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018B80                            
00018B80                            loc_18A28:
00018B80 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018B84 7000                       		moveq	#0,d0
00018B86 4A51                       		tst.w	(a1)
00018B88 6600                       		bne.s	loc_18A36
00018B8A 303C 0EEE                  		move.w	#$EEE,d0
00018B8E                            
00018B8E                            loc_18A36:
00018B8E 3280                       		move.w	d0,(a1)
00018B90 5328 003E                  		subq.b	#1,$3E(a0)
00018B94 6600                       		bne.s	locret_18A44
00018B96 117C 000F 0020             		move.b	#$F,$20(a0)
00018B9C                            
00018B9C                            locret_18A44:
00018B9C 4E75                       		rts	
00018B9E                            ; ===========================================================================
00018B9E                            
00018B9E                            loc_18A46:
00018B9E 7064                       		moveq	#100,d0
00018BA0 6100 0000                  		bsr.w	AddPoints
00018BA4 117C 0006 0025             		move.b	#6,$25(a0)
00018BAA 117C 0078 003C             		move.b	#$78,$3C(a0)
00018BB0 4268 0010                  		clr.w	$10(a0)
00018BB4 4E75                       		rts	
00018BB6                            ; ===========================================================================
00018BB6                            
00018BB6                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00018BB6 3028 0030                  		move.w	$30(a0),d0
00018BBA 317C 0200 0010             		move.w	#$200,$10(a0)
00018BC0 0828 0000 0022             		btst	#0,$22(a0)
00018BC6 6600                       		bne.s	loc_18A7C
00018BC8 4468 0010                  		neg.w	$10(a0)
00018BCC 0C40 2008                  		cmpi.w	#$2008,d0
00018BD0 6E00                       		bgt.s	loc_18A88
00018BD2 6000                       		bra.s	loc_18A82
00018BD4                            ; ===========================================================================
00018BD4                            
00018BD4                            loc_18A7C:
00018BD4 0C40 2138                  		cmpi.w	#$2138,d0
00018BD8 6D00                       		blt.s	loc_18A88
00018BDA                            
00018BDA                            loc_18A82:
00018BDA 0868 0000 0022             		bchg	#0,$22(a0)
00018BE0                            
00018BE0                            loc_18A88:
00018BE0 3028 0008                  		move.w	8(a0),d0
00018BE4 72FF                       		moveq	#-1,d1
00018BE6 7402                       		moveq	#2,d2
00018BE8 45E8 002A                  		lea	$2A(a0),a2
00018BEC 7828                       		moveq	#$28,d4
00018BEE 4A68 0010                  		tst.w	$10(a0)
00018BF2 6A00                       		bpl.s	loc_18A9E
00018BF4 4444                       		neg.w	d4
00018BF6                            
00018BF6                            loc_18A9E:
00018BF6 321A                       		move.w	(a2)+,d1
00018BF8 2641                       		movea.l	d1,a3
00018BFA 082B 0003 0022             		btst	#3,$22(a3)
00018C00 6600                       		bne.s	loc_18AB4
00018C02 362B 0008                  		move.w	8(a3),d3
00018C06 D644                       		add.w	d4,d3
00018C08 9640                       		sub.w	d0,d3
00018C0A 6700                       		beq.s	loc_18AC0
00018C0C                            
00018C0C                            loc_18AB4:
00018C0C 51CA FFE8                  		dbf	d2,loc_18A9E
00018C10                            
00018C10 1142 0028                  		move.b	d2,$28(a0)
00018C14 6000 FF0C                  		bra.w	loc_189CA
00018C18                            ; ===========================================================================
00018C18                            
00018C18                            loc_18AC0:
00018C18 1142 0028                  		move.b	d2,$28(a0)
00018C1C 5428 0025                  		addq.b	#2,$25(a0)
00018C20 117C 0028 003C             		move.b	#$28,$3C(a0)
00018C26 6000 FEFA                  		bra.w	loc_189CA
00018C2A                            ; ===========================================================================
00018C2A                            
00018C2A                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00018C2A 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00018C30 6600                       		bne.s	loc_18B36
00018C32 70FF                       		moveq	#-1,d0
00018C34 1028 0028                  		move.b	$28(a0),d0
00018C38 4880                       		ext.w	d0
00018C3A 6B00                       		bmi.s	loc_18B40
00018C3C 5540                       		subq.w	#2,d0
00018C3E 4440                       		neg.w	d0
00018C40 D040                       		add.w	d0,d0
00018C42 43E8 002A                  		lea	$2A(a0),a1
00018C46 3031 0000                  		move.w	(a1,d0.w),d0
00018C4A 2440                       		movea.l	d0,a2
00018C4C 43F8 D040                  		lea	($FFFFD040).w,a1
00018C50 723E                       		moveq	#$3E,d1
00018C52                            
00018C52                            loc_18AFA:
00018C52 B0A9 003C                  		cmp.l	$3C(a1),d0
00018C56 6700                       		beq.s	loc_18B40
00018C58 D2FC 0040                  		adda.w	#$40,a1
00018C5C 51C9 FFF4                  		dbf	d1,loc_18AFA
00018C60                            
00018C60 2F08                       		move.l	a0,-(sp)
00018C62 41D2                       		lea	(a2),a0
00018C64 4EB9 0000 DC18             		jsr	SingleObjLoad2
00018C6A 205F                       		movea.l	(sp)+,a0
00018C6C 6600                       		bne.s	loc_18B40
00018C6E 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00018C72 3368 0008 0008             		move.w	8(a0),8(a1)
00018C78 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018C7E 0669 0020 000C             		addi.w	#$20,$C(a1)
00018C84 136A 0022 0022             		move.b	$22(a2),$22(a1)
00018C8A 234A 003C                  		move.l	a2,$3C(a1)
00018C8E                            
00018C8E                            loc_18B36:
00018C8E 5328 003C                  		subq.b	#1,$3C(a0)
00018C92 6700                       		beq.s	loc_18B40
00018C94 6000 FEC0                  		bra.w	loc_189FE
00018C98                            ; ===========================================================================
00018C98                            
00018C98                            loc_18B40:
00018C98 5528 0025                  		subq.b	#2,$25(a0)
00018C9C 6000 FE84                  		bra.w	loc_189CA
00018CA0                            ; ===========================================================================
00018CA0                            
00018CA0                            loc_18B48:				; XREF: Obj7A_ShipIndex
00018CA0 5328 003C                  		subq.b	#1,$3C(a0)
00018CA4 6B00                       		bmi.s	loc_18B52
00018CA6 6000 ED22                  		bra.w	BossDefeated
00018CAA                            ; ===========================================================================
00018CAA                            
00018CAA                            loc_18B52:
00018CAA 5428 0025                  		addq.b	#2,$25(a0)
00018CAE 4268 0012                  		clr.w	$12(a0)
00018CB2 08E8 0000 0022             		bset	#0,$22(a0)
00018CB8 08A8 0007 0022             		bclr	#7,$22(a0)
00018CBE 4268 0010                  		clr.w	$10(a0)
00018CC2 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00018CC8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018CCC 6600                       		bne.s	loc_18B7C
00018CCE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018CD4                            
00018CD4                            loc_18B7C:
00018CD4 6000 FE80                  		bra.w	loc_189FE
00018CD8                            ; ===========================================================================
00018CD8                            
00018CD8                            loc_18B80:				; XREF: Obj7A_ShipIndex
00018CD8 5228 003C                  		addq.b	#1,$3C(a0)
00018CDC 6700                       		beq.s	loc_18B90
00018CDE 6A00                       		bpl.s	loc_18B96
00018CE0 0668 0018 0012             		addi.w	#$18,$12(a0)
00018CE6 6000                       		bra.s	loc_18BC2
00018CE8                            ; ===========================================================================
00018CE8                            
00018CE8                            loc_18B90:
00018CE8 4268 0012                  		clr.w	$12(a0)
00018CEC 6000                       		bra.s	loc_18BC2
00018CEE                            ; ===========================================================================
00018CEE                            
00018CEE                            loc_18B96:
00018CEE 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00018CF4 6500                       		bcs.s	loc_18BAE
00018CF6 6700                       		beq.s	loc_18BB4
00018CF8 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00018CFE 6500                       		bcs.s	loc_18BC2
00018D00 5428 0025                  		addq.b	#2,$25(a0)
00018D04 6000                       		bra.s	loc_18BC2
00018D06                            ; ===========================================================================
00018D06                            
00018D06                            loc_18BAE:
00018D06 5168 0012                  		subq.w	#8,$12(a0)
00018D0A 6000                       		bra.s	loc_18BC2
00018D0C                            ; ===========================================================================
00018D0C                            
00018D0C                            loc_18BB4:
00018D0C 4268 0012                  		clr.w	$12(a0)
00018D10 303C 0084                  		move.w	#$84,d0
00018D14 4EB9 0000 1396             		jsr	(PlaySound).l	; play SLZ music
00018D1A                            
00018D1A                            loc_18BC2:
00018D1A 6000 FE2A                  		bra.w	loc_189EE
00018D1E                            ; ===========================================================================
00018D1E                            
00018D1E                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00018D1E 317C 0400 0010             		move.w	#$400,$10(a0)
00018D24 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018D2A 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00018D30 6400                       		bcc.s	loc_18BE0
00018D32 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018D36 6000                       		bra.s	loc_18BE8
00018D38                            ; ===========================================================================
00018D38                            
00018D38                            loc_18BE0:
00018D38 4A28 0001                  		tst.b	1(a0)
00018D3C 6A00 FCCE                  		bpl.w	Obj7A_Delete
00018D40                            
00018D40                            loc_18BE8:
00018D40 6100 ECCA                  		bsr.w	BossMove
00018D44 6000 FDDC                  		bra.w	loc_189CA
00018D48                            ; ===========================================================================
00018D48                            
00018D48                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00018D48 7000                       		moveq	#0,d0
00018D4A 7201                       		moveq	#1,d1
00018D4C 2268 0034                  		movea.l	$34(a0),a1
00018D50 1029 0025                  		move.b	$25(a1),d0
00018D54 0C00 0006                  		cmpi.b	#6,d0
00018D58 6B00                       		bmi.s	loc_18C06
00018D5A 720A                       		moveq	#$A,d1
00018D5C 6000                       		bra.s	loc_18C1A
00018D5E                            ; ===========================================================================
00018D5E                            
00018D5E                            loc_18C06:
00018D5E 4A29 0020                  		tst.b	$20(a1)
00018D62 6600                       		bne.s	loc_18C10
00018D64 7205                       		moveq	#5,d1
00018D66 6000                       		bra.s	loc_18C1A
00018D68                            ; ===========================================================================
00018D68                            
00018D68                            loc_18C10:
00018D68 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018D6E 6500                       		bcs.s	loc_18C1A
00018D70 7204                       		moveq	#4,d1
00018D72                            
00018D72                            loc_18C1A:
00018D72 1141 001C                  		move.b	d1,$1C(a0)
00018D76 0C00 000A                  		cmpi.b	#$A,d0
00018D7A 6600                       		bne.s	loc_18C32
00018D7C 117C 0006 001C             		move.b	#6,$1C(a0)
00018D82 4A28 0001                  		tst.b	1(a0)
00018D86 6A00 FC84                  		bpl.w	Obj7A_Delete
00018D8A                            
00018D8A                            loc_18C32:
00018D8A 6000                       		bra.s	loc_18C6C
00018D8C                            ; ===========================================================================
00018D8C                            
00018D8C                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00018D8C 117C 0008 001C             		move.b	#8,$1C(a0)
00018D92 2268 0034                  		movea.l	$34(a0),a1
00018D96 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018D9C 6600                       		bne.s	loc_18C56
00018D9E 4A28 0001                  		tst.b	1(a0)
00018DA2 6A00 FC68                  		bpl.w	Obj7A_Delete
00018DA6 117C 000B 001C             		move.b	#$B,$1C(a0)
00018DAC 6000                       		bra.s	loc_18C6C
00018DAE                            ; ===========================================================================
00018DAE                            
00018DAE                            loc_18C56:
00018DAE 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018DB4 6E00                       		bgt.s	loc_18C6C
00018DB6 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00018DBC 6D00                       		blt.s	loc_18C6C
00018DBE 117C 0007 001C             		move.b	#7,$1C(a0)
00018DC4                            
00018DC4                            loc_18C6C:
00018DC4 43F9 0001 7E1C             		lea	(Ani_Eggman).l,a1
00018DCA 4EB9 0000 A7EE             		jsr	AnimateSprite
00018DD0                            
00018DD0                            loc_18C78:
00018DD0 2268 0034                  		movea.l	$34(a0),a1
00018DD4 3169 0008 0008             		move.w	8(a1),8(a0)
00018DDA 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018DE0 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018DE6 7003                       		moveq	#3,d0
00018DE8 C028 0022                  		and.b	$22(a0),d0
00018DEC 0228 00FC 0001             		andi.b	#-4,1(a0)
00018DF2 8128 0001                  		or.b	d0,1(a0)
00018DF6 4EF9 0000 D77C             		jmp	DisplaySprite
00018DFC                            ; ===========================================================================
00018DFC                            
00018DFC                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00018DFC 2268 0034                  		movea.l	$34(a0),a1
00018E00 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018E06 6600                       		bne.s	loc_18CB8
00018E08 4A28 0001                  		tst.b	1(a0)
00018E0C 6A00 FBFE                  		bpl.w	Obj7A_Delete
00018E10                            
00018E10                            loc_18CB8:
00018E10 217C 0001 7F34 0004        		move.l	#Map_BossItems,4(a0)
00018E18 317C 246C 0002             		move.w	#$246C,2(a0)
00018E1E 117C 0003 001A             		move.b	#3,$1A(a0)
00018E24 60AA                       		bra.s	loc_18C78
00018E26                            ; ===========================================================================
00018E26                            ; ---------------------------------------------------------------------------
00018E26                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00018E26                            ; ---------------------------------------------------------------------------
00018E26                            
00018E26                            Obj7B:					; XREF: Obj_Index
00018E26 7000                       		moveq	#0,d0
00018E28 1028 0024                  		move.b	$24(a0),d0
00018E2C 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00018E30 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00018E34 3028 0030                  		move.w	$30(a0),d0
00018E38 0240 FF80                  		andi.w	#$FF80,d0
00018E3C 3238 F700                  		move.w	($FFFFF700).w,d1
00018E40 0441 0080                  		subi.w	#$80,d1
00018E44 0241 FF80                  		andi.w	#$FF80,d1
00018E48 9041                       		sub.w	d1,d0
00018E4A 6B00 FBC0                  		bmi.w	Obj7A_Delete
00018E4E 0C40 0280                  		cmpi.w	#$280,d0
00018E52 6200 FBB8                  		bhi.w	Obj7A_Delete
00018E56 4EF9 0000 D77C             		jmp	DisplaySprite
00018E5C                            ; ===========================================================================
00018E5C 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00018E5E 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00018E60 0000                       		dc.w loc_18DC6-Obj7B_Index
00018E62 0000                       		dc.w loc_18EAA-Obj7B_Index
00018E64 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00018E66 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00018E68                            ; ===========================================================================
00018E68                            
00018E68                            Obj7B_Main:				; XREF: Obj7B_Index
00018E68 217C 0001 1B4A 0004        		move.l	#Map_obj5Ea,4(a0)
00018E70 317C 0518 0002             		move.w	#$518,2(a0)
00018E76 117C 0001 001A             		move.b	#1,$1A(a0)
00018E7C 0028 0004 0001             		ori.b	#4,1(a0)
00018E82 117C 0004 0018             		move.b	#4,$18(a0)
00018E88 117C 008B 0020             		move.b	#$8B,$20(a0)
00018E8E 117C 000C 0019             		move.b	#$C,$19(a0)
00018E94 2268 003C                  		movea.l	$3C(a0),a1
00018E98 3169 0008 0030             		move.w	8(a1),$30(a0)
00018E9E 3169 000C 0034             		move.w	$C(a1),$34(a0)
00018EA4 08E8 0000 0022             		bset	#0,$22(a0)
00018EAA 3028 0008                  		move.w	8(a0),d0
00018EAE B069 0008                  		cmp.w	8(a1),d0
00018EB2 6E00                       		bgt.s	loc_18D68
00018EB4 08A8 0000 0022             		bclr	#0,$22(a0)
00018EBA 117C 0002 003A             		move.b	#2,$3A(a0)
00018EC0                            
00018EC0                            loc_18D68:
00018EC0 5428 0024                  		addq.b	#2,$24(a0)
00018EC4                            
00018EC4                            Obj7B_Fall:				; XREF: Obj7B_Index
00018EC4 4EB9 0000 D72A             		jsr	ObjectFall
00018ECA 2268 003C                  		movea.l	$3C(a0),a1
00018ECE 45F9 0000 0000             		lea	(word_19018).l,a2
00018ED4 7000                       		moveq	#0,d0
00018ED6 1029 001A                  		move.b	$1A(a1),d0
00018EDA 3228 0008                  		move.w	8(a0),d1
00018EDE 9268 0030                  		sub.w	$30(a0),d1
00018EE2 6400                       		bcc.s	loc_18D8E
00018EE4 5440                       		addq.w	#2,d0
00018EE6                            
00018EE6                            loc_18D8E:
00018EE6 D040                       		add.w	d0,d0
00018EE8 3228 0034                  		move.w	$34(a0),d1
00018EEC D272 0000                  		add.w	(a2,d0.w),d1
00018EF0 B268 000C                  		cmp.w	$C(a0),d1
00018EF4 6E00                       		bgt.s	locret_18DC4
00018EF6 2268 003C                  		movea.l	$3C(a0),a1
00018EFA 7202                       		moveq	#2,d1
00018EFC 0828 0000 0022             		btst	#0,$22(a0)
00018F02 6700                       		beq.s	loc_18DAE
00018F04 7200                       		moveq	#0,d1
00018F06                            
00018F06                            loc_18DAE:
00018F06 317C 00F0 0028             		move.w	#$F0,$28(a0)
00018F0C 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00018F12 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00018F18 6000 0000                  		bra.w	loc_18FA2
00018F1C                            ; ===========================================================================
00018F1C                            
00018F1C                            locret_18DC4:
00018F1C 4E75                       		rts	
00018F1E                            ; ===========================================================================
00018F1E                            
00018F1E                            loc_18DC6:				; XREF: Obj7B_Index
00018F1E 2268 003C                  		movea.l	$3C(a0),a1
00018F22 7000                       		moveq	#0,d0
00018F24 1028 003A                  		move.b	$3A(a0),d0
00018F28 9029 003A                  		sub.b	$3A(a1),d0
00018F2C 6700                       		beq.s	loc_18E2A
00018F2E 6400                       		bcc.s	loc_18DDA
00018F30 4400                       		neg.b	d0
00018F32                            
00018F32                            loc_18DDA:
00018F32 323C F7E8                  		move.w	#-$818,d1
00018F36 343C FEEC                  		move.w	#-$114,d2
00018F3A 0C00 0001                  		cmpi.b	#1,d0
00018F3E 6700                       		beq.s	loc_18E00
00018F40 323C F6A0                  		move.w	#-$960,d1
00018F44 343C FF0C                  		move.w	#-$F4,d2
00018F48 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00018F4E 6D00                       		blt.s	loc_18E00
00018F50 323C F5E0                  		move.w	#-$A20,d1
00018F54 343C FF80                  		move.w	#-$80,d2
00018F58                            
00018F58                            loc_18E00:
00018F58 3141 0012                  		move.w	d1,$12(a0)
00018F5C 3142 0010                  		move.w	d2,$10(a0)
00018F60 3028 0008                  		move.w	8(a0),d0
00018F64 9068 0030                  		sub.w	$30(a0),d0
00018F68 6400                       		bcc.s	loc_18E16
00018F6A 4468 0010                  		neg.w	$10(a0)
00018F6E                            
00018F6E                            loc_18E16:
00018F6E 117C 0001 001A             		move.b	#1,$1A(a0)
00018F74 317C 0020 0028             		move.w	#$20,$28(a0)
00018F7A 5428 0024                  		addq.b	#2,$24(a0)
00018F7E 6000 0000                  		bra.w	loc_18EAA
00018F82                            ; ===========================================================================
00018F82                            
00018F82                            loc_18E2A:				; XREF: loc_18DC6
00018F82 45F9 0000 0000             		lea	(word_19018).l,a2
00018F88 7000                       		moveq	#0,d0
00018F8A 1029 001A                  		move.b	$1A(a1),d0
00018F8E 343C 0028                  		move.w	#$28,d2
00018F92 3228 0008                  		move.w	8(a0),d1
00018F96 9268 0030                  		sub.w	$30(a0),d1
00018F9A 6400                       		bcc.s	loc_18E48
00018F9C 4442                       		neg.w	d2
00018F9E 5440                       		addq.w	#2,d0
00018FA0                            
00018FA0                            loc_18E48:
00018FA0 D040                       		add.w	d0,d0
00018FA2 3228 0034                  		move.w	$34(a0),d1
00018FA6 D272 0000                  		add.w	(a2,d0.w),d1
00018FAA 3141 000C                  		move.w	d1,$C(a0)
00018FAE D468 0030                  		add.w	$30(a0),d2
00018FB2 3142 0008                  		move.w	d2,8(a0)
00018FB6 4268 000E                  		clr.w	$E(a0)
00018FBA 4268 000A                  		clr.w	$A(a0)
00018FBE 5368 0028                  		subq.w	#1,$28(a0)
00018FC2 6600                       		bne.s	loc_18E7A
00018FC4 317C 0020 0028             		move.w	#$20,$28(a0)
00018FCA 117C 0008 0024             		move.b	#8,$24(a0)
00018FD0 4E75                       		rts	
00018FD2                            ; ===========================================================================
00018FD2                            
00018FD2                            loc_18E7A:
00018FD2 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00018FD8 6600                       		bne.s	loc_18E88
00018FDA 117C 0005 001F             		move.b	#5,$1F(a0)
00018FE0                            
00018FE0                            loc_18E88:
00018FE0 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00018FE6 6600                       		bne.s	loc_18E96
00018FE8 117C 0002 001F             		move.b	#2,$1F(a0)
00018FEE                            
00018FEE                            loc_18E96:
00018FEE 5328 001E                  		subq.b	#1,$1E(a0)
00018FF2 6E00                       		bgt.s	locret_18EA8
00018FF4 0868 0000 001A             		bchg	#0,$1A(a0)
00018FFA 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00019000                            
00019000                            locret_18EA8:
00019000 4E75                       		rts	
00019002                            ; ===========================================================================
00019002                            
00019002                            loc_18EAA:				; XREF: Obj7B_Index
00019002 43F8 D040                  		lea	($FFFFD040).w,a1
00019006 707A                       		moveq	#$7A,d0
00019008 7240                       		moveq	#$40,d1
0001900A 743E                       		moveq	#$3E,d2
0001900C                            
0001900C                            loc_18EB4:
0001900C B011                       		cmp.b	(a1),d0
0001900E 6700                       		beq.s	loc_18EC0
00019010 D2C1                       		adda.w	d1,a1
00019012 51CA FFF8                  		dbf	d2,loc_18EB4
00019016                            
00019016 6000                       		bra.s	loc_18F38
00019018                            ; ===========================================================================
00019018                            
00019018                            loc_18EC0:
00019018 3029 0008                  		move.w	8(a1),d0
0001901C 3229 000C                  		move.w	$C(a1),d1
00019020 3428 0008                  		move.w	8(a0),d2
00019024 3628 000C                  		move.w	$C(a0),d3
00019028 45FA 0000                  		lea	byte_19022(pc),a2
0001902C 47FA 0000                  		lea	byte_19026(pc),a3
00019030 181A                       		move.b	(a2)+,d4
00019032 4884                       		ext.w	d4
00019034 D044                       		add.w	d4,d0
00019036 181B                       		move.b	(a3)+,d4
00019038 4884                       		ext.w	d4
0001903A D444                       		add.w	d4,d2
0001903C B440                       		cmp.w	d0,d2
0001903E 6500                       		bcs.s	loc_18F38
00019040 181A                       		move.b	(a2)+,d4
00019042 4884                       		ext.w	d4
00019044 D044                       		add.w	d4,d0
00019046 181B                       		move.b	(a3)+,d4
00019048 4884                       		ext.w	d4
0001904A D444                       		add.w	d4,d2
0001904C B042                       		cmp.w	d2,d0
0001904E 6500                       		bcs.s	loc_18F38
00019050 181A                       		move.b	(a2)+,d4
00019052 4884                       		ext.w	d4
00019054 D244                       		add.w	d4,d1
00019056 181B                       		move.b	(a3)+,d4
00019058 4884                       		ext.w	d4
0001905A D644                       		add.w	d4,d3
0001905C B641                       		cmp.w	d1,d3
0001905E 6500                       		bcs.s	loc_18F38
00019060 181A                       		move.b	(a2)+,d4
00019062 4884                       		ext.w	d4
00019064 D244                       		add.w	d4,d1
00019066 181B                       		move.b	(a3)+,d4
00019068 4884                       		ext.w	d4
0001906A D644                       		add.w	d4,d3
0001906C B243                       		cmp.w	d3,d1
0001906E 6500                       		bcs.s	loc_18F38
00019070 5428 0024                  		addq.b	#2,$24(a0)
00019074 4268 0028                  		clr.w	$28(a0)
00019078 4229 0020                  		clr.b	$20(a1)
0001907C 5329 0021                  		subq.b	#1,$21(a1)
00019080 6600                       		bne.s	loc_18F38
00019082 08E9 0007 0022             		bset	#7,$22(a1)
00019088 4268 0010                  		clr.w	$10(a0)
0001908C 4268 0012                  		clr.w	$12(a0)
00019090                            
00019090                            loc_18F38:
00019090 4A68 0012                  		tst.w	$12(a0)
00019094 6A00                       		bpl.s	loc_18F5C
00019096 4EB9 0000 D72A             		jsr	ObjectFall
0001909C 3028 0034                  		move.w	$34(a0),d0
000190A0 0440 002F                  		subi.w	#$2F,d0
000190A4 B068 000C                  		cmp.w	$C(a0),d0
000190A8 6E00                       		bgt.s	loc_18F58
000190AA 4EB9 0000 D72A             		jsr	ObjectFall
000190B0                            
000190B0                            loc_18F58:
000190B0 6000 FF20                  		bra.w	loc_18E7A
000190B4                            ; ===========================================================================
000190B4                            
000190B4                            loc_18F5C:
000190B4 4EB9 0000 D72A             		jsr	ObjectFall
000190BA 2268 003C                  		movea.l	$3C(a0),a1
000190BE 45F9 0000 0000             		lea	(word_19018).l,a2
000190C4 7000                       		moveq	#0,d0
000190C6 1029 001A                  		move.b	$1A(a1),d0
000190CA 3228 0008                  		move.w	8(a0),d1
000190CE 9268 0030                  		sub.w	$30(a0),d1
000190D2 6400                       		bcc.s	loc_18F7E
000190D4 5440                       		addq.w	#2,d0
000190D6                            
000190D6                            loc_18F7E:
000190D6 D040                       		add.w	d0,d0
000190D8 3228 0034                  		move.w	$34(a0),d1
000190DC D272 0000                  		add.w	(a2,d0.w),d1
000190E0 B268 000C                  		cmp.w	$C(a0),d1
000190E4 6ECA                       		bgt.s	loc_18F58
000190E6 2268 003C                  		movea.l	$3C(a0),a1
000190EA 7202                       		moveq	#2,d1
000190EC 4A68 0010                  		tst.w	$10(a0)
000190F0 6B00                       		bmi.s	loc_18F9C
000190F2 7200                       		moveq	#0,d1
000190F4                            
000190F4                            loc_18F9C:
000190F4 317C 0000 0028             		move.w	#0,$28(a0)
000190FA                            
000190FA                            loc_18FA2:
000190FA 1341 003A                  		move.b	d1,$3A(a1)
000190FE 1141 003A                  		move.b	d1,$3A(a0)
00019102 B229 001A                  		cmp.b	$1A(a1),d1
00019106 6700                       		beq.s	loc_19008
00019108 08A9 0003 0022             		bclr	#3,$22(a1)
0001910E 6700                       		beq.s	loc_19008
00019110 4229 0025                  		clr.b	$25(a1)
00019114 137C 0002 0024             		move.b	#2,$24(a1)
0001911A 45F8 D000                  		lea	($FFFFD000).w,a2
0001911E 3568 0012 0012             		move.w	$12(a0),$12(a2)
00019124 446A 0012                  		neg.w	$12(a2)
00019128 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001912E 6600                       		bne.s	loc_18FDC
00019130 E0EA 0012                  		asr	$12(a2)
00019134                            
00019134                            loc_18FDC:
00019134 08EA 0001 0022             		bset	#1,$22(a2)
0001913A 08AA 0003 0022             		bclr	#3,$22(a2)
00019140 422A 003C                  		clr.b	$3C(a2)
00019144 2F08                       		move.l	a0,-(sp)
00019146 41D2                       		lea	(a2),a0
00019148 4EBA A3EE                  		jsr	Obj01_ChkRoll
0001914C 205F                       		movea.l	(sp)+,a0
0001914E 157C 0002 0024             		move.b	#2,$24(a2)
00019154 303C 00CC                  		move.w	#$CC,d0
00019158 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001915E                            
0001915E                            loc_19008:
0001915E 4268 0010                  		clr.w	$10(a0)
00019162 4268 0012                  		clr.w	$12(a0)
00019166 5428 0024                  		addq.b	#2,$24(a0)
0001916A 6000 FE66                  		bra.w	loc_18E7A
0001916E                            ; ===========================================================================
0001916E FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00019178                            		even
00019178 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001917C                            		even
0001917C 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00019180                            		even
00019180                            ; ===========================================================================
00019180                            
00019180                            Obj7B_Explode:				; XREF: Obj7B_Index
00019180 10BC 003F                  		move.b	#$3F,(a0)
00019184 4228 0024                  		clr.b	$24(a0)
00019188 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001918E 6700                       		beq.s	Obj7B_MakeFrag
00019190 4E75                       		rts	
00019192                            ; ===========================================================================
00019192                            
00019192                            Obj7B_MakeFrag:
00019192 3168 0034 000C             		move.w	$34(a0),$C(a0)
00019198 7203                       		moveq	#3,d1
0001919A 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001919E                            
0001919E                            Obj7B_Loop:
0001919E 4EB9 0000 DC02             		jsr	SingleObjLoad
000191A4 6600                       		bne.s	loc_1909A
000191A6 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
000191AA 137C 000A 0024             		move.b	#$A,$24(a1)
000191B0 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
000191B8 137C 0003 0018             		move.b	#3,$18(a1)
000191BE 337C 0518 0002             		move.w	#$518,2(a1)
000191C4 3368 0008 0008             		move.w	8(a0),8(a1)
000191CA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000191D0 335A 0010                  		move.w	(a2)+,$10(a1)
000191D4 335A 0012                  		move.w	(a2)+,$12(a1)
000191D8 137C 0098 0020             		move.b	#$98,$20(a1)
000191DE 0029 0004 0001             		ori.b	#4,1(a1)
000191E4 08E9 0007 0001             		bset	#7,1(a1)
000191EA 137C 000C 0019             		move.b	#$C,$19(a1)
000191F0                            
000191F0                            loc_1909A:
000191F0 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
000191F4                            
000191F4 4E75                       		rts	
000191F6                            ; ===========================================================================
000191F6 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
000191FA FF60 FDC0                  		dc.w $FF60, $FDC0
000191FE 0100 FCC0                  		dc.w $100, $FCC0
00019202 00A0 FDC0                  		dc.w $A0, $FDC0
00019206                            ; ===========================================================================
00019206                            
00019206                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00019206 4EB9 0000 D756             		jsr	SpeedToPos
0001920C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019212 3168 000C 0034             		move.w	$C(a0),$34(a0)
00019218 0668 0018 0012             		addi.w	#$18,$12(a0)
0001921E 7004                       		moveq	#4,d0
00019220 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019224 E448                       		lsr.w	#2,d0
00019226 1140 001A                  		move.b	d0,$1A(a0)
0001922A 4A28 0001                  		tst.b	1(a0)
0001922E 6A00 F7DC                  		bpl.w	Obj7A_Delete
00019232 4E75                       		rts	
00019234                            ; ===========================================================================
00019234                            ; ---------------------------------------------------------------------------
00019234                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019234                            ; ---------------------------------------------------------------------------
00019234                            Map_obj7B:
00019234                            	include "_maps\obj7B.asm"
00019234                            ; ---------------------------------------------------------------------------
00019234                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00019234                            ; ---------------------------------------------------------------------------
00019234 0000                       		dc.w byte_190E2-Map_obj7B
00019236 0000                       		dc.w byte_190E8-Map_obj7B
00019238 01                         byte_190E2:	dc.b 1
00019239 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001923E 01                         byte_190E8:	dc.b 1
0001923F FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00019244                            		even
00019244                            		even
00019244                            
00019244                            ; ===========================================================================
00019244                            ; ---------------------------------------------------------------------------
00019244                            ; Object 75 - Eggman (SYZ)
00019244                            ; ---------------------------------------------------------------------------
00019244                            
00019244                            Obj75:					; XREF: Obj_Index
00019244 7000                       		moveq	#0,d0
00019246 1028 0024                  		move.b	$24(a0),d0
0001924A 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001924E 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019252                            ; ===========================================================================
00019252 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019254 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019256 0000                       		dc.w Obj75_FaceMain-Obj75_Index
00019258 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001925A 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001925C                            
0001925C 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001925F 0401 05                    		dc.b 4,	1, 5
00019262 0607 05                    		dc.b 6,	7, 5
00019265 0800 05                    		dc.b 8,	0, 5
00019268                            ; ===========================================================================
00019268                            
00019268                            Obj75_Main:				; XREF: Obj75_Index
00019268 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001926E 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019274 3168 0008 0030             		move.w	8(a0),$30(a0)
0001927A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019280 117C 000F 0020             		move.b	#$F,$20(a0)
00019286 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001928C 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019290 2248                       		movea.l	a0,a1
00019292 7203                       		moveq	#3,d1
00019294 6000                       		bra.s	Obj75_LoadBoss
00019296                            ; ===========================================================================
00019296                            
00019296                            Obj75_Loop:
00019296 4EB9 0000 DC18             		jsr	SingleObjLoad2
0001929C 6600                       		bne.s	Obj75_ShipMain
0001929E 12BC 0075                  		move.b	#$75,(a1)
000192A2 3368 0008 0008             		move.w	8(a0),8(a1)
000192A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000192AE                            
000192AE                            Obj75_LoadBoss:				; XREF: Obj75_Main
000192AE 08A8 0000 0022             		bclr	#0,$22(a0)
000192B4 4229 0025                  		clr.b	$25(a1)
000192B8 135A 0024                  		move.b	(a2)+,$24(a1)
000192BC 135A 001C                  		move.b	(a2)+,$1C(a1)
000192C0 135A 0018                  		move.b	(a2)+,$18(a1)
000192C4 237C 0001 7E6C 0004        		move.l	#Map_Eggman,4(a1)
000192CC 337C 0400 0002             		move.w	#$400,2(a1)
000192D2 137C 0004 0001             		move.b	#4,1(a1)
000192D8 137C 0020 0019             		move.b	#$20,$19(a1)
000192DE 2348 0034                  		move.l	a0,$34(a1)
000192E2 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
000192E6                            
000192E6                            Obj75_ShipMain:				; XREF: Obj75_Index
000192E6 7000                       		moveq	#0,d0
000192E8 1028 0025                  		move.b	$25(a0),d0
000192EC 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000192F0 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000192F4 43F9 0001 7E1C             		lea	(Ani_Eggman).l,a1
000192FA 4EB9 0000 A7EE             		jsr	AnimateSprite
00019300 7003                       		moveq	#3,d0
00019302 C028 0022                  		and.b	$22(a0),d0
00019306 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001930C 8128 0001                  		or.b	d0,1(a0)
00019310 4EF9 0000 D77C             		jmp	DisplaySprite
00019316                            ; ===========================================================================
00019316 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001931A 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001931E 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
00019322                            ; ===========================================================================
00019322                            
00019322                            loc_191CC:				; XREF: Obj75_ShipIndex
00019322 317C FF00 0010             		move.w	#-$100,$10(a0)
00019328 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001932E 6400                       		bcc.s	loc_191DE
00019330 5428 0025                  		addq.b	#2,$25(a0)
00019334                            
00019334                            loc_191DE:
00019334 1028 003F                  		move.b	$3F(a0),d0
00019338 5428 003F                  		addq.b	#2,$3F(a0)
0001933C 4EB9 0000 29DA             		jsr	(CalcSine).l
00019342 E440                       		asr.w	#2,d0
00019344 3140 0012                  		move.w	d0,$12(a0)
00019348                            
00019348                            loc_191F2:
00019348 6100 E6C2                  		bsr.w	BossMove
0001934C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019352 3168 0030 0008             		move.w	$30(a0),8(a0)
00019358                            
00019358                            loc_19202:
00019358 3028 0008                  		move.w	8(a0),d0
0001935C 0440 2C00                  		subi.w	#$2C00,d0
00019360 EA48                       		lsr.w	#5,d0
00019362 1140 0034                  		move.b	d0,$34(a0)
00019366 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001936C 6400                       		bcc.s	locret_19256
0001936E 4A28 0022                  		tst.b	$22(a0)
00019372 6B00                       		bmi.s	loc_19258
00019374 4A28 0020                  		tst.b	$20(a0)
00019378 6600                       		bne.s	locret_19256
0001937A 4A28 003E                  		tst.b	$3E(a0)
0001937E 6600                       		bne.s	loc_1923A
00019380 117C 0020 003E             		move.b	#$20,$3E(a0)
00019386 303C 00AC                  		move.w	#$AC,d0
0001938A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019390                            
00019390                            loc_1923A:
00019390 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019394 7000                       		moveq	#0,d0
00019396 4A51                       		tst.w	(a1)
00019398 6600                       		bne.s	loc_19248
0001939A 303C 0EEE                  		move.w	#$EEE,d0
0001939E                            
0001939E                            loc_19248:
0001939E 3280                       		move.w	d0,(a1)
000193A0 5328 003E                  		subq.b	#1,$3E(a0)
000193A4 6600                       		bne.s	locret_19256
000193A6 117C 000F 0020             		move.b	#$F,$20(a0)
000193AC                            
000193AC                            locret_19256:
000193AC 4E75                       		rts	
000193AE                            ; ===========================================================================
000193AE                            
000193AE                            loc_19258:				; XREF: loc_19202
000193AE 7064                       		moveq	#100,d0
000193B0 6100 0000                  		bsr.w	AddPoints
000193B4 117C 0006 0025             		move.b	#6,$25(a0)
000193BA 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000193C0 4268 0010                  		clr.w	$10(a0)
000193C4 4E75                       		rts	
000193C6                            ; ===========================================================================
000193C6                            
000193C6                            loc_19270:				; XREF: Obj75_ShipIndex
000193C6 3028 0030                  		move.w	$30(a0),d0
000193CA 317C 0140 0010             		move.w	#$140,$10(a0)
000193D0 0828 0000 0022             		btst	#0,$22(a0)
000193D6 6600                       		bne.s	loc_1928E
000193D8 4468 0010                  		neg.w	$10(a0)
000193DC 0C40 2C08                  		cmpi.w	#$2C08,d0
000193E0 6E00                       		bgt.s	loc_1929E
000193E2 6000                       		bra.s	loc_19294
000193E4                            ; ===========================================================================
000193E4                            
000193E4                            loc_1928E:
000193E4 0C40 2D38                  		cmpi.w	#$2D38,d0
000193E8 6D00                       		blt.s	loc_1929E
000193EA                            
000193EA                            loc_19294:
000193EA 0868 0000 0022             		bchg	#0,$22(a0)
000193F0 4228 003D                  		clr.b	$3D(a0)
000193F4                            
000193F4                            loc_1929E:
000193F4 0440 2C10                  		subi.w	#$2C10,d0
000193F8 0240 001F                  		andi.w	#$1F,d0
000193FC 0440 001F                  		subi.w	#$1F,d0
00019400 6A00                       		bpl.s	loc_192AE
00019402 4440                       		neg.w	d0
00019404                            
00019404                            loc_192AE:
00019404 5340                       		subq.w	#1,d0
00019406 6E00                       		bgt.s	loc_192E8
00019408 4A28 003D                  		tst.b	$3D(a0)
0001940C 6600                       		bne.s	loc_192E8
0001940E 3238 D008                  		move.w	($FFFFD008).w,d1
00019412 0441 2C00                  		subi.w	#$2C00,d1
00019416 EA41                       		asr.w	#5,d1
00019418 B228 0034                  		cmp.b	$34(a0),d1
0001941C 6600                       		bne.s	loc_192E8
0001941E 7000                       		moveq	#0,d0
00019420 1028 0034                  		move.b	$34(a0),d0
00019424 EB40                       		asl.w	#5,d0
00019426 0640 2C10                  		addi.w	#$2C10,d0
0001942A 3140 0030                  		move.w	d0,$30(a0)
0001942E 6100 0000                  		bsr.w	Obj75_FindBlocks
00019432 5428 0025                  		addq.b	#2,$25(a0)
00019436 4268 0028                  		clr.w	$28(a0)
0001943A 4268 0010                  		clr.w	$10(a0)
0001943E                            
0001943E                            loc_192E8:
0001943E 6000 FEF4                  		bra.w	loc_191DE
00019442                            ; ===========================================================================
00019442                            
00019442                            loc_192EC:				; XREF: Obj75_ShipIndex
00019442 7000                       		moveq	#0,d0
00019444 1028 0028                  		move.b	$28(a0),d0
00019448 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001944C 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019450                            ; ===========================================================================
00019450 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019452 0000                       		dc.w loc_19348-off_192FA
00019454 0000                       		dc.w loc_1938E-off_192FA
00019456 0000                       		dc.w loc_193D0-off_192FA
00019458                            ; ===========================================================================
00019458                            
00019458                            loc_19302:				; XREF: off_192FA
00019458 317C 0180 0012             		move.w	#$180,$12(a0)
0001945E 3028 0038                  		move.w	$38(a0),d0
00019462 0C40 0556                  		cmpi.w	#$556,d0
00019466 6500                       		bcs.s	loc_19344
00019468 317C 0556 0038             		move.w	#$556,$38(a0)
0001946E 4268 003C                  		clr.w	$3C(a0)
00019472 70FF                       		moveq	#-1,d0
00019474 3028 0036                  		move.w	$36(a0),d0
00019478 6700                       		beq.s	loc_1933C
0001947A 2240                       		movea.l	d0,a1
0001947C 137C 00FF 0029             		move.b	#-1,$29(a1)
00019482 117C 00FF 0029             		move.b	#-1,$29(a0)
00019488 2348 0034                  		move.l	a0,$34(a1)
0001948C 317C 0032 003C             		move.w	#$32,$3C(a0)
00019492                            
00019492                            loc_1933C:
00019492 4268 0012                  		clr.w	$12(a0)
00019496 5428 0028                  		addq.b	#2,$28(a0)
0001949A                            
0001949A                            loc_19344:
0001949A 6000 FEAC                  		bra.w	loc_191F2
0001949E                            ; ===========================================================================
0001949E                            
0001949E                            loc_19348:				; XREF: off_192FA
0001949E 5368 003C                  		subq.w	#1,$3C(a0)
000194A2 6A00                       		bpl.s	loc_19366
000194A4 5428 0028                  		addq.b	#2,$28(a0)
000194A8 317C F800 0012             		move.w	#-$800,$12(a0)
000194AE 4A68 0036                  		tst.w	$36(a0)
000194B2 6600                       		bne.s	loc_19362
000194B4 E0E8 0012                  		asr	$12(a0)
000194B8                            
000194B8                            loc_19362:
000194B8 7000                       		moveq	#0,d0
000194BA 6000                       		bra.s	loc_1937C
000194BC                            ; ===========================================================================
000194BC                            
000194BC                            loc_19366:
000194BC 7000                       		moveq	#0,d0
000194BE 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
000194C4 6E00                       		bgt.s	loc_1937C
000194C6 7002                       		moveq	#2,d0
000194C8 0828 0001 003D             		btst	#1,$3D(a0)
000194CE 6700                       		beq.s	loc_1937C
000194D0 4440                       		neg.w	d0
000194D2                            
000194D2                            loc_1937C:
000194D2 D068 0038                  		add.w	$38(a0),d0
000194D6 3140 000C                  		move.w	d0,$C(a0)
000194DA 3168 0030 0008             		move.w	$30(a0),8(a0)
000194E0 6000 FE76                  		bra.w	loc_19202
000194E4                            ; ===========================================================================
000194E4                            
000194E4                            loc_1938E:				; XREF: off_192FA
000194E4 303C 04DA                  		move.w	#$4DA,d0
000194E8 4A68 0036                  		tst.w	$36(a0)
000194EC 6700                       		beq.s	loc_1939C
000194EE 0440 0018                  		subi.w	#$18,d0
000194F2                            
000194F2                            loc_1939C:
000194F2 B068 0038                  		cmp.w	$38(a0),d0
000194F6 6D00                       		blt.s	loc_193BE
000194F8 317C 0008 003C             		move.w	#8,$3C(a0)
000194FE 4A68 0036                  		tst.w	$36(a0)
00019502 6700                       		beq.s	loc_193B4
00019504 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001950A                            
0001950A                            loc_193B4:
0001950A 5428 0028                  		addq.b	#2,$28(a0)
0001950E 4268 0012                  		clr.w	$12(a0)
00019512 6000                       		bra.s	loc_193CC
00019514                            ; ===========================================================================
00019514                            
00019514                            loc_193BE:
00019514 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001951A 6C00                       		bge.s	loc_193CC
0001951C 0668 000C 0012             		addi.w	#$C,$12(a0)
00019522                            
00019522                            loc_193CC:
00019522 6000 FE24                  		bra.w	loc_191F2
00019526                            ; ===========================================================================
00019526                            
00019526                            loc_193D0:				; XREF: off_192FA
00019526 5368 003C                  		subq.w	#1,$3C(a0)
0001952A 6E00                       		bgt.s	loc_19406
0001952C 6B00                       		bmi.s	loc_193EE
0001952E 70FF                       		moveq	#-1,d0
00019530 3028 0036                  		move.w	$36(a0),d0
00019534 6700                       		beq.s	loc_193E8
00019536 2240                       		movea.l	d0,a1
00019538 137C 000A 0029             		move.b	#$A,$29(a1)
0001953E                            
0001953E                            loc_193E8:
0001953E 4268 0036                  		clr.w	$36(a0)
00019542 6000                       		bra.s	loc_19406
00019544                            ; ===========================================================================
00019544                            
00019544                            loc_193EE:
00019544 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001954A 6600                       		bne.s	loc_19406
0001954C 4228 0029                  		clr.b	$29(a0)
00019550 5528 0025                  		subq.b	#2,$25(a0)
00019554 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001955A 6000                       		bra.s	loc_19446
0001955C                            ; ===========================================================================
0001955C                            
0001955C                            loc_19406:
0001955C 7001                       		moveq	#1,d0
0001955E 4A68 0036                  		tst.w	$36(a0)
00019562 6700                       		beq.s	loc_19410
00019564 7002                       		moveq	#2,d0
00019566                            
00019566                            loc_19410:
00019566 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001956C 6700                       		beq.s	loc_19424
0001956E 6D00                       		blt.s	loc_1941C
00019570 4440                       		neg.w	d0
00019572                            
00019572                            loc_1941C:
00019572 4A68 0036                  		tst.w	$36(a0)
00019576 D168 0038                  		add.w	d0,$38(a0)
0001957A                            
0001957A                            loc_19424:
0001957A 7000                       		moveq	#0,d0
0001957C 4A68 0036                  		tst.w	$36(a0)
00019580 6700                       		beq.s	loc_19438
00019582 7002                       		moveq	#2,d0
00019584 0828 0000 003D             		btst	#0,$3D(a0)
0001958A 6700                       		beq.s	loc_19438
0001958C 4440                       		neg.w	d0
0001958E                            
0001958E                            loc_19438:
0001958E D068 0038                  		add.w	$38(a0),d0
00019592 3140 000C                  		move.w	d0,$C(a0)
00019596 3168 0030 0008             		move.w	$30(a0),8(a0)
0001959C                            
0001959C                            loc_19446:
0001959C 6000 FDBA                  		bra.w	loc_19202
000195A0                            
000195A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000195A0                            
000195A0                            
000195A0                            Obj75_FindBlocks:			; XREF: loc_192AE
000195A0 4268 0036                  		clr.w	$36(a0)
000195A4 43F8 D040                  		lea	($FFFFD040).w,a1
000195A8 703E                       		moveq	#$3E,d0
000195AA 7276                       		moveq	#$76,d1
000195AC 1428 0034                  		move.b	$34(a0),d2
000195B0                            
000195B0                            Obj75_FindLoop:
000195B0 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
000195B2 6600                       		bne.s	loc_1946A	; if not, branch
000195B4 B429 0028                  		cmp.b	$28(a1),d2
000195B8 6600                       		bne.s	loc_1946A
000195BA 3149 0036                  		move.w	a1,$36(a0)
000195BE 6000                       		bra.s	locret_19472
000195C0                            ; ===========================================================================
000195C0                            
000195C0                            loc_1946A:
000195C0 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
000195C4 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
000195C8                            
000195C8                            locret_19472:
000195C8 4E75                       		rts	
000195CA                            ; End of function Obj75_FindBlocks
000195CA                            
000195CA                            ; ===========================================================================
000195CA                            
000195CA                            loc_19474:				; XREF: Obj75_ShipIndex
000195CA 5368 003C                  		subq.w	#1,$3C(a0)
000195CE 6B00                       		bmi.s	loc_1947E
000195D0 6000 E3F8                  		bra.w	BossDefeated
000195D4                            ; ===========================================================================
000195D4                            
000195D4                            loc_1947E:
000195D4 5428 0025                  		addq.b	#2,$25(a0)
000195D8 4268 0012                  		clr.w	$12(a0)
000195DC 08E8 0000 0022             		bset	#0,$22(a0)
000195E2 08A8 0007 0022             		bclr	#7,$22(a0)
000195E8 4268 0010                  		clr.w	$10(a0)
000195EC 317C FFFF 003C             		move.w	#-1,$3C(a0)
000195F2 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000195F6 6600                       		bne.s	loc_194A8
000195F8 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000195FE                            
000195FE                            loc_194A8:
000195FE 6000 FD58                  		bra.w	loc_19202
00019602                            ; ===========================================================================
00019602                            
00019602                            loc_194AC:				; XREF: Obj75_ShipIndex
00019602 5268 003C                  		addq.w	#1,$3C(a0)
00019606 6700                       		beq.s	loc_194BC
00019608 6A00                       		bpl.s	loc_194C2
0001960A 0668 0018 0012             		addi.w	#$18,$12(a0)
00019610 6000                       		bra.s	loc_194EE
00019612                            ; ===========================================================================
00019612                            
00019612                            loc_194BC:
00019612 4268 0012                  		clr.w	$12(a0)
00019616 6000                       		bra.s	loc_194EE
00019618                            ; ===========================================================================
00019618                            
00019618                            loc_194C2:
00019618 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001961E 6500                       		bcs.s	loc_194DA
00019620 6700                       		beq.s	loc_194E0
00019622 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
00019628 6500                       		bcs.s	loc_194EE
0001962A 5428 0025                  		addq.b	#2,$25(a0)
0001962E 6000                       		bra.s	loc_194EE
00019630                            ; ===========================================================================
00019630                            
00019630                            loc_194DA:
00019630 5168 0012                  		subq.w	#8,$12(a0)
00019634 6000                       		bra.s	loc_194EE
00019636                            ; ===========================================================================
00019636                            
00019636                            loc_194E0:
00019636 4268 0012                  		clr.w	$12(a0)
0001963A 303C 0085                  		move.w	#$85,d0
0001963E 4EB9 0000 1396             		jsr	(PlaySound).l	; play SYZ music
00019644                            
00019644                            loc_194EE:
00019644 6000 FD02                  		bra.w	loc_191F2
00019648                            ; ===========================================================================
00019648                            
00019648                            loc_194F2:				; XREF: Obj75_ShipIndex
00019648 317C 0400 0010             		move.w	#$400,$10(a0)
0001964E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019654 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001965A 6400                       		bcc.s	loc_1950C
0001965C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019660 6000                       		bra.s	loc_19512
00019662                            ; ===========================================================================
00019662                            
00019662                            loc_1950C:
00019662 4A28 0001                  		tst.b	1(a0)
00019666 6A00                       		bpl.s	Obj75_ShipDelete
00019668                            
00019668                            loc_19512:
00019668 6100 E3A2                  		bsr.w	BossMove
0001966C 6000 FCC6                  		bra.w	loc_191DE
00019670                            ; ===========================================================================
00019670                            
00019670                            Obj75_ShipDelete:
00019670 4EF9 0000 D7B8             		jmp	DeleteObject
00019676                            ; ===========================================================================
00019676                            
00019676                            Obj75_FaceMain:				; XREF: Obj75_Index
00019676 7201                       		moveq	#1,d1
00019678 2268 0034                  		movea.l	$34(a0),a1
0001967C 7000                       		moveq	#0,d0
0001967E 1029 0025                  		move.b	$25(a1),d0
00019682 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019686 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001968A 1141 001C                  		move.b	d1,$1C(a0)
0001968E 1010                       		move.b	(a0),d0
00019690 B011                       		cmp.b	(a1),d0
00019692 6600                       		bne.s	Obj75_FaceDelete
00019694 6000                       		bra.s	loc_195BE
00019696                            ; ===========================================================================
00019696                            
00019696                            Obj75_FaceDelete:
00019696 4EF9 0000 D7B8             		jmp	DeleteObject
0001969C                            ; ===========================================================================
0001969C 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
000196A0 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
000196A4 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
000196A8                            ; ===========================================================================
000196A8                            
000196A8                            loc_19552:				; XREF: off_19546
000196A8 720A                       		moveq	#$A,d1
000196AA 4E75                       		rts	
000196AC                            ; ===========================================================================
000196AC                            
000196AC                            loc_19556:				; XREF: off_19546
000196AC 7206                       		moveq	#6,d1
000196AE 4E75                       		rts	
000196B0                            ; ===========================================================================
000196B0                            
000196B0                            loc_1955A:				; XREF: off_19546
000196B0 7000                       		moveq	#0,d0
000196B2 1029 0028                  		move.b	$28(a1),d0
000196B6 303B 0000                  		move.w	off_19568(pc,d0.w),d0
000196BA 4EFB 0000                  		jmp	off_19568(pc,d0.w)
000196BE                            ; ===========================================================================
000196BE 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
000196C2 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
000196C6                            ; ===========================================================================
000196C6                            
000196C6                            loc_19570:				; XREF: off_19568
000196C6 6000                       		bra.s	loc_19574
000196C8                            ; ===========================================================================
000196C8                            
000196C8                            loc_19572:				; XREF: off_19568
000196C8 7206                       		moveq	#6,d1
000196CA                            
000196CA                            loc_19574:				; XREF: off_19546
000196CA 4A29 0020                  		tst.b	$20(a1)
000196CE 6600                       		bne.s	loc_1957E
000196D0 7205                       		moveq	#5,d1
000196D2 4E75                       		rts	
000196D4                            ; ===========================================================================
000196D4                            
000196D4                            loc_1957E:
000196D4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000196DA 6500                       		bcs.s	locret_19588
000196DC 7204                       		moveq	#4,d1
000196DE                            
000196DE                            locret_19588:
000196DE 4E75                       		rts	
000196E0                            ; ===========================================================================
000196E0                            
000196E0                            Obj75_FlameMain:			; XREF: Obj75_Index
000196E0 117C 0007 001C             		move.b	#7,$1C(a0)
000196E6 2268 0034                  		movea.l	$34(a0),a1
000196EA 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000196F0 6600                       		bne.s	loc_195AA
000196F2 117C 000B 001C             		move.b	#$B,$1C(a0)
000196F8 4A28 0001                  		tst.b	1(a0)
000196FC 6A00                       		bpl.s	Obj75_FlameDelete
000196FE 6000                       		bra.s	loc_195B6
00019700                            ; ===========================================================================
00019700                            
00019700                            loc_195AA:
00019700 4A69 0010                  		tst.w	$10(a1)
00019704 6700                       		beq.s	loc_195B6
00019706 117C 0008 001C             		move.b	#8,$1C(a0)
0001970C                            
0001970C                            loc_195B6:
0001970C 6000                       		bra.s	loc_195BE
0001970E                            ; ===========================================================================
0001970E                            
0001970E                            Obj75_FlameDelete:
0001970E 4EF9 0000 D7B8             		jmp	DeleteObject
00019714                            ; ===========================================================================
00019714                            
00019714                            loc_195BE:
00019714 43F9 0001 7E1C             		lea	(Ani_Eggman).l,a1
0001971A 4EB9 0000 A7EE             		jsr	AnimateSprite
00019720 2268 0034                  		movea.l	$34(a0),a1
00019724 3169 0008 0008             		move.w	8(a1),8(a0)
0001972A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019730                            
00019730                            loc_195DA:
00019730 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019736 7003                       		moveq	#3,d0
00019738 C028 0022                  		and.b	$22(a0),d0
0001973C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019742 8128 0001                  		or.b	d0,1(a0)
00019746 4EF9 0000 D77C             		jmp	DisplaySprite
0001974C                            ; ===========================================================================
0001974C                            
0001974C                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001974C 217C 0001 7F34 0004        		move.l	#Map_BossItems,4(a0)
00019754 317C 246C 0002             		move.w	#$246C,2(a0)
0001975A 117C 0005 001A             		move.b	#5,$1A(a0)
00019760 2268 0034                  		movea.l	$34(a0),a1
00019764 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001976A 6600                       		bne.s	loc_1961C
0001976C 4A28 0001                  		tst.b	1(a0)
00019770 6A00                       		bpl.s	Obj75_SpikeDelete
00019772                            
00019772                            loc_1961C:
00019772 3169 0008 0008             		move.w	8(a1),8(a0)
00019778 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001977E 3028 003C                  		move.w	$3C(a0),d0
00019782 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019788 6600                       		bne.s	loc_19652
0001978A 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019790 6700                       		beq.s	loc_1964C
00019792 4A29 0028                  		tst.b	$28(a1)
00019796 6600                       		bne.s	loc_19658
00019798 0C40 0094                  		cmpi.w	#$94,d0
0001979C 6C00                       		bge.s	loc_19658
0001979E 5E40                       		addq.w	#7,d0
000197A0 6000                       		bra.s	loc_19658
000197A2                            ; ===========================================================================
000197A2                            
000197A2                            loc_1964C:
000197A2 4A69 003C                  		tst.w	$3C(a1)
000197A6 6A00                       		bpl.s	loc_19658
000197A8                            
000197A8                            loc_19652:
000197A8 4A40                       		tst.w	d0
000197AA 6F00                       		ble.s	loc_19658
000197AC 5B40                       		subq.w	#5,d0
000197AE                            
000197AE                            loc_19658:
000197AE 3140 003C                  		move.w	d0,$3C(a0)
000197B2 E440                       		asr.w	#2,d0
000197B4 D168 000C                  		add.w	d0,$C(a0)
000197B8 117C 0008 0019             		move.b	#8,$19(a0)
000197BE 117C 000C 0016             		move.b	#$C,$16(a0)
000197C4 4228 0020                  		clr.b	$20(a0)
000197C8 2268 0034                  		movea.l	$34(a0),a1
000197CC 4A29 0020                  		tst.b	$20(a1)
000197D0 6700                       		beq.s	loc_19688
000197D2 4A29 0029                  		tst.b	$29(a1)
000197D6 6600                       		bne.s	loc_19688
000197D8 117C 0084 0020             		move.b	#$84,$20(a0)
000197DE                            
000197DE                            loc_19688:
000197DE 6000 FF50                  		bra.w	loc_195DA
000197E2                            ; ===========================================================================
000197E2                            
000197E2                            Obj75_SpikeDelete:
000197E2 4EF9 0000 D7B8             		jmp	DeleteObject
000197E8                            ; ===========================================================================
000197E8                            ; ---------------------------------------------------------------------------
000197E8                            ; Object 76 - blocks that Eggman picks up (SYZ)
000197E8                            ; ---------------------------------------------------------------------------
000197E8                            
000197E8                            Obj76:					; XREF: Obj_Index
000197E8 7000                       		moveq	#0,d0
000197EA 1028 0024                  		move.b	$24(a0),d0
000197EE 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
000197F2 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
000197F6                            ; ===========================================================================
000197F6 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
000197F8 0000                       		dc.w Obj76_Action-Obj76_Index
000197FA 0000                       		dc.w loc_19762-Obj76_Index
000197FC                            ; ===========================================================================
000197FC                            
000197FC                            Obj76_Main:				; XREF: Obj76_Index
000197FC 7800                       		moveq	#0,d4
000197FE 3A3C 2C10                  		move.w	#$2C10,d5
00019802 7C09                       		moveq	#9,d6
00019804 43D0                       		lea	(a0),a1
00019806 6000                       		bra.s	Obj76_MakeBlock
00019808                            ; ===========================================================================
00019808                            
00019808                            Obj76_Loop:
00019808 4EB9 0000 DC02             		jsr	SingleObjLoad
0001980E 6600                       		bne.s	Obj76_ExitLoop
00019810                            
00019810                            Obj76_MakeBlock:			; XREF: Obj76_Main
00019810 12BC 0076                  		move.b	#$76,(a1)
00019814 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001981C 337C 4000 0002             		move.w	#$4000,2(a1)
00019822 137C 0004 0001             		move.b	#4,1(a1)
00019828 137C 0010 0019             		move.b	#$10,$19(a1)
0001982E 137C 0010 0016             		move.b	#$10,$16(a1)
00019834 137C 0003 0018             		move.b	#3,$18(a1)
0001983A 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001983E 337C 0582 000C             		move.w	#$582,$C(a1)
00019844 3344 0028                  		move.w	d4,$28(a1)
00019848 0644 0101                  		addi.w	#$101,d4
0001984C 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019850 5429 0024                  		addq.b	#2,$24(a1)
00019854 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
00019858                            
00019858                            Obj76_ExitLoop:
00019858 4E75                       		rts	
0001985A                            ; ===========================================================================
0001985A                            
0001985A                            Obj76_Action:				; XREF: Obj76_Index
0001985A 1028 0029                  		move.b	$29(a0),d0
0001985E B028 0028                  		cmp.b	$28(a0),d0
00019862 6700                       		beq.s	Obj76_Solid
00019864 4A00                       		tst.b	d0
00019866 6B00                       		bmi.s	loc_19718
00019868                            
00019868                            loc_19712:
00019868 6100 0000                  		bsr.w	Obj76_Break
0001986C 6000                       		bra.s	Obj76_Display
0001986E                            ; ===========================================================================
0001986E                            
0001986E                            loc_19718:
0001986E 2268 0034                  		movea.l	$34(a0),a1
00019872 4A29 0021                  		tst.b	$21(a1)
00019876 67F0                       		beq.s	loc_19712
00019878 3169 0008 0008             		move.w	8(a1),8(a0)
0001987E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019884 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001988A B2C8                       		cmpa.w	a0,a1
0001988C 6500                       		bcs.s	Obj76_Display
0001988E 3029 0012                  		move.w	$12(a1),d0
00019892 48C0                       		ext.l	d0
00019894 E080                       		asr.l	#8,d0
00019896 D168 000C                  		add.w	d0,$C(a0)
0001989A 6000                       		bra.s	Obj76_Display
0001989C                            ; ===========================================================================
0001989C                            
0001989C                            Obj76_Solid:				; XREF: Obj76_Action
0001989C 323C 001B                  		move.w	#$1B,d1
000198A0 343C 0010                  		move.w	#$10,d2
000198A4 363C 0011                  		move.w	#$11,d3
000198A8 3828 0008                  		move.w	8(a0),d4
000198AC 4EB9 0000 FB4C             		jsr	SolidObject
000198B2                            
000198B2                            Obj76_Display:				; XREF: Obj76_Action
000198B2 4EF9 0000 D77C             		jmp	DisplaySprite
000198B8                            ; ===========================================================================
000198B8                            
000198B8                            loc_19762:				; XREF: Obj76_Index
000198B8 4A28 0001                  		tst.b	1(a0)
000198BC 6A00                       		bpl.s	Obj76_Delete
000198BE 4EB9 0000 D72A             		jsr	ObjectFall
000198C4 4EF9 0000 D77C             		jmp	DisplaySprite
000198CA                            ; ===========================================================================
000198CA                            
000198CA                            Obj76_Delete:
000198CA 4EF9 0000 D7B8             		jmp	DeleteObject
000198D0                            
000198D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000198D0                            
000198D0                            
000198D0                            Obj76_Break:				; XREF: Obj76_Action
000198D0 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
000198D4 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
000198D8 7801                       		moveq	#1,d4
000198DA 7203                       		moveq	#3,d1
000198DC 7438                       		moveq	#$38,d2
000198DE 5428 0024                  		addq.b	#2,$24(a0)
000198E2 117C 0008 0019             		move.b	#8,$19(a0)
000198E8 117C 0008 0016             		move.b	#8,$16(a0)
000198EE 43D0                       		lea	(a0),a1
000198F0 6000                       		bra.s	Obj76_MakeFrag
000198F2                            ; ===========================================================================
000198F2                            
000198F2                            Obj76_LoopFrag:
000198F2 4EB9 0000 DC18             		jsr	SingleObjLoad2
000198F8 6600                       		bne.s	loc_197D4
000198FA                            
000198FA                            Obj76_MakeFrag:
000198FA 45D0                       		lea	(a0),a2
000198FC 47D1                       		lea	(a1),a3
000198FE 7603                       		moveq	#3,d3
00019900                            
00019900                            loc_197AA:
00019900 26DA                       		move.l	(a2)+,(a3)+
00019902 26DA                       		move.l	(a2)+,(a3)+
00019904 26DA                       		move.l	(a2)+,(a3)+
00019906 26DA                       		move.l	(a2)+,(a3)+
00019908 51CB FFF6                  		dbf	d3,loc_197AA
0001990C                            
0001990C 335C 0010                  		move.w	(a4)+,$10(a1)
00019910 335C 0012                  		move.w	(a4)+,$12(a1)
00019914 361D                       		move.w	(a5)+,d3
00019916 D769 0008                  		add.w	d3,8(a1)
0001991A 361D                       		move.w	(a5)+,d3
0001991C D769 000C                  		add.w	d3,$C(a1)
00019920 1344 001A                  		move.b	d4,$1A(a1)
00019924 5244                       		addq.w	#1,d4
00019926 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001992A                            
0001992A                            loc_197D4:
0001992A 303C 00CB                  		move.w	#$CB,d0
0001992E 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play smashing sound
00019934                            ; End of function Obj76_Break
00019934                            
00019934                            ; ===========================================================================
00019934 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
00019938 0180 FE00                  		dc.w $180, $FE00
0001993C FF00 FF00                  		dc.w $FF00, $FF00
00019940 0100 FF00                  		dc.w $100, $FF00
00019944 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
00019948 0010 0000                  		dc.w $10, 0
0001994C 0000 0010                  		dc.w 0,	$10
00019950 0010 0010                  		dc.w $10, $10
00019954                            ; ---------------------------------------------------------------------------
00019954                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019954                            ; ---------------------------------------------------------------------------
00019954                            Map_obj76:
00019954                            	include "_maps\obj76.asm"
00019954                            ; ---------------------------------------------------------------------------
00019954                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019954                            ; ---------------------------------------------------------------------------
00019954 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
00019958 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001995C 0000                       		dc.w byte_19826-Map_obj76
0001995E 02                         byte_19808:	dc.b 2
0001995F F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019964 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
00019969 00                         		dc.b 0
0001996A 01                         byte_19814:	dc.b 1
0001996B F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019970 01                         byte_1981A:	dc.b 1
00019971 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019976 01                         byte_19820:	dc.b 1
00019977 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001997C 01                         byte_19826:	dc.b 1
0001997D F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019982                            		even
00019982                            		even
00019982                            
00019982                            ; ===========================================================================
00019982                            
00019982                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019982 4EF9 0000 D7B8             		jmp	DeleteObject
00019988                            ; ===========================================================================
00019988                            ; ---------------------------------------------------------------------------
00019988                            ; Object 82 - Eggman (SBZ2)
00019988                            ; ---------------------------------------------------------------------------
00019988                            
00019988                            Obj82:					; XREF: Obj_Index
00019988 7000                       		moveq	#0,d0
0001998A 1028 0024                  		move.b	$24(a0),d0
0001998E 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019992 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019996                            ; ===========================================================================
00019996 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
00019998 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001999A 0000                       		dc.w Obj82_Switch-Obj82_Index
0001999C                            
0001999C 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001999F 0400 03                    		dc.b 4,	0, 3
000199A2                            ; ===========================================================================
000199A2                            
000199A2                            Obj82_Main:				; XREF: Obj82_Index
000199A2 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
000199A6 317C 2160 0008             		move.w	#$2160,8(a0)
000199AC 317C 05A4 000C             		move.w	#$5A4,$C(a0)
000199B2 117C 000F 0020             		move.b	#$F,$20(a0)
000199B8 117C 0010 0021             		move.b	#$10,$21(a0)
000199BE 08A8 0000 0022             		bclr	#0,$22(a0)
000199C4 4228 0025                  		clr.b	$25(a0)
000199C8 115A 0024                  		move.b	(a2)+,$24(a0)
000199CC 115A 001C                  		move.b	(a2)+,$1C(a0)
000199D0 115A 0018                  		move.b	(a2)+,$18(a0)
000199D4 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
000199DC 317C 0400 0002             		move.w	#$400,2(a0)
000199E2 117C 0004 0001             		move.b	#4,1(a0)
000199E8 08E8 0007 0001             		bset	#7,1(a0)
000199EE 117C 0020 0019             		move.b	#$20,$19(a0)
000199F4 4EB9 0000 DC18             		jsr	SingleObjLoad2
000199FA 6600                       		bne.s	Obj82_Eggman
000199FC 2348 0034                  		move.l	a0,$34(a1)
00019A00 12BC 0082                  		move.b	#$82,(a1)	; load switch object
00019A04 337C 2130 0008             		move.w	#$2130,8(a1)
00019A0A 337C 05BC 000C             		move.w	#$5BC,$C(a1)
00019A10 4228 0025                  		clr.b	$25(a0)
00019A14 135A 0024                  		move.b	(a2)+,$24(a1)
00019A18 135A 001C                  		move.b	(a2)+,$1C(a1)
00019A1C 135A 0018                  		move.b	(a2)+,$18(a1)
00019A20 237C 0000 BF70 0004        		move.l	#Map_obj32,4(a1)
00019A28 337C 04A4 0002             		move.w	#$4A4,2(a1)
00019A2E 137C 0004 0001             		move.b	#4,1(a1)
00019A34 08E9 0007 0001             		bset	#7,1(a1)
00019A3A 137C 0010 0019             		move.b	#$10,$19(a1)
00019A40 137C 0000 001A             		move.b	#0,$1A(a1)
00019A46                            
00019A46                            Obj82_Eggman:				; XREF: Obj82_Index
00019A46 7000                       		moveq	#0,d0
00019A48 1028 0025                  		move.b	$25(a0),d0
00019A4C 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019A50 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019A54 43FA 0000                  		lea	Ani_obj82(pc),a1
00019A58 4EB9 0000 A7EE             		jsr	AnimateSprite
00019A5E 4EF9 0000 D77C             		jmp	DisplaySprite
00019A64                            ; ===========================================================================
00019A64 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019A66 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
00019A68 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
00019A6A 0000                       		dc.w loc_19934-Obj82_EggIndex
00019A6C                            ; ===========================================================================
00019A6C                            
00019A6C                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
00019A6C 3028 0008                  		move.w	8(a0),d0
00019A70 9078 D008                  		sub.w	($FFFFD008).w,d0
00019A74 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
00019A78 6400                       		bcc.s	loc_19934	; if not, branch
00019A7A 5428 0025                  		addq.b	#2,$25(a0)
00019A7E 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019A84 117C 0001 001C             		move.b	#1,$1C(a0)
00019A8A                            
00019A8A                            loc_19934:				; XREF: Obj82_EggIndex
00019A8A 4EF9 0000 D756             		jmp	SpeedToPos
00019A90                            ; ===========================================================================
00019A90                            
00019A90                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019A90 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019A94 6600                       		bne.s	loc_19954	; if time remains, branch
00019A96 5428 0025                  		addq.b	#2,$25(a0)
00019A9A 117C 0002 001C             		move.b	#2,$1C(a0)
00019AA0 5868 000C                  		addq.w	#4,$C(a0)
00019AA4 317C 000F 003C             		move.w	#15,$3C(a0)
00019AAA                            
00019AAA                            loc_19954:
00019AAA 60DE                       		bra.s	loc_19934
00019AAC                            ; ===========================================================================
00019AAC                            
00019AAC                            Obj82_Leap:				; XREF: Obj82_EggIndex
00019AAC 5368 003C                  		subq.w	#1,$3C(a0)
00019AB0 6E00                       		bgt.s	loc_199D0
00019AB2 6600                       		bne.s	loc_1996A
00019AB4 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
00019ABA 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019AC0                            
00019AC0                            loc_1996A:
00019AC0 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019AC6 6E00                       		bgt.s	loc_19976
00019AC8 4268 0010                  		clr.w	$10(a0)
00019ACC                            
00019ACC                            loc_19976:
00019ACC 0668 0024 0012             		addi.w	#$24,$12(a0)
00019AD2 4A68 0012                  		tst.w	$12(a0)
00019AD6 6B00                       		bmi.s	Obj82_FindBlocks
00019AD8 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019ADE 6500                       		bcs.s	Obj82_FindBlocks
00019AE0 317C 5357 0028             		move.w	#$5357,$28(a0)
00019AE6 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
00019AEC 6500                       		bcs.s	Obj82_FindBlocks
00019AEE 317C 059B 000C             		move.w	#$59B,$C(a0)
00019AF4 4268 0012                  		clr.w	$12(a0)
00019AF8                            
00019AF8                            Obj82_FindBlocks:
00019AF8 3028 0010                  		move.w	$10(a0),d0
00019AFC 8068 0012                  		or.w	$12(a0),d0
00019B00 6600                       		bne.s	loc_199D0
00019B02 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
00019B06 703E                       		moveq	#$3E,d0
00019B08 7240                       		moveq	#$40,d1
00019B0A                            
00019B0A                            Obj82_FindLoop:	
00019B0A D2C1                       		adda.w	d1,a1		; jump to next object RAM
00019B0C 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
00019B10 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
00019B14                            
00019B14 6600                       		bne.s	loc_199D0
00019B16 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
00019B1C 5428 0025                  		addq.b	#2,$25(a0)
00019B20 117C 0001 001C             		move.b	#1,$1C(a0)
00019B26                            
00019B26                            loc_199D0:
00019B26 6000 FF62                  		bra.w	loc_19934
00019B2A                            ; ===========================================================================
00019B2A                            
00019B2A                            Obj82_Switch:				; XREF: Obj82_Index
00019B2A 7000                       		moveq	#0,d0
00019B2C 1028 0025                  		move.b	$25(a0),d0
00019B30 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
00019B34 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
00019B38                            ; ===========================================================================
00019B38 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
00019B3A 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
00019B3C                            ; ===========================================================================
00019B3C                            
00019B3C                            loc_199E6:				; XREF: Obj82_SwIndex
00019B3C 2268 0034                  		movea.l	$34(a0),a1
00019B40 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
00019B46 6600                       		bne.s	Obj82_SwDisplay
00019B48 117C 0001 001A             		move.b	#1,$1A(a0)
00019B4E 5428 0025                  		addq.b	#2,$25(a0)
00019B52                            
00019B52                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019B52 4EF9 0000 D77C             		jmp	DisplaySprite
00019B58                            ; ===========================================================================
00019B58                            Ani_obj82:
00019B58                            	include "_anim\obj82.asm"
00019B58                            ; ---------------------------------------------------------------------------
00019B58                            ; Animation script - Eggman (SBZ2)
00019B58                            ; ---------------------------------------------------------------------------
00019B58 0000                       		dc.w byte_19A10-Ani_obj82
00019B5A 0000                       		dc.w byte_19A14-Ani_obj82
00019B5C 0000                       		dc.w byte_19A18-Ani_obj82
00019B5E 0000                       		dc.w byte_19A20-Ani_obj82
00019B60 0000                       		dc.w byte_19A24-Ani_obj82
00019B62 0000                       		dc.w byte_19A2A-Ani_obj82
00019B64 0000                       		dc.w byte_19A30-Ani_obj82
00019B66 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
00019B6A 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00019B6E 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019B76 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
00019B7A 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019B80 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019B86 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
00019B8A                            		even
00019B8A                            		even
00019B8A                            
00019B8A                            ; ---------------------------------------------------------------------------
00019B8A                            ; Sprite mappings - Eggman (SBZ2)
00019B8A                            ; ---------------------------------------------------------------------------
00019B8A                            Map_obj82:
00019B8A                            	include "_maps\obj82.asm"
00019B8A                            ; ---------------------------------------------------------------------------
00019B8A                            ; Sprite mappings - Eggman (SBZ2)
00019B8A                            ; ---------------------------------------------------------------------------
00019B8A 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
00019B8E 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00019B92 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
00019B96 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
00019B9A 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
00019B9E 0000                       		dc.w byte_19B4F-Map_obj82
00019BA0 03                         byte_19A4A:	dc.b 3
00019BA1 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019BA6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019BAB 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019BB0 04                         byte_19A5A:	dc.b 4
00019BB1 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
00019BB6 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019BBB 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019BC0 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019BC5 00                         		dc.b 0
00019BC6 04                         byte_19A70:	dc.b 4
00019BC7 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
00019BCC E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00019BD1 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00019BD6 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
00019BDB 00                         		dc.b 0
00019BDC 04                         byte_19A86:	dc.b 4
00019BDD F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00019BE2 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00019BE7 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
00019BEC EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
00019BF1 00                         		dc.b 0
00019BF2 04                         byte_19A9C:	dc.b 4
00019BF3 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019BF8 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019BFD 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
00019C02 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019C07 00                         		dc.b 0
00019C08 04                         byte_19AB2:	dc.b 4
00019C09 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019C0E E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019C13 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019C18 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019C1D 00                         		dc.b 0
00019C1E 07                         byte_19AC8:	dc.b 7
00019C1F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019C24 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019C29 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019C2E 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019C33 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019C38 F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
00019C3D F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
00019C42 05                         byte_19AEC:	dc.b 5
00019C43 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
00019C48 F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
00019C4D 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019C52 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019C57 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019C5C 06                         byte_19B06:	dc.b 6
00019C5D EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
00019C62 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
00019C67 0905 0844 00               		dc.b 9,	5, 8, $44, 0
00019C6C 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
00019C71 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
00019C76 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00019C7B 00                         		dc.b 0
00019C7C 08                         byte_19B26:	dc.b 8
00019C7D E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019C82 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019C87 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019C8C 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019C91 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00019C96 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
00019C9B 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00019CA0 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00019CA5 03                         byte_19B4F:	dc.b 3
00019CA6 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
00019CAB F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00019CB0 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00019CB6 00                         		even
00019CB6 00                         		even
00019CB6                            
00019CB6                            ; ===========================================================================
00019CB6                            ; ---------------------------------------------------------------------------
00019CB6                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00019CB6                            ; ---------------------------------------------------------------------------
00019CB6                            
00019CB6                            Obj83:					; XREF: Obj_Index
00019CB6 7000                       		moveq	#0,d0
00019CB8 1028 0024                  		move.b	$24(a0),d0
00019CBC 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00019CC0 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00019CC4                            ; ===========================================================================
00019CC4 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00019CC6 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00019CC8 0000                       		dc.w loc_19C36-Obj83_Index
00019CCA 0000                       		dc.w loc_19C62-Obj83_Index
00019CCC 0000                       		dc.w loc_19C72-Obj83_Index
00019CCE 0000                       		dc.w loc_19C80-Obj83_Index
00019CD0                            ; ===========================================================================
00019CD0                            
00019CD0                            Obj83_Main:				; XREF: Obj83_Index
00019CD0 317C 2080 0008             		move.w	#$2080,8(a0)
00019CD6 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00019CDC 117C 0080 0019             		move.b	#$80,$19(a0)
00019CE2 117C 0010 0016             		move.b	#$10,$16(a0)
00019CE8 117C 0004 0001             		move.b	#4,1(a0)
00019CEE 08E8 0007 0001             		bset	#7,1(a0)
00019CF4 7800                       		moveq	#0,d4
00019CF6 3A3C 2010                  		move.w	#$2010,d5
00019CFA 7C07                       		moveq	#7,d6
00019CFC 45E8 0030                  		lea	$30(a0),a2
00019D00                            
00019D00                            Obj83_MakeBlock:
00019D00 4EB9 0000 DC02             		jsr	SingleObjLoad
00019D06 6600                       		bne.s	Obj83_ExitMake
00019D08 34C9                       		move.w	a1,(a2)+
00019D0A 12BC 0083                  		move.b	#$83,(a1)	; load block object
00019D0E 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00019D16 337C 4518 0002             		move.w	#$4518,2(a1)
00019D1C 137C 0004 0001             		move.b	#4,1(a1)
00019D22 137C 0010 0019             		move.b	#$10,$19(a1)
00019D28 137C 0010 0016             		move.b	#$10,$16(a1)
00019D2E 137C 0003 0018             		move.b	#3,$18(a1)
00019D34 3345 0008                  		move.w	d5,8(a1)	; set X	position
00019D38 337C 05D0 000C             		move.w	#$5D0,$C(a1)
00019D3E 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
00019D42 137C 0008 0024             		move.b	#8,$24(a1)
00019D48 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
00019D4C                            
00019D4C                            Obj83_ExitMake:
00019D4C 5428 0024                  		addq.b	#2,$24(a0)
00019D50 4E75                       		rts	
00019D52                            ; ===========================================================================
00019D52                            
00019D52                            Obj83_ChkBreak:				; XREF: Obj83_Index
00019D52 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019D58 6600                       		bne.s	Obj83_Solid	; if not, branch
00019D5A 4228 001A                  		clr.b	$1A(a0)
00019D5E 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
00019D62                            
00019D62                            Obj83_Solid:
00019D62 7000                       		moveq	#0,d0
00019D64 1028 001A                  		move.b	$1A(a0),d0
00019D68 4400                       		neg.b	d0
00019D6A 4880                       		ext.w	d0
00019D6C 5040                       		addq.w	#8,d0
00019D6E E940                       		asl.w	#4,d0
00019D70 383C 2100                  		move.w	#$2100,d4
00019D74 9840                       		sub.w	d0,d4
00019D76 1140 0019                  		move.b	d0,$19(a0)
00019D7A 3144 0008                  		move.w	d4,8(a0)
00019D7E 720B                       		moveq	#$B,d1
00019D80 D240                       		add.w	d0,d1
00019D82 7410                       		moveq	#$10,d2
00019D84 7611                       		moveq	#$11,d3
00019D86 4EF9 0000 FB4C             		jmp	SolidObject
00019D8C                            ; ===========================================================================
00019D8C                            
00019D8C                            loc_19C36:				; XREF: Obj83_Index
00019D8C 0428 000E 001E             		subi.b	#$E,$1E(a0)
00019D92 6400                       		bcc.s	Obj83_Solid2
00019D94 70FF                       		moveq	#-1,d0
00019D96 1028 001A                  		move.b	$1A(a0),d0
00019D9A 4880                       		ext.w	d0
00019D9C D040                       		add.w	d0,d0
00019D9E 3030 0030                  		move.w	$30(a0,d0.w),d0
00019DA2 2240                       		movea.l	d0,a1
00019DA4 337C 474F 0028             		move.w	#$474F,$28(a1)
00019DAA 5228 001A                  		addq.b	#1,$1A(a0)
00019DAE 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
00019DB4 6700                       		beq.s	loc_19C62
00019DB6                            
00019DB6                            Obj83_Solid2:
00019DB6 60AA                       		bra.s	Obj83_Solid
00019DB8                            ; ===========================================================================
00019DB8                            
00019DB8                            loc_19C62:				; XREF: Obj83_Index
00019DB8 08A8 0003 0022             		bclr	#3,$22(a0)
00019DBE 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00019DC4 6000 FBBC                  		bra.w	loc_1982C
00019DC8                            ; ===========================================================================
00019DC8                            
00019DC8                            loc_19C72:				; XREF: Obj83_Index
00019DC8 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019DCE 6700                       		beq.s	Obj83_Break	; if yes, branch
00019DD0 4EF9 0000 D77C             		jmp	DisplaySprite
00019DD6                            ; ===========================================================================
00019DD6                            
00019DD6                            loc_19C80:				; XREF: Obj83_Index
00019DD6 4A28 0001                  		tst.b	1(a0)
00019DDA 6A00 FBA6                  		bpl.w	loc_1982C
00019DDE 4EB9 0000 D72A             		jsr	ObjectFall
00019DE4 4EF9 0000 D77C             		jmp	DisplaySprite
00019DEA                            ; ===========================================================================
00019DEA                            
00019DEA                            Obj83_Break:				; XREF: loc_19C72
00019DEA 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
00019DEE 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
00019DF2 7801                       		moveq	#1,d4
00019DF4 7203                       		moveq	#3,d1
00019DF6 7438                       		moveq	#$38,d2
00019DF8 5428 0024                  		addq.b	#2,$24(a0)
00019DFC 117C 0008 0019             		move.b	#8,$19(a0)
00019E02 117C 0008 0016             		move.b	#8,$16(a0)
00019E08 43D0                       		lea	(a0),a1
00019E0A 6000                       		bra.s	Obj83_MakeFrag
00019E0C                            ; ===========================================================================
00019E0C                            
00019E0C                            Obj83_LoopFrag:
00019E0C 4EB9 0000 DC18             		jsr	SingleObjLoad2
00019E12 6600                       		bne.s	Obj83_BreakSnd
00019E14                            
00019E14                            Obj83_MakeFrag:				; XREF: Obj83_Break
00019E14 45D0                       		lea	(a0),a2
00019E16 47D1                       		lea	(a1),a3
00019E18 7603                       		moveq	#3,d3
00019E1A                            
00019E1A                            loc_19CC4:
00019E1A 26DA                       		move.l	(a2)+,(a3)+
00019E1C 26DA                       		move.l	(a2)+,(a3)+
00019E1E 26DA                       		move.l	(a2)+,(a3)+
00019E20 26DA                       		move.l	(a2)+,(a3)+
00019E22 51CB FFF6                  		dbf	d3,loc_19CC4
00019E26                            
00019E26 335C 0012                  		move.w	(a4)+,$12(a1)
00019E2A 361D                       		move.w	(a5)+,d3
00019E2C D769 0008                  		add.w	d3,8(a1)
00019E30 361D                       		move.w	(a5)+,d3
00019E32 D769 000C                  		add.w	d3,$C(a1)
00019E36 1344 001A                  		move.b	d4,$1A(a1)
00019E3A 5244                       		addq.w	#1,d4
00019E3C 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
00019E40                            
00019E40                            Obj83_BreakSnd:
00019E40 303C 00CB                  		move.w	#$CB,d0
00019E44 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play smashing sound
00019E4A 4EF9 0000 D77C             		jmp	DisplaySprite
00019E50                            ; ===========================================================================
00019E50 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
00019E54 0120 00C0                  		dc.w $120, $C0
00019E58 FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
00019E5C 0010 0000                  		dc.w $10, 0
00019E60 0000 0010                  		dc.w 0,	$10
00019E64 0010 0010                  		dc.w $10, $10
00019E68                            ; ---------------------------------------------------------------------------
00019E68                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019E68                            ; ---------------------------------------------------------------------------
00019E68                            Map_obj83:
00019E68                            	include "_maps\obj83.asm"
00019E68                            ; ---------------------------------------------------------------------------
00019E68                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019E68                            ; ---------------------------------------------------------------------------
00019E68 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
00019E6C 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
00019E70 0000                       		dc.w byte_19D46-Map_obj83
00019E72 01                         byte_19D1C:	dc.b 1
00019E73 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00019E78 02                         byte_19D22:	dc.b 2
00019E79 F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
00019E7E F801 0004 00               		dc.b $F8, 1, 0,	4, 0
00019E83 00                         		dc.b 0
00019E84 02                         byte_19D2E:	dc.b 2
00019E85 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019E8A F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
00019E8F 00                         		dc.b 0
00019E90 02                         byte_19D3A:	dc.b 2
00019E91 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
00019E96 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
00019E9B 00                         		dc.b 0
00019E9C 02                         byte_19D46:	dc.b 2
00019E9D F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
00019EA2 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
00019EA8 00                         		even
00019EA8 00                         		even
00019EA8                            
00019EA8                            ; ===========================================================================
00019EA8                            ; ---------------------------------------------------------------------------
00019EA8                            ; Object 85 - Eggman (FZ)
00019EA8                            ; ---------------------------------------------------------------------------
00019EA8                            
00019EA8                            Obj85_Delete:
00019EA8 4EF9 0000 D7B8             		jmp	DeleteObject
00019EAE                            ; ===========================================================================
00019EAE                            
00019EAE                            Obj85:					; XREF: Obj_Index
00019EAE 7000                       		moveq	#0,d0
00019EB0 1028 0024                  		move.b	$24(a0),d0
00019EB4 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
00019EB8 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
00019EBC                            ; ===========================================================================
00019EBC 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
00019EBE 0000                       		dc.w Obj85_Eggman-Obj85_Index
00019EC0 0000                       		dc.w loc_1A38E-Obj85_Index
00019EC2 0000                       		dc.w loc_1A346-Obj85_Index
00019EC4 0000                       		dc.w loc_1A2C6-Obj85_Index
00019EC6 0000                       		dc.w loc_1A3AC-Obj85_Index
00019EC8 0000                       		dc.w loc_1A264-Obj85_Index
00019ECA                            
00019ECA 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
00019ED0 0001 9B8A                  		dc.l Map_obj82		; mappings pointer
00019ED4 25B0 0590 0300             		dc.w $25B0, $590, $300
00019EDA 0000 0000                  		dc.l Map_obj84
00019EDE 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
00019EE4 0000 0000                  		dc.l Map_FZBoss
00019EE8 26E0 0596 0470             		dc.w $26E0, $596, $470
00019EEE 0001 9B8A                  		dc.l Map_obj82
00019EF2 26E0 0596 0400             		dc.w $26E0, $596, $400
00019EF8 0001 7E6C                  		dc.l Map_Eggman
00019EFC 26E0 0596 0400             		dc.w $26E0, $596, $400
00019F02 0001 7E6C                  		dc.l Map_Eggman
00019F06                            
00019F06 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
00019F0B 0400 0112 08               		dc.b 4,	0, 1, $12, 8
00019F10 0600 0300 00               		dc.b 6,	0, 3, 0, 0
00019F15 0800 0300 00               		dc.b 8,	0, 3, 0, 0
00019F1A 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
00019F1F 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
00019F24                            ; ===========================================================================
00019F24                            
00019F24                            Obj85_Main:				; XREF: Obj85_Index
00019F24 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
00019F28 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
00019F2C 2248                       		movea.l	a0,a1
00019F2E 7205                       		moveq	#5,d1
00019F30 6000                       		bra.s	Obj85_LoadBoss
00019F32                            ; ===========================================================================
00019F32                            
00019F32                            Obj85_Loop:
00019F32 4EB9 0000 DC18             		jsr	SingleObjLoad2
00019F38 6600                       		bne.s	loc_19E20
00019F3A                            
00019F3A                            Obj85_LoadBoss:				; XREF: Obj85_Main
00019F3A 12BC 0085                  		move.b	#$85,(a1)
00019F3E 335A 0008                  		move.w	(a2)+,8(a1)
00019F42 335A 000C                  		move.w	(a2)+,$C(a1)
00019F46 335A 0002                  		move.w	(a2)+,2(a1)
00019F4A 235A 0004                  		move.l	(a2)+,4(a1)
00019F4E 135B 0024                  		move.b	(a3)+,$24(a1)
00019F52 135B 001C                  		move.b	(a3)+,$1C(a1)
00019F56 135B 0018                  		move.b	(a3)+,$18(a1)
00019F5A 135B 0017                  		move.b	(a3)+,$17(a1)
00019F5E 135B 0016                  		move.b	(a3)+,$16(a1)
00019F62 137C 0004 0001             		move.b	#4,1(a1)
00019F68 08E8 0007 0001             		bset	#7,1(a0)
00019F6E 2348 0034                  		move.l	a0,$34(a1)
00019F72 51C9 FFBE                  		dbf	d1,Obj85_Loop
00019F76                            
00019F76                            loc_19E20:
00019F76 45E8 0036                  		lea	$36(a0),a2
00019F7A 4EB9 0000 DC02             		jsr	SingleObjLoad
00019F80 6600                       		bne.s	loc_19E5A
00019F82 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
00019F86 3489                       		move.w	a1,(a2)
00019F88 2348 0034                  		move.l	a0,$34(a1)
00019F8C 45E8 0038                  		lea	$38(a0),a2
00019F90 7400                       		moveq	#0,d2
00019F92 7203                       		moveq	#3,d1
00019F94                            
00019F94                            loc_19E3E:
00019F94 4EB9 0000 DC18             		jsr	SingleObjLoad2
00019F9A 6600                       		bne.s	loc_19E5A
00019F9C 34C9                       		move.w	a1,(a2)+
00019F9E 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
00019FA2 2348 0034                  		move.l	a0,$34(a1)
00019FA6 1342 0028                  		move.b	d2,$28(a1)
00019FAA 5442                       		addq.w	#2,d2
00019FAC 51C9 FFE6                  		dbf	d1,loc_19E3E
00019FB0                            
00019FB0                            loc_19E5A:
00019FB0 317C 0000 0034             		move.w	#0,$34(a0)
00019FB6 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019FBC 317C FFFF 0030             		move.w	#-1,$30(a0)
00019FC2                            
00019FC2                            Obj85_Eggman:				; XREF: Obj85_Index
00019FC2 7000                       		moveq	#0,d0
00019FC4 1028 0034                  		move.b	$34(a0),d0
00019FC8 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
00019FCC 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
00019FD0 4EF9 0000 D77C             		jmp	DisplaySprite
00019FD6                            ; ===========================================================================
00019FD6 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
00019FDA 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
00019FDE 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
00019FE2 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
00019FE6                            ; ===========================================================================
00019FE6                            
00019FE6                            loc_19E90:				; XREF: off_19E80
00019FE6 4AB8 F680                  		tst.l	($FFFFF680).w
00019FEA 6600                       		bne.s	loc_19EA2
00019FEC 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00019FF2 6500                       		bcs.s	loc_19EA2
00019FF4 5428 0034                  		addq.b	#2,$34(a0)
00019FF8                            
00019FF8                            loc_19EA2:
00019FF8 52B8 F636                  		addq.l	#1,($FFFFF636).w
00019FFC 4E75                       		rts	
00019FFE                            ; ===========================================================================
00019FFE                            
00019FFE                            loc_19EA8:				; XREF: off_19E80
00019FFE 4A68 0030                  		tst.w	$30(a0)
0001A002 6A00                       		bpl.s	loc_19F10
0001A004 4268 0030                  		clr.w	$30(a0)
0001A008 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001A00E 0240 000C                  		andi.w	#$C,d0
0001A012 3200                       		move.w	d0,d1
0001A014 5441                       		addq.w	#2,d1
0001A016 4A80                       		tst.l	d0
0001A018 6A00                       		bpl.s	loc_19EC6
0001A01A C141                       		exg	d1,d0
0001A01C                            
0001A01C                            loc_19EC6:
0001A01C 43FA 0000                  		lea	word_19FD6(pc),a1
0001A020 3031 0000                  		move.w	(a1,d0.w),d0
0001A024 3231 1000                  		move.w	(a1,d1.w),d1
0001A028 3140 0030                  		move.w	d0,$30(a0)
0001A02C 74FF                       		moveq	#-1,d2
0001A02E 3430 0038                  		move.w	$38(a0,d0.w),d2
0001A032 2242                       		movea.l	d2,a1
0001A034 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A03A 337C FFFF 0030             		move.w	#-1,$30(a1)
0001A040 3430 1038                  		move.w	$38(a0,d1.w),d2
0001A044 2242                       		movea.l	d2,a1
0001A046 137C 0001 0029             		move.b	#1,$29(a1)
0001A04C 337C 0000 0030             		move.w	#0,$30(a1)
0001A052 317C 0001 0032             		move.w	#1,$32(a0)
0001A058 4228 0035                  		clr.b	$35(a0)
0001A05C 303C 00B7                  		move.w	#$B7,d0
0001A060 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001A066                            
0001A066                            loc_19F10:
0001A066 4A68 0032                  		tst.w	$32(a0)
0001A06A 6B00 0000                  		bmi.w	loc_19FA6
0001A06E 08A8 0000 0022             		bclr	#0,$22(a0)
0001A074 3038 D008                  		move.w	($FFFFD008).w,d0
0001A078 9068 0008                  		sub.w	8(a0),d0
0001A07C 6500                       		bcs.s	loc_19F2E
0001A07E 08E8 0000 0022             		bset	#0,$22(a0)
0001A084                            
0001A084                            loc_19F2E:
0001A084 323C 002B                  		move.w	#$2B,d1
0001A088 343C 0014                  		move.w	#$14,d2
0001A08C 363C 0014                  		move.w	#$14,d3
0001A090 3828 0008                  		move.w	8(a0),d4
0001A094 4EB9 0000 FB4C             		jsr	SolidObject
0001A09A 4A44                       		tst.w	d4
0001A09C 6E00                       		bgt.s	loc_19F50
0001A09E                            
0001A09E                            loc_19F48:
0001A09E 4A28 0035                  		tst.b	$35(a0)
0001A0A2 6600                       		bne.s	loc_19F88
0001A0A4 6000                       		bra.s	loc_19F96
0001A0A6                            ; ===========================================================================
0001A0A6                            
0001A0A6                            loc_19F50:
0001A0A6 5E78 F636                  		addq.w	#7,($FFFFF636).w
0001A0AA 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
0001A0B0 66EC                       		bne.s	loc_19F48
0001A0B2 303C 0300                  		move.w	#$300,d0
0001A0B6 0828 0000 0022             		btst	#0,$22(a0)
0001A0BC 6600                       		bne.s	loc_19F6A
0001A0BE 4440                       		neg.w	d0
0001A0C0                            
0001A0C0                            loc_19F6A:
0001A0C0 31C0 D010                  		move.w	d0,($FFFFD010).w
0001A0C4 4A28 0035                  		tst.b	$35(a0)
0001A0C8 6600                       		bne.s	loc_19F88
0001A0CA 5328 0021                  		subq.b	#1,$21(a0)
0001A0CE 117C 0064 0035             		move.b	#$64,$35(a0)
0001A0D4 303C 00AC                  		move.w	#$AC,d0
0001A0D8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A0DE                            
0001A0DE                            loc_19F88:
0001A0DE 5328 0035                  		subq.b	#1,$35(a0)
0001A0E2 6700                       		beq.s	loc_19F96
0001A0E4 117C 0003 001C             		move.b	#3,$1C(a0)
0001A0EA 6000                       		bra.s	loc_19F9C
0001A0EC                            ; ===========================================================================
0001A0EC                            
0001A0EC                            loc_19F96:
0001A0EC 117C 0001 001C             		move.b	#1,$1C(a0)
0001A0F2                            
0001A0F2                            loc_19F9C:
0001A0F2 43FA FA64                  		lea	Ani_obj82(pc),a1
0001A0F6 4EF9 0000 A7EE             		jmp	AnimateSprite
0001A0FC                            ; ===========================================================================
0001A0FC                            
0001A0FC                            loc_19FA6:
0001A0FC 4A28 0021                  		tst.b	$21(a0)
0001A100 6700                       		beq.s	loc_19FBC
0001A102 5428 0034                  		addq.b	#2,$34(a0)
0001A106 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A10C 4268 0032                  		clr.w	$32(a0)
0001A110 4E75                       		rts	
0001A112                            ; ===========================================================================
0001A112                            
0001A112                            loc_19FBC:
0001A112 117C 0006 0034             		move.b	#6,$34(a0)
0001A118 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001A11E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A124 117C 0014 0016             		move.b	#$14,$16(a0)
0001A12A 4E75                       		rts	
0001A12C                            ; ===========================================================================
0001A12C 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001A13C                            ; ===========================================================================
0001A13C                            
0001A13C                            loc_19FE6:				; XREF: off_19E80
0001A13C 70FF                       		moveq	#-1,d0
0001A13E 3028 0036                  		move.w	$36(a0),d0
0001A142 2240                       		movea.l	d0,a1
0001A144 4A68 0030                  		tst.w	$30(a0)
0001A148 6A00                       		bpl.s	loc_1A000
0001A14A 4268 0030                  		clr.w	$30(a0)
0001A14E 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A154 6100                       		bsr.s	loc_1A020
0001A156                            
0001A156                            loc_1A000:
0001A156 700F                       		moveq	#$F,d0
0001A158 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A15C 6600                       		bne.s	loc_1A00A
0001A15E 6100                       		bsr.s	loc_1A020
0001A160                            
0001A160                            loc_1A00A:
0001A160 4A68 0032                  		tst.w	$32(a0)
0001A164 6700                       		beq.s	locret_1A01E
0001A166 5528 0034                  		subq.b	#2,$34(a0)
0001A16A 317C FFFF 0030             		move.w	#-1,$30(a0)
0001A170 4268 0032                  		clr.w	$32(a0)
0001A174                            
0001A174                            locret_1A01E:
0001A174 4E75                       		rts	
0001A176                            ; ===========================================================================
0001A176                            
0001A176                            loc_1A020:
0001A176 303C 00B1                  		move.w	#$B1,d0
0001A17A 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play electricity sound
0001A180                            ; ===========================================================================
0001A180                            
0001A180                            loc_1A02A:				; XREF: off_19E80
0001A180 117C 0030 0017             		move.b	#$30,$17(a0)
0001A186 08E8 0000 0022             		bset	#0,$22(a0)
0001A18C 4EB9 0000 D756             		jsr	SpeedToPos
0001A192 117C 0006 001A             		move.b	#6,$1A(a0)
0001A198 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A19E 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001A1A4 6500                       		bcs.s	loc_1A070
0001A1A6 317C 059C 000C             		move.w	#$59C,$C(a0)
0001A1AC 5428 0034                  		addq.b	#2,$34(a0)
0001A1B0 117C 0020 0017             		move.b	#$20,$17(a0)
0001A1B6 317C 0100 0010             		move.w	#$100,$10(a0)
0001A1BC 317C FF00 0012             		move.w	#-$100,$12(a0)
0001A1C2 5438 F742                  		addq.b	#2,($FFFFF742).w
0001A1C6                            
0001A1C6                            loc_1A070:
0001A1C6 6000 0000                  		bra.w	loc_1A166
0001A1CA                            ; ===========================================================================
0001A1CA                            
0001A1CA                            loc_1A074:				; XREF: off_19E80
0001A1CA 08E8 0000 0022             		bset	#0,$22(a0)
0001A1D0 117C 0004 001C             		move.b	#4,$1C(a0)
0001A1D6 4EB9 0000 D756             		jsr	SpeedToPos
0001A1DC 0668 0010 0012             		addi.w	#$10,$12(a0)
0001A1E2 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001A1E8 6500                       		bcs.s	loc_1A09A
0001A1EA 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A1F0                            
0001A1F0                            loc_1A09A:
0001A1F0 317C 0400 0010             		move.w	#$400,$10(a0)
0001A1F6 3028 0008                  		move.w	8(a0),d0
0001A1FA 9078 D008                  		sub.w	($FFFFD008).w,d0
0001A1FE 6A00                       		bpl.s	loc_1A0B4
0001A200 317C 0500 0010             		move.w	#$500,$10(a0)
0001A206 6000 0000                  		bra.w	loc_1A0F2
0001A20A                            ; ===========================================================================
0001A20A                            
0001A20A                            loc_1A0B4:
0001A20A 0440 0070                  		subi.w	#$70,d0
0001A20E 6500                       		bcs.s	loc_1A0F2
0001A210 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A216 5140                       		subq.w	#8,d0
0001A218 6500                       		bcs.s	loc_1A0F2
0001A21A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001A220 5140                       		subq.w	#8,d0
0001A222 6500                       		bcs.s	loc_1A0F2
0001A224 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A22A 5140                       		subq.w	#8,d0
0001A22C 6500                       		bcs.s	loc_1A0F2
0001A22E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A234 5140                       		subq.w	#8,d0
0001A236 6500                       		bcs.s	loc_1A0F2
0001A238 0468 0080 0010             		subi.w	#$80,$10(a0)
0001A23E 0440 0038                  		subi.w	#$38,d0
0001A242 6500                       		bcs.s	loc_1A0F2
0001A244 4268 0010                  		clr.w	$10(a0)
0001A248                            
0001A248                            loc_1A0F2:
0001A248 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A24E 6500                       		bcs.s	loc_1A110
0001A250 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A256 317C 0240 0010             		move.w	#$240,$10(a0)
0001A25C 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A262 5428 0034                  		addq.b	#2,$34(a0)
0001A266                            
0001A266                            loc_1A110:
0001A266 6000                       		bra.s	loc_1A15C
0001A268                            ; ===========================================================================
0001A268                            
0001A268                            loc_1A112:				; XREF: off_19E80
0001A268 4EB9 0000 D756             		jsr	SpeedToPos
0001A26E 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A274 6500                       		bcs.s	loc_1A124
0001A276 4268 0010                  		clr.w	$10(a0)
0001A27A                            
0001A27A                            loc_1A124:
0001A27A 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A280 4A68 0012                  		tst.w	$12(a0)
0001A284 6B00                       		bmi.s	loc_1A142
0001A286 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A28C 6500                       		bcs.s	loc_1A142
0001A28E 317C 0592 000C             		move.w	#$592,$C(a0)
0001A294 4268 0012                  		clr.w	$12(a0)
0001A298                            
0001A298                            loc_1A142:
0001A298 3028 0010                  		move.w	$10(a0),d0
0001A29C 8068 0012                  		or.w	$12(a0),d0
0001A2A0 6600                       		bne.s	loc_1A15C
0001A2A2 5428 0034                  		addq.b	#2,$34(a0)
0001A2A6 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A2AC 117C 0001 0021             		move.b	#1,$21(a0)
0001A2B2                            
0001A2B2                            loc_1A15C:
0001A2B2 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001A2B6 4EB9 0000 A7EE             		jsr	AnimateSprite
0001A2BC                            
0001A2BC                            loc_1A166:
0001A2BC 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A2C2 6C00                       		bge.s	loc_1A172
0001A2C4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A2C8                            
0001A2C8                            loc_1A172:
0001A2C8 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A2CE 6C00                       		bge.s	locret_1A190
0001A2D0 323C 001B                  		move.w	#$1B,d1
0001A2D4 343C 0070                  		move.w	#$70,d2
0001A2D8 363C 0071                  		move.w	#$71,d3
0001A2DC 3828 0008                  		move.w	8(a0),d4
0001A2E0 4EF9 0000 FB4C             		jmp	SolidObject
0001A2E6                            ; ===========================================================================
0001A2E6                            
0001A2E6                            locret_1A190:
0001A2E6 4E75                       		rts	
0001A2E8                            ; ===========================================================================
0001A2E8                            
0001A2E8                            loc_1A192:				; XREF: off_19E80
0001A2E8 217C 0001 7E6C 0004        		move.l	#Map_Eggman,4(a0)
0001A2F0 317C 0400 0002             		move.w	#$400,2(a0)
0001A2F6 117C 0000 001C             		move.b	#0,$1C(a0)
0001A2FC 08E8 0000 0022             		bset	#0,$22(a0)
0001A302 4EB9 0000 D756             		jsr	SpeedToPos
0001A308 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A30E 6400                       		bcc.s	loc_1A1D0
0001A310 317C 0180 0010             		move.w	#$180,$10(a0)
0001A316 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A31C 117C 000F 0020             		move.b	#$F,$20(a0)
0001A322 5428 0034                  		addq.b	#2,$34(a0)
0001A326                            
0001A326                            loc_1A1D0:
0001A326 6000 FF8A                  		bra.w	loc_1A15C
0001A32A                            ; ===========================================================================
0001A32A                            
0001A32A                            loc_1A1D4:				; XREF: off_19E80
0001A32A 08E8 0000 0022             		bset	#0,$22(a0)
0001A330 4EB9 0000 D756             		jsr	SpeedToPos
0001A336 4A68 0030                  		tst.w	$30(a0)
0001A33A 6600                       		bne.s	loc_1A1FC
0001A33C 4A28 0020                  		tst.b	$20(a0)
0001A340 6600                       		bne.s	loc_1A216
0001A342 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A348 303C 00AC                  		move.w	#$AC,d0
0001A34C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A352                            
0001A352                            loc_1A1FC:
0001A352 5368 0030                  		subq.w	#1,$30(a0)
0001A356 6600                       		bne.s	loc_1A216
0001A358 4A28 0022                  		tst.b	$22(a0)
0001A35C 6A00                       		bpl.s	loc_1A210
0001A35E 317C 0060 0012             		move.w	#$60,$12(a0)
0001A364 6000                       		bra.s	loc_1A216
0001A366                            ; ===========================================================================
0001A366                            
0001A366                            loc_1A210:
0001A366 117C 000F 0020             		move.b	#$F,$20(a0)
0001A36C                            
0001A36C                            loc_1A216:
0001A36C 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A372 6D00                       		blt.s	loc_1A23A
0001A374 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A37A 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A380 4278 D014                  		clr.w	($FFFFD014).w
0001A384 4A68 0012                  		tst.w	$12(a0)
0001A388 6A00                       		bpl.s	loc_1A248
0001A38A 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A390                            
0001A390                            loc_1A23A:
0001A390 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A396 6D00                       		blt.s	loc_1A248
0001A398 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A39E                            
0001A39E                            loc_1A248:
0001A39E 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A3A4 6500                       		bcs.s	loc_1A260
0001A3A6 4A28 0001                  		tst.b	1(a0)
0001A3AA 6B00                       		bmi.s	loc_1A260
0001A3AC 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A3B2 6000 FAF4                  		bra.w	Obj85_Delete
0001A3B6                            ; ===========================================================================
0001A3B6                            
0001A3B6                            loc_1A260:
0001A3B6 6000 FEFA                  		bra.w	loc_1A15C
0001A3BA                            ; ===========================================================================
0001A3BA                            
0001A3BA                            loc_1A264:				; XREF: Obj85_Index
0001A3BA 2268 0034                  		movea.l	$34(a0),a1
0001A3BE 1011                       		move.b	(a1),d0
0001A3C0 B010                       		cmp.b	(a0),d0
0001A3C2 6600 FAE4                  		bne.w	Obj85_Delete
0001A3C6 117C 0007 001C             		move.b	#7,$1C(a0)
0001A3CC 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A3D2 6C00                       		bge.s	loc_1A280
0001A3D4 6000                       		bra.s	loc_1A2A6
0001A3D6                            ; ===========================================================================
0001A3D6                            
0001A3D6                            loc_1A280:
0001A3D6 4A69 0010                  		tst.w	$10(a1)
0001A3DA 6700                       		beq.s	loc_1A28C
0001A3DC 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A3E2                            
0001A3E2                            loc_1A28C:
0001A3E2 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001A3E6 4EB9 0000 A7EE             		jsr	AnimateSprite
0001A3EC                            
0001A3EC                            loc_1A296:
0001A3EC 2268 0034                  		movea.l	$34(a0),a1
0001A3F0 3169 0008 0008             		move.w	8(a1),8(a0)
0001A3F6 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A3FC                            
0001A3FC                            loc_1A2A6:
0001A3FC 2268 0034                  		movea.l	$34(a0),a1
0001A400 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A406 7003                       		moveq	#3,d0
0001A408 C028 0022                  		and.b	$22(a0),d0
0001A40C 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A412 8128 0001                  		or.b	d0,1(a0)
0001A416 4EF9 0000 D77C             		jmp	DisplaySprite
0001A41C                            ; ===========================================================================
0001A41C                            
0001A41C                            loc_1A2C6:				; XREF: Obj85_Index
0001A41C 2268 0034                  		movea.l	$34(a0),a1
0001A420 1011                       		move.b	(a1),d0
0001A422 B010                       		cmp.b	(a0),d0
0001A424 6600 FA82                  		bne.w	Obj85_Delete
0001A428 0CA9 0001 7E6C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A430 6700                       		beq.s	loc_1A2E4
0001A432 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A438 60C2                       		bra.s	loc_1A2A6
0001A43A                            ; ===========================================================================
0001A43A                            
0001A43A                            loc_1A2E4:
0001A43A 117C 0001 001C             		move.b	#1,$1C(a0)
0001A440 4A29 0021                  		tst.b	$21(a1)
0001A444 6F00                       		ble.s	loc_1A312
0001A446 117C 0006 001C             		move.b	#6,$1C(a0)
0001A44C 217C 0001 7E6C 0004        		move.l	#Map_Eggman,4(a0)
0001A454 317C 0400 0002             		move.w	#$400,2(a0)
0001A45A 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001A45E 4EB9 0000 A7EE             		jsr	AnimateSprite
0001A464 6000 FF86                  		bra.w	loc_1A296
0001A468                            ; ===========================================================================
0001A468                            
0001A468                            loc_1A312:
0001A468 4A28 0001                  		tst.b	1(a0)
0001A46C 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A470 6100 D558                  		bsr.w	BossDefeated
0001A474 117C 0002 0018             		move.b	#2,$18(a0)
0001A47A 117C 0000 001C             		move.b	#0,$1C(a0)
0001A480 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A488 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A48E 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A492 4EB9 0000 A7EE             		jsr	AnimateSprite
0001A498 6000 FF52                  		bra.w	loc_1A296
0001A49C                            ; ===========================================================================
0001A49C                            
0001A49C                            loc_1A346:				; XREF: Obj85_Index
0001A49C 08E8 0000 0022             		bset	#0,$22(a0)
0001A4A2 2268 0034                  		movea.l	$34(a0),a1
0001A4A6 0CA9 0001 7E6C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A4AE 6700                       		beq.s	loc_1A35E
0001A4B0 6000 FF4A                  		bra.w	loc_1A2A6
0001A4B4                            ; ===========================================================================
0001A4B4                            
0001A4B4                            loc_1A35E:
0001A4B4 3169 0008 0008             		move.w	8(a1),8(a0)
0001A4BA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A4C0 4A28 001E                  		tst.b	$1E(a0)
0001A4C4 6600                       		bne.s	loc_1A376
0001A4C6 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A4CC                            
0001A4CC                            loc_1A376:
0001A4CC 5328 001E                  		subq.b	#1,$1E(a0)
0001A4D0 6E00                       		bgt.s	loc_1A38A
0001A4D2 5228 001A                  		addq.b	#1,$1A(a0)
0001A4D6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A4DC 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A4E0                            
0001A4E0                            loc_1A38A:
0001A4E0 6000 FF0A                  		bra.w	loc_1A296
0001A4E4                            ; ===========================================================================
0001A4E4                            
0001A4E4                            loc_1A38E:				; XREF: Obj85_Index
0001A4E4 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A4EA 3038 D008                  		move.w	($FFFFD008).w,d0
0001A4EE 9068 0008                  		sub.w	8(a0),d0
0001A4F2 6500                       		bcs.s	loc_1A3A6
0001A4F4 4A28 0001                  		tst.b	1(a0)
0001A4F8 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A4FC                            
0001A4FC                            loc_1A3A6:
0001A4FC 4EF9 0000 D77C             		jmp	DisplaySprite
0001A502                            ; ===========================================================================
0001A502                            
0001A502                            loc_1A3AC:				; XREF: Obj85_Index
0001A502 117C 0000 001A             		move.b	#0,$1A(a0)
0001A508 08E8 0000 0022             		bset	#0,$22(a0)
0001A50E 2268 0034                  		movea.l	$34(a0),a1
0001A512 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A518 6600                       		bne.s	loc_1A3D0
0001A51A 0CA9 0001 7E6C 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A522 6700 F984                  		beq.w	Obj85_Delete
0001A526                            
0001A526                            loc_1A3D0:
0001A526 6000 FED4                  		bra.w	loc_1A2A6
0001A52A                            ; ===========================================================================
0001A52A                            Ani_obj85:
0001A52A                            	include "_anim\obj85.asm"
0001A52A                            ; ---------------------------------------------------------------------------
0001A52A                            ; Animation script - Eggman (FZ)
0001A52A                            ; ---------------------------------------------------------------------------
0001A52A 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A52C 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A530                            		even
0001A530                            		even
0001A530                            
0001A530                            Map_Eggman2:
0001A530                            	include "_maps\Eggman2.asm"
0001A530                            ; ---------------------------------------------------------------------------
0001A530                            ; Sprite mappings - Eggman (FZ)
0001A530                            ; ---------------------------------------------------------------------------
0001A530 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A532 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A534 06                         byte_1A3DE:	dc.b 6
0001A535 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A53A EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A53F EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A544 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A549 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A54E 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A553 06                         byte_1A3FD:	dc.b 6
0001A554 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A559 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A55E EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A563 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A568 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A56D 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A572                            		even
0001A572                            		even
0001A572                            
0001A572                            Map_FZBoss:
0001A572                            	include "_maps\FZ boss.asm"
0001A572                            ; ---------------------------------------------------------------------------
0001A572                            ; Sprite mappings - boss (FZ)
0001A572                            ; ---------------------------------------------------------------------------
0001A572 0000                       		dc.w byte_1A422-Map_FZBoss
0001A574 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A576 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A578 02                         byte_1A422:	dc.b 2
0001A579 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A57E 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A583 03                         byte_1A42D:	dc.b 3
0001A584 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A589 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A58E 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A593 02                         byte_1A43D:	dc.b 2
0001A594 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A599 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A59E                            		even
0001A59E                            		even
0001A59E                            
0001A59E                            ; ===========================================================================
0001A59E                            
0001A59E                            Obj84_Delete:
0001A59E 4EF9 0000 D7B8             		jmp	DeleteObject
0001A5A4                            ; ===========================================================================
0001A5A4                            ; ---------------------------------------------------------------------------
0001A5A4                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001A5A4                            ; ---------------------------------------------------------------------------
0001A5A4                            
0001A5A4                            Obj84:					; XREF: Obj_Index
0001A5A4 7000                       		moveq	#0,d0
0001A5A6 1028 0024                  		move.b	$24(a0),d0
0001A5AA 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001A5AE 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001A5B2                            ; ===========================================================================
0001A5B2 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001A5B4 0000                       		dc.w loc_1A4CE-Obj84_Index
0001A5B6 0000                       		dc.w loc_1A57E-Obj84_Index
0001A5B8                            
0001A5B8 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001A5BC 2550 0620                  		dc.w $2550, $620
0001A5C0 2490 04C0                  		dc.w $2490, $4C0
0001A5C4 2510 04C0                  		dc.w $2510, $4C0
0001A5C8                            ; ===========================================================================
0001A5C8                            
0001A5C8                            Obj84_Main:				; XREF: Obj84_Index
0001A5C8 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001A5CC 7000                       		moveq	#0,d0
0001A5CE 1028 0028                  		move.b	$28(a0),d0
0001A5D2 D040                       		add.w	d0,d0
0001A5D4 D2C0                       		adda.w	d0,a1
0001A5D6 117C 0004 0001             		move.b	#4,1(a0)
0001A5DC 08E8 0007 0001             		bset	#7,1(a0)
0001A5E2 08E8 0004 0001             		bset	#4,1(a0)
0001A5E8 317C 0300 0002             		move.w	#$300,2(a0)
0001A5EE 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001A5F6 3159 0008                  		move.w	(a1)+,8(a0)
0001A5FA 3151 000C                  		move.w	(a1),$C(a0)
0001A5FE 3159 0038                  		move.w	(a1)+,$38(a0)
0001A602 117C 0020 0016             		move.b	#$20,$16(a0)
0001A608 117C 0060 0017             		move.b	#$60,$17(a0)
0001A60E 117C 0020 0019             		move.b	#$20,$19(a0)
0001A614 117C 0060 0016             		move.b	#$60,$16(a0)
0001A61A 117C 0003 0018             		move.b	#3,$18(a0)
0001A620 5428 0024                  		addq.b	#2,$24(a0)
0001A624                            
0001A624                            loc_1A4CE:				; XREF: Obj84_Index
0001A624 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A62A 6F00                       		ble.s	loc_1A4DC
0001A62C 08E8 0001 0001             		bset	#1,1(a0)
0001A632                            
0001A632                            loc_1A4DC:
0001A632 42A8 003C                  		clr.l	$3C(a0)
0001A636 4A28 0029                  		tst.b	$29(a0)
0001A63A 6700                       		beq.s	loc_1A4EA
0001A63C 5428 0024                  		addq.b	#2,$24(a0)
0001A640                            
0001A640                            loc_1A4EA:
0001A640 2028 003C                  		move.l	$3C(a0),d0
0001A644 2228 0038                  		move.l	$38(a0),d1
0001A648 D280                       		add.l	d0,d1
0001A64A 4841                       		swap	d1
0001A64C 3141 000C                  		move.w	d1,$C(a0)
0001A650 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001A656 6600                       		bne.s	loc_1A524
0001A658 4A68 0030                  		tst.w	$30(a0)
0001A65C 6A00                       		bpl.s	loc_1A524
0001A65E 70F6                       		moveq	#-$A,d0
0001A660 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A666 6F00                       		ble.s	loc_1A514
0001A668 700E                       		moveq	#$E,d0
0001A66A                            
0001A66A                            loc_1A514:
0001A66A D240                       		add.w	d0,d1
0001A66C 2268 0034                  		movea.l	$34(a0),a1
0001A670 3341 000C                  		move.w	d1,$C(a1)
0001A674 3368 0008 0008             		move.w	8(a0),8(a1)
0001A67A                            
0001A67A                            loc_1A524:
0001A67A 323C 002B                  		move.w	#$2B,d1
0001A67E 343C 0060                  		move.w	#$60,d2
0001A682 363C 0061                  		move.w	#$61,d3
0001A686 3828 0008                  		move.w	8(a0),d4
0001A68A 4EB9 0000 FB4C             		jsr	SolidObject
0001A690 7000                       		moveq	#0,d0
0001A692 3228 003C                  		move.w	$3C(a0),d1
0001A696 6A00                       		bpl.s	loc_1A550
0001A698 4441                       		neg.w	d1
0001A69A 5141                       		subq.w	#8,d1
0001A69C 6500                       		bcs.s	loc_1A55C
0001A69E 5200                       		addq.b	#1,d0
0001A6A0 E841                       		asr.w	#4,d1
0001A6A2 D041                       		add.w	d1,d0
0001A6A4 6000                       		bra.s	loc_1A55C
0001A6A6                            ; ===========================================================================
0001A6A6                            
0001A6A6                            loc_1A550:
0001A6A6 0441 0027                  		subi.w	#$27,d1
0001A6AA 6500                       		bcs.s	loc_1A55C
0001A6AC 5200                       		addq.b	#1,d0
0001A6AE E841                       		asr.w	#4,d1
0001A6B0 D041                       		add.w	d1,d0
0001A6B2                            
0001A6B2                            loc_1A55C:
0001A6B2 1140 001A                  		move.b	d0,$1A(a0)
0001A6B6 3038 D008                  		move.w	($FFFFD008).w,d0
0001A6BA 9068 0008                  		sub.w	8(a0),d0
0001A6BE 6B00                       		bmi.s	loc_1A578
0001A6C0 0440 0140                  		subi.w	#$140,d0
0001A6C4 6B00                       		bmi.s	loc_1A578
0001A6C6 4A28 0001                  		tst.b	1(a0)
0001A6CA 6A00 FED2                  		bpl.w	Obj84_Delete
0001A6CE                            
0001A6CE                            loc_1A578:
0001A6CE 4EF9 0000 D77C             		jmp	DisplaySprite
0001A6D4                            ; ===========================================================================
0001A6D4                            
0001A6D4                            loc_1A57E:				; XREF: Obj84_Index
0001A6D4 7000                       		moveq	#0,d0
0001A6D6 1028 0028                  		move.b	$28(a0),d0
0001A6DA 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001A6DE 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001A6E2 6000 FF5C                  		bra.w	loc_1A4EA
0001A6E6                            ; ===========================================================================
0001A6E6 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001A6E8 0000                       		dc.w loc_1A598-off_1A590
0001A6EA 0000                       		dc.w loc_1A604-off_1A590
0001A6EC 0000                       		dc.w loc_1A604-off_1A590
0001A6EE                            ; ===========================================================================
0001A6EE                            
0001A6EE                            loc_1A598:				; XREF: off_1A590
0001A6EE 4A28 0029                  		tst.b	$29(a0)
0001A6F2 6600                       		bne.s	loc_1A5D4
0001A6F4 2268 0034                  		movea.l	$34(a0),a1
0001A6F8 4A29 0021                  		tst.b	$21(a1)
0001A6FC 6600                       		bne.s	loc_1A5B4
0001A6FE 6100 D2CA                  		bsr.w	BossDefeated
0001A702 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001A70A                            
0001A70A                            loc_1A5B4:
0001A70A 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001A712 6400                       		bcc.s	locret_1A602
0001A714 42A8 003C                  		clr.l	$3C(a0)
0001A718 2268 0034                  		movea.l	$34(a0),a1
0001A71C 5369 0032                  		subq.w	#1,$32(a1)
0001A720 4269 0030                  		clr.w	$30(a1)
0001A724 5528 0024                  		subq.b	#2,$24(a0)
0001A728 4E75                       		rts	
0001A72A                            ; ===========================================================================
0001A72A                            
0001A72A                            loc_1A5D4:
0001A72A 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001A730 6C00                       		bge.s	loc_1A5E4
0001A732 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001A73A                            
0001A73A                            loc_1A5E4:
0001A73A 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001A742 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001A748 6E00                       		bgt.s	locret_1A602
0001A74A 4268 003E                  		clr.w	$3E(a0)
0001A74E 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001A754 4228 0029                  		clr.b	$29(a0)
0001A758                            
0001A758                            locret_1A602:
0001A758 4E75                       		rts	
0001A75A                            ; ===========================================================================
0001A75A                            
0001A75A                            loc_1A604:				; XREF: off_1A590
0001A75A 08E8 0001 0001             		bset	#1,1(a0)
0001A760 4A28 0029                  		tst.b	$29(a0)
0001A764 6600                       		bne.s	loc_1A646
0001A766 2268 0034                  		movea.l	$34(a0),a1
0001A76A 4A29 0021                  		tst.b	$21(a1)
0001A76E 6600                       		bne.s	loc_1A626
0001A770 6100 D258                  		bsr.w	BossDefeated
0001A774 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001A77C                            
0001A77C                            loc_1A626:
0001A77C 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001A784 6400                       		bcc.s	locret_1A674
0001A786 42A8 003C                  		clr.l	$3C(a0)
0001A78A 2268 0034                  		movea.l	$34(a0),a1
0001A78E 5369 0032                  		subq.w	#1,$32(a1)
0001A792 4269 0030                  		clr.w	$30(a1)
0001A796 5528 0024                  		subq.b	#2,$24(a0)
0001A79A 4E75                       		rts	
0001A79C                            ; ===========================================================================
0001A79C                            
0001A79C                            loc_1A646:
0001A79C 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001A7A2 6D00                       		blt.s	loc_1A656
0001A7A4 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001A7AC                            
0001A7AC                            loc_1A656:
0001A7AC 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001A7B4 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001A7BA 6D00                       		blt.s	locret_1A674
0001A7BC 4268 003E                  		clr.w	$3E(a0)
0001A7C0 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001A7C6 4228 0029                  		clr.b	$29(a0)
0001A7CA                            
0001A7CA                            locret_1A674:
0001A7CA 4E75                       		rts	
0001A7CC                            ; ===========================================================================
0001A7CC                            ; ---------------------------------------------------------------------------
0001A7CC                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A7CC                            ; ---------------------------------------------------------------------------
0001A7CC                            Map_obj84:
0001A7CC                            	include "_maps\obj84.asm"
0001A7CC                            ; ---------------------------------------------------------------------------
0001A7CC                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A7CC                            ; ---------------------------------------------------------------------------
0001A7CC 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001A7D0 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001A7D4 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001A7D8 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A7DC 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A7E0 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001A7E4 06                         byte_1A68E:	dc.b 6
0001A7E5 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A7EA A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A7EF B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A7F4 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A7F9 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A7FE B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A803 08                         byte_1A6AD:	dc.b 8
0001A804 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A809 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A80E B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A813 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A818 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A81D B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A822 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A827 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A82C 0A                         byte_1A6D6:	dc.b $A
0001A82D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A832 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A837 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A83C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A841 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A846 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A84B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A850 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A855 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A85A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A85F 0C                         byte_1A709:	dc.b $C
0001A860 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A865 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A86A B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A86F B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A874 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A879 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A87E D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A883 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A888 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A88D F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A892 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A897 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A89C 0D                         byte_1A746:	dc.b $D
0001A89D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A8A2 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A8A7 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A8AC B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A8B1 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A8B6 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A8BB D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A8C0 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A8C5 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A8CA F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A8CF 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A8D4 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A8D9 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A8DE 0E                         byte_1A788:	dc.b $E
0001A8DF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A8E4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A8E9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A8EE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A8F3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A8F8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A8FD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A902 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A907 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A90C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A911 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A916 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A91B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A920 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001A925 02                         byte_1A7CF:	dc.b 2
0001A926 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001A92B 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001A930                            		even
0001A930                            		even
0001A930                            
0001A930                            ; ===========================================================================
0001A930                            ; ---------------------------------------------------------------------------
0001A930                            ; Object 86 - energy balls (FZ)
0001A930                            ; ---------------------------------------------------------------------------
0001A930                            
0001A930                            Obj86:					; XREF: Obj_Index
0001A930 7000                       		moveq	#0,d0
0001A932 1028 0024                  		move.b	$24(a0),d0
0001A936 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001A93A 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001A93E                            ; ===========================================================================
0001A93E 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001A940 0000                       		dc.w Obj86_Generator-Obj86_Index
0001A942 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001A944 0000                       		dc.w loc_1A962-Obj86_Index
0001A946 0000                       		dc.w loc_1A982-Obj86_Index
0001A948                            ; ===========================================================================
0001A948                            
0001A948                            Obj86_Main:				; XREF: Obj86_Index
0001A948 317C 2588 0008             		move.w	#$2588,8(a0)
0001A94E 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A954 317C 0300 0002             		move.w	#$300,2(a0)
0001A95A 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001A962 117C 0000 001C             		move.b	#0,$1C(a0)
0001A968 117C 0003 0018             		move.b	#3,$18(a0)
0001A96E 117C 0008 0017             		move.b	#8,$17(a0)
0001A974 117C 0008 0016             		move.b	#8,$16(a0)
0001A97A 117C 0004 0001             		move.b	#4,1(a0)
0001A980 08E8 0007 0001             		bset	#7,1(a0)
0001A986 5428 0024                  		addq.b	#2,$24(a0)
0001A98A                            
0001A98A                            Obj86_Generator:			; XREF: Obj86_Index
0001A98A 2268 0034                  		movea.l	$34(a0),a1
0001A98E 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001A994 6600                       		bne.s	loc_1A850
0001A996 10BC 003F                  		move.b	#$3F,(a0)
0001A99A 117C 0000 0024             		move.b	#0,$24(a0)
0001A9A0 4EF9 0000 D77C             		jmp	DisplaySprite
0001A9A6                            ; ===========================================================================
0001A9A6                            
0001A9A6                            loc_1A850:
0001A9A6 117C 0000 001C             		move.b	#0,$1C(a0)
0001A9AC 4A28 0029                  		tst.b	$29(a0)
0001A9B0 6700                       		beq.s	loc_1A86C
0001A9B2 5428 0024                  		addq.b	#2,$24(a0)
0001A9B6 117C 0001 001C             		move.b	#1,$1C(a0)
0001A9BC 117C 003E 0028             		move.b	#$3E,$28(a0)
0001A9C2                            
0001A9C2                            loc_1A86C:
0001A9C2 323C 0013                  		move.w	#$13,d1
0001A9C6 343C 0008                  		move.w	#8,d2
0001A9CA 363C 0011                  		move.w	#$11,d3
0001A9CE 3828 0008                  		move.w	8(a0),d4
0001A9D2 4EB9 0000 FB4C             		jsr	SolidObject
0001A9D8 3038 D008                  		move.w	($FFFFD008).w,d0
0001A9DC 9068 0008                  		sub.w	8(a0),d0
0001A9E0 6B00                       		bmi.s	loc_1A89A
0001A9E2 0440 0140                  		subi.w	#$140,d0
0001A9E6 6B00                       		bmi.s	loc_1A89A
0001A9E8 4A28 0001                  		tst.b	1(a0)
0001A9EC 6A00 FBB0                  		bpl.w	Obj84_Delete
0001A9F0                            
0001A9F0                            loc_1A89A:
0001A9F0 43FA 0000                  		lea	Ani_obj86(pc),a1
0001A9F4 4EB9 0000 A7EE             		jsr	AnimateSprite
0001A9FA 4EF9 0000 D77C             		jmp	DisplaySprite
0001AA00                            ; ===========================================================================
0001AA00                            
0001AA00                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001AA00 4A28 0029                  		tst.b	$29(a0)
0001AA04 6700 0000                  		beq.w	loc_1A954
0001AA08 4228 0029                  		clr.b	$29(a0)
0001AA0C D068 0030                  		add.w	$30(a0),d0
0001AA10 0240 001E                  		andi.w	#$1E,d0
0001AA14 D4C0                       		adda.w	d0,a2
0001AA16 5868 0030                  		addq.w	#4,$30(a0)
0001AA1A 4268 0032                  		clr.w	$32(a0)
0001AA1E 7403                       		moveq	#3,d2
0001AA20                            
0001AA20                            Obj86_Loop:
0001AA20 4EB9 0000 DC18             		jsr	SingleObjLoad2
0001AA26 6600 0000                  		bne.w	loc_1A954
0001AA2A 12BC 0086                  		move.b	#$86,(a1)
0001AA2E 3368 0008 0008             		move.w	8(a0),8(a1)
0001AA34 337C 053C 000C             		move.w	#$53C,$C(a1)
0001AA3A 137C 0008 0024             		move.b	#8,$24(a1)
0001AA40 337C 2300 0002             		move.w	#$2300,2(a1)
0001AA46 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001AA4E 137C 000C 0016             		move.b	#$C,$16(a1)
0001AA54 137C 000C 0017             		move.b	#$C,$17(a1)
0001AA5A 137C 0000 0020             		move.b	#0,$20(a1)
0001AA60 137C 0003 0018             		move.b	#3,$18(a1)
0001AA66 337C 003E 0028             		move.w	#$3E,$28(a1)
0001AA6C 137C 0004 0001             		move.b	#4,1(a1)
0001AA72 08E9 0007 0001             		bset	#7,1(a1)
0001AA78 2348 0034                  		move.l	a0,$34(a1)
0001AA7C 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001AA82 3228 0032                  		move.w	$32(a0),d1
0001AA86 C3FC FFB1                  		muls.w	#-$4F,d1
0001AA8A 0641 2578                  		addi.w	#$2578,d1
0001AA8E 0240 001F                  		andi.w	#$1F,d0
0001AA92 0440 0010                  		subi.w	#$10,d0
0001AA96 D041                       		add.w	d1,d0
0001AA98 3340 0030                  		move.w	d0,$30(a1)
0001AA9C 5268 0032                  		addq.w	#1,$32(a0)
0001AAA0 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001AAA6 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001AAAA                            
0001AAAA                            loc_1A954:
0001AAAA 4A68 0032                  		tst.w	$32(a0)
0001AAAE 6600                       		bne.s	loc_1A95E
0001AAB0 5428 0024                  		addq.b	#2,$24(a0)
0001AAB4                            
0001AAB4                            loc_1A95E:
0001AAB4 6000 FF0C                  		bra.w	loc_1A86C
0001AAB8                            ; ===========================================================================
0001AAB8                            
0001AAB8                            loc_1A962:				; XREF: Obj86_Index
0001AAB8 117C 0002 001C             		move.b	#2,$1C(a0)
0001AABE 4A68 0038                  		tst.w	$38(a0)
0001AAC2 6600                       		bne.s	loc_1A97E
0001AAC4 117C 0002 0024             		move.b	#2,$24(a0)
0001AACA 2268 0034                  		movea.l	$34(a0),a1
0001AACE 337C FFFF 0032             		move.w	#-1,$32(a1)
0001AAD4                            
0001AAD4                            loc_1A97E:
0001AAD4 6000 FEEC                  		bra.w	loc_1A86C
0001AAD8                            ; ===========================================================================
0001AAD8                            
0001AAD8                            loc_1A982:				; XREF: Obj86_Index
0001AAD8 7000                       		moveq	#0,d0
0001AADA 1028 0025                  		move.b	$25(a0),d0
0001AADE 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001AAE2 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001AAE6 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001AAEA 4EB9 0000 A7EE             		jsr	AnimateSprite
0001AAF0 4EF9 0000 D77C             		jmp	DisplaySprite
0001AAF6                            ; ===========================================================================
0001AAF6 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001AAF8 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001AAFA 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001AAFC                            ; ===========================================================================
0001AAFC                            
0001AAFC                            loc_1A9A6:				; XREF: Obj86_Index2
0001AAFC 3028 0030                  		move.w	$30(a0),d0
0001AB00 9068 0008                  		sub.w	8(a0),d0
0001AB04 E940                       		asl.w	#4,d0
0001AB06 3140 0010                  		move.w	d0,$10(a0)
0001AB0A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AB10 5428 0025                  		addq.b	#2,$25(a0)
0001AB14 4E75                       		rts	
0001AB16                            ; ===========================================================================
0001AB16                            
0001AB16                            loc_1A9C0:				; XREF: Obj86_Index2
0001AB16 4A68 0010                  		tst.w	$10(a0)
0001AB1A 6700                       		beq.s	loc_1A9E6
0001AB1C 4EB9 0000 D756             		jsr	SpeedToPos
0001AB22 3028 0008                  		move.w	8(a0),d0
0001AB26 9068 0030                  		sub.w	$30(a0),d0
0001AB2A 6400                       		bcc.s	loc_1A9E6
0001AB2C 4268 0010                  		clr.w	$10(a0)
0001AB30 D168 0008                  		add.w	d0,8(a0)
0001AB34 2268 0034                  		movea.l	$34(a0),a1
0001AB38 5369 0032                  		subq.w	#1,$32(a1)
0001AB3C                            
0001AB3C                            loc_1A9E6:
0001AB3C 117C 0000 001C             		move.b	#0,$1C(a0)
0001AB42 5368 0028                  		subq.w	#1,$28(a0)
0001AB46 6600                       		bne.s	locret_1AA1C
0001AB48 5428 0025                  		addq.b	#2,$25(a0)
0001AB4C 117C 0001 001C             		move.b	#1,$1C(a0)
0001AB52 117C 009A 0020             		move.b	#$9A,$20(a0)
0001AB58 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001AB5E 7000                       		moveq	#0,d0
0001AB60 3038 D008                  		move.w	($FFFFD008).w,d0
0001AB64 9068 0008                  		sub.w	8(a0),d0
0001AB68 3140 0010                  		move.w	d0,$10(a0)
0001AB6C 317C 0140 0012             		move.w	#$140,$12(a0)
0001AB72                            
0001AB72                            locret_1AA1C:
0001AB72 4E75                       		rts	
0001AB74                            ; ===========================================================================
0001AB74                            
0001AB74                            loc_1AA1E:				; XREF: Obj86_Index2
0001AB74 4EB9 0000 D756             		jsr	SpeedToPos
0001AB7A 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001AB80 6400                       		bcc.s	loc_1AA34
0001AB82 5368 0028                  		subq.w	#1,$28(a0)
0001AB86 6700                       		beq.s	loc_1AA34
0001AB88 4E75                       		rts	
0001AB8A                            ; ===========================================================================
0001AB8A                            
0001AB8A                            loc_1AA34:
0001AB8A 2268 0034                  		movea.l	$34(a0),a1
0001AB8E 5369 0038                  		subq.w	#1,$38(a1)
0001AB92 6000 FA0A                  		bra.w	Obj84_Delete
0001AB96                            ; ===========================================================================
0001AB96                            Ani_obj86:
0001AB96                            	include "_anim\obj86.asm"
0001AB96                            ; ---------------------------------------------------------------------------
0001AB96                            ; Animation script - energy ball launcher (FZ)
0001AB96                            ; ---------------------------------------------------------------------------
0001AB96 0000                       		dc.w byte_1AA46-Ani_obj86
0001AB98 0000                       		dc.w byte_1AA4A-Ani_obj86
0001AB9A 0000                       		dc.w byte_1AA50-Ani_obj86
0001AB9C 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001ABA0 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001ABA6 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001ABAC                            		even
0001ABAC                            		even
0001ABAC                            
0001ABAC                            ; ---------------------------------------------------------------------------
0001ABAC                            ; Sprite mappings - energy ball	launcher (FZ)
0001ABAC                            ; ---------------------------------------------------------------------------
0001ABAC                            Map_obj86:
0001ABAC                            	include "_maps\obj86.asm"
0001ABAC                            ; ---------------------------------------------------------------------------
0001ABAC                            ; Sprite mappings - energy ball	launcher (FZ)
0001ABAC                            ; ---------------------------------------------------------------------------
0001ABAC 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001ABB0 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001ABB4 01                         byte_1AA5E:	dc.b 1
0001ABB5 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001ABBA 01                         byte_1AA64:	dc.b 1
0001ABBB F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001ABC0 01                         byte_1AA6A:	dc.b 1
0001ABC1 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001ABC6 01                         byte_1AA70:	dc.b 1
0001ABC7 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001ABCC                            		even
0001ABCC                            		even
0001ABCC                            
0001ABCC                            Ani_obj86a:
0001ABCC                            	include "_anim\obj86a.asm"
0001ABCC                            ; ---------------------------------------------------------------------------
0001ABCC                            ; Animation script - energy balls (FZ)
0001ABCC                            ; ---------------------------------------------------------------------------
0001ABCC 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001ABCE 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001ABD0 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001ABDF 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001ABEE 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001ABF2 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001ABFC                            		even
0001ABFC                            		even
0001ABFC                            
0001ABFC                            ; ---------------------------------------------------------------------------
0001ABFC                            ; Sprite mappings - energy balls (FZ)
0001ABFC                            ; ---------------------------------------------------------------------------
0001ABFC                            Map_obj86a:
0001ABFC                            	include "_maps\obj86a.asm"
0001ABFC                            ; ---------------------------------------------------------------------------
0001ABFC                            ; Sprite mappings - energy balls (FZ)
0001ABFC                            ; ---------------------------------------------------------------------------
0001ABFC 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001AC00 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001AC04 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001AC08 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001AC0C 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001AC10 0000                       		dc.w byte_1AB20-Map_obj86a
0001AC12 02                         byte_1AABC:	dc.b 2
0001AC13 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001AC18 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001AC1D 02                         byte_1AAC7:	dc.b 2
0001AC1E F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001AC23 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001AC28 02                         byte_1AAD2:	dc.b 2
0001AC29 F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001AC2E 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001AC33 02                         byte_1AADD:	dc.b 2
0001AC34 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001AC39 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001AC3E 02                         byte_1AAE8:	dc.b 2
0001AC3F F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001AC44 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001AC49 02                         byte_1AAF3:	dc.b 2
0001AC4A F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001AC4F F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001AC54 01                         byte_1AAFE:	dc.b 1
0001AC55 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001AC5A 01                         byte_1AB04:	dc.b 1
0001AC5B F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001AC60 02                         byte_1AB0A:	dc.b 2
0001AC61 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001AC66 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001AC6B 02                         byte_1AB15:	dc.b 2
0001AC6C F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001AC71 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001AC76 00                         byte_1AB20:	dc.b 0
0001AC78 00                         		even
0001AC78 00                         		even
0001AC78                            
0001AC78                            ; ===========================================================================
0001AC78                            ; ---------------------------------------------------------------------------
0001AC78                            ; Object 3E - prison capsule
0001AC78                            ; ---------------------------------------------------------------------------
0001AC78                            
0001AC78                            Obj3E:					; XREF: Obj_Index
0001AC78 7000                       		moveq	#0,d0
0001AC7A 1028 0024                  		move.b	$24(a0),d0
0001AC7E 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001AC82 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001AC86 3028 0008                  		move.w	8(a0),d0
0001AC8A 0240 FF80                  		andi.w	#$FF80,d0
0001AC8E 3238 F700                  		move.w	($FFFFF700).w,d1
0001AC92 0441 0080                  		subi.w	#$80,d1
0001AC96 0241 FF80                  		andi.w	#$FF80,d1
0001AC9A 9041                       		sub.w	d1,d0
0001AC9C 0C40 0280                  		cmpi.w	#$280,d0
0001ACA0 6200                       		bhi.s	Obj3E_Delete
0001ACA2 4EF9 0000 D77C             		jmp	DisplaySprite
0001ACA8                            ; ===========================================================================
0001ACA8                            
0001ACA8                            Obj3E_Delete:
0001ACA8 4EF9 0000 D7B8             		jmp	DeleteObject
0001ACAE                            ; ===========================================================================
0001ACAE 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001ACB0 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001ACB2 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001ACB4 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001ACB6 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001ACB8 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001ACBA 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001ACBC 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001ACBE                            
0001ACBE 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001ACC2 040C 0501                  		dc.b 4,	$C, 5, 1
0001ACC6 0610 0403                  		dc.b 6,	$10, 4,	3
0001ACCA 0810 0305                  		dc.b 8,	$10, 3,	5
0001ACCE                            ; ===========================================================================
0001ACCE                            
0001ACCE                            Obj3E_Main:				; XREF: Obj3E_Index
0001ACCE 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001ACD6 317C 049D 0002             		move.w	#$49D,2(a0)
0001ACDC 117C 0004 0001             		move.b	#4,1(a0)
0001ACE2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001ACE8 7000                       		moveq	#0,d0
0001ACEA 1028 0028                  		move.b	$28(a0),d0
0001ACEE E548                       		lsl.w	#2,d0
0001ACF0 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001ACF4 1159 0024                  		move.b	(a1)+,$24(a0)
0001ACF8 1159 0019                  		move.b	(a1)+,$19(a0)
0001ACFC 1159 0018                  		move.b	(a1)+,$18(a0)
0001AD00 1159 001A                  		move.b	(a1)+,$1A(a0)
0001AD04 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001AD08 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001AD0A 117C 0006 0020             		move.b	#6,$20(a0)
0001AD10 117C 0008 0021             		move.b	#8,$21(a0)
0001AD16                            
0001AD16                            Obj3E_Not02:
0001AD16 4E75                       		rts	
0001AD18                            ; ===========================================================================
0001AD18                            
0001AD18                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001AD18 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001AD1E 6700                       		beq.s	Obj3E_ChkOpened
0001AD20 323C 002B                  		move.w	#$2B,d1
0001AD24 343C 0018                  		move.w	#$18,d2
0001AD28 363C 0018                  		move.w	#$18,d3
0001AD2C 3828 0008                  		move.w	8(a0),d4
0001AD30 4EF9 0000 FB4C             		jmp	SolidObject
0001AD36                            ; ===========================================================================
0001AD36                            
0001AD36                            Obj3E_ChkOpened:
0001AD36 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001AD3A 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001AD3C 4228 0025                  		clr.b	$25(a0)
0001AD40 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AD46 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AD4C                            
0001AD4C                            Obj3E_DoOpen:
0001AD4C 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001AD52 4E75                       		rts	
0001AD54                            ; ===========================================================================
0001AD54                            
0001AD54                            Obj3E_Switched:				; XREF: Obj3E_Index
0001AD54 323C 0017                  		move.w	#$17,d1
0001AD58 343C 0008                  		move.w	#8,d2
0001AD5C 363C 0008                  		move.w	#8,d3
0001AD60 3828 0008                  		move.w	8(a0),d4
0001AD64 4EB9 0000 FB4C             		jsr	SolidObject
0001AD6A 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001AD70 4EB9 0000 A7EE             		jsr	AnimateSprite
0001AD76 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001AD7C 4A28 0025                  		tst.b	$25(a0)
0001AD80 6700                       		beq.s	locret_1AC60
0001AD82 5068 000C                  		addq.w	#8,$C(a0)
0001AD86 117C 000A 0024             		move.b	#$A,$24(a0)
0001AD8C 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001AD92 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001AD96 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001AD9A 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001ADA0 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001ADA6 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001ADA8 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001ADAE 6000                       		bra.s	Obj3E_ContinueCode
0001ADB0                            
0001ADB0                            Obj3E_MoveLeft:
0001ADB0 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001ADB6                            
0001ADB6                            Obj3E_ContinueCode:
0001ADB6 4228 0025                  		clr.b	$25(a0)
0001ADBA 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001ADC0 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001ADC6                            
0001ADC6                            locret_1AC60:
0001ADC6 4E75                       		rts	
0001ADC8                            ; ===========================================================================
0001ADC8                            
0001ADC8                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001ADC8 7007                       		moveq	#7,d0
0001ADCA C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001ADCE 6600                       		bne.s	loc_1ACA0
0001ADD0 4EB9 0000 DC02             		jsr	SingleObjLoad
0001ADD6 6600                       		bne.s	loc_1ACA0
0001ADD8 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001ADDC 3368 0008 0008             		move.w	8(a0),8(a1)
0001ADE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ADE8 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001ADEE 7200                       		moveq	#0,d1
0001ADF0 1200                       		move.b	d0,d1
0001ADF2 E409                       		lsr.b	#2,d1
0001ADF4 0441 0020                  		subi.w	#$20,d1
0001ADF8 D369 0008                  		add.w	d1,8(a1)
0001ADFC E048                       		lsr.w	#8,d0
0001ADFE E608                       		lsr.b	#3,d0
0001AE00 D169 000C                  		add.w	d0,$C(a1)
0001AE04                            
0001AE04                            loc_1ACA0:
0001AE04 5368 001E                  		subq.w	#1,$1E(a0)
0001AE08 6700                       		beq.s	Obj3E_MakeAnimal
0001AE0A 4E75                       		rts	
0001AE0C                            ; ===========================================================================
0001AE0C                            
0001AE0C                            Obj3E_MakeAnimal:
0001AE0C 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001AE12 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001AE18 117C 0006 001A             		move.b	#6,$1A(a0)
0001AE1E 317C 0096 001E             		move.w	#$96,$1E(a0)
0001AE24 0668 0020 000C             		addi.w	#$20,$C(a0)
0001AE2A 7C07                       		moveq	#7,d6
0001AE2C 3A3C 009A                  		move.w	#$9A,d5
0001AE30 78E4                       		moveq	#-$1C,d4
0001AE32                            
0001AE32                            Obj3E_Loop:
0001AE32 4EB9 0000 DC02             		jsr	SingleObjLoad
0001AE38 6600                       		bne.s	locret_1ACF8
0001AE3A 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001AE3E 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE44 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AE4A D969 0008                  		add.w	d4,8(a1)
0001AE4E 5E44                       		addq.w	#7,d4
0001AE50 3345 0036                  		move.w	d5,$36(a1)
0001AE54 5145                       		subq.w	#8,d5
0001AE56 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001AE5A                            
0001AE5A                            locret_1ACF8:
0001AE5A 4E75                       		rts	
0001AE5C                            ; ===========================================================================
0001AE5C                            
0001AE5C                            Obj3E_Animals:				; XREF: Obj3E_Index
0001AE5C 7007                       		moveq	#7,d0
0001AE5E C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001AE62 6600                       		bne.s	loc_1AD38
0001AE64 4EB9 0000 DC02             		jsr	SingleObjLoad
0001AE6A 6600                       		bne.s	loc_1AD38
0001AE6C 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001AE70 3368 0008 0008             		move.w	8(a0),8(a1)
0001AE76 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AE7C 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001AE82 0240 001F                  		andi.w	#$1F,d0
0001AE86 5D40                       		subq.w	#6,d0
0001AE88 4A41                       		tst.w	d1
0001AE8A 6A00                       		bpl.s	loc_1AD2E
0001AE8C 4440                       		neg.w	d0
0001AE8E                            
0001AE8E                            loc_1AD2E:
0001AE8E D169 0008                  		add.w	d0,8(a1)
0001AE92 337C 000C 0036             		move.w	#$C,$36(a1)
0001AE98                            
0001AE98                            loc_1AD38:
0001AE98 5368 001E                  		subq.w	#1,$1E(a0)
0001AE9C 6600                       		bne.s	locret_1AD48
0001AE9E 5428 0024                  		addq.b	#2,$24(a0)
0001AEA2 317C 00B4 001E             		move.w	#180,$1E(a0)
0001AEA8                            
0001AEA8                            locret_1AD48:
0001AEA8 4E75                       		rts	
0001AEAA                            ; ===========================================================================
0001AEAA                            
0001AEAA                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001AEAA 703E                       		moveq	#$3E,d0
0001AEAC 7228                       		moveq	#$28,d1
0001AEAE 7440                       		moveq	#$40,d2
0001AEB0 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001AEB4                            
0001AEB4                            Obj3E_FindObj28:
0001AEB4 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001AEB6 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001AEB8 D2C2                       		adda.w	d2,a1		; next object RAM
0001AEBA 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001AEBE                            
0001AEBE 4EB9 0000 EE08             		jsr	GotThroughAct
0001AEC4 4EF9 0000 D7B8             		jmp	DeleteObject
0001AECA                            ; ===========================================================================
0001AECA                            
0001AECA                            Obj3E_Obj28Found:
0001AECA 4E75                       		rts	
0001AECC                            ; ===========================================================================
0001AECC                            Ani_obj3E:
0001AECC                            	include "_anim\obj3E.asm"
0001AECC                            ; ---------------------------------------------------------------------------
0001AECC                            ; Animation script - prison capsule
0001AECC                            ; ---------------------------------------------------------------------------
0001AECC 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AECE 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AED0 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001AED4                            		even
0001AED4                            		even
0001AED4                            
0001AED4                            ; ---------------------------------------------------------------------------
0001AED4                            ; Sprite mappings - prison capsule
0001AED4                            ; ---------------------------------------------------------------------------
0001AED4                            Map_obj3E:
0001AED4                            	include "_maps\obj3E.asm"
0001AED4                            ; ---------------------------------------------------------------------------
0001AED4                            ; Sprite mappings - prison capsule
0001AED4                            ; ---------------------------------------------------------------------------
0001AED4 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001AED8 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001AEDC 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001AEE0 0000                       		dc.w byte_1ADE2-Map_obj3E
0001AEE2 07                         byte_1AD82:	dc.b 7
0001AEE3 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001AEE8 E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001AEED E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001AEF2 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001AEF7 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001AEFC 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001AF01 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001AF06 01                         byte_1ADA6:	dc.b 1
0001AF07 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001AF0C 06                         byte_1ADAC:	dc.b 6
0001AF0D 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001AF12 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001AF17 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001AF1C 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001AF21 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001AF26 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001AF2B 01                         byte_1ADCB:	dc.b 1
0001AF2C F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001AF31 02                         byte_1ADD1:	dc.b 2
0001AF32 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001AF37 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001AF3C 01                         byte_1ADDC:	dc.b 1
0001AF3D F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001AF42 00                         byte_1ADE2:	dc.b 0
0001AF44 00                         		even
0001AF44 00                         		even
0001AF44                            
0001AF44                            ; ---------------------------------------------------------------------------
0001AF44                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001AF44                            ; ---------------------------------------------------------------------------
0001AF44                            
0001AF44                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AF44                            
0001AF44                            
0001AF44                            TouchResponse:				; XREF: Obj01
0001AF44 4E71                       		nop	
0001AF46 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001AF4A 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001AF4E 5142                       		subq.w	#8,d2
0001AF50 7A00                       		moveq	#0,d5
0001AF52 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001AF56 5705                       		subq.b	#3,d5
0001AF58 9645                       		sub.w	d5,d3
0001AF5A 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001AF60 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001AF62 0643 000C                  		addi.w	#$C,d3
0001AF66 7A0A                       		moveq	#$A,d5
0001AF68                            
0001AF68                            Touch_NoDuck:
0001AF68 383C 0010                  		move.w	#$10,d4
0001AF6C DA45                       		add.w	d5,d5
0001AF6E 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001AF72 3C3C 005F                  		move.w	#$5F,d6
0001AF76                            
0001AF76                            Touch_Loop:
0001AF76 4A29 0001                  		tst.b	1(a1)
0001AF7A 6A00                       		bpl.s	Touch_NextObj
0001AF7C 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001AF80 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001AF82                            
0001AF82                            Touch_NextObj:
0001AF82 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001AF86 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001AF8A                            
0001AF8A 7000                       		moveq	#0,d0
0001AF8C 4E75                       		rts	
0001AF8E                            ; ===========================================================================
0001AF8E 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001AF90 0C14                       		dc.b   $C, $14
0001AF92 140C                       		dc.b  $14,  $C
0001AF94 0410                       		dc.b	4, $10
0001AF96 0C12                       		dc.b   $C, $12
0001AF98 1010                       		dc.b  $10, $10
0001AF9A 0606                       		dc.b	6,   6
0001AF9C 180C                       		dc.b  $18,  $C
0001AF9E 0C10                       		dc.b   $C, $10
0001AFA0 100C                       		dc.b  $10,  $C
0001AFA2 0808                       		dc.b	8,   8
0001AFA4 1410                       		dc.b  $14, $10
0001AFA6 1408                       		dc.b  $14,   8
0001AFA8 0E0E                       		dc.b   $E,  $E
0001AFAA 1818                       		dc.b  $18, $18
0001AFAC 2810                       		dc.b  $28, $10
0001AFAE 1018                       		dc.b  $10, $18
0001AFB0 0810                       		dc.b	8, $10
0001AFB2 2070                       		dc.b  $20, $70
0001AFB4 4020                       		dc.b  $40, $20
0001AFB6 8020                       		dc.b  $80, $20
0001AFB8 2020                       		dc.b  $20, $20
0001AFBA 0808                       		dc.b	8,   8
0001AFBC 0404                       		dc.b	4,   4
0001AFBE 2008                       		dc.b  $20,   8
0001AFC0 0C0C                       		dc.b   $C,  $C
0001AFC2 0804                       		dc.b	8,   4
0001AFC4 1804                       		dc.b  $18,   4
0001AFC6 2804                       		dc.b  $28,   4
0001AFC8 0408                       		dc.b	4,   8
0001AFCA 0418                       		dc.b	4, $18
0001AFCC 0428                       		dc.b	4, $28
0001AFCE 0420                       		dc.b	4, $20
0001AFD0 1818                       		dc.b  $18, $18
0001AFD2 0C18                       		dc.b   $C, $18
0001AFD4 4808                       		dc.b  $48,   8
0001AFD6                            ; ===========================================================================
0001AFD6                            
0001AFD6                            Touch_Height:				; XREF: TouchResponse
0001AFD6 0240 003F                  		andi.w	#$3F,d0
0001AFDA D040                       		add.w	d0,d0
0001AFDC 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001AFE0 7200                       		moveq	#0,d1
0001AFE2 121A                       		move.b	(a2)+,d1
0001AFE4 3029 0008                  		move.w	8(a1),d0
0001AFE8 9041                       		sub.w	d1,d0
0001AFEA 9042                       		sub.w	d2,d0
0001AFEC 6400                       		bcc.s	loc_1AE98
0001AFEE D241                       		add.w	d1,d1
0001AFF0 D041                       		add.w	d1,d0
0001AFF2 6500                       		bcs.s	Touch_Width
0001AFF4 6000 FF8C                  		bra.w	Touch_NextObj
0001AFF8                            ; ===========================================================================
0001AFF8                            
0001AFF8                            loc_1AE98:
0001AFF8 B044                       		cmp.w	d4,d0
0001AFFA 6200 FF86                  		bhi.w	Touch_NextObj
0001AFFE                            
0001AFFE                            Touch_Width:
0001AFFE 7200                       		moveq	#0,d1
0001B000 121A                       		move.b	(a2)+,d1
0001B002 3029 000C                  		move.w	$C(a1),d0
0001B006 9041                       		sub.w	d1,d0
0001B008 9043                       		sub.w	d3,d0
0001B00A 6400                       		bcc.s	loc_1AEB6
0001B00C D241                       		add.w	d1,d1
0001B00E D240                       		add.w	d0,d1
0001B010 6500                       		bcs.s	Touch_ChkValue
0001B012 6000 FF6E                  		bra.w	Touch_NextObj
0001B016                            ; ===========================================================================
0001B016                            
0001B016                            loc_1AEB6:
0001B016 B045                       		cmp.w	d5,d0
0001B018 6200 FF68                  		bhi.w	Touch_NextObj
0001B01C                            
0001B01C                            Touch_ChkValue:
0001B01C 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001B020 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001B024 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001B028 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001B02C 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001B030 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001B032 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001B036                            
0001B036                            ; touch	response is $40-$7F
0001B036                            
0001B036 1029 0020                  		move.b	$20(a1),d0
0001B03A 0200 003F                  		andi.b	#$3F,d0
0001B03E 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001B042 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001B044 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001B04A 6400 0000                  		bcc.w	locret_1AEF2
0001B04E 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001B052                            
0001B052                            locret_1AEF2:
0001B052 4E75                       		rts	
0001B054                            ; ===========================================================================
0001B054                            
0001B054                            Touch_Monitor:
0001B054 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001B058 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001B05A 3028 000C                  		move.w	$C(a0),d0
0001B05E 0440 0010                  		subi.w	#$10,d0
0001B062 B069 000C                  		cmp.w	$C(a1),d0
0001B066 6500                       		bcs.s	locret_1AF2E
0001B068 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B06C 337C FE80 0012             		move.w	#-$180,$12(a1)
0001B072 4A29 0025                  		tst.b	$25(a1)
0001B076 6600                       		bne.s	locret_1AF2E
0001B078 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001B07C 4E75                       		rts	
0001B07E                            ; ===========================================================================
0001B07E                            
0001B07E                            loc_1AF1E:
0001B07E 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001B084 6600                       		bne.s	locret_1AF2E
0001B086 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001B08A 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001B08E                            
0001B08E                            locret_1AF2E:
0001B08E 4E75                       		rts	
0001B090                            ; ===========================================================================
0001B090                            
0001B090                            Touch_Enemy:				; XREF: Touch_ChkValue
0001B090 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B094 6600                       		bne.s	loc_1AF40	; if yes, branch
0001B096 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001B09C 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001B0A0                            
0001B0A0                            loc_1AF40:
0001B0A0 4A29 0021                  		tst.b	$21(a1)
0001B0A4 6700                       		beq.s	Touch_KillEnemy
0001B0A6 4468 0010                  		neg.w	$10(a0)
0001B0AA 4468 0012                  		neg.w	$12(a0)
0001B0AE E0E8 0010                  		asr	$10(a0)
0001B0B2 E0E8 0012                  		asr	$12(a0)
0001B0B6 137C 0000 0020             		move.b	#0,$20(a1)
0001B0BC 5329 0021                  		subq.b	#1,$21(a1)
0001B0C0 6600                       		bne.s	locret_1AF68
0001B0C2 08E9 0007 0022             		bset	#7,$22(a1)
0001B0C8                            
0001B0C8                            locret_1AF68:
0001B0C8 4E75                       		rts	
0001B0CA                            ; ===========================================================================
0001B0CA                            
0001B0CA                            Touch_KillEnemy:
0001B0CA 08E9 0007 0022             		bset	#7,$22(a1)
0001B0D0 7000                       		moveq	#0,d0
0001B0D2 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001B0D6 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001B0DA 0C40 0006                  		cmpi.w	#6,d0
0001B0DE 6500                       		bcs.s	loc_1AF82
0001B0E0 7006                       		moveq	#6,d0
0001B0E2                            
0001B0E2                            loc_1AF82:
0001B0E2 3340 003E                  		move.w	d0,$3E(a1)
0001B0E6 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001B0EA 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001B0F0 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001B0F2 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001B0F6 337C 000A 003E             		move.w	#$A,$3E(a1)
0001B0FC                            
0001B0FC                            loc_1AF9C:
0001B0FC 6100 0000                  		bsr.w	AddPoints
0001B100 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001B104 137C 0000 0024             		move.b	#0,$24(a1)
0001B10A 4A68 0012                  		tst.w	$12(a0)
0001B10E 6B00                       		bmi.s	loc_1AFC2
0001B110 3028 000C                  		move.w	$C(a0),d0
0001B114 B069 000C                  		cmp.w	$C(a1),d0
0001B118 6400                       		bcc.s	loc_1AFCA
0001B11A 4468 0012                  		neg.w	$12(a0)
0001B11E 4E75                       		rts	
0001B120                            ; ===========================================================================
0001B120                            
0001B120                            loc_1AFC2:
0001B120 0668 0100 0012             		addi.w	#$100,$12(a0)
0001B126 4E75                       		rts	
0001B128                            ; ===========================================================================
0001B128                            
0001B128                            loc_1AFCA:
0001B128 0468 0100 0012             		subi.w	#$100,$12(a0)
0001B12E 4E75                       		rts	
0001B130                            ; ===========================================================================
0001B130 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001B138                            ; ===========================================================================
0001B138                            
0001B138                            loc_1AFDA:				; XREF: Touch_CatKiller
0001B138 08E9 0007 0022             		bset	#7,$22(a1)
0001B13E                            
0001B13E                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001B13E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001B142 6700                       		beq.s	Touch_Hurt	; if not, branch
0001B144                            
0001B144                            loc_1AFE6:				; XREF: Touch_Hurt
0001B144 70FF                       		moveq	#-1,d0
0001B146 4E75                       		rts	
0001B148                            ; ===========================================================================
0001B148                            
0001B148                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001B148 4E71                       		nop	
0001B14A 4A68 0030                  		tst.w	$30(a0)
0001B14E 66F4                       		bne.s	loc_1AFE6
0001B150 2449                       		movea.l	a1,a2
0001B152                            
0001B152                            ; End of function TouchResponse
0001B152                            ; continue straight to HurtSonic
0001B152                            
0001B152                            ; ---------------------------------------------------------------------------
0001B152                            ; Hurting Sonic	subroutine
0001B152                            ; ---------------------------------------------------------------------------
0001B152                            
0001B152                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B152                            
0001B152                            
0001B152                            HurtSonic:
0001B152 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001B156 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001B158 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001B15C 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001B160 4EB9 0000 DC02             		jsr	SingleObjLoad
0001B166 6600                       		bne.s	Hurt_Shield
0001B168 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001B16C 3368 0008 0008             		move.w	8(a0),8(a1)
0001B172 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001B178                            
0001B178                            Hurt_Shield:
0001B178 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001B17E 117C 0004 0024             		move.b	#4,$24(a0)
0001B184 6100 87A6                  		bsr.w	Sonic_ResetOnFloor
0001B188 08E8 0001 0022             		bset	#1,$22(a0)
0001B18E 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001B194 317C FE00 0010             		move.w	#-$200,$10(a0)
0001B19A 0828 0006 0022             		btst	#6,$22(a0)
0001B1A0 6700                       		beq.s	Hurt_Reverse
0001B1A2 317C FE00 0012             		move.w	#-$200,$12(a0)
0001B1A8 317C FF00 0010             		move.w	#-$100,$10(a0)
0001B1AE                            
0001B1AE                            Hurt_Reverse:
0001B1AE 3028 0008                  		move.w	8(a0),d0
0001B1B2 B06A 0008                  		cmp.w	8(a2),d0
0001B1B6 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001B1B8 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001B1BC                            
0001B1BC                            Hurt_ChkSpikes:
0001B1BC 317C 0000 0014             		move.w	#0,$14(a0)
0001B1C2 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001B1C8 317C 0078 0030             		move.w	#$78,$30(a0)
0001B1CE 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001B1D2 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001B1D6 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B1D8 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001B1DC 6600                       		bne.s	Hurt_Sound	; if not, branch
0001B1DE 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001B1E2                            
0001B1E2                            Hurt_Sound:
0001B1E2 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001B1E8 70FF                       		moveq	#-1,d0
0001B1EA 4E75                       		rts	
0001B1EC                            ; ===========================================================================
0001B1EC                            
0001B1EC                            Hurt_NoRings:
0001B1EC 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001B1F0 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001B1F4                            ; End of function HurtSonic
0001B1F4                            
0001B1F4                            ; ---------------------------------------------------------------------------
0001B1F4                            ; Subroutine to	kill Sonic
0001B1F4                            ; ---------------------------------------------------------------------------
0001B1F4                            
0001B1F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B1F4                            
0001B1F4                            
0001B1F4                            KillSonic:
0001B1F4 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001B1F8 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001B1FA 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001B200 117C 0006 0024             		move.b	#6,$24(a0)
0001B206 6100 8724                  		bsr.w	Sonic_ResetOnFloor
0001B20A 08E8 0001 0022             		bset	#1,$22(a0)
0001B210 317C F900 0012             		move.w	#-$700,$12(a0)
0001B216 317C 0000 0010             		move.w	#0,$10(a0)
0001B21C 317C 0000 0014             		move.w	#0,$14(a0)
0001B222 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001B228 117C 0018 001C             		move.b	#$18,$1C(a0)
0001B22E 08E8 0007 0002             		bset	#7,2(a0)
0001B234 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001B238 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001B23C 6600                       		bne.s	Kill_Sound
0001B23E 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001B242                            
0001B242                            Kill_Sound:
0001B242 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001B248                            
0001B248                            Kill_NoDeath:
0001B248 70FF                       		moveq	#-1,d0
0001B24A 4E75                       		rts	
0001B24C                            ; End of function KillSonic
0001B24C                            
0001B24C                            
0001B24C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B24C                            
0001B24C                            
0001B24C                            Touch_Special:				; XREF: Touch_ChkValue
0001B24C 1229 0020                  		move.b	$20(a1),d1
0001B250 0201 003F                  		andi.b	#$3F,d1
0001B254 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001B258 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001B25A 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B25E 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B260 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B264 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B266 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B26A 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B26C 4E75                       		rts	
0001B26E                            ; ===========================================================================
0001B26E                            
0001B26E                            Touch_CatKiller:			; XREF: Touch_Special
0001B26E 6000 FEC8                  		bra.w	loc_1AFDA
0001B272                            ; ===========================================================================
0001B272                            
0001B272                            Touch_Yadrin:				; XREF: Touch_Special
0001B272 9A40                       		sub.w	d0,d5
0001B274 0C45 0008                  		cmpi.w	#8,d5
0001B278 6400                       		bcc.s	loc_1B144
0001B27A 3029 0008                  		move.w	8(a1),d0
0001B27E 5940                       		subq.w	#4,d0
0001B280 0829 0000 0022             		btst	#0,$22(a1)
0001B286 6700                       		beq.s	loc_1B130
0001B288 0440 0010                  		subi.w	#$10,d0
0001B28C                            
0001B28C                            loc_1B130:
0001B28C 9042                       		sub.w	d2,d0
0001B28E 6400                       		bcc.s	loc_1B13C
0001B290 0640 0018                  		addi.w	#$18,d0
0001B294 6500                       		bcs.s	loc_1B140
0001B296 6000                       		bra.s	loc_1B144
0001B298                            ; ===========================================================================
0001B298                            
0001B298                            loc_1B13C:
0001B298 B044                       		cmp.w	d4,d0
0001B29A 6200                       		bhi.s	loc_1B144
0001B29C                            
0001B29C                            loc_1B140:
0001B29C 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B2A0                            ; ===========================================================================
0001B2A0                            
0001B2A0                            loc_1B144:
0001B2A0 6000 FDEE                  		bra.w	Touch_Enemy
0001B2A4                            ; ===========================================================================
0001B2A4                            
0001B2A4                            Touch_D7orE1:				; XREF: Touch_Special
0001B2A4 5229 0021                  		addq.b	#1,$21(a1)
0001B2A8 4E75                       		rts	
0001B2AA                            ; End of function Touch_Special
0001B2AA                            
0001B2AA                            ; ---------------------------------------------------------------------------
0001B2AA                            ; Subroutine to	show the special stage layout
0001B2AA                            ; ---------------------------------------------------------------------------
0001B2AA                            
0001B2AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B2AA                            
0001B2AA                            
0001B2AA                            SS_ShowLayout:				; XREF: SpecialStage
0001B2AA 6100 0000                  		bsr.w	SS_AniWallsRings
0001B2AE 6100 0000                  		bsr.w	SS_AniItems
0001B2B2 3F05                       		move.w	d5,-(sp)
0001B2B4 43F8 8000                  		lea	($FFFF8000).w,a1
0001B2B8 1038 F780                  		move.b	($FFFFF780).w,d0
0001B2BC 0200 00FC                  		andi.b	#$FC,d0
0001B2C0 4EB9 0000 29DA             		jsr	(CalcSine).l
0001B2C6 3800                       		move.w	d0,d4
0001B2C8 3A01                       		move.w	d1,d5
0001B2CA C9FC 0018                  		muls.w	#$18,d4
0001B2CE CBFC 0018                  		muls.w	#$18,d5
0001B2D2 7400                       		moveq	#0,d2
0001B2D4 3438 F700                  		move.w	($FFFFF700).w,d2
0001B2D8 84FC 0018                  		divu.w	#$18,d2
0001B2DC 4842                       		swap	d2
0001B2DE 4442                       		neg.w	d2
0001B2E0 0642 FF4C                  		addi.w	#-$B4,d2
0001B2E4 7600                       		moveq	#0,d3
0001B2E6 3638 F704                  		move.w	($FFFFF704).w,d3
0001B2EA 86FC 0018                  		divu.w	#$18,d3
0001B2EE 4843                       		swap	d3
0001B2F0 4443                       		neg.w	d3
0001B2F2 0643 FF4C                  		addi.w	#-$B4,d3
0001B2F6 3E3C 000F                  		move.w	#$F,d7
0001B2FA                            
0001B2FA                            loc_1B19E:
0001B2FA 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B2FE 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B302 4440                       		neg.w	d0
0001B304 C3C2                       		muls.w	d2,d1
0001B306 C1C3                       		muls.w	d3,d0
0001B308 2C00                       		move.l	d0,d6
0001B30A DC81                       		add.l	d1,d6
0001B30C 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B310 C1C2                       		muls.w	d2,d0
0001B312 C3C3                       		muls.w	d3,d1
0001B314 D280                       		add.l	d0,d1
0001B316 2406                       		move.l	d6,d2
0001B318 3C3C 000F                  		move.w	#$F,d6
0001B31C                            
0001B31C                            loc_1B1C0:
0001B31C 2002                       		move.l	d2,d0
0001B31E E080                       		asr.l	#8,d0
0001B320 32C0                       		move.w	d0,(a1)+
0001B322 2001                       		move.l	d1,d0
0001B324 E080                       		asr.l	#8,d0
0001B326 32C0                       		move.w	d0,(a1)+
0001B328 D485                       		add.l	d5,d2
0001B32A D284                       		add.l	d4,d1
0001B32C 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B330                            
0001B330 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B334 0643 0018                  		addi.w	#$18,d3
0001B338 51CF FFC0                  		dbf	d7,loc_1B19E
0001B33C                            
0001B33C 3A1F                       		move.w	(sp)+,d5
0001B33E 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B344 7000                       		moveq	#0,d0
0001B346 3038 F704                  		move.w	($FFFFF704).w,d0
0001B34A 80FC 0018                  		divu.w	#$18,d0
0001B34E C0FC 0080                  		mulu.w	#$80,d0
0001B352 D1C0                       		adda.l	d0,a0
0001B354 7000                       		moveq	#0,d0
0001B356 3038 F700                  		move.w	($FFFFF700).w,d0
0001B35A 80FC 0018                  		divu.w	#$18,d0
0001B35E D0C0                       		adda.w	d0,a0
0001B360 49F8 8000                  		lea	($FFFF8000).w,a4
0001B364 3E3C 000F                  		move.w	#$F,d7
0001B368                            
0001B368                            loc_1B20C:
0001B368 3C3C 000F                  		move.w	#$F,d6
0001B36C                            
0001B36C                            loc_1B210:
0001B36C 7000                       		moveq	#0,d0
0001B36E 1018                       		move.b	(a0)+,d0
0001B370 6700                       		beq.s	loc_1B268
0001B372 0C00 004E                  		cmpi.b	#$4E,d0
0001B376 6200                       		bhi.s	loc_1B268
0001B378 3614                       		move.w	(a4),d3
0001B37A 0643 0120                  		addi.w	#$120,d3
0001B37E 0C43 0070                  		cmpi.w	#$70,d3
0001B382 6500                       		bcs.s	loc_1B268
0001B384 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B388 6400                       		bcc.s	loc_1B268
0001B38A 342C 0002                  		move.w	2(a4),d2
0001B38E 0642 00F0                  		addi.w	#$F0,d2
0001B392 0C42 0070                  		cmpi.w	#$70,d2
0001B396 6500                       		bcs.s	loc_1B268
0001B398 0C42 0170                  		cmpi.w	#$170,d2
0001B39C 6400                       		bcc.s	loc_1B268
0001B39E 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B3A4 E748                       		lsl.w	#3,d0
0001B3A6 4BF5 0000                  		lea	(a5,d0.w),a5
0001B3AA 225D                       		movea.l	(a5)+,a1
0001B3AC 321D                       		move.w	(a5)+,d1
0001B3AE D241                       		add.w	d1,d1
0001B3B0 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B3B4 365D                       		movea.w	(a5)+,a3
0001B3B6 7200                       		moveq	#0,d1
0001B3B8 1219                       		move.b	(a1)+,d1
0001B3BA 5301                       		subq.b	#1,d1
0001B3BC 6B00                       		bmi.s	loc_1B268
0001B3BE 4EB9 0000 D8DA             		jsr	sub_D762
0001B3C4                            
0001B3C4                            loc_1B268:
0001B3C4 584C                       		addq.w	#4,a4
0001B3C6 51CE FFA4                  		dbf	d6,loc_1B210
0001B3CA                            
0001B3CA 41E8 0070                  		lea	$70(a0),a0
0001B3CE 51CF FF98                  		dbf	d7,loc_1B20C
0001B3D2                            
0001B3D2 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B3D6 0C05 0050                  		cmpi.b	#$50,d5
0001B3DA 6700                       		beq.s	loc_1B288
0001B3DC 24BC 0000 0000             		move.l	#0,(a2)
0001B3E2 4E75                       		rts	
0001B3E4                            ; ===========================================================================
0001B3E4                            
0001B3E4                            loc_1B288:
0001B3E4 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B3EA 4E75                       		rts	
0001B3EC                            ; End of function SS_ShowLayout
0001B3EC                            
0001B3EC                            ; ---------------------------------------------------------------------------
0001B3EC                            ; Subroutine to	animate	walls and rings	in the special stage
0001B3EC                            ; ---------------------------------------------------------------------------
0001B3EC                            
0001B3EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3EC                            
0001B3EC                            
0001B3EC                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B3EC 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B3F2 7000                       		moveq	#0,d0
0001B3F4 1038 F780                  		move.b	($FFFFF780).w,d0
0001B3F8 E408                       		lsr.b	#2,d0
0001B3FA 0240 000F                  		andi.w	#$F,d0
0001B3FE 7223                       		moveq	#$23,d1
0001B400                            
0001B400                            loc_1B2A4:
0001B400 3280                       		move.w	d0,(a1)
0001B402 5049                       		addq.w	#8,a1
0001B404 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B408                            
0001B408 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B40E 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B412 6A00                       		bpl.s	loc_1B2C8
0001B414 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B41A 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B41E 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B424                            
0001B424                            loc_1B2C8:
0001B424 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B42A 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B42E 6A00                       		bpl.s	loc_1B2E4
0001B430 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B436 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B43A 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B440                            
0001B440                            loc_1B2E4:
0001B440 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B444 1340 0138                  		move.b	d0,$138(a1)
0001B448 1340 0160                  		move.b	d0,$160(a1)
0001B44C 1340 0148                  		move.b	d0,$148(a1)
0001B450 1340 0150                  		move.b	d0,$150(a1)
0001B454 1340 01D8                  		move.b	d0,$1D8(a1)
0001B458 1340 01E0                  		move.b	d0,$1E0(a1)
0001B45C 1340 01E8                  		move.b	d0,$1E8(a1)
0001B460 1340 01F0                  		move.b	d0,$1F0(a1)
0001B464 1340 01F8                  		move.b	d0,$1F8(a1)
0001B468 1340 0200                  		move.b	d0,$200(a1)
0001B46C 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B470 6A00                       		bpl.s	loc_1B326
0001B472 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B478 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B47C 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B482                            
0001B482                            loc_1B326:
0001B482 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B486 1340 0168                  		move.b	d0,$168(a1)
0001B48A 1340 0170                  		move.b	d0,$170(a1)
0001B48E 1340 0178                  		move.b	d0,$178(a1)
0001B492 1340 0180                  		move.b	d0,$180(a1)
0001B496 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B49A 6A00                       		bpl.s	loc_1B350
0001B49C 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B4A2 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B4A6 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B4AC                            
0001B4AC                            loc_1B350:
0001B4AC 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B4B2 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B4B8 7000                       		moveq	#0,d0
0001B4BA 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B4BE D040                       		add.w	d0,d0
0001B4C0 41F0 0000                  		lea	(a0,d0.w),a0
0001B4C4 3290                       		move.w	(a0),(a1)
0001B4C6 3368 0002 0008             		move.w	2(a0),8(a1)
0001B4CC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B4D2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B4D8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B4DE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B4E4 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B4EA 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B4F0 D0FC 0020                  		adda.w	#$20,a0
0001B4F4 D2FC 0048                  		adda.w	#$48,a1
0001B4F8 3290                       		move.w	(a0),(a1)
0001B4FA 3368 0002 0008             		move.w	2(a0),8(a1)
0001B500 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B506 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B50C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B512 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B518 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B51E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B524 D0FC 0020                  		adda.w	#$20,a0
0001B528 D2FC 0048                  		adda.w	#$48,a1
0001B52C 3290                       		move.w	(a0),(a1)
0001B52E 3368 0002 0008             		move.w	2(a0),8(a1)
0001B534 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B53A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B540 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B546 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B54C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B552 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B558 D0FC 0020                  		adda.w	#$20,a0
0001B55C D2FC 0048                  		adda.w	#$48,a1
0001B560 3290                       		move.w	(a0),(a1)
0001B562 3368 0002 0008             		move.w	2(a0),8(a1)
0001B568 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B56E 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B574 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B57A 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B580 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B586 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B58C D0FC 0020                  		adda.w	#$20,a0
0001B590 D2FC 0048                  		adda.w	#$48,a1
0001B594 4E75                       		rts	
0001B596                            ; End of function SS_AniWallsRings
0001B596                            
0001B596                            ; ===========================================================================
0001B596 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B5A6 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B5B6 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B5C6 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B5D6 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B5E6 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B5F6 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B606 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B616                            ; ---------------------------------------------------------------------------
0001B616                            ; Subroutine to	remove items when you collect them in the special stage
0001B616                            ; ---------------------------------------------------------------------------
0001B616                            
0001B616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B616                            
0001B616                            
0001B616                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001B616 45F9 00FF 4400             		lea	($FF4400).l,a2
0001B61C 303C 001F                  		move.w	#$1F,d0
0001B620                            
0001B620                            loc_1B4C4:
0001B620 4A12                       		tst.b	(a2)
0001B622 6700                       		beq.s	locret_1B4CE
0001B624 504A                       		addq.w	#8,a2
0001B626 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001B62A                            
0001B62A                            locret_1B4CE:
0001B62A 4E75                       		rts	
0001B62C                            ; End of function SS_RemoveCollectedItem
0001B62C                            
0001B62C                            ; ---------------------------------------------------------------------------
0001B62C                            ; Subroutine to	animate	special	stage items when you touch them
0001B62C                            ; ---------------------------------------------------------------------------
0001B62C                            
0001B62C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B62C                            
0001B62C                            
0001B62C                            SS_AniItems:				; XREF: SS_ShowLayout
0001B62C 41F9 00FF 4400             		lea	($FF4400).l,a0
0001B632 3E3C 001F                  		move.w	#$1F,d7
0001B636                            
0001B636                            loc_1B4DA:
0001B636 7000                       		moveq	#0,d0
0001B638 1010                       		move.b	(a0),d0
0001B63A 6700                       		beq.s	loc_1B4E8
0001B63C E548                       		lsl.w	#2,d0
0001B63E 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001B642 4E91                       		jsr	(a1)
0001B644                            
0001B644                            loc_1B4E8:
0001B644 5048                       		addq.w	#8,a0
0001B646                            
0001B646                            loc_1B4EA:
0001B646 51CF FFEE                  		dbf	d7,loc_1B4DA
0001B64A                            
0001B64A 4E75                       		rts	
0001B64C                            ; End of function SS_AniItems
0001B64C                            
0001B64C                            ; ===========================================================================
0001B64C 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001B650 0000 0000                  		dc.l SS_AniBumper
0001B654 0000 0000                  		dc.l SS_Ani1Up
0001B658 0000 0000                  		dc.l SS_AniReverse
0001B65C 0000 0000                  		dc.l SS_AniEmeraldSparks
0001B660 0000 0000                  		dc.l SS_AniGlassBlock
0001B664                            ; ===========================================================================
0001B664                            
0001B664                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001B664 5328 0002                  		subq.b	#1,2(a0)
0001B668 6A00                       		bpl.s	locret_1B530
0001B66A 117C 0005 0002             		move.b	#5,2(a0)
0001B670 7000                       		moveq	#0,d0
0001B672 1028 0003                  		move.b	3(a0),d0
0001B676 5228 0003                  		addq.b	#1,3(a0)
0001B67A 2268 0004                  		movea.l	4(a0),a1
0001B67E 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001B682 1280                       		move.b	d0,(a1)
0001B684 6600                       		bne.s	locret_1B530
0001B686 4290                       		clr.l	(a0)
0001B688 42A8 0004                  		clr.l	4(a0)
0001B68C                            
0001B68C                            locret_1B530:
0001B68C 4E75                       		rts	
0001B68E                            ; ===========================================================================
0001B68E 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001B694                            ; ===========================================================================
0001B694                            
0001B694                            SS_AniBumper:				; XREF: SS_AniIndex
0001B694 5328 0002                  		subq.b	#1,2(a0)
0001B698 6A00                       		bpl.s	locret_1B566
0001B69A 117C 0007 0002             		move.b	#7,2(a0)
0001B6A0 7000                       		moveq	#0,d0
0001B6A2 1028 0003                  		move.b	3(a0),d0
0001B6A6 5228 0003                  		addq.b	#1,3(a0)
0001B6AA 2268 0004                  		movea.l	4(a0),a1
0001B6AE 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001B6B2 6600                       		bne.s	loc_1B564
0001B6B4 4290                       		clr.l	(a0)
0001B6B6 42A8 0004                  		clr.l	4(a0)
0001B6BA 12BC 0025                  		move.b	#$25,(a1)
0001B6BE 4E75                       		rts	
0001B6C0                            ; ===========================================================================
0001B6C0                            
0001B6C0                            loc_1B564:
0001B6C0 1280                       		move.b	d0,(a1)
0001B6C2                            
0001B6C2                            locret_1B566:
0001B6C2 4E75                       		rts	
0001B6C4                            ; ===========================================================================
0001B6C4 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001B6CA                            ; ===========================================================================
0001B6CA                            
0001B6CA                            SS_Ani1Up:				; XREF: SS_AniIndex
0001B6CA 5328 0002                  		subq.b	#1,2(a0)
0001B6CE 6A00                       		bpl.s	locret_1B596
0001B6D0 117C 0005 0002             		move.b	#5,2(a0)
0001B6D6 7000                       		moveq	#0,d0
0001B6D8 1028 0003                  		move.b	3(a0),d0
0001B6DC 5228 0003                  		addq.b	#1,3(a0)
0001B6E0 2268 0004                  		movea.l	4(a0),a1
0001B6E4 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001B6E8 1280                       		move.b	d0,(a1)
0001B6EA 6600                       		bne.s	locret_1B596
0001B6EC 4290                       		clr.l	(a0)
0001B6EE 42A8 0004                  		clr.l	4(a0)
0001B6F2                            
0001B6F2                            locret_1B596:
0001B6F2 4E75                       		rts	
0001B6F4                            ; ===========================================================================
0001B6F4 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001B6FA                            ; ===========================================================================
0001B6FA                            
0001B6FA                            SS_AniReverse:				; XREF: SS_AniIndex
0001B6FA 5328 0002                  		subq.b	#1,2(a0)
0001B6FE 6A00                       		bpl.s	locret_1B5CC
0001B700 117C 0007 0002             		move.b	#7,2(a0)
0001B706 7000                       		moveq	#0,d0
0001B708 1028 0003                  		move.b	3(a0),d0
0001B70C 5228 0003                  		addq.b	#1,3(a0)
0001B710 2268 0004                  		movea.l	4(a0),a1
0001B714 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001B718 6600                       		bne.s	loc_1B5CA
0001B71A 4290                       		clr.l	(a0)
0001B71C 42A8 0004                  		clr.l	4(a0)
0001B720 12BC 002B                  		move.b	#$2B,(a1)
0001B724 4E75                       		rts	
0001B726                            ; ===========================================================================
0001B726                            
0001B726                            loc_1B5CA:
0001B726 1280                       		move.b	d0,(a1)
0001B728                            
0001B728                            locret_1B5CC:
0001B728 4E75                       		rts	
0001B72A                            ; ===========================================================================
0001B72A 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001B730                            ; ===========================================================================
0001B730                            
0001B730                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001B730 5328 0002                  		subq.b	#1,2(a0)
0001B734 6A00                       		bpl.s	locret_1B60C
0001B736 117C 0005 0002             		move.b	#5,2(a0)
0001B73C 7000                       		moveq	#0,d0
0001B73E 1028 0003                  		move.b	3(a0),d0
0001B742 5228 0003                  		addq.b	#1,3(a0)
0001B746 2268 0004                  		movea.l	4(a0),a1
0001B74A 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001B74E 1280                       		move.b	d0,(a1)
0001B750 6600                       		bne.s	locret_1B60C
0001B752 4290                       		clr.l	(a0)
0001B754 42A8 0004                  		clr.l	4(a0)
0001B758 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001B75E 303C 00A8                  		move.w	#$A8,d0
0001B762 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001B768                            
0001B768                            locret_1B60C:
0001B768 4E75                       		rts	
0001B76A                            ; ===========================================================================
0001B76A 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001B770                            ; ===========================================================================
0001B770                            
0001B770                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001B770 5328 0002                  		subq.b	#1,2(a0)
0001B774 6A00                       		bpl.s	locret_1B640
0001B776 117C 0001 0002             		move.b	#1,2(a0)
0001B77C 7000                       		moveq	#0,d0
0001B77E 1028 0003                  		move.b	3(a0),d0
0001B782 5228 0003                  		addq.b	#1,3(a0)
0001B786 2268 0004                  		movea.l	4(a0),a1
0001B78A 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001B78E 1280                       		move.b	d0,(a1)
0001B790 6600                       		bne.s	locret_1B640
0001B792 12A8 0004                  		move.b	4(a0),(a1)
0001B796 4290                       		clr.l	(a0)
0001B798 42A8 0004                  		clr.l	4(a0)
0001B79C                            
0001B79C                            locret_1B640:
0001B79C 4E75                       		rts	
0001B79E                            ; ===========================================================================
0001B79E 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001B7A8                            ; ---------------------------------------------------------------------------
0001B7A8                            ; Special stage	layout pointers
0001B7A8                            ; ---------------------------------------------------------------------------
0001B7A8                            SS_LayoutIndex:
0001B7A8                            	include "_inc\Special stage layout pointers.asm"
0001B7A8                            ; ---------------------------------------------------------------------------
0001B7A8                            ; Special stage	layout pointers
0001B7A8                            ; ---------------------------------------------------------------------------
0001B7A8 0000 0000                  	dc.l SS_1
0001B7AC 0000 0000                  	dc.l SS_2
0001B7B0 0000 0000                  	dc.l SS_3
0001B7B4 0000 0000                  	dc.l SS_4
0001B7B8 0000 0000                  	dc.l SS_5
0001B7BC 0000 0000                  	dc.l SS_6
0001B7C0                            	even
0001B7C0                            	even
0001B7C0                            
0001B7C0                            ; ---------------------------------------------------------------------------
0001B7C0                            ; Special stage	start locations
0001B7C0                            ; ---------------------------------------------------------------------------
0001B7C0                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001B7D8                            		even
0001B7D8                            
0001B7D8                            ; ---------------------------------------------------------------------------
0001B7D8                            ; Subroutine to	load special stage layout
0001B7D8                            ; ---------------------------------------------------------------------------
0001B7D8                            
0001B7D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B7D8                            
0001B7D8                            
0001B7D8                            SS_Load:				; XREF: SpecialStage
0001B7D8 7000                       		moveq	#0,d0
0001B7DA 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001B7DE 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001B7E2 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001B7E8 6500                       		bcs.s	SS_ChkEmldNum
0001B7EA 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001B7F0                            
0001B7F0                            SS_ChkEmldNum:
0001B7F0 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001B7F6 6700                       		beq.s	SS_LoadData	; if yes, branch
0001B7F8 7200                       		moveq	#0,d1
0001B7FA 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001B7FE 5301                       		subq.b	#1,d1
0001B800 6500                       		bcs.s	SS_LoadData
0001B802 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001B806                            
0001B806                            SS_ChkEmldLoop:	
0001B806 B033 1000                  		cmp.b	(a3,d1.w),d0
0001B80A 6600                       		bne.s	SS_ChkEmldRepeat
0001B80C 60CA                       		bra.s	SS_Load
0001B80E                            ; ===========================================================================
0001B80E                            
0001B80E                            SS_ChkEmldRepeat:
0001B80E 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001B812                            
0001B812                            SS_LoadData:
0001B812 E548                       		lsl.w	#2,d0
0001B814 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001B818 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001B81C 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001B820 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001B824 43F9 00FF 4000             		lea	($FF4000).l,a1
0001B82A 303C 0000                  		move.w	#0,d0
0001B82E 4EB9 0000 171E             		jsr	(EniDec).l
0001B834 43F9 00FF 0000             		lea	($FF0000).l,a1
0001B83A 303C 0FFF                  		move.w	#$FFF,d0
0001B83E                            
0001B83E                            SS_ClrRAM3:
0001B83E 4299                       		clr.l	(a1)+
0001B840 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001B844                            
0001B844 43F9 00FF 1020             		lea	($FF1020).l,a1
0001B84A 41F9 00FF 4000             		lea	($FF4000).l,a0
0001B850 723F                       		moveq	#$3F,d1
0001B852                            
0001B852                            loc_1B6F6:
0001B852 743F                       		moveq	#$3F,d2
0001B854                            
0001B854                            loc_1B6F8:
0001B854 12D8                       		move.b	(a0)+,(a1)+
0001B856 51CA FFFC                  		dbf	d2,loc_1B6F8
0001B85A                            
0001B85A 43E9 0040                  		lea	$40(a1),a1
0001B85E 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001B862                            
0001B862 43F9 00FF 4008             		lea	($FF4008).l,a1
0001B868 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001B86E 724D                       		moveq	#$4D,d1
0001B870                            
0001B870                            loc_1B714:
0001B870 22D8                       		move.l	(a0)+,(a1)+
0001B872 32FC 0000                  		move.w	#0,(a1)+
0001B876 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001B87C 32D8                       		move.w	(a0)+,(a1)+
0001B87E 51C9 FFF0                  		dbf	d1,loc_1B714
0001B882                            
0001B882 43F9 00FF 4400             		lea	($FF4400).l,a1
0001B888 323C 003F                  		move.w	#$3F,d1
0001B88C                            
0001B88C                            loc_1B730:
0001B88C                            
0001B88C 4299                       		clr.l	(a1)+
0001B88E 51C9 FFFC                  		dbf	d1,loc_1B730
0001B892                            
0001B892 4E75                       		rts	
0001B894                            ; End of function SS_Load
0001B894                            
0001B894                            ; ===========================================================================
0001B894                            ; ---------------------------------------------------------------------------
0001B894                            ; Special stage	mappings and VRAM pointers
0001B894                            ; ---------------------------------------------------------------------------
0001B894                            SS_MapIndex:
0001B894                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001B894                            ; ---------------------------------------------------------------------------
0001B894                            ; Special stage	mappings and VRAM pointers
0001B894                            ; ---------------------------------------------------------------------------
0001B894 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001B898 0142                       	dc.w $142		; VRAM setting
0001B89A 0000 0000                  	dc.l Map_SSWalls
0001B89E 0142                       	dc.w $142
0001B8A0 0000 0000                  	dc.l Map_SSWalls
0001B8A4 0142                       	dc.w $142
0001B8A6 0000 0000                  	dc.l Map_SSWalls
0001B8AA 0142                       	dc.w $142
0001B8AC 0000 0000                  	dc.l Map_SSWalls
0001B8B0 0142                       	dc.w $142
0001B8B2 0000 0000                  	dc.l Map_SSWalls
0001B8B6 0142                       	dc.w $142
0001B8B8 0000 0000                  	dc.l Map_SSWalls
0001B8BC 0142                       	dc.w $142
0001B8BE 0000 0000                  	dc.l Map_SSWalls
0001B8C2 0142                       	dc.w $142
0001B8C4 0000 0000                  	dc.l Map_SSWalls
0001B8C8 0142                       	dc.w $142
0001B8CA 0000 0000                  	dc.l Map_SSWalls
0001B8CE 2142                       	dc.w $2142
0001B8D0 0000 0000                  	dc.l Map_SSWalls
0001B8D4 2142                       	dc.w $2142
0001B8D6 0000 0000                  	dc.l Map_SSWalls
0001B8DA 2142                       	dc.w $2142
0001B8DC 0000 0000                  	dc.l Map_SSWalls
0001B8E0 2142                       	dc.w $2142
0001B8E2 0000 0000                  	dc.l Map_SSWalls
0001B8E6 2142                       	dc.w $2142
0001B8E8 0000 0000                  	dc.l Map_SSWalls
0001B8EC 2142                       	dc.w $2142
0001B8EE 0000 0000                  	dc.l Map_SSWalls
0001B8F2 2142                       	dc.w $2142
0001B8F4 0000 0000                  	dc.l Map_SSWalls
0001B8F8 2142                       	dc.w $2142
0001B8FA 0000 0000                  	dc.l Map_SSWalls
0001B8FE 2142                       	dc.w $2142
0001B900 0000 0000                  	dc.l Map_SSWalls
0001B904 4142                       	dc.w $4142
0001B906 0000 0000                  	dc.l Map_SSWalls
0001B90A 4142                       	dc.w $4142
0001B90C 0000 0000                  	dc.l Map_SSWalls
0001B910 4142                       	dc.w $4142
0001B912 0000 0000                  	dc.l Map_SSWalls
0001B916 4142                       	dc.w $4142
0001B918 0000 0000                  	dc.l Map_SSWalls
0001B91C 4142                       	dc.w $4142
0001B91E 0000 0000                  	dc.l Map_SSWalls
0001B922 4142                       	dc.w $4142
0001B924 0000 0000                  	dc.l Map_SSWalls
0001B928 4142                       	dc.w $4142
0001B92A 0000 0000                  	dc.l Map_SSWalls
0001B92E 4142                       	dc.w $4142
0001B930 0000 0000                  	dc.l Map_SSWalls
0001B934 4142                       	dc.w $4142
0001B936 0000 0000                  	dc.l Map_SSWalls
0001B93A 6142                       	dc.w $6142
0001B93C 0000 0000                  	dc.l Map_SSWalls
0001B940 6142                       	dc.w $6142
0001B942 0000 0000                  	dc.l Map_SSWalls
0001B946 6142                       	dc.w $6142
0001B948 0000 0000                  	dc.l Map_SSWalls
0001B94C 6142                       	dc.w $6142
0001B94E 0000 0000                  	dc.l Map_SSWalls
0001B952 6142                       	dc.w $6142
0001B954 0000 0000                  	dc.l Map_SSWalls
0001B958 6142                       	dc.w $6142
0001B95A 0000 0000                  	dc.l Map_SSWalls
0001B95E 6142                       	dc.w $6142
0001B960 0000 0000                  	dc.l Map_SSWalls
0001B964 6142                       	dc.w $6142
0001B966 0000 0000                  	dc.l Map_SSWalls
0001B96A 6142                       	dc.w $6142
0001B96C 0000 EC70                  	dc.l Map_obj47
0001B970 023B                       	dc.w $23B
0001B972 0000 0000                  	dc.l Map_SS_R
0001B976 0570                       	dc.w $570
0001B978 0000 0000                  	dc.l Map_SS_R
0001B97C 0251                       	dc.w $251
0001B97E 0000 0000                  	dc.l Map_SS_R
0001B982 0370                       	dc.w $370
0001B984 0000 0000                  	dc.l Map_SS_Up
0001B988 0263                       	dc.w $263
0001B98A 0000 0000                  	dc.l Map_SS_Down
0001B98E 0263                       	dc.w $263
0001B990 0000 0000                  	dc.l Map_SS_R
0001B994 22F0                       	dc.w $22F0
0001B996 0000 0000                  	dc.l Map_SS_Glass
0001B99A 0470                       	dc.w $470
0001B99C 0000 0000                  	dc.l Map_SS_Glass
0001B9A0 05F0                       	dc.w $5F0
0001B9A2 0000 0000                  	dc.l Map_SS_Glass
0001B9A6 65F0                       	dc.w $65F0
0001B9A8 0000 0000                  	dc.l Map_SS_Glass
0001B9AC 25F0                       	dc.w $25F0
0001B9AE 0000 0000                  	dc.l Map_SS_Glass
0001B9B2 45F0                       	dc.w $45F0
0001B9B4 0000 0000                  	dc.l Map_SS_R
0001B9B8 02F0                       	dc.w $2F0
0001B9BA 0100 EC70                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001B9BE 023B                       	dc.w $23B
0001B9C0 0200 EC70                  	dc.l Map_obj47+$2000000
0001B9C4 023B                       	dc.w $23B
0001B9C6 0000 0000                  	dc.l Map_SS_R
0001B9CA 0797                       	dc.w $797
0001B9CC 0000 0000                  	dc.l Map_SS_R
0001B9D0 07A0                       	dc.w $7A0
0001B9D2 0000 0000                  	dc.l Map_SS_R
0001B9D6 07A9                       	dc.w $7A9
0001B9D8 0000 0000                  	dc.l Map_SS_R
0001B9DC 0797                       	dc.w $797
0001B9DE 0000 0000                  	dc.l Map_SS_R
0001B9E2 07A0                       	dc.w $7A0
0001B9E4 0000 0000                  	dc.l Map_SS_R
0001B9E8 07A9                       	dc.w $7A9
0001B9EA 0000 A068                  	dc.l Map_obj25
0001B9EE 27B2                       	dc.w $27B2
0001B9F0 0000 0000                  	dc.l Map_SS_Chaos3
0001B9F4 0770                       	dc.w $770
0001B9F6 0000 0000                  	dc.l Map_SS_Chaos3
0001B9FA 2770                       	dc.w $2770
0001B9FC 0000 0000                  	dc.l Map_SS_Chaos3
0001BA00 4770                       	dc.w $4770
0001BA02 0000 0000                  	dc.l Map_SS_Chaos3
0001BA06 6770                       	dc.w $6770
0001BA08 0000 0000                  	dc.l Map_SS_Chaos1
0001BA0C 0770                       	dc.w $770
0001BA0E 0000 0000                  	dc.l Map_SS_Chaos2
0001BA12 0770                       	dc.w $770
0001BA14 0000 0000                  	dc.l Map_SS_R
0001BA18 04F0                       	dc.w $4F0
0001BA1A 0400 A068                  	dc.l Map_obj25+$4000000
0001BA1E 27B2                       	dc.w $27B2
0001BA20 0500 A068                  	dc.l Map_obj25+$5000000
0001BA24 27B2                       	dc.w $27B2
0001BA26 0600 A068                  	dc.l Map_obj25+$6000000
0001BA2A 27B2                       	dc.w $27B2
0001BA2C 0700 A068                  	dc.l Map_obj25+$7000000
0001BA30 27B2                       	dc.w $27B2
0001BA32 0000 0000                  	dc.l Map_SS_Glass
0001BA36 23F0                       	dc.w $23F0
0001BA38 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001BA3C 23F0                       	dc.w $23F0
0001BA3E 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001BA42 23F0                       	dc.w $23F0
0001BA44 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001BA48 23F0                       	dc.w $23F0
0001BA4A 0000 0000                  	dc.l Map_SS_R+$2000000
0001BA4E 04F0                       	dc.w $4F0
0001BA50 0000 0000                  	dc.l Map_SS_Glass
0001BA54 05F0                       	dc.w $5F0
0001BA56 0000 0000                  	dc.l Map_SS_Glass
0001BA5A 65F0                       	dc.w $65F0
0001BA5C 0000 0000                  	dc.l Map_SS_Glass
0001BA60 25F0                       	dc.w $25F0
0001BA62 0000 0000                  	dc.l Map_SS_Glass
0001BA66 45F0                       	dc.w $45F0
0001BA66 45F0                       	dc.w $45F0
0001BA68                            
0001BA68                            ; ---------------------------------------------------------------------------
0001BA68                            ; Sprite mappings - special stage "R" block
0001BA68                            ; ---------------------------------------------------------------------------
0001BA68                            Map_SS_R:
0001BA68                            	include "_maps\SSRblock.asm"
0001BA68                            ; ---------------------------------------------------------------------------
0001BA68                            ; Sprite mappings - special stage "R" block
0001BA68                            ; ---------------------------------------------------------------------------
0001BA68 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001BA6C 0000                       		dc.w byte_1B91E-Map_SS_R
0001BA6E 01                         byte_1B912:	dc.b 1
0001BA6F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BA74 01                         byte_1B918:	dc.b 1
0001BA75 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BA7A 00                         byte_1B91E:	dc.b 0
0001BA7C 00                         		even
0001BA7C 00                         		even
0001BA7C                            
0001BA7C                            ; ---------------------------------------------------------------------------
0001BA7C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BA7C                            ; ---------------------------------------------------------------------------
0001BA7C                            Map_SS_Glass:
0001BA7C                            	include "_maps\SSglassblock.asm"
0001BA7C                            ; ---------------------------------------------------------------------------
0001BA7C                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001BA7C                            ; ---------------------------------------------------------------------------
0001BA7C 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001BA80 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001BA84 01                         byte_1B928:	dc.b 1
0001BA85 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BA8A 01                         byte_1B92E:	dc.b 1
0001BA8B F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001BA90 01                         byte_1B934:	dc.b 1
0001BA91 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001BA96 01                         byte_1B93A:	dc.b 1
0001BA97 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001BA9C                            		even
0001BA9C                            		even
0001BA9C                            
0001BA9C                            ; ---------------------------------------------------------------------------
0001BA9C                            ; Sprite mappings - special stage "UP" block
0001BA9C                            ; ---------------------------------------------------------------------------
0001BA9C                            Map_SS_Up:
0001BA9C                            	include "_maps\SSUPblock.asm"
0001BA9C                            ; ---------------------------------------------------------------------------
0001BA9C                            ; Sprite mappings - special stage "UP" block
0001BA9C                            ; ---------------------------------------------------------------------------
0001BA9C 0000                       		dc.w byte_1B944-Map_SS_Up
0001BA9E 0000                       		dc.w byte_1B94A-Map_SS_Up
0001BAA0 01                         byte_1B944:	dc.b 1
0001BAA1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001BAA6 01                         byte_1B94A:	dc.b 1
0001BAA7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BAAC                            		even
0001BAAC                            		even
0001BAAC                            
0001BAAC                            ; ---------------------------------------------------------------------------
0001BAAC                            ; Sprite mappings - special stage "DOWN" block
0001BAAC                            ; ---------------------------------------------------------------------------
0001BAAC                            Map_SS_Down:
0001BAAC                            	include "_maps\SSDOWNblock.asm"
0001BAAC                            ; ---------------------------------------------------------------------------
0001BAAC                            ; Sprite mappings - special stage "DOWN" block
0001BAAC                            ; ---------------------------------------------------------------------------
0001BAAC 0000                       		dc.w byte_1B954-Map_SS_Down
0001BAAE 0000                       		dc.w byte_1B95A-Map_SS_Down
0001BAB0 01                         byte_1B954:	dc.b 1
0001BAB1 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001BAB6 01                         byte_1B95A:	dc.b 1
0001BAB7 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001BABC                            		even
0001BABC                            		even
0001BABC                            
0001BABC                            ; ---------------------------------------------------------------------------
0001BABC                            ; Sprite mappings - special stage chaos	emeralds
0001BABC                            ; ---------------------------------------------------------------------------
0001BABC 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001BABE 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001BAC0 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001BAC2 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001BAC4 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001BAC6 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001BAC8 01                         byte_1B96C:	dc.b 1
0001BAC9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001BACE 01                         byte_1B972:	dc.b 1
0001BACF F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001BAD4 01                         byte_1B978:	dc.b 1
0001BAD5 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001BADA 01                         byte_1B97E:	dc.b 1
0001BADB F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001BAE0                            		even
0001BAE0                            ; ===========================================================================
0001BAE0                            ; ---------------------------------------------------------------------------
0001BAE0                            ; Object 09 - Sonic (special stage)
0001BAE0                            ; ---------------------------------------------------------------------------
0001BAE0                            
0001BAE0                            Obj09:					; XREF: Obj_Index
0001BAE0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001BAE4 6700                       		beq.s	Obj09_Normal	; if not, branch
0001BAE6 6100 0000                  		bsr.w	SS_FixCamera
0001BAEA 6000 0000                  		bra.w	DebugMode
0001BAEE                            ; ===========================================================================
0001BAEE                            
0001BAEE                            Obj09_Normal:
0001BAEE 7000                       		moveq	#0,d0
0001BAF0 1028 0024                  		move.b	$24(a0),d0
0001BAF4 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001BAF8 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001BAFC                            ; ===========================================================================
0001BAFC 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001BAFE 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001BB00 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001BB02 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001BB04                            ; ===========================================================================
0001BB04                            
0001BB04                            Obj09_Main:				; XREF: Obj09_Index
0001BB04 5428 0024                  		addq.b	#2,$24(a0)
0001BB08 117C 000E 0016             		move.b	#$E,$16(a0)
0001BB0E 117C 0007 0017             		move.b	#7,$17(a0)
0001BB14 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001BB1C 317C 0780 0002             		move.w	#$780,2(a0)
0001BB22 117C 0004 0001             		move.b	#4,1(a0)
0001BB28 117C 0000 0018             		move.b	#0,$18(a0)
0001BB2E 117C 0002 001C             		move.b	#2,$1C(a0)
0001BB34 08E8 0002 0022             		bset	#2,$22(a0)
0001BB3A 08E8 0001 0022             		bset	#1,$22(a0)
0001BB40                            
0001BB40                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001BB40 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001BB44 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BB46 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001BB4C 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001BB4E 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001BB54                            
0001BB54                            Obj09_NoDebug:
0001BB54 117C 0000 0030             		move.b	#0,$30(a0)
0001BB5A 7000                       		moveq	#0,d0
0001BB5C 1028 0022                  		move.b	$22(a0),d0
0001BB60 0240 0002                  		andi.w	#2,d0
0001BB64 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001BB68 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001BB6C 4EBA 8254                  		jsr	LoadSonicDynPLC
0001BB70 4EF9 0000 D77C             		jmp	DisplaySprite
0001BB76                            ; ===========================================================================
0001BB76 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001BB78 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001BB7A                            ; ===========================================================================
0001BB7A                            
0001BB7A                            Obj09_OnWall:				; XREF: Obj09_Modes
0001BB7A 6100 0000                  		bsr.w	Obj09_Jump
0001BB7E 6100 0000                  		bsr.w	Obj09_Move
0001BB82 6100 0000                  		bsr.w	Obj09_Fall
0001BB86 6000                       		bra.s	Obj09_Display
0001BB88                            ; ===========================================================================
0001BB88                            
0001BB88                            Obj09_InAir:				; XREF: Obj09_Modes
0001BB88 6100 0000                  		bsr.w	nullsub_2
0001BB8C 6100 0000                  		bsr.w	Obj09_Move
0001BB90 6100 0000                  		bsr.w	Obj09_Fall
0001BB94                            
0001BB94                            Obj09_Display:				; XREF: Obj09_OnWall
0001BB94 6100 0000                  		bsr.w	Obj09_ChkItems
0001BB98 6100 0000                  		bsr.w	Obj09_ChkItems2
0001BB9C 4EB9 0000 D756             		jsr	SpeedToPos
0001BBA2 6100 0000                  		bsr.w	SS_FixCamera
0001BBA6 3038 F780                  		move.w	($FFFFF780).w,d0
0001BBAA D078 F782                  		add.w	($FFFFF782).w,d0
0001BBAE 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BBB2 4EB9 0001 3B48             		jsr	Sonic_Animate
0001BBB8 4E75                       		rts	
0001BBBA                            
0001BBBA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBBA                            
0001BBBA                            
0001BBBA                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001BBBA 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001BBC0 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001BBC2 6100 0000                  		bsr.w	Obj09_MoveLeft
0001BBC6                            
0001BBC6                            Obj09_ChkRight:
0001BBC6 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001BBCC 6700                       		beq.s	loc_1BA78	; if not, branch
0001BBCE 6100 0000                  		bsr.w	Obj09_MoveRight
0001BBD2                            
0001BBD2                            loc_1BA78:
0001BBD2 1038 F602                  		move.b	($FFFFF602).w,d0
0001BBD6 0200 000C                  		andi.b	#$C,d0
0001BBDA 6600                       		bne.s	loc_1BAA8
0001BBDC 3028 0014                  		move.w	$14(a0),d0
0001BBE0 6700                       		beq.s	loc_1BAA8
0001BBE2 6B00                       		bmi.s	loc_1BA9A
0001BBE4 0440 000C                  		subi.w	#$C,d0
0001BBE8 6400                       		bcc.s	loc_1BA94
0001BBEA 303C 0000                  		move.w	#0,d0
0001BBEE                            
0001BBEE                            loc_1BA94:
0001BBEE 3140 0014                  		move.w	d0,$14(a0)
0001BBF2 6000                       		bra.s	loc_1BAA8
0001BBF4                            ; ===========================================================================
0001BBF4                            
0001BBF4                            loc_1BA9A:
0001BBF4 0640 000C                  		addi.w	#$C,d0
0001BBF8 6400                       		bcc.s	loc_1BAA4
0001BBFA 303C 0000                  		move.w	#0,d0
0001BBFE                            
0001BBFE                            loc_1BAA4:
0001BBFE 3140 0014                  		move.w	d0,$14(a0)
0001BC02                            
0001BC02                            loc_1BAA8:
0001BC02 1038 F780                  		move.b	($FFFFF780).w,d0
0001BC06 0600 0020                  		addi.b	#$20,d0
0001BC0A 0200 00C0                  		andi.b	#$C0,d0
0001BC0E 4400                       		neg.b	d0
0001BC10 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BC16 C3E8 0014                  		muls.w	$14(a0),d1
0001BC1A D3A8 0008                  		add.l	d1,8(a0)
0001BC1E C1E8 0014                  		muls.w	$14(a0),d0
0001BC22 D1A8 000C                  		add.l	d0,$C(a0)
0001BC26 48E7 C000                  		movem.l	d0-d1,-(sp)
0001BC2A 2428 000C                  		move.l	$C(a0),d2
0001BC2E 2628 0008                  		move.l	8(a0),d3
0001BC32 6100 0000                  		bsr.w	sub_1BCE8
0001BC36 6700                       		beq.s	loc_1BAF2
0001BC38 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BC3C 93A8 0008                  		sub.l	d1,8(a0)
0001BC40 91A8 000C                  		sub.l	d0,$C(a0)
0001BC44 317C 0000 0014             		move.w	#0,$14(a0)
0001BC4A 4E75                       		rts	
0001BC4C                            ; ===========================================================================
0001BC4C                            
0001BC4C                            loc_1BAF2:
0001BC4C 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001BC50 4E75                       		rts	
0001BC52                            ; End of function Obj09_Move
0001BC52                            
0001BC52                            
0001BC52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC52                            
0001BC52                            
0001BC52                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001BC52 08E8 0000 0022             		bset	#0,$22(a0)
0001BC58 3028 0014                  		move.w	$14(a0),d0
0001BC5C 6700                       		beq.s	loc_1BB06
0001BC5E 6A00                       		bpl.s	loc_1BB1A
0001BC60                            
0001BC60                            loc_1BB06:
0001BC60 0440 000C                  		subi.w	#$C,d0
0001BC64 0C40 F800                  		cmpi.w	#-$800,d0
0001BC68 6E00                       		bgt.s	loc_1BB14
0001BC6A 303C F800                  		move.w	#-$800,d0
0001BC6E                            
0001BC6E                            loc_1BB14:
0001BC6E 3140 0014                  		move.w	d0,$14(a0)
0001BC72 4E75                       		rts	
0001BC74                            ; ===========================================================================
0001BC74                            
0001BC74                            loc_1BB1A:
0001BC74 0440 0040                  		subi.w	#$40,d0
0001BC78 6400                       		bcc.s	loc_1BB22
0001BC7A 4E71                       		nop	
0001BC7C                            
0001BC7C                            loc_1BB22:
0001BC7C 3140 0014                  		move.w	d0,$14(a0)
0001BC80 4E75                       		rts	
0001BC82                            ; End of function Obj09_MoveLeft
0001BC82                            
0001BC82                            
0001BC82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC82                            
0001BC82                            
0001BC82                            Obj09_MoveRight:			; XREF: Obj09_Move
0001BC82 08A8 0000 0022             		bclr	#0,$22(a0)
0001BC88 3028 0014                  		move.w	$14(a0),d0
0001BC8C 6B00                       		bmi.s	loc_1BB48
0001BC8E 0640 000C                  		addi.w	#$C,d0
0001BC92 0C40 0800                  		cmpi.w	#$800,d0
0001BC96 6D00                       		blt.s	loc_1BB42
0001BC98 303C 0800                  		move.w	#$800,d0
0001BC9C                            
0001BC9C                            loc_1BB42:
0001BC9C 3140 0014                  		move.w	d0,$14(a0)
0001BCA0 6000                       		bra.s	locret_1BB54
0001BCA2                            ; ===========================================================================
0001BCA2                            
0001BCA2                            loc_1BB48:
0001BCA2 0640 0040                  		addi.w	#$40,d0
0001BCA6 6400                       		bcc.s	loc_1BB50
0001BCA8 4E71                       		nop	
0001BCAA                            
0001BCAA                            loc_1BB50:
0001BCAA 3140 0014                  		move.w	d0,$14(a0)
0001BCAE                            
0001BCAE                            locret_1BB54:
0001BCAE 4E75                       		rts	
0001BCB0                            ; End of function Obj09_MoveRight
0001BCB0                            
0001BCB0                            
0001BCB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCB0                            
0001BCB0                            
0001BCB0                            Obj09_Jump:				; XREF: Obj09_OnWall
0001BCB0 1038 F603                  		move.b	($FFFFF603).w,d0
0001BCB4 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001BCB8 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001BCBA 1038 F780                  		move.b	($FFFFF780).w,d0
0001BCBE 0200 00FC                  		andi.b	#$FC,d0
0001BCC2 4400                       		neg.b	d0
0001BCC4 0400 0040                  		subi.b	#$40,d0
0001BCC8 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BCCE C3FC 0680                  		muls.w	#$680,d1
0001BCD2 E081                       		asr.l	#8,d1
0001BCD4 3141 0010                  		move.w	d1,$10(a0)
0001BCD8 C1FC 0680                  		muls.w	#$680,d0
0001BCDC E080                       		asr.l	#8,d0
0001BCDE 3140 0012                  		move.w	d0,$12(a0)
0001BCE2 08E8 0001 0022             		bset	#1,$22(a0)
0001BCE8 303C 00A0                  		move.w	#$A0,d0
0001BCEC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001BCF2                            
0001BCF2                            Obj09_NoJump:
0001BCF2 4E75                       		rts	
0001BCF4                            ; End of function Obj09_Jump
0001BCF4                            
0001BCF4                            
0001BCF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BCF4                            
0001BCF4                            
0001BCF4                            nullsub_2:				; XREF: Obj09_InAir
0001BCF4 4E75                       		rts	
0001BCF6                            ; End of function nullsub_2
0001BCF6                            
0001BCF6                            ; ===========================================================================
0001BCF6                            ; ---------------------------------------------------------------------------
0001BCF6                            ; unused subroutine to limit Sonic's upward vertical speed
0001BCF6                            ; ---------------------------------------------------------------------------
0001BCF6 323C FC00                  		move.w	#-$400,d1
0001BCFA B268 0012                  		cmp.w	$12(a0),d1
0001BCFE 6F00                       		ble.s	locret_1BBB4
0001BD00 1038 F602                  		move.b	($FFFFF602).w,d0
0001BD04 0200 0070                  		andi.b	#$70,d0
0001BD08 6600                       		bne.s	locret_1BBB4
0001BD0A 3141 0012                  		move.w	d1,$12(a0)
0001BD0E                            
0001BD0E                            locret_1BBB4:
0001BD0E 4E75                       		rts	
0001BD10                            ; ---------------------------------------------------------------------------
0001BD10                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001BD10                            ; ---------------------------------------------------------------------------
0001BD10                            
0001BD10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD10                            
0001BD10                            
0001BD10                            SS_FixCamera:				; XREF: Obj09
0001BD10 3428 000C                  		move.w	$C(a0),d2
0001BD14 3628 0008                  		move.w	8(a0),d3
0001BD18 3038 F700                  		move.w	($FFFFF700).w,d0
0001BD1C 0443 00A0                  		subi.w	#$A0,d3
0001BD20 6500                       		bcs.s	loc_1BBCE
0001BD22 9043                       		sub.w	d3,d0
0001BD24 9178 F700                  		sub.w	d0,($FFFFF700).w
0001BD28                            
0001BD28                            loc_1BBCE:
0001BD28 3038 F704                  		move.w	($FFFFF704).w,d0
0001BD2C 0442 0070                  		subi.w	#$70,d2
0001BD30 6500                       		bcs.s	locret_1BBDE
0001BD32 9042                       		sub.w	d2,d0
0001BD34 9178 F704                  		sub.w	d0,($FFFFF704).w
0001BD38                            
0001BD38                            locret_1BBDE:
0001BD38 4E75                       		rts	
0001BD3A                            ; End of function SS_FixCamera
0001BD3A                            
0001BD3A                            ; ===========================================================================
0001BD3A                            
0001BD3A                            Obj09_ExitStage:			; XREF: Obj09_Index
0001BD3A 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001BD40 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001BD46 6600                       		bne.s	loc_1BBF4
0001BD48 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BD4E                            
0001BD4E                            loc_1BBF4:
0001BD4E 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001BD54 6D00                       		blt.s	loc_1BC12
0001BD56 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001BD5C 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001BD62 5428 0024                  		addq.b	#2,$24(a0)
0001BD66 317C 003C 0038             		move.w	#$3C,$38(a0)
0001BD6C                            
0001BD6C                            loc_1BC12:
0001BD6C 3038 F780                  		move.w	($FFFFF780).w,d0
0001BD70 D078 F782                  		add.w	($FFFFF782).w,d0
0001BD74 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BD78 4EB9 0001 3B48             		jsr	Sonic_Animate
0001BD7E 4EBA 8042                  		jsr	LoadSonicDynPLC
0001BD82 6100 FF8C                  		bsr.w	SS_FixCamera
0001BD86 4EF9 0000 D77C             		jmp	DisplaySprite
0001BD8C                            ; ===========================================================================
0001BD8C                            
0001BD8C                            Obj09_Exit2:				; XREF: Obj09_Index
0001BD8C 5368 0038                  		subq.w	#1,$38(a0)
0001BD90 6600                       		bne.s	loc_1BC40
0001BD92 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BD98                            
0001BD98                            loc_1BC40:
0001BD98 4EB9 0001 3B48             		jsr	Sonic_Animate
0001BD9E 4EBA 8022                  		jsr	LoadSonicDynPLC
0001BDA2 6100 FF6C                  		bsr.w	SS_FixCamera
0001BDA6 4EF9 0000 D77C             		jmp	DisplaySprite
0001BDAC                            
0001BDAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BDAC                            
0001BDAC                            
0001BDAC                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001BDAC 2428 000C                  		move.l	$C(a0),d2
0001BDB0 2628 0008                  		move.l	8(a0),d3
0001BDB4 1038 F780                  		move.b	($FFFFF780).w,d0
0001BDB8 0200 00FC                  		andi.b	#$FC,d0
0001BDBC 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BDC2 3828 0010                  		move.w	$10(a0),d4
0001BDC6 48C4                       		ext.l	d4
0001BDC8 E184                       		asl.l	#8,d4
0001BDCA C1FC 002A                  		muls.w	#$2A,d0
0001BDCE D084                       		add.l	d4,d0
0001BDD0 3828 0012                  		move.w	$12(a0),d4
0001BDD4 48C4                       		ext.l	d4
0001BDD6 E184                       		asl.l	#8,d4
0001BDD8 C3FC 002A                  		muls.w	#$2A,d1
0001BDDC D284                       		add.l	d4,d1
0001BDDE D680                       		add.l	d0,d3
0001BDE0 6100 0000                  		bsr.w	sub_1BCE8
0001BDE4 6700                       		beq.s	loc_1BCB0
0001BDE6 9680                       		sub.l	d0,d3
0001BDE8 7000                       		moveq	#0,d0
0001BDEA 3140 0010                  		move.w	d0,$10(a0)
0001BDEE 08A8 0001 0022             		bclr	#1,$22(a0)
0001BDF4 D481                       		add.l	d1,d2
0001BDF6 6100 0000                  		bsr.w	sub_1BCE8
0001BDFA 6700                       		beq.s	loc_1BCC6
0001BDFC 9481                       		sub.l	d1,d2
0001BDFE 7200                       		moveq	#0,d1
0001BE00 3141 0012                  		move.w	d1,$12(a0)
0001BE04 4E75                       		rts	
0001BE06                            ; ===========================================================================
0001BE06                            
0001BE06                            loc_1BCB0:
0001BE06 D481                       		add.l	d1,d2
0001BE08 6100 0000                  		bsr.w	sub_1BCE8
0001BE0C 6700                       		beq.s	loc_1BCD4
0001BE0E 9481                       		sub.l	d1,d2
0001BE10 7200                       		moveq	#0,d1
0001BE12 3141 0012                  		move.w	d1,$12(a0)
0001BE16 08A8 0001 0022             		bclr	#1,$22(a0)
0001BE1C                            
0001BE1C                            loc_1BCC6:
0001BE1C E080                       		asr.l	#8,d0
0001BE1E E081                       		asr.l	#8,d1
0001BE20 3140 0010                  		move.w	d0,$10(a0)
0001BE24 3141 0012                  		move.w	d1,$12(a0)
0001BE28 4E75                       		rts	
0001BE2A                            ; ===========================================================================
0001BE2A                            
0001BE2A                            loc_1BCD4:
0001BE2A E080                       		asr.l	#8,d0
0001BE2C E081                       		asr.l	#8,d1
0001BE2E 3140 0010                  		move.w	d0,$10(a0)
0001BE32 3141 0012                  		move.w	d1,$12(a0)
0001BE36 08E8 0001 0022             		bset	#1,$22(a0)
0001BE3C 4E75                       		rts	
0001BE3E                            ; End of function Obj09_Fall
0001BE3E                            
0001BE3E                            
0001BE3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE3E                            
0001BE3E                            
0001BE3E                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001BE3E 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BE44 7800                       		moveq	#0,d4
0001BE46 4842                       		swap	d2
0001BE48 3802                       		move.w	d2,d4
0001BE4A 4842                       		swap	d2
0001BE4C 0644 0044                  		addi.w	#$44,d4
0001BE50 88FC 0018                  		divu.w	#$18,d4
0001BE54 C8FC 0080                  		mulu.w	#$80,d4
0001BE58 D3C4                       		adda.l	d4,a1
0001BE5A 7800                       		moveq	#0,d4
0001BE5C 4843                       		swap	d3
0001BE5E 3803                       		move.w	d3,d4
0001BE60 4843                       		swap	d3
0001BE62 0644 0014                  		addi.w	#$14,d4
0001BE66 88FC 0018                  		divu.w	#$18,d4
0001BE6A D2C4                       		adda.w	d4,a1
0001BE6C 7A00                       		moveq	#0,d5
0001BE6E 1819                       		move.b	(a1)+,d4
0001BE70 6100                       		bsr.s	sub_1BD30
0001BE72 1819                       		move.b	(a1)+,d4
0001BE74 6100                       		bsr.s	sub_1BD30
0001BE76 D2FC 007E                  		adda.w	#$7E,a1
0001BE7A 1819                       		move.b	(a1)+,d4
0001BE7C 6100                       		bsr.s	sub_1BD30
0001BE7E 1819                       		move.b	(a1)+,d4
0001BE80 6100                       		bsr.s	sub_1BD30
0001BE82 4A05                       		tst.b	d5
0001BE84 4E75                       		rts	
0001BE86                            ; End of function sub_1BCE8
0001BE86                            
0001BE86                            
0001BE86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BE86                            
0001BE86                            
0001BE86                            sub_1BD30:				; XREF: sub_1BCE8
0001BE86 6700                       		beq.s	locret_1BD44
0001BE88 0C04 0028                  		cmpi.b	#$28,d4
0001BE8C 6700                       		beq.s	locret_1BD44
0001BE8E 0C04 003A                  		cmpi.b	#$3A,d4
0001BE92 6500                       		bcs.s	loc_1BD46
0001BE94 0C04 004B                  		cmpi.b	#$4B,d4
0001BE98 6400                       		bcc.s	loc_1BD46
0001BE9A                            
0001BE9A                            locret_1BD44:
0001BE9A 4E75                       		rts	
0001BE9C                            ; ===========================================================================
0001BE9C                            
0001BE9C                            loc_1BD46:
0001BE9C 1144 0030                  		move.b	d4,$30(a0)
0001BEA0 2149 0032                  		move.l	a1,$32(a0)
0001BEA4 7AFF                       		moveq	#-1,d5
0001BEA6 4E75                       		rts	
0001BEA8                            ; End of function sub_1BD30
0001BEA8                            
0001BEA8                            
0001BEA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BEA8                            
0001BEA8                            
0001BEA8                            Obj09_ChkItems:				; XREF: Obj09_Display
0001BEA8 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BEAE 7800                       		moveq	#0,d4
0001BEB0 3828 000C                  		move.w	$C(a0),d4
0001BEB4 0644 0050                  		addi.w	#$50,d4
0001BEB8 88FC 0018                  		divu.w	#$18,d4
0001BEBC C8FC 0080                  		mulu.w	#$80,d4
0001BEC0 D3C4                       		adda.l	d4,a1
0001BEC2 7800                       		moveq	#0,d4
0001BEC4 3828 0008                  		move.w	8(a0),d4
0001BEC8 0644 0020                  		addi.w	#$20,d4
0001BECC 88FC 0018                  		divu.w	#$18,d4
0001BED0 D2C4                       		adda.w	d4,a1
0001BED2 1811                       		move.b	(a1),d4
0001BED4 6600                       		bne.s	Obj09_ChkCont
0001BED6 4A28 003A                  		tst.b	$3A(a0)
0001BEDA 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001BEDE 7800                       		moveq	#0,d4
0001BEE0 4E75                       		rts	
0001BEE2                            ; ===========================================================================
0001BEE2                            
0001BEE2                            Obj09_ChkCont:
0001BEE2 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001BEE6 6600                       		bne.s	Obj09_Chk1Up
0001BEE8 6100 F72C                  		bsr.w	SS_RemoveCollectedItem
0001BEEC 6600                       		bne.s	Obj09_GetCont
0001BEEE 14BC 0001                  		move.b	#1,(a2)
0001BEF2 2549 0004                  		move.l	a1,4(a2)
0001BEF6                            
0001BEF6                            Obj09_GetCont:
0001BEF6 4EB9 0000 9D50             		jsr	CollectRing
0001BEFC 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001BF02 6500                       		bcs.s	Obj09_NoCont
0001BF04 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001BF0A 6600                       		bne.s	Obj09_NoCont
0001BF0C 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001BF10 303C 00BF                  		move.w	#$BF,d0
0001BF14 4EB9 0000 1396             		jsr	(PlaySound).l	; play extra continue sound
0001BF1A                            
0001BF1A                            Obj09_NoCont:
0001BF1A 7800                       		moveq	#0,d4
0001BF1C 4E75                       		rts	
0001BF1E                            ; ===========================================================================
0001BF1E                            
0001BF1E                            Obj09_Chk1Up:
0001BF1E 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001BF22 6600                       		bne.s	Obj09_ChkEmer
0001BF24 6100 F6F0                  		bsr.w	SS_RemoveCollectedItem
0001BF28 6600                       		bne.s	Obj09_Get1Up
0001BF2A 14BC 0003                  		move.b	#3,(a2)
0001BF2E 2549 0004                  		move.l	a1,4(a2)
0001BF32                            
0001BF32                            Obj09_Get1Up:
0001BF32 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001BF36 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001BF3A 303C 0088                  		move.w	#$88,d0
0001BF3E 4EB9 0000 1396             		jsr	(PlaySound).l	; play extra life music
0001BF44 7800                       		moveq	#0,d4
0001BF46 4E75                       		rts	
0001BF48                            ; ===========================================================================
0001BF48                            
0001BF48                            Obj09_ChkEmer:
0001BF48 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001BF4C 6500                       		bcs.s	Obj09_ChkGhost
0001BF4E 0C04 0040                  		cmpi.b	#$40,d4
0001BF52 6200                       		bhi.s	Obj09_ChkGhost
0001BF54 6100 F6C0                  		bsr.w	SS_RemoveCollectedItem
0001BF58 6600                       		bne.s	Obj09_GetEmer
0001BF5A 14BC 0005                  		move.b	#5,(a2)
0001BF5E 2549 0004                  		move.l	a1,4(a2)
0001BF62                            
0001BF62                            Obj09_GetEmer:
0001BF62 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001BF68 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001BF6A 0404 003B                  		subi.b	#$3B,d4
0001BF6E 7000                       		moveq	#0,d0
0001BF70 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001BF74 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001BF78 1584 0000                  		move.b	d4,(a2,d0.w)
0001BF7C 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001BF80                            
0001BF80                            Obj09_NoEmer:
0001BF80 303C 0093                  		move.w	#$93,d0
0001BF84 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play emerald music
0001BF8A 7800                       		moveq	#0,d4
0001BF8C 4E75                       		rts	
0001BF8E                            ; ===========================================================================
0001BF8E                            
0001BF8E                            Obj09_ChkGhost:
0001BF8E 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001BF92 6600                       		bne.s	Obj09_ChkGhostTag
0001BF94 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001BF9A                            
0001BF9A                            Obj09_ChkGhostTag:
0001BF9A 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001BF9E 6600                       		bne.s	Obj09_NoGhost
0001BFA0 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001BFA6 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001BFA8 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001BFAE                            
0001BFAE                            Obj09_NoGhost:
0001BFAE 78FF                       		moveq	#-1,d4
0001BFB0 4E75                       		rts	
0001BFB2                            ; ===========================================================================
0001BFB2                            
0001BFB2                            Obj09_MakeGhostSolid:
0001BFB2 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001BFB8 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001BFBA 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BFC0 723F                       		moveq	#$3F,d1
0001BFC2                            
0001BFC2                            Obj09_GhostLoop2:
0001BFC2 743F                       		moveq	#$3F,d2
0001BFC4                            
0001BFC4                            Obj09_GhostLoop:
0001BFC4 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001BFC8 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001BFCA 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001BFCE                            
0001BFCE                            Obj09_NoReplace:
0001BFCE 5249                       		addq.w	#1,a1
0001BFD0 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001BFD4 43E9 0040                  		lea	$40(a1),a1
0001BFD8 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001BFDC                            
0001BFDC                            Obj09_GhostNotSolid:
0001BFDC 4228 003A                  		clr.b	$3A(a0)
0001BFE0 7800                       		moveq	#0,d4
0001BFE2 4E75                       		rts	
0001BFE4                            ; End of function Obj09_ChkItems
0001BFE4                            
0001BFE4                            
0001BFE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BFE4                            
0001BFE4                            
0001BFE4                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001BFE4 1028 0030                  		move.b	$30(a0),d0
0001BFE8 6600                       		bne.s	Obj09_ChkBumper
0001BFEA 5328 0036                  		subq.b	#1,$36(a0)
0001BFEE 6A00                       		bpl.s	loc_1BEA0
0001BFF0 117C 0000 0036             		move.b	#0,$36(a0)
0001BFF6                            
0001BFF6                            loc_1BEA0:
0001BFF6 5328 0037                  		subq.b	#1,$37(a0)
0001BFFA 6A00                       		bpl.s	locret_1BEAC
0001BFFC 117C 0000 0037             		move.b	#0,$37(a0)
0001C002                            
0001C002                            locret_1BEAC:
0001C002 4E75                       		rts	
0001C004                            ; ===========================================================================
0001C004                            
0001C004                            Obj09_ChkBumper:
0001C004 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001C008 6600                       		bne.s	Obj09_GOAL
0001C00A 2228 0032                  		move.l	$32(a0),d1
0001C00E 0481 00FF 0001             		subi.l	#$FF0001,d1
0001C014 3401                       		move.w	d1,d2
0001C016 0241 007F                  		andi.w	#$7F,d1
0001C01A C2FC 0018                  		mulu.w	#$18,d1
0001C01E 0441 0014                  		subi.w	#$14,d1
0001C022 EE4A                       		lsr.w	#7,d2
0001C024 0242 007F                  		andi.w	#$7F,d2
0001C028 C4FC 0018                  		mulu.w	#$18,d2
0001C02C 0442 0044                  		subi.w	#$44,d2
0001C030 9268 0008                  		sub.w	8(a0),d1
0001C034 9468 000C                  		sub.w	$C(a0),d2
0001C038 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0001C03E 4EB9 0000 29DA             		jsr	(CalcSine).l
0001C044 C3FC F900                  		muls.w	#-$700,d1
0001C048 E081                       		asr.l	#8,d1
0001C04A 3141 0010                  		move.w	d1,$10(a0)
0001C04E C1FC F900                  		muls.w	#-$700,d0
0001C052 E080                       		asr.l	#8,d0
0001C054 3140 0012                  		move.w	d0,$12(a0)
0001C058 08E8 0001 0022             		bset	#1,$22(a0)
0001C05E 6100 F5B6                  		bsr.w	SS_RemoveCollectedItem
0001C062 6600                       		bne.s	Obj09_BumpSnd
0001C064 14BC 0002                  		move.b	#2,(a2)
0001C068 2028 0032                  		move.l	$32(a0),d0
0001C06C 5380                       		subq.l	#1,d0
0001C06E 2540 0004                  		move.l	d0,4(a2)
0001C072                            
0001C072                            Obj09_BumpSnd:
0001C072 303C 00B4                  		move.w	#$B4,d0
0001C076 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play bumper sound
0001C07C                            ; ===========================================================================
0001C07C                            
0001C07C                            Obj09_GOAL:
0001C07C 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001C080 6600                       		bne.s	Obj09_UPblock
0001C082 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001C086 303C 00A8                  		move.w	#$A8,d0		; change item
0001C08A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001C090 4E75                       		rts	
0001C092                            ; ===========================================================================
0001C092                            
0001C092                            Obj09_UPblock:
0001C092 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001C096 6600                       		bne.s	Obj09_DOWNblock
0001C098 4A28 0036                  		tst.b	$36(a0)
0001C09C 6600 0000                  		bne.w	Obj09_NoGlass
0001C0A0 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C0A6 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C0AC 6700                       		beq.s	Obj09_UPsnd
0001C0AE E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001C0B2 2268 0032                  		movea.l	$32(a0),a1
0001C0B6 5389                       		subq.l	#1,a1
0001C0B8 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001C0BC                            
0001C0BC                            Obj09_UPsnd:
0001C0BC 303C 00A9                  		move.w	#$A9,d0
0001C0C0 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C0C6                            ; ===========================================================================
0001C0C6                            
0001C0C6                            Obj09_DOWNblock:
0001C0C6 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001C0CA 6600                       		bne.s	Obj09_Rblock
0001C0CC 4A28 0036                  		tst.b	$36(a0)
0001C0D0 6600 0000                  		bne.w	Obj09_NoGlass
0001C0D4 117C 001E 0036             		move.b	#$1E,$36(a0)
0001C0DA 0838 0006 F783             		btst	#6,($FFFFF783).w
0001C0E0 6600                       		bne.s	Obj09_DOWNsnd
0001C0E2 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001C0E6 2268 0032                  		movea.l	$32(a0),a1
0001C0EA 5389                       		subq.l	#1,a1
0001C0EC 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001C0F0                            
0001C0F0                            Obj09_DOWNsnd:
0001C0F0 303C 00A9                  		move.w	#$A9,d0
0001C0F4 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001C0FA                            ; ===========================================================================
0001C0FA                            
0001C0FA                            Obj09_Rblock:
0001C0FA 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001C0FE 6600                       		bne.s	Obj09_ChkGlass
0001C100 4A28 0037                  		tst.b	$37(a0)
0001C104 6600 0000                  		bne.w	Obj09_NoGlass
0001C108 117C 001E 0037             		move.b	#$1E,$37(a0)
0001C10E 6100 F506                  		bsr.w	SS_RemoveCollectedItem
0001C112 6600                       		bne.s	Obj09_RevStage
0001C114 14BC 0004                  		move.b	#4,(a2)
0001C118 2028 0032                  		move.l	$32(a0),d0
0001C11C 5380                       		subq.l	#1,d0
0001C11E 2540 0004                  		move.l	d0,4(a2)
0001C122                            
0001C122                            Obj09_RevStage:
0001C122 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001C126 303C 00A9                  		move.w	#$A9,d0
0001C12A 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play sound
0001C130                            ; ===========================================================================
0001C130                            
0001C130                            Obj09_ChkGlass:
0001C130 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001C134 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001C136 0C00 002E                  		cmpi.b	#$2E,d0
0001C13A 6700                       		beq.s	Obj09_Glass
0001C13C 0C00 002F                  		cmpi.b	#$2F,d0
0001C140 6700                       		beq.s	Obj09_Glass
0001C142 0C00 0030                  		cmpi.b	#$30,d0
0001C146 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001C148                            
0001C148                            Obj09_Glass:
0001C148 6100 F4CC                  		bsr.w	SS_RemoveCollectedItem
0001C14C 6600                       		bne.s	Obj09_GlassSnd
0001C14E 14BC 0006                  		move.b	#6,(a2)
0001C152 2268 0032                  		movea.l	$32(a0),a1
0001C156 5389                       		subq.l	#1,a1
0001C158 2549 0004                  		move.l	a1,4(a2)
0001C15C 1011                       		move.b	(a1),d0
0001C15E 5200                       		addq.b	#1,d0		; change glass type when touched
0001C160 0C00 0030                  		cmpi.b	#$30,d0
0001C164 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001C166 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001C168                            
0001C168                            Obj09_GlassUpdate:
0001C168 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001C16C                            
0001C16C                            Obj09_GlassSnd:
0001C16C 303C 00BA                  		move.w	#$BA,d0
0001C170 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play glass block sound
0001C176                            ; ===========================================================================
0001C176                            
0001C176                            Obj09_NoGlass:
0001C176 4E75                       		rts	
0001C178                            ; End of function Obj09_ChkItems2
0001C178                            
0001C178                            ; ===========================================================================
0001C178                            ; ---------------------------------------------------------------------------
0001C178                            ; Object 10 - blank
0001C178                            ; ---------------------------------------------------------------------------
0001C178                            
0001C178                            Obj10:					; XREF: Obj_Index
0001C178 4E75                       		rts	
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A                            ; Subroutine to	animate	level graphics
0001C17A                            ; ---------------------------------------------------------------------------
0001C17A                            
0001C17A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C17A                            
0001C17A                            
0001C17A                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001C17A 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C17E 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001C180 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C186 6100 0000                  		bsr.w	AniArt_GiantRing
0001C18A 7000                       		moveq	#0,d0
0001C18C 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001C190 D040                       		add.w	d0,d0
0001C192 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001C196 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001C19A                            ; ===========================================================================
0001C19A                            
0001C19A                            AniArt_Pause:
0001C19A 4E75                       		rts	
0001C19C                            ; End of function AniArt_Load
0001C19C                            
0001C19C                            ; ===========================================================================
0001C19C 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001C1A0 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001C1A4 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001C1A8 0000                       		dc.w AniArt_Ending-AniArt_Index
0001C1AA                            ; ===========================================================================
0001C1AA                            ; ---------------------------------------------------------------------------
0001C1AA                            ; Animated pattern routine - Green Hill
0001C1AA                            ; ---------------------------------------------------------------------------
0001C1AA                            
0001C1AA                            AniArt_GHZ:				; XREF: AniArt_Index
0001C1AA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C1AE 6A00                       		bpl.s	loc_1C08A
0001C1B0 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001C1B6 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001C1BC 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C1C0 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C1C4 0240 0001                  		andi.w	#1,d0
0001C1C8 6700                       		beq.s	loc_1C078
0001C1CA 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001C1CE                            
0001C1CE                            loc_1C078:
0001C1CE 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001C1D8 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001C1DC 6000 0000                  		bra.w	LoadTiles
0001C1E0                            ; ===========================================================================
0001C1E0                            
0001C1E0                            loc_1C08A:
0001C1E0 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C1E4 6A00                       		bpl.s	loc_1C0C0
0001C1E6 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001C1EC 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C1F2 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C1F6 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C1FA 0240 0001                  		andi.w	#1,d0
0001C1FE 6700                       		beq.s	loc_1C0AE
0001C200 43E9 0200                  		lea	$200(a1),a1
0001C204                            
0001C204                            loc_1C0AE:
0001C204 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C20E 323C 000F                  		move.w	#$F,d1
0001C212 6000 0000                  		bra.w	LoadTiles
0001C216                            ; ===========================================================================
0001C216                            
0001C216                            loc_1C0C0:
0001C216 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C21A 6A00                       		bpl.s	locret_1C10C
0001C21C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C222 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C226 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C22A 0240 0003                  		andi.w	#3,d0
0001C22E 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001C232 0800 0000                  		btst	#0,d0
0001C236 6600                       		bne.s	loc_1C0E8
0001C238 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001C23E                            
0001C23E                            loc_1C0E8:
0001C23E EF48                       		lsl.w	#7,d0
0001C240 3200                       		move.w	d0,d1
0001C242 D040                       		add.w	d0,d0
0001C244 D041                       		add.w	d1,d0
0001C246 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C250 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C256 43F1 0000                  		lea	(a1,d0.w),a1
0001C25A 323C 000B                  		move.w	#$B,d1
0001C25E 6100 0000                  		bsr.w	LoadTiles
0001C262                            
0001C262                            locret_1C10C:
0001C262 4E75                       		rts	
0001C264                            ; ===========================================================================
0001C264 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C268                            ; ===========================================================================
0001C268                            ; ---------------------------------------------------------------------------
0001C268                            ; Animated pattern routine - Marble
0001C268                            ; ---------------------------------------------------------------------------
0001C268                            
0001C268                            AniArt_MZ:				; XREF: AniArt_Index
0001C268 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C26C 6A00                       		bpl.s	loc_1C150
0001C26E 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C274 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C27A 7000                       		moveq	#0,d0
0001C27C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C280 5200                       		addq.b	#1,d0
0001C282 0C00 0003                  		cmpi.b	#3,d0
0001C286 6600                       		bne.s	loc_1C134
0001C288 7000                       		moveq	#0,d0
0001C28A                            
0001C28A                            loc_1C134:
0001C28A 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C28E C0FC 0100                  		mulu.w	#$100,d0
0001C292 D2C0                       		adda.w	d0,a1
0001C294 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C29E 323C 0007                  		move.w	#7,d1
0001C2A2 6100 0000                  		bsr.w	LoadTiles
0001C2A6                            
0001C2A6                            loc_1C150:
0001C2A6 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C2AA 6A00                       		bpl.s	loc_1C1AE
0001C2AC 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C2B2 7000                       		moveq	#0,d0
0001C2B4 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C2B8 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C2BE EE58                       		ror.w	#7,d0
0001C2C0 D8C0                       		adda.w	d0,a4
0001C2C2 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C2CC 7600                       		moveq	#0,d3
0001C2CE 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C2D2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C2D6 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C2DA 343C 0003                  		move.w	#3,d2
0001C2DE                            
0001C2DE                            loc_1C188:
0001C2DE 3003                       		move.w	d3,d0
0001C2E0 D040                       		add.w	d0,d0
0001C2E2 0240 001E                  		andi.w	#$1E,d0
0001C2E6 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C2EC 3033 0000                  		move.w	(a3,d0.w),d0
0001C2F0 47F3 0000                  		lea	(a3,d0.w),a3
0001C2F4 224C                       		movea.l	a4,a1
0001C2F6 323C 001F                  		move.w	#$1F,d1
0001C2FA 4E93                       		jsr	(a3)
0001C2FC 5843                       		addq.w	#4,d3
0001C2FE 51CA FFDE                  		dbf	d2,loc_1C188
0001C302 4E75                       		rts	
0001C304                            ; ===========================================================================
0001C304                            
0001C304                            loc_1C1AE:
0001C304 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C308 6A00 0000                  		bpl.w	locret_1C1EA
0001C30C 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C312 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C318 7000                       		moveq	#0,d0
0001C31A 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C31E 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C322 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C328 C0FC 00C0                  		mulu.w	#$C0,d0
0001C32C D2C0                       		adda.w	d0,a1
0001C32E 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C338 323C 0005                  		move.w	#5,d1
0001C33C 6000 0000                  		bra.w	LoadTiles
0001C340                            ; ===========================================================================
0001C340                            
0001C340                            locret_1C1EA:
0001C340 4E75                       		rts	
0001C342                            ; ===========================================================================
0001C342                            ; ---------------------------------------------------------------------------
0001C342                            ; Animated pattern routine - Scrap Brain
0001C342                            ; ---------------------------------------------------------------------------
0001C342                            
0001C342                            AniArt_SBZ:				; XREF: AniArt_Index
0001C342 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C346 6700                       		beq.s	loc_1C1F8
0001C348 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C34C 6000                       		bra.s	loc_1C250
0001C34E                            ; ===========================================================================
0001C34E                            
0001C34E                            loc_1C1F8:
0001C34E 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C352 6A00                       		bpl.s	loc_1C250
0001C354 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C35A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C360 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C36A 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C36E 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C372 0240 0007                  		andi.w	#7,d0
0001C376 6700                       		beq.s	loc_1C234
0001C378 5340                       		subq.w	#1,d0
0001C37A C0FC 0180                  		mulu.w	#$180,d0
0001C37E 43F1 0000                  		lea	(a1,d0.w),a1
0001C382 323C 000B                  		move.w	#$B,d1
0001C386 6000 0000                  		bra.w	LoadTiles
0001C38A                            ; ===========================================================================
0001C38A                            
0001C38A                            loc_1C234:
0001C38A 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C390                            
0001C390                            loc_1C23A:
0001C390 323C 0005                  		move.w	#5,d1
0001C394 6100 0000                  		bsr.w	LoadTiles
0001C398 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C39E 323C 0005                  		move.w	#5,d1
0001C3A2 6000 0000                  		bra.w	LoadTiles
0001C3A6                            ; ===========================================================================
0001C3A6                            
0001C3A6                            loc_1C250:
0001C3A6 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C3AA 6700                       		beq.s	loc_1C25C
0001C3AC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C3B0 6000                       		bra.s	locret_1C2A0
0001C3B2                            ; ===========================================================================
0001C3B2                            
0001C3B2                            loc_1C25C:
0001C3B2 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C3B6 6A00                       		bpl.s	locret_1C2A0
0001C3B8 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C3BE 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C3C4 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C3CE 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C3D2 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C3D6 0240 0007                  		andi.w	#7,d0
0001C3DA 6700                       		beq.s	loc_1C298
0001C3DC 5340                       		subq.w	#1,d0
0001C3DE C0FC 0180                  		mulu.w	#$180,d0
0001C3E2 43F1 0000                  		lea	(a1,d0.w),a1
0001C3E6 323C 000B                  		move.w	#$B,d1
0001C3EA 6000 0000                  		bra.w	LoadTiles
0001C3EE                            ; ===========================================================================
0001C3EE                            
0001C3EE                            loc_1C298:
0001C3EE 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C3F4 609A                       		bra.s	loc_1C23A
0001C3F6                            ; ===========================================================================
0001C3F6                            
0001C3F6                            locret_1C2A0:
0001C3F6 4E75                       		rts	
0001C3F8                            ; ===========================================================================
0001C3F8                            ; ---------------------------------------------------------------------------
0001C3F8                            ; Animated pattern routine - ending sequence
0001C3F8                            ; ---------------------------------------------------------------------------
0001C3F8                            
0001C3F8                            AniArt_Ending:				; XREF: AniArt_Index
0001C3F8 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C3FC 6A00                       		bpl.s	loc_1C2F4
0001C3FE 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C404 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C40A 45F8 9400                  		lea	($FFFF9400).w,a2
0001C40E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C412 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C416 0240 0001                  		andi.w	#1,d0
0001C41A 6700                       		beq.s	loc_1C2CE
0001C41C 43E9 0200                  		lea	$200(a1),a1
0001C420 45EA 0200                  		lea	$200(a2),a2
0001C424                            
0001C424                            loc_1C2CE:
0001C424 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C42E 323C 000F                  		move.w	#$F,d1
0001C432 6100 0000                  		bsr.w	LoadTiles
0001C436 224A                       		movea.l	a2,a1
0001C438 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C442 323C 000F                  		move.w	#$F,d1
0001C446 6000 0000                  		bra.w	LoadTiles
0001C44A                            ; ===========================================================================
0001C44A                            
0001C44A                            loc_1C2F4:
0001C44A 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C44E 6A00                       		bpl.s	loc_1C33C
0001C450 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C456 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C45A 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C45E 0240 0007                  		andi.w	#7,d0
0001C462 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C466 EF48                       		lsl.w	#7,d0
0001C468 3200                       		move.w	d0,d1
0001C46A D040                       		add.w	d0,d0
0001C46C D041                       		add.w	d1,d0
0001C46E 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C478 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C47E 43F1 0000                  		lea	(a1,d0.w),a1
0001C482 323C 000B                  		move.w	#$B,d1
0001C486 6000 0000                  		bra.w	LoadTiles
0001C48A                            ; ===========================================================================
0001C48A 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C492                            ; ===========================================================================
0001C492                            
0001C492                            loc_1C33C:
0001C492 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C496 6A00                       		bpl.s	loc_1C37A
0001C498 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C49E 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C4A2 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C4A6 0240 0003                  		andi.w	#3,d0
0001C4AA 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C4AE E148                       		lsl.w	#8,d0
0001C4B0 D040                       		add.w	d0,d0
0001C4B2 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C4BC 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C4C0 43F1 0000                  		lea	(a1,d0.w),a1
0001C4C4 323C 000F                  		move.w	#$F,d1
0001C4C8 6000 0000                  		bra.w	LoadTiles
0001C4CC                            ; ===========================================================================
0001C4CC 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C4D0                            ; ===========================================================================
0001C4D0                            
0001C4D0                            loc_1C37A:
0001C4D0 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C4D4 6A00                       		bpl.s	locret_1C3B4
0001C4D6 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C4DC 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C4E0 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C4E4 0240 0003                  		andi.w	#3,d0
0001C4E8 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C4EC E148                       		lsl.w	#8,d0
0001C4EE D040                       		add.w	d0,d0
0001C4F0 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C4FA 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C4FE 43F1 0000                  		lea	(a1,d0.w),a1
0001C502 323C 000F                  		move.w	#$F,d1
0001C506 6000 0000                  		bra.w	LoadTiles
0001C50A                            ; ===========================================================================
0001C50A                            
0001C50A                            locret_1C3B4:
0001C50A 4E75                       		rts	
0001C50C                            ; ===========================================================================
0001C50C                            
0001C50C                            AniArt_none:				; XREF: AniArt_Index
0001C50C 4E75                       		rts	
0001C50E                            
0001C50E                            ; ---------------------------------------------------------------------------
0001C50E                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C50E                            ; ---------------------------------------------------------------------------
0001C50E                            
0001C50E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C50E                            
0001C50E                            
0001C50E                            LoadTiles:
0001C50E 2C99                       		move.l	(a1)+,(a6)
0001C510 2C99                       		move.l	(a1)+,(a6)
0001C512 2C99                       		move.l	(a1)+,(a6)
0001C514 2C99                       		move.l	(a1)+,(a6)
0001C516 2C99                       		move.l	(a1)+,(a6)
0001C518 2C99                       		move.l	(a1)+,(a6)
0001C51A 2C99                       		move.l	(a1)+,(a6)
0001C51C 2C99                       		move.l	(a1)+,(a6)
0001C51E 51C9 FFEE                  		dbf	d1,LoadTiles
0001C522 4E75                       		rts	
0001C524                            ; End of function LoadTiles
0001C524                            
0001C524                            ; ===========================================================================
0001C524                            ; ---------------------------------------------------------------------------
0001C524                            ; Animated pattern routine - more Marble Zone
0001C524                            ; ---------------------------------------------------------------------------
0001C524 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C528 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C52C 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C530 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C534 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C538 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C53C 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C540 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C544                            ; ===========================================================================
0001C544                            
0001C544                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C544 2C91                       		move.l	(a1),(a6)
0001C546 43E9 0010                  		lea	$10(a1),a1
0001C54A 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C54E 4E75                       		rts	
0001C550                            ; ===========================================================================
0001C550                            
0001C550                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C550 2029 0002                  		move.l	2(a1),d0
0001C554 1029 0001                  		move.b	1(a1),d0
0001C558 E098                       		ror.l	#8,d0
0001C55A 2C80                       		move.l	d0,(a6)
0001C55C 43E9 0010                  		lea	$10(a1),a1
0001C560 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C564 4E75                       		rts	
0001C566                            ; ===========================================================================
0001C566                            
0001C566                            loc_1C410:				; XREF: AniArt_MZextra
0001C566 2CA9 0002                  		move.l	2(a1),(a6)
0001C56A 43E9 0010                  		lea	$10(a1),a1
0001C56E 51C9 FFF6                  		dbf	d1,loc_1C410
0001C572 4E75                       		rts	
0001C574                            ; ===========================================================================
0001C574                            
0001C574                            loc_1C41E:				; XREF: AniArt_MZextra
0001C574 2029 0004                  		move.l	4(a1),d0
0001C578 1029 0003                  		move.b	3(a1),d0
0001C57C E098                       		ror.l	#8,d0
0001C57E 2C80                       		move.l	d0,(a6)
0001C580 43E9 0010                  		lea	$10(a1),a1
0001C584 51C9 FFEE                  		dbf	d1,loc_1C41E
0001C588 4E75                       		rts	
0001C58A                            ; ===========================================================================
0001C58A                            
0001C58A                            loc_1C434:				; XREF: AniArt_MZextra
0001C58A 2CA9 0004                  		move.l	4(a1),(a6)
0001C58E 43E9 0010                  		lea	$10(a1),a1
0001C592 51C9 FFF6                  		dbf	d1,loc_1C434
0001C596 4E75                       		rts	
0001C598                            ; ===========================================================================
0001C598                            
0001C598                            loc_1C442:				; XREF: AniArt_MZextra
0001C598 2029 0006                  		move.l	6(a1),d0
0001C59C 1029 0005                  		move.b	5(a1),d0
0001C5A0 E098                       		ror.l	#8,d0
0001C5A2 2C80                       		move.l	d0,(a6)
0001C5A4 43E9 0010                  		lea	$10(a1),a1
0001C5A8 51C9 FFEE                  		dbf	d1,loc_1C442
0001C5AC 4E75                       		rts	
0001C5AE                            ; ===========================================================================
0001C5AE                            
0001C5AE                            loc_1C458:				; XREF: AniArt_MZextra
0001C5AE 2CA9 0006                  		move.l	6(a1),(a6)
0001C5B2 43E9 0010                  		lea	$10(a1),a1
0001C5B6 51C9 FFF6                  		dbf	d1,loc_1C458
0001C5BA 4E75                       		rts	
0001C5BC                            ; ===========================================================================
0001C5BC                            
0001C5BC                            loc_1C466:				; XREF: AniArt_MZextra
0001C5BC 2029 0008                  		move.l	8(a1),d0
0001C5C0 1029 0007                  		move.b	7(a1),d0
0001C5C4 E098                       		ror.l	#8,d0
0001C5C6 2C80                       		move.l	d0,(a6)
0001C5C8 43E9 0010                  		lea	$10(a1),a1
0001C5CC 51C9 FFEE                  		dbf	d1,loc_1C466
0001C5D0 4E75                       		rts	
0001C5D2                            ; ===========================================================================
0001C5D2                            
0001C5D2                            loc_1C47C:				; XREF: AniArt_MZextra
0001C5D2 2CA9 0008                  		move.l	8(a1),(a6)
0001C5D6 43E9 0010                  		lea	$10(a1),a1
0001C5DA 51C9 FFF6                  		dbf	d1,loc_1C47C
0001C5DE 4E75                       		rts	
0001C5E0                            ; ===========================================================================
0001C5E0                            
0001C5E0                            loc_1C48A:				; XREF: AniArt_MZextra
0001C5E0 2029 000A                  		move.l	$A(a1),d0
0001C5E4 1029 0009                  		move.b	9(a1),d0
0001C5E8 E098                       		ror.l	#8,d0
0001C5EA 2C80                       		move.l	d0,(a6)
0001C5EC 43E9 0010                  		lea	$10(a1),a1
0001C5F0 51C9 FFEE                  		dbf	d1,loc_1C48A
0001C5F4 4E75                       		rts	
0001C5F6                            ; ===========================================================================
0001C5F6                            
0001C5F6                            loc_1C4A0:				; XREF: AniArt_MZextra
0001C5F6 2CA9 000A                  		move.l	$A(a1),(a6)
0001C5FA 43E9 0010                  		lea	$10(a1),a1
0001C5FE 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001C602 4E75                       		rts	
0001C604                            ; ===========================================================================
0001C604                            
0001C604                            loc_1C4AE:				; XREF: AniArt_MZextra
0001C604 2029 000C                  		move.l	$C(a1),d0
0001C608 1029 000B                  		move.b	$B(a1),d0
0001C60C E098                       		ror.l	#8,d0
0001C60E 2C80                       		move.l	d0,(a6)
0001C610 43E9 0010                  		lea	$10(a1),a1
0001C614 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001C618 4E75                       		rts	
0001C61A                            ; ===========================================================================
0001C61A                            
0001C61A                            loc_1C4C4:				; XREF: AniArt_MZextra
0001C61A 2CA9 000C                  		move.l	$C(a1),(a6)
0001C61E 43E9 0010                  		lea	$10(a1),a1
0001C622 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001C626 4E75                       		rts	
0001C628                            ; ===========================================================================
0001C628                            
0001C628                            loc_1C4D2:				; XREF: AniArt_MZextra
0001C628 2029 000C                  		move.l	$C(a1),d0
0001C62C E198                       		rol.l	#8,d0
0001C62E 1011                       		move.b	0(a1),d0
0001C630 2C80                       		move.l	d0,(a6)
0001C632 43E9 0010                  		lea	$10(a1),a1
0001C636 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001C63A 4E75                       		rts	
0001C63C                            ; ===========================================================================
0001C63C                            
0001C63C                            loc_1C4E8:				; XREF: AniArt_MZextra
0001C63C 3CA9 000E                  		move.w	$E(a1),(a6)
0001C640 3C91                       		move.w	0(a1),(a6)
0001C642 43E9 0010                  		lea	$10(a1),a1
0001C646 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001C64A 4E75                       		rts	
0001C64C                            ; ===========================================================================
0001C64C                            
0001C64C                            loc_1C4FA:				; XREF: AniArt_MZextra
0001C64C 2011                       		move.l	0(a1),d0
0001C64E 1029 000F                  		move.b	$F(a1),d0
0001C652 E098                       		ror.l	#8,d0
0001C654 2C80                       		move.l	d0,(a6)
0001C656 43E9 0010                  		lea	$10(a1),a1
0001C65A 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001C65E 4E75                       		rts	
0001C660                            
0001C660                            ; ---------------------------------------------------------------------------
0001C660                            ; Animated pattern routine - giant ring
0001C660                            ; ---------------------------------------------------------------------------
0001C660                            
0001C660                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C660                            
0001C660                            
0001C660                            AniArt_GiantRing:			; XREF: AniArt_Load
0001C660 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001C664 6600                       		bne.s	loc_1C518
0001C666 4E75                       		rts	
0001C668                            ; ===========================================================================
0001C668                            
0001C668                            loc_1C518:
0001C668 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001C66E 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001C674 7000                       		moveq	#0,d0
0001C676 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001C67A 43F1 0000                  		lea	(a1,d0.w),a1
0001C67E 0640 8000                  		addi.w	#$8000,d0
0001C682 E588                       		lsl.l	#2,d0
0001C684 E448                       		lsr.w	#2,d0
0001C686 0040 4000                  		ori.w	#$4000,d0
0001C68A 4840                       		swap	d0
0001C68C 2D40 0004                  		move.l	d0,4(a6)
0001C690 323C 000D                  		move.w	#$D,d1
0001C694 6000 FE78                  		bra.w	LoadTiles
0001C698                            ; End of function AniArt_GiantRing
0001C698                            
0001C698                            ; ===========================================================================
0001C698                            ; ---------------------------------------------------------------------------
0001C698                            ; Object 21 - SCORE, TIME, RINGS
0001C698                            ; ---------------------------------------------------------------------------
0001C698                            
0001C698                            Obj21:					; XREF: Obj_Index
0001C698 7000                       		moveq	#0,d0
0001C69A 1028 0024                  		move.b	$24(a0),d0
0001C69E 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001C6A2 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001C6A6                            ; ===========================================================================
0001C6A6 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001C6A8 0000                       		dc.w Obj21_Flash-Obj21_Index
0001C6AA                            ; ===========================================================================
0001C6AA                            
0001C6AA                            Obj21_Main:				; XREF: Obj21_Main
0001C6AA 5428 0024                  		addq.b	#2,$24(a0)
0001C6AE 317C 0090 0008             		move.w	#$90,8(a0)
0001C6B4 317C 0108 000A             		move.w	#$108,$A(a0)
0001C6BA 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001C6C2 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001C6C8 117C 0000 0001             		move.b	#0,1(a0)
0001C6CE 117C 0000 0018             		move.b	#0,$18(a0)
0001C6D4                            
0001C6D4                            Obj21_Flash:				; XREF: Obj21_Main
0001C6D4 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001C6D8 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001C6DA 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001C6DE 4EF9 0000 D77C             		jmp	DisplaySprite
0001C6E4                            ; ===========================================================================
0001C6E4                            
0001C6E4                            Obj21_Flash2:
0001C6E4 7000                       		moveq	#0,d0
0001C6E6 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001C6EC 6600                       		bne.s	Obj21_Display
0001C6EE 5240                       		addq.w	#1,d0		; make ring counter flash red
0001C6F0 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001C6F6 6600                       		bne.s	Obj21_Display	; if not, branch
0001C6F8 5440                       		addq.w	#2,d0		; make time counter flash red
0001C6FA                            
0001C6FA                            Obj21_Display:
0001C6FA 1140 001A                  		move.b	d0,$1A(a0)
0001C6FE 4EF9 0000 D77C             		jmp	DisplaySprite
0001C704                            ; ===========================================================================
0001C704                            ; ---------------------------------------------------------------------------
0001C704                            ; Sprite mappings - SCORE, TIME, RINGS
0001C704                            ; ---------------------------------------------------------------------------
0001C704                            Map_obj21:
0001C704                            	include "_maps\obj21.asm"
0001C704                            ; ---------------------------------------------------------------------------
0001C704                            ; Sprite mappings - SCORE, TIME, RINGS
0001C704                            ; ---------------------------------------------------------------------------
0001C704 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001C708 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001C70C 0A                         byte_1C5BC:	dc.b $A
0001C70D 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C712 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C717 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C71C 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C721 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C726 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C72B A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C730 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C735 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C73A 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C73F 00                         		dc.b 0
0001C740 0A                         byte_1C5F0:	dc.b $A
0001C741 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C746 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C74B 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C750 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C755 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C75A A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C75F A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C764 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C769 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C76E 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C773 00                         		dc.b 0
0001C774 0A                         byte_1C624:	dc.b $A
0001C775 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C77A 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C77F 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C784 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C789 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C78E A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C793 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C798 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C79D 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C7A2 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C7A7 00                         		dc.b 0
0001C7A8 0A                         byte_1C658:	dc.b $A
0001C7A9 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C7AE 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C7B3 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C7B8 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C7BD 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C7C2 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C7C7 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C7CC A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C7D1 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C7D6 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C7DC 00                         		even
0001C7DC 00                         		even
0001C7DC                            
0001C7DC                            ; ---------------------------------------------------------------------------
0001C7DC                            ; Add points subroutine
0001C7DC                            ; ---------------------------------------------------------------------------
0001C7DC                            
0001C7DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7DC                            
0001C7DC                            
0001C7DC                            AddPoints:
0001C7DC 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001C7E2 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001C7E6 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001C7EA D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001C7EC 223C 000F 423F             		move.l	#999999,d1
0001C7F2 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001C7F4 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001C7F8 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001C7FA 2481                       		move.l	d1,(a2)
0001C7FC                            
0001C7FC                            loc_1C6AC:
0001C7FC 2013                       		move.l	(a3),d0
0001C7FE B092                       		cmp.l	(a2),d0
0001C800 6500 0000                  		bcs.w	locret_1C6B6
0001C804 2480                       		move.l	d0,(a2)
0001C806                            
0001C806                            locret_1C6B6:
0001C806 4E75                       		rts	
0001C808                            ; End of function AddPoints
0001C808                            
0001C808                            ; ---------------------------------------------------------------------------
0001C808                            ; Subroutine to	update the HUD
0001C808                            ; ---------------------------------------------------------------------------
0001C808                            
0001C808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C808                            
0001C808                            
0001C808                            HudUpdate:
0001C808 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001C80C 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001C810 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001C814 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001C816 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001C81A 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001C820 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001C824 6100 0000                  		bsr.w	Hud_Score
0001C828                            
0001C828                            Hud_ChkRings:
0001C828 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C82C 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001C82E 6A00                       		bpl.s	loc_1C6E4
0001C830 6100 0000                  		bsr.w	Hud_LoadZero
0001C834                            
0001C834                            loc_1C6E4:
0001C834 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C838 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C83E 7200                       		moveq	#0,d1
0001C840 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C844 6100 0000                  		bsr.w	Hud_Rings
0001C848                            
0001C848                            Hud_ChkTime:
0001C848 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001C84C 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001C84E 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C852 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001C854 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001C858 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001C85E 6700                       		beq.s	TimeOver	; if yes, branch
0001C860 5221                       		addq.b	#1,-(a1)
0001C862 0C11 003C                  		cmpi.b	#60,(a1)
0001C866 6500                       		bcs.s	Hud_ChkLives
0001C868 12BC 0000                  		move.b	#0,(a1)
0001C86C 5221                       		addq.b	#1,-(a1)
0001C86E 0C11 003C                  		cmpi.b	#60,(a1)
0001C872 6500                       		bcs.s	loc_1C734
0001C874 12BC 0000                  		move.b	#0,(a1)
0001C878 5221                       		addq.b	#1,-(a1)
0001C87A 0C11 0009                  		cmpi.b	#9,(a1)
0001C87E 6500                       		bcs.s	loc_1C734
0001C880 12BC 0009                  		move.b	#9,(a1)
0001C884                            
0001C884                            loc_1C734:
0001C884 203C 5E40 0003             		move.l	#$5E400003,d0
0001C88A 7200                       		moveq	#0,d1
0001C88C 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001C890 6100 0000                  		bsr.w	Hud_Mins
0001C894 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001C89A 7200                       		moveq	#0,d1
0001C89C 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001C8A0 6100 0000                  		bsr.w	Hud_Secs
0001C8A4                            
0001C8A4                            Hud_ChkLives:
0001C8A4 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C8A8 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001C8AA 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C8AE 6100 0000                  		bsr.w	Hud_Lives
0001C8B2                            
0001C8B2                            Hud_ChkBonus:
0001C8B2 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001C8B6 6700                       		beq.s	Hud_End		; if not, branch
0001C8B8 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C8BC 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001C8C6 7200                       		moveq	#0,d1
0001C8C8 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C8CC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C8D0 7200                       		moveq	#0,d1
0001C8D2 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C8D6 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C8DA                            
0001C8DA                            Hud_End:
0001C8DA 4E75                       		rts	
0001C8DC                            ; ===========================================================================
0001C8DC                            
0001C8DC                            TimeOver:				; XREF: Hud_ChkTime
0001C8DC 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001C8E0 41F8 D000                  		lea	($FFFFD000).w,a0
0001C8E4 2448                       		movea.l	a0,a2
0001C8E6 6100 E90C                  		bsr.w	KillSonic
0001C8EA 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001C8F0 4E75                       		rts	
0001C8F2                            ; ===========================================================================
0001C8F2                            
0001C8F2                            HudDebug:				; XREF: HudUpdate
0001C8F2 6100 0000                  		bsr.w	HudDb_XY
0001C8F6 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C8FA 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001C8FC 6A00                       		bpl.s	HudDb_Rings
0001C8FE 6100 0000                  		bsr.w	Hud_LoadZero
0001C902                            
0001C902                            HudDb_Rings:
0001C902 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C906 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C90C 7200                       		moveq	#0,d1
0001C90E 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C912 6100 0000                  		bsr.w	Hud_Rings
0001C916                            
0001C916                            HudDb_ObjCount:
0001C916 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001C91C 7200                       		moveq	#0,d1
0001C91E 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001C922 6100 0000                  		bsr.w	Hud_Secs
0001C926 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C92A 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001C92C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C930 6100 0000                  		bsr.w	Hud_Lives
0001C934                            
0001C934                            HudDb_ChkBonus:
0001C934 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001C938 6700                       		beq.s	HudDb_End	; if not, branch
0001C93A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C93E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001C948 7200                       		moveq	#0,d1
0001C94A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C94E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C952 7200                       		moveq	#0,d1
0001C954 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C958 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C95C                            
0001C95C                            HudDb_End:
0001C95C 4E75                       		rts	
0001C95E                            ; End of function HudUpdate
0001C95E                            
0001C95E                            ; ---------------------------------------------------------------------------
0001C95E                            ; Subroutine to	load "0" on the	HUD
0001C95E                            ; ---------------------------------------------------------------------------
0001C95E                            
0001C95E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C95E                            
0001C95E                            
0001C95E                            Hud_LoadZero:				; XREF: HudUpdate
0001C95E 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001C968 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001C96C 343C 0002                  		move.w	#2,d2
0001C970 6000                       		bra.s	loc_1C83E
0001C972                            ; End of function Hud_LoadZero
0001C972                            
0001C972                            ; ---------------------------------------------------------------------------
0001C972                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001C972                            ; ---------------------------------------------------------------------------
0001C972                            
0001C972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C972                            
0001C972                            
0001C972                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001C972 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C978 6100 0000                  		bsr.w	Hud_Lives
0001C97C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001C986 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001C98A 343C 000E                  		move.w	#$E,d2
0001C98E                            
0001C98E                            loc_1C83E:				; XREF: Hud_LoadZero
0001C98E 43FA 0000                  		lea	Art_Hud(pc),a1
0001C992                            
0001C992                            loc_1C842:
0001C992 323C 000F                  		move.w	#$F,d1
0001C996 101A                       		move.b	(a2)+,d0
0001C998 6B00                       		bmi.s	loc_1C85E
0001C99A 4880                       		ext.w	d0
0001C99C EB48                       		lsl.w	#5,d0
0001C99E 47F1 0000                  		lea	(a1,d0.w),a3
0001C9A2                            
0001C9A2                            loc_1C852:
0001C9A2 2C9B                       		move.l	(a3)+,(a6)
0001C9A4 51C9 FFFC                  		dbf	d1,loc_1C852
0001C9A8                            
0001C9A8                            loc_1C858:
0001C9A8 51CA FFE8                  		dbf	d2,loc_1C842
0001C9AC                            
0001C9AC 4E75                       		rts	
0001C9AE                            ; ===========================================================================
0001C9AE                            
0001C9AE                            loc_1C85E:
0001C9AE 2CBC 0000 0000             		move.l	#0,(a6)
0001C9B4 51C9 FFF8                  		dbf	d1,loc_1C85E
0001C9B8                            
0001C9B8 60EE                       		bra.s	loc_1C858
0001C9BA                            ; End of function Hud_Base
0001C9BA                            
0001C9BA                            ; ===========================================================================
0001C9BA 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001C9C6 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001C9CA                            ; ---------------------------------------------------------------------------
0001C9CA                            ; Subroutine to	load debug mode	numbers	patterns
0001C9CA                            ; ---------------------------------------------------------------------------
0001C9CA                            
0001C9CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9CA                            
0001C9CA                            
0001C9CA                            HudDb_XY:				; XREF: HudDebug
0001C9CA 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001C9D4 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001C9D8 4841                       		swap	d1
0001C9DA 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001C9DE 6100                       		bsr.s	HudDb_XY2
0001C9E0 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001C9E4 4841                       		swap	d1
0001C9E6 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001C9EA                            ; End of function HudDb_XY
0001C9EA                            
0001C9EA                            
0001C9EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9EA                            
0001C9EA                            
0001C9EA                            HudDb_XY2:
0001C9EA 7C07                       		moveq	#7,d6
0001C9EC 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001C9F2                            
0001C9F2                            HudDb_XYLoop:
0001C9F2 E959                       		rol.w	#4,d1
0001C9F4 3401                       		move.w	d1,d2
0001C9F6 0242 000F                  		andi.w	#$F,d2
0001C9FA 0C42 000A                  		cmpi.w	#$A,d2
0001C9FE 6500                       		bcs.s	loc_1C8B2
0001CA00 5E42                       		addq.w	#7,d2
0001CA02                            
0001CA02                            loc_1C8B2:
0001CA02 EB4A                       		lsl.w	#5,d2
0001CA04 47F1 2000                  		lea	(a1,d2.w),a3
0001CA08 2C9B                       		move.l	(a3)+,(a6)
0001CA0A 2C9B                       		move.l	(a3)+,(a6)
0001CA0C 2C9B                       		move.l	(a3)+,(a6)
0001CA0E 2C9B                       		move.l	(a3)+,(a6)
0001CA10 2C9B                       		move.l	(a3)+,(a6)
0001CA12 2C9B                       		move.l	(a3)+,(a6)
0001CA14 2C9B                       		move.l	(a3)+,(a6)
0001CA16 2C9B                       		move.l	(a3)+,(a6)
0001CA18 4841                       		swap	d1
0001CA1A 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001CA1E                            
0001CA1E 4E75                       		rts	
0001CA20                            ; End of function HudDb_XY2
0001CA20                            
0001CA20                            ; ---------------------------------------------------------------------------
0001CA20                            ; Subroutine to	load rings numbers patterns
0001CA20                            ; ---------------------------------------------------------------------------
0001CA20                            
0001CA20                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA20                            
0001CA20                            
0001CA20                            Hud_Rings:				; XREF: HudUpdate
0001CA20 45F9 0000 0000             		lea	(Hud_100).l,a2
0001CA26 7C02                       		moveq	#2,d6
0001CA28 6000                       		bra.s	Hud_LoadArt
0001CA2A                            ; End of function Hud_Rings
0001CA2A                            
0001CA2A                            ; ---------------------------------------------------------------------------
0001CA2A                            ; Subroutine to	load score numbers patterns
0001CA2A                            ; ---------------------------------------------------------------------------
0001CA2A                            
0001CA2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA2A                            
0001CA2A                            
0001CA2A                            Hud_Score:				; XREF: HudUpdate
0001CA2A 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001CA30 7C05                       		moveq	#5,d6
0001CA32                            
0001CA32                            Hud_LoadArt:
0001CA32 7800                       		moveq	#0,d4
0001CA34 43FA 0000                  		lea	Art_Hud(pc),a1
0001CA38                            
0001CA38                            Hud_ScoreLoop:
0001CA38 7400                       		moveq	#0,d2
0001CA3A 261A                       		move.l	(a2)+,d3
0001CA3C                            
0001CA3C                            loc_1C8EC:
0001CA3C 9283                       		sub.l	d3,d1
0001CA3E 6500                       		bcs.s	loc_1C8F4
0001CA40 5242                       		addq.w	#1,d2
0001CA42 60F8                       		bra.s	loc_1C8EC
0001CA44                            ; ===========================================================================
0001CA44                            
0001CA44                            loc_1C8F4:
0001CA44 D283                       		add.l	d3,d1
0001CA46 4A42                       		tst.w	d2
0001CA48 6700                       		beq.s	loc_1C8FE
0001CA4A 383C 0001                  		move.w	#1,d4
0001CA4E                            
0001CA4E                            loc_1C8FE:
0001CA4E 4A44                       		tst.w	d4
0001CA50 6700                       		beq.s	loc_1C92C
0001CA52 ED4A                       		lsl.w	#6,d2
0001CA54 2D40 0004                  		move.l	d0,4(a6)
0001CA58 47F1 2000                  		lea	(a1,d2.w),a3
0001CA5C 2C9B                       		move.l	(a3)+,(a6)
0001CA5E 2C9B                       		move.l	(a3)+,(a6)
0001CA60 2C9B                       		move.l	(a3)+,(a6)
0001CA62 2C9B                       		move.l	(a3)+,(a6)
0001CA64 2C9B                       		move.l	(a3)+,(a6)
0001CA66 2C9B                       		move.l	(a3)+,(a6)
0001CA68 2C9B                       		move.l	(a3)+,(a6)
0001CA6A 2C9B                       		move.l	(a3)+,(a6)
0001CA6C 2C9B                       		move.l	(a3)+,(a6)
0001CA6E 2C9B                       		move.l	(a3)+,(a6)
0001CA70 2C9B                       		move.l	(a3)+,(a6)
0001CA72 2C9B                       		move.l	(a3)+,(a6)
0001CA74 2C9B                       		move.l	(a3)+,(a6)
0001CA76 2C9B                       		move.l	(a3)+,(a6)
0001CA78 2C9B                       		move.l	(a3)+,(a6)
0001CA7A 2C9B                       		move.l	(a3)+,(a6)
0001CA7C                            
0001CA7C                            loc_1C92C:
0001CA7C 0680 0040 0000             		addi.l	#$400000,d0
0001CA82 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001CA86                            
0001CA86 4E75                       		rts	
0001CA88                            ; End of function Hud_Score
0001CA88                            
0001CA88                            ; ---------------------------------------------------------------------------
0001CA88                            ; Subroutine to	load countdown numbers on the continue screen
0001CA88                            ; ---------------------------------------------------------------------------
0001CA88                            
0001CA88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CA88                            
0001CA88                            
0001CA88                            ContScrCounter:				; XREF: ContinueScreen
0001CA88 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001CA92 4DF9 00C0 0000             		lea	($C00000).l,a6
0001CA98 45F9 0000 0000             		lea	(Hud_10).l,a2
0001CA9E 7C01                       		moveq	#1,d6
0001CAA0 7800                       		moveq	#0,d4
0001CAA2 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001CAA6                            
0001CAA6                            ContScr_Loop:
0001CAA6 7400                       		moveq	#0,d2
0001CAA8 261A                       		move.l	(a2)+,d3
0001CAAA                            
0001CAAA                            loc_1C95A:
0001CAAA 9283                       		sub.l	d3,d1
0001CAAC 6500                       		bcs.s	loc_1C962
0001CAAE 5242                       		addq.w	#1,d2
0001CAB0 60F8                       		bra.s	loc_1C95A
0001CAB2                            ; ===========================================================================
0001CAB2                            
0001CAB2                            loc_1C962:
0001CAB2 D283                       		add.l	d3,d1
0001CAB4 ED4A                       		lsl.w	#6,d2
0001CAB6 47F1 2000                  		lea	(a1,d2.w),a3
0001CABA 2C9B                       		move.l	(a3)+,(a6)
0001CABC 2C9B                       		move.l	(a3)+,(a6)
0001CABE 2C9B                       		move.l	(a3)+,(a6)
0001CAC0 2C9B                       		move.l	(a3)+,(a6)
0001CAC2 2C9B                       		move.l	(a3)+,(a6)
0001CAC4 2C9B                       		move.l	(a3)+,(a6)
0001CAC6 2C9B                       		move.l	(a3)+,(a6)
0001CAC8 2C9B                       		move.l	(a3)+,(a6)
0001CACA 2C9B                       		move.l	(a3)+,(a6)
0001CACC 2C9B                       		move.l	(a3)+,(a6)
0001CACE 2C9B                       		move.l	(a3)+,(a6)
0001CAD0 2C9B                       		move.l	(a3)+,(a6)
0001CAD2 2C9B                       		move.l	(a3)+,(a6)
0001CAD4 2C9B                       		move.l	(a3)+,(a6)
0001CAD6 2C9B                       		move.l	(a3)+,(a6)
0001CAD8 2C9B                       		move.l	(a3)+,(a6)
0001CADA 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001CADE                            
0001CADE 4E75                       		rts	
0001CAE0                            ; End of function ContScrCounter
0001CAE0                            
0001CAE0                            ; ===========================================================================
0001CAE0                            ; ---------------------------------------------------------------------------
0001CAE0                            ; HUD counter sizes
0001CAE0                            ; ---------------------------------------------------------------------------
0001CAE0 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001CAE4 0000 2710                  Hud_10000:	dc.l 10000
0001CAE8 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001CAEC 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001CAF0 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001CAF4 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001CAF8                            
0001CAF8                            ; ---------------------------------------------------------------------------
0001CAF8                            ; Subroutine to	load time numbers patterns
0001CAF8                            ; ---------------------------------------------------------------------------
0001CAF8                            
0001CAF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CAF8                            
0001CAF8                            
0001CAF8                            Hud_Mins:				; XREF: Hud_ChkTime
0001CAF8 45F9 0001 CAF4             		lea	(Hud_1).l,a2
0001CAFE 7C00                       		moveq	#0,d6
0001CB00 6000                       		bra.s	loc_1C9BA
0001CB02                            ; End of function Hud_Mins
0001CB02                            
0001CB02                            
0001CB02                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB02                            
0001CB02                            
0001CB02                            Hud_Secs:				; XREF: Hud_ChkTime
0001CB02 45F9 0001 CAF0             		lea	(Hud_10).l,a2
0001CB08 7C01                       		moveq	#1,d6
0001CB0A                            
0001CB0A                            loc_1C9BA:
0001CB0A 7800                       		moveq	#0,d4
0001CB0C 43FA 0000                  		lea	Art_Hud(pc),a1
0001CB10                            
0001CB10                            Hud_TimeLoop:
0001CB10 7400                       		moveq	#0,d2
0001CB12 261A                       		move.l	(a2)+,d3
0001CB14                            
0001CB14                            loc_1C9C4:
0001CB14 9283                       		sub.l	d3,d1
0001CB16 6500                       		bcs.s	loc_1C9CC
0001CB18 5242                       		addq.w	#1,d2
0001CB1A 60F8                       		bra.s	loc_1C9C4
0001CB1C                            ; ===========================================================================
0001CB1C                            
0001CB1C                            loc_1C9CC:
0001CB1C D283                       		add.l	d3,d1
0001CB1E 4A42                       		tst.w	d2
0001CB20 6700                       		beq.s	loc_1C9D6
0001CB22 383C 0001                  		move.w	#1,d4
0001CB26                            
0001CB26                            loc_1C9D6:
0001CB26 ED4A                       		lsl.w	#6,d2
0001CB28 2D40 0004                  		move.l	d0,4(a6)
0001CB2C 47F1 2000                  		lea	(a1,d2.w),a3
0001CB30 2C9B                       		move.l	(a3)+,(a6)
0001CB32 2C9B                       		move.l	(a3)+,(a6)
0001CB34 2C9B                       		move.l	(a3)+,(a6)
0001CB36 2C9B                       		move.l	(a3)+,(a6)
0001CB38 2C9B                       		move.l	(a3)+,(a6)
0001CB3A 2C9B                       		move.l	(a3)+,(a6)
0001CB3C 2C9B                       		move.l	(a3)+,(a6)
0001CB3E 2C9B                       		move.l	(a3)+,(a6)
0001CB40 2C9B                       		move.l	(a3)+,(a6)
0001CB42 2C9B                       		move.l	(a3)+,(a6)
0001CB44 2C9B                       		move.l	(a3)+,(a6)
0001CB46 2C9B                       		move.l	(a3)+,(a6)
0001CB48 2C9B                       		move.l	(a3)+,(a6)
0001CB4A 2C9B                       		move.l	(a3)+,(a6)
0001CB4C 2C9B                       		move.l	(a3)+,(a6)
0001CB4E 2C9B                       		move.l	(a3)+,(a6)
0001CB50 0680 0040 0000             		addi.l	#$400000,d0
0001CB56 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001CB5A                            
0001CB5A 4E75                       		rts	
0001CB5C                            ; End of function Hud_Secs
0001CB5C                            
0001CB5C                            ; ---------------------------------------------------------------------------
0001CB5C                            ; Subroutine to	load time/ring bonus numbers patterns
0001CB5C                            ; ---------------------------------------------------------------------------
0001CB5C                            
0001CB5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB5C                            
0001CB5C                            
0001CB5C                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001CB5C 45F9 0001 CAE8             		lea	(Hud_1000).l,a2
0001CB62 7C03                       		moveq	#3,d6
0001CB64 7800                       		moveq	#0,d4
0001CB66 43FA 0000                  		lea	Art_Hud(pc),a1
0001CB6A                            
0001CB6A                            Hud_BonusLoop:
0001CB6A 7400                       		moveq	#0,d2
0001CB6C 261A                       		move.l	(a2)+,d3
0001CB6E                            
0001CB6E                            loc_1CA1E:
0001CB6E 9283                       		sub.l	d3,d1
0001CB70 6500                       		bcs.s	loc_1CA26
0001CB72 5242                       		addq.w	#1,d2
0001CB74 60F8                       		bra.s	loc_1CA1E
0001CB76                            ; ===========================================================================
0001CB76                            
0001CB76                            loc_1CA26:
0001CB76 D283                       		add.l	d3,d1
0001CB78 4A42                       		tst.w	d2
0001CB7A 6700                       		beq.s	loc_1CA30
0001CB7C 383C 0001                  		move.w	#1,d4
0001CB80                            
0001CB80                            loc_1CA30:
0001CB80 4A44                       		tst.w	d4
0001CB82 6700                       		beq.s	Hud_ClrBonus
0001CB84 ED4A                       		lsl.w	#6,d2
0001CB86 47F1 2000                  		lea	(a1,d2.w),a3
0001CB8A 2C9B                       		move.l	(a3)+,(a6)
0001CB8C 2C9B                       		move.l	(a3)+,(a6)
0001CB8E 2C9B                       		move.l	(a3)+,(a6)
0001CB90 2C9B                       		move.l	(a3)+,(a6)
0001CB92 2C9B                       		move.l	(a3)+,(a6)
0001CB94 2C9B                       		move.l	(a3)+,(a6)
0001CB96 2C9B                       		move.l	(a3)+,(a6)
0001CB98 2C9B                       		move.l	(a3)+,(a6)
0001CB9A 2C9B                       		move.l	(a3)+,(a6)
0001CB9C 2C9B                       		move.l	(a3)+,(a6)
0001CB9E 2C9B                       		move.l	(a3)+,(a6)
0001CBA0 2C9B                       		move.l	(a3)+,(a6)
0001CBA2 2C9B                       		move.l	(a3)+,(a6)
0001CBA4 2C9B                       		move.l	(a3)+,(a6)
0001CBA6 2C9B                       		move.l	(a3)+,(a6)
0001CBA8 2C9B                       		move.l	(a3)+,(a6)
0001CBAA                            
0001CBAA                            loc_1CA5A:
0001CBAA 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001CBAE                            
0001CBAE 4E75                       		rts	
0001CBB0                            ; ===========================================================================
0001CBB0                            
0001CBB0                            Hud_ClrBonus:
0001CBB0 7A0F                       		moveq	#$F,d5
0001CBB2                            
0001CBB2                            Hud_ClrBonusLoop:
0001CBB2 2CBC 0000 0000             		move.l	#0,(a6)
0001CBB8 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001CBBC                            
0001CBBC 60EC                       		bra.s	loc_1CA5A
0001CBBE                            ; End of function Hud_TimeRingBonus
0001CBBE                            
0001CBBE                            ; ---------------------------------------------------------------------------
0001CBBE                            ; Subroutine to	load uncompressed lives	counter	patterns
0001CBBE                            ; ---------------------------------------------------------------------------
0001CBBE                            
0001CBBE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CBBE                            
0001CBBE                            
0001CBBE                            Hud_Lives:				; XREF: Hud_ChkLives
0001CBBE 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001CBC4 7200                       		moveq	#0,d1
0001CBC6 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001CBCA 45F9 0001 CAF0             		lea	(Hud_10).l,a2
0001CBD0 7C01                       		moveq	#1,d6
0001CBD2 7800                       		moveq	#0,d4
0001CBD4 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001CBD8                            
0001CBD8                            Hud_LivesLoop:
0001CBD8 2D40 0004                  		move.l	d0,4(a6)
0001CBDC 7400                       		moveq	#0,d2
0001CBDE 261A                       		move.l	(a2)+,d3
0001CBE0                            
0001CBE0                            loc_1CA90:
0001CBE0 9283                       		sub.l	d3,d1
0001CBE2 6500                       		bcs.s	loc_1CA98
0001CBE4 5242                       		addq.w	#1,d2
0001CBE6 60F8                       		bra.s	loc_1CA90
0001CBE8                            ; ===========================================================================
0001CBE8                            
0001CBE8                            loc_1CA98:
0001CBE8 D283                       		add.l	d3,d1
0001CBEA 4A42                       		tst.w	d2
0001CBEC 6700                       		beq.s	loc_1CAA2
0001CBEE 383C 0001                  		move.w	#1,d4
0001CBF2                            
0001CBF2                            loc_1CAA2:
0001CBF2 4A44                       		tst.w	d4
0001CBF4 6700                       		beq.s	Hud_ClrLives
0001CBF6                            
0001CBF6                            loc_1CAA6:
0001CBF6 EB4A                       		lsl.w	#5,d2
0001CBF8 47F1 2000                  		lea	(a1,d2.w),a3
0001CBFC 2C9B                       		move.l	(a3)+,(a6)
0001CBFE 2C9B                       		move.l	(a3)+,(a6)
0001CC00 2C9B                       		move.l	(a3)+,(a6)
0001CC02 2C9B                       		move.l	(a3)+,(a6)
0001CC04 2C9B                       		move.l	(a3)+,(a6)
0001CC06 2C9B                       		move.l	(a3)+,(a6)
0001CC08 2C9B                       		move.l	(a3)+,(a6)
0001CC0A 2C9B                       		move.l	(a3)+,(a6)
0001CC0C                            
0001CC0C                            loc_1CABC:
0001CC0C 0680 0040 0000             		addi.l	#$400000,d0
0001CC12 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001CC16                            
0001CC16 4E75                       		rts	
0001CC18                            ; ===========================================================================
0001CC18                            
0001CC18                            Hud_ClrLives:
0001CC18 4A46                       		tst.w	d6
0001CC1A 67DA                       		beq.s	loc_1CAA6
0001CC1C 7A07                       		moveq	#7,d5
0001CC1E                            
0001CC1E                            Hud_ClrLivesLoop:
0001CC1E 2CBC 0000 0000             		move.l	#0,(a6)
0001CC24 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001CC28 60E2                       		bra.s	loc_1CABC
0001CC2A                            ; End of function Hud_Lives
0001CC2A                            
0001CC2A                            ; ===========================================================================
0001CC2A                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001CF2A                            		even
0001CF2A                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001D06A                            		even
0001D06A                            ; ===========================================================================
0001D06A                            ; ---------------------------------------------------------------------------
0001D06A                            ; When debug mode is currently in use
0001D06A                            ; ---------------------------------------------------------------------------
0001D06A                            
0001D06A                            DebugMode:				; XREF: Obj01; Obj09
0001D06A 7000                       		moveq	#0,d0
0001D06C 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001D070 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001D074 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001D078                            ; ===========================================================================
0001D078 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001D07A 0000                       		dc.w Debug_Skip-Debug_Index
0001D07C                            ; ===========================================================================
0001D07C                            
0001D07C                            Debug_Main:				; XREF: Debug_Index
0001D07C 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001D080 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001D086 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001D08C 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001D092 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001D098 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001D09E 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001D0A4 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001D0AA 117C 0000 001A             		move.b	#0,$1A(a0)
0001D0B0 117C 0000 001C             		move.b	#0,$1C(a0)
0001D0B6 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001D0BC 6600                       		bne.s	Debug_Zone	; if not, branch
0001D0BE 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001D0C4 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001D0CA 7006                       		moveq	#6,d0		; use 6th debug	item list
0001D0CC 6000                       		bra.s	Debug_UseList
0001D0CE                            ; ===========================================================================
0001D0CE                            
0001D0CE                            Debug_Zone:
0001D0CE 7000                       		moveq	#0,d0
0001D0D0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D0D4                            
0001D0D4                            Debug_UseList:
0001D0D4 45F9 0000 0000             		lea	(DebugList).l,a2
0001D0DA D040                       		add.w	d0,d0
0001D0DC D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D0E0 3C1A                       		move.w	(a2)+,d6
0001D0E2 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D0E6 6200                       		bhi.s	loc_1CF9E
0001D0E8 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001D0EE                            
0001D0EE                            loc_1CF9E:
0001D0EE 6100 0000                  		bsr.w	Debug_ShowItem
0001D0F2 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D0F8 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001D0FE                            
0001D0FE                            Debug_Skip:				; XREF: Debug_Index
0001D0FE 7006                       		moveq	#6,d0
0001D100 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001D106 6700                       		beq.s	loc_1CFBE
0001D108 7000                       		moveq	#0,d0
0001D10A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D10E                            
0001D10E                            loc_1CFBE:
0001D10E 45F9 0000 0000             		lea	(DebugList).l,a2
0001D114 D040                       		add.w	d0,d0
0001D116 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001D11A 3C1A                       		move.w	(a2)+,d6
0001D11C 6100 0000                  		bsr.w	Debug_Control
0001D120 4EF9 0000 D77C             		jmp	DisplaySprite
0001D126                            
0001D126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D126                            
0001D126                            
0001D126                            Debug_Control:
0001D126 7800                       		moveq	#0,d4
0001D128 323C 0001                  		move.w	#1,d1
0001D12C 1838 F605                  		move.b	($FFFFF605).w,d4
0001D130 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001D134 6600                       		bne.s	loc_1D018	; if yes, branch
0001D136 1038 F604                  		move.b	($FFFFF604).w,d0
0001D13A 0240 000F                  		andi.w	#$F,d0
0001D13E 6600                       		bne.s	loc_1D000
0001D140 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001D146 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001D14C 6000 0000                  		bra.w	Debug_BackItem
0001D150                            ; ===========================================================================
0001D150                            
0001D150                            loc_1D000:
0001D150 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001D154 6600                       		bne.s	loc_1D01C
0001D156 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001D15C 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001D160 6600                       		bne.s	loc_1D018
0001D162 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001D168                            
0001D168                            loc_1D018:
0001D168 1838 F604                  		move.b	($FFFFF604).w,d4
0001D16C                            
0001D16C                            loc_1D01C:
0001D16C 7200                       		moveq	#0,d1
0001D16E 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001D172 5241                       		addq.w	#1,d1
0001D174 4841                       		swap	d1
0001D176 E881                       		asr.l	#4,d1
0001D178 2428 000C                  		move.l	$C(a0),d2
0001D17C 2628 0008                  		move.l	8(a0),d3
0001D180 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001D184 6700                       		beq.s	loc_1D03C	; if not, branch
0001D186 9481                       		sub.l	d1,d2
0001D188 6400                       		bcc.s	loc_1D03C
0001D18A 7400                       		moveq	#0,d2
0001D18C                            
0001D18C                            loc_1D03C:
0001D18C 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001D190 6700                       		beq.s	loc_1D052	; if not, branch
0001D192 D481                       		add.l	d1,d2
0001D194 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001D19A 6500                       		bcs.s	loc_1D052
0001D19C 243C 07FF 0000             		move.l	#$7FF0000,d2
0001D1A2                            
0001D1A2                            loc_1D052:
0001D1A2 0804 0002                  		btst	#2,d4
0001D1A6 6700                       		beq.s	loc_1D05E
0001D1A8 9681                       		sub.l	d1,d3
0001D1AA 6400                       		bcc.s	loc_1D05E
0001D1AC 7600                       		moveq	#0,d3
0001D1AE                            
0001D1AE                            loc_1D05E:
0001D1AE 0804 0003                  		btst	#3,d4
0001D1B2 6700                       		beq.s	loc_1D066
0001D1B4 D681                       		add.l	d1,d3
0001D1B6                            
0001D1B6                            loc_1D066:
0001D1B6 2142 000C                  		move.l	d2,$C(a0)
0001D1BA 2143 0008                  		move.l	d3,8(a0)
0001D1BE                            
0001D1BE                            Debug_BackItem:
0001D1BE 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001D1C4 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D1C6 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D1CC 6700                       		beq.s	Debug_NextItem	; if not, branch
0001D1CE 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001D1D2 6400                       		bcc.s	Debug_NoLoop
0001D1D4 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001D1D8 6000                       		bra.s	Debug_NoLoop
0001D1DA                            ; ===========================================================================
0001D1DA                            
0001D1DA                            Debug_NextItem:
0001D1DA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001D1E0 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001D1E2 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001D1E6 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001D1EA 6200                       		bhi.s	Debug_NoLoop
0001D1EC 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001D1F2                            
0001D1F2                            Debug_NoLoop:
0001D1F2 6000 0000                  		bra.w	Debug_ShowItem
0001D1F6                            ; ===========================================================================
0001D1F6                            
0001D1F6                            Debug_MakeItem:
0001D1F6 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001D1FC 6700                       		beq.s	Debug_Exit	; if not, branch
0001D1FE 4EB9 0000 DC02             		jsr	SingleObjLoad
0001D204 6600                       		bne.s	Debug_Exit
0001D206 3368 0008 0008             		move.w	8(a0),8(a1)
0001D20C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001D212 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001D216 1368 0001 0001             		move.b	1(a0),1(a1)
0001D21C 1368 0001 0022             		move.b	1(a0),$22(a1)
0001D222 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001D228 7000                       		moveq	#0,d0
0001D22A 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D22E E748                       		lsl.w	#3,d0
0001D230 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001D236 4E75                       		rts	
0001D238                            ; ===========================================================================
0001D238                            
0001D238                            Debug_Exit:
0001D238 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001D23E 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001D240 7000                       		moveq	#0,d0
0001D242 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001D246 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D24E 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D254 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001D258 3140 000A                  		move.w	d0,$A(a0)
0001D25C 3140 000E                  		move.w	d0,$E(a0)
0001D260 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D266 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D26C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D272 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D274 4278 F780                  		clr.w	($FFFFF780).w
0001D278 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D27E 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D286 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D28C 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D292 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D298 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D29E                            
0001D29E                            Debug_DoNothing:
0001D29E 4E75                       		rts	
0001D2A0                            ; End of function Debug_Control
0001D2A0                            
0001D2A0                            
0001D2A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2A0                            
0001D2A0                            
0001D2A0                            Debug_ShowItem:				; XREF: Debug_Main
0001D2A0 7000                       		moveq	#0,d0
0001D2A2 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D2A6 E748                       		lsl.w	#3,d0
0001D2A8 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D2AE 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D2B4 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D2BA 4E75                       		rts	
0001D2BC                            ; End of function Debug_ShowItem
0001D2BC                            
0001D2BC                            ; ===========================================================================
0001D2BC                            ; ---------------------------------------------------------------------------
0001D2BC                            ; Debug	list pointers
0001D2BC                            ; ---------------------------------------------------------------------------
0001D2BC                            DebugList:
0001D2BC                            	include "_inc\Debug list pointers.asm"
0001D2BC                            ; ---------------------------------------------------------------------------
0001D2BC                            ; Debug	list pointers
0001D2BC                            ; ---------------------------------------------------------------------------
0001D2BC 0000                       	dc.w Debug_GHZ-DebugList
0001D2BE 0000                       	dc.w Debug_LZ-DebugList
0001D2C0 0000                       	dc.w Debug_MZ-DebugList
0001D2C2 0000                       	dc.w Debug_SLZ-DebugList
0001D2C4 0000                       	dc.w Debug_SYZ-DebugList
0001D2C6 0000                       	dc.w Debug_SBZ-DebugList
0001D2C8 0000                       	dc.w Debug_Ending-DebugList
0001D2C8 0000                       	dc.w Debug_Ending-DebugList
0001D2CA                            
0001D2CA                            ; ---------------------------------------------------------------------------
0001D2CA                            ; Debug	list - Green Hill
0001D2CA                            ; ---------------------------------------------------------------------------
0001D2CA                            Debug_GHZ:
0001D2CA                            	include "_inc\Debug list - GHZ.asm"
0001D2CA                            ; ---------------------------------------------------------------------------
0001D2CA                            ; Debug	list - Green Hill
0001D2CA                            ; ---------------------------------------------------------------------------
0001D2CA 0010                       	dc.w $10			; number of items in list
0001D2CC 2500 A068                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D2D0 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D2D4 2600 A660                  	dc.l Map_obj26+$26000000
0001D2D8 0000 0680                  	dc.b 0,	0, 6, $80
0001D2DC 1F00 983C                  	dc.l Map_obj1F+$1F000000
0001D2E0 0000 0400                  	dc.b 0,	0, 4, 0
0001D2E4 2200 9B1C                  	dc.l Map_obj22+$22000000
0001D2E8 0000 0444                  	dc.b 0,	0, 4, $44
0001D2EC 2B00 ACA0                  	dc.l Map_obj2B+$2B000000
0001D2F0 0000 047B                  	dc.b 0,	0, 4, $7B
0001D2F4 3600 D164                  	dc.l Map_obj36+$36000000
0001D2F8 0000 051B                  	dc.b 0,	0, 5, $1B
0001D2FC 1800 823A                  	dc.l Map_obj18+$18000000
0001D300 0000 4000                  	dc.b 0,	0, $40,	0
0001D304 3B00 D28A                  	dc.l Map_obj3B+$3B000000
0001D308 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D30C 4000 F916                  	dc.l Map_obj40+$40000000
0001D310 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D314 4100 DE90                  	dc.l Map_obj41+$41000000
0001D318 0000 0523                  	dc.b 0,	0, 5, $23
0001D31C 4200 E0B6                  	dc.l Map_obj42+$42000000
0001D320 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D324 4400 E3C4                  	dc.l Map_obj44+$44000000
0001D328 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D32C 1900 82A8                  	dc.l Map_obj48+$19000000
0001D330 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D334 7901 7246                  	dc.l Map_obj79+$79000000
0001D338 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D33C 4B00 A0A8                  	dc.l Map_obj4B+$4B000000
0001D340 0000 2400                  	dc.b 0,	0, $24,	0
0001D344 7D01 7396                  	dc.l Map_obj7D+$7D000000
0001D348 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D34C                            	even
0001D34C                            	even
0001D34C                            
0001D34C                            ; ---------------------------------------------------------------------------
0001D34C                            ; Debug	list - Labyrinth
0001D34C                            ; ---------------------------------------------------------------------------
0001D34C                            Debug_LZ:
0001D34C                            	include "_inc\Debug list - LZ.asm"
0001D34C                            ; ---------------------------------------------------------------------------
0001D34C                            ; Debug	list - Labyrinth
0001D34C                            ; ---------------------------------------------------------------------------
0001D34C 0019                       	dc.w $19
0001D34E 2500 A068                  	dc.l Map_obj25+$25000000
0001D352 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D356 2600 A660                  	dc.l Map_obj26+$26000000
0001D35A 0000 0680                  	dc.b 0,	0, 6, $80
0001D35E 4100 DE90                  	dc.l Map_obj41+$41000000
0001D362 0000 0523                  	dc.b 0,	0, 5, $23
0001D366 2C00 AD46                  	dc.l Map_obj2C+$2C000000
0001D36A 0800 2486                  	dc.b 8,	0, $24,	$86
0001D36E 2D00 AF32                  	dc.l Map_obj2D+$2D000000
0001D372 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D376 1601 20F2                  	dc.l Map_obj16+$16000000
0001D37A 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D37E 1601 20F2                  	dc.l Map_obj16+$16000000
0001D382 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D386 3300 C3B0                  	dc.l Map_obj33+$33000000
0001D38A 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D38E 3200 BF70                  	dc.l Map_obj32+$32000000
0001D392 0000 0513                  	dc.b 0,	0, 5, $13
0001D396 3600 D164                  	dc.l Map_obj36+$36000000
0001D39A 0000 051B                  	dc.b 0,	0, 5, $1B
0001D39E 5201 0214                  	dc.l Map_obj52a+$52000000
0001D3A2 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D3A6 6101 231A                  	dc.l Map_obj61+$61000000
0001D3AA 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D3AE 6101 231A                  	dc.l Map_obj61+$61000000
0001D3B2 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D3B6 6101 231A                  	dc.l Map_obj61+$61000000
0001D3BA 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D3BE 6201 246E                  	dc.l Map_obj62+$62000000
0001D3C2 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D3C6 6101 231A                  	dc.l Map_obj61+$61000000
0001D3CA 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D3CE 6101 231A                  	dc.l Map_obj61+$61000000
0001D3D2 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D3D6 6301 27D0                  	dc.l Map_obj63+$63000000
0001D3DA 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D3DE 6001 203C                  	dc.l Map_obj60+$60000000
0001D3E2 0000 0467                  	dc.b 0,	0, 4, $67
0001D3E6 6401 2B16                  	dc.l Map_obj64+$64000000
0001D3EA 8413 8348                  	dc.b $84, $13, $83, $48
0001D3EE 6501 2C9E                  	dc.l Map_obj65+$65000000
0001D3F2 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D3F6 6501 2C9E                  	dc.l Map_obj65+$65000000
0001D3FA 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D3FE 0B01 148C                  	dc.l Map_obj0B+$B000000
0001D402 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D406 0C01 155C                  	dc.l Map_obj0C+$C000000
0001D40A 0200 4328                  	dc.b 2,	0, $43,	$28
0001D40E 7901 7246                  	dc.l Map_obj79+$79000000
0001D412 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D416                            	even
0001D416                            	even
0001D416                            
0001D416                            ; ---------------------------------------------------------------------------
0001D416                            ; Debug	list - Marble
0001D416                            ; ---------------------------------------------------------------------------
0001D416                            Debug_MZ:
0001D416                            	include "_inc\Debug list - MZ.asm"
0001D416                            ; ---------------------------------------------------------------------------
0001D416                            ; Debug	list - Marble
0001D416                            ; ---------------------------------------------------------------------------
0001D416 0012                       	dc.w $12
0001D418 2500 A068                  	dc.l Map_obj25+$25000000
0001D41C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D420 2600 A660                  	dc.l Map_obj26+$26000000
0001D424 0000 0680                  	dc.b 0,	0, 6, $80
0001D428 2200 9B1C                  	dc.l Map_obj22+$22000000
0001D42C 0000 0444                  	dc.b 0,	0, 4, $44
0001D430 3600 D164                  	dc.l Map_obj36+$36000000
0001D434 0000 051B                  	dc.b 0,	0, 5, $1B
0001D438 4100 DE90                  	dc.l Map_obj41+$41000000
0001D43C 0000 0523                  	dc.b 0,	0, 5, $23
0001D440 1300 B440                  	dc.l Map_obj14+$13000000
0001D444 0000 0345                  	dc.b 0,	0, 3, $45
0001D448 4600 EA76                  	dc.l Map_obj46+$46000000
0001D44C 0000 4000                  	dc.b 0,	0, $40,	0
0001D450 4C00 F3C2                  	dc.l Map_obj4C+$4C000000
0001D454 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D458 4E00 F6A6                  	dc.l Map_obj4E+$4E000000
0001D45C 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D460 3300 C3B0                  	dc.l Map_obj33+$33000000
0001D464 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D468 5000 FAA4                  	dc.l Map_obj50+$50000000
0001D46C 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D470 5100 FF48                  	dc.l Map_obj51+$51000000
0001D474 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D478 5201 01BE                  	dc.l Map_obj52+$52000000
0001D47C 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D480 5300 8840                  	dc.l Map_obj53+$53000000
0001D484 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D488 5400 F388                  	dc.l Map_obj54+$54000000
0001D48C 0000 8680                  	dc.b 0,	0, $86,	$80
0001D490 5501 03B2                  	dc.l Map_obj55+$55000000
0001D494 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D498 7801 6EC0                  	dc.l Map_obj78+$78000000
0001D49C 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D4A0 7901 7246                  	dc.l Map_obj79+$79000000
0001D4A4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D4A8                            	even
0001D4A8                            	even
0001D4A8                            
0001D4A8                            ; ---------------------------------------------------------------------------
0001D4A8                            ; Debug	list - Star Light
0001D4A8                            ; ---------------------------------------------------------------------------
0001D4A8                            Debug_SLZ:
0001D4A8                            	include "_inc\Debug list - SLZ.asm"
0001D4A8                            ; ---------------------------------------------------------------------------
0001D4A8                            ; Debug	list - Star Light
0001D4A8                            ; ---------------------------------------------------------------------------
0001D4A8 000F                       	dc.w $F
0001D4AA 2500 A068                  	dc.l Map_obj25+$25000000
0001D4AE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D4B2 2600 A660                  	dc.l Map_obj26+$26000000
0001D4B6 0000 0680                  	dc.b 0,	0, 6, $80
0001D4BA 5901 0EB4                  	dc.l Map_obj59+$59000000
0001D4BE 0000 4000                  	dc.b 0,	0, $40,	0
0001D4C2 5300 8840                  	dc.l Map_obj53+$53000000
0001D4C6 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D4CA 1800 8298                  	dc.l Map_obj18b+$18000000
0001D4CE 0000 4000                  	dc.b 0,	0, $40,	0
0001D4D2 5A01 0FEE                  	dc.l Map_obj5A+$5A000000
0001D4D6 0000 4000                  	dc.b 0,	0, $40,	0
0001D4DA 5B01 11A6                  	dc.l Map_obj5B+$5B000000
0001D4DE 0000 4000                  	dc.b 0,	0, $40,	0
0001D4E2 5D01 1776                  	dc.l Map_obj5D+$5D000000
0001D4E6 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D4EA 5E01 1B08                  	dc.l Map_obj5E+$5E000000
0001D4EE 0000 0374                  	dc.b 0,	0, 3, $74
0001D4F2 4100 DE90                  	dc.l Map_obj41+$41000000
0001D4F6 0000 0523                  	dc.b 0,	0, 5, $23
0001D4FA 1300 B440                  	dc.l Map_obj14+$13000000
0001D4FE 0000 0480                  	dc.b 0,	0, 4, $80
0001D502 1C00 8950                  	dc.l Map_obj1C+$1C000000
0001D506 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D50A 5F01 1D86                  	dc.l Map_obj5F+$5F000000
0001D50E 0000 0400                  	dc.b 0,	0, 4, 0
0001D512 6001 203C                  	dc.l Map_obj60+$60000000
0001D516 0000 2429                  	dc.b 0,	0, $24,	$29
0001D51A 7901 7246                  	dc.l Map_obj79+$79000000
0001D51E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D522                            	even
0001D522                            	even
0001D522                            
0001D522                            ; ---------------------------------------------------------------------------
0001D522                            ; Debug	list - Spring Yard
0001D522                            ; ---------------------------------------------------------------------------
0001D522                            Debug_SYZ:
0001D522                            	include "_inc\Debug list - SYZ.asm"
0001D522                            ; ---------------------------------------------------------------------------
0001D522                            ; Debug	list - Spring Yard
0001D522                            ; ---------------------------------------------------------------------------
0001D522 000F                       	dc.w $F
0001D524 2500 A068                  	dc.l Map_obj25+$25000000
0001D528 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D52C 2600 A660                  	dc.l Map_obj26+$26000000
0001D530 0000 0680                  	dc.b 0,	0, 6, $80
0001D534 3600 D164                  	dc.l Map_obj36+$36000000
0001D538 0000 051B                  	dc.b 0,	0, 5, $1B
0001D53C 4100 DE90                  	dc.l Map_obj41+$41000000
0001D540 0000 0523                  	dc.b 0,	0, 5, $23
0001D544 4300 E316                  	dc.l Map_obj43+$43000000
0001D548 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D54C 1200 EAF4                  	dc.l Map_obj12+$12000000
0001D550 0000 0000                  	dc.b 0,	0, 0, 0
0001D554 4700 EC70                  	dc.l Map_obj47+$47000000
0001D558 0000 0380                  	dc.b 0,	0, 3, $80
0001D55C 1F00 983C                  	dc.l Map_obj1F+$1F000000
0001D560 0000 0400                  	dc.b 0,	0, 4, 0
0001D564 2200 9B1C                  	dc.l Map_obj22+$22000000
0001D568 0000 0444                  	dc.b 0,	0, 4, $44
0001D56C 5000 FAA4                  	dc.l Map_obj50+$50000000
0001D570 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D574 1800 8286                  	dc.l Map_obj18a+$18000000
0001D578 0000 4000                  	dc.b 0,	0, $40,	0
0001D57C 5601 0874                  	dc.l Map_obj56+$56000000
0001D580 0000 4000                  	dc.b 0,	0, $40,	0
0001D584 3200 BF70                  	dc.l Map_obj32+$32000000
0001D588 0000 0513                  	dc.b 0,	0, 5, $13
0001D58C 7801 6EC0                  	dc.l Map_obj78+$78000000
0001D590 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D594 7901 7246                  	dc.l Map_obj79+$79000000
0001D598 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D59C                            	even
0001D59C                            	even
0001D59C                            
0001D59C                            ; ---------------------------------------------------------------------------
0001D59C                            ; Debug	list - Scrap Brain
0001D59C                            ; ---------------------------------------------------------------------------
0001D59C                            Debug_SBZ:
0001D59C                            	include "_inc\Debug list - SBZ.asm"
0001D59C                            ; ---------------------------------------------------------------------------
0001D59C                            ; Debug	list - Scrap Brain
0001D59C                            ; ---------------------------------------------------------------------------
0001D59C 001D                       	dc.w $1D
0001D59E 2500 A068                  	dc.l Map_obj25+$25000000
0001D5A2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D5A6 2600 A660                  	dc.l Map_obj26+$26000000
0001D5AA 0000 0680                  	dc.b 0,	0, 6, $80
0001D5AE 5F01 1D86                  	dc.l Map_obj5F+$5F000000
0001D5B2 0000 0400                  	dc.b 0,	0, 4, 0
0001D5B6 6001 203C                  	dc.l Map_obj60+$60000000
0001D5BA 0000 0429                  	dc.b 0,	0, 4, $29
0001D5BE 7801 6EC0                  	dc.l Map_obj78+$78000000
0001D5C2 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001D5C6 1501 0C10                  	dc.l Map_obj15b+$15000000
0001D5CA 0702 4391                  	dc.b 7,	2, $43,	$91
0001D5CE 6701 57E4                  	dc.l Map_obj67+$67000000
0001D5D2 E000 C344                  	dc.b $E0, 0, $C3, $44
0001D5D6 5201 01BE                  	dc.l Map_obj52+$52000000
0001D5DA 2802 22C0                  	dc.b $28, 2, $22, $C0
0001D5DE 3200 BF70                  	dc.l Map_obj32+$32000000
0001D5E2 0000 0513                  	dc.b 0,	0, 5, $13
0001D5E6 6901 5A3E                  	dc.l Map_obj69+$69000000
0001D5EA 0300 4492                  	dc.b 3,	0, $44,	$92
0001D5EE 6901 5A98                  	dc.l Map_obj69a+$69000000
0001D5F2 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001D5F6 6A01 5CF6                  	dc.l Map_obj6A+$6A000000
0001D5FA 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001D5FE 5300 8840                  	dc.l Map_obj53+$53000000
0001D602 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001D606 5201 01BE                  	dc.l Map_obj52+$52000000
0001D60A 3903 4460                  	dc.b $39, 3, $44, $60
0001D60E 6B01 60C6                  	dc.l Map_obj6B+$6B000000
0001D612 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001D616 2A00 8AE6                  	dc.l Map_obj2A+$2A000000
0001D61A 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001D61E 6B01 60C6                  	dc.l Map_obj6B+$6B000000
0001D622 1301 22C0                  	dc.b $13, 1, $22, $C0
0001D626 6A01 5CF6                  	dc.l Map_obj6A+$6A000000
0001D62A 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001D62E 6B01 60C6                  	dc.l Map_obj6B+$6B000000
0001D632 2401 22C0                  	dc.b $24, 1, $22, $C0
0001D636 6A01 5CF6                  	dc.l Map_obj6A+$6A000000
0001D63A 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001D63E 6B01 60C6                  	dc.l Map_obj6B+$6B000000
0001D642 3401 22C0                  	dc.b $34, 1, $22, $C0
0001D646 6C01 6288                  	dc.l Map_obj6C+$6C000000
0001D64A 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001D64E 6D00 E766                  	dc.l Map_obj6D+$6D000000
0001D652 6400 83D9                  	dc.b $64, 0, $83, $D9
0001D656 6D00 E766                  	dc.l Map_obj6D+$6D000000
0001D65A 640B 83D9                  	dc.b $64, $B, $83, $D9
0001D65E 6E01 633E                  	dc.l Map_obj6E+$6E000000
0001D662 0400 047E                  	dc.b 4,	0, 4, $7E
0001D666 7001 6784                  	dc.l Map_obj70+$70000000
0001D66A 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001D66E 7101 161C                  	dc.l Map_obj71+$71000000
0001D672 1100 8680                  	dc.b $11, 0, $86, $80
0001D676 1E00 8F54                  	dc.l Map_obj1E+$1E000000
0001D67A 0400 2302                  	dc.b 4,	0, $23,	2
0001D67E 7901 7246                  	dc.l Map_obj79+$79000000
0001D682 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D686                            	even
0001D686                            	even
0001D686                            
0001D686                            ; ---------------------------------------------------------------------------
0001D686                            ; Debug	list - ending sequence / special stage
0001D686                            ; ---------------------------------------------------------------------------
0001D686                            Debug_Ending:
0001D686                            	include "_inc\Debug list - Ending and SS.asm"
0001D686                            ; ---------------------------------------------------------------------------
0001D686                            ; Debug	list - ending sequence / special stage
0001D686                            ; ---------------------------------------------------------------------------
0001D686 000D                       	dc.w $D
0001D688 2500 A068                  	dc.l Map_obj25+$25000000
0001D68C 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D690 4700 EC70                  	dc.l Map_obj47+$47000000
0001D694 0000 0380                  	dc.b 0,	0, 3, $80
0001D698 2800 956E                  	dc.l Map_obj28a+$28000000
0001D69C 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001D6A0 2800 956E                  	dc.l Map_obj28a+$28000000
0001D6A4 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001D6A8 2800 956E                  	dc.l Map_obj28a+$28000000
0001D6AC 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001D6B0 2800 9556                  	dc.l Map_obj28+$28000000
0001D6B4 0D00 0553                  	dc.b $D, 0, 5, $53
0001D6B8 2800 9556                  	dc.l Map_obj28+$28000000
0001D6BC 0E00 0553                  	dc.b $E, 0, 5, $53
0001D6C0 2800 9556                  	dc.l Map_obj28+$28000000
0001D6C4 0F00 0573                  	dc.b $F, 0, 5, $73
0001D6C8 2800 9556                  	dc.l Map_obj28+$28000000
0001D6CC 1000 0573                  	dc.b $10, 0, 5,	$73
0001D6D0 2800 956E                  	dc.l Map_obj28a+$28000000
0001D6D4 1100 0585                  	dc.b $11, 0, 5,	$85
0001D6D8 2800 9586                  	dc.l Map_obj28b+$28000000
0001D6DC 1200 0593                  	dc.b $12, 0, 5,	$93
0001D6E0 2800 956E                  	dc.l Map_obj28a+$28000000
0001D6E4 1300 0565                  	dc.b $13, 0, 5,	$65
0001D6E8 2800 9586                  	dc.l Map_obj28b+$28000000
0001D6EC 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001D6F0                            	even
0001D6F0                            	even
0001D6F0                            
0001D6F0                            ; ---------------------------------------------------------------------------
0001D6F0                            ; Main level load blocks
0001D6F0                            ; ---------------------------------------------------------------------------
0001D6F0                            MainLoadBlocks:
0001D6F0                            	include "_inc\Main level load blocks.asm"
0001D6F0                            ; ---------------------------------------------------------------------------
0001D6F0                            ; Main level load blocks
0001D6F0                            ;
0001D6F0                            ; ===FORMAT===
0001D6F0                            ; level	patterns + (1st	PLC num	* 10^6)
0001D6F0                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001D6F0                            ; 256x256 mappings
0001D6F0                            ; blank, music (unused), pal index (unused), pal index
0001D6F0                            ; ---------------------------------------------------------------------------
0001D6F0 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001D6F4 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001D6F8 0000 0000                  	dc.l Blk256_GHZ
0001D6FC 0081 0404                  	dc.b 0,	$81, 4,	4
0001D700 0000 0000                  	dc.l Nem_LZ+$6000000
0001D704 0000 0000                  	dc.l Blk16_LZ+$7000000
0001D708 0000 0000                  	dc.l Blk256_LZ
0001D70C 0082 0505                  	dc.b 0,	$82, 5,	5
0001D710 0000 0000                  	dc.l Nem_MZ+$8000000
0001D714 0000 0000                  	dc.l Blk16_MZ+$9000000
0001D718 0000 0000                  	dc.l Blk256_MZ
0001D71C 0083 0606                  	dc.b 0,	$83, 6,	6
0001D720 0000 0000                  	dc.l Nem_SLZ+$A000000
0001D724 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001D728 0000 0000                  	dc.l Blk256_SLZ
0001D72C 0084 0707                  	dc.b 0,	$84, 7,	7
0001D730 0000 0000                  	dc.l Nem_SYZ+$C000000
0001D734 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001D738 0000 0000                  	dc.l Blk256_SYZ
0001D73C 0085 0808                  	dc.b 0,	$85, 8,	8
0001D740 0000 0000                  	dc.l Nem_SBZ+$E000000
0001D744 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001D748 0000 0000                  	dc.l Blk256_SBZ
0001D74C 0086 0909                  	dc.b 0,	$86, 9,	9
0001D750 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001D754 0000 0000                  	dc.l Blk16_GHZ
0001D758 0000 0000                  	dc.l Blk256_GHZ
0001D75C 0086 1313                  	dc.b 0,	$86, $13, $13
0001D760                            	even
0001D760                            	even
0001D760                            
0001D760                            ; ---------------------------------------------------------------------------
0001D760                            ; Pattern load cues
0001D760                            ; ---------------------------------------------------------------------------
0001D760                            ArtLoadCues:
0001D760                            	include "_inc\Pattern load cues.asm"
0001D760                            ; ---------------------------------------------------------------------------
0001D760                            ; Pattern load cues - index
0001D760                            ; ---------------------------------------------------------------------------
0001D760 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001D764 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001D768 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001D76C 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001D770 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001D774 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001D778 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001D77C 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001D780 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001D784 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001D788 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001D78C 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001D790 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001D794 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001D798 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001D79C 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001D7A0                            ; ---------------------------------------------------------------------------
0001D7A0                            ; Pattern load cues - standard block 1
0001D7A0                            ; ---------------------------------------------------------------------------
0001D7A0 0004                       PLC_Main:	dc.w 4
0001D7A2 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001D7A6 F400                       		dc.w $F400
0001D7A8 0000 0000                  		dc.l Nem_Hud		; HUD
0001D7AC D940                       		dc.w $D940
0001D7AE 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001D7B2 FA80                       		dc.w $FA80
0001D7B4 0000 0000                  		dc.l Nem_Ring		; rings
0001D7B8 F640                       		dc.w $F640
0001D7BA 0000 0000                  		dc.l Nem_Points		; points from enemy
0001D7BE F2E0                       		dc.w $F2E0
0001D7C0                            ; ---------------------------------------------------------------------------
0001D7C0                            ; Pattern load cues - standard block 2
0001D7C0                            ; ---------------------------------------------------------------------------
0001D7C0 0002                       PLC_Main2:	dc.w 2
0001D7C2 0000 0000                  		dc.l Nem_Monitors	; monitors
0001D7C6 D000                       		dc.w $D000
0001D7C8 0000 0000                  		dc.l Nem_Shield		; shield
0001D7CC A820                       		dc.w $A820
0001D7CE 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001D7D2 AB80                       		dc.w $AB80
0001D7D4                            ; ---------------------------------------------------------------------------
0001D7D4                            ; Pattern load cues - explosion
0001D7D4                            ; ---------------------------------------------------------------------------
0001D7D4 0000                       PLC_Explode:	dc.w 0
0001D7D6 0000 0000                  		dc.l Nem_Explode	; explosion
0001D7DA B400                       		dc.w $B400
0001D7DC                            ; ---------------------------------------------------------------------------
0001D7DC                            ; Pattern load cues - game/time	over
0001D7DC                            ; ---------------------------------------------------------------------------
0001D7DC 0000                       PLC_GameOver:	dc.w 0
0001D7DE 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001D7E2 ABC0                       		dc.w $ABC0
0001D7E4                            ; ---------------------------------------------------------------------------
0001D7E4                            ; Pattern load cues - Green Hill
0001D7E4                            ; ---------------------------------------------------------------------------
0001D7E4 000B                       PLC_GHZ:	dc.w $B
0001D7E6 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001D7EA 0000                       		dc.w 0
0001D7EC 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001D7F0 39A0                       		dc.w $39A0
0001D7F2 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001D7F6 6B00                       		dc.w $6B00
0001D7F8 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001D7FC 7A00                       		dc.w $7A00
0001D7FE 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D802 8000                       		dc.w $8000
0001D804 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D808 8880                       		dc.w $8880
0001D80A 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001D80E 8F60                       		dc.w $8F60
0001D810 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001D814 9360                       		dc.w $9360
0001D816 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001D81A 9E00                       		dc.w $9E00
0001D81C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D820 A360                       		dc.w $A360
0001D822 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D826 A460                       		dc.w $A460
0001D828 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D82C A660                       		dc.w $A660
0001D82E 0005                       PLC_GHZ2:	dc.w 5
0001D830 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D834 7000                       		dc.w $7000
0001D836 0000 0000                  		dc.l Nem_Bridge		; bridge
0001D83A 71C0                       		dc.w $71C0
0001D83C 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001D840 7300                       		dc.w $7300
0001D842 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001D846 7540                       		dc.w $7540
0001D848 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001D84C A1E0                       		dc.w $A1E0
0001D84E 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001D852 6980                       		dc.w $6980
0001D854                            ; ---------------------------------------------------------------------------
0001D854                            ; Pattern load cues - Labyrinth
0001D854                            ; ---------------------------------------------------------------------------
0001D854 000B                       PLC_LZ:		dc.w $B
0001D856 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001D85A 0000                       		dc.w 0
0001D85C 0000 0000                  		dc.l Nem_LzBlock1	; block
0001D860 3C00                       		dc.w $3C00
0001D862 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001D866 3E00                       		dc.w $3E00
0001D868 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001D86C 4B20                       		dc.w $4B20
0001D86E 0000 0000                  		dc.l Nem_Water		; water	surface
0001D872 6000                       		dc.w $6000
0001D874 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001D878 6200                       		dc.w $6200
0001D87A 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001D87E 6500                       		dc.w $6500
0001D880 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001D884 6900                       		dc.w $6900
0001D886 0000 0000                  		dc.l Nem_LzBlock3	; block
0001D88A 7780                       		dc.w $7780
0001D88C 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001D890 7880                       		dc.w $7880
0001D892 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001D896 7980                       		dc.w $7980
0001D898 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001D89C 94C0                       		dc.w $94C0
0001D89E 000C                       PLC_LZ2:	dc.w $C
0001D8A0 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001D8A4 7BC0                       		dc.w $7BC0
0001D8A6 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001D8AA 7CC0                       		dc.w $7CC0
0001D8AC 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001D8B0 7EC0                       		dc.w $7EC0
0001D8B2 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001D8B6 5D20                       		dc.w $5D20
0001D8B8 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001D8BC 8800                       		dc.w $8800
0001D8BE 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001D8C2 89E0                       		dc.w $89E0
0001D8C4 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D8C8 8CE0                       		dc.w $8CE0
0001D8CA 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001D8CE 90C0                       		dc.w $90C0
0001D8D0 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D8D4 A1E0                       		dc.w $A1E0
0001D8D6 0000 0000                  		dc.l Nem_Cork		; cork block
0001D8DA A000                       		dc.w $A000
0001D8DC 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D8E0 A360                       		dc.w $A360
0001D8E2 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D8E6 A460                       		dc.w $A460
0001D8E8 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D8EC A660                       		dc.w $A660
0001D8EE                            ; ---------------------------------------------------------------------------
0001D8EE                            ; Pattern load cues - Marble
0001D8EE                            ; ---------------------------------------------------------------------------
0001D8EE 0009                       PLC_MZ:		dc.w 9
0001D8F0 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001D8F4 0000                       		dc.w 0
0001D8F6 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001D8FA 6000                       		dc.w $6000
0001D8FC 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D900 68A0                       		dc.w $68A0
0001D902 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D906 7000                       		dc.w $7000
0001D908 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001D90C 71C0                       		dc.w $71C0
0001D90E 0000 0000                  		dc.l Nem_Lava		; lava
0001D912 7500                       		dc.w $7500
0001D914 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D918 8880                       		dc.w $8880
0001D91A 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D91E 8F60                       		dc.w $8F60
0001D920 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001D924 9700                       		dc.w $9700
0001D926 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D92A 9FE0                       		dc.w $9FE0
0001D92C 0004                       PLC_MZ2:	dc.w 4
0001D92E 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001D932 A260                       		dc.w $A260
0001D934 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D938 A360                       		dc.w $A360
0001D93A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D93E A460                       		dc.w $A460
0001D940 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D944 A660                       		dc.w $A660
0001D946 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001D94A 5700                       		dc.w $5700
0001D94C                            ; ---------------------------------------------------------------------------
0001D94C                            ; Pattern load cues - Star Light
0001D94C                            ; ---------------------------------------------------------------------------
0001D94C 0008                       PLC_SLZ:	dc.w 8
0001D94E 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001D952 0000                       		dc.w 0
0001D954 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001D958 8000                       		dc.w $8000
0001D95A 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D95E 8520                       		dc.w $8520
0001D960 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D964 9000                       		dc.w $9000
0001D966 0000 0000                  		dc.l Nem_SlzBlock	; block
0001D96A 9C00                       		dc.w $9C00
0001D96C 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001D970 A260                       		dc.w $A260
0001D972 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D976 A360                       		dc.w $A360
0001D978 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D97C A460                       		dc.w $A460
0001D97E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D982 A660                       		dc.w $A660
0001D984 0005                       PLC_SLZ2:	dc.w 5
0001D986 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001D98A 6E80                       		dc.w $6E80
0001D98C 0000 0000                  		dc.l Nem_Fan		; fan
0001D990 7400                       		dc.w $7400
0001D992 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001D996 7980                       		dc.w $7980
0001D998 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001D99C 7B80                       		dc.w $7B80
0001D99E 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001D9A2 9B00                       		dc.w $9B00
0001D9A4 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001D9A8 9E00                       		dc.w $9E00
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA                            ; Pattern load cues - Spring Yard
0001D9AA                            ; ---------------------------------------------------------------------------
0001D9AA 0004                       PLC_SYZ:	dc.w 4
0001D9AC 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001D9B0 0000                       		dc.w 0
0001D9B2 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D9B6 8000                       		dc.w $8000
0001D9B8 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D9BC 8880                       		dc.w $8880
0001D9BE 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D9C2 8F60                       		dc.w $8F60
0001D9C4 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001D9C8 9700                       		dc.w $9700
0001D9CA 0007                       PLC_SYZ2:	dc.w 7
0001D9CC 0000 0000                  		dc.l Nem_Bumper		; bumper
0001D9D0 7000                       		dc.w $7000
0001D9D2 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001D9D6 72C0                       		dc.w $72C0
0001D9D8 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001D9DC 7740                       		dc.w $7740
0001D9DE 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D9E2 9FE0                       		dc.w $9FE0
0001D9E4 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D9E8 A1E0                       		dc.w $A1E0
0001D9EA 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D9EE A360                       		dc.w $A360
0001D9F0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D9F4 A460                       		dc.w $A460
0001D9F6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D9FA A660                       		dc.w $A660
0001D9FC                            ; ---------------------------------------------------------------------------
0001D9FC                            ; Pattern load cues - Scrap Brain
0001D9FC                            ; ---------------------------------------------------------------------------
0001D9FC 000B                       PLC_SBZ:	dc.w $B
0001D9FE 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001DA02 0000                       		dc.w 0
0001DA04 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001DA08 5800                       		dc.w $5800
0001DA0A 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001DA0E 5D00                       		dc.w $5D00
0001DA10 0000 0000                  		dc.l Nem_Girder		; girder
0001DA14 5E00                       		dc.w $5E00
0001DA16 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001DA1A 6040                       		dc.w $6040
0001DA1C 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001DA20 6880                       		dc.w $6880
0001DA22 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001DA26 6900                       		dc.w $6900
0001DA28 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001DA2C 7220                       		dc.w $7220
0001DA2E 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001DA32 76A0                       		dc.w $76A0
0001DA34 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001DA38 7B20                       		dc.w $7B20
0001DA3A 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DA3E 7EA0                       		dc.w $7EA0
0001DA40 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001DA44 9860                       		dc.w $9860
0001DA46 000C                       PLC_SBZ2:	dc.w $C
0001DA48 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001DA4C 5600                       		dc.w $5600
0001DA4E 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001DA52 8000                       		dc.w $8000
0001DA54 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001DA58 8520                       		dc.w $8520
0001DA5A 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001DA5E 8C00                       		dc.w $8C00
0001DA60 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001DA64 8DE0                       		dc.w $8DE0
0001DA66 0000 0000                  		dc.l Nem_Electric	; electric orb
0001DA6A 8FC0                       		dc.w $8FC0
0001DA6C 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001DA70 9240                       		dc.w $9240
0001DA72 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001DA76 7F20                       		dc.w $7F20
0001DA78 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001DA7C 9BE0                       		dc.w $9BE0
0001DA7E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DA82 A1E0                       		dc.w $A1E0
0001DA84 0000 0000                  		dc.l Nem_Spikes		; spikes
0001DA88 A360                       		dc.w $A360
0001DA8A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001DA8E A460                       		dc.w $A460
0001DA90 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001DA94 A660                       		dc.w $A660
0001DA96                            ; ---------------------------------------------------------------------------
0001DA96                            ; Pattern load cues - title card
0001DA96                            ; ---------------------------------------------------------------------------
0001DA96 0000                       PLC_TitleCard:	dc.w 0
0001DA98 0000 0000                  		dc.l Nem_TitleCard
0001DA9C B000                       		dc.w $B000
0001DA9E                            ; ---------------------------------------------------------------------------
0001DA9E                            ; Pattern load cues - act 3 boss
0001DA9E                            ; ---------------------------------------------------------------------------
0001DA9E 0005                       PLC_Boss:	dc.w 5
0001DAA0 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DAA4 8000                       		dc.w $8000
0001DAA6 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001DAAA 8D80                       		dc.w $8D80
0001DAAC 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001DAB0 93A0                       		dc.w $93A0
0001DAB2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001DAB6 A300                       		dc.w $A300
0001DAB8 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001DABC A300                       		dc.w $A300
0001DABE 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DAC2 A540                       		dc.w $A540
0001DAC4                            ; ---------------------------------------------------------------------------
0001DAC4                            ; Pattern load cues - act 1/2 signpost
0001DAC4                            ; ---------------------------------------------------------------------------
0001DAC4 0002                       PLC_Signpost:	dc.w 2
0001DAC6 0000 0000                  		dc.l Nem_SignPost	; signpost
0001DACA D000                       		dc.w $D000
0001DACC 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001DAD0 96C0                       		dc.w $96C0
0001DAD2 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001DAD6 8C40                       		dc.w $8C40
0001DAD8                            ; ---------------------------------------------------------------------------
0001DAD8                            ; Pattern load cues - beta special stage warp effect
0001DAD8                            ; ---------------------------------------------------------------------------
0001DAD8 0000                       PLC_Warp:	dc.w 0
0001DADA 0000 0000                  		dc.l Nem_Warp
0001DADE A820                       		dc.w $A820
0001DAE0                            ; ---------------------------------------------------------------------------
0001DAE0                            ; Pattern load cues - special stage
0001DAE0                            ; ---------------------------------------------------------------------------
0001DAE0 0010                       PLC_SpeStage:	dc.w $10
0001DAE2 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001DAE6 0000                       		dc.w 0
0001DAE8 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001DAEC 0A20                       		dc.w $A20
0001DAEE 0000 0000                  		dc.l Nem_SSWalls	; walls
0001DAF2 2840                       		dc.w $2840
0001DAF4 0000 0000                  		dc.l Nem_Bumper		; bumper
0001DAF8 4760                       		dc.w $4760
0001DAFA 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001DAFE 4A20                       		dc.w $4A20
0001DB00 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001DB04 4C60                       		dc.w $4C60
0001DB06 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001DB0A 5E00                       		dc.w $5E00
0001DB0C 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001DB10 6E00                       		dc.w $6E00
0001DB12 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001DB16 7E00                       		dc.w $7E00
0001DB18 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001DB1C 8E00                       		dc.w $8E00
0001DB1E 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001DB22 9E00                       		dc.w $9E00
0001DB24 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001DB28 AE00                       		dc.w $AE00
0001DB2A 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001DB2E BE00                       		dc.w $BE00
0001DB30 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001DB34 EE00                       		dc.w $EE00
0001DB36 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001DB3A F2E0                       		dc.w $F2E0
0001DB3C 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001DB40 F400                       		dc.w $F400
0001DB42 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001DB46 F520                       		dc.w $F520
0001DB48 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001DB4C F2E0                       		dc.w $F2E0
0001DB4E 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001DB52 F400                       		dc.w $F400
0001DB54 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001DB58 F520                       		dc.w $F520
0001DB5A                            ; ---------------------------------------------------------------------------
0001DB5A                            ; Pattern load cues - GHZ animals
0001DB5A                            ; ---------------------------------------------------------------------------
0001DB5A 0001                       PLC_GHZAnimals:	dc.w 1
0001DB5C 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DB60 B000                       		dc.w $B000
0001DB62 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DB66 B240                       		dc.w $B240
0001DB68                            ; ---------------------------------------------------------------------------
0001DB68                            ; Pattern load cues - LZ animals
0001DB68                            ; ---------------------------------------------------------------------------
0001DB68 0001                       PLC_LZAnimals:	dc.w 1
0001DB6A 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DB6E B000                       		dc.w $B000
0001DB70 0000 0000                  		dc.l Nem_Seal		; seal
0001DB74 B240                       		dc.w $B240
0001DB76                            ; ---------------------------------------------------------------------------
0001DB76                            ; Pattern load cues - MZ animals
0001DB76                            ; ---------------------------------------------------------------------------
0001DB76 0001                       PLC_MZAnimals:	dc.w 1
0001DB78 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DB7C B000                       		dc.w $B000
0001DB7E 0000 0000                  		dc.l Nem_Seal		; seal
0001DB82 B240                       		dc.w $B240
0001DB84                            ; ---------------------------------------------------------------------------
0001DB84                            ; Pattern load cues - SLZ animals
0001DB84                            ; ---------------------------------------------------------------------------
0001DB84 0001                       PLC_SLZAnimals:	dc.w 1
0001DB86 0000 0000                  		dc.l Nem_Pig		; pig
0001DB8A B000                       		dc.w $B000
0001DB8C 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DB90 B240                       		dc.w $B240
0001DB92                            ; ---------------------------------------------------------------------------
0001DB92                            ; Pattern load cues - SYZ animals
0001DB92                            ; ---------------------------------------------------------------------------
0001DB92 0001                       PLC_SYZAnimals:	dc.w 1
0001DB94 0000 0000                  		dc.l Nem_Pig		; pig
0001DB98 B000                       		dc.w $B000
0001DB9A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DB9E B240                       		dc.w $B240
0001DBA0                            ; ---------------------------------------------------------------------------
0001DBA0                            ; Pattern load cues - SBZ animals
0001DBA0                            ; ---------------------------------------------------------------------------
0001DBA0 0001                       PLC_SBZAnimals:	dc.w 1
0001DBA2 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DBA6 B000                       		dc.w $B000
0001DBA8 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DBAC B240                       		dc.w $B240
0001DBAE                            ; ---------------------------------------------------------------------------
0001DBAE                            ; Pattern load cues - special stage results screen
0001DBAE                            ; ---------------------------------------------------------------------------
0001DBAE 0001                       PLC_SpeStResult:dc.w 1
0001DBB0 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001DBB4 A820                       		dc.w $A820
0001DBB6 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001DBBA AA20                       		dc.w $AA20
0001DBBC                            ; ---------------------------------------------------------------------------
0001DBBC                            ; Pattern load cues - ending sequence
0001DBBC                            ; ---------------------------------------------------------------------------
0001DBBC 000E                       PLC_Ending:	dc.w $E
0001DBBE 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001DBC2 0000                       		dc.w 0
0001DBC4 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001DBC8 39A0                       		dc.w $39A0
0001DBCA 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001DBCE 6B00                       		dc.w $6B00
0001DBD0 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001DBD4 7400                       		dc.w $7400
0001DBD6 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DBDA 78A0                       		dc.w $78A0
0001DBDC 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001DBE0 7C20                       		dc.w $7C20
0001DBE2 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001DBE6 A480                       		dc.w $A480
0001DBE8 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001DBEC AA60                       		dc.w $AA60
0001DBEE 0000 0000                  		dc.l Nem_Chicken	; chicken
0001DBF2 ACA0                       		dc.w $ACA0
0001DBF4 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001DBF8 AE60                       		dc.w $AE60
0001DBFA 0000 0000                  		dc.l Nem_Seal		; seal
0001DBFE B0A0                       		dc.w $B0A0
0001DC00 0000 0000                  		dc.l Nem_Pig		; pig
0001DC04 B260                       		dc.w $B260
0001DC06 0000 0000                  		dc.l Nem_Flicky		; flicky
0001DC0A B4A0                       		dc.w $B4A0
0001DC0C 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001DC10 B660                       		dc.w $B660
0001DC12 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001DC16 B8A0                       		dc.w $B8A0
0001DC18                            ; ---------------------------------------------------------------------------
0001DC18                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001DC18                            ; ---------------------------------------------------------------------------
0001DC18 0002                       PLC_TryAgain:	dc.w 2
0001DC1A 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001DC1E 78A0                       		dc.w $78A0
0001DC20 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001DC24 7C20                       		dc.w $7C20
0001DC26 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001DC2A B400                       		dc.w $B400
0001DC2C                            ; ---------------------------------------------------------------------------
0001DC2C                            ; Pattern load cues - Eggman on SBZ 2
0001DC2C                            ; ---------------------------------------------------------------------------
0001DC2C 0002                       PLC_EggmanSBZ2:	dc.w 2
0001DC2E 0000 0000                  		dc.l Nem_SbzBlock	; block
0001DC32 A300                       		dc.w $A300
0001DC34 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001DC38 8000                       		dc.w $8000
0001DC3A 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001DC3E 9400                       		dc.w $9400
0001DC40                            ; ---------------------------------------------------------------------------
0001DC40                            ; Pattern load cues - final boss
0001DC40                            ; ---------------------------------------------------------------------------
0001DC40 0004                       PLC_FZBoss:	dc.w 4
0001DC42 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001DC46 7400                       		dc.w $7400
0001DC48 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001DC4C 6000                       		dc.w $6000
0001DC4E 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001DC52 8000                       		dc.w $8000
0001DC54 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001DC58 8E00                       		dc.w $8E00
0001DC5A 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DC5E A540                       		dc.w $A540
0001DC60                            		even
0001DC60                            		even
0001DC60                            
0001DC60                            		incbin	misc\padding.bin
0001DD4E                            		even
0001DD4E                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001E1B0                            		even
0001E1B0                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E2A8                            		even
0001E2A8                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E3BC                            		even
0001E3BC                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F3C8                            		even
0001F3C8                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00020D96                            		even
00020D96                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00020DCA                            		even
00020DCA                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00020E88                            		even
00020E88                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00021330                            		even
00021330                            ; ---------------------------------------------------------------------------
00021330                            ; Sprite mappings - Sonic
00021330                            ; ---------------------------------------------------------------------------
00021330                            Map_Sonic:
00021330                            	include "_maps\Sonic.asm"
00021330                            Map_4a3c:
00021330 0000                       Map_4a3c_0: 	dc.w Map_4a3c_B2-Map_4a3c
00021332 0000                       Map_4a3c_2: 	dc.w Map_4a3c_B3-Map_4a3c
00021334 0000                       Map_4a3c_4: 	dc.w Map_4a3c_BE-Map_4a3c
00021336 0000                       Map_4a3c_6: 	dc.w Map_4a3c_CE-Map_4a3c
00021338 0000                       Map_4a3c_8: 	dc.w Map_4a3c_DE-Map_4a3c
0002133A 0000                       Map_4a3c_A: 	dc.w Map_4a3c_EE-Map_4a3c
0002133C 0000                       Map_4a3c_C: 	dc.w Map_4a3c_FE-Map_4a3c
0002133E 0000                       Map_4a3c_E: 	dc.w Map_4a3c_113-Map_4a3c
00021340 0000                       Map_4a3c_10: 	dc.w Map_4a3c_11E-Map_4a3c
00021342 0000                       Map_4a3c_12: 	dc.w Map_4a3c_129-Map_4a3c
00021344 0000                       Map_4a3c_14: 	dc.w Map_4a3c_13E-Map_4a3c
00021346 0000                       Map_4a3c_16: 	dc.w Map_4a3c_149-Map_4a3c
00021348 0000                       Map_4a3c_18: 	dc.w Map_4a3c_159-Map_4a3c
0002134A 0000                       Map_4a3c_1A: 	dc.w Map_4a3c_173-Map_4a3c
0002134C 0000                       Map_4a3c_1C: 	dc.w Map_4a3c_192-Map_4a3c
0002134E 0000                       Map_4a3c_1E: 	dc.w Map_4a3c_1A7-Map_4a3c
00021350 0000                       Map_4a3c_20: 	dc.w Map_4a3c_1C1-Map_4a3c
00021352 0000                       Map_4a3c_22: 	dc.w Map_4a3c_1D6-Map_4a3c
00021354 0000                       Map_4a3c_24: 	dc.w Map_4a3c_1F0-Map_4a3c
00021356 0000                       Map_4a3c_26: 	dc.w Map_4a3c_205-Map_4a3c
00021358 0000                       Map_4a3c_28: 	dc.w Map_4a3c_210-Map_4a3c
0002135A 0000                       Map_4a3c_2A: 	dc.w Map_4a3c_21B-Map_4a3c
0002135C 0000                       Map_4a3c_2C: 	dc.w Map_4a3c_230-Map_4a3c
0002135E 0000                       Map_4a3c_2E: 	dc.w Map_4a3c_23B-Map_4a3c
00021360 0000                       Map_4a3c_30: 	dc.w Map_4a3c_24B-Map_4a3c
00021362 0000                       Map_4a3c_32: 	dc.w Map_4a3c_26A-Map_4a3c
00021364 0000                       Map_4a3c_34: 	dc.w Map_4a3c_289-Map_4a3c
00021366 0000                       Map_4a3c_36: 	dc.w Map_4a3c_29E-Map_4a3c
00021368 0000                       Map_4a3c_38: 	dc.w Map_4a3c_2B8-Map_4a3c
0002136A 0000                       Map_4a3c_3A: 	dc.w Map_4a3c_2CD-Map_4a3c
0002136C 0000                       Map_4a3c_3C: 	dc.w Map_4a3c_2E7-Map_4a3c
0002136E 0000                       Map_4a3c_3E: 	dc.w Map_4a3c_2F2-Map_4a3c
00021370 0000                       Map_4a3c_40: 	dc.w Map_4a3c_2FD-Map_4a3c
00021372 0000                       Map_4a3c_42: 	dc.w Map_4a3c_308-Map_4a3c
00021374 0000                       Map_4a3c_44: 	dc.w Map_4a3c_313-Map_4a3c
00021376 0000                       Map_4a3c_46: 	dc.w Map_4a3c_328-Map_4a3c
00021378 0000                       Map_4a3c_48: 	dc.w Map_4a3c_338-Map_4a3c
0002137A 0000                       Map_4a3c_4A: 	dc.w Map_4a3c_34D-Map_4a3c
0002137C 0000                       Map_4a3c_4C: 	dc.w Map_4a3c_35D-Map_4a3c
0002137E 0000                       Map_4a3c_4E: 	dc.w Map_4a3c_368-Map_4a3c
00021380 0000                       Map_4a3c_50: 	dc.w Map_4a3c_373-Map_4a3c
00021382 0000                       Map_4a3c_52: 	dc.w Map_4a3c_37E-Map_4a3c
00021384 0000                       Map_4a3c_54: 	dc.w Map_4a3c_389-Map_4a3c
00021386 0000                       Map_4a3c_56: 	dc.w Map_4a3c_39E-Map_4a3c
00021388 0000                       Map_4a3c_58: 	dc.w Map_4a3c_3A9-Map_4a3c
0002138A 0000                       Map_4a3c_5A: 	dc.w Map_4a3c_3BE-Map_4a3c
0002138C 0000                       Map_4a3c_5C: 	dc.w Map_4a3c_3C9-Map_4a3c
0002138E 0000                       Map_4a3c_5E: 	dc.w Map_4a3c_3CF-Map_4a3c
00021390 0000                       Map_4a3c_60: 	dc.w Map_4a3c_3D5-Map_4a3c
00021392 0000                       Map_4a3c_62: 	dc.w Map_4a3c_3DB-Map_4a3c
00021394 0000                       Map_4a3c_64: 	dc.w Map_4a3c_3E1-Map_4a3c
00021396 0000                       Map_4a3c_66: 	dc.w Map_4a3c_3E7-Map_4a3c
00021398 0000                       Map_4a3c_68: 	dc.w Map_4a3c_3F2-Map_4a3c
0002139A 0000                       Map_4a3c_6A: 	dc.w Map_4a3c_3F8-Map_4a3c
0002139C 0000                       Map_4a3c_6C: 	dc.w Map_4a3c_403-Map_4a3c
0002139E 0000                       Map_4a3c_6E: 	dc.w Map_4a3c_409-Map_4a3c
000213A0 0000                       Map_4a3c_70: 	dc.w Map_4a3c_414-Map_4a3c
000213A2 0000                       Map_4a3c_72: 	dc.w Map_4a3c_429-Map_4a3c
000213A4 0000                       Map_4a3c_74: 	dc.w Map_4a3c_43E-Map_4a3c
000213A6 0000                       Map_4a3c_76: 	dc.w Map_4a3c_44E-Map_4a3c
000213A8 0000                       Map_4a3c_78: 	dc.w Map_4a3c_45E-Map_4a3c
000213AA 0000                       Map_4a3c_7A: 	dc.w Map_4a3c_46E-Map_4a3c
000213AC 0000                       Map_4a3c_7C: 	dc.w Map_4a3c_479-Map_4a3c
000213AE 0000                       Map_4a3c_7E: 	dc.w Map_4a3c_489-Map_4a3c
000213B0 0000                       Map_4a3c_80: 	dc.w Map_4a3c_499-Map_4a3c
000213B2 0000                       Map_4a3c_82: 	dc.w Map_4a3c_4A9-Map_4a3c
000213B4 0000                       Map_4a3c_84: 	dc.w Map_4a3c_4BE-Map_4a3c
000213B6 0000                       Map_4a3c_86: 	dc.w Map_4a3c_4D3-Map_4a3c
000213B8 0000                       Map_4a3c_88: 	dc.w Map_4a3c_4ED-Map_4a3c
000213BA 0000                       Map_4a3c_8A: 	dc.w Map_4a3c_507-Map_4a3c
000213BC 0000                       Map_4a3c_8C: 	dc.w Map_4a3c_512-Map_4a3c
000213BE 0000                       Map_4a3c_8E: 	dc.w Map_4a3c_522-Map_4a3c
000213C0 0000                       Map_4a3c_90: 	dc.w Map_4a3c_52D-Map_4a3c
000213C2 0000                       Map_4a3c_92: 	dc.w Map_4a3c_53D-Map_4a3c
000213C4 0000                       Map_4a3c_94: 	dc.w Map_4a3c_548-Map_4a3c
000213C6 0000                       Map_4a3c_96: 	dc.w Map_4a3c_558-Map_4a3c
000213C8 0000                       Map_4a3c_98: 	dc.w Map_4a3c_568-Map_4a3c
000213CA 0000                       Map_4a3c_9A: 	dc.w Map_4a3c_582-Map_4a3c
000213CC 0000                       Map_4a3c_9C: 	dc.w Map_4a3c_59C-Map_4a3c
000213CE 0000                       Map_4a3c_9E: 	dc.w Map_4a3c_5A7-Map_4a3c
000213D0 0000                       Map_4a3c_A0: 	dc.w Map_4a3c_5B7-Map_4a3c
000213D2 0000                       Map_4a3c_A2: 	dc.w Map_4a3c_5BD-Map_4a3c
000213D4 0000                       Map_4a3c_A4: 	dc.w Map_4a3c_5C3-Map_4a3c
000213D6 0000                       Map_4a3c_A6: 	dc.w Map_4a3c_5C9-Map_4a3c
000213D8 0000                       Map_4a3c_A8: 	dc.w Map_4a3c_5D9-Map_4a3c
000213DA 0000                       Map_4a3c_AA: 	dc.w Map_4a3c_5E9-Map_4a3c
000213DC 0000                       Map_4a3c_AC: 	dc.w Map_4a3c_5F9-Map_4a3c
000213DE 0000                       Map_4a3c_AE: 	dc.w Map_4a3c_609-Map_4a3c
000213E0 0000                       Map_4a3c_B0: 	dc.w Map_4a3c_614-Map_4a3c
000213E2 00                         Map_4a3c_B2: 	dc.b $0
000213E3 02                         Map_4a3c_B3: 	dc.b $2
000213E4 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
000213E9 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
000213EE 03                         Map_4a3c_BE: 	dc.b $3
000213EF EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000213F4 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000213F9 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000213FE 03                         Map_4a3c_CE: 	dc.b $3
000213FF EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00021404 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00021409 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002140E 03                         Map_4a3c_DE: 	dc.b $3
0002140F EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00021414 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00021419 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002141E 03                         Map_4a3c_EE: 	dc.b $3
0002141F EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
00021424 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00021429 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002142E 04                         Map_4a3c_FE: 	dc.b $4
0002142F EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
00021434 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00021439 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
0002143E 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
00021443 02                         Map_4a3c_113: 	dc.b $2
00021444 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
00021449 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
0002144E 02                         Map_4a3c_11E: 	dc.b $2
0002144F ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
00021454 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
00021459 04                         Map_4a3c_129: 	dc.b $4
0002145A EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002145F FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00021464 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00021469 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
0002146E 02                         Map_4a3c_13E: 	dc.b $2
0002146F EC09 0000 F3               	dc.b $EC, $9, $0, $0, $F3
00021474 FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
00021479 03                         Map_4a3c_149: 	dc.b $3
0002147A ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
0002147F FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00021484 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00021489 05                         Map_4a3c_159: 	dc.b $5
0002148A EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
0002148F EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00021494 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00021499 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
0002149E 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
000214A3 06                         Map_4a3c_173: 	dc.b $6
000214A4 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000214A9 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000214AE FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
000214B3 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
000214B8 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
000214BD F400 0016 14               	dc.b $F4, $0, $0, $16, $14
000214C2 04                         Map_4a3c_192: 	dc.b $4
000214C3 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000214C8 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000214CD FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
000214D2 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
000214D7 05                         Map_4a3c_1A7: 	dc.b $5
000214D8 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000214DD EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
000214E2 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
000214E7 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
000214EC 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
000214F1 04                         Map_4a3c_1C1: 	dc.b $4
000214F2 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
000214F7 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
000214FC FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00021501 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
00021506 05                         Map_4a3c_1D6: 	dc.b $5
00021507 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
0002150C ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00021511 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
00021516 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
0002151B 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00021520 04                         Map_4a3c_1F0: 	dc.b $4
00021521 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
00021526 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
0002152B FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00021530 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
00021535 02                         Map_4a3c_205: 	dc.b $2
00021536 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
0002153B EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00021540 02                         Map_4a3c_210: 	dc.b $2
00021541 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
00021546 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
0002154B 04                         Map_4a3c_21B: 	dc.b $4
0002154C F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
00021551 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
00021556 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
0002155B 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00021560 02                         Map_4a3c_230: 	dc.b $2
00021561 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00021566 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
0002156B 03                         Map_4a3c_23B: 	dc.b $3
0002156C F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00021571 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00021576 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
0002157B 06                         Map_4a3c_24B: 	dc.b $6
0002157C FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00021581 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00021586 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
0002158B F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00021590 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00021595 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
0002159A 06                         Map_4a3c_26A: 	dc.b $6
0002159B FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000215A0 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
000215A5 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
000215AA F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
000215AF F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
000215B4 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
000215B9 04                         Map_4a3c_289: 	dc.b $4
000215BA FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000215BF F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
000215C4 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
000215C9 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000215CE 05                         Map_4a3c_29E: 	dc.b $5
000215CF FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000215D4 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
000215D9 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
000215DE F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
000215E3 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
000215E8 04                         Map_4a3c_2B8: 	dc.b $4
000215E9 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000215EE F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
000215F3 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
000215F8 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
000215FD 05                         Map_4a3c_2CD: 	dc.b $5
000215FE FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00021603 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00021608 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
0002160D 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00021612 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
00021617 02                         Map_4a3c_2E7: 	dc.b $2
00021618 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002161D FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00021622 02                         Map_4a3c_2F2: 	dc.b $2
00021623 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00021628 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002162D 02                         Map_4a3c_2FD: 	dc.b $2
0002162E EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00021633 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00021638 02                         Map_4a3c_308: 	dc.b $2
00021639 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002163E FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00021643 04                         Map_4a3c_313: 	dc.b $4
00021644 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00021649 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
0002164E FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00021653 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
00021658 03                         Map_4a3c_328: 	dc.b $3
00021659 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002165E EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00021663 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00021668 04                         Map_4a3c_338: 	dc.b $4
00021669 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002166E EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00021673 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00021678 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
0002167D 03                         Map_4a3c_34D: 	dc.b $3
0002167E EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00021683 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00021688 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002168D 02                         Map_4a3c_35D: 	dc.b $2
0002168E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00021693 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00021698 02                         Map_4a3c_368: 	dc.b $2
00021699 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002169E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000216A3 02                         Map_4a3c_373: 	dc.b $2
000216A4 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000216A9 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000216AE 02                         Map_4a3c_37E: 	dc.b $2
000216AF F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000216B4 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000216B9 04                         Map_4a3c_389: 	dc.b $4
000216BA FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000216BF F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000216C4 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000216C9 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000216CE 02                         Map_4a3c_39E: 	dc.b $2
000216CF F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000216D4 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000216D9 04                         Map_4a3c_3A9: 	dc.b $4
000216DA FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
000216DF F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
000216E4 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000216E9 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
000216EE 02                         Map_4a3c_3BE: 	dc.b $2
000216EF F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
000216F4 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
000216F9 01                         Map_4a3c_3C9: 	dc.b $1
000216FA F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000216FF 01                         Map_4a3c_3CF: 	dc.b $1
00021700 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00021705 01                         Map_4a3c_3D5: 	dc.b $1
00021706 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002170B 01                         Map_4a3c_3DB: 	dc.b $1
0002170C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00021711 01                         Map_4a3c_3E1: 	dc.b $1
00021712 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00021717 02                         Map_4a3c_3E7: 	dc.b $2
00021718 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
0002171D F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
00021722 01                         Map_4a3c_3F2: 	dc.b $1
00021723 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00021728 02                         Map_4a3c_3F8: 	dc.b $2
00021729 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
0002172E 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
00021733 01                         Map_4a3c_403: 	dc.b $1
00021734 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00021739 02                         Map_4a3c_409: 	dc.b $2
0002173A ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
0002173F FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
00021744 04                         Map_4a3c_414: 	dc.b $4
00021745 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
0002174A FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
0002174F 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
00021754 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
00021759 04                         Map_4a3c_429: 	dc.b $4
0002175A F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
0002175F FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
00021764 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00021769 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
0002176E 03                         Map_4a3c_43E: 	dc.b $3
0002176F EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
00021774 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
00021779 F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
0002177E 03                         Map_4a3c_44E: 	dc.b $3
0002177F EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
00021784 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
00021789 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
0002178E 03                         Map_4a3c_45E: 	dc.b $3
0002178F F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00021794 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00021799 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
0002179E 02                         Map_4a3c_46E: 	dc.b $2
0002179F F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
000217A4 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
000217A9 03                         Map_4a3c_479: 	dc.b $3
000217AA F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
000217AF FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
000217B4 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
000217B9 03                         Map_4a3c_489: 	dc.b $3
000217BA F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000217BF FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
000217C4 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
000217C9 03                         Map_4a3c_499: 	dc.b $3
000217CA E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
000217CF 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
000217D4 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
000217D9 04                         Map_4a3c_4A9: 	dc.b $4
000217DA F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000217DF 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000217E4 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000217E9 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000217EE 04                         Map_4a3c_4BE: 	dc.b $4
000217EF F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
000217F4 0005 000C 08               	dc.b $0, $5, $0, $C, $8
000217F9 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
000217FE F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00021803 05                         Map_4a3c_4D3: 	dc.b $5
00021804 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00021809 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002180E 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00021813 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00021818 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002181D 05                         Map_4a3c_4ED: 	dc.b $5
0002181E E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00021823 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00021828 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002182D 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00021832 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00021837 02                         Map_4a3c_507: 	dc.b $2
00021838 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002183D 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
00021842 03                         Map_4a3c_512: 	dc.b $3
00021843 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00021848 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
0002184D 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
00021852 02                         Map_4a3c_522: 	dc.b $2
00021853 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
00021858 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002185D 03                         Map_4a3c_52D: 	dc.b $3
0002185E EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00021863 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00021868 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002186D 02                         Map_4a3c_53D: 	dc.b $2
0002186E EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00021873 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00021878 03                         Map_4a3c_548: 	dc.b $3
00021879 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002187E 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00021883 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00021888 03                         Map_4a3c_558: 	dc.b $3
00021889 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002188E E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00021893 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00021898 05                         Map_4a3c_568: 	dc.b $5
00021899 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002189E E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000218A3 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000218A8 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000218AD 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000218B2 05                         Map_4a3c_582: 	dc.b $5
000218B3 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000218B8 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000218BD F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
000218C2 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
000218C7 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
000218CC 02                         Map_4a3c_59C: 	dc.b $2
000218CD EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000218D2 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
000218D7 03                         Map_4a3c_5A7: 	dc.b $3
000218D8 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
000218DD F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
000218E2 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
000218E7 01                         Map_4a3c_5B7: 	dc.b $1
000218E8 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
000218ED 01                         Map_4a3c_5BD: 	dc.b $1
000218EE F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
000218F3 01                         Map_4a3c_5C3: 	dc.b $1
000218F4 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
000218F9 03                         Map_4a3c_5C9: 	dc.b $3
000218FA F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
000218FF FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
00021904 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
00021909 03                         Map_4a3c_5D9: 	dc.b $3
0002190A F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
0002190F FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
00021914 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
00021919 03                         Map_4a3c_5E9: 	dc.b $3
0002191A F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
0002191F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00021924 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
00021929 03                         Map_4a3c_5F9: 	dc.b $3
0002192A EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
0002192F FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00021934 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
00021939 02                         Map_4a3c_609: 	dc.b $2
0002193A F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
0002193F F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
00021944 02                         Map_4a3c_614: 	dc.b $2
00021945 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002194A EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00021950 00                         	even
00021950 00                         	even
00021950                            
00021950                            ; ---------------------------------------------------------------------------
00021950                            ; Uncompressed graphics	loading	array for Sonic
00021950                            ; ---------------------------------------------------------------------------
00021950                            SonicDynPLC:
00021950                            	include "_inc\Sonic dynamic pattern load cues.asm"
00021950                            DPLC_3cd8:
00021950 0000                       DPLC_3cd8_0: 	dc.w DPLC_3cd8_B2-DPLC_3cd8
00021952 0000                       DPLC_3cd8_2: 	dc.w DPLC_3cd8_B3-DPLC_3cd8
00021954 0000                       DPLC_3cd8_4: 	dc.w DPLC_3cd8_B8-DPLC_3cd8
00021956 0000                       DPLC_3cd8_6: 	dc.w DPLC_3cd8_BF-DPLC_3cd8
00021958 0000                       DPLC_3cd8_8: 	dc.w DPLC_3cd8_C6-DPLC_3cd8
0002195A 0000                       DPLC_3cd8_A: 	dc.w DPLC_3cd8_CD-DPLC_3cd8
0002195C 0000                       DPLC_3cd8_C: 	dc.w DPLC_3cd8_D4-DPLC_3cd8
0002195E 0000                       DPLC_3cd8_E: 	dc.w DPLC_3cd8_DD-DPLC_3cd8
00021960 0000                       DPLC_3cd8_10: 	dc.w DPLC_3cd8_E2-DPLC_3cd8
00021962 0000                       DPLC_3cd8_12: 	dc.w DPLC_3cd8_E7-DPLC_3cd8
00021964 0000                       DPLC_3cd8_14: 	dc.w DPLC_3cd8_F0-DPLC_3cd8
00021966 0000                       DPLC_3cd8_16: 	dc.w DPLC_3cd8_F5-DPLC_3cd8
00021968 0000                       DPLC_3cd8_18: 	dc.w DPLC_3cd8_FC-DPLC_3cd8
0002196A 0000                       DPLC_3cd8_1A: 	dc.w DPLC_3cd8_107-DPLC_3cd8
0002196C 0000                       DPLC_3cd8_1C: 	dc.w DPLC_3cd8_114-DPLC_3cd8
0002196E 0000                       DPLC_3cd8_1E: 	dc.w DPLC_3cd8_11D-DPLC_3cd8
00021970 0000                       DPLC_3cd8_20: 	dc.w DPLC_3cd8_128-DPLC_3cd8
00021972 0000                       DPLC_3cd8_22: 	dc.w DPLC_3cd8_131-DPLC_3cd8
00021974 0000                       DPLC_3cd8_24: 	dc.w DPLC_3cd8_13C-DPLC_3cd8
00021976 0000                       DPLC_3cd8_26: 	dc.w DPLC_3cd8_145-DPLC_3cd8
00021978 0000                       DPLC_3cd8_28: 	dc.w DPLC_3cd8_14A-DPLC_3cd8
0002197A 0000                       DPLC_3cd8_2A: 	dc.w DPLC_3cd8_14F-DPLC_3cd8
0002197C 0000                       DPLC_3cd8_2C: 	dc.w DPLC_3cd8_158-DPLC_3cd8
0002197E 0000                       DPLC_3cd8_2E: 	dc.w DPLC_3cd8_15D-DPLC_3cd8
00021980 0000                       DPLC_3cd8_30: 	dc.w DPLC_3cd8_164-DPLC_3cd8
00021982 0000                       DPLC_3cd8_32: 	dc.w DPLC_3cd8_171-DPLC_3cd8
00021984 0000                       DPLC_3cd8_34: 	dc.w DPLC_3cd8_17E-DPLC_3cd8
00021986 0000                       DPLC_3cd8_36: 	dc.w DPLC_3cd8_187-DPLC_3cd8
00021988 0000                       DPLC_3cd8_38: 	dc.w DPLC_3cd8_192-DPLC_3cd8
0002198A 0000                       DPLC_3cd8_3A: 	dc.w DPLC_3cd8_19B-DPLC_3cd8
0002198C 0000                       DPLC_3cd8_3C: 	dc.w DPLC_3cd8_1A6-DPLC_3cd8
0002198E 0000                       DPLC_3cd8_3E: 	dc.w DPLC_3cd8_1AB-DPLC_3cd8
00021990 0000                       DPLC_3cd8_40: 	dc.w DPLC_3cd8_1B0-DPLC_3cd8
00021992 0000                       DPLC_3cd8_42: 	dc.w DPLC_3cd8_1B5-DPLC_3cd8
00021994 0000                       DPLC_3cd8_44: 	dc.w DPLC_3cd8_1BA-DPLC_3cd8
00021996 0000                       DPLC_3cd8_46: 	dc.w DPLC_3cd8_1C3-DPLC_3cd8
00021998 0000                       DPLC_3cd8_48: 	dc.w DPLC_3cd8_1CA-DPLC_3cd8
0002199A 0000                       DPLC_3cd8_4A: 	dc.w DPLC_3cd8_1D3-DPLC_3cd8
0002199C 0000                       DPLC_3cd8_4C: 	dc.w DPLC_3cd8_1DA-DPLC_3cd8
0002199E 0000                       DPLC_3cd8_4E: 	dc.w DPLC_3cd8_1DF-DPLC_3cd8
000219A0 0000                       DPLC_3cd8_50: 	dc.w DPLC_3cd8_1E4-DPLC_3cd8
000219A2 0000                       DPLC_3cd8_52: 	dc.w DPLC_3cd8_1E9-DPLC_3cd8
000219A4 0000                       DPLC_3cd8_54: 	dc.w DPLC_3cd8_1EE-DPLC_3cd8
000219A6 0000                       DPLC_3cd8_56: 	dc.w DPLC_3cd8_1F7-DPLC_3cd8
000219A8 0000                       DPLC_3cd8_58: 	dc.w DPLC_3cd8_1FC-DPLC_3cd8
000219AA 0000                       DPLC_3cd8_5A: 	dc.w DPLC_3cd8_205-DPLC_3cd8
000219AC 0000                       DPLC_3cd8_5C: 	dc.w DPLC_3cd8_20A-DPLC_3cd8
000219AE 0000                       DPLC_3cd8_5E: 	dc.w DPLC_3cd8_20D-DPLC_3cd8
000219B0 0000                       DPLC_3cd8_60: 	dc.w DPLC_3cd8_210-DPLC_3cd8
000219B2 0000                       DPLC_3cd8_62: 	dc.w DPLC_3cd8_213-DPLC_3cd8
000219B4 0000                       DPLC_3cd8_64: 	dc.w DPLC_3cd8_216-DPLC_3cd8
000219B6 0000                       DPLC_3cd8_66: 	dc.w DPLC_3cd8_219-DPLC_3cd8
000219B8 0000                       DPLC_3cd8_68: 	dc.w DPLC_3cd8_21E-DPLC_3cd8
000219BA 0000                       DPLC_3cd8_6A: 	dc.w DPLC_3cd8_221-DPLC_3cd8
000219BC 0000                       DPLC_3cd8_6C: 	dc.w DPLC_3cd8_226-DPLC_3cd8
000219BE 0000                       DPLC_3cd8_6E: 	dc.w DPLC_3cd8_229-DPLC_3cd8
000219C0 0000                       DPLC_3cd8_70: 	dc.w DPLC_3cd8_22E-DPLC_3cd8
000219C2 0000                       DPLC_3cd8_72: 	dc.w DPLC_3cd8_237-DPLC_3cd8
000219C4 0000                       DPLC_3cd8_74: 	dc.w DPLC_3cd8_240-DPLC_3cd8
000219C6 0000                       DPLC_3cd8_76: 	dc.w DPLC_3cd8_247-DPLC_3cd8
000219C8 0000                       DPLC_3cd8_78: 	dc.w DPLC_3cd8_24E-DPLC_3cd8
000219CA 0000                       DPLC_3cd8_7A: 	dc.w DPLC_3cd8_255-DPLC_3cd8
000219CC 0000                       DPLC_3cd8_7C: 	dc.w DPLC_3cd8_258-DPLC_3cd8
000219CE 0000                       DPLC_3cd8_7E: 	dc.w DPLC_3cd8_25F-DPLC_3cd8
000219D0 0000                       DPLC_3cd8_80: 	dc.w DPLC_3cd8_266-DPLC_3cd8
000219D2 0000                       DPLC_3cd8_82: 	dc.w DPLC_3cd8_26D-DPLC_3cd8
000219D4 0000                       DPLC_3cd8_84: 	dc.w DPLC_3cd8_276-DPLC_3cd8
000219D6 0000                       DPLC_3cd8_86: 	dc.w DPLC_3cd8_27F-DPLC_3cd8
000219D8 0000                       DPLC_3cd8_88: 	dc.w DPLC_3cd8_28A-DPLC_3cd8
000219DA 0000                       DPLC_3cd8_8A: 	dc.w DPLC_3cd8_295-DPLC_3cd8
000219DC 0000                       DPLC_3cd8_8C: 	dc.w DPLC_3cd8_29A-DPLC_3cd8
000219DE 0000                       DPLC_3cd8_8E: 	dc.w DPLC_3cd8_2A1-DPLC_3cd8
000219E0 0000                       DPLC_3cd8_90: 	dc.w DPLC_3cd8_2A6-DPLC_3cd8
000219E2 0000                       DPLC_3cd8_92: 	dc.w DPLC_3cd8_2AD-DPLC_3cd8
000219E4 0000                       DPLC_3cd8_94: 	dc.w DPLC_3cd8_2B2-DPLC_3cd8
000219E6 0000                       DPLC_3cd8_96: 	dc.w DPLC_3cd8_2B9-DPLC_3cd8
000219E8 0000                       DPLC_3cd8_98: 	dc.w DPLC_3cd8_2C0-DPLC_3cd8
000219EA 0000                       DPLC_3cd8_9A: 	dc.w DPLC_3cd8_2CB-DPLC_3cd8
000219EC 0000                       DPLC_3cd8_9C: 	dc.w DPLC_3cd8_2D6-DPLC_3cd8
000219EE 0000                       DPLC_3cd8_9E: 	dc.w DPLC_3cd8_2DB-DPLC_3cd8
000219F0 0000                       DPLC_3cd8_A0: 	dc.w DPLC_3cd8_2E2-DPLC_3cd8
000219F2 0000                       DPLC_3cd8_A2: 	dc.w DPLC_3cd8_2E5-DPLC_3cd8
000219F4 0000                       DPLC_3cd8_A4: 	dc.w DPLC_3cd8_2E8-DPLC_3cd8
000219F6 0000                       DPLC_3cd8_A6: 	dc.w DPLC_3cd8_2EB-DPLC_3cd8
000219F8 0000                       DPLC_3cd8_A8: 	dc.w DPLC_3cd8_2F2-DPLC_3cd8
000219FA 0000                       DPLC_3cd8_AA: 	dc.w DPLC_3cd8_2F9-DPLC_3cd8
000219FC 0000                       DPLC_3cd8_AC: 	dc.w DPLC_3cd8_300-DPLC_3cd8
000219FE 0000                       DPLC_3cd8_AE: 	dc.w DPLC_3cd8_307-DPLC_3cd8
00021A00 0000                       DPLC_3cd8_B0: 	dc.w DPLC_3cd8_30C-DPLC_3cd8
00021A02 00                         DPLC_3cd8_B2: 	dc.b $0
00021A03 02                         DPLC_3cd8_B3: 	dc.b $2
00021A04 F000                       	dc.b $F0, $0
00021A06 1010                       	dc.b $10, $10
00021A08 03                         DPLC_3cd8_B8: 	dc.b $3
00021A09 5012                       	dc.b $50, $12
00021A0B 5018                       	dc.b $50, $18
00021A0D 201E                       	dc.b $20, $1E
00021A0F 03                         DPLC_3cd8_BF: 	dc.b $3
00021A10 5021                       	dc.b $50, $21
00021A12 5018                       	dc.b $50, $18
00021A14 201E                       	dc.b $20, $1E
00021A16 03                         DPLC_3cd8_C6: 	dc.b $3
00021A17 5021                       	dc.b $50, $21
00021A19 5018                       	dc.b $50, $18
00021A1B 2027                       	dc.b $20, $27
00021A1D 03                         DPLC_3cd8_CD: 	dc.b $3
00021A1E 802A                       	dc.b $80, $2A
00021A20 2033                       	dc.b $20, $33
00021A22 2036                       	dc.b $20, $36
00021A24 04                         DPLC_3cd8_D4: 	dc.b $4
00021A25 7039                       	dc.b $70, $39
00021A27 5041                       	dc.b $50, $41
00021A29 5047                       	dc.b $50, $47
00021A2B 104D                       	dc.b $10, $4D
00021A2D 02                         DPLC_3cd8_DD: 	dc.b $2
00021A2E 7039                       	dc.b $70, $39
00021A30 B04F                       	dc.b $B0, $4F
00021A32 02                         DPLC_3cd8_E2: 	dc.b $2
00021A33 505B                       	dc.b $50, $5B
00021A35 8061                       	dc.b $80, $61
00021A37 04                         DPLC_3cd8_E7: 	dc.b $4
00021A38 505B                       	dc.b $50, $5B
00021A3A 506A                       	dc.b $50, $6A
00021A3C 5070                       	dc.b $50, $70
00021A3E 1076                       	dc.b $10, $76
00021A40 02                         DPLC_3cd8_F0: 	dc.b $2
00021A41 505B                       	dc.b $50, $5B
00021A43 B078                       	dc.b $B0, $78
00021A45 03                         DPLC_3cd8_F5: 	dc.b $3
00021A46 7039                       	dc.b $70, $39
00021A48 3084                       	dc.b $30, $84
00021A4A 5088                       	dc.b $50, $88
00021A4C 05                         DPLC_3cd8_FC: 	dc.b $5
00021A4D 508E                       	dc.b $50, $8E
00021A4F 5094                       	dc.b $50, $94
00021A51 209A                       	dc.b $20, $9A
00021A53 509D                       	dc.b $50, $9D
00021A55 00A3                       	dc.b $0, $A3
00021A57 06                         DPLC_3cd8_107: 	dc.b $6
00021A58 508E                       	dc.b $50, $8E
00021A5A 10A4                       	dc.b $10, $A4
00021A5C 30A6                       	dc.b $30, $A6
00021A5E 50AA                       	dc.b $50, $AA
00021A60 30B0                       	dc.b $30, $B0
00021A62 00B4                       	dc.b $0, $B4
00021A64 04                         DPLC_3cd8_114: 	dc.b $4
00021A65 50B5                       	dc.b $50, $B5
00021A67 10BB                       	dc.b $10, $BB
00021A69 70BD                       	dc.b $70, $BD
00021A6B 20C5                       	dc.b $20, $C5
00021A6D 05                         DPLC_3cd8_11D: 	dc.b $5
00021A6E 50C8                       	dc.b $50, $C8
00021A70 30CE                       	dc.b $30, $CE
00021A72 70D2                       	dc.b $70, $D2
00021A74 20DA                       	dc.b $20, $DA
00021A76 10DD                       	dc.b $10, $DD
00021A78 04                         DPLC_3cd8_128: 	dc.b $4
00021A79 50C8                       	dc.b $50, $C8
00021A7B 10DF                       	dc.b $10, $DF
00021A7D 70E1                       	dc.b $70, $E1
00021A7F 20E9                       	dc.b $20, $E9
00021A81 05                         DPLC_3cd8_131: 	dc.b $5
00021A82 508E                       	dc.b $50, $8E
00021A84 10A4                       	dc.b $10, $A4
00021A86 009A                       	dc.b $0, $9A
00021A88 70EC                       	dc.b $70, $EC
00021A8A 20F4                       	dc.b $20, $F4
00021A8C 04                         DPLC_3cd8_13C: 	dc.b $4
00021A8D 70F7                       	dc.b $70, $F7
00021A8F 50FF                       	dc.b $50, $FF
00021A91 1105                       	dc.b $11, $5
00021A93 5107                       	dc.b $51, $7
00021A95 02                         DPLC_3cd8_145: 	dc.b $2
00021A96 70F7                       	dc.b $70, $F7
00021A98 B10D                       	dc.b $B1, $D
00021A9A 02                         DPLC_3cd8_14A: 	dc.b $2
00021A9B 5119                       	dc.b $51, $19
00021A9D 811F                       	dc.b $81, $1F
00021A9F 04                         DPLC_3cd8_14F: 	dc.b $4
00021AA0 5119                       	dc.b $51, $19
00021AA2 5128                       	dc.b $51, $28
00021AA4 112E                       	dc.b $11, $2E
00021AA6 5130                       	dc.b $51, $30
00021AA8 02                         DPLC_3cd8_158: 	dc.b $2
00021AA9 5119                       	dc.b $51, $19
00021AAB B136                       	dc.b $B1, $36
00021AAD 03                         DPLC_3cd8_15D: 	dc.b $3
00021AAE 70F7                       	dc.b $70, $F7
00021AB0 010D                       	dc.b $1, $D
00021AB2 8142                       	dc.b $81, $42
00021AB4 06                         DPLC_3cd8_164: 	dc.b $6
00021AB5 514B                       	dc.b $51, $4B
00021AB7 1151                       	dc.b $11, $51
00021AB9 1153                       	dc.b $11, $53
00021ABB 8155                       	dc.b $81, $55
00021ABD 015E                       	dc.b $1, $5E
00021ABF 015F                       	dc.b $1, $5F
00021AC1 06                         DPLC_3cd8_171: 	dc.b $6
00021AC2 514B                       	dc.b $51, $4B
00021AC4 2160                       	dc.b $21, $60
00021AC6 1163                       	dc.b $11, $63
00021AC8 1165                       	dc.b $11, $65
00021ACA 8167                       	dc.b $81, $67
00021ACC 015E                       	dc.b $1, $5E
00021ACE 04                         DPLC_3cd8_17E: 	dc.b $4
00021ACF 5170                       	dc.b $51, $70
00021AD1 1176                       	dc.b $11, $76
00021AD3 8178                       	dc.b $81, $78
00021AD5 1181                       	dc.b $11, $81
00021AD7 05                         DPLC_3cd8_187: 	dc.b $5
00021AD8 5183                       	dc.b $51, $83
00021ADA 2189                       	dc.b $21, $89
00021ADC 118C                       	dc.b $11, $8C
00021ADE 718E                       	dc.b $71, $8E
00021AE0 2196                       	dc.b $21, $96
00021AE2 04                         DPLC_3cd8_192: 	dc.b $4
00021AE3 5183                       	dc.b $51, $83
00021AE5 1199                       	dc.b $11, $99
00021AE7 819B                       	dc.b $81, $9B
00021AE9 11A4                       	dc.b $11, $A4
00021AEB 05                         DPLC_3cd8_19B: 	dc.b $5
00021AEC 514B                       	dc.b $51, $4B
00021AEE 81A6                       	dc.b $81, $A6
00021AF0 1165                       	dc.b $11, $65
00021AF2 11AF                       	dc.b $11, $AF
00021AF4 015E                       	dc.b $1, $5E
00021AF6 02                         DPLC_3cd8_1A6: 	dc.b $2
00021AF7 51B1                       	dc.b $51, $B1
00021AF9 B1B7                       	dc.b $B1, $B7
00021AFB 02                         DPLC_3cd8_1AB: 	dc.b $2
00021AFC 505B                       	dc.b $50, $5B
00021AFE B1C3                       	dc.b $B1, $C3
00021B00 02                         DPLC_3cd8_1B0: 	dc.b $2
00021B01 51B1                       	dc.b $51, $B1
00021B03 B1CF                       	dc.b $B1, $CF
00021B05 02                         DPLC_3cd8_1B5: 	dc.b $2
00021B06 505B                       	dc.b $50, $5B
00021B08 B1DB                       	dc.b $B1, $DB
00021B0A 04                         DPLC_3cd8_1BA: 	dc.b $4
00021B0B 51E7                       	dc.b $51, $E7
00021B0D 11ED                       	dc.b $11, $ED
00021B0F B1EF                       	dc.b $B1, $EF
00021B11 01FB                       	dc.b $1, $FB
00021B13 03                         DPLC_3cd8_1C3: 	dc.b $3
00021B14 51FC                       	dc.b $51, $FC
00021B16 1202                       	dc.b $12, $2
00021B18 B204                       	dc.b $B2, $4
00021B1A 04                         DPLC_3cd8_1CA: 	dc.b $4
00021B1B 51E7                       	dc.b $51, $E7
00021B1D 1210                       	dc.b $12, $10
00021B1F B212                       	dc.b $B2, $12
00021B21 01FB                       	dc.b $1, $FB
00021B23 03                         DPLC_3cd8_1D3: 	dc.b $3
00021B24 51FC                       	dc.b $51, $FC
00021B26 1202                       	dc.b $12, $2
00021B28 B21E                       	dc.b $B2, $1E
00021B2A 02                         DPLC_3cd8_1DA: 	dc.b $2
00021B2B 522A                       	dc.b $52, $2A
00021B2D B230                       	dc.b $B2, $30
00021B2F 02                         DPLC_3cd8_1DF: 	dc.b $2
00021B30 5119                       	dc.b $51, $19
00021B32 B23C                       	dc.b $B2, $3C
00021B34 02                         DPLC_3cd8_1E4: 	dc.b $2
00021B35 522A                       	dc.b $52, $2A
00021B37 B248                       	dc.b $B2, $48
00021B39 02                         DPLC_3cd8_1E9: 	dc.b $2
00021B3A 5119                       	dc.b $51, $19
00021B3C B254                       	dc.b $B2, $54
00021B3E 04                         DPLC_3cd8_1EE: 	dc.b $4
00021B3F 5260                       	dc.b $52, $60
00021B41 1266                       	dc.b $12, $66
00021B43 B268                       	dc.b $B2, $68
00021B45 0274                       	dc.b $2, $74
00021B47 02                         DPLC_3cd8_1F7: 	dc.b $2
00021B48 7275                       	dc.b $72, $75
00021B4A B27D                       	dc.b $B2, $7D
00021B4C 04                         DPLC_3cd8_1FC: 	dc.b $4
00021B4D 5260                       	dc.b $52, $60
00021B4F 1289                       	dc.b $12, $89
00021B51 B28B                       	dc.b $B2, $8B
00021B53 0274                       	dc.b $2, $74
00021B55 02                         DPLC_3cd8_205: 	dc.b $2
00021B56 7275                       	dc.b $72, $75
00021B58 B297                       	dc.b $B2, $97
00021B5A 01                         DPLC_3cd8_20A: 	dc.b $1
00021B5B F2A3                       	dc.b $F2, $A3
00021B5D 01                         DPLC_3cd8_20D: 	dc.b $1
00021B5E F2B3                       	dc.b $F2, $B3
00021B60 01                         DPLC_3cd8_210: 	dc.b $1
00021B61 F2C3                       	dc.b $F2, $C3
00021B63 01                         DPLC_3cd8_213: 	dc.b $1
00021B64 F2D3                       	dc.b $F2, $D3
00021B66 01                         DPLC_3cd8_216: 	dc.b $1
00021B67 F2E3                       	dc.b $F2, $E3
00021B69 02                         DPLC_3cd8_219: 	dc.b $2
00021B6A B2F3                       	dc.b $B2, $F3
00021B6C 22FF                       	dc.b $22, $FF
00021B6E 01                         DPLC_3cd8_21E: 	dc.b $1
00021B6F F302                       	dc.b $F3, $2
00021B71 02                         DPLC_3cd8_221: 	dc.b $2
00021B72 B312                       	dc.b $B3, $12
00021B74 231E                       	dc.b $23, $1E
00021B76 01                         DPLC_3cd8_226: 	dc.b $1
00021B77 F321                       	dc.b $F3, $21
00021B79 02                         DPLC_3cd8_229: 	dc.b $2
00021B7A 5331                       	dc.b $53, $31
00021B7C B337                       	dc.b $B3, $37
00021B7E 04                         DPLC_3cd8_22E: 	dc.b $4
00021B7F 5343                       	dc.b $53, $43
00021B81 7349                       	dc.b $73, $49
00021B83 1351                       	dc.b $13, $51
00021B85 0353                       	dc.b $3, $53
00021B87 04                         DPLC_3cd8_237: 	dc.b $4
00021B88 1354                       	dc.b $13, $54
00021B8A 7356                       	dc.b $73, $56
00021B8C 235E                       	dc.b $23, $5E
00021B8E 0361                       	dc.b $3, $61
00021B90 03                         DPLC_3cd8_240: 	dc.b $3
00021B91 2362                       	dc.b $23, $62
00021B93 2365                       	dc.b $23, $65
00021B95 F368                       	dc.b $F3, $68
00021B97 03                         DPLC_3cd8_247: 	dc.b $3
00021B98 B378                       	dc.b $B3, $78
00021B9A 7384                       	dc.b $73, $84
00021B9C 0078                       	dc.b $0, $78
00021B9E 03                         DPLC_3cd8_24E: 	dc.b $3
00021B9F 738C                       	dc.b $73, $8C
00021BA1 3394                       	dc.b $33, $94
00021BA3 2398                       	dc.b $23, $98
00021BA5 01                         DPLC_3cd8_255: 	dc.b $1
00021BA6 839B                       	dc.b $83, $9B
00021BA8 03                         DPLC_3cd8_258: 	dc.b $3
00021BA9 73A4                       	dc.b $73, $A4
00021BAB 03AC                       	dc.b $3, $AC
00021BAD 33AD                       	dc.b $33, $AD
00021BAF 03                         DPLC_3cd8_25F: 	dc.b $3
00021BB0 73B1                       	dc.b $73, $B1
00021BB2 33B9                       	dc.b $33, $B9
00021BB4 23BD                       	dc.b $23, $BD
00021BB6 03                         DPLC_3cd8_266: 	dc.b $3
00021BB7 B3C0                       	dc.b $B3, $C0
00021BB9 13CC                       	dc.b $13, $CC
00021BBB 03CE                       	dc.b $3, $CE
00021BBD 04                         DPLC_3cd8_26D: 	dc.b $4
00021BBE B3CF                       	dc.b $B3, $CF
00021BC0 33DB                       	dc.b $33, $DB
00021BC2 03DF                       	dc.b $3, $DF
00021BC4 03E0                       	dc.b $3, $E0
00021BC6 04                         DPLC_3cd8_276: 	dc.b $4
00021BC7 B3E1                       	dc.b $B3, $E1
00021BC9 33ED                       	dc.b $33, $ED
00021BCB 03F1                       	dc.b $3, $F1
00021BCD 03F2                       	dc.b $3, $F2
00021BCF 05                         DPLC_3cd8_27F: 	dc.b $5
00021BD0 83F3                       	dc.b $83, $F3
00021BD2 13FC                       	dc.b $13, $FC
00021BD4 53FE                       	dc.b $53, $FE
00021BD6 1404                       	dc.b $14, $4
00021BD8 0406                       	dc.b $4, $6
00021BDA 05                         DPLC_3cd8_28A: 	dc.b $5
00021BDB 8407                       	dc.b $84, $7
00021BDD 1410                       	dc.b $14, $10
00021BDF 53FE                       	dc.b $53, $FE
00021BE1 1404                       	dc.b $14, $4
00021BE3 0406                       	dc.b $4, $6
00021BE5 02                         DPLC_3cd8_295: 	dc.b $2
00021BE6 8412                       	dc.b $84, $12
00021BE8 741B                       	dc.b $74, $1B
00021BEA 03                         DPLC_3cd8_29A: 	dc.b $3
00021BEB 8423                       	dc.b $84, $23
00021BED 242C                       	dc.b $24, $2C
00021BEF 142F                       	dc.b $14, $2F
00021BF1 02                         DPLC_3cd8_2A1: 	dc.b $2
00021BF2 8431                       	dc.b $84, $31
00021BF4 743A                       	dc.b $74, $3A
00021BF6 03                         DPLC_3cd8_2A6: 	dc.b $3
00021BF7 8423                       	dc.b $84, $23
00021BF9 2442                       	dc.b $24, $42
00021BFB 1445                       	dc.b $14, $45
00021BFD 02                         DPLC_3cd8_2AD: 	dc.b $2
00021BFE 5447                       	dc.b $54, $47
00021C00 B44D                       	dc.b $B4, $4D
00021C02 03                         DPLC_3cd8_2B2: 	dc.b $3
00021C03 8459                       	dc.b $84, $59
00021C05 3462                       	dc.b $34, $62
00021C07 0466                       	dc.b $4, $66
00021C09 03                         DPLC_3cd8_2B9: 	dc.b $3
00021C0A 7467                       	dc.b $74, $67
00021C0C 146F                       	dc.b $14, $6F
00021C0E B471                       	dc.b $B4, $71
00021C10 05                         DPLC_3cd8_2C0: 	dc.b $5
00021C11 747D                       	dc.b $74, $7D
00021C13 1485                       	dc.b $14, $85
00021C15 5487                       	dc.b $54, $87
00021C17 348D                       	dc.b $34, $8D
00021C19 0491                       	dc.b $4, $91
00021C1B 05                         DPLC_3cd8_2CB: 	dc.b $5
00021C1C 7492                       	dc.b $74, $92
00021C1E 1485                       	dc.b $14, $85
00021C20 549A                       	dc.b $54, $9A
00021C22 348D                       	dc.b $34, $8D
00021C24 0491                       	dc.b $4, $91
00021C26 02                         DPLC_3cd8_2D6: 	dc.b $2
00021C27 24A0                       	dc.b $24, $A0
00021C29 F4A3                       	dc.b $F4, $A3
00021C2B 03                         DPLC_3cd8_2DB: 	dc.b $3
00021C2C 24B3                       	dc.b $24, $B3
00021C2E B4B6                       	dc.b $B4, $B6
00021C30 24C2                       	dc.b $24, $C2
00021C32 01                         DPLC_3cd8_2E2: 	dc.b $1
00021C33 B4C5                       	dc.b $B4, $C5
00021C35 01                         DPLC_3cd8_2E5: 	dc.b $1
00021C36 54D1                       	dc.b $54, $D1
00021C38 01                         DPLC_3cd8_2E8: 	dc.b $1
00021C39 14D7                       	dc.b $14, $D7
00021C3B 03                         DPLC_3cd8_2EB: 	dc.b $3
00021C3C 738C                       	dc.b $73, $8C
00021C3E 3394                       	dc.b $33, $94
00021C40 2398                       	dc.b $23, $98
00021C42 03                         DPLC_3cd8_2F2: 	dc.b $3
00021C43 73A4                       	dc.b $73, $A4
00021C45 03AC                       	dc.b $3, $AC
00021C47 33AD                       	dc.b $33, $AD
00021C49 03                         DPLC_3cd8_2F9: 	dc.b $3
00021C4A B4D9                       	dc.b $B4, $D9
00021C4C 14E5                       	dc.b $14, $E5
00021C4E 34E7                       	dc.b $34, $E7
00021C50 03                         DPLC_3cd8_300: 	dc.b $3
00021C51 54EB                       	dc.b $54, $EB
00021C53 B4F1                       	dc.b $B4, $F1
00021C55 1074                       	dc.b $10, $74
00021C57 02                         DPLC_3cd8_307: 	dc.b $2
00021C58 F4FD                       	dc.b $F4, $FD
00021C5A 250D                       	dc.b $25, $D
00021C5C 02                         DPLC_3cd8_30C: 	dc.b $2
00021C5D F510                       	dc.b $F5, $10
00021C5F 1520                       	dc.b $15, $20
00021C62 00                         	even
00021C62 00                         	even
00021C62                            
00021C62                            ; ---------------------------------------------------------------------------
00021C62                            ; Uncompressed graphics	- Sonic
00021C62                            ; ---------------------------------------------------------------------------
00021C62                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002C0A2                            		even
0002C0A2                            ; ---------------------------------------------------------------------------
0002C0A2                            ; Compressed graphics - various
0002C0A2                            ; ---------------------------------------------------------------------------
0002C0A2                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002C1A6                            		even
0002C1A6                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002C1E0                            		even
0002C1E0                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002C376                            		even
0002C376                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002C4BE                            		even
0002C4BE                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002C5C8                            		even
0002C5C8                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002C61A                            		even
0002C61A                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002C862                            		even
0002C862                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002C9E8                            		even
0002C9E8                            ; ---------------------------------------------------------------------------
0002C9E8                            ; Sprite mappings - walls of the special stage
0002C9E8                            ; ---------------------------------------------------------------------------
0002C9E8                            Map_SSWalls:
0002C9E8                            	include "_maps\SSwalls.asm"
0002C9E8                            ; ---------------------------------------------------------------------------
0002C9E8                            ; Sprite mappings - walls of the special stage
0002C9E8                            ; ---------------------------------------------------------------------------
0002C9E8 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002C9EC 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002C9F0 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002C9F4 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002C9F8 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002C9FC 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002CA00 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002CA04 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002CA08 01                         byte_2C584:	dc.b 1
0002CA09 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002CA0E 01                         byte_2C58A:	dc.b 1
0002CA0F F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002CA14 01                         byte_2C590:	dc.b 1
0002CA15 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002CA1A 01                         byte_2C596:	dc.b 1
0002CA1B F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002CA20 01                         byte_2C59C:	dc.b 1
0002CA21 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002CA26 01                         byte_2C5A2:	dc.b 1
0002CA27 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002CA2C 01                         byte_2C5A8:	dc.b 1
0002CA2D F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002CA32 01                         byte_2C5AE:	dc.b 1
0002CA33 F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002CA38 01                         byte_2C5B4:	dc.b 1
0002CA39 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002CA3E 01                         byte_2C5BA:	dc.b 1
0002CA3F F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002CA44 01                         byte_2C5C0:	dc.b 1
0002CA45 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002CA4A 01                         byte_2C5C6:	dc.b 1
0002CA4B F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002CA50 01                         byte_2C5CC:	dc.b 1
0002CA51 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002CA56 01                         byte_2C5D2:	dc.b 1
0002CA57 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002CA5C 01                         byte_2C5D8:	dc.b 1
0002CA5D F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002CA62 01                         byte_2C5DE:	dc.b 1
0002CA63 F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002CA68                            		even
0002CA68                            		even
0002CA68                            ; ---------------------------------------------------------------------------
0002CA68                            ; Compressed graphics - special stage
0002CA68                            ; ---------------------------------------------------------------------------
0002CA68                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002D3A0                            		even
0002D3A0                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002D4D4                            		even
0002D4D4                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002E164                            		even
0002E164                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002E464                            		even
0002E464                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0002E958                            		even
0002E958                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0002EA46                            		even
0002EA46                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0002EB16                            		even
0002EB16                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0002EC0C                            		even
0002EC0C                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0002EC6A                            		even
0002EC6A                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0002ECFC                            		even
0002ECFC                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0002EDBE                            		even
0002EDBE                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0002EE8C                            		even
0002EE8C                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0002EF58                            		even
0002EF58                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0002F020                            		even
0002F020                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0002F0EA                            		even
0002F0EA                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0002F1BA                            		even
0002F1BA                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0002F3AE                            		even
0002F3AE                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0002F516                            		even
0002F516                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0002F5C6                            		even
0002F5C6                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0002F6A0                            		even
0002F6A0                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0002F724                            		even
0002F724                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0002F8A2                            		even
0002F8A2                            ; ---------------------------------------------------------------------------
0002F8A2                            ; Compressed graphics - GHZ stuff
0002F8A2                            ; ---------------------------------------------------------------------------
0002F8A2                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0002F8EC                            		even
0002F8EC                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0002FA06                            		even
0002FA06                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0002FAF2                            		even
0002FAF2                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0002FB3A                            		even
0002FB3A                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0002FCD8                            		even
0002FCD8                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0002FD54                            		even
0002FD54                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0002FF68                            		even
0002FF68                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
00030094                            		even
00030094                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
000301C2                            		even
000301C2                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00030260                            		even
00030260                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
000302C0                            		even
000302C0                            ; ---------------------------------------------------------------------------
000302C0                            ; Compressed graphics - LZ stuff
000302C0                            ; ---------------------------------------------------------------------------
000302C0                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
000303E4                            		even
000303E4                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00030BD8                            		even
00030BD8                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00030D58                            		even
00030D58                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00030EC2                            		even
00030EC2                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00031518                            		even
00031518                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
000315CE                            		even
000315CE                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
00031670                            		even
00031670                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
000317CC                            		even
000317CC                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
00031830                            		even
00031830                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
00031982                            		even
00031982                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
00031E64                            		even
00031E64                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00031FD4                            		even
00031FD4                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003228C                            		even
0003228C                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
000323C4                            		even
000323C4                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
000324EE                            		even
000324EE                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
000325FE                            		even
000325FE                            ; ---------------------------------------------------------------------------
000325FE                            ; Compressed graphics - MZ stuff
000325FE                            ; ---------------------------------------------------------------------------
000325FE                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003288C                            		even
0003288C                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0003294A                            		even
0003294A                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
00032A02                            		even
00032A02                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
00032A56                            		even
00032A56                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00032D34                            		even
00032D34                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0003364A                            		even
0003364A                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000337AE                            		even
000337AE                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00033836                            		even
00033836                            ; ---------------------------------------------------------------------------
00033836                            ; Compressed graphics - SLZ stuff
00033836                            ; ---------------------------------------------------------------------------
00033836                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
00033A72                            		even
00033A72                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00033BB8                            		even
00033BB8                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00033DFC                            		even
00033DFC                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
00033E5E                            		even
00033E5E                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00033F40                            		even
00033F40                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00034122                            		even
00034122                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003422E                            		even
0003422E                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
000342D2                            		even
000342D2                            ; ---------------------------------------------------------------------------
000342D2                            ; Compressed graphics - SYZ stuff
000342D2                            ; ---------------------------------------------------------------------------
000342D2                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003443C                            		even
0003443C                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003449E                            		even
0003449E                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
00034580                            		even
00034580                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003480E                            		even
0003480E                            ; ---------------------------------------------------------------------------
0003480E                            ; Compressed graphics - SBZ stuff
0003480E                            ; ---------------------------------------------------------------------------
0003480E                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
00034862                            		even
00034862                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
00034AFE                            		even
00034AFE                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
00034D02                            		even
00034D02                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
00034EA0                            		even
00034EA0                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
000351D0                            		even
000351D0                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
000353AE                            		even
000353AE                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00035406                            		even
00035406                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
00035586                            		even
00035586                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
00035684                            		even
00035684                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
00035810                            		even
00035810                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
00035860                            		even
00035860                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
000358B8                            		even
000358B8                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
000359B4                            		even
000359B4                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00035ACA                            		even
00035ACA                            ; ---------------------------------------------------------------------------
00035ACA                            ; Compressed graphics - enemies
00035ACA                            ; ---------------------------------------------------------------------------
00035ACA                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
00035E8A                            		even
00035E8A                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00036378                            		even
00036378                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003673A 00                         		even
0003673A                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00036922                            		even
00036922                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003700C                            		even
0003700C                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00037274                            		even
00037274                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
000374FE                            		even
000374FE                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00037A22                            		even
00037A22                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
00037CAC                            		even
00037CAC                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
000382CA                            		even
000382CA                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
000386B2                            		even
000386B2                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
000389AE                            		even
000389AE                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00038BF6                            		even
00038BF6                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
00038E8E                            		even
00038E8E                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0003906C                            		even
0003906C                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
000391FA                            		even
000391FA                            ; ---------------------------------------------------------------------------
000391FA                            ; Compressed graphics - various
000391FA                            ; ---------------------------------------------------------------------------
000391FA                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00039808                            		even
00039808                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
000398FE                            		even
000398FE                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00039A04                            		even
00039A04                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00039AF8                            		even
00039AF8                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00039F50                            		even
00039F50                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003A5B6                            		even
0003A5B6                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003A666                            		even
0003A666                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003A7F8                            		even
0003A7F8                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003A8FA                            		even
0003A8FA                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003A9D6                            		even
0003A9D6                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003AE52                            		even
0003AE52                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003AF12                            		even
0003AF12                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003B086                            		even
0003B086                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003B388                            		even
0003B388                            ; ---------------------------------------------------------------------------
0003B388                            ; Compressed graphics - continue screen
0003B388                            ; ---------------------------------------------------------------------------
0003B388                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003B638                            		even
0003B638                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003B872                            		even
0003B872                            ; ---------------------------------------------------------------------------
0003B872                            ; Compressed graphics - animals
0003B872                            ; ---------------------------------------------------------------------------
0003B872                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003B9CA                            		even
0003B9CA                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003BB26                            		even
0003BB26                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003BCA2                            		even
0003BCA2                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003BDBE                            		even
0003BDBE                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003BEF4                            		even
0003BEF4                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003C02E                            		even
0003C02E                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003C18A                            		even
0003C18A                            ; ---------------------------------------------------------------------------
0003C18A                            ; Compressed graphics - primary patterns and block mappings
0003C18A                            ; ---------------------------------------------------------------------------
0003C18A                            Blk16_GHZ:	incbin	map16\ghz.bin
0003CA9E                            		even
0003CA9E                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0003E0B0                            		even
0003E0B0                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0003F444                            		even
0003F444                            Blk256_GHZ:	incbin	map256\ghz.bin
000414FE                            		even
000414FE                            Blk16_LZ:	incbin	map16\lz.bin
00041828                            		even
00041828                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00043370                            		even
00043370                            Blk256_LZ:	incbin	map256\lz.bin
00045B60                            		even
00045B60                            Blk16_MZ:	incbin	map16\mz.bin
0004636A                            		even
0004636A                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
00048BAE                            		even
00048BAE                            Blk256_MZ:	incbin	map256\mz.bin
0004A36E                            		even
0004A36E                            Blk16_SLZ:	incbin	map16\slz.bin
0004A654                            		even
0004A654                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004B776                            		even
0004B776                            Blk256_SLZ:	incbin	map256\slz.bin
0004B930                            		even
0004B930                            Blk16_SYZ:	incbin	map16\syz.bin
0004C1C4                            		even
0004C1C4                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0004F832                            		even
0004F832                            Blk256_SYZ:	incbin	map256\syz.bin
00051BB4                            		even
00051BB4                            Blk16_SBZ:	incbin	map16\sbz.bin
00052A4E                            		even
00052A4E                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
000551FA                            		even
000551FA                            Blk256_SBZ:	incbin	map256\sbz.bin
00057C4A                            		even
00057C4A                            ; ---------------------------------------------------------------------------
00057C4A                            ; Compressed graphics - bosses and ending sequence
00057C4A                            ; ---------------------------------------------------------------------------
00057C4A                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00058508 00                         		even
00058508                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
000587F2                            		even
000587F2                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
00059076                            		even
00059076                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
000598A2                            		even
000598A2                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005A00A                            		even
0005A00A                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005A58A                            		even
0005A58A                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005A6AA                            		even
0005A6AA                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005A8A8                            		even
0005A8A8                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0005BA86                            		even
0005BA86                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0005C3CA                            		even
0005C3CA                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0005C7A0                            		even
0005C7A0                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0005CD30                            		even
0005CD30                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0005CFB8                            		even
0005CFB8                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0005D5B6                            		even
0005D5B6                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0005D83E                            		even
0005D83E                            		incbin	misc\padding2.bin
0005D942                            		even
0005D942                            ; ---------------------------------------------------------------------------
0005D942                            ; Collision data
0005D942                            ; ---------------------------------------------------------------------------
0005D942                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0005DA42                            		even
0005DA42                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
0005EA42                            		even
0005EA42                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
0005FA42                            		even
0005FA42                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
0005FBFA 00                         		even
0005FBFA                            Col_LZ:		incbin	collide\lz.bin		; LZ index
0005FCC2                            		even
0005FCC2                            Col_MZ:		incbin	collide\mz.bin		; MZ index
0005FE52                            		even
0005FE52                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00060046                            		even
00060046                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0006023A                            		even
0006023A                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00060492                            		even
00060492                            ; ---------------------------------------------------------------------------
00060492                            ; Special layouts
00060492                            ; ---------------------------------------------------------------------------
00060492                            SS_1:		incbin	sslayout\1.bin
0006070C                            		even
0006070C                            SS_2:		incbin	sslayout\2.bin
00060B1E                            		even
00060B1E                            SS_3:		incbin	sslayout\3.bin
00060E7A                            		even
00060E7A                            SS_4:		incbin	sslayout\4.bin
00061354                            		even
00061354                            SS_5:		incbin	sslayout\5.bin
00061826                            		even
00061826                            SS_6:		incbin	sslayout\6.bin
00061B36                            		even
00061B36                            ; ---------------------------------------------------------------------------
00061B36                            ; Animated uncompressed graphics
00061B36                            ; ---------------------------------------------------------------------------
00061B36                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00061D36                            		even
00061D36                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
00062136                            		even
00062136                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
000625B6                            		even
000625B6                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
000628B6                            		even
000628B6                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00062EB6                            		even
00062EB6                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
000631B6                            		even
000631B6                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00063C36                            		even
00063C36                            
00063C36                            ; ---------------------------------------------------------------------------
00063C36                            ; Level	layout index
00063C36                            ; ---------------------------------------------------------------------------
00063C36 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00063C3C 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00063C42 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00063C48 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00063C4E 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00063C54 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00063C5A 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00063C60 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00063C66 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00063C6C 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00063C72 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00063C78 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00063C7E 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00063C84 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00063C8A 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00063C90 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00063C96 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00063C9C 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00063CA2 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00063CA8 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00063CAE 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00063CB4 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00063CBA 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00063CC0 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00063CC6 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00063CCC 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00063CD2 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00063CD8 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00063CDE                            
00063CDE                            Level_GHZ1:	incbin	levels\ghz1.bin
00063DD0                            		even
00063DD0 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00063DD4                            Level_GHZ2:	incbin	levels\ghz2.bin
00063E9C                            		even
00063E9C 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00063EA0                            Level_GHZ3:	incbin	levels\ghz3.bin
00063FC2                            		even
00063FC2                            Level_GHZbg:	incbin	levels\ghzbg.bin
00063FE4                            		even
00063FE4 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00063FE8 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00063FEC                            
00063FEC                            Level_LZ1:	incbin	levels\lz1.bin
000640EE                            		even
000640EE                            Level_LZbg:	incbin	levels\lzbg.bin
000641F0                            		even
000641F0 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
000641F4                            Level_LZ2:	incbin	levels\lz2.bin
0006428E                            		even
0006428E 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00064292                            Level_LZ3:	incbin	levels\lz3.bin
000643AC                            		even
000643AC 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
000643B0                            Level_SBZ3:	incbin	levels\sbz3.bin
0006446A                            		even
0006446A 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
0006446E                            
0006446E                            Level_MZ1:	incbin	levels\mz1.bin
0006450C                            		even
0006450C                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00064586                            		even
00064586                            Level_MZ2:	incbin	levels\mz2.bin
0006462A                            		even
0006462A                            Level_MZ2bg:	incbin	levels\mz2bg.bin
000646BC                            		even
000646BC 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
000646C0                            Level_MZ3:	incbin	levels\mz3.bin
000647A2                            		even
000647A2                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00064846                            		even
00064846 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
0006484A 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
0006484E                            
0006484E                            Level_SLZ1:	incbin	levels\slz1.bin
00064960                            		even
00064960                            Level_SLZbg:	incbin	levels\slzbg.bin
0006497A                            		even
0006497A                            Level_SLZ2:	incbin	levels\slz2.bin
00064A6A                            		even
00064A6A                            Level_SLZ3:	incbin	levels\slz3.bin
00064B84                            		even
00064B84 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00064B88                            
00064B88                            Level_SYZ1:	incbin	levels\syz1.bin
00064C44 00                         		even
00064C44                            Level_SYZbg:	incbin	levels\syzbg.bin
00064C7E                            		even
00064C7E 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00064C82                            Level_SYZ2:	incbin	levels\syz2.bin
00064D86                            		even
00064D86 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00064D8A                            Level_SYZ3:	incbin	levels\syz3.bin
00064EE4 00                         		even
00064EE4 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00064EE8 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00064EEC                            
00064EEC                            Level_SBZ1:	incbin	levels\sbz1.bin
0006500E                            		even
0006500E                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006504C                            		even
0006504C                            Level_SBZ2:	incbin	levels\sbz2.bin
0006518E                            		even
0006518E                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
000652F8                            		even
000652F8 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
000652FC 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00065300                            Level_End:	incbin	levels\ending.bin
00065330 00                         		even
00065330 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00065334                            
00065334                            ; ---------------------------------------------------------------------------
00065334                            ; Animated uncompressed giant ring graphics
00065334                            ; ---------------------------------------------------------------------------
00065334                            Art_BigRing:	incbin	artunc\bigring.bin
00065F74                            		even
00065F74                            
00065F74                            		incbin	misc\padding3.bin
00066010                            		even
00066010                            
00066010                            ; ---------------------------------------------------------------------------
00066010                            ; Sprite locations index
00066010                            ; ---------------------------------------------------------------------------
00066010 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066014 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066018 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006601C 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066020 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066024 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066028 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006602C 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066030 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066034 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066038 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006603C 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066040 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066044 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066048 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006604C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066050 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066054 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066058 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006605C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066060 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066064 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066068 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006606C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066070 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066074 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066078 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006607C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00066080 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00066084 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
00066088 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006608C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
00066090 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
00066094 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
00066098 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006609C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
000660A0 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
000660A6                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00066664                            		even
00066664                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00066C22                            		even
00066C22                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
000672DC                            		even
000672DC                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006774A                            		even
0006774A                            ObjPos_LZ2:	incbin	objpos\lz2.bin
00067A8C                            		even
00067A8C                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006806E                            		even
0006806E                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
00068506                            		even
00068506                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
00068538                            		even
00068538                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006856A                            		even
0006856A                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006859C                            		even
0006859C                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
000685CE                            		even
000685CE                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
00068618                            		even
00068618                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
00068656                            		even
00068656                            ObjPos_MZ1:	incbin	objpos\mz1.bin
000689C2                            		even
000689C2                            ObjPos_MZ2:	incbin	objpos\mz2.bin
00068E6C                            		even
00068E6C                            ObjPos_MZ3:	incbin	objpos\mz3.bin
000693E2                            		even
000693E2                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
00069922                            		even
00069922                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
00069D8A                            		even
00069D8A                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006A36C                            		even
0006A36C                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006A9D8                            		even
0006A9D8                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006AF42                            		even
0006AF42                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0006B548                            		even
0006B548                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0006BC86                            		even
0006BC86                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0006C364                            		even
0006C364                            ObjPos_FZ:	incbin	objpos\fz.bin
0006C376                            		even
0006C376                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0006C3A8                            		even
0006C3A8                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0006C3DA                            		even
0006C3DA                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0006C40C                            		even
0006C40C                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0006C43E                            		even
0006C43E                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0006C470                            		even
0006C470                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0006C4A8                            		even
0006C4A8                            ObjPos_End:	incbin	objpos\ending.bin
0006C604                            		even
0006C604 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
0006C60A                            ; ---------------------------------------------------------------------------
0006C60A                            		incbin	misc\padding4.bin
0006CC34                            		even
0006CC34                            
0006CC34 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
0006CC38 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
0006CC3C 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0006CC40 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
0006CC44 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
0006CC48 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
0006CC4C                            ; ---------------------------------------------------------------------------
0006CC4C                            ; PSG instruments used in music
0006CC4C                            ; ---------------------------------------------------------------------------
0006CC4C 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
0006CC58 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
0006CC64 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0006CC70                            PSG1:		incbin	sound\psg1.bin
0006CC87                            PSG2:		incbin	sound\psg2.bin
0006CC8E                            PSG3:		incbin	sound\psg3.bin
0006CC9F                            PSG4:		incbin	sound\psg4.bin
0006CCAA                            PSG6:		incbin	sound\psg6.bin
0006CCB9                            PSG5:		incbin	sound\psg5.bin
0006CCE3                            PSG7:		incbin	sound\psg7.bin
0006CCFF                            PSG8:		incbin	sound\psg8.bin
0006CD27                            PSG9:		incbin	sound\psg9.bin
0006CD38                            
0006CD38 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
0006CD40                            ; ---------------------------------------------------------------------------
0006CD40                            ; Music	Pointers
0006CD40                            ; ---------------------------------------------------------------------------
0006CD40 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
0006CD48 0000 0000 0000 0000        		dc.l Music83, Music84
0006CD50 0000 0000 0000 0000        		dc.l Music85, Music86
0006CD58 0000 0000 0000 0000        		dc.l Music87, Music88
0006CD60 0000 0000 0000 0000        		dc.l Music89, Music8A
0006CD68 0000 0000 0000 0000        		dc.l Music8B, Music8C
0006CD70 0000 0000 0000 0000        		dc.l Music8D, Music8E
0006CD78 0000 0000 0000 0000        		dc.l Music8F, Music90
0006CD80 0000 0000 0000 0000        		dc.l Music91, Music92
0006CD88 0000 0000                  		dc.l Music93
0006CD8C                            ; ---------------------------------------------------------------------------
0006CD8C                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
0006CD8C                            ; ---------------------------------------------------------------------------
0006CD8C 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
0006CD9C 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
0006CDAC 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
0006CDBC 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
0006CDCC 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
0006CDDC 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
0006CDEC 9090 9090                  		dc.b $90, $90, $90, $90
0006CDF0                            
0006CDF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CDF0                            
0006CDF0                            
0006CDF0                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
0006CDF0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0006CDF8 4E71                       		nop	
0006CDFA 4E71                       		nop	
0006CDFC 4E71                       		nop	
0006CDFE                            
0006CDFE                            loc_71B5A:
0006CDFE 0839 0000 00A1 1100        		btst	#0,($A11100).l
0006CE06 66F6                       		bne.s	loc_71B5A
0006CE08                            
0006CE08 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
0006CE10 6700                       		beq.s	loc_71B82
0006CE12 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006CE1A 4E71                       		nop	
0006CE1C 4E71                       		nop	
0006CE1E 4E71                       		nop	
0006CE20 4E71                       		nop	
0006CE22 4E71                       		nop	
0006CE24 60CA                       		bra.s	sub_71B4C
0006CE26                            ; ===========================================================================
0006CE26                            
0006CE26                            loc_71B82:
0006CE26 4DF9 00FF F000             		lea	($FFF000).l,a6
0006CE2C 422E 000E                  		clr.b	$E(a6)
0006CE30 4A2E 0003                  		tst.b	3(a6)		; is music paused?
0006CE34 6600 0000                  		bne.w	loc_71E50	; if yes, branch
0006CE38 532E 0001                  		subq.b	#1,1(a6)
0006CE3C 6600                       		bne.s	loc_71B9E
0006CE3E 4EBA 0000                  		jsr	sub_7260C(pc)
0006CE42                            
0006CE42                            loc_71B9E:
0006CE42 102E 0004                  		move.b	4(a6),d0
0006CE46 6700                       		beq.s	loc_71BA8
0006CE48 4EBA 0000                  		jsr	sub_72504(pc)
0006CE4C                            
0006CE4C                            loc_71BA8:
0006CE4C 4A2E 0024                  		tst.b	$24(a6)
0006CE50 6700                       		beq.s	loc_71BB2
0006CE52 4EBA 0000                  		jsr	sub_7267C(pc)
0006CE56                            
0006CE56                            loc_71BB2:
0006CE56 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
0006CE5A 6700                       		beq.s	loc_71BBC	; if not, branch
0006CE5C 4EBA 0000                  		jsr	Sound_Play(pc)
0006CE60                            
0006CE60                            loc_71BBC:
0006CE60 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006CE66 6700                       		beq.s	loc_71BC8
0006CE68 4EBA 0000                  		jsr	Sound_ChkValue(pc)
0006CE6C                            
0006CE6C                            loc_71BC8:
0006CE6C 4BEE 0040                  		lea	$40(a6),a5
0006CE70 4A15                       		tst.b	(a5)
0006CE72 6A00                       		bpl.s	loc_71BD4
0006CE74 4EBA 0000                  		jsr	sub_71C4E(pc)
0006CE78                            
0006CE78                            loc_71BD4:
0006CE78 422E 0008                  		clr.b	8(a6)
0006CE7C 7E05                       		moveq	#5,d7
0006CE7E                            
0006CE7E                            loc_71BDA:
0006CE7E DAFC 0030                  		adda.w	#$30,a5
0006CE82 4A15                       		tst.b	(a5)
0006CE84 6A00                       		bpl.s	loc_71BE6
0006CE86 4EBA 0000                  		jsr	sub_71CCA(pc)
0006CE8A                            
0006CE8A                            loc_71BE6:
0006CE8A 51CF FFF2                  		dbf	d7,loc_71BDA
0006CE8E                            
0006CE8E 7E02                       		moveq	#2,d7
0006CE90                            
0006CE90                            loc_71BEC:
0006CE90 DAFC 0030                  		adda.w	#$30,a5
0006CE94 4A15                       		tst.b	(a5)
0006CE96 6A00                       		bpl.s	loc_71BF8
0006CE98 4EBA 0000                  		jsr	sub_72850(pc)
0006CE9C                            
0006CE9C                            loc_71BF8:
0006CE9C 51CF FFF2                  		dbf	d7,loc_71BEC
0006CEA0                            
0006CEA0 1D7C 0080 000E             		move.b	#$80,$E(a6)
0006CEA6 7E02                       		moveq	#2,d7
0006CEA8                            
0006CEA8                            loc_71C04:
0006CEA8 DAFC 0030                  		adda.w	#$30,a5
0006CEAC 4A15                       		tst.b	(a5)
0006CEAE 6A00                       		bpl.s	loc_71C10
0006CEB0 4EBA 0000                  		jsr	sub_71CCA(pc)
0006CEB4                            
0006CEB4                            loc_71C10:
0006CEB4 51CF FFF2                  		dbf	d7,loc_71C04
0006CEB8                            
0006CEB8 7E02                       		moveq	#2,d7
0006CEBA                            
0006CEBA                            loc_71C16:
0006CEBA DAFC 0030                  		adda.w	#$30,a5
0006CEBE 4A15                       		tst.b	(a5)
0006CEC0 6A00                       		bpl.s	loc_71C22
0006CEC2 4EBA 0000                  		jsr	sub_72850(pc)
0006CEC6                            
0006CEC6                            loc_71C22:
0006CEC6 51CF FFF2                  		dbf	d7,loc_71C16
0006CECA 1D7C 0040 000E             		move.b	#$40,$E(a6)
0006CED0 DAFC 0030                  		adda.w	#$30,a5
0006CED4 4A15                       		tst.b	(a5)
0006CED6 6A00                       		bpl.s	loc_71C38
0006CED8 4EBA 0000                  		jsr	sub_71CCA(pc)
0006CEDC                            
0006CEDC                            loc_71C38:
0006CEDC DAFC 0030                  		adda.w	#$30,a5
0006CEE0 4A15                       		tst.b	(a5)
0006CEE2 6A00                       		bpl.s	loc_71C44
0006CEE4 4EBA 0000                  		jsr	sub_72850(pc)
0006CEE8                            
0006CEE8                            loc_71C44:
0006CEE8 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
0006CEF0 4E75                       		rts	
0006CEF2                            ; End of function sub_71B4C
0006CEF2                            
0006CEF2                            
0006CEF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CEF2                            
0006CEF2                            
0006CEF2                            sub_71C4E:				; XREF: sub_71B4C
0006CEF2 532D 000E                  		subq.b	#1,$E(a5)
0006CEF6 6600                       		bne.s	locret_71CAA
0006CEF8 1D7C 0080 0008             		move.b	#$80,8(a6)
0006CEFE 286D 0004                  		movea.l	4(a5),a4
0006CF02                            
0006CF02                            loc_71C5E:
0006CF02 7A00                       		moveq	#0,d5
0006CF04 1A1C                       		move.b	(a4)+,d5
0006CF06 0C05 00E0                  		cmpi.b	#-$20,d5
0006CF0A 6500                       		bcs.s	loc_71C6E
0006CF0C 4EBA 0000                  		jsr	sub_72A5A(pc)
0006CF10 60F0                       		bra.s	loc_71C5E
0006CF12                            ; ===========================================================================
0006CF12                            
0006CF12                            loc_71C6E:
0006CF12 4A05                       		tst.b	d5
0006CF14 6A00                       		bpl.s	loc_71C84
0006CF16 1B45 0010                  		move.b	d5,$10(a5)
0006CF1A 1A1C                       		move.b	(a4)+,d5
0006CF1C 6A00                       		bpl.s	loc_71C84
0006CF1E 534C                       		subq.w	#1,a4
0006CF20 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006CF26 6000                       		bra.s	loc_71C88
0006CF28                            ; ===========================================================================
0006CF28                            
0006CF28                            loc_71C84:
0006CF28 4EBA 0000                  		jsr	sub_71D40(pc)
0006CF2C                            
0006CF2C                            loc_71C88:
0006CF2C 2B4C 0004                  		move.l	a4,4(a5)
0006CF30 0815 0002                  		btst	#2,(a5)
0006CF34 6600                       		bne.s	locret_71CAA
0006CF36 7000                       		moveq	#0,d0
0006CF38 102D 0010                  		move.b	$10(a5),d0
0006CF3C 0C00 0080                  		cmpi.b	#$80,d0
0006CF40 6700                       		beq.s	locret_71CAA
0006CF42 0800 0003                  		btst	#3,d0
0006CF46 6600                       		bne.s	loc_71CAC
0006CF48 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
0006CF4E                            
0006CF4E                            locret_71CAA:
0006CF4E 4E75                       		rts	
0006CF50                            ; ===========================================================================
0006CF50                            
0006CF50                            loc_71CAC:
0006CF50 0400 0088                  		subi.b	#$88,d0
0006CF54 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
0006CF58 13C0 00A0 00EA             		move.b	d0,($A000EA).l
0006CF5E 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
0006CF66 4E75                       		rts	
0006CF68                            ; End of function sub_71C4E
0006CF68                            
0006CF68                            ; ===========================================================================
0006CF68 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
0006CF6E                            
0006CF6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CF6E                            
0006CF6E                            
0006CF6E                            sub_71CCA:				; XREF: sub_71B4C
0006CF6E 532D 000E                  		subq.b	#1,$E(a5)
0006CF72 6600                       		bne.s	loc_71CE0
0006CF74 0895 0004                  		bclr	#4,(a5)
0006CF78 4EBA 0000                  		jsr	sub_71CEC(pc)
0006CF7C 4EBA 0000                  		jsr	sub_71E18(pc)
0006CF80 6000 0000                  		bra.w	loc_726E2
0006CF84                            ; ===========================================================================
0006CF84                            
0006CF84                            loc_71CE0:
0006CF84 4EBA 0000                  		jsr	sub_71D9E(pc)
0006CF88 4EBA 0000                  		jsr	sub_71DC6(pc)
0006CF8C 6000 0000                  		bra.w	loc_71E24
0006CF90                            ; End of function sub_71CCA
0006CF90                            
0006CF90                            
0006CF90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CF90                            
0006CF90                            
0006CF90                            sub_71CEC:				; XREF: sub_71CCA
0006CF90 286D 0004                  		movea.l	4(a5),a4
0006CF94 0895 0001                  		bclr	#1,(a5)
0006CF98                            
0006CF98                            loc_71CF4:
0006CF98 7A00                       		moveq	#0,d5
0006CF9A 1A1C                       		move.b	(a4)+,d5
0006CF9C 0C05 00E0                  		cmpi.b	#-$20,d5
0006CFA0 6500                       		bcs.s	loc_71D04
0006CFA2 4EBA 0000                  		jsr	sub_72A5A(pc)
0006CFA6 60F0                       		bra.s	loc_71CF4
0006CFA8                            ; ===========================================================================
0006CFA8                            
0006CFA8                            loc_71D04:
0006CFA8 4EBA 0000                  		jsr	sub_726FE(pc)
0006CFAC 4A05                       		tst.b	d5
0006CFAE 6A00                       		bpl.s	loc_71D1A
0006CFB0 4EBA 0000                  		jsr	sub_71D22(pc)
0006CFB4 1A1C                       		move.b	(a4)+,d5
0006CFB6 6A00                       		bpl.s	loc_71D1A
0006CFB8 534C                       		subq.w	#1,a4
0006CFBA 6000 0000                  		bra.w	sub_71D60
0006CFBE                            ; ===========================================================================
0006CFBE                            
0006CFBE                            loc_71D1A:
0006CFBE 4EBA 0000                  		jsr	sub_71D40(pc)
0006CFC2 6000 0000                  		bra.w	sub_71D60
0006CFC6                            ; End of function sub_71CEC
0006CFC6                            
0006CFC6                            
0006CFC6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CFC6                            
0006CFC6                            
0006CFC6                            sub_71D22:				; XREF: sub_71CEC
0006CFC6 0405 0080                  		subi.b	#$80,d5
0006CFCA 6700                       		beq.s	loc_71D58
0006CFCC DA2D 0008                  		add.b	8(a5),d5
0006CFD0 0245 007F                  		andi.w	#$7F,d5
0006CFD4 E34D                       		lsl.w	#1,d5
0006CFD6 41FA 0000                  		lea	word_72790(pc),a0
0006CFDA 3C30 5000                  		move.w	(a0,d5.w),d6
0006CFDE 3B46 0010                  		move.w	d6,$10(a5)
0006CFE2 4E75                       		rts	
0006CFE4                            ; End of function sub_71D22
0006CFE4                            
0006CFE4                            
0006CFE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006CFE4                            
0006CFE4                            
0006CFE4                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006CFE4 1005                       		move.b	d5,d0
0006CFE6 122D 0002                  		move.b	2(a5),d1
0006CFEA                            
0006CFEA                            loc_71D46:
0006CFEA 5301                       		subq.b	#1,d1
0006CFEC 6700                       		beq.s	loc_71D4E
0006CFEE D005                       		add.b	d5,d0
0006CFF0 60F8                       		bra.s	loc_71D46
0006CFF2                            ; ===========================================================================
0006CFF2                            
0006CFF2                            loc_71D4E:
0006CFF2 1B40 000F                  		move.b	d0,$F(a5)
0006CFF6 1B40 000E                  		move.b	d0,$E(a5)
0006CFFA 4E75                       		rts	
0006CFFC                            ; End of function sub_71D40
0006CFFC                            
0006CFFC                            ; ===========================================================================
0006CFFC                            
0006CFFC                            loc_71D58:				; XREF: sub_71D22
0006CFFC 08D5 0001                  		bset	#1,(a5)
0006D000 426D 0010                  		clr.w	$10(a5)
0006D004                            
0006D004                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D004                            
0006D004                            
0006D004                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
0006D004 2B4C 0004                  		move.l	a4,4(a5)
0006D008 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
0006D00E 0815 0004                  		btst	#4,(a5)
0006D012 6600                       		bne.s	locret_71D9C
0006D014 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
0006D01A 422D 000C                  		clr.b	$C(a5)
0006D01E 0815 0003                  		btst	#3,(a5)
0006D022 6700                       		beq.s	locret_71D9C
0006D024 206D 0014                  		movea.l	$14(a5),a0
0006D028 1B58 0018                  		move.b	(a0)+,$18(a5)
0006D02C 1B58 0019                  		move.b	(a0)+,$19(a5)
0006D030 1B58 001A                  		move.b	(a0)+,$1A(a5)
0006D034 1018                       		move.b	(a0)+,d0
0006D036 E208                       		lsr.b	#1,d0
0006D038 1B40 001B                  		move.b	d0,$1B(a5)
0006D03C 426D 001C                  		clr.w	$1C(a5)
0006D040                            
0006D040                            locret_71D9C:
0006D040 4E75                       		rts	
0006D042                            ; End of function sub_71D60
0006D042                            
0006D042                            
0006D042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D042                            
0006D042                            
0006D042                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
0006D042 4A2D 0012                  		tst.b	$12(a5)
0006D046 6700                       		beq.s	locret_71DC4
0006D048 532D 0012                  		subq.b	#1,$12(a5)
0006D04C 6600                       		bne.s	locret_71DC4
0006D04E 08D5 0001                  		bset	#1,(a5)
0006D052 4A2D 0001                  		tst.b	1(a5)
0006D056 6B00 0000                  		bmi.w	loc_71DBE
0006D05A 4EBA 0000                  		jsr	sub_726FE(pc)
0006D05E 584F                       		addq.w	#4,sp
0006D060 4E75                       		rts	
0006D062                            ; ===========================================================================
0006D062                            
0006D062                            loc_71DBE:
0006D062 4EBA 0000                  		jsr	sub_729A0(pc)
0006D066 584F                       		addq.w	#4,sp
0006D068                            
0006D068                            locret_71DC4:
0006D068 4E75                       		rts	
0006D06A                            ; End of function sub_71D9E
0006D06A                            
0006D06A                            
0006D06A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D06A                            
0006D06A                            
0006D06A                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
0006D06A 584F                       		addq.w	#4,sp
0006D06C 0815 0003                  		btst	#3,(a5)
0006D070 6700                       		beq.s	locret_71E16
0006D072 4A2D 0018                  		tst.b	$18(a5)
0006D076 6700                       		beq.s	loc_71DDA
0006D078 532D 0018                  		subq.b	#1,$18(a5)
0006D07C 4E75                       		rts	
0006D07E                            ; ===========================================================================
0006D07E                            
0006D07E                            loc_71DDA:
0006D07E 532D 0019                  		subq.b	#1,$19(a5)
0006D082 6700                       		beq.s	loc_71DE2
0006D084 4E75                       		rts	
0006D086                            ; ===========================================================================
0006D086                            
0006D086                            loc_71DE2:
0006D086 206D 0014                  		movea.l	$14(a5),a0
0006D08A 1B68 0001 0019             		move.b	1(a0),$19(a5)
0006D090 4A2D 001B                  		tst.b	$1B(a5)
0006D094 6600                       		bne.s	loc_71DFE
0006D096 1B68 0003 001B             		move.b	3(a0),$1B(a5)
0006D09C 442D 001A                  		neg.b	$1A(a5)
0006D0A0 4E75                       		rts	
0006D0A2                            ; ===========================================================================
0006D0A2                            
0006D0A2                            loc_71DFE:
0006D0A2 532D 001B                  		subq.b	#1,$1B(a5)
0006D0A6 1C2D 001A                  		move.b	$1A(a5),d6
0006D0AA 4886                       		ext.w	d6
0006D0AC DC6D 001C                  		add.w	$1C(a5),d6
0006D0B0 3B46 001C                  		move.w	d6,$1C(a5)
0006D0B4 DC6D 0010                  		add.w	$10(a5),d6
0006D0B8 594F                       		subq.w	#4,sp
0006D0BA                            
0006D0BA                            locret_71E16:
0006D0BA 4E75                       		rts	
0006D0BC                            ; End of function sub_71DC6
0006D0BC                            
0006D0BC                            
0006D0BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D0BC                            
0006D0BC                            
0006D0BC                            sub_71E18:				; XREF: sub_71CCA
0006D0BC 0815 0001                  		btst	#1,(a5)
0006D0C0 6600                       		bne.s	locret_71E48
0006D0C2 3C2D 0010                  		move.w	$10(a5),d6
0006D0C6 6700                       		beq.s	loc_71E4A
0006D0C8                            
0006D0C8                            loc_71E24:				; XREF: sub_71CCA
0006D0C8 102D 001E                  		move.b	$1E(a5),d0
0006D0CC 4880                       		ext.w	d0
0006D0CE DC40                       		add.w	d0,d6
0006D0D0 0815 0002                  		btst	#2,(a5)
0006D0D4 6600                       		bne.s	locret_71E48
0006D0D6 3206                       		move.w	d6,d1
0006D0D8 E049                       		lsr.w	#8,d1
0006D0DA 103C 00A4                  		move.b	#-$5C,d0
0006D0DE 4EBA 0000                  		jsr	sub_72722(pc)
0006D0E2 1206                       		move.b	d6,d1
0006D0E4 103C 00A0                  		move.b	#-$60,d0
0006D0E8 4EBA 0000                  		jsr	sub_72722(pc)
0006D0EC                            
0006D0EC                            locret_71E48:
0006D0EC 4E75                       		rts	
0006D0EE                            ; ===========================================================================
0006D0EE                            
0006D0EE                            loc_71E4A:
0006D0EE 08D5 0001                  		bset	#1,(a5)
0006D0F2 4E75                       		rts	
0006D0F4                            ; End of function sub_71E18
0006D0F4                            
0006D0F4                            ; ===========================================================================
0006D0F4                            
0006D0F4                            loc_71E50:				; XREF: sub_71B4C
0006D0F4 6B00                       		bmi.s	loc_71E94
0006D0F6 0C2E 0002 0003             		cmpi.b	#2,3(a6)
0006D0FC 6700 0000                  		beq.w	loc_71EFE
0006D100 1D7C 0002 0003             		move.b	#2,3(a6)
0006D106 7602                       		moveq	#2,d3
0006D108 103C 00B4                  		move.b	#-$4C,d0
0006D10C 7200                       		moveq	#0,d1
0006D10E                            
0006D10E                            loc_71E6A:
0006D10E 4EBA 0000                  		jsr	sub_7272E(pc)
0006D112 4EBA 0000                  		jsr	sub_72764(pc)
0006D116 5200                       		addq.b	#1,d0
0006D118 51CB FFF4                  		dbf	d3,loc_71E6A
0006D11C                            
0006D11C 7602                       		moveq	#2,d3
0006D11E 7028                       		moveq	#$28,d0
0006D120                            
0006D120                            loc_71E7C:
0006D120 1203                       		move.b	d3,d1
0006D122 4EBA 0000                  		jsr	sub_7272E(pc)
0006D126 5801                       		addq.b	#4,d1
0006D128 4EBA 0000                  		jsr	sub_7272E(pc)
0006D12C 51CB FFF2                  		dbf	d3,loc_71E7C
0006D130                            
0006D130 4EBA 0000                  		jsr	sub_729B6(pc)
0006D134 6000 FDB2                  		bra.w	loc_71C44
0006D138                            ; ===========================================================================
0006D138                            
0006D138                            loc_71E94:				; XREF: loc_71E50
0006D138 422E 0003                  		clr.b	3(a6)
0006D13C 7630                       		moveq	#$30,d3
0006D13E 4BEE 0040                  		lea	$40(a6),a5
0006D142 7806                       		moveq	#6,d4
0006D144                            
0006D144                            loc_71EA0:
0006D144 0815 0007                  		btst	#7,(a5)
0006D148 6700                       		beq.s	loc_71EB8
0006D14A 0815 0002                  		btst	#2,(a5)
0006D14E 6600                       		bne.s	loc_71EB8
0006D150 103C 00B4                  		move.b	#-$4C,d0
0006D154 122D 000A                  		move.b	$A(a5),d1
0006D158 4EBA 0000                  		jsr	sub_72722(pc)
0006D15C                            
0006D15C                            loc_71EB8:
0006D15C DAC3                       		adda.w	d3,a5
0006D15E 51CC FFE4                  		dbf	d4,loc_71EA0
0006D162                            
0006D162 4BEE 0220                  		lea	$220(a6),a5
0006D166 7802                       		moveq	#2,d4
0006D168                            
0006D168                            loc_71EC4:
0006D168 0815 0007                  		btst	#7,(a5)
0006D16C 6700                       		beq.s	loc_71EDC
0006D16E 0815 0002                  		btst	#2,(a5)
0006D172 6600                       		bne.s	loc_71EDC
0006D174 103C 00B4                  		move.b	#-$4C,d0
0006D178 122D 000A                  		move.b	$A(a5),d1
0006D17C 4EBA 0000                  		jsr	sub_72722(pc)
0006D180                            
0006D180                            loc_71EDC:
0006D180 DAC3                       		adda.w	d3,a5
0006D182 51CC FFE4                  		dbf	d4,loc_71EC4
0006D186                            
0006D186 4BEE 0340                  		lea	$340(a6),a5
0006D18A 0815 0007                  		btst	#7,(a5)
0006D18E 6700                       		beq.s	loc_71EFE
0006D190 0815 0002                  		btst	#2,(a5)
0006D194 6600                       		bne.s	loc_71EFE
0006D196 103C 00B4                  		move.b	#-$4C,d0
0006D19A 122D 000A                  		move.b	$A(a5),d1
0006D19E 4EBA 0000                  		jsr	sub_72722(pc)
0006D1A2                            
0006D1A2                            loc_71EFE:
0006D1A2 6000 FD44                  		bra.w	loc_71C44
0006D1A6                            
0006D1A6                            ; ---------------------------------------------------------------------------
0006D1A6                            ; Subroutine to	play a sound or	music track
0006D1A6                            ; ---------------------------------------------------------------------------
0006D1A6                            
0006D1A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D1A6                            
0006D1A6                            
0006D1A6                            Sound_Play:				; XREF: sub_71B4C
0006D1A6 2079 0006 CC34             		movea.l	(Go_SoundTypes).l,a0
0006D1AC 43EE 000A                  		lea	$A(a6),a1	; load music track number
0006D1B0 1616                       		move.b	0(a6),d3
0006D1B2 7802                       		moveq	#2,d4
0006D1B4                            
0006D1B4                            loc_71F12:
0006D1B4 1011                       		move.b	(a1),d0		; move track number to d0
0006D1B6 1200                       		move.b	d0,d1
0006D1B8 4219                       		clr.b	(a1)+
0006D1BA 0400 0081                  		subi.b	#$81,d0
0006D1BE 6500                       		bcs.s	loc_71F3E
0006D1C0 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
0006D1C6 6700                       		beq.s	loc_71F2C
0006D1C8 1D41 000A                  		move.b	d1,$A(a6)
0006D1CC 6000                       		bra.s	loc_71F3E
0006D1CE                            ; ===========================================================================
0006D1CE                            
0006D1CE                            loc_71F2C:
0006D1CE 0240 007F                  		andi.w	#$7F,d0
0006D1D2 1430 0000                  		move.b	(a0,d0.w),d2
0006D1D6 B403                       		cmp.b	d3,d2
0006D1D8 6500                       		bcs.s	loc_71F3E
0006D1DA 1602                       		move.b	d2,d3
0006D1DC 1D41 0009                  		move.b	d1,9(a6)	; set music flag
0006D1E0                            
0006D1E0                            loc_71F3E:
0006D1E0 51CC FFD2                  		dbf	d4,loc_71F12
0006D1E4                            
0006D1E4 4A03                       		tst.b	d3
0006D1E6 6B00                       		bmi.s	locret_71F4A
0006D1E8 1C83                       		move.b	d3,0(a6)
0006D1EA                            
0006D1EA                            locret_71F4A:
0006D1EA 4E75                       		rts	
0006D1EC                            ; End of function Sound_Play
0006D1EC                            
0006D1EC                            
0006D1EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D1EC                            
0006D1EC                            
0006D1EC                            Sound_ChkValue:				; XREF: sub_71B4C
0006D1EC 7E00                       		moveq	#0,d7
0006D1EE 1E2E 0009                  		move.b	9(a6),d7
0006D1F2 6700 0000                  		beq.w	Sound_E4
0006D1F6 6A00                       		bpl.s	locret_71F8C
0006D1F8 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
0006D1FE 0C07 009F                  		cmpi.b	#$9F,d7
0006D202 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
0006D206 0C07 00A0                  		cmpi.b	#$A0,d7
0006D20A 6500 0000                  		bcs.w	locret_71F8C
0006D20E 0C07 00CF                  		cmpi.b	#$CF,d7
0006D212 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
0006D216 0C07 00D0                  		cmpi.b	#$D0,d7
0006D21A 6500 0000                  		bcs.w	locret_71F8C
0006D21E 0C07 00E0                  		cmpi.b	#$E0,d7
0006D222 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
0006D226 0C07 00E4                  		cmpi.b	#$E4,d7
0006D22A 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
0006D22C                            
0006D22C                            locret_71F8C:
0006D22C 4E75                       		rts	
0006D22E                            ; ===========================================================================
0006D22E                            
0006D22E                            Sound_E0toE4:				; XREF: Sound_ChkValue
0006D22E 0407 00E0                  		subi.b	#$E0,d7
0006D232 E54F                       		lsl.w	#2,d7
0006D234 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
0006D238                            ; ===========================================================================
0006D238                            
0006D238                            Sound_ExIndex:
0006D238 6000 0000                  		bra.w	Sound_E0
0006D23C                            ; ===========================================================================
0006D23C 6000 0000                  		bra.w	Sound_E1
0006D240                            ; ===========================================================================
0006D240 6000 0000                  		bra.w	Sound_E2
0006D244                            ; ===========================================================================
0006D244 6000 0000                  		bra.w	Sound_E3
0006D248                            ; ===========================================================================
0006D248 6000 0000                  		bra.w	Sound_E4
0006D24C                            ; ===========================================================================
0006D24C                            ; ---------------------------------------------------------------------------
0006D24C                            ; Play "Say-gaa" PCM sound
0006D24C                            ; ---------------------------------------------------------------------------
0006D24C                            
0006D24C                            Sound_E1:				  
0006D24C 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
0006D252 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
0006D258 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
0006D260                            PlayPCM_Loop:	  
0006D260 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
0006D266 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
0006D26A 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
0006D26E 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
0006D270 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
0006D272 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
0006D276 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
0006D27C 4EB8 11F4                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
0006D280 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
0006D286 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
0006D288 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
0006D28A                            return_PlayPCM: 
0006D28A 584F                       		addq.w	#4,sp 
0006D28C 4E75                       		rts
0006D28E                            ; ===========================================================================
0006D28E                            ; ---------------------------------------------------------------------------
0006D28E                            ; Play music track $81-$9F
0006D28E                            ; ---------------------------------------------------------------------------
0006D28E                            
0006D28E                            Sound_81to9F:				; XREF: Sound_ChkValue
0006D28E 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
0006D292 6600                       		bne.s	loc_72024	; if not, branch
0006D294 4A2E 0027                  		tst.b	$27(a6)
0006D298 6600 0000                  		bne.w	loc_721B6
0006D29C 4BEE 0040                  		lea	$40(a6),a5
0006D2A0 7009                       		moveq	#9,d0
0006D2A2                            
0006D2A2                            loc_71FE6:
0006D2A2 0895 0002                  		bclr	#2,(a5)
0006D2A6 DAFC 0030                  		adda.w	#$30,a5
0006D2AA 51C8 FFF6                  		dbf	d0,loc_71FE6
0006D2AE                            
0006D2AE 4BEE 0220                  		lea	$220(a6),a5
0006D2B2 7005                       		moveq	#5,d0
0006D2B4                            
0006D2B4                            loc_71FF8:
0006D2B4 0895 0007                  		bclr	#7,(a5)
0006D2B8 DAFC 0030                  		adda.w	#$30,a5
0006D2BC 51C8 FFF6                  		dbf	d0,loc_71FF8
0006D2C0 4216                       		clr.b	0(a6)
0006D2C2 204E                       		movea.l	a6,a0
0006D2C4 43EE 03A0                  		lea	$3A0(a6),a1
0006D2C8 303C 0087                  		move.w	#$87,d0
0006D2CC                            
0006D2CC                            loc_72012:
0006D2CC 22D8                       		move.l	(a0)+,(a1)+
0006D2CE 51C8 FFFC                  		dbf	d0,loc_72012
0006D2D2                            
0006D2D2 1D7C 0080 0027             		move.b	#$80,$27(a6)
0006D2D8 4216                       		clr.b	0(a6)
0006D2DA 6000                       		bra.s	loc_7202C
0006D2DC                            ; ===========================================================================
0006D2DC                            
0006D2DC                            loc_72024:
0006D2DC 422E 0027                  		clr.b	$27(a6)
0006D2E0 422E 0026                  		clr.b	$26(a6)
0006D2E4                            
0006D2E4                            loc_7202C:
0006D2E4 4EBA 0000                  		jsr	sub_725CA(pc)
0006D2E8 2879 0006 CC44             		movea.l	(off_719A0).l,a4
0006D2EE 0407 0081                  		subi.b	#$81,d7
0006D2F2 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
0006D2F8 2879 0006 CC3C             		movea.l	(Go_MusicIndex).l,a4
0006D2FE E54F                       		lsl.w	#2,d7
0006D300 2874 7000                  		movea.l	(a4,d7.w),a4
0006D304 7000                       		moveq	#0,d0
0006D306 3014                       		move.w	(a4),d0
0006D308 D08C                       		add.l	a4,d0
0006D30A 2D40 0018                  		move.l	d0,$18(a6)
0006D30E 102C 0005                  		move.b	5(a4),d0
0006D312 1D40 0028                  		move.b	d0,$28(a6)
0006D316 4A2E 002A                  		tst.b	$2A(a6)
0006D31A 6700                       		beq.s	loc_72068
0006D31C 102E 0029                  		move.b	$29(a6),d0
0006D320                            
0006D320                            loc_72068:
0006D320 1D40 0002                  		move.b	d0,2(a6)
0006D324 1D40 0001                  		move.b	d0,1(a6)
0006D328 7200                       		moveq	#0,d1
0006D32A 264C                       		movea.l	a4,a3
0006D32C 5C4C                       		addq.w	#6,a4
0006D32E 7E00                       		moveq	#0,d7
0006D330 1E2B 0002                  		move.b	2(a3),d7
0006D334 6700 0000                  		beq.w	loc_72114
0006D338 5307                       		subq.b	#1,d7
0006D33A 123C 00C0                  		move.b	#-$40,d1
0006D33E 182B 0004                  		move.b	4(a3),d4
0006D342 7C30                       		moveq	#$30,d6
0006D344 1A3C 0001                  		move.b	#1,d5
0006D348 43EE 0040                  		lea	$40(a6),a1
0006D34C 45FA 0000                  		lea	byte_721BA(pc),a2
0006D350                            
0006D350                            loc_72098:
0006D350 08D1 0007                  		bset	#7,(a1)
0006D354 135A 0001                  		move.b	(a2)+,1(a1)
0006D358 1344 0002                  		move.b	d4,2(a1)
0006D35C 1346 000D                  		move.b	d6,$D(a1)
0006D360 1341 000A                  		move.b	d1,$A(a1)
0006D364 1345 000E                  		move.b	d5,$E(a1)
0006D368 7000                       		moveq	#0,d0
0006D36A 301C                       		move.w	(a4)+,d0
0006D36C D08B                       		add.l	a3,d0
0006D36E 2340 0004                  		move.l	d0,4(a1)
0006D372 335C 0008                  		move.w	(a4)+,8(a1)
0006D376 D2C6                       		adda.w	d6,a1
0006D378 51CF FFD6                  		dbf	d7,loc_72098
0006D37C 0C2B 0007 0002             		cmpi.b	#7,2(a3)
0006D382 6600                       		bne.s	loc_720D8
0006D384 702B                       		moveq	#$2B,d0
0006D386 7200                       		moveq	#0,d1
0006D388 4EBA 0000                  		jsr	sub_7272E(pc)
0006D38C 6000 0000                  		bra.w	loc_72114
0006D390                            ; ===========================================================================
0006D390                            
0006D390                            loc_720D8:
0006D390 7028                       		moveq	#$28,d0
0006D392 7206                       		moveq	#6,d1
0006D394 4EBA 0000                  		jsr	sub_7272E(pc)
0006D398 103C 0042                  		move.b	#$42,d0
0006D39C 727F                       		moveq	#$7F,d1
0006D39E 4EBA 0000                  		jsr	sub_72764(pc)
0006D3A2 103C 004A                  		move.b	#$4A,d0
0006D3A6 727F                       		moveq	#$7F,d1
0006D3A8 4EBA 0000                  		jsr	sub_72764(pc)
0006D3AC 103C 0046                  		move.b	#$46,d0
0006D3B0 727F                       		moveq	#$7F,d1
0006D3B2 4EBA 0000                  		jsr	sub_72764(pc)
0006D3B6 103C 004E                  		move.b	#$4E,d0
0006D3BA 727F                       		moveq	#$7F,d1
0006D3BC 4EBA 0000                  		jsr	sub_72764(pc)
0006D3C0 103C 00B6                  		move.b	#-$4A,d0
0006D3C4 123C 00C0                  		move.b	#-$40,d1
0006D3C8 4EBA 0000                  		jsr	sub_72764(pc)
0006D3CC                            
0006D3CC                            loc_72114:
0006D3CC 7E00                       		moveq	#0,d7
0006D3CE 1E2B 0003                  		move.b	3(a3),d7
0006D3D2 6700                       		beq.s	loc_72154
0006D3D4 5307                       		subq.b	#1,d7
0006D3D6 43EE 0190                  		lea	$190(a6),a1
0006D3DA 45FA 0000                  		lea	byte_721C2(pc),a2
0006D3DE                            
0006D3DE                            loc_72126:
0006D3DE 08D1 0007                  		bset	#7,(a1)
0006D3E2 135A 0001                  		move.b	(a2)+,1(a1)
0006D3E6 1344 0002                  		move.b	d4,2(a1)
0006D3EA 1346 000D                  		move.b	d6,$D(a1)
0006D3EE 1345 000E                  		move.b	d5,$E(a1)
0006D3F2 7000                       		moveq	#0,d0
0006D3F4 301C                       		move.w	(a4)+,d0
0006D3F6 D08B                       		add.l	a3,d0
0006D3F8 2340 0004                  		move.l	d0,4(a1)
0006D3FC 335C 0008                  		move.w	(a4)+,8(a1)
0006D400 101C                       		move.b	(a4)+,d0
0006D402 135C 000B                  		move.b	(a4)+,$B(a1)
0006D406 D2C6                       		adda.w	d6,a1
0006D408 51CF FFD4                  		dbf	d7,loc_72126
0006D40C                            
0006D40C                            loc_72154:
0006D40C 43EE 0220                  		lea	$220(a6),a1
0006D410 7E05                       		moveq	#5,d7
0006D412                            
0006D412                            loc_7215A:
0006D412 4A11                       		tst.b	(a1)
0006D414 6A00 0000                  		bpl.w	loc_7217C
0006D418 7000                       		moveq	#0,d0
0006D41A 1029 0001                  		move.b	1(a1),d0
0006D41E 6B00                       		bmi.s	loc_7216E
0006D420 5500                       		subq.b	#2,d0
0006D422 E508                       		lsl.b	#2,d0
0006D424 6000                       		bra.s	loc_72170
0006D426                            ; ===========================================================================
0006D426                            
0006D426                            loc_7216E:
0006D426 E608                       		lsr.b	#3,d0
0006D428                            
0006D428                            loc_72170:
0006D428 41FA 0000                  		lea	dword_722CC(pc),a0
0006D42C 2070 0000                  		movea.l	(a0,d0.w),a0
0006D430 08D0 0002                  		bset	#2,(a0)
0006D434                            
0006D434                            loc_7217C:
0006D434 D2C6                       		adda.w	d6,a1
0006D436 51CF FFDA                  		dbf	d7,loc_7215A
0006D43A                            
0006D43A 4A6E 0340                  		tst.w	$340(a6)
0006D43E 6A00                       		bpl.s	loc_7218E
0006D440 08EE 0002 0100             		bset	#2,$100(a6)
0006D446                            
0006D446                            loc_7218E:
0006D446 4A6E 0370                  		tst.w	$370(a6)
0006D44A 6A00                       		bpl.s	loc_7219A
0006D44C 08EE 0002 01F0             		bset	#2,$1F0(a6)
0006D452                            
0006D452                            loc_7219A:
0006D452 4BEE 0070                  		lea	$70(a6),a5
0006D456 7805                       		moveq	#5,d4
0006D458                            
0006D458                            loc_721A0:
0006D458 4EBA 0000                  		jsr	sub_726FE(pc)
0006D45C DAC6                       		adda.w	d6,a5
0006D45E 51CC FFF8                  		dbf	d4,loc_721A0
0006D462 7802                       		moveq	#2,d4
0006D464                            
0006D464                            loc_721AC:
0006D464 4EBA 0000                  		jsr	sub_729A0(pc)
0006D468 DAC6                       		adda.w	d6,a5
0006D46A 51CC FFF8                  		dbf	d4,loc_721AC
0006D46E                            
0006D46E                            loc_721B6:
0006D46E 584F                       		addq.w	#4,sp
0006D470 4E75                       		rts	
0006D472                            ; ===========================================================================
0006D472 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
0006D47A                            		even
0006D47A 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
0006D47E                            		even
0006D47E                            ; ===========================================================================
0006D47E                            ; ---------------------------------------------------------------------------
0006D47E                            ; Play normal sound effect
0006D47E                            ; ---------------------------------------------------------------------------
0006D47E                            
0006D47E                            Sound_A0toCF:				; XREF: Sound_ChkValue
0006D47E 4A2E 0027                  		tst.b	$27(a6)
0006D482 6600 0000                  		bne.w	loc_722C6
0006D486 4A2E 0004                  		tst.b	4(a6)
0006D48A 6600 0000                  		bne.w	loc_722C6
0006D48E 4A2E 0024                  		tst.b	$24(a6)
0006D492 6600 0000                  		bne.w	loc_722C6
0006D496 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
0006D49A 6600                       		bne.s	Sound_notB5	; if not, branch
0006D49C 4A2E 002B                  		tst.b	$2B(a6)
0006D4A0 6600                       		bne.s	loc_721EE
0006D4A2 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
0006D4A6                            
0006D4A6                            loc_721EE:
0006D4A6 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
0006D4AC                            
0006D4AC                            Sound_notB5:
0006D4AC 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
0006D4B0 6600                       		bne.s	Sound_notA7	; if not, branch
0006D4B2 4A2E 002C                  		tst.b	$2C(a6)
0006D4B6 6600 0000                  		bne.w	locret_722C4
0006D4BA 1D7C 0080 002C             		move.b	#$80,$2C(a6)
0006D4C0                            
0006D4C0                            Sound_notA7:
0006D4C0 2079 0006 CC40             		movea.l	(Go_SoundIndex).l,a0
0006D4C6 0407 00A0                  		subi.b	#$A0,d7
0006D4CA E54F                       		lsl.w	#2,d7
0006D4CC 2670 7000                  		movea.l	(a0,d7.w),a3
0006D4D0 224B                       		movea.l	a3,a1
0006D4D2 7200                       		moveq	#0,d1
0006D4D4 3219                       		move.w	(a1)+,d1
0006D4D6 D28B                       		add.l	a3,d1
0006D4D8 1A19                       		move.b	(a1)+,d5
0006D4DA 1E19                       		move.b	(a1)+,d7
0006D4DC 5307                       		subq.b	#1,d7
0006D4DE 7C30                       		moveq	#$30,d6
0006D4E0                            
0006D4E0                            loc_72228:
0006D4E0 7600                       		moveq	#0,d3
0006D4E2 1629 0001                  		move.b	1(a1),d3
0006D4E6 1803                       		move.b	d3,d4
0006D4E8 6B00                       		bmi.s	loc_72244
0006D4EA 5543                       		subq.w	#2,d3
0006D4EC E54B                       		lsl.w	#2,d3
0006D4EE 4BFA 0000                  		lea	dword_722CC(pc),a5
0006D4F2 2A75 3000                  		movea.l	(a5,d3.w),a5
0006D4F6 08D5 0002                  		bset	#2,(a5)
0006D4FA 6000                       		bra.s	loc_7226E
0006D4FC                            ; ===========================================================================
0006D4FC                            
0006D4FC                            loc_72244:
0006D4FC E64B                       		lsr.w	#3,d3
0006D4FE 4BFA 0000                  		lea	dword_722CC(pc),a5
0006D502 2A75 3000                  		movea.l	(a5,d3.w),a5
0006D506 08D5 0002                  		bset	#2,(a5)
0006D50A 0C04 00C0                  		cmpi.b	#$C0,d4
0006D50E 6600                       		bne.s	loc_7226E
0006D510 1004                       		move.b	d4,d0
0006D512 0000 001F                  		ori.b	#$1F,d0
0006D516 13C0 00C0 0011             		move.b	d0,($C00011).l
0006D51C 0840 0005                  		bchg	#5,d0
0006D520 13C0 00C0 0011             		move.b	d0,($C00011).l
0006D526                            
0006D526                            loc_7226E:
0006D526 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
0006D52A 244D                       		movea.l	a5,a2
0006D52C 700B                       		moveq	#$B,d0
0006D52E                            
0006D52E                            loc_72276:
0006D52E 429A                       		clr.l	(a2)+
0006D530 51C8 FFFC                  		dbf	d0,loc_72276
0006D534                            
0006D534 3A99                       		move.w	(a1)+,(a5)
0006D536 1B45 0002                  		move.b	d5,2(a5)
0006D53A 7000                       		moveq	#0,d0
0006D53C 3019                       		move.w	(a1)+,d0
0006D53E D08B                       		add.l	a3,d0
0006D540 2B40 0004                  		move.l	d0,4(a5)
0006D544 3B59 0008                  		move.w	(a1)+,8(a5)
0006D548 1B7C 0001 000E             		move.b	#1,$E(a5)
0006D54E 1B46 000D                  		move.b	d6,$D(a5)
0006D552 4A04                       		tst.b	d4
0006D554 6B00                       		bmi.s	loc_722A8
0006D556 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006D55C 2B41 0020                  		move.l	d1,$20(a5)
0006D560                            
0006D560                            loc_722A8:
0006D560 51CF FF7E                  		dbf	d7,loc_72228
0006D564                            
0006D564 4A2E 0250                  		tst.b	$250(a6)
0006D568 6A00                       		bpl.s	loc_722B8
0006D56A 08EE 0002 0340             		bset	#2,$340(a6)
0006D570                            
0006D570                            loc_722B8:
0006D570 4A2E 0310                  		tst.b	$310(a6)
0006D574 6A00                       		bpl.s	locret_722C4
0006D576 08EE 0002 0370             		bset	#2,$370(a6)
0006D57C                            
0006D57C                            locret_722C4:
0006D57C 4E75                       		rts	
0006D57E                            ; ===========================================================================
0006D57E                            
0006D57E                            loc_722C6:
0006D57E 4216                       		clr.b	0(a6)
0006D580 4E75                       		rts	
0006D582                            ; ===========================================================================
0006D582 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
0006D586 0000 0000                  		dc.l 0
0006D58A 00FF F100                  		dc.l $FFF100
0006D58E 00FF F130                  		dc.l $FFF130
0006D592 00FF F190                  		dc.l $FFF190
0006D596 00FF F1C0                  		dc.l $FFF1C0
0006D59A 00FF F1F0                  		dc.l $FFF1F0
0006D59E 00FF F1F0                  		dc.l $FFF1F0
0006D5A2 00FF F220                  dword_722EC:	dc.l $FFF220
0006D5A6 0000 0000                  		dc.l 0
0006D5AA 00FF F250                  		dc.l $FFF250
0006D5AE 00FF F280                  		dc.l $FFF280
0006D5B2 00FF F2B0                  		dc.l $FFF2B0
0006D5B6 00FF F2E0                  		dc.l $FFF2E0
0006D5BA 00FF F310                  		dc.l $FFF310
0006D5BE 00FF F310                  		dc.l $FFF310
0006D5C2                            ; ===========================================================================
0006D5C2                            ; ---------------------------------------------------------------------------
0006D5C2                            ; Play GHZ waterfall sound
0006D5C2                            ; ---------------------------------------------------------------------------
0006D5C2                            
0006D5C2                            Sound_D0toDF:				; XREF: Sound_ChkValue
0006D5C2 4A2E 0027                  		tst.b	$27(a6)
0006D5C6 6600 0000                  		bne.w	locret_723C6
0006D5CA 4A2E 0004                  		tst.b	4(a6)
0006D5CE 6600 0000                  		bne.w	locret_723C6
0006D5D2 4A2E 0024                  		tst.b	$24(a6)
0006D5D6 6600 0000                  		bne.w	locret_723C6
0006D5DA 2079 0006 CC38             		movea.l	(Go_SoundD0).l,a0
0006D5E0 0407 00D0                  		subi.b	#$D0,d7
0006D5E4 E54F                       		lsl.w	#2,d7
0006D5E6 2670 7000                  		movea.l	(a0,d7.w),a3
0006D5EA 224B                       		movea.l	a3,a1
0006D5EC 7000                       		moveq	#0,d0
0006D5EE 3019                       		move.w	(a1)+,d0
0006D5F0 D08B                       		add.l	a3,d0
0006D5F2 2D40 0020                  		move.l	d0,$20(a6)
0006D5F6 1A19                       		move.b	(a1)+,d5
0006D5F8 1E19                       		move.b	(a1)+,d7
0006D5FA 5307                       		subq.b	#1,d7
0006D5FC 7C30                       		moveq	#$30,d6
0006D5FE                            
0006D5FE                            loc_72348:
0006D5FE 1829 0001                  		move.b	1(a1),d4
0006D602 6B00                       		bmi.s	loc_7235A
0006D604 08EE 0002 0100             		bset	#2,$100(a6)
0006D60A 4BEE 0340                  		lea	$340(a6),a5
0006D60E 6000                       		bra.s	loc_72364
0006D610                            ; ===========================================================================
0006D610                            
0006D610                            loc_7235A:
0006D610 08EE 0002 01F0             		bset	#2,$1F0(a6)
0006D616 4BEE 0370                  		lea	$370(a6),a5
0006D61A                            
0006D61A                            loc_72364:
0006D61A 244D                       		movea.l	a5,a2
0006D61C 700B                       		moveq	#$B,d0
0006D61E                            
0006D61E                            loc_72368:
0006D61E 429A                       		clr.l	(a2)+
0006D620 51C8 FFFC                  		dbf	d0,loc_72368
0006D624                            
0006D624 3A99                       		move.w	(a1)+,(a5)
0006D626 1B45 0002                  		move.b	d5,2(a5)
0006D62A 7000                       		moveq	#0,d0
0006D62C 3019                       		move.w	(a1)+,d0
0006D62E D08B                       		add.l	a3,d0
0006D630 2B40 0004                  		move.l	d0,4(a5)
0006D634 3B59 0008                  		move.w	(a1)+,8(a5)
0006D638 1B7C 0001 000E             		move.b	#1,$E(a5)
0006D63E 1B46 000D                  		move.b	d6,$D(a5)
0006D642 4A04                       		tst.b	d4
0006D644 6B00                       		bmi.s	loc_72396
0006D646 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
0006D64C                            
0006D64C                            loc_72396:
0006D64C 51CF FFB0                  		dbf	d7,loc_72348
0006D650                            
0006D650 4A2E 0250                  		tst.b	$250(a6)
0006D654 6A00                       		bpl.s	loc_723A6
0006D656 08EE 0002 0340             		bset	#2,$340(a6)
0006D65C                            
0006D65C                            loc_723A6:
0006D65C 4A2E 0310                  		tst.b	$310(a6)
0006D660 6A00                       		bpl.s	locret_723C6
0006D662 08EE 0002 0370             		bset	#2,$370(a6)
0006D668 0004 001F                  		ori.b	#$1F,d4
0006D66C 13C4 00C0 0011             		move.b	d4,($C00011).l
0006D672 0844 0005                  		bchg	#5,d4
0006D676 13C4 00C0 0011             		move.b	d4,($C00011).l
0006D67C                            
0006D67C                            locret_723C6:
0006D67C 4E75                       		rts	
0006D67E                            ; End of function Sound_ChkValue
0006D67E                            
0006D67E                            ; ===========================================================================
0006D67E 00FF F100                  		dc.l $FFF100
0006D682 00FF F1F0                  		dc.l $FFF1F0
0006D686 00FF F250                  		dc.l $FFF250
0006D68A 00FF F310                  		dc.l $FFF310
0006D68E 00FF F340                  		dc.l $FFF340
0006D692 00FF F370                  		dc.l $FFF370
0006D696                            
0006D696                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D696                            
0006D696                            
0006D696                            Snd_FadeOut1:				; XREF: Sound_E0
0006D696 4216                       		clr.b	0(a6)
0006D698 4BEE 0220                  		lea	$220(a6),a5
0006D69C 7E05                       		moveq	#5,d7
0006D69E                            
0006D69E                            loc_723EA:
0006D69E 4A15                       		tst.b	(a5)
0006D6A0 6A00 0000                  		bpl.w	loc_72472
0006D6A4 0895 0007                  		bclr	#7,(a5)
0006D6A8 7600                       		moveq	#0,d3
0006D6AA 162D 0001                  		move.b	1(a5),d3
0006D6AE 6B00                       		bmi.s	loc_7243C
0006D6B0 4EBA 0000                  		jsr	sub_726FE(pc)
0006D6B4 0C03 0004                  		cmpi.b	#4,d3
0006D6B8 6600                       		bne.s	loc_72416
0006D6BA 4A2E 0340                  		tst.b	$340(a6)
0006D6BE 6A00                       		bpl.s	loc_72416
0006D6C0 4BEE 0340                  		lea	$340(a6),a5
0006D6C4 226E 0020                  		movea.l	$20(a6),a1
0006D6C8 6000                       		bra.s	loc_72428
0006D6CA                            ; ===========================================================================
0006D6CA                            
0006D6CA                            loc_72416:
0006D6CA 5503                       		subq.b	#2,d3
0006D6CC E50B                       		lsl.b	#2,d3
0006D6CE 41FA FEB2                  		lea	dword_722CC(pc),a0
0006D6D2 264D                       		movea.l	a5,a3
0006D6D4 2A70 3000                  		movea.l	(a0,d3.w),a5
0006D6D8 226E 0018                  		movea.l	$18(a6),a1
0006D6DC                            
0006D6DC                            loc_72428:
0006D6DC 0895 0002                  		bclr	#2,(a5)
0006D6E0 08D5 0001                  		bset	#1,(a5)
0006D6E4 102D 000B                  		move.b	$B(a5),d0
0006D6E8 4EBA 0000                  		jsr	sub_72C4E(pc)
0006D6EC 2A4B                       		movea.l	a3,a5
0006D6EE 6000                       		bra.s	loc_72472
0006D6F0                            ; ===========================================================================
0006D6F0                            
0006D6F0                            loc_7243C:
0006D6F0 4EBA 0000                  		jsr	sub_729A0(pc)
0006D6F4 41EE 0370                  		lea	$370(a6),a0
0006D6F8 0C03 00E0                  		cmpi.b	#$E0,d3
0006D6FC 6700                       		beq.s	loc_7245A
0006D6FE 0C03 00C0                  		cmpi.b	#$C0,d3
0006D702 6700                       		beq.s	loc_7245A
0006D704 E60B                       		lsr.b	#3,d3
0006D706 41FA FE7A                  		lea	dword_722CC(pc),a0
0006D70A 2070 3000                  		movea.l	(a0,d3.w),a0
0006D70E                            
0006D70E                            loc_7245A:
0006D70E 0890 0002                  		bclr	#2,(a0)
0006D712 08D0 0001                  		bset	#1,(a0)
0006D716 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006D71C 6600                       		bne.s	loc_72472
0006D71E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0006D726                            
0006D726                            loc_72472:
0006D726 DAFC 0030                  		adda.w	#$30,a5
0006D72A 51CF FF72                  		dbf	d7,loc_723EA
0006D72E                            
0006D72E 4E75                       		rts	
0006D730                            ; End of function Snd_FadeOut1
0006D730                            
0006D730                            
0006D730                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D730                            
0006D730                            
0006D730                            Snd_FadeOut2:				; XREF: Sound_E0
0006D730 4BEE 0340                  		lea	$340(a6),a5
0006D734 4A15                       		tst.b	(a5)
0006D736 6A00                       		bpl.s	loc_724AE
0006D738 0895 0007                  		bclr	#7,(a5)
0006D73C 0815 0002                  		btst	#2,(a5)
0006D740 6600                       		bne.s	loc_724AE
0006D742 4EBA 0000                  		jsr	loc_7270A(pc)
0006D746 4BEE 0100                  		lea	$100(a6),a5
0006D74A 0895 0002                  		bclr	#2,(a5)
0006D74E 08D5 0001                  		bset	#1,(a5)
0006D752 4A15                       		tst.b	(a5)
0006D754 6A00                       		bpl.s	loc_724AE
0006D756 226E 0018                  		movea.l	$18(a6),a1
0006D75A 102D 000B                  		move.b	$B(a5),d0
0006D75E 4EBA 0000                  		jsr	sub_72C4E(pc)
0006D762                            
0006D762                            loc_724AE:
0006D762 4BEE 0370                  		lea	$370(a6),a5
0006D766 4A15                       		tst.b	(a5)
0006D768 6A00                       		bpl.s	locret_724E4
0006D76A 0895 0007                  		bclr	#7,(a5)
0006D76E 0815 0002                  		btst	#2,(a5)
0006D772 6600                       		bne.s	locret_724E4
0006D774 4EBA 0000                  		jsr	loc_729A6(pc)
0006D778 4BEE 01F0                  		lea	$1F0(a6),a5
0006D77C 0895 0002                  		bclr	#2,(a5)
0006D780 08D5 0001                  		bset	#1,(a5)
0006D784 4A15                       		tst.b	(a5)
0006D786 6A00                       		bpl.s	locret_724E4
0006D788 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
0006D78E 6600                       		bne.s	locret_724E4
0006D790 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
0006D798                            
0006D798                            locret_724E4:
0006D798 4E75                       		rts	
0006D79A                            ; End of function Snd_FadeOut2
0006D79A                            
0006D79A                            ; ===========================================================================
0006D79A                            ; ---------------------------------------------------------------------------
0006D79A                            ; Fade out music
0006D79A                            ; ---------------------------------------------------------------------------
0006D79A                            
0006D79A                            Sound_E0:				; XREF: Sound_ExIndex
0006D79A 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
0006D79E 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
0006D7A2 1D7C 0003 0006             		move.b	#3,6(a6)
0006D7A8 1D7C 0028 0004             		move.b	#$28,4(a6)
0006D7AE 422E 0040                  		clr.b	$40(a6)
0006D7B2 422E 002A                  		clr.b	$2A(a6)
0006D7B6 4E75                       		rts	
0006D7B8                            
0006D7B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D7B8                            
0006D7B8                            
0006D7B8                            sub_72504:				; XREF: sub_71B4C
0006D7B8 102E 0006                  		move.b	6(a6),d0
0006D7BC 6700                       		beq.s	loc_72510
0006D7BE 532E 0006                  		subq.b	#1,6(a6)
0006D7C2 4E75                       		rts	
0006D7C4                            ; ===========================================================================
0006D7C4                            
0006D7C4                            loc_72510:
0006D7C4 532E 0004                  		subq.b	#1,4(a6)
0006D7C8 6700 0000                  		beq.w	Sound_E4
0006D7CC 1D7C 0003 0006             		move.b	#3,6(a6)
0006D7D2 4BEE 0070                  		lea	$70(a6),a5
0006D7D6 7E05                       		moveq	#5,d7
0006D7D8                            
0006D7D8                            loc_72524:
0006D7D8 4A15                       		tst.b	(a5)
0006D7DA 6A00                       		bpl.s	loc_72538
0006D7DC 522D 0009                  		addq.b	#1,9(a5)
0006D7E0 6A00                       		bpl.s	loc_72534
0006D7E2 0895 0007                  		bclr	#7,(a5)
0006D7E6 6000                       		bra.s	loc_72538
0006D7E8                            ; ===========================================================================
0006D7E8                            
0006D7E8                            loc_72534:
0006D7E8 4EBA 0000                  		jsr	sub_72CB4(pc)
0006D7EC                            
0006D7EC                            loc_72538:
0006D7EC DAFC 0030                  		adda.w	#$30,a5
0006D7F0 51CF FFE6                  		dbf	d7,loc_72524
0006D7F4                            
0006D7F4 7E02                       		moveq	#2,d7
0006D7F6                            
0006D7F6                            loc_72542:
0006D7F6 4A15                       		tst.b	(a5)
0006D7F8 6A00                       		bpl.s	loc_72560
0006D7FA 522D 0009                  		addq.b	#1,9(a5)
0006D7FE 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
0006D804 6500                       		bcs.s	loc_72558
0006D806 0895 0007                  		bclr	#7,(a5)
0006D80A 6000                       		bra.s	loc_72560
0006D80C                            ; ===========================================================================
0006D80C                            
0006D80C                            loc_72558:
0006D80C 1C2D 0009                  		move.b	9(a5),d6
0006D810 4EBA 0000                  		jsr	sub_7296A(pc)
0006D814                            
0006D814                            loc_72560:
0006D814 DAFC 0030                  		adda.w	#$30,a5
0006D818 51CF FFDC                  		dbf	d7,loc_72542
0006D81C                            
0006D81C 4E75                       		rts	
0006D81E                            ; End of function sub_72504
0006D81E                            
0006D81E                            
0006D81E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D81E                            
0006D81E                            
0006D81E                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0006D81E 7602                       		moveq	#2,d3
0006D820 7028                       		moveq	#$28,d0
0006D822                            
0006D822                            loc_7256E:
0006D822 1203                       		move.b	d3,d1
0006D824 4EBA 0000                  		jsr	sub_7272E(pc)
0006D828 5801                       		addq.b	#4,d1
0006D82A 4EBA 0000                  		jsr	sub_7272E(pc)
0006D82E 51CB FFF2                  		dbf	d3,loc_7256E
0006D832                            
0006D832 7040                       		moveq	#$40,d0
0006D834 727F                       		moveq	#$7F,d1
0006D836 7802                       		moveq	#2,d4
0006D838                            
0006D838                            loc_72584:
0006D838 7603                       		moveq	#3,d3
0006D83A                            
0006D83A                            loc_72586:
0006D83A 4EBA 0000                  		jsr	sub_7272E(pc)
0006D83E 4EBA 0000                  		jsr	sub_72764(pc)
0006D842 5840                       		addq.w	#4,d0
0006D844 51CB FFF4                  		dbf	d3,loc_72586
0006D848                            
0006D848 0400 000F                  		subi.b	#$F,d0
0006D84C 51CC FFEA                  		dbf	d4,loc_72584
0006D850                            
0006D850 4E75                       		rts	
0006D852                            ; End of function sub_7256A
0006D852                            
0006D852                            ; ===========================================================================
0006D852                            ; ---------------------------------------------------------------------------
0006D852                            ; Stop music
0006D852                            ; ---------------------------------------------------------------------------
0006D852                            
0006D852                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0006D852 702B                       		moveq	#$2B,d0
0006D854 123C 0080                  		move.b	#$80,d1
0006D858 4EBA 0000                  		jsr	sub_7272E(pc)
0006D85C 7027                       		moveq	#$27,d0
0006D85E 7200                       		moveq	#0,d1
0006D860 4EBA 0000                  		jsr	sub_7272E(pc)
0006D864 204E                       		movea.l	a6,a0
0006D866 303C 00E3                  		move.w	#$E3,d0
0006D86A                            
0006D86A                            loc_725B6:
0006D86A 4298                       		clr.l	(a0)+
0006D86C 51C8 FFFC                  		dbf	d0,loc_725B6
0006D870                            
0006D870 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
0006D876 4EBA FFA6                  		jsr	sub_7256A(pc)
0006D87A 6000 0000                  		bra.w	sub_729B6
0006D87E                            
0006D87E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D87E                            
0006D87E                            
0006D87E                            sub_725CA:				; XREF: Sound_ChkValue
0006D87E 204E                       		movea.l	a6,a0
0006D880 1216                       		move.b	0(a6),d1
0006D882 142E 0027                  		move.b	$27(a6),d2
0006D886 162E 002A                  		move.b	$2A(a6),d3
0006D88A 182E 0026                  		move.b	$26(a6),d4
0006D88E 3A2E 000A                  		move.w	$A(a6),d5
0006D892 303C 0087                  		move.w	#$87,d0
0006D896                            
0006D896                            loc_725E4:
0006D896 4298                       		clr.l	(a0)+
0006D898 51C8 FFFC                  		dbf	d0,loc_725E4
0006D89C                            
0006D89C 1C81                       		move.b	d1,0(a6)
0006D89E 1D42 0027                  		move.b	d2,$27(a6)
0006D8A2 1D43 002A                  		move.b	d3,$2A(a6)
0006D8A6 1D44 0026                  		move.b	d4,$26(a6)
0006D8AA 3D45 000A                  		move.w	d5,$A(a6)
0006D8AE 1D7C 0080 0009             		move.b	#$80,9(a6)
0006D8B4 4EBA FF68                  		jsr	sub_7256A(pc)
0006D8B8 6000 0000                  		bra.w	sub_729B6
0006D8BC                            ; End of function sub_725CA
0006D8BC                            
0006D8BC                            
0006D8BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D8BC                            
0006D8BC                            
0006D8BC                            sub_7260C:				; XREF: sub_71B4C
0006D8BC 1D6E 0002 0001             		move.b	2(a6),1(a6)
0006D8C2 41EE 004E                  		lea	$4E(a6),a0
0006D8C6 7030                       		moveq	#$30,d0
0006D8C8 7209                       		moveq	#9,d1
0006D8CA                            
0006D8CA                            loc_7261A:
0006D8CA 5210                       		addq.b	#1,(a0)
0006D8CC D0C0                       		adda.w	d0,a0
0006D8CE 51C9 FFFA                  		dbf	d1,loc_7261A
0006D8D2                            
0006D8D2 4E75                       		rts	
0006D8D4                            ; End of function sub_7260C
0006D8D4                            
0006D8D4                            ; ===========================================================================
0006D8D4                            ; ---------------------------------------------------------------------------
0006D8D4                            ; Speed	up music
0006D8D4                            ; ---------------------------------------------------------------------------
0006D8D4                            
0006D8D4                            Sound_E2:				; XREF: Sound_ExIndex
0006D8D4 4A2E 0027                  		tst.b	$27(a6)
0006D8D8 6600                       		bne.s	loc_7263E
0006D8DA 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0006D8E0 1D6E 0029 0001             		move.b	$29(a6),1(a6)
0006D8E6 1D7C 0080 002A             		move.b	#$80,$2A(a6)
0006D8EC 4E75                       		rts	
0006D8EE                            ; ===========================================================================
0006D8EE                            
0006D8EE                            loc_7263E:
0006D8EE 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
0006D8F4 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
0006D8FA 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0006D900 4E75                       		rts	
0006D902                            ; ===========================================================================
0006D902                            ; ---------------------------------------------------------------------------
0006D902                            ; Change music back to normal speed
0006D902                            ; ---------------------------------------------------------------------------
0006D902                            
0006D902                            Sound_E3:				; XREF: Sound_ExIndex
0006D902 4A2E 0027                  		tst.b	$27(a6)
0006D906 6600                       		bne.s	loc_7266A
0006D908 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0006D90E 1D6E 0028 0001             		move.b	$28(a6),1(a6)
0006D914 422E 002A                  		clr.b	$2A(a6)
0006D918 4E75                       		rts	
0006D91A                            ; ===========================================================================
0006D91A                            
0006D91A                            loc_7266A:
0006D91A 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0006D920 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
0006D926 422E 03CA                  		clr.b	$3CA(a6)
0006D92A 4E75                       		rts	
0006D92C                            
0006D92C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D92C                            
0006D92C                            
0006D92C                            sub_7267C:				; XREF: sub_71B4C
0006D92C 4A2E 0025                  		tst.b	$25(a6)
0006D930 6700                       		beq.s	loc_72688
0006D932 532E 0025                  		subq.b	#1,$25(a6)
0006D936 4E75                       		rts	
0006D938                            ; ===========================================================================
0006D938                            
0006D938                            loc_72688:
0006D938 4A2E 0026                  		tst.b	$26(a6)
0006D93C 6700                       		beq.s	loc_726D6
0006D93E 532E 0026                  		subq.b	#1,$26(a6)
0006D942 1D7C 0002 0025             		move.b	#2,$25(a6)
0006D948 4BEE 0070                  		lea	$70(a6),a5
0006D94C 7E05                       		moveq	#5,d7
0006D94E                            
0006D94E                            loc_7269E:
0006D94E 4A15                       		tst.b	(a5)
0006D950 6A00                       		bpl.s	loc_726AA
0006D952 532D 0009                  		subq.b	#1,9(a5)
0006D956 4EBA 0000                  		jsr	sub_72CB4(pc)
0006D95A                            
0006D95A                            loc_726AA:
0006D95A DAFC 0030                  		adda.w	#$30,a5
0006D95E 51CF FFEE                  		dbf	d7,loc_7269E
0006D962 7E02                       		moveq	#2,d7
0006D964                            
0006D964                            loc_726B4:
0006D964 4A15                       		tst.b	(a5)
0006D966 6A00                       		bpl.s	loc_726CC
0006D968 532D 0009                  		subq.b	#1,9(a5)
0006D96C 1C2D 0009                  		move.b	9(a5),d6
0006D970 0C06 0010                  		cmpi.b	#$10,d6
0006D974 6500                       		bcs.s	loc_726C8
0006D976 7C0F                       		moveq	#$F,d6
0006D978                            
0006D978                            loc_726C8:
0006D978 4EBA 0000                  		jsr	sub_7296A(pc)
0006D97C                            
0006D97C                            loc_726CC:
0006D97C DAFC 0030                  		adda.w	#$30,a5
0006D980 51CF FFE2                  		dbf	d7,loc_726B4
0006D984 4E75                       		rts	
0006D986                            ; ===========================================================================
0006D986                            
0006D986                            loc_726D6:
0006D986 08AE 0002 0040             		bclr	#2,$40(a6)
0006D98C 422E 0024                  		clr.b	$24(a6)
0006D990 4E75                       		rts	
0006D992                            ; End of function sub_7267C
0006D992                            
0006D992                            ; ===========================================================================
0006D992                            
0006D992                            loc_726E2:				; XREF: sub_71CCA
0006D992 0815 0001                  		btst	#1,(a5)
0006D996 6600                       		bne.s	locret_726FC
0006D998 0815 0002                  		btst	#2,(a5)
0006D99C 6600                       		bne.s	locret_726FC
0006D99E 7028                       		moveq	#$28,d0
0006D9A0 122D 0001                  		move.b	1(a5),d1
0006D9A4 0001 00F0                  		ori.b	#-$10,d1
0006D9A8 6000 0000                  		bra.w	sub_7272E
0006D9AC                            ; ===========================================================================
0006D9AC                            
0006D9AC                            locret_726FC:
0006D9AC 4E75                       		rts	
0006D9AE                            
0006D9AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D9AE                            
0006D9AE                            
0006D9AE                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
0006D9AE 0815 0004                  		btst	#4,(a5)
0006D9B2 6600                       		bne.s	locret_72714
0006D9B4 0815 0002                  		btst	#2,(a5)
0006D9B8 6600                       		bne.s	locret_72714
0006D9BA                            
0006D9BA                            loc_7270A:				; XREF: Snd_FadeOut2
0006D9BA 7028                       		moveq	#$28,d0
0006D9BC 122D 0001                  		move.b	1(a5),d1
0006D9C0 6000 0000                  		bra.w	sub_7272E
0006D9C4                            ; ===========================================================================
0006D9C4                            
0006D9C4                            locret_72714:
0006D9C4 4E75                       		rts	
0006D9C6                            ; End of function sub_726FE
0006D9C6                            
0006D9C6                            ; ===========================================================================
0006D9C6                            
0006D9C6                            loc_72716:				; XREF: sub_72A5A
0006D9C6 0815 0002                  		btst	#2,(a5)
0006D9CA 6600                       		bne.s	locret_72720
0006D9CC 6000 0000                  		bra.w	sub_72722
0006D9D0                            ; ===========================================================================
0006D9D0                            
0006D9D0                            locret_72720:
0006D9D0 4E75                       		rts	
0006D9D2                            
0006D9D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D9D2                            
0006D9D2                            
0006D9D2                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
0006D9D2 082D 0002 0001             		btst	#2,1(a5)
0006D9D8 6600                       		bne.s	loc_7275A
0006D9DA D02D 0001                  		add.b	1(a5),d0
0006D9DE                            ; End of function sub_72722
0006D9DE                            
0006D9DE                            
0006D9DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006D9DE                            
0006D9DE                            
0006D9DE                            sub_7272E:				; XREF: loc_71E6A
0006D9DE 1439 00A0 4000             		move.b	($A04000).l,d2
0006D9E4 0802 0007                  		btst	#7,d2
0006D9E8 66F4                       		bne.s	sub_7272E
0006D9EA 13C0 00A0 4000             		move.b	d0,($A04000).l
0006D9F0 4E71                       		nop	
0006D9F2 4E71                       		nop	
0006D9F4 4E71                       		nop	
0006D9F6                            
0006D9F6                            loc_72746:
0006D9F6 1439 00A0 4000             		move.b	($A04000).l,d2
0006D9FC 0802 0007                  		btst	#7,d2
0006DA00 66F4                       		bne.s	loc_72746
0006DA02                            
0006DA02 13C1 00A0 4001             		move.b	d1,($A04001).l
0006DA08 4E75                       		rts	
0006DA0A                            ; End of function sub_7272E
0006DA0A                            
0006DA0A                            ; ===========================================================================
0006DA0A                            
0006DA0A                            loc_7275A:				; XREF: sub_72722
0006DA0A 142D 0001                  		move.b	1(a5),d2
0006DA0E 0882 0002                  		bclr	#2,d2
0006DA12 D002                       		add.b	d2,d0
0006DA14                            
0006DA14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DA14                            
0006DA14                            
0006DA14                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
0006DA14 1439 00A0 4000             		move.b	($A04000).l,d2
0006DA1A 0802 0007                  		btst	#7,d2
0006DA1E 66F4                       		bne.s	sub_72764
0006DA20 13C0 00A0 4002             		move.b	d0,($A04002).l
0006DA26 4E71                       		nop	
0006DA28 4E71                       		nop	
0006DA2A 4E71                       		nop	
0006DA2C                            
0006DA2C                            loc_7277C:
0006DA2C 1439 00A0 4000             		move.b	($A04000).l,d2
0006DA32 0802 0007                  		btst	#7,d2
0006DA36 66F4                       		bne.s	loc_7277C
0006DA38                            
0006DA38 13C1 00A0 4003             		move.b	d1,($A04003).l
0006DA3E 4E75                       		rts	
0006DA40                            ; End of function sub_72764
0006DA40                            
0006DA40                            ; ===========================================================================
0006DA40 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0006DA52 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
0006DA64 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
0006DA74 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
0006DA84 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
0006DA94 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
0006DAA4 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
0006DAB4 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
0006DAC4 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
0006DAD4 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
0006DAE4 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
0006DAF4 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0006DB00                            
0006DB00                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DB00                            
0006DB00                            
0006DB00                            sub_72850:				; XREF: sub_71B4C
0006DB00 532D 000E                  		subq.b	#1,$E(a5)
0006DB04 6600                       		bne.s	loc_72866
0006DB06 0895 0004                  		bclr	#4,(a5)
0006DB0A 4EBA 0000                  		jsr	sub_72878(pc)
0006DB0E 4EBA 0000                  		jsr	sub_728DC(pc)
0006DB12 6000 0000                  		bra.w	loc_7292E
0006DB16                            ; ===========================================================================
0006DB16                            
0006DB16                            loc_72866:
0006DB16 4EBA F52A                  		jsr	sub_71D9E(pc)
0006DB1A 4EBA 0000                  		jsr	sub_72926(pc)
0006DB1E 4EBA F54A                  		jsr	sub_71DC6(pc)
0006DB22 4EBA 0000                  		jsr	sub_728E2(pc)
0006DB26 4E75                       		rts	
0006DB28                            ; End of function sub_72850
0006DB28                            
0006DB28                            
0006DB28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DB28                            
0006DB28                            
0006DB28                            sub_72878:				; XREF: sub_72850
0006DB28 0895 0001                  		bclr	#1,(a5)
0006DB2C 286D 0004                  		movea.l	4(a5),a4
0006DB30                            
0006DB30                            loc_72880:
0006DB30 7A00                       		moveq	#0,d5
0006DB32 1A1C                       		move.b	(a4)+,d5
0006DB34 0C05 00E0                  		cmpi.b	#$E0,d5
0006DB38 6500                       		bcs.s	loc_72890
0006DB3A 4EBA 0000                  		jsr	sub_72A5A(pc)
0006DB3E 60F0                       		bra.s	loc_72880
0006DB40                            ; ===========================================================================
0006DB40                            
0006DB40                            loc_72890:
0006DB40 4A05                       		tst.b	d5
0006DB42 6A00                       		bpl.s	loc_728A4
0006DB44 4EBA 0000                  		jsr	sub_728AC(pc)
0006DB48 1A1C                       		move.b	(a4)+,d5
0006DB4A 4A05                       		tst.b	d5
0006DB4C 6A00                       		bpl.s	loc_728A4
0006DB4E 534C                       		subq.w	#1,a4
0006DB50 6000 F4B2                  		bra.w	sub_71D60
0006DB54                            ; ===========================================================================
0006DB54                            
0006DB54                            loc_728A4:
0006DB54 4EBA F48E                  		jsr	sub_71D40(pc)
0006DB58 6000 F4AA                  		bra.w	sub_71D60
0006DB5C                            ; End of function sub_72878
0006DB5C                            
0006DB5C                            
0006DB5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DB5C                            
0006DB5C                            
0006DB5C                            sub_728AC:				; XREF: sub_72878
0006DB5C 0405 0081                  		subi.b	#$81,d5
0006DB60 6500                       		bcs.s	loc_728CA
0006DB62 DA2D 0008                  		add.b	8(a5),d5
0006DB66 0245 007F                  		andi.w	#$7F,d5
0006DB6A E34D                       		lsl.w	#1,d5
0006DB6C 41FA 0000                  		lea	word_729CE(pc),a0
0006DB70 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
0006DB76 6000 F48C                  		bra.w	sub_71D60
0006DB7A                            ; ===========================================================================
0006DB7A                            
0006DB7A                            loc_728CA:
0006DB7A 08D5 0001                  		bset	#1,(a5)
0006DB7E 3B7C FFFF 0010             		move.w	#-1,$10(a5)
0006DB84 4EBA F47E                  		jsr	sub_71D60(pc)
0006DB88 6000 0000                  		bra.w	sub_729A0
0006DB8C                            ; End of function sub_728AC
0006DB8C                            
0006DB8C                            
0006DB8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DB8C                            
0006DB8C                            
0006DB8C                            sub_728DC:				; XREF: sub_72850
0006DB8C 3C2D 0010                  		move.w	$10(a5),d6
0006DB90 6B00                       		bmi.s	loc_72920
0006DB92                            ; End of function sub_728DC
0006DB92                            
0006DB92                            
0006DB92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DB92                            
0006DB92                            
0006DB92                            sub_728E2:				; XREF: sub_72850
0006DB92 102D 001E                  		move.b	$1E(a5),d0
0006DB96 4880                       		ext.w	d0
0006DB98 DC40                       		add.w	d0,d6
0006DB9A 0815 0002                  		btst	#2,(a5)
0006DB9E 6600                       		bne.s	locret_7291E
0006DBA0 0815 0001                  		btst	#1,(a5)
0006DBA4 6600                       		bne.s	locret_7291E
0006DBA6 102D 0001                  		move.b	1(a5),d0
0006DBAA 0C00 00E0                  		cmpi.b	#$E0,d0
0006DBAE 6600                       		bne.s	loc_72904
0006DBB0 103C 00C0                  		move.b	#$C0,d0
0006DBB4                            
0006DBB4                            loc_72904:
0006DBB4 3206                       		move.w	d6,d1
0006DBB6 0201 000F                  		andi.b	#$F,d1
0006DBBA 8001                       		or.b	d1,d0
0006DBBC E84E                       		lsr.w	#4,d6
0006DBBE 0206 003F                  		andi.b	#$3F,d6
0006DBC2 13C0 00C0 0011             		move.b	d0,($C00011).l
0006DBC8 13C6 00C0 0011             		move.b	d6,($C00011).l
0006DBCE                            
0006DBCE                            locret_7291E:
0006DBCE 4E75                       		rts	
0006DBD0                            ; End of function sub_728E2
0006DBD0                            
0006DBD0                            ; ===========================================================================
0006DBD0                            
0006DBD0                            loc_72920:				; XREF: sub_728DC
0006DBD0 08D5 0001                  		bset	#1,(a5)
0006DBD4 4E75                       		rts	
0006DBD6                            
0006DBD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DBD6                            
0006DBD6                            
0006DBD6                            sub_72926:				; XREF: sub_72850
0006DBD6 4A2D 000B                  		tst.b	$B(a5)
0006DBDA 6700 0000                  		beq.w	locret_7298A
0006DBDE                            
0006DBDE                            loc_7292E:				; XREF: sub_72850
0006DBDE 1C2D 0009                  		move.b	9(a5),d6
0006DBE2 7000                       		moveq	#0,d0
0006DBE4 102D 000B                  		move.b	$B(a5),d0
0006DBE8 6700                       		beq.s	sub_7296A
0006DBEA 2079 0006 CC48             		movea.l	(Go_PSGIndex).l,a0
0006DBF0 5340                       		subq.w	#1,d0
0006DBF2 E548                       		lsl.w	#2,d0
0006DBF4 2070 0000                  		movea.l	(a0,d0.w),a0
0006DBF8 102D 000C                  		move.b	$C(a5),d0
0006DBFC 1030 0000                  		move.b	(a0,d0.w),d0
0006DC00 522D 000C                  		addq.b	#1,$C(a5)
0006DC04 0800 0007                  		btst	#7,d0
0006DC08 6700                       		beq.s	loc_72960
0006DC0A 0C00 0080                  		cmpi.b	#$80,d0
0006DC0E 6700                       		beq.s	loc_7299A
0006DC10                            
0006DC10                            loc_72960:
0006DC10 DC40                       		add.w	d0,d6
0006DC12 0C06 0010                  		cmpi.b	#$10,d6
0006DC16 6500                       		bcs.s	sub_7296A
0006DC18 7C0F                       		moveq	#$F,d6
0006DC1A                            ; End of function sub_72926
0006DC1A                            
0006DC1A                            
0006DC1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DC1A                            
0006DC1A                            
0006DC1A                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
0006DC1A 0815 0001                  		btst	#1,(a5)
0006DC1E 6600                       		bne.s	locret_7298A
0006DC20 0815 0002                  		btst	#2,(a5)
0006DC24 6600                       		bne.s	locret_7298A
0006DC26 0815 0004                  		btst	#4,(a5)
0006DC2A 6600                       		bne.s	loc_7298C
0006DC2C                            
0006DC2C                            loc_7297C:
0006DC2C 8C2D 0001                  		or.b	1(a5),d6
0006DC30 0606 0010                  		addi.b	#$10,d6
0006DC34 13C6 00C0 0011             		move.b	d6,($C00011).l
0006DC3A                            
0006DC3A                            locret_7298A:
0006DC3A 4E75                       		rts	
0006DC3C                            ; ===========================================================================
0006DC3C                            
0006DC3C                            loc_7298C:
0006DC3C 4A2D 0013                  		tst.b	$13(a5)
0006DC40 67EA                       		beq.s	loc_7297C
0006DC42 4A2D 0012                  		tst.b	$12(a5)
0006DC46 66E4                       		bne.s	loc_7297C
0006DC48 4E75                       		rts	
0006DC4A                            ; End of function sub_7296A
0006DC4A                            
0006DC4A                            ; ===========================================================================
0006DC4A                            
0006DC4A                            loc_7299A:				; XREF: sub_72926
0006DC4A 532D 000C                  		subq.b	#1,$C(a5)
0006DC4E 4E75                       		rts	
0006DC50                            
0006DC50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DC50                            
0006DC50                            
0006DC50                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0006DC50 0815 0002                  		btst	#2,(a5)
0006DC54 6600                       		bne.s	locret_729B4
0006DC56                            
0006DC56                            loc_729A6:				; XREF: Snd_FadeOut2
0006DC56 102D 0001                  		move.b	1(a5),d0
0006DC5A 0000 001F                  		ori.b	#$1F,d0
0006DC5E 13C0 00C0 0011             		move.b	d0,($C00011).l
0006DC64                            
0006DC64                            locret_729B4:
0006DC64 4E75                       		rts	
0006DC66                            ; End of function sub_729A0
0006DC66                            
0006DC66                            
0006DC66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DC66                            
0006DC66                            
0006DC66                            sub_729B6:				; XREF: loc_71E7C
0006DC66 41F9 00C0 0011             		lea	($C00011).l,a0
0006DC6C 10BC 009F                  		move.b	#$9F,(a0)
0006DC70 10BC 00BF                  		move.b	#$BF,(a0)
0006DC74 10BC 00DF                  		move.b	#$DF,(a0)
0006DC78 10BC 00FF                  		move.b	#$FF,(a0)
0006DC7C 4E75                       		rts	
0006DC7E                            ; End of function sub_729B6
0006DC7E                            
0006DC7E                            ; ===========================================================================
0006DC7E 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
0006DC90 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
0006DCA2 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
0006DCB6 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
0006DCCA 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
0006DCDE 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
0006DCF2 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
0006DD06 0011 0000                  		dc.w $11, 0
0006DD0A                            
0006DD0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DD0A                            
0006DD0A                            
0006DD0A                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
0006DD0A 0445 00E0                  		subi.w	#$E0,d5
0006DD0E E54D                       		lsl.w	#2,d5
0006DD10 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
0006DD14                            ; End of function sub_72A5A
0006DD14                            
0006DD14                            ; ===========================================================================
0006DD14                            
0006DD14                            loc_72A64:
0006DD14 6000 0000                  		bra.w	loc_72ACC
0006DD18                            ; ===========================================================================
0006DD18 6000 0000                  		bra.w	loc_72AEC
0006DD1C                            ; ===========================================================================
0006DD1C 6000 0000                  		bra.w	loc_72AF2
0006DD20                            ; ===========================================================================
0006DD20 6000 0000                  		bra.w	loc_72AF8
0006DD24                            ; ===========================================================================
0006DD24 6000 0000                  		bra.w	loc_72B14
0006DD28                            ; ===========================================================================
0006DD28 6000 0000                  		bra.w	loc_72B9E
0006DD2C                            ; ===========================================================================
0006DD2C 6000 0000                  		bra.w	loc_72BA4
0006DD30                            ; ===========================================================================
0006DD30 6000 0000                  		bra.w	loc_72BAE
0006DD34                            ; ===========================================================================
0006DD34 6000 0000                  		bra.w	loc_72BB4
0006DD38                            ; ===========================================================================
0006DD38 6000 0000                  		bra.w	loc_72BBE
0006DD3C                            ; ===========================================================================
0006DD3C 6000 0000                  		bra.w	loc_72BC6
0006DD40                            ; ===========================================================================
0006DD40 6000 0000                  		bra.w	loc_72BD0
0006DD44                            ; ===========================================================================
0006DD44 6000 0000                  		bra.w	loc_72BE6
0006DD48                            ; ===========================================================================
0006DD48 6000 0000                  		bra.w	loc_72BEE
0006DD4C                            ; ===========================================================================
0006DD4C 6000 0000                  		bra.w	loc_72BF4
0006DD50                            ; ===========================================================================
0006DD50 6000 0000                  		bra.w	loc_72C26
0006DD54                            ; ===========================================================================
0006DD54 6000 0000                  		bra.w	loc_72D30
0006DD58                            ; ===========================================================================
0006DD58 6000 0000                  		bra.w	loc_72D52
0006DD5C                            ; ===========================================================================
0006DD5C 6000 0000                  		bra.w	loc_72D58
0006DD60                            ; ===========================================================================
0006DD60 6000 0000                  		bra.w	loc_72E06
0006DD64                            ; ===========================================================================
0006DD64 6000 0000                  		bra.w	loc_72E20
0006DD68                            ; ===========================================================================
0006DD68 6000 0000                  		bra.w	loc_72E26
0006DD6C                            ; ===========================================================================
0006DD6C 6000 0000                  		bra.w	loc_72E2C
0006DD70                            ; ===========================================================================
0006DD70 6000 0000                  		bra.w	loc_72E38
0006DD74                            ; ===========================================================================
0006DD74 6000 0000                  		bra.w	loc_72E52
0006DD78                            ; ===========================================================================
0006DD78 6000 0000                  		bra.w	loc_72E64
0006DD7C                            ; ===========================================================================
0006DD7C                            
0006DD7C                            loc_72ACC:				; XREF: loc_72A64
0006DD7C 121C                       		move.b	(a4)+,d1
0006DD7E 4A2D 0001                  		tst.b	1(a5)
0006DD82 6B00                       		bmi.s	locret_72AEA
0006DD84 102D 000A                  		move.b	$A(a5),d0
0006DD88 0200 0037                  		andi.b	#$37,d0
0006DD8C 8200                       		or.b	d0,d1
0006DD8E 1B41 000A                  		move.b	d1,$A(a5)
0006DD92 103C 00B4                  		move.b	#$B4,d0
0006DD96 6000 FC2E                  		bra.w	loc_72716
0006DD9A                            ; ===========================================================================
0006DD9A                            
0006DD9A                            locret_72AEA:
0006DD9A 4E75                       		rts	
0006DD9C                            ; ===========================================================================
0006DD9C                            
0006DD9C                            loc_72AEC:				; XREF: loc_72A64
0006DD9C 1B5C 001E                  		move.b	(a4)+,$1E(a5)
0006DDA0 4E75                       		rts	
0006DDA2                            ; ===========================================================================
0006DDA2                            
0006DDA2                            loc_72AF2:				; XREF: loc_72A64
0006DDA2 1D5C 0007                  		move.b	(a4)+,7(a6)
0006DDA6 4E75                       		rts	
0006DDA8                            ; ===========================================================================
0006DDA8                            
0006DDA8                            loc_72AF8:				; XREF: loc_72A64
0006DDA8 7000                       		moveq	#0,d0
0006DDAA 102D 000D                  		move.b	$D(a5),d0
0006DDAE 2875 0000                  		movea.l	(a5,d0.w),a4
0006DDB2 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
0006DDBA 544C                       		addq.w	#2,a4
0006DDBC 5800                       		addq.b	#4,d0
0006DDBE 1B40 000D                  		move.b	d0,$D(a5)
0006DDC2 4E75                       		rts	
0006DDC4                            ; ===========================================================================
0006DDC4                            
0006DDC4                            loc_72B14:				; XREF: loc_72A64
0006DDC4 204E                       		movea.l	a6,a0
0006DDC6 43EE 03A0                  		lea	$3A0(a6),a1
0006DDCA 303C 0087                  		move.w	#$87,d0
0006DDCE                            
0006DDCE                            loc_72B1E:
0006DDCE 20D9                       		move.l	(a1)+,(a0)+
0006DDD0 51C8 FFFC                  		dbf	d0,loc_72B1E
0006DDD4                            
0006DDD4 08EE 0002 0040             		bset	#2,$40(a6)
0006DDDA 264D                       		movea.l	a5,a3
0006DDDC 1C3C 0028                  		move.b	#$28,d6
0006DDE0 9C2E 0026                  		sub.b	$26(a6),d6
0006DDE4 7E05                       		moveq	#5,d7
0006DDE6 4BEE 0070                  		lea	$70(a6),a5
0006DDEA                            
0006DDEA                            loc_72B3A:
0006DDEA 0815 0007                  		btst	#7,(a5)
0006DDEE 6700                       		beq.s	loc_72B5C
0006DDF0 08D5 0001                  		bset	#1,(a5)
0006DDF4 DD2D 0009                  		add.b	d6,9(a5)
0006DDF8 0815 0002                  		btst	#2,(a5)
0006DDFC 6600                       		bne.s	loc_72B5C
0006DDFE 7000                       		moveq	#0,d0
0006DE00 102D 000B                  		move.b	$B(a5),d0
0006DE04 226E 0018                  		movea.l	$18(a6),a1
0006DE08 4EBA 0000                  		jsr	sub_72C4E(pc)
0006DE0C                            
0006DE0C                            loc_72B5C:
0006DE0C DAFC 0030                  		adda.w	#$30,a5
0006DE10 51CF FFD8                  		dbf	d7,loc_72B3A
0006DE14                            
0006DE14 7E02                       		moveq	#2,d7
0006DE16                            
0006DE16                            loc_72B66:
0006DE16 0815 0007                  		btst	#7,(a5)
0006DE1A 6700                       		beq.s	loc_72B78
0006DE1C 08D5 0001                  		bset	#1,(a5)
0006DE20 4EBA FE2E                  		jsr	sub_729A0(pc)
0006DE24 DD2D 0009                  		add.b	d6,9(a5)
0006DE28                            
0006DE28                            loc_72B78:
0006DE28 DAFC 0030                  		adda.w	#$30,a5
0006DE2C 51CF FFE8                  		dbf	d7,loc_72B66
0006DE30 2A4B                       		movea.l	a3,a5
0006DE32 1D7C 0080 0024             		move.b	#$80,$24(a6)
0006DE38 1D7C 0028 0026             		move.b	#$28,$26(a6)
0006DE3E 422E 0027                  		clr.b	$27(a6)
0006DE42 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
0006DE4A 504F                       		addq.w	#8,sp
0006DE4C 4E75                       		rts	
0006DE4E                            ; ===========================================================================
0006DE4E                            
0006DE4E                            loc_72B9E:				; XREF: loc_72A64
0006DE4E 1B5C 0002                  		move.b	(a4)+,2(a5)
0006DE52 4E75                       		rts	
0006DE54                            ; ===========================================================================
0006DE54                            
0006DE54                            loc_72BA4:				; XREF: loc_72A64
0006DE54 101C                       		move.b	(a4)+,d0
0006DE56 D12D 0009                  		add.b	d0,9(a5)
0006DE5A 6000 0000                  		bra.w	sub_72CB4
0006DE5E                            ; ===========================================================================
0006DE5E                            
0006DE5E                            loc_72BAE:				; XREF: loc_72A64
0006DE5E 08D5 0004                  		bset	#4,(a5)
0006DE62 4E75                       		rts	
0006DE64                            ; ===========================================================================
0006DE64                            
0006DE64                            loc_72BB4:				; XREF: loc_72A64
0006DE64 1B54 0012                  		move.b	(a4),$12(a5)
0006DE68 1B5C 0013                  		move.b	(a4)+,$13(a5)
0006DE6C 4E75                       		rts	
0006DE6E                            ; ===========================================================================
0006DE6E                            
0006DE6E                            loc_72BBE:				; XREF: loc_72A64
0006DE6E 101C                       		move.b	(a4)+,d0
0006DE70 D12D 0008                  		add.b	d0,8(a5)
0006DE74 4E75                       		rts	
0006DE76                            ; ===========================================================================
0006DE76                            
0006DE76                            loc_72BC6:				; XREF: loc_72A64
0006DE76 1D54 0002                  		move.b	(a4),2(a6)
0006DE7A 1D5C 0001                  		move.b	(a4)+,1(a6)
0006DE7E 4E75                       		rts	
0006DE80                            ; ===========================================================================
0006DE80                            
0006DE80                            loc_72BD0:				; XREF: loc_72A64
0006DE80 41EE 0040                  		lea	$40(a6),a0
0006DE84 101C                       		move.b	(a4)+,d0
0006DE86 7230                       		moveq	#$30,d1
0006DE88 7409                       		moveq	#9,d2
0006DE8A                            
0006DE8A                            loc_72BDA:
0006DE8A 1140 0002                  		move.b	d0,2(a0)
0006DE8E D0C1                       		adda.w	d1,a0
0006DE90 51CA FFF8                  		dbf	d2,loc_72BDA
0006DE94                            
0006DE94 4E75                       		rts	
0006DE96                            ; ===========================================================================
0006DE96                            
0006DE96                            loc_72BE6:				; XREF: loc_72A64
0006DE96 101C                       		move.b	(a4)+,d0
0006DE98 D12D 0009                  		add.b	d0,9(a5)
0006DE9C 4E75                       		rts	
0006DE9E                            ; ===========================================================================
0006DE9E                            
0006DE9E                            loc_72BEE:				; XREF: loc_72A64
0006DE9E 422E 002C                  		clr.b	$2C(a6)
0006DEA2 4E75                       		rts	
0006DEA4                            ; ===========================================================================
0006DEA4                            
0006DEA4                            loc_72BF4:				; XREF: loc_72A64
0006DEA4 0895 0007                  		bclr	#7,(a5)
0006DEA8 0895 0004                  		bclr	#4,(a5)
0006DEAC 4EBA FB00                  		jsr	sub_726FE(pc)
0006DEB0 4A2E 0250                  		tst.b	$250(a6)
0006DEB4 6B00                       		bmi.s	loc_72C22
0006DEB6 264D                       		movea.l	a5,a3
0006DEB8 4BEE 0100                  		lea	$100(a6),a5
0006DEBC 226E 0018                  		movea.l	$18(a6),a1
0006DEC0 0895 0002                  		bclr	#2,(a5)
0006DEC4 08D5 0001                  		bset	#1,(a5)
0006DEC8 102D 000B                  		move.b	$B(a5),d0
0006DECC 4EBA 0000                  		jsr	sub_72C4E(pc)
0006DED0 2A4B                       		movea.l	a3,a5
0006DED2                            
0006DED2                            loc_72C22:
0006DED2 504F                       		addq.w	#8,sp
0006DED4 4E75                       		rts	
0006DED6                            ; ===========================================================================
0006DED6                            
0006DED6                            loc_72C26:				; XREF: loc_72A64
0006DED6 7000                       		moveq	#0,d0
0006DED8 101C                       		move.b	(a4)+,d0
0006DEDA 1B40 000B                  		move.b	d0,$B(a5)
0006DEDE 0815 0002                  		btst	#2,(a5)
0006DEE2 6600 0000                  		bne.w	locret_72CAA
0006DEE6 226E 0018                  		movea.l	$18(a6),a1
0006DEEA 4A2E 000E                  		tst.b	$E(a6)
0006DEEE 6700                       		beq.s	sub_72C4E
0006DEF0 226D 0020                  		movea.l	$20(a5),a1
0006DEF4 4A2E 000E                  		tst.b	$E(a6)
0006DEF8 6B00                       		bmi.s	sub_72C4E
0006DEFA 226E 0020                  		movea.l	$20(a6),a1
0006DEFE                            
0006DEFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DEFE                            
0006DEFE                            
0006DEFE                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
0006DEFE 5340                       		subq.w	#1,d0
0006DF00 6B00                       		bmi.s	loc_72C5C
0006DF02 323C 0019                  		move.w	#$19,d1
0006DF06                            
0006DF06                            loc_72C56:
0006DF06 D2C1                       		adda.w	d1,a1
0006DF08 51C8 FFFC                  		dbf	d0,loc_72C56
0006DF0C                            
0006DF0C                            loc_72C5C:
0006DF0C 1219                       		move.b	(a1)+,d1
0006DF0E 1B41 001F                  		move.b	d1,$1F(a5)
0006DF12 1801                       		move.b	d1,d4
0006DF14 103C 00B0                  		move.b	#$B0,d0
0006DF18 4EBA FAB8                  		jsr	sub_72722(pc)
0006DF1C 45FA 0000                  		lea	byte_72D18(pc),a2
0006DF20 7613                       		moveq	#$13,d3
0006DF22                            
0006DF22                            loc_72C72:
0006DF22 101A                       		move.b	(a2)+,d0
0006DF24 1219                       		move.b	(a1)+,d1
0006DF26 4EBA FAAA                  		jsr	sub_72722(pc)
0006DF2A 51CB FFF6                  		dbf	d3,loc_72C72
0006DF2E 7A03                       		moveq	#3,d5
0006DF30 0244 0007                  		andi.w	#7,d4
0006DF34 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
0006DF38 162D 0009                  		move.b	9(a5),d3
0006DF3C                            
0006DF3C                            loc_72C8C:
0006DF3C 101A                       		move.b	(a2)+,d0
0006DF3E 1219                       		move.b	(a1)+,d1
0006DF40 E20C                       		lsr.b	#1,d4
0006DF42 6400                       		bcc.s	loc_72C96
0006DF44 D203                       		add.b	d3,d1
0006DF46                            
0006DF46                            loc_72C96:
0006DF46 4EBA FA8A                  		jsr	sub_72722(pc)
0006DF4A 51CD FFF0                  		dbf	d5,loc_72C8C
0006DF4E 103C 00B4                  		move.b	#$B4,d0
0006DF52 122D 000A                  		move.b	$A(a5),d1
0006DF56 4EBA FA7A                  		jsr	sub_72722(pc)
0006DF5A                            
0006DF5A                            locret_72CAA:
0006DF5A 4E75                       		rts	
0006DF5C                            ; End of function sub_72C4E
0006DF5C                            
0006DF5C                            ; ===========================================================================
0006DF5C 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
0006DF64                            
0006DF64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0006DF64                            
0006DF64                            
0006DF64                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
0006DF64 0815 0002                  		btst	#2,(a5)
0006DF68 6600                       		bne.s	locret_72D16
0006DF6A 7000                       		moveq	#0,d0
0006DF6C 102D 000B                  		move.b	$B(a5),d0
0006DF70 226E 0018                  		movea.l	$18(a6),a1
0006DF74 4A2E 000E                  		tst.b	$E(a6)
0006DF78 6700                       		beq.s	loc_72CD8
0006DF7A 226E 0020                  		movea.l	$20(a6),a1
0006DF7E 4A2E 000E                  		tst.b	$E(a6)
0006DF82 6B00                       		bmi.s	loc_72CD8
0006DF84 226E 0020                  		movea.l	$20(a6),a1
0006DF88                            
0006DF88                            loc_72CD8:
0006DF88 5340                       		subq.w	#1,d0
0006DF8A 6B00                       		bmi.s	loc_72CE6
0006DF8C 323C 0019                  		move.w	#$19,d1
0006DF90                            
0006DF90                            loc_72CE0:
0006DF90 D2C1                       		adda.w	d1,a1
0006DF92 51C8 FFFC                  		dbf	d0,loc_72CE0
0006DF96                            
0006DF96                            loc_72CE6:
0006DF96 D2FC 0015                  		adda.w	#$15,a1
0006DF9A 45FA 0000                  		lea	byte_72D2C(pc),a2
0006DF9E 102D 001F                  		move.b	$1F(a5),d0
0006DFA2 0240 0007                  		andi.w	#7,d0
0006DFA6 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
0006DFAA 162D 0009                  		move.b	9(a5),d3
0006DFAE 6B00                       		bmi.s	locret_72D16
0006DFB0 7A03                       		moveq	#3,d5
0006DFB2                            
0006DFB2                            loc_72D02:
0006DFB2 101A                       		move.b	(a2)+,d0
0006DFB4 1219                       		move.b	(a1)+,d1
0006DFB6 E20C                       		lsr.b	#1,d4
0006DFB8 6400                       		bcc.s	loc_72D12
0006DFBA D203                       		add.b	d3,d1
0006DFBC 6500                       		bcs.s	loc_72D12
0006DFBE 4EBA FA12                  		jsr	sub_72722(pc)
0006DFC2                            
0006DFC2                            loc_72D12:
0006DFC2 51CD FFEE                  		dbf	d5,loc_72D02
0006DFC6                            
0006DFC6                            locret_72D16:
0006DFC6 4E75                       		rts	
0006DFC8                            ; End of function sub_72CB4
0006DFC8                            
0006DFC8                            ; ===========================================================================
0006DFC8 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
0006DFD2 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
0006DFDC 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
0006DFE0                            ; ===========================================================================
0006DFE0                            
0006DFE0                            loc_72D30:				; XREF: loc_72A64
0006DFE0 08D5 0003                  		bset	#3,(a5)
0006DFE4 2B4C 0014                  		move.l	a4,$14(a5)
0006DFE8 1B5C 0018                  		move.b	(a4)+,$18(a5)
0006DFEC 1B5C 0019                  		move.b	(a4)+,$19(a5)
0006DFF0 1B5C 001A                  		move.b	(a4)+,$1A(a5)
0006DFF4 101C                       		move.b	(a4)+,d0
0006DFF6 E208                       		lsr.b	#1,d0
0006DFF8 1B40 001B                  		move.b	d0,$1B(a5)
0006DFFC 426D 001C                  		clr.w	$1C(a5)
0006E000 4E75                       		rts	
0006E002                            ; ===========================================================================
0006E002                            
0006E002                            loc_72D52:				; XREF: loc_72A64
0006E002 08D5 0003                  		bset	#3,(a5)
0006E006 4E75                       		rts	
0006E008                            ; ===========================================================================
0006E008                            
0006E008                            loc_72D58:				; XREF: loc_72A64
0006E008 0895 0007                  		bclr	#7,(a5)
0006E00C 0895 0004                  		bclr	#4,(a5)
0006E010 4A2D 0001                  		tst.b	1(a5)
0006E014 6B00                       		bmi.s	loc_72D74
0006E016 4A2E 0008                  		tst.b	8(a6)
0006E01A 6B00 0000                  		bmi.w	loc_72E02
0006E01E 4EBA F98E                  		jsr	sub_726FE(pc)
0006E022 6000                       		bra.s	loc_72D78
0006E024                            ; ===========================================================================
0006E024                            
0006E024                            loc_72D74:
0006E024 4EBA FC2A                  		jsr	sub_729A0(pc)
0006E028                            
0006E028                            loc_72D78:
0006E028 4A2E 000E                  		tst.b	$E(a6)
0006E02C 6A00 0000                  		bpl.w	loc_72E02
0006E030 4216                       		clr.b	0(a6)
0006E032 7000                       		moveq	#0,d0
0006E034 102D 0001                  		move.b	1(a5),d0
0006E038 6B00                       		bmi.s	loc_72DCC
0006E03A 41FA F546                  		lea	dword_722CC(pc),a0
0006E03E 264D                       		movea.l	a5,a3
0006E040 0C00 0004                  		cmpi.b	#4,d0
0006E044 6600                       		bne.s	loc_72DA8
0006E046 4A2E 0340                  		tst.b	$340(a6)
0006E04A 6A00                       		bpl.s	loc_72DA8
0006E04C 4BEE 0340                  		lea	$340(a6),a5
0006E050 226E 0020                  		movea.l	$20(a6),a1
0006E054 6000                       		bra.s	loc_72DB8
0006E056                            ; ===========================================================================
0006E056                            
0006E056                            loc_72DA8:
0006E056 5500                       		subq.b	#2,d0
0006E058 E508                       		lsl.b	#2,d0
0006E05A 2A70 0000                  		movea.l	(a0,d0.w),a5
0006E05E 4A15                       		tst.b	(a5)
0006E060 6A00                       		bpl.s	loc_72DC8
0006E062 226E 0018                  		movea.l	$18(a6),a1
0006E066                            
0006E066                            loc_72DB8:
0006E066 0895 0002                  		bclr	#2,(a5)
0006E06A 08D5 0001                  		bset	#1,(a5)
0006E06E 102D 000B                  		move.b	$B(a5),d0
0006E072 4EBA FE8A                  		jsr	sub_72C4E(pc)
0006E076                            
0006E076                            loc_72DC8:
0006E076 2A4B                       		movea.l	a3,a5
0006E078 6000                       		bra.s	loc_72E02
0006E07A                            ; ===========================================================================
0006E07A                            
0006E07A                            loc_72DCC:
0006E07A 41EE 0370                  		lea	$370(a6),a0
0006E07E 4A10                       		tst.b	(a0)
0006E080 6A00                       		bpl.s	loc_72DE0
0006E082 0C00 00E0                  		cmpi.b	#$E0,d0
0006E086 6700                       		beq.s	loc_72DEA
0006E088 0C00 00C0                  		cmpi.b	#$C0,d0
0006E08C 6700                       		beq.s	loc_72DEA
0006E08E                            
0006E08E                            loc_72DE0:
0006E08E 41FA F4F2                  		lea	dword_722CC(pc),a0
0006E092 E608                       		lsr.b	#3,d0
0006E094 2070 0000                  		movea.l	(a0,d0.w),a0
0006E098                            
0006E098                            loc_72DEA:
0006E098 0890 0002                  		bclr	#2,(a0)
0006E09C 08D0 0001                  		bset	#1,(a0)
0006E0A0 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
0006E0A6 6600                       		bne.s	loc_72E02
0006E0A8 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
0006E0B0                            
0006E0B0                            loc_72E02:
0006E0B0 504F                       		addq.w	#8,sp
0006E0B2 4E75                       		rts	
0006E0B4                            ; ===========================================================================
0006E0B4                            
0006E0B4                            loc_72E06:				; XREF: loc_72A64
0006E0B4 1B7C 00E0 0001             		move.b	#$E0,1(a5)
0006E0BA 1B5C 001F                  		move.b	(a4)+,$1F(a5)
0006E0BE 0815 0002                  		btst	#2,(a5)
0006E0C2 6600                       		bne.s	locret_72E1E
0006E0C4 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
0006E0CC                            
0006E0CC                            locret_72E1E:
0006E0CC 4E75                       		rts	
0006E0CE                            ; ===========================================================================
0006E0CE                            
0006E0CE                            loc_72E20:				; XREF: loc_72A64
0006E0CE 0895 0003                  		bclr	#3,(a5)
0006E0D2 4E75                       		rts	
0006E0D4                            ; ===========================================================================
0006E0D4                            
0006E0D4                            loc_72E26:				; XREF: loc_72A64
0006E0D4 1B5C 000B                  		move.b	(a4)+,$B(a5)
0006E0D8 4E75                       		rts	
0006E0DA                            ; ===========================================================================
0006E0DA                            
0006E0DA                            loc_72E2C:				; XREF: loc_72A64
0006E0DA 101C                       		move.b	(a4)+,d0
0006E0DC E148                       		lsl.w	#8,d0
0006E0DE 101C                       		move.b	(a4)+,d0
0006E0E0 D8C0                       		adda.w	d0,a4
0006E0E2 534C                       		subq.w	#1,a4
0006E0E4 4E75                       		rts	
0006E0E6                            ; ===========================================================================
0006E0E6                            
0006E0E6                            loc_72E38:				; XREF: loc_72A64
0006E0E6 7000                       		moveq	#0,d0
0006E0E8 101C                       		move.b	(a4)+,d0
0006E0EA 121C                       		move.b	(a4)+,d1
0006E0EC 4A35 0024                  		tst.b	$24(a5,d0.w)
0006E0F0 6600                       		bne.s	loc_72E48
0006E0F2 1B81 0024                  		move.b	d1,$24(a5,d0.w)
0006E0F6                            
0006E0F6                            loc_72E48:
0006E0F6 5335 0024                  		subq.b	#1,$24(a5,d0.w)
0006E0FA 66DE                       		bne.s	loc_72E2C
0006E0FC 544C                       		addq.w	#2,a4
0006E0FE 4E75                       		rts	
0006E100                            ; ===========================================================================
0006E100                            
0006E100                            loc_72E52:				; XREF: loc_72A64
0006E100 7000                       		moveq	#0,d0
0006E102 102D 000D                  		move.b	$D(a5),d0
0006E106 5900                       		subq.b	#4,d0
0006E108 2B8C 0000                  		move.l	a4,(a5,d0.w)
0006E10C 1B40 000D                  		move.b	d0,$D(a5)
0006E110 60C8                       		bra.s	loc_72E2C
0006E112                            ; ===========================================================================
0006E112                            
0006E112                            loc_72E64:				; XREF: loc_72A64
0006E112 103C 0088                  		move.b	#$88,d0
0006E116 123C 000F                  		move.b	#$F,d1
0006E11A 4EBA F8C2                  		jsr	sub_7272E(pc)
0006E11E 103C 008C                  		move.b	#$8C,d0
0006E122 123C 000F                  		move.b	#$F,d1
0006E126 6000 F8B6                  		bra.w	sub_7272E
0006E12A                            ; ===========================================================================
0006E12A                            Kos_Z80:	incbin	sound\z80_1.bin
0006E1DA 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
0006E1DC 21                         		dc.b $21
0006E1DD 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
0006E1DF                            		incbin	sound\z80_2.bin
0006F88A                            		even
0006F88A                            Music81:	incbin	sound\jahl.bin
0007608A                            		even
0007608A                            Music82:	incbin	sound\music82.bin
000764DA                            		even
000764DA                            Music83:	incbin	sound\music83.bin
00076A68                            		even
00076A68                            Music84:	include	sound\music84.asm
00076A68                            music84_Header:
00076A68 =00000001                  smpsHeaderStartSong = 1
00076A68 0000                       	smpsHeaderVoice     music84_Voices
00076A6A 0603                       	smpsHeaderChan      $06, $03
00076A6C 0205                       	smpsHeaderTempo     $02, $05
00076A6E                            
00076A72 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
00076A76 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
00076A7A 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
00076A7E 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
00076A82 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
00076A86 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
00076A8C 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
00076A92 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
00076A98                            
00076A98                            ; FM1 Data
00076A98                            music84_FM1:
00076A98 E0C0                       	smpsPan             panCenter, $00
00076A9C E107                       	smpsAlterNote       $07
00076A9E 9B03 8007                  	dc.b	nD2, $03, nRst, $07
00076AA2 E106                       	smpsAlterNote       $06
00076AA4 9903 800B                  	dc.b	nC2, $03, nRst, $0B
00076AA8 E10B                       	smpsAlterNote       $0B
00076AAA 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
00076AB0 E10C                       	smpsAlterNote       $0C
00076AB2 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00076AB5 E10B                       	smpsAlterNote       $0B
00076AB7 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00076ABA E109                       	smpsAlterNote       $09
00076ABC E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
00076AC1 E108                       	smpsAlterNote       $08
00076AC3 8001                       	dc.b	nRst, $01
00076AC5 E10B                       	smpsAlterNote       $0B
00076AC7 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
00076ACD E107                       	smpsAlterNote       $07
00076ACF 9B03                       	dc.b	nD2, $03
00076AD1                            
00076AD1                            music84_Jump04:
00076AD1 E107                       	smpsAlterNote       $07
00076AD3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00076AD7 E10B                       	smpsAlterNote       $0B
00076AD9 A202 8001                  	dc.b	nA2, $02, nRst, $01
00076ADD E107                       	smpsAlterNote       $07
00076ADF 9B03                       	dc.b	nD2, $03
00076AE1 E11A                       	smpsAlterNote       $1A
00076AE3 A301                       	dc.b	nBb2, $01
00076AE5 E1F2                       	smpsAlterNote       $F2
00076AE7 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076AEA E1FF                       	smpsAlterNote       $FF
00076AEC E701                       	dc.b	smpsNoAttack, $01
00076AEE E111                       	smpsAlterNote       $11
00076AF0 E701                       	dc.b	smpsNoAttack, $01
00076AF2 E106                       	smpsAlterNote       $06
00076AF4 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00076AF7 E107                       	smpsAlterNote       $07
00076AF9 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00076AFD E108                       	smpsAlterNote       $08
00076AFF 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
00076B07 E109                       	smpsAlterNote       $09
00076B09 A003                       	dc.b	nG2, $03
00076B0B E10C                       	smpsAlterNote       $0C
00076B0D A303 8001                  	dc.b	nBb2, $03, nRst, $01
00076B11 E1FD                       	smpsAlterNote       $FD
00076B13 A401                       	dc.b	nB2, $01
00076B15 E109                       	smpsAlterNote       $09
00076B17 E701                       	dc.b	smpsNoAttack, $01
00076B19 E106                       	smpsAlterNote       $06
00076B1B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076B1E E109                       	smpsAlterNote       $09
00076B20 A007                       	dc.b	nG2, $07
00076B22 E108                       	smpsAlterNote       $08
00076B24 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00076B28 E107                       	smpsAlterNote       $07
00076B2A 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00076B30 E10B                       	smpsAlterNote       $0B
00076B32 A203 8001                  	dc.b	nA2, $03, nRst, $01
00076B36 E107                       	smpsAlterNote       $07
00076B38 9B03                       	dc.b	nD2, $03
00076B3A E11A                       	smpsAlterNote       $1A
00076B3C A301                       	dc.b	nBb2, $01
00076B3E E1F9                       	smpsAlterNote       $F9
00076B40 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076B43 E107                       	smpsAlterNote       $07
00076B45 E701                       	dc.b	smpsNoAttack, $01
00076B47 E111                       	smpsAlterNote       $11
00076B49 E701                       	dc.b	smpsNoAttack, $01
00076B4B E106                       	smpsAlterNote       $06
00076B4D E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00076B52 E107                       	smpsAlterNote       $07
00076B54 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00076B5C E1EC                       	smpsAlterNote       $EC
00076B5E A101                       	dc.b	nAb2, $01
00076B60 E108                       	smpsAlterNote       $08
00076B62 E701                       	dc.b	smpsNoAttack, $01
00076B64 E116                       	smpsAlterNote       $16
00076B66 E701                       	dc.b	smpsNoAttack, $01
00076B68 E1F5                       	smpsAlterNote       $F5
00076B6A E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00076B6D E10B                       	smpsAlterNote       $0B
00076B6F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076B73 E107                       	smpsAlterNote       $07
00076B75 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00076B7B E109                       	smpsAlterNote       $09
00076B7D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00076B81 E10B                       	smpsAlterNote       $0B
00076B83 9603                       	dc.b	nA1, $03
00076B85 E107                       	smpsAlterNote       $07
00076B87 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00076B8D E10B                       	smpsAlterNote       $0B
00076B8F A203 8001                  	dc.b	nA2, $03, nRst, $01
00076B93 E107                       	smpsAlterNote       $07
00076B95 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00076B99 E11A                       	smpsAlterNote       $1A
00076B9B A301                       	dc.b	nBb2, $01
00076B9D E1F9                       	smpsAlterNote       $F9
00076B9F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076BA2 E107                       	smpsAlterNote       $07
00076BA4 E701                       	dc.b	smpsNoAttack, $01
00076BA6 E1FB                       	smpsAlterNote       $FB
00076BA8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076BAB E106                       	smpsAlterNote       $06
00076BAD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076BB1 E107                       	smpsAlterNote       $07
00076BB3 9B03                       	dc.b	nD2, $03
00076BB5 E108                       	smpsAlterNote       $08
00076BB7 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00076BBD E109                       	smpsAlterNote       $09
00076BBF A002 8001                  	dc.b	nG2, $02, nRst, $01
00076BC3 E10C                       	smpsAlterNote       $0C
00076BC5 A303                       	dc.b	nBb2, $03
00076BC7 E1F0                       	smpsAlterNote       $F0
00076BC9 A401                       	dc.b	nB2, $01
00076BCB E1FD                       	smpsAlterNote       $FD
00076BCD E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
00076BD2 E106                       	smpsAlterNote       $06
00076BD4 8001                       	dc.b	nRst, $01
00076BD6 E109                       	smpsAlterNote       $09
00076BD8 A006 8001                  	dc.b	nG2, $06, nRst, $01
00076BDC E108                       	smpsAlterNote       $08
00076BDE 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
00076BE2 E107                       	smpsAlterNote       $07
00076BE4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00076BEA E10B                       	smpsAlterNote       $0B
00076BEC A203                       	dc.b	nA2, $03
00076BEE E107                       	smpsAlterNote       $07
00076BF0 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00076BF4 E1F2                       	smpsAlterNote       $F2
00076BF6 A401                       	dc.b	nB2, $01
00076BF8 E1FF                       	smpsAlterNote       $FF
00076BFA E701                       	dc.b	smpsNoAttack, $01
00076BFC E107                       	smpsAlterNote       $07
00076BFE E701                       	dc.b	smpsNoAttack, $01
00076C00 E1FB                       	smpsAlterNote       $FB
00076C02 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076C05 E106                       	smpsAlterNote       $06
00076C07 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076C0B E107                       	smpsAlterNote       $07
00076C0D 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
00076C17 E117                       	smpsAlterNote       $17
00076C19 A001                       	dc.b	nG2, $01
00076C1B E1FA                       	smpsAlterNote       $FA
00076C1D E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00076C20 E108                       	smpsAlterNote       $08
00076C22 E701                       	dc.b	smpsNoAttack, $01
00076C24 E1E7                       	smpsAlterNote       $E7
00076C26 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00076C29 E103                       	smpsAlterNote       $03
00076C2B E701                       	dc.b	smpsNoAttack, $01
00076C2D E10B                       	smpsAlterNote       $0B
00076C2F E702                       	dc.b	smpsNoAttack, $02
00076C31 E107                       	smpsAlterNote       $07
00076C33 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
00076C3B E106                       	smpsAlterNote       $06
00076C3D 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
00076C43 E10C                       	smpsAlterNote       $0C
00076C45 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
00076C4B E109                       	smpsAlterNote       $09
00076C4D 9E03                       	dc.b	nF2, $03
00076C4F E10C                       	smpsAlterNote       $0C
00076C51 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00076C55 E1EA                       	smpsAlterNote       $EA
00076C57 A201                       	dc.b	nA2, $01
00076C59 E106                       	smpsAlterNote       $06
00076C5B E701                       	dc.b	smpsNoAttack, $01
00076C5D E1E2                       	smpsAlterNote       $E2
00076C5F E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00076C62 E1F0                       	smpsAlterNote       $F0
00076C64 E701                       	dc.b	smpsNoAttack, $01
00076C66 E10C                       	smpsAlterNote       $0C
00076C68 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00076C74 E116                       	smpsAlterNote       $16
00076C76 9C01                       	dc.b	nEb2, $01
00076C78 E105                       	smpsAlterNote       $05
00076C7A E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00076C7D E1F1                       	smpsAlterNote       $F1
00076C7F E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00076C82 E1FF                       	smpsAlterNote       $FF
00076C84 E701                       	dc.b	smpsNoAttack, $01
00076C86 E109                       	smpsAlterNote       $09
00076C88 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076C8C E10C                       	smpsAlterNote       $0C
00076C8E 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00076C9A 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
00076CA0 E109                       	smpsAlterNote       $09
00076CA2 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00076CA6 E10C                       	smpsAlterNote       $0C
00076CA8 9703                       	dc.b	nBb1, $03
00076CAA E11A                       	smpsAlterNote       $1A
00076CAC A101                       	dc.b	nAb2, $01
00076CAE E1FB                       	smpsAlterNote       $FB
00076CB0 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00076CB3 E10A                       	smpsAlterNote       $0A
00076CB5 E701                       	dc.b	smpsNoAttack, $01
00076CB7 E1E8                       	smpsAlterNote       $E8
00076CB9 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00076CBC E106                       	smpsAlterNote       $06
00076CBE E701                       	dc.b	smpsNoAttack, $01
00076CC0 E10C                       	smpsAlterNote       $0C
00076CC2 E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
00076CCE E1F9                       	smpsAlterNote       $F9
00076CD0 9D01                       	dc.b	nE2, $01
00076CD2 E108                       	smpsAlterNote       $08
00076CD4 E701                       	dc.b	smpsNoAttack, $01
00076CD6 E1F6                       	smpsAlterNote       $F6
00076CD8 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00076CDB E109                       	smpsAlterNote       $09
00076CDD E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
00076CE1 E10C                       	smpsAlterNote       $0C
00076CE3 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
00076CEF E108                       	smpsAlterNote       $08
00076CF1 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00076CF7 E106                       	smpsAlterNote       $06
00076CF9 A403 8001                  	dc.b	nB2, $03, nRst, $01
00076CFD E108                       	smpsAlterNote       $08
00076CFF 9D03                       	dc.b	nE2, $03
00076D01 E1EB                       	smpsAlterNote       $EB
00076D03 A801                       	dc.b	nEb3, $01
00076D05 E109                       	smpsAlterNote       $09
00076D07 E701                       	dc.b	smpsNoAttack, $01
00076D09 E1FA                       	smpsAlterNote       $FA
00076D0B E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00076D0E E108                       	smpsAlterNote       $08
00076D10 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
00076D1C E1E9                       	smpsAlterNote       $E9
00076D1E A301                       	dc.b	nBb2, $01
00076D20 E107                       	smpsAlterNote       $07
00076D22 E701                       	dc.b	smpsNoAttack, $01
00076D24 E1F0                       	smpsAlterNote       $F0
00076D26 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076D29 E1F7                       	smpsAlterNote       $F7
00076D2B E701                       	dc.b	smpsNoAttack, $01
00076D2D E107                       	smpsAlterNote       $07
00076D2F E701                       	dc.b	smpsNoAttack, $01
00076D31 E106                       	smpsAlterNote       $06
00076D33 E701                       	dc.b	smpsNoAttack, $01
00076D35 E108                       	smpsAlterNote       $08
00076D37 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
00076D3D E106                       	smpsAlterNote       $06
00076D3F A403 8001                  	dc.b	nB2, $03, nRst, $01
00076D43 E108                       	smpsAlterNote       $08
00076D45 9D03                       	dc.b	nE2, $03
00076D47 E10B                       	smpsAlterNote       $0B
00076D49 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
00076D51 E108                       	smpsAlterNote       $08
00076D53 9D03                       	dc.b	nE2, $03
00076D55 E10B                       	smpsAlterNote       $0B
00076D57 9603 8001                  	dc.b	nA1, $03, nRst, $01
00076D5B E113                       	smpsAlterNote       $13
00076D5D A001                       	dc.b	nG2, $01
00076D5F E118                       	smpsAlterNote       $18
00076D61 E701                       	dc.b	smpsNoAttack, $01
00076D63 E1E9                       	smpsAlterNote       $E9
00076D65 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00076D68 E1F3                       	smpsAlterNote       $F3
00076D6A E701                       	dc.b	smpsNoAttack, $01
00076D6C E1FD                       	smpsAlterNote       $FD
00076D6E E701                       	dc.b	smpsNoAttack, $01
00076D70 E102                       	smpsAlterNote       $02
00076D72 E701                       	dc.b	smpsNoAttack, $01
00076D74 E107                       	smpsAlterNote       $07
00076D76 8001                       	dc.b	nRst, $01
00076D78 E10B                       	smpsAlterNote       $0B
00076D7A 9603                       	dc.b	nA1, $03
00076D7C E10C                       	smpsAlterNote       $0C
00076D7E 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
00076D84 E10B                       	smpsAlterNote       $0B
00076D86 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
00076D92 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
00076D98 E107                       	smpsAlterNote       $07
00076D9A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00076DA0 E10B                       	smpsAlterNote       $0B
00076DA2 A203                       	dc.b	nA2, $03
00076DA4 E107                       	smpsAlterNote       $07
00076DA6 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00076DAA E1F2                       	smpsAlterNote       $F2
00076DAC A401                       	dc.b	nB2, $01
00076DAE E1FF                       	smpsAlterNote       $FF
00076DB0 E701                       	dc.b	smpsNoAttack, $01
00076DB2 E107                       	smpsAlterNote       $07
00076DB4 E701                       	dc.b	smpsNoAttack, $01
00076DB6 E1FB                       	smpsAlterNote       $FB
00076DB8 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076DBB E106                       	smpsAlterNote       $06
00076DBD E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076DC1 E107                       	smpsAlterNote       $07
00076DC3 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00076DC7 E108                       	smpsAlterNote       $08
00076DC9 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00076DCF E109                       	smpsAlterNote       $09
00076DD1 A003 8001                  	dc.b	nG2, $03, nRst, $01
00076DD5 E10C                       	smpsAlterNote       $0C
00076DD7 A302 8001                  	dc.b	nBb2, $02, nRst, $01
00076DDB E1F0                       	smpsAlterNote       $F0
00076DDD A401                       	dc.b	nB2, $01
00076DDF E109                       	smpsAlterNote       $09
00076DE1 E701                       	dc.b	smpsNoAttack, $01
00076DE3 E106                       	smpsAlterNote       $06
00076DE5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076DE8 E109                       	smpsAlterNote       $09
00076DEA A007                       	dc.b	nG2, $07
00076DEC E108                       	smpsAlterNote       $08
00076DEE 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
00076DF2 E107                       	smpsAlterNote       $07
00076DF4 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00076DFA E10B                       	smpsAlterNote       $0B
00076DFC A202 8001                  	dc.b	nA2, $02, nRst, $01
00076E00 E107                       	smpsAlterNote       $07
00076E02 9B03                       	dc.b	nD2, $03
00076E04 E11A                       	smpsAlterNote       $1A
00076E06 A301                       	dc.b	nBb2, $01
00076E08 E1F2                       	smpsAlterNote       $F2
00076E0A E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076E0D E1FF                       	smpsAlterNote       $FF
00076E0F E701                       	dc.b	smpsNoAttack, $01
00076E11 E111                       	smpsAlterNote       $11
00076E13 E701                       	dc.b	smpsNoAttack, $01
00076E15 E106                       	smpsAlterNote       $06
00076E17 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00076E1A E107                       	smpsAlterNote       $07
00076E1C 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
00076E28 E117                       	smpsAlterNote       $17
00076E2A A001                       	dc.b	nG2, $01
00076E2C E1FA                       	smpsAlterNote       $FA
00076E2E E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00076E31 E116                       	smpsAlterNote       $16
00076E33 E701                       	dc.b	smpsNoAttack, $01
00076E35 E1F5                       	smpsAlterNote       $F5
00076E37 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00076E3A E103                       	smpsAlterNote       $03
00076E3C E701                       	dc.b	smpsNoAttack, $01
00076E3E E10B                       	smpsAlterNote       $0B
00076E40 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00076E44 E107                       	smpsAlterNote       $07
00076E46 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00076E4C E109                       	smpsAlterNote       $09
00076E4E 9E03                       	dc.b	nF2, $03
00076E50 E10B                       	smpsAlterNote       $0B
00076E52 9603 8001                  	dc.b	nA1, $03, nRst, $01
00076E56 E107                       	smpsAlterNote       $07
00076E58 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
00076E5E E10B                       	smpsAlterNote       $0B
00076E60 A203 8001                  	dc.b	nA2, $03, nRst, $01
00076E64 E107                       	smpsAlterNote       $07
00076E66 9B03                       	dc.b	nD2, $03
00076E68 E11A                       	smpsAlterNote       $1A
00076E6A A301                       	dc.b	nBb2, $01
00076E6C E1F9                       	smpsAlterNote       $F9
00076E6E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076E71 E107                       	smpsAlterNote       $07
00076E73 E701                       	dc.b	smpsNoAttack, $01
00076E75 E111                       	smpsAlterNote       $11
00076E77 E701                       	dc.b	smpsNoAttack, $01
00076E79 E106                       	smpsAlterNote       $06
00076E7B E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
00076E80 E107                       	smpsAlterNote       $07
00076E82 9B03                       	dc.b	nD2, $03
00076E84 E108                       	smpsAlterNote       $08
00076E86 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00076E8C E109                       	smpsAlterNote       $09
00076E8E A003                       	dc.b	nG2, $03
00076E90 E10C                       	smpsAlterNote       $0C
00076E92 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00076E96 E1FD                       	smpsAlterNote       $FD
00076E98 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
00076E9D E106                       	smpsAlterNote       $06
00076E9F 8001                       	dc.b	nRst, $01
00076EA1 E109                       	smpsAlterNote       $09
00076EA3 A006 8001                  	dc.b	nG2, $06, nRst, $01
00076EA7 E108                       	smpsAlterNote       $08
00076EA9 9C03                       	dc.b	nEb2, $03
00076EAB E107                       	smpsAlterNote       $07
00076EAD 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00076EB3 E10B                       	smpsAlterNote       $0B
00076EB5 A203 8001                  	dc.b	nA2, $03, nRst, $01
00076EB9 E107                       	smpsAlterNote       $07
00076EBB 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00076EBF E11A                       	smpsAlterNote       $1A
00076EC1 A301                       	dc.b	nBb2, $01
00076EC3 E1F9                       	smpsAlterNote       $F9
00076EC5 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076EC8 E107                       	smpsAlterNote       $07
00076ECA E701                       	dc.b	smpsNoAttack, $01
00076ECC E1FB                       	smpsAlterNote       $FB
00076ECE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076ED1 E106                       	smpsAlterNote       $06
00076ED3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076ED7 E107                       	smpsAlterNote       $07
00076ED9 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00076EE1 E1EC                       	smpsAlterNote       $EC
00076EE3 A101                       	dc.b	nAb2, $01
00076EE5 E108                       	smpsAlterNote       $08
00076EE7 E701                       	dc.b	smpsNoAttack, $01
00076EE9 E1E7                       	smpsAlterNote       $E7
00076EEB E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00076EEE E1F5                       	smpsAlterNote       $F5
00076EF0 E701                       	dc.b	smpsNoAttack, $01
00076EF2 E10B                       	smpsAlterNote       $0B
00076EF4 E702                       	dc.b	smpsNoAttack, $02
00076EF6 E107                       	smpsAlterNote       $07
00076EF8 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00076EFE E106                       	smpsAlterNote       $06
00076F00 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00076F06 E10C                       	smpsAlterNote       $0C
00076F08 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00076F10 E109                       	smpsAlterNote       $09
00076F12 9E03                       	dc.b	nF2, $03
00076F14 E10C                       	smpsAlterNote       $0C
00076F16 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00076F1A E1EA                       	smpsAlterNote       $EA
00076F1C A201                       	dc.b	nA2, $01
00076F1E E106                       	smpsAlterNote       $06
00076F20 E701                       	dc.b	smpsNoAttack, $01
00076F22 E114                       	smpsAlterNote       $14
00076F24 E701                       	dc.b	smpsNoAttack, $01
00076F26 E1F0                       	smpsAlterNote       $F0
00076F28 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00076F2B E10C                       	smpsAlterNote       $0C
00076F2D E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
00076F39 9703                       	dc.b	nBb1, $03
00076F3B E116                       	smpsAlterNote       $16
00076F3D 9C01                       	dc.b	nEb2, $01
00076F3F E105                       	smpsAlterNote       $05
00076F41 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
00076F44 E113                       	smpsAlterNote       $13
00076F46 E701                       	dc.b	smpsNoAttack, $01
00076F48 E1FF                       	smpsAlterNote       $FF
00076F4A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00076F4D E109                       	smpsAlterNote       $09
00076F4F E703                       	dc.b	smpsNoAttack, $03
00076F51 E10C                       	smpsAlterNote       $0C
00076F53 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
00076F5F 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00076F67 E109                       	smpsAlterNote       $09
00076F69 9E03                       	dc.b	nF2, $03
00076F6B E10C                       	smpsAlterNote       $0C
00076F6D 9703 8001                  	dc.b	nBb1, $03, nRst, $01
00076F71 E1EC                       	smpsAlterNote       $EC
00076F73 A201                       	dc.b	nA2, $01
00076F75 E10A                       	smpsAlterNote       $0A
00076F77 E701                       	dc.b	smpsNoAttack, $01
00076F79 E1E8                       	smpsAlterNote       $E8
00076F7B E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
00076F7E E1F7                       	smpsAlterNote       $F7
00076F80 E701                       	dc.b	smpsNoAttack, $01
00076F82 E10C                       	smpsAlterNote       $0C
00076F84 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00076F90 E1EA                       	smpsAlterNote       $EA
00076F92 9D01                       	dc.b	nE2, $01
00076F94 E108                       	smpsAlterNote       $08
00076F96 E701                       	dc.b	smpsNoAttack, $01
00076F98 E1F6                       	smpsAlterNote       $F6
00076F9A E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00076F9D E105                       	smpsAlterNote       $05
00076F9F E701                       	dc.b	smpsNoAttack, $01
00076FA1 E109                       	smpsAlterNote       $09
00076FA3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
00076FA7 E10C                       	smpsAlterNote       $0C
00076FA9 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
00076FB5 E108                       	smpsAlterNote       $08
00076FB7 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
00076FBD E106                       	smpsAlterNote       $06
00076FBF A403 8001                  	dc.b	nB2, $03, nRst, $01
00076FC3 E108                       	smpsAlterNote       $08
00076FC5 9D03                       	dc.b	nE2, $03
00076FC7 E1EB                       	smpsAlterNote       $EB
00076FC9 A801                       	dc.b	nEb3, $01
00076FCB E109                       	smpsAlterNote       $09
00076FCD E701                       	dc.b	smpsNoAttack, $01
00076FCF E1EB                       	smpsAlterNote       $EB
00076FD1 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
00076FD4 E108                       	smpsAlterNote       $08
00076FD6 E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
00076FE2 E1E9                       	smpsAlterNote       $E9
00076FE4 A301                       	dc.b	nBb2, $01
00076FE6 E1F8                       	smpsAlterNote       $F8
00076FE8 E701                       	dc.b	smpsNoAttack, $01
00076FEA E116                       	smpsAlterNote       $16
00076FEC E701                       	dc.b	smpsNoAttack, $01
00076FEE E1F7                       	smpsAlterNote       $F7
00076FF0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00076FF3 E107                       	smpsAlterNote       $07
00076FF5 E701                       	dc.b	smpsNoAttack, $01
00076FF7 E1EE                       	smpsAlterNote       $EE
00076FF9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00076FFC E106                       	smpsAlterNote       $06
00076FFE 8001                       	dc.b	nRst, $01
00077000 E108                       	smpsAlterNote       $08
00077002 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
00077008 E106                       	smpsAlterNote       $06
0007700A A402 8001                  	dc.b	nB2, $02, nRst, $01
0007700E E108                       	smpsAlterNote       $08
00077010 9D03                       	dc.b	nE2, $03
00077012 E10B                       	smpsAlterNote       $0B
00077014 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
0007701A E108                       	smpsAlterNote       $08
0007701C 9D03 8001                  	dc.b	nE2, $03, nRst, $01
00077020 E10B                       	smpsAlterNote       $0B
00077022 9603                       	dc.b	nA1, $03
00077024 E10E                       	smpsAlterNote       $0E
00077026 A001                       	dc.b	nG2, $01
00077028 E118                       	smpsAlterNote       $18
0007702A E701                       	dc.b	smpsNoAttack, $01
0007702C E1E9                       	smpsAlterNote       $E9
0007702E E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
00077031 E1EE                       	smpsAlterNote       $EE
00077033 E701                       	dc.b	smpsNoAttack, $01
00077035 E1F8                       	smpsAlterNote       $F8
00077037 E701                       	dc.b	smpsNoAttack, $01
00077039 E102                       	smpsAlterNote       $02
0007703B E701                       	dc.b	smpsNoAttack, $01
0007703D E107                       	smpsAlterNote       $07
0007703F 8001                       	dc.b	nRst, $01
00077041 E10B                       	smpsAlterNote       $0B
00077043 9603                       	dc.b	nA1, $03
00077045 E10C                       	smpsAlterNote       $0C
00077047 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
0007704D E10B                       	smpsAlterNote       $0B
0007704F 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
0007705B 8001 9603                  	dc.b	nRst, $01, nA1, $03
0007705F E10C                       	smpsAlterNote       $0C
00077061 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
0007706D 8001                       	dc.b	nRst, $01
0007706F E10B                       	smpsAlterNote       $0B
00077071 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00077079 E107                       	smpsAlterNote       $07
0007707B 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0007707F E10B                       	smpsAlterNote       $0B
00077081 9603                       	dc.b	nA1, $03
00077083 E109                       	smpsAlterNote       $09
00077085 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00077089 E108                       	smpsAlterNote       $08
0007708B 9D06                       	dc.b	nE2, $06
0007708D E107                       	smpsAlterNote       $07
0007708F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00077093 E106                       	smpsAlterNote       $06
00077095 9903                       	dc.b	nC2, $03
00077097 E10C                       	smpsAlterNote       $0C
00077099 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0007709D E10B                       	smpsAlterNote       $0B
0007709F 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000770AB 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000770B5 E10C                       	smpsAlterNote       $0C
000770B7 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
000770C3 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000770CF 8001                       	dc.b	nRst, $01
000770D1 E10B                       	smpsAlterNote       $0B
000770D3 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000770DF 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000770EB 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
000770F7 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00077101 E10C                       	smpsAlterNote       $0C
00077103 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
0007710F E10B                       	smpsAlterNote       $0B
00077111 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
00077119 E107                       	smpsAlterNote       $07
0007711B 9B06 8001                  	dc.b	nD2, $06, nRst, $01
0007711F E10B                       	smpsAlterNote       $0B
00077121 9603                       	dc.b	nA1, $03
00077123 E109                       	smpsAlterNote       $09
00077125 9E03 8001                  	dc.b	nF2, $03, nRst, $01
00077129 E108                       	smpsAlterNote       $08
0007712B 9D06 8001                  	dc.b	nE2, $06, nRst, $01
0007712F E107                       	smpsAlterNote       $07
00077131 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00077135 E106                       	smpsAlterNote       $06
00077137 9903                       	dc.b	nC2, $03
00077139 E10C                       	smpsAlterNote       $0C
0007713B 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0007713F E10B                       	smpsAlterNote       $0B
00077141 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0007714D 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
00077157 E10C                       	smpsAlterNote       $0C
00077159 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
00077165 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
00077171 8001                       	dc.b	nRst, $01
00077173 E10B                       	smpsAlterNote       $0B
00077175 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
00077181 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
0007718B E10C                       	smpsAlterNote       $0C
0007718D 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
00077199 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
000771A5 E10B                       	smpsAlterNote       $0B
000771A7 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000771B3 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000771BD E10C                       	smpsAlterNote       $0C
000771BF 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000771CB 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
000771D7 E10B                       	smpsAlterNote       $0B
000771D9 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
000771E5 8001                       	dc.b	nRst, $01
000771E7 E1EC                       	smpsAlterNote       $EC
000771E9 A101                       	dc.b	nAb2, $01
000771EB E1FA                       	smpsAlterNote       $FA
000771ED E701                       	dc.b	smpsNoAttack, $01
000771EF E116                       	smpsAlterNote       $16
000771F1 E701                       	dc.b	smpsNoAttack, $01
000771F3 E1F5                       	smpsAlterNote       $F5
000771F5 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000771F8 E10B                       	smpsAlterNote       $0B
000771FA E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
00077206 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
00077212 E107                       	smpsAlterNote       $07
00077214 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
0007721A E10B                       	smpsAlterNote       $0B
0007721C A203                       	dc.b	nA2, $03
0007721E E107                       	smpsAlterNote       $07
00077220 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00077224 E1F3                       	smpsAlterNote       $F3
00077226 A401                       	dc.b	nB2, $01
00077228 E102                       	smpsAlterNote       $02
0007722A E701                       	dc.b	smpsNoAttack, $01
0007722C E109                       	smpsAlterNote       $09
0007722E E701                       	dc.b	smpsNoAttack, $01
00077230 E102                       	smpsAlterNote       $02
00077232 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00077235 E106                       	smpsAlterNote       $06
00077237 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0007723B E107                       	smpsAlterNote       $07
0007723D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00077241 E108                       	smpsAlterNote       $08
00077243 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
00077249 E109                       	smpsAlterNote       $09
0007724B A003 8001                  	dc.b	nG2, $03, nRst, $01
0007724F E1F2                       	smpsAlterNote       $F2
00077251 A401                       	dc.b	nB2, $01
00077253 E1FF                       	smpsAlterNote       $FF
00077255 E701                       	dc.b	smpsNoAttack, $01
00077257 E111                       	smpsAlterNote       $11
00077259 E701                       	dc.b	smpsNoAttack, $01
0007725B E1FB                       	smpsAlterNote       $FB
0007725D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00077260 E106                       	smpsAlterNote       $06
00077262 E702                       	dc.b	smpsNoAttack, $02
00077264 E109                       	smpsAlterNote       $09
00077266 A007                       	dc.b	nG2, $07
00077268 E108                       	smpsAlterNote       $08
0007726A 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
0007726E E107                       	smpsAlterNote       $07
00077270 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00077276 E10B                       	smpsAlterNote       $0B
00077278 A202 8001                  	dc.b	nA2, $02, nRst, $01
0007727C E107                       	smpsAlterNote       $07
0007727E 9B03                       	dc.b	nD2, $03
00077280 E11A                       	smpsAlterNote       $1A
00077282 A301                       	dc.b	nBb2, $01
00077284 E1F2                       	smpsAlterNote       $F2
00077286 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00077289 E1FF                       	smpsAlterNote       $FF
0007728B E701                       	dc.b	smpsNoAttack, $01
0007728D E111                       	smpsAlterNote       $11
0007728F E701                       	dc.b	smpsNoAttack, $01
00077291 E106                       	smpsAlterNote       $06
00077293 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00077296 E107                       	smpsAlterNote       $07
00077298 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000772A4 E117                       	smpsAlterNote       $17
000772A6 A001                       	dc.b	nG2, $01
000772A8 E1FA                       	smpsAlterNote       $FA
000772AA E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000772AD E116                       	smpsAlterNote       $16
000772AF E701                       	dc.b	smpsNoAttack, $01
000772B1 E1F5                       	smpsAlterNote       $F5
000772B3 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000772B6 E103                       	smpsAlterNote       $03
000772B8 E701                       	dc.b	smpsNoAttack, $01
000772BA E10B                       	smpsAlterNote       $0B
000772BC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000772C0 E107                       	smpsAlterNote       $07
000772C2 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000772C8 E109                       	smpsAlterNote       $09
000772CA 9E03                       	dc.b	nF2, $03
000772CC E10B                       	smpsAlterNote       $0B
000772CE 9603 8001                  	dc.b	nA1, $03, nRst, $01
000772D2 E107                       	smpsAlterNote       $07
000772D4 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000772DA E10B                       	smpsAlterNote       $0B
000772DC A203 8001                  	dc.b	nA2, $03, nRst, $01
000772E0 E107                       	smpsAlterNote       $07
000772E2 9B03                       	dc.b	nD2, $03
000772E4 E11A                       	smpsAlterNote       $1A
000772E6 A301                       	dc.b	nBb2, $01
000772E8 E1F9                       	smpsAlterNote       $F9
000772EA E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000772ED E1FF                       	smpsAlterNote       $FF
000772EF E701                       	dc.b	smpsNoAttack, $01
000772F1 E111                       	smpsAlterNote       $11
000772F3 E701                       	dc.b	smpsNoAttack, $01
000772F5 E106                       	smpsAlterNote       $06
000772F7 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000772FA E107                       	smpsAlterNote       $07
000772FC 9B03                       	dc.b	nD2, $03
000772FE E108                       	smpsAlterNote       $08
00077300 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
00077306 E109                       	smpsAlterNote       $09
00077308 A003                       	dc.b	nG2, $03
0007730A E1F0                       	smpsAlterNote       $F0
0007730C A501                       	dc.b	nC3, $01
0007730E E106                       	smpsAlterNote       $06
00077310 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
00077314 E109                       	smpsAlterNote       $09
00077316 A006 8001                  	dc.b	nG2, $06, nRst, $01
0007731A E108                       	smpsAlterNote       $08
0007731C 9C03                       	dc.b	nEb2, $03
0007731E E107                       	smpsAlterNote       $07
00077320 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
00077326 E10B                       	smpsAlterNote       $0B
00077328 A203 8001                  	dc.b	nA2, $03, nRst, $01
0007732C E107                       	smpsAlterNote       $07
0007732E 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00077332 E11A                       	smpsAlterNote       $1A
00077334 A301                       	dc.b	nBb2, $01
00077336 E1F9                       	smpsAlterNote       $F9
00077338 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0007733B E107                       	smpsAlterNote       $07
0007733D E701                       	dc.b	smpsNoAttack, $01
0007733F E1FB                       	smpsAlterNote       $FB
00077341 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00077344 E106                       	smpsAlterNote       $06
00077346 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0007734A E107                       	smpsAlterNote       $07
0007734C 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
00077354 E1EC                       	smpsAlterNote       $EC
00077356 A101                       	dc.b	nAb2, $01
00077358 E108                       	smpsAlterNote       $08
0007735A E701                       	dc.b	smpsNoAttack, $01
0007735C E1E7                       	smpsAlterNote       $E7
0007735E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
00077361 E1F5                       	smpsAlterNote       $F5
00077363 E701                       	dc.b	smpsNoAttack, $01
00077365 E10B                       	smpsAlterNote       $0B
00077367 E702                       	dc.b	smpsNoAttack, $02
00077369 E107                       	smpsAlterNote       $07
0007736B 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
00077371 E106                       	smpsAlterNote       $06
00077373 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
00077379 E10C                       	smpsAlterNote       $0C
0007737B 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
00077383 E109                       	smpsAlterNote       $09
00077385 9E03                       	dc.b	nF2, $03
00077387 E10C                       	smpsAlterNote       $0C
00077389 9703 8001                  	dc.b	nBb1, $03, nRst, $01
0007738D E1EA                       	smpsAlterNote       $EA
0007738F A201                       	dc.b	nA2, $01
00077391 E106                       	smpsAlterNote       $06
00077393 E701                       	dc.b	smpsNoAttack, $01
00077395 E114                       	smpsAlterNote       $14
00077397 E701                       	dc.b	smpsNoAttack, $01
00077399 E1F0                       	smpsAlterNote       $F0
0007739B E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
0007739E E10C                       	smpsAlterNote       $0C
000773A0 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000773AC 9703                       	dc.b	nBb1, $03
000773AE E116                       	smpsAlterNote       $16
000773B0 9C01                       	dc.b	nEb2, $01
000773B2 E105                       	smpsAlterNote       $05
000773B4 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000773B7 E113                       	smpsAlterNote       $13
000773B9 E701                       	dc.b	smpsNoAttack, $01
000773BB E1FF                       	smpsAlterNote       $FF
000773BD E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000773C0 E109                       	smpsAlterNote       $09
000773C2 E703                       	dc.b	smpsNoAttack, $03
000773C4 E10C                       	smpsAlterNote       $0C
000773C6 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000773D2 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000773DA E109                       	smpsAlterNote       $09
000773DC 9E03                       	dc.b	nF2, $03
000773DE E10C                       	smpsAlterNote       $0C
000773E0 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000773E4 E1EA                       	smpsAlterNote       $EA
000773E6 A201                       	dc.b	nA2, $01
000773E8 E106                       	smpsAlterNote       $06
000773EA E701                       	dc.b	smpsNoAttack, $01
000773EC E1E2                       	smpsAlterNote       $E2
000773EE E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000773F1 E1F0                       	smpsAlterNote       $F0
000773F3 E701                       	dc.b	smpsNoAttack, $01
000773F5 E10C                       	smpsAlterNote       $0C
000773F7 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
00077403 E116                       	smpsAlterNote       $16
00077405 9C01                       	dc.b	nEb2, $01
00077407 E105                       	smpsAlterNote       $05
00077409 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
0007740C E1F1                       	smpsAlterNote       $F1
0007740E E79E 01                    	dc.b	smpsNoAttack, nF2, $01
00077411 E1FF                       	smpsAlterNote       $FF
00077413 E701                       	dc.b	smpsNoAttack, $01
00077415 E109                       	smpsAlterNote       $09
00077417 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0007741B E10C                       	smpsAlterNote       $0C
0007741D 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
00077429 E106                       	smpsAlterNote       $06
0007742B 9903                       	dc.b	nC2, $03
0007742D E107                       	smpsAlterNote       $07
0007742F 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00077433 E109                       	smpsAlterNote       $09
00077435 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
0007743B E107                       	smpsAlterNote       $07
0007743D 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00077441 E108                       	smpsAlterNote       $08
00077443 9D03                       	dc.b	nE2, $03
00077445 E10B                       	smpsAlterNote       $0B
00077447 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
0007744D E109                       	smpsAlterNote       $09
0007744F 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
00077455 E10C                       	smpsAlterNote       $0C
00077457 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
0007745D E106                       	smpsAlterNote       $06
0007745F 9903                       	dc.b	nC2, $03
00077461 E11A                       	smpsAlterNote       $1A
00077463 A301                       	dc.b	nBb2, $01
00077465 E1F9                       	smpsAlterNote       $F9
00077467 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0007746A E1FF                       	smpsAlterNote       $FF
0007746C E701                       	dc.b	smpsNoAttack, $01
0007746E E111                       	smpsAlterNote       $11
00077470 E701                       	dc.b	smpsNoAttack, $01
00077472 E106                       	smpsAlterNote       $06
00077474 E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
0007747B E109                       	smpsAlterNote       $09
0007747D A003                       	dc.b	nG2, $03
0007747F E106                       	smpsAlterNote       $06
00077481 9907                       	dc.b	nC2, $07
00077483 E107                       	smpsAlterNote       $07
00077485 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
0007748D E10B                       	smpsAlterNote       $0B
0007748F A203                       	dc.b	nA2, $03
00077491 E107                       	smpsAlterNote       $07
00077493 9B03 8001                  	dc.b	nD2, $03, nRst, $01
00077497 E1F2                       	smpsAlterNote       $F2
00077499 A401                       	dc.b	nB2, $01
0007749B E1F9                       	smpsAlterNote       $F9
0007749D E701                       	dc.b	smpsNoAttack, $01
0007749F E107                       	smpsAlterNote       $07
000774A1 E701                       	dc.b	smpsNoAttack, $01
000774A3 E1FB                       	smpsAlterNote       $FB
000774A5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000774A8 E106                       	smpsAlterNote       $06
000774AA E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000774AE E107                       	smpsAlterNote       $07
000774B0 9B03                       	dc.b	nD2, $03
000774B2 E108                       	smpsAlterNote       $08
000774B4 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000774BA E109                       	smpsAlterNote       $09
000774BC A003 8001                  	dc.b	nG2, $03, nRst, $01
000774C0 E1F2                       	smpsAlterNote       $F2
000774C2 A401                       	dc.b	nB2, $01
000774C4 E1F9                       	smpsAlterNote       $F9
000774C6 E701                       	dc.b	smpsNoAttack, $01
000774C8 E107                       	smpsAlterNote       $07
000774CA E701                       	dc.b	smpsNoAttack, $01
000774CC E1FB                       	smpsAlterNote       $FB
000774CE E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000774D1 E106                       	smpsAlterNote       $06
000774D3 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000774D7 E108                       	smpsAlterNote       $08
000774D9 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
000774DD E10C                       	smpsAlterNote       $0C
000774DF A302 8001                  	dc.b	nBb2, $02, nRst, $01
000774E3 E107                       	smpsAlterNote       $07
000774E5 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000774EB E10B                       	smpsAlterNote       $0B
000774ED A203                       	dc.b	nA2, $03
000774EF E107                       	smpsAlterNote       $07
000774F1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000774F5 E1F2                       	smpsAlterNote       $F2
000774F7 A401                       	dc.b	nB2, $01
000774F9 E1FF                       	smpsAlterNote       $FF
000774FB E701                       	dc.b	smpsNoAttack, $01
000774FD E107                       	smpsAlterNote       $07
000774FF E701                       	dc.b	smpsNoAttack, $01
00077501 E1FB                       	smpsAlterNote       $FB
00077503 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00077506 E106                       	smpsAlterNote       $06
00077508 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
0007750C E107                       	smpsAlterNote       $07
0007750E 9B02 8001                  	dc.b	nD2, $02, nRst, $01
00077512 E108                       	smpsAlterNote       $08
00077514 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
0007751A E109                       	smpsAlterNote       $09
0007751C A003 8001                  	dc.b	nG2, $03, nRst, $01
00077520 E1F2                       	smpsAlterNote       $F2
00077522 A401                       	dc.b	nB2, $01
00077524 E1FF                       	smpsAlterNote       $FF
00077526 E701                       	dc.b	smpsNoAttack, $01
00077528 E111                       	smpsAlterNote       $11
0007752A E701                       	dc.b	smpsNoAttack, $01
0007752C E1FB                       	smpsAlterNote       $FB
0007752E E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
00077531 E106                       	smpsAlterNote       $06
00077533 E702                       	dc.b	smpsNoAttack, $02
00077535 E108                       	smpsAlterNote       $08
00077537 9C07                       	dc.b	nEb2, $07
00077539 E10C                       	smpsAlterNote       $0C
0007753B A303 8001                  	dc.b	nBb2, $03, nRst, $01
0007753F E107                       	smpsAlterNote       $07
00077541 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
00077547 E10B                       	smpsAlterNote       $0B
00077549 A202 8001                  	dc.b	nA2, $02, nRst, $01
0007754D E107                       	smpsAlterNote       $07
0007754F 9B03                       	dc.b	nD2, $03
00077551 E11A                       	smpsAlterNote       $1A
00077553 A301                       	dc.b	nBb2, $01
00077555 E1F2                       	smpsAlterNote       $F2
00077557 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
0007755A E1FF                       	smpsAlterNote       $FF
0007755C E701                       	dc.b	smpsNoAttack, $01
0007755E E111                       	smpsAlterNote       $11
00077560 E701                       	dc.b	smpsNoAttack, $01
00077562 E106                       	smpsAlterNote       $06
00077564 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00077567 E107                       	smpsAlterNote       $07
00077569 9B03 8001                  	dc.b	nD2, $03, nRst, $01
0007756D E108                       	smpsAlterNote       $08
0007756F 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
00077577 E109                       	smpsAlterNote       $09
00077579 A003                       	dc.b	nG2, $03
0007757B E11A                       	smpsAlterNote       $1A
0007757D A301                       	dc.b	nBb2, $01
0007757F E1F2                       	smpsAlterNote       $F2
00077581 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
00077584 E1FF                       	smpsAlterNote       $FF
00077586 E701                       	dc.b	smpsNoAttack, $01
00077588 E111                       	smpsAlterNote       $11
0007758A E701                       	dc.b	smpsNoAttack, $01
0007758C E106                       	smpsAlterNote       $06
0007758E E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
00077591 E108                       	smpsAlterNote       $08
00077593 9C07                       	dc.b	nEb2, $07
00077595 E10C                       	smpsAlterNote       $0C
00077597 A303 8001                  	dc.b	nBb2, $03, nRst, $01
0007759B E107                       	smpsAlterNote       $07
0007759D 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000775A9 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
000775B3 E108                       	smpsAlterNote       $08
000775B5 9C06                       	dc.b	nEb2, $06
000775B7 E10C                       	smpsAlterNote       $0C
000775B9 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000775BD E108                       	smpsAlterNote       $08
000775BF 9C03                       	dc.b	nEb2, $03
000775C1 E109                       	smpsAlterNote       $09
000775C3 A003 8001                  	dc.b	nG2, $03, nRst, $01
000775C7 E10C                       	smpsAlterNote       $0C
000775C9 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
000775D1 E107                       	smpsAlterNote       $07
000775D3 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000775D7 F6F4 F8                    	smpsJump            music84_Jump04
000775DA                            
000775DA                            ; FM2 Data
000775DA                            music84_FM2:
000775DA E0C0                       	smpsPan             panCenter, $00
000775DE E10B                       	smpsAlterNote       $0B
000775E0 C603 8007                  	dc.b	nA5, $03, nRst, $07
000775E4 E109                       	smpsAlterNote       $09
000775E6 C403 800B                  	dc.b	nG5, $03, nRst, $0B
000775EA E108                       	smpsAlterNote       $08
000775EC C103 8004                  	dc.b	nE5, $03, nRst, $04
000775F2 E080                       	smpsPan             panLeft, $00
000775F4 E10C                       	smpsAlterNote       $0C
000775F6 E6F9                       	smpsAlterVol        $F9
000775F8 C703                       	dc.b	nBb5, $03
000775FA E10B                       	smpsAlterNote       $0B
000775FC C603 8001                  	dc.b	nA5, $03, nRst, $01
00077600 E109                       	smpsAlterNote       $09
00077602 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
00077608 E108                       	smpsAlterNote       $08
0007760A C103 8001                  	dc.b	nE5, $03, nRst, $01
0007760E E106                       	smpsAlterNote       $06
00077610 BD03                       	dc.b	nC5, $03
00077612 E10B                       	smpsAlterNote       $0B
00077614 BA03 8001                  	dc.b	nA4, $03, nRst, $01
0007761A E0C0                       	smpsPan             panCenter, $00
0007761C E107                       	smpsAlterNote       $07
0007761E E606                       	smpsAlterVol        $06
00077620 BF03                       	dc.b	nD5, $03
00077622                            
00077622                            music84_Jump03:
00077622 E108                       	smpsAlterNote       $08
00077624 C103 8001                  	dc.b	nE5, $03, nRst, $01
00077628 E109                       	smpsAlterNote       $09
0007762A C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
00077630 E10B                       	smpsAlterNote       $0B
00077632 C607                       	dc.b	nA5, $07
00077634 E107                       	smpsAlterNote       $07
00077636 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0007763A E106                       	smpsAlterNote       $06
0007763C C90D                       	dc.b	nC6, $0D
0007763E E100                       	smpsAlterNote       $00
00077640 E701                       	dc.b	smpsNoAttack, $01
00077642 E1FF                       	smpsAlterNote       $FF
00077644 E701                       	dc.b	smpsNoAttack, $01
00077646 E103                       	smpsAlterNote       $03
00077648 E701                       	dc.b	smpsNoAttack, $01
0007764A E109                       	smpsAlterNote       $09
0007764C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077650 E106                       	smpsAlterNote       $06
00077652 E701                       	dc.b	smpsNoAttack, $01
00077654 E100                       	smpsAlterNote       $00
00077656 E701                       	dc.b	smpsNoAttack, $01
00077658 E10C                       	smpsAlterNote       $0C
0007765A C703 8001                  	dc.b	nBb5, $03, nRst, $01
0007765E E10B                       	smpsAlterNote       $0B
00077660 C603                       	dc.b	nA5, $03
00077662 E109                       	smpsAlterNote       $09
00077664 C403 8001                  	dc.b	nG5, $03, nRst, $01
00077668 E10B                       	smpsAlterNote       $0B
0007766A C60D                       	dc.b	nA5, $0D
0007766C E105                       	smpsAlterNote       $05
0007766E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077672 E10B                       	smpsAlterNote       $0B
00077674 E701                       	dc.b	smpsNoAttack, $01
00077676 E10E                       	smpsAlterNote       $0E
00077678 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007767C E108                       	smpsAlterNote       $08
0007767E E701                       	dc.b	smpsNoAttack, $01
00077680 E104                       	smpsAlterNote       $04
00077682 E701                       	dc.b	smpsNoAttack, $01
00077684 E105                       	smpsAlterNote       $05
00077686 E701                       	dc.b	smpsNoAttack, $01
00077688 E10B                       	smpsAlterNote       $0B
0007768A E701                       	dc.b	smpsNoAttack, $01
0007768C E10F                       	smpsAlterNote       $0F
0007768E E701                       	dc.b	smpsNoAttack, $01
00077690 E10B                       	smpsAlterNote       $0B
00077692 E701                       	dc.b	smpsNoAttack, $01
00077694 E108                       	smpsAlterNote       $08
00077696 E701                       	dc.b	smpsNoAttack, $01
00077698 E104                       	smpsAlterNote       $04
0007769A E701                       	dc.b	smpsNoAttack, $01
0007769C E108                       	smpsAlterNote       $08
0007769E E701                       	dc.b	smpsNoAttack, $01
000776A0 E10E                       	smpsAlterNote       $0E
000776A2 E701                       	dc.b	smpsNoAttack, $01
000776A4 E10F                       	smpsAlterNote       $0F
000776A6 E701                       	dc.b	smpsNoAttack, $01
000776A8 E10B                       	smpsAlterNote       $0B
000776AA E701                       	dc.b	smpsNoAttack, $01
000776AC E105                       	smpsAlterNote       $05
000776AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000776B2 E108                       	smpsAlterNote       $08
000776B4 E701                       	dc.b	smpsNoAttack, $01
000776B6 E10E                       	smpsAlterNote       $0E
000776B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000776BC E108                       	smpsAlterNote       $08
000776BE E701                       	dc.b	smpsNoAttack, $01
000776C0 E105                       	smpsAlterNote       $05
000776C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000776C6 E10B                       	smpsAlterNote       $0B
000776C8 E701                       	dc.b	smpsNoAttack, $01
000776CA E10F                       	smpsAlterNote       $0F
000776CC E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000776D0 E107                       	smpsAlterNote       $07
000776D2 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000776D6 E108                       	smpsAlterNote       $08
000776D8 C103                       	dc.b	nE5, $03
000776DA E109                       	smpsAlterNote       $09
000776DC C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
000776E4 E10B                       	smpsAlterNote       $0B
000776E6 C606 8001                  	dc.b	nA5, $06, nRst, $01
000776EA E107                       	smpsAlterNote       $07
000776EC BF03                       	dc.b	nD5, $03
000776EE E106                       	smpsAlterNote       $06
000776F0 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
000776F4 E107                       	smpsAlterNote       $07
000776F6 CB03                       	dc.b	nD6, $03
000776F8 E10C                       	smpsAlterNote       $0C
000776FA C704 8001                  	dc.b	nBb5, $04, nRst, $01
000776FE E10B                       	smpsAlterNote       $0B
00077700 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077704 E109                       	smpsAlterNote       $09
00077706 C404                       	dc.b	nG5, $04
00077708 E10B                       	smpsAlterNote       $0B
0007770A C60D                       	dc.b	nA5, $0D
0007770C E108                       	smpsAlterNote       $08
0007770E E701                       	dc.b	smpsNoAttack, $01
00077710 E104                       	smpsAlterNote       $04
00077712 E701                       	dc.b	smpsNoAttack, $01
00077714 E108                       	smpsAlterNote       $08
00077716 E701                       	dc.b	smpsNoAttack, $01
00077718 E10B                       	smpsAlterNote       $0B
0007771A E701                       	dc.b	smpsNoAttack, $01
0007771C E10F                       	smpsAlterNote       $0F
0007771E E701                       	dc.b	smpsNoAttack, $01
00077720 E10B                       	smpsAlterNote       $0B
00077722 E701                       	dc.b	smpsNoAttack, $01
00077724 E105                       	smpsAlterNote       $05
00077726 E701                       	dc.b	smpsNoAttack, $01
00077728 E104                       	smpsAlterNote       $04
0007772A E701                       	dc.b	smpsNoAttack, $01
0007772C E108                       	smpsAlterNote       $08
0007772E E701                       	dc.b	smpsNoAttack, $01
00077730 E10E                       	smpsAlterNote       $0E
00077732 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077736 E10B                       	smpsAlterNote       $0B
00077738 E701                       	dc.b	smpsNoAttack, $01
0007773A E105                       	smpsAlterNote       $05
0007773C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077740 E10B                       	smpsAlterNote       $0B
00077742 E701                       	dc.b	smpsNoAttack, $01
00077744 E10E                       	smpsAlterNote       $0E
00077746 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007774A E108                       	smpsAlterNote       $08
0007774C E701                       	dc.b	smpsNoAttack, $01
0007774E E104                       	smpsAlterNote       $04
00077750 E701                       	dc.b	smpsNoAttack, $01
00077752 E105                       	smpsAlterNote       $05
00077754 E701                       	dc.b	smpsNoAttack, $01
00077756 E10B                       	smpsAlterNote       $0B
00077758 E701                       	dc.b	smpsNoAttack, $01
0007775A E10F                       	smpsAlterNote       $0F
0007775C E701                       	dc.b	smpsNoAttack, $01
0007775E E10B                       	smpsAlterNote       $0B
00077760 E701                       	dc.b	smpsNoAttack, $01
00077762 E108                       	smpsAlterNote       $08
00077764 E701                       	dc.b	smpsNoAttack, $01
00077766 E105                       	smpsAlterNote       $05
00077768 8001                       	dc.b	nRst, $01
0007776A E109                       	smpsAlterNote       $09
0007776C C401                       	dc.b	nG5, $01
0007776E E10B                       	smpsAlterNote       $0B
00077770 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
00077779 E109                       	smpsAlterNote       $09
0007777B C404 8001                  	dc.b	nG5, $04, nRst, $01
0007777F E10B                       	smpsAlterNote       $0B
00077781 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077785 E107                       	smpsAlterNote       $07
00077787 BF0D                       	dc.b	nD5, $0D
00077789 E101                       	smpsAlterNote       $01
0007778B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007778F E104                       	smpsAlterNote       $04
00077791 E701                       	dc.b	smpsNoAttack, $01
00077793 E10A                       	smpsAlterNote       $0A
00077795 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077799 E104                       	smpsAlterNote       $04
0007779B E701                       	dc.b	smpsNoAttack, $01
0007779D E101                       	smpsAlterNote       $01
0007779F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000777A3 E107                       	smpsAlterNote       $07
000777A5 E701                       	dc.b	smpsNoAttack, $01
000777A7 E10B                       	smpsAlterNote       $0B
000777A9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000777AD E108                       	smpsAlterNote       $08
000777AF C101                       	dc.b	nE5, $01
000777B1 E109                       	smpsAlterNote       $09
000777B3 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000777B8 E10B                       	smpsAlterNote       $0B
000777BA C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000777C2 E108                       	smpsAlterNote       $08
000777C4 CD06                       	dc.b	nE6, $06
000777C6 E109                       	smpsAlterNote       $09
000777C8 CE07                       	dc.b	nF6, $07
000777CA E108                       	smpsAlterNote       $08
000777CC CD03 8001                  	dc.b	nE6, $03, nRst, $01
000777D0 E106                       	smpsAlterNote       $06
000777D2 C903                       	dc.b	nC6, $03
000777D4 E109                       	smpsAlterNote       $09
000777D6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000777DA E10C                       	smpsAlterNote       $0C
000777DC C70D                       	dc.b	nBb5, $0D
000777DE E106                       	smpsAlterNote       $06
000777E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000777E4 E109                       	smpsAlterNote       $09
000777E6 E701                       	dc.b	smpsNoAttack, $01
000777E8 E10F                       	smpsAlterNote       $0F
000777EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000777EE E109                       	smpsAlterNote       $09
000777F0 E701                       	dc.b	smpsNoAttack, $01
000777F2 E106                       	smpsAlterNote       $06
000777F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000777F8 E10C                       	smpsAlterNote       $0C
000777FA E701                       	dc.b	smpsNoAttack, $01
000777FC E110                       	smpsAlterNote       $10
000777FE E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00077802 E10B                       	smpsAlterNote       $0B
00077804 C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
00077808 E105                       	smpsAlterNote       $05
0007780A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007780E E10B                       	smpsAlterNote       $0B
00077810 E701                       	dc.b	smpsNoAttack, $01
00077812 E10E                       	smpsAlterNote       $0E
00077814 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077818 E108                       	smpsAlterNote       $08
0007781A E701                       	dc.b	smpsNoAttack, $01
0007781C E104                       	smpsAlterNote       $04
0007781E E701                       	dc.b	smpsNoAttack, $01
00077820 E105                       	smpsAlterNote       $05
00077822 E701                       	dc.b	smpsNoAttack, $01
00077824 E10B                       	smpsAlterNote       $0B
00077826 E701                       	dc.b	smpsNoAttack, $01
00077828 E10F                       	smpsAlterNote       $0F
0007782A E701                       	dc.b	smpsNoAttack, $01
0007782C E10B                       	smpsAlterNote       $0B
0007782E E701                       	dc.b	smpsNoAttack, $01
00077830 E108                       	smpsAlterNote       $08
00077832 E701                       	dc.b	smpsNoAttack, $01
00077834 E104                       	smpsAlterNote       $04
00077836 E701                       	dc.b	smpsNoAttack, $01
00077838 E108                       	smpsAlterNote       $08
0007783A E701                       	dc.b	smpsNoAttack, $01
0007783C E10E                       	smpsAlterNote       $0E
0007783E E701                       	dc.b	smpsNoAttack, $01
00077840 E10F                       	smpsAlterNote       $0F
00077842 E701                       	dc.b	smpsNoAttack, $01
00077844 E10B                       	smpsAlterNote       $0B
00077846 E701                       	dc.b	smpsNoAttack, $01
00077848 E105                       	smpsAlterNote       $05
0007784A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007784E E108                       	smpsAlterNote       $08
00077850 E701                       	dc.b	smpsNoAttack, $01
00077852 E10E                       	smpsAlterNote       $0E
00077854 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077858 E108                       	smpsAlterNote       $08
0007785A E701                       	dc.b	smpsNoAttack, $01
0007785C E105                       	smpsAlterNote       $05
0007785E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077862 E10B                       	smpsAlterNote       $0B
00077864 E701                       	dc.b	smpsNoAttack, $01
00077866 E10F                       	smpsAlterNote       $0F
00077868 E701                       	dc.b	smpsNoAttack, $01
0007786A E10E                       	smpsAlterNote       $0E
0007786C E701                       	dc.b	smpsNoAttack, $01
0007786E E108                       	smpsAlterNote       $08
00077870 E701                       	dc.b	smpsNoAttack, $01
00077872 E104                       	smpsAlterNote       $04
00077874 E701                       	dc.b	smpsNoAttack, $01
00077876 E108                       	smpsAlterNote       $08
00077878 E701                       	dc.b	smpsNoAttack, $01
0007787A E10E                       	smpsAlterNote       $0E
0007787C E701                       	dc.b	smpsNoAttack, $01
0007787E E10F                       	smpsAlterNote       $0F
00077880 E701                       	dc.b	smpsNoAttack, $01
00077882 E10B                       	smpsAlterNote       $0B
00077884 E701                       	dc.b	smpsNoAttack, $01
00077886 E105                       	smpsAlterNote       $05
00077888 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007788C E108                       	smpsAlterNote       $08
0007788E E701                       	dc.b	smpsNoAttack, $01
00077890 E10E                       	smpsAlterNote       $0E
00077892 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077896 E108                       	smpsAlterNote       $08
00077898 E701                       	dc.b	smpsNoAttack, $01
0007789A E105                       	smpsAlterNote       $05
0007789C E701                       	dc.b	smpsNoAttack, $01
0007789E E10B                       	smpsAlterNote       $0B
000778A0 C60D                       	dc.b	nA5, $0D
000778A2 E108                       	smpsAlterNote       $08
000778A4 E701                       	dc.b	smpsNoAttack, $01
000778A6 E104                       	smpsAlterNote       $04
000778A8 E701                       	dc.b	smpsNoAttack, $01
000778AA E105                       	smpsAlterNote       $05
000778AC E701                       	dc.b	smpsNoAttack, $01
000778AE E10B                       	smpsAlterNote       $0B
000778B0 E701                       	dc.b	smpsNoAttack, $01
000778B2 E10F                       	smpsAlterNote       $0F
000778B4 E701                       	dc.b	smpsNoAttack, $01
000778B6 E10B                       	smpsAlterNote       $0B
000778B8 E701                       	dc.b	smpsNoAttack, $01
000778BA E108                       	smpsAlterNote       $08
000778BC E701                       	dc.b	smpsNoAttack, $01
000778BE E104                       	smpsAlterNote       $04
000778C0 E701                       	dc.b	smpsNoAttack, $01
000778C2 E108                       	smpsAlterNote       $08
000778C4 E701                       	dc.b	smpsNoAttack, $01
000778C6 E10E                       	smpsAlterNote       $0E
000778C8 E701                       	dc.b	smpsNoAttack, $01
000778CA E10F                       	smpsAlterNote       $0F
000778CC E701                       	dc.b	smpsNoAttack, $01
000778D0 E109                       	smpsAlterNote       $09
000778D2 E6FF                       	smpsAlterVol        $FF
000778D4 C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
000778DE E108                       	smpsAlterNote       $08
000778E0 C103 800E                  	dc.b	nE5, $03, nRst, $0E
000778E6 E107                       	smpsAlterNote       $07
000778E8 E601                       	smpsAlterVol        $01
000778EA BF03                       	dc.b	nD5, $03
000778EC E108                       	smpsAlterNote       $08
000778EE C103 8001                  	dc.b	nE5, $03, nRst, $01
000778F2 E109                       	smpsAlterNote       $09
000778F4 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000778FA E10B                       	smpsAlterNote       $0B
000778FC C606 8001                  	dc.b	nA5, $06, nRst, $01
00077900 E107                       	smpsAlterNote       $07
00077902 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00077906 E106                       	smpsAlterNote       $06
00077908 C90D                       	dc.b	nC6, $0D
0007790A E103                       	smpsAlterNote       $03
0007790C E701                       	dc.b	smpsNoAttack, $01
0007790E E1FF                       	smpsAlterNote       $FF
00077910 E701                       	dc.b	smpsNoAttack, $01
00077912 E103                       	smpsAlterNote       $03
00077914 E701                       	dc.b	smpsNoAttack, $01
00077916 E109                       	smpsAlterNote       $09
00077918 E701                       	dc.b	smpsNoAttack, $01
0007791A E10A                       	smpsAlterNote       $0A
0007791C E701                       	dc.b	smpsNoAttack, $01
0007791E E106                       	smpsAlterNote       $06
00077920 E701                       	dc.b	smpsNoAttack, $01
00077922 E100                       	smpsAlterNote       $00
00077924 E701                       	dc.b	smpsNoAttack, $01
00077926 E10C                       	smpsAlterNote       $0C
00077928 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0007792C E10B                       	smpsAlterNote       $0B
0007792E C603                       	dc.b	nA5, $03
00077930 E109                       	smpsAlterNote       $09
00077932 C403 8001                  	dc.b	nG5, $03, nRst, $01
00077936 E10B                       	smpsAlterNote       $0B
00077938 C60D                       	dc.b	nA5, $0D
0007793A E105                       	smpsAlterNote       $05
0007793C E701                       	dc.b	smpsNoAttack, $01
0007793E E104                       	smpsAlterNote       $04
00077940 E701                       	dc.b	smpsNoAttack, $01
00077942 E108                       	smpsAlterNote       $08
00077944 E701                       	dc.b	smpsNoAttack, $01
00077946 E10E                       	smpsAlterNote       $0E
00077948 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007794C E10B                       	smpsAlterNote       $0B
0007794E E701                       	dc.b	smpsNoAttack, $01
00077950 E105                       	smpsAlterNote       $05
00077952 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077956 E10B                       	smpsAlterNote       $0B
00077958 E701                       	dc.b	smpsNoAttack, $01
0007795A E10E                       	smpsAlterNote       $0E
0007795C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077960 E108                       	smpsAlterNote       $08
00077962 E701                       	dc.b	smpsNoAttack, $01
00077964 E104                       	smpsAlterNote       $04
00077966 E701                       	dc.b	smpsNoAttack, $01
00077968 E105                       	smpsAlterNote       $05
0007796A E701                       	dc.b	smpsNoAttack, $01
0007796C E10B                       	smpsAlterNote       $0B
0007796E E701                       	dc.b	smpsNoAttack, $01
00077970 E10F                       	smpsAlterNote       $0F
00077972 E701                       	dc.b	smpsNoAttack, $01
00077974 E10B                       	smpsAlterNote       $0B
00077976 E701                       	dc.b	smpsNoAttack, $01
00077978 E108                       	smpsAlterNote       $08
0007797A E701                       	dc.b	smpsNoAttack, $01
0007797C E104                       	smpsAlterNote       $04
0007797E E701                       	dc.b	smpsNoAttack, $01
00077980 E108                       	smpsAlterNote       $08
00077982 E701                       	dc.b	smpsNoAttack, $01
00077984 E10E                       	smpsAlterNote       $0E
00077986 E701                       	dc.b	smpsNoAttack, $01
00077988 E10F                       	smpsAlterNote       $0F
0007798A E701                       	dc.b	smpsNoAttack, $01
0007798C E10B                       	smpsAlterNote       $0B
0007798E E701                       	dc.b	smpsNoAttack, $01
00077990 E105                       	smpsAlterNote       $05
00077992 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077996 E108                       	smpsAlterNote       $08
00077998 E701                       	dc.b	smpsNoAttack, $01
0007799A E10E                       	smpsAlterNote       $0E
0007799C E701                       	dc.b	smpsNoAttack, $01
0007799E E10F                       	smpsAlterNote       $0F
000779A0 800F                       	dc.b	nRst, $0F
000779A2 E107                       	smpsAlterNote       $07
000779A4 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000779A8 E108                       	smpsAlterNote       $08
000779AA C103                       	dc.b	nE5, $03
000779AC E109                       	smpsAlterNote       $09
000779AE C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000779B4 E10B                       	smpsAlterNote       $0B
000779B6 C606 8001                  	dc.b	nA5, $06, nRst, $01
000779BA E107                       	smpsAlterNote       $07
000779BC BF03                       	dc.b	nD5, $03
000779BE E106                       	smpsAlterNote       $06
000779C0 C90E                       	dc.b	nC6, $0E
000779C2 E107                       	smpsAlterNote       $07
000779C4 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000779C8 E10C                       	smpsAlterNote       $0C
000779CA C704                       	dc.b	nBb5, $04
000779CC E10B                       	smpsAlterNote       $0B
000779CE C604 8001                  	dc.b	nA5, $04, nRst, $01
000779D2 E109                       	smpsAlterNote       $09
000779D4 C404                       	dc.b	nG5, $04
000779D6 E10B                       	smpsAlterNote       $0B
000779D8 C60D                       	dc.b	nA5, $0D
000779DA E108                       	smpsAlterNote       $08
000779DC E701                       	dc.b	smpsNoAttack, $01
000779DE E105                       	smpsAlterNote       $05
000779E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000779E4 E10B                       	smpsAlterNote       $0B
000779E6 E701                       	dc.b	smpsNoAttack, $01
000779E8 E10F                       	smpsAlterNote       $0F
000779EA E701                       	dc.b	smpsNoAttack, $01
000779EC E10E                       	smpsAlterNote       $0E
000779EE E701                       	dc.b	smpsNoAttack, $01
000779F0 E108                       	smpsAlterNote       $08
000779F2 E701                       	dc.b	smpsNoAttack, $01
000779F4 E104                       	smpsAlterNote       $04
000779F6 E701                       	dc.b	smpsNoAttack, $01
000779F8 E108                       	smpsAlterNote       $08
000779FA E701                       	dc.b	smpsNoAttack, $01
000779FC E10B                       	smpsAlterNote       $0B
000779FE E701                       	dc.b	smpsNoAttack, $01
00077A00 E10F                       	smpsAlterNote       $0F
00077A02 E701                       	dc.b	smpsNoAttack, $01
00077A04 E10B                       	smpsAlterNote       $0B
00077A06 E701                       	dc.b	smpsNoAttack, $01
00077A08 E105                       	smpsAlterNote       $05
00077A0A E701                       	dc.b	smpsNoAttack, $01
00077A0C E104                       	smpsAlterNote       $04
00077A0E E701                       	dc.b	smpsNoAttack, $01
00077A10 E108                       	smpsAlterNote       $08
00077A12 E701                       	dc.b	smpsNoAttack, $01
00077A14 E10E                       	smpsAlterNote       $0E
00077A16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077A1A E10B                       	smpsAlterNote       $0B
00077A1C E701                       	dc.b	smpsNoAttack, $01
00077A1E E105                       	smpsAlterNote       $05
00077A20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077A24 E10B                       	smpsAlterNote       $0B
00077A26 E701                       	dc.b	smpsNoAttack, $01
00077A28 E10E                       	smpsAlterNote       $0E
00077A2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077A2E E108                       	smpsAlterNote       $08
00077A30 E701                       	dc.b	smpsNoAttack, $01
00077A32 E105                       	smpsAlterNote       $05
00077A34 8001                       	dc.b	nRst, $01
00077A36 E109                       	smpsAlterNote       $09
00077A38 C402                       	dc.b	nG5, $02
00077A3A E10B                       	smpsAlterNote       $0B
00077A3C E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
00077A45 E109                       	smpsAlterNote       $09
00077A47 C404                       	dc.b	nG5, $04
00077A49 E10B                       	smpsAlterNote       $0B
00077A4B C604 8001                  	dc.b	nA5, $04, nRst, $01
00077A4F E107                       	smpsAlterNote       $07
00077A51 BF0D                       	dc.b	nD5, $0D
00077A53 E101                       	smpsAlterNote       $01
00077A55 E701                       	dc.b	smpsNoAttack, $01
00077A57 E100                       	smpsAlterNote       $00
00077A59 E701                       	dc.b	smpsNoAttack, $01
00077A5B E104                       	smpsAlterNote       $04
00077A5D E701                       	dc.b	smpsNoAttack, $01
00077A5F E10A                       	smpsAlterNote       $0A
00077A61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077A65 E107                       	smpsAlterNote       $07
00077A67 E701                       	dc.b	smpsNoAttack, $01
00077A69 E101                       	smpsAlterNote       $01
00077A6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077A6F E107                       	smpsAlterNote       $07
00077A71 E701                       	dc.b	smpsNoAttack, $01
00077A73 E10A                       	smpsAlterNote       $0A
00077A75 E701                       	dc.b	smpsNoAttack, $01
00077A77 E10B                       	smpsAlterNote       $0B
00077A79 8001                       	dc.b	nRst, $01
00077A7B E108                       	smpsAlterNote       $08
00077A7D C101                       	dc.b	nE5, $01
00077A7F E109                       	smpsAlterNote       $09
00077A81 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
00077A86 E10B                       	smpsAlterNote       $0B
00077A88 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00077A90 E108                       	smpsAlterNote       $08
00077A92 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00077A96 E109                       	smpsAlterNote       $09
00077A98 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00077A9C E108                       	smpsAlterNote       $08
00077A9E CD02 8001                  	dc.b	nE6, $02, nRst, $01
00077AA2 E106                       	smpsAlterNote       $06
00077AA4 C903                       	dc.b	nC6, $03
00077AA6 E109                       	smpsAlterNote       $09
00077AA8 C403 8001                  	dc.b	nG5, $03, nRst, $01
00077AAC E10C                       	smpsAlterNote       $0C
00077AAE C70D                       	dc.b	nBb5, $0D
00077AB0 E109                       	smpsAlterNote       $09
00077AB2 E701                       	dc.b	smpsNoAttack, $01
00077AB4 E105                       	smpsAlterNote       $05
00077AB6 E701                       	dc.b	smpsNoAttack, $01
00077AB8 E109                       	smpsAlterNote       $09
00077ABA E701                       	dc.b	smpsNoAttack, $01
00077ABC E10F                       	smpsAlterNote       $0F
00077ABE E701                       	dc.b	smpsNoAttack, $01
00077AC0 E110                       	smpsAlterNote       $10
00077AC2 E701                       	dc.b	smpsNoAttack, $01
00077AC4 E10C                       	smpsAlterNote       $0C
00077AC6 E701                       	dc.b	smpsNoAttack, $01
00077AC8 E106                       	smpsAlterNote       $06
00077ACA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077ACE E109                       	smpsAlterNote       $09
00077AD0 E701                       	dc.b	smpsNoAttack, $01
00077AD2 E10F                       	smpsAlterNote       $0F
00077AD4 E701                       	dc.b	smpsNoAttack, $01
00077AD6 E110                       	smpsAlterNote       $10
00077AD8 8001                       	dc.b	nRst, $01
00077ADA E10B                       	smpsAlterNote       $0B
00077ADC C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00077AE2 E105                       	smpsAlterNote       $05
00077AE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077AE8 E108                       	smpsAlterNote       $08
00077AEA E701                       	dc.b	smpsNoAttack, $01
00077AEC E10E                       	smpsAlterNote       $0E
00077AEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077AF2 E108                       	smpsAlterNote       $08
00077AF4 E701                       	dc.b	smpsNoAttack, $01
00077AF6 E105                       	smpsAlterNote       $05
00077AF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077AFC E10B                       	smpsAlterNote       $0B
00077AFE E701                       	dc.b	smpsNoAttack, $01
00077B00 E10F                       	smpsAlterNote       $0F
00077B02 E701                       	dc.b	smpsNoAttack, $01
00077B04 E10E                       	smpsAlterNote       $0E
00077B06 E701                       	dc.b	smpsNoAttack, $01
00077B08 E108                       	smpsAlterNote       $08
00077B0A E701                       	dc.b	smpsNoAttack, $01
00077B0C E104                       	smpsAlterNote       $04
00077B0E E701                       	dc.b	smpsNoAttack, $01
00077B10 E108                       	smpsAlterNote       $08
00077B12 E701                       	dc.b	smpsNoAttack, $01
00077B14 E10B                       	smpsAlterNote       $0B
00077B16 E701                       	dc.b	smpsNoAttack, $01
00077B18 E10F                       	smpsAlterNote       $0F
00077B1A E701                       	dc.b	smpsNoAttack, $01
00077B1C E10B                       	smpsAlterNote       $0B
00077B1E E701                       	dc.b	smpsNoAttack, $01
00077B20 E105                       	smpsAlterNote       $05
00077B22 E701                       	dc.b	smpsNoAttack, $01
00077B24 E104                       	smpsAlterNote       $04
00077B26 E701                       	dc.b	smpsNoAttack, $01
00077B28 E108                       	smpsAlterNote       $08
00077B2A E701                       	dc.b	smpsNoAttack, $01
00077B2C E10E                       	smpsAlterNote       $0E
00077B2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077B32 E10B                       	smpsAlterNote       $0B
00077B34 E701                       	dc.b	smpsNoAttack, $01
00077B36 E105                       	smpsAlterNote       $05
00077B38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077B3C E10B                       	smpsAlterNote       $0B
00077B3E E701                       	dc.b	smpsNoAttack, $01
00077B40 E10E                       	smpsAlterNote       $0E
00077B42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077B46 E108                       	smpsAlterNote       $08
00077B48 E701                       	dc.b	smpsNoAttack, $01
00077B4A E104                       	smpsAlterNote       $04
00077B4C E701                       	dc.b	smpsNoAttack, $01
00077B4E E105                       	smpsAlterNote       $05
00077B50 E701                       	dc.b	smpsNoAttack, $01
00077B52 E10B                       	smpsAlterNote       $0B
00077B54 E701                       	dc.b	smpsNoAttack, $01
00077B56 E10F                       	smpsAlterNote       $0F
00077B58 E701                       	dc.b	smpsNoAttack, $01
00077B5A E10B                       	smpsAlterNote       $0B
00077B5C E701                       	dc.b	smpsNoAttack, $01
00077B5E E108                       	smpsAlterNote       $08
00077B60 E701                       	dc.b	smpsNoAttack, $01
00077B62 E104                       	smpsAlterNote       $04
00077B64 E701                       	dc.b	smpsNoAttack, $01
00077B66 E108                       	smpsAlterNote       $08
00077B68 E701                       	dc.b	smpsNoAttack, $01
00077B6A E10E                       	smpsAlterNote       $0E
00077B6C E701                       	dc.b	smpsNoAttack, $01
00077B6E E10F                       	smpsAlterNote       $0F
00077B70 E701                       	dc.b	smpsNoAttack, $01
00077B72 E10B                       	smpsAlterNote       $0B
00077B74 E701                       	dc.b	smpsNoAttack, $01
00077B76 E105                       	smpsAlterNote       $05
00077B78 E701                       	dc.b	smpsNoAttack, $01
00077B7A E10B                       	smpsAlterNote       $0B
00077B7C C60E                       	dc.b	nA5, $0E
00077B7E E105                       	smpsAlterNote       $05
00077B80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077B84 E10B                       	smpsAlterNote       $0B
00077B86 E701                       	dc.b	smpsNoAttack, $01
00077B88 E10E                       	smpsAlterNote       $0E
00077B8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077B8E E108                       	smpsAlterNote       $08
00077B90 E701                       	dc.b	smpsNoAttack, $01
00077B92 E104                       	smpsAlterNote       $04
00077B94 E701                       	dc.b	smpsNoAttack, $01
00077B96 E105                       	smpsAlterNote       $05
00077B98 E701                       	dc.b	smpsNoAttack, $01
00077B9A E10B                       	smpsAlterNote       $0B
00077B9C E701                       	dc.b	smpsNoAttack, $01
00077B9E E10F                       	smpsAlterNote       $0F
00077BA0 E701                       	dc.b	smpsNoAttack, $01
00077BA2 E10B                       	smpsAlterNote       $0B
00077BA4 E701                       	dc.b	smpsNoAttack, $01
00077BA6 E108                       	smpsAlterNote       $08
00077BA8 E701                       	dc.b	smpsNoAttack, $01
00077BAA E104                       	smpsAlterNote       $04
00077BAC E701                       	dc.b	smpsNoAttack, $01
00077BAE E108                       	smpsAlterNote       $08
00077BB0 E701                       	dc.b	smpsNoAttack, $01
00077BB2 E10E                       	smpsAlterNote       $0E
00077BB4 E701                       	dc.b	smpsNoAttack, $01
00077BB6 E10F                       	smpsAlterNote       $0F
00077BB8 E701                       	dc.b	smpsNoAttack, $01
00077BBA E10B                       	smpsAlterNote       $0B
00077BBC E701                       	dc.b	smpsNoAttack, $01
00077BBE E105                       	smpsAlterNote       $05
00077BC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077BC4 E108                       	smpsAlterNote       $08
00077BC6 E701                       	dc.b	smpsNoAttack, $01
00077BC8 E10E                       	smpsAlterNote       $0E
00077BCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077BCE E108                       	smpsAlterNote       $08
00077BD0 E701                       	dc.b	smpsNoAttack, $01
00077BD2 E105                       	smpsAlterNote       $05
00077BD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077BD8 E10B                       	smpsAlterNote       $0B
00077BDA E701                       	dc.b	smpsNoAttack, $01
00077BDC E10F                       	smpsAlterNote       $0F
00077BDE E701                       	dc.b	smpsNoAttack, $01
00077BE0 E10E                       	smpsAlterNote       $0E
00077BE2 E701                       	dc.b	smpsNoAttack, $01
00077BE4 E108                       	smpsAlterNote       $08
00077BE6 E701                       	dc.b	smpsNoAttack, $01
00077BE8 E104                       	smpsAlterNote       $04
00077BEA E701                       	dc.b	smpsNoAttack, $01
00077BEC E108                       	smpsAlterNote       $08
00077BEE E701                       	dc.b	smpsNoAttack, $01
00077BF0 E10E                       	smpsAlterNote       $0E
00077BF2 E701                       	dc.b	smpsNoAttack, $01
00077BF4 E10F                       	smpsAlterNote       $0F
00077BF6 E701                       	dc.b	smpsNoAttack, $01
00077BF8 E10B                       	smpsAlterNote       $0B
00077BFA E701                       	dc.b	smpsNoAttack, $01
00077BFC E105                       	smpsAlterNote       $05
00077BFE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077C02 E108                       	smpsAlterNote       $08
00077C04 E701                       	dc.b	smpsNoAttack, $01
00077C06 E10E                       	smpsAlterNote       $0E
00077C08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077C0C E108                       	smpsAlterNote       $08
00077C0E E701                       	dc.b	smpsNoAttack, $01
00077C10 E105                       	smpsAlterNote       $05
00077C12 E701                       	dc.b	smpsNoAttack, $01
00077C16 E10B                       	smpsAlterNote       $0B
00077C18 E6FD                       	smpsAlterVol        $FD
00077C1A C604 8001                  	dc.b	nA5, $04, nRst, $01
00077C1E E109                       	smpsAlterNote       $09
00077C20 C404                       	dc.b	nG5, $04
00077C22 E10B                       	smpsAlterNote       $0B
00077C24 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077C28 E107                       	smpsAlterNote       $07
00077C2A BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00077C30 E10B                       	smpsAlterNote       $0B
00077C32 C604                       	dc.b	nA5, $04
00077C34 E109                       	smpsAlterNote       $09
00077C36 C404 8001                  	dc.b	nG5, $04, nRst, $01
00077C3A E10B                       	smpsAlterNote       $0B
00077C3C C604                       	dc.b	nA5, $04
00077C3E E108                       	smpsAlterNote       $08
00077C40 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
00077C48 E106                       	smpsAlterNote       $06
00077C4A C904 8001                  	dc.b	nC6, $04, nRst, $01
00077C4E E10C                       	smpsAlterNote       $0C
00077C50 C704                       	dc.b	nBb5, $04
00077C52 E10B                       	smpsAlterNote       $0B
00077C54 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077C58 E109                       	smpsAlterNote       $09
00077C5A C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00077C64 E10B                       	smpsAlterNote       $0B
00077C66 C60D                       	dc.b	nA5, $0D
00077C68 E108                       	smpsAlterNote       $08
00077C6A E701                       	dc.b	smpsNoAttack, $01
00077C6C E104                       	smpsAlterNote       $04
00077C6E E701                       	dc.b	smpsNoAttack, $01
00077C70 E108                       	smpsAlterNote       $08
00077C72 E701                       	dc.b	smpsNoAttack, $01
00077C74 E10E                       	smpsAlterNote       $0E
00077C76 E701                       	dc.b	smpsNoAttack, $01
00077C78 E10F                       	smpsAlterNote       $0F
00077C7A E701                       	dc.b	smpsNoAttack, $01
00077C7C E10B                       	smpsAlterNote       $0B
00077C7E E701                       	dc.b	smpsNoAttack, $01
00077C80 E105                       	smpsAlterNote       $05
00077C82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077C86 E108                       	smpsAlterNote       $08
00077C88 E701                       	dc.b	smpsNoAttack, $01
00077C8A E10E                       	smpsAlterNote       $0E
00077C8C E701                       	dc.b	smpsNoAttack, $01
00077C8E E10F                       	smpsAlterNote       $0F
00077C90 8001                       	dc.b	nRst, $01
00077C92 E109                       	smpsAlterNote       $09
00077C94 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00077C9A E108                       	smpsAlterNote       $08
00077C9C C10D                       	dc.b	nE5, $0D
00077C9E E102                       	smpsAlterNote       $02
00077CA0 E701                       	dc.b	smpsNoAttack, $01
00077CA2 E101                       	smpsAlterNote       $01
00077CA4 E701                       	dc.b	smpsNoAttack, $01
00077CA6 E105                       	smpsAlterNote       $05
00077CA8 E701                       	dc.b	smpsNoAttack, $01
00077CAA E10B                       	smpsAlterNote       $0B
00077CAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077CB0 E108                       	smpsAlterNote       $08
00077CB2 E701                       	dc.b	smpsNoAttack, $01
00077CB4 E102                       	smpsAlterNote       $02
00077CB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077CBA E108                       	smpsAlterNote       $08
00077CBC E701                       	dc.b	smpsNoAttack, $01
00077CBE E10B                       	smpsAlterNote       $0B
00077CC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077CC4 E105                       	smpsAlterNote       $05
00077CC6 E701                       	dc.b	smpsNoAttack, $01
00077CC8 E101                       	smpsAlterNote       $01
00077CCA E701                       	dc.b	smpsNoAttack, $01
00077CCC E102                       	smpsAlterNote       $02
00077CCE E701                       	dc.b	smpsNoAttack, $01
00077CD0 E108                       	smpsAlterNote       $08
00077CD2 E701                       	dc.b	smpsNoAttack, $01
00077CD4 E10C                       	smpsAlterNote       $0C
00077CD6 E701                       	dc.b	smpsNoAttack, $01
00077CD8 E108                       	smpsAlterNote       $08
00077CDA E701                       	dc.b	smpsNoAttack, $01
00077CDC E105                       	smpsAlterNote       $05
00077CDE E701                       	dc.b	smpsNoAttack, $01
00077CE0 E101                       	smpsAlterNote       $01
00077CE2 E701                       	dc.b	smpsNoAttack, $01
00077CE4 E105                       	smpsAlterNote       $05
00077CE6 E701                       	dc.b	smpsNoAttack, $01
00077CE8 E10B                       	smpsAlterNote       $0B
00077CEA E701                       	dc.b	smpsNoAttack, $01
00077CEC E10C                       	smpsAlterNote       $0C
00077CEE E701                       	dc.b	smpsNoAttack, $01
00077CF0 E108                       	smpsAlterNote       $08
00077CF2 E701                       	dc.b	smpsNoAttack, $01
00077CF4 E102                       	smpsAlterNote       $02
00077CF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077CFA E105                       	smpsAlterNote       $05
00077CFC E701                       	dc.b	smpsNoAttack, $01
00077CFE E10B                       	smpsAlterNote       $0B
00077D00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077D04 E105                       	smpsAlterNote       $05
00077D06 E701                       	dc.b	smpsNoAttack, $01
00077D08 E102                       	smpsAlterNote       $02
00077D0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077D0E E108                       	smpsAlterNote       $08
00077D10 E701                       	dc.b	smpsNoAttack, $01
00077D12 E10C                       	smpsAlterNote       $0C
00077D14 E701                       	dc.b	smpsNoAttack, $01
00077D16 E10B                       	smpsAlterNote       $0B
00077D18 E701                       	dc.b	smpsNoAttack, $01
00077D1A E105                       	smpsAlterNote       $05
00077D1C E701                       	dc.b	smpsNoAttack, $01
00077D1E E101                       	smpsAlterNote       $01
00077D20 E701                       	dc.b	smpsNoAttack, $01
00077D22 E105                       	smpsAlterNote       $05
00077D24 E701                       	dc.b	smpsNoAttack, $01
00077D26 E108                       	smpsAlterNote       $08
00077D28 E701                       	dc.b	smpsNoAttack, $01
00077D2A E10C                       	smpsAlterNote       $0C
00077D2C E701                       	dc.b	smpsNoAttack, $01
00077D2E E108                       	smpsAlterNote       $08
00077D30 E701                       	dc.b	smpsNoAttack, $01
00077D32 E102                       	smpsAlterNote       $02
00077D34 E701                       	dc.b	smpsNoAttack, $01
00077D36 E101                       	smpsAlterNote       $01
00077D38 E701                       	dc.b	smpsNoAttack, $01
00077D3A E105                       	smpsAlterNote       $05
00077D3C E701                       	dc.b	smpsNoAttack, $01
00077D3E E10B                       	smpsAlterNote       $0B
00077D40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077D44 E108                       	smpsAlterNote       $08
00077D46 E701                       	dc.b	smpsNoAttack, $01
00077D48 E102                       	smpsAlterNote       $02
00077D4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077D4E E108                       	smpsAlterNote       $08
00077D50 E701                       	dc.b	smpsNoAttack, $01
00077D52 E10B                       	smpsAlterNote       $0B
00077D54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077D58 E105                       	smpsAlterNote       $05
00077D5A E701                       	dc.b	smpsNoAttack, $01
00077D5C E101                       	smpsAlterNote       $01
00077D5E E701                       	dc.b	smpsNoAttack, $01
00077D60 E102                       	smpsAlterNote       $02
00077D62 E701                       	dc.b	smpsNoAttack, $01
00077D64 E108                       	smpsAlterNote       $08
00077D66 E701                       	dc.b	smpsNoAttack, $01
00077D68 E10C                       	smpsAlterNote       $0C
00077D6A E701                       	dc.b	smpsNoAttack, $01
00077D6C E108                       	smpsAlterNote       $08
00077D6E E701                       	dc.b	smpsNoAttack, $01
00077D70 E105                       	smpsAlterNote       $05
00077D72 E701                       	dc.b	smpsNoAttack, $01
00077D74 E101                       	smpsAlterNote       $01
00077D76 E701                       	dc.b	smpsNoAttack, $01
00077D78 E105                       	smpsAlterNote       $05
00077D7A E701                       	dc.b	smpsNoAttack, $01
00077D7C E10B                       	smpsAlterNote       $0B
00077D7E E701                       	dc.b	smpsNoAttack, $01
00077D80 E10C                       	smpsAlterNote       $0C
00077D82 E701                       	dc.b	smpsNoAttack, $01
00077D84 E108                       	smpsAlterNote       $08
00077D86 E701                       	dc.b	smpsNoAttack, $01
00077D88 E102                       	smpsAlterNote       $02
00077D8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077D8E E105                       	smpsAlterNote       $05
00077D90 E701                       	dc.b	smpsNoAttack, $01
00077D92 E10B                       	smpsAlterNote       $0B
00077D94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077D98 E105                       	smpsAlterNote       $05
00077D9A E701                       	dc.b	smpsNoAttack, $01
00077D9C E101                       	smpsAlterNote       $01
00077D9E E701                       	dc.b	smpsNoAttack, $01
00077DA0 E102                       	smpsAlterNote       $02
00077DA2 E701                       	dc.b	smpsNoAttack, $01
00077DA4 E108                       	smpsAlterNote       $08
00077DA6 E701                       	dc.b	smpsNoAttack, $01
00077DA8 E10C                       	smpsAlterNote       $0C
00077DAA E701                       	dc.b	smpsNoAttack, $01
00077DAC E108                       	smpsAlterNote       $08
00077DAE E701                       	dc.b	smpsNoAttack, $01
00077DB0 E105                       	smpsAlterNote       $05
00077DB2 E701                       	dc.b	smpsNoAttack, $01
00077DB4 E101                       	smpsAlterNote       $01
00077DB6 E701                       	dc.b	smpsNoAttack, $01
00077DB8 E105                       	smpsAlterNote       $05
00077DBA E701                       	dc.b	smpsNoAttack, $01
00077DBC E10B                       	smpsAlterNote       $0B
00077DBE E701                       	dc.b	smpsNoAttack, $01
00077DC0 E10C                       	smpsAlterNote       $0C
00077DC2 E701                       	dc.b	smpsNoAttack, $01
00077DC4 E108                       	smpsAlterNote       $08
00077DC6 E701                       	dc.b	smpsNoAttack, $01
00077DC8 E102                       	smpsAlterNote       $02
00077DCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077DCE E105                       	smpsAlterNote       $05
00077DD0 E701                       	dc.b	smpsNoAttack, $01
00077DD2 E10B                       	smpsAlterNote       $0B
00077DD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077DD8 E105                       	smpsAlterNote       $05
00077DDA E701                       	dc.b	smpsNoAttack, $01
00077DDC E102                       	smpsAlterNote       $02
00077DDE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077DE2 E108                       	smpsAlterNote       $08
00077DE4 E701                       	dc.b	smpsNoAttack, $01
00077DE6 E10C                       	smpsAlterNote       $0C
00077DE8 E701                       	dc.b	smpsNoAttack, $01
00077DEA E10B                       	smpsAlterNote       $0B
00077DEC E701                       	dc.b	smpsNoAttack, $01
00077DEE E105                       	smpsAlterNote       $05
00077DF0 E701                       	dc.b	smpsNoAttack, $01
00077DF2 E101                       	smpsAlterNote       $01
00077DF4 E701                       	dc.b	smpsNoAttack, $01
00077DF6 E105                       	smpsAlterNote       $05
00077DF8 E701                       	dc.b	smpsNoAttack, $01
00077DFA E108                       	smpsAlterNote       $08
00077DFC E701                       	dc.b	smpsNoAttack, $01
00077DFE E10C                       	smpsAlterNote       $0C
00077E00 E701                       	dc.b	smpsNoAttack, $01
00077E04 E10B                       	smpsAlterNote       $0B
00077E06 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077E0A E109                       	smpsAlterNote       $09
00077E0C C404                       	dc.b	nG5, $04
00077E0E E10B                       	smpsAlterNote       $0B
00077E10 C604 8001                  	dc.b	nA5, $04, nRst, $01
00077E14 E107                       	smpsAlterNote       $07
00077E16 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
00077E1C E10B                       	smpsAlterNote       $0B
00077E1E C604                       	dc.b	nA5, $04
00077E20 E109                       	smpsAlterNote       $09
00077E22 C404 8001                  	dc.b	nG5, $04, nRst, $01
00077E26 E10B                       	smpsAlterNote       $0B
00077E28 C604                       	dc.b	nA5, $04
00077E2A E108                       	smpsAlterNote       $08
00077E2C C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
00077E32 E106                       	smpsAlterNote       $06
00077E34 C904 8001                  	dc.b	nC6, $04, nRst, $01
00077E38 E10C                       	smpsAlterNote       $0C
00077E3A C704                       	dc.b	nBb5, $04
00077E3C E10B                       	smpsAlterNote       $0B
00077E3E C604 8001                  	dc.b	nA5, $04, nRst, $01
00077E42 E109                       	smpsAlterNote       $09
00077E44 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
00077E4E E10B                       	smpsAlterNote       $0B
00077E50 C60D                       	dc.b	nA5, $0D
00077E52 E108                       	smpsAlterNote       $08
00077E54 E701                       	dc.b	smpsNoAttack, $01
00077E56 E104                       	smpsAlterNote       $04
00077E58 E701                       	dc.b	smpsNoAttack, $01
00077E5A E108                       	smpsAlterNote       $08
00077E5C E701                       	dc.b	smpsNoAttack, $01
00077E5E E10B                       	smpsAlterNote       $0B
00077E60 E701                       	dc.b	smpsNoAttack, $01
00077E62 E10F                       	smpsAlterNote       $0F
00077E64 E701                       	dc.b	smpsNoAttack, $01
00077E66 E10B                       	smpsAlterNote       $0B
00077E68 E701                       	dc.b	smpsNoAttack, $01
00077E6A E105                       	smpsAlterNote       $05
00077E6C E701                       	dc.b	smpsNoAttack, $01
00077E6E E104                       	smpsAlterNote       $04
00077E70 E701                       	dc.b	smpsNoAttack, $01
00077E72 E108                       	smpsAlterNote       $08
00077E74 E701                       	dc.b	smpsNoAttack, $01
00077E76 E10E                       	smpsAlterNote       $0E
00077E78 E701                       	dc.b	smpsNoAttack, $01
00077E7A E10F                       	smpsAlterNote       $0F
00077E7C 8001                       	dc.b	nRst, $01
00077E7E E109                       	smpsAlterNote       $09
00077E80 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00077E86 E108                       	smpsAlterNote       $08
00077E88 C10D                       	dc.b	nE5, $0D
00077E8A E105                       	smpsAlterNote       $05
00077E8C E701                       	dc.b	smpsNoAttack, $01
00077E8E E101                       	smpsAlterNote       $01
00077E90 E701                       	dc.b	smpsNoAttack, $01
00077E92 E105                       	smpsAlterNote       $05
00077E94 E701                       	dc.b	smpsNoAttack, $01
00077E96 E10B                       	smpsAlterNote       $0B
00077E98 E701                       	dc.b	smpsNoAttack, $01
00077E9A E10C                       	smpsAlterNote       $0C
00077E9C E701                       	dc.b	smpsNoAttack, $01
00077E9E E108                       	smpsAlterNote       $08
00077EA0 E701                       	dc.b	smpsNoAttack, $01
00077EA2 E102                       	smpsAlterNote       $02
00077EA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077EA8 E105                       	smpsAlterNote       $05
00077EAA E701                       	dc.b	smpsNoAttack, $01
00077EAC E10B                       	smpsAlterNote       $0B
00077EAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077EB2 E105                       	smpsAlterNote       $05
00077EB4 E701                       	dc.b	smpsNoAttack, $01
00077EB6 E102                       	smpsAlterNote       $02
00077EB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077EBC E108                       	smpsAlterNote       $08
00077EBE E701                       	dc.b	smpsNoAttack, $01
00077EC0 E10C                       	smpsAlterNote       $0C
00077EC2 E701                       	dc.b	smpsNoAttack, $01
00077EC4 E10B                       	smpsAlterNote       $0B
00077EC6 E701                       	dc.b	smpsNoAttack, $01
00077EC8 E105                       	smpsAlterNote       $05
00077ECA E701                       	dc.b	smpsNoAttack, $01
00077ECC E101                       	smpsAlterNote       $01
00077ECE E701                       	dc.b	smpsNoAttack, $01
00077ED0 E105                       	smpsAlterNote       $05
00077ED2 E701                       	dc.b	smpsNoAttack, $01
00077ED4 E108                       	smpsAlterNote       $08
00077ED6 E701                       	dc.b	smpsNoAttack, $01
00077ED8 E10C                       	smpsAlterNote       $0C
00077EDA E701                       	dc.b	smpsNoAttack, $01
00077EDC E108                       	smpsAlterNote       $08
00077EDE E701                       	dc.b	smpsNoAttack, $01
00077EE0 E102                       	smpsAlterNote       $02
00077EE2 E701                       	dc.b	smpsNoAttack, $01
00077EE4 E101                       	smpsAlterNote       $01
00077EE6 E701                       	dc.b	smpsNoAttack, $01
00077EE8 E105                       	smpsAlterNote       $05
00077EEA E701                       	dc.b	smpsNoAttack, $01
00077EEC E10B                       	smpsAlterNote       $0B
00077EEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077EF2 E108                       	smpsAlterNote       $08
00077EF4 E701                       	dc.b	smpsNoAttack, $01
00077EF6 E102                       	smpsAlterNote       $02
00077EF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077EFC E108                       	smpsAlterNote       $08
00077EFE E701                       	dc.b	smpsNoAttack, $01
00077F00 E10B                       	smpsAlterNote       $0B
00077F02 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077F06 E105                       	smpsAlterNote       $05
00077F08 E701                       	dc.b	smpsNoAttack, $01
00077F0A E101                       	smpsAlterNote       $01
00077F0C E701                       	dc.b	smpsNoAttack, $01
00077F0E E102                       	smpsAlterNote       $02
00077F10 E701                       	dc.b	smpsNoAttack, $01
00077F12 E108                       	smpsAlterNote       $08
00077F14 E701                       	dc.b	smpsNoAttack, $01
00077F16 E10C                       	smpsAlterNote       $0C
00077F18 E701                       	dc.b	smpsNoAttack, $01
00077F1A E108                       	smpsAlterNote       $08
00077F1C E701                       	dc.b	smpsNoAttack, $01
00077F1E E105                       	smpsAlterNote       $05
00077F20 E701                       	dc.b	smpsNoAttack, $01
00077F22 E101                       	smpsAlterNote       $01
00077F24 E701                       	dc.b	smpsNoAttack, $01
00077F26 E105                       	smpsAlterNote       $05
00077F28 E701                       	dc.b	smpsNoAttack, $01
00077F2A E10B                       	smpsAlterNote       $0B
00077F2C E701                       	dc.b	smpsNoAttack, $01
00077F2E E10C                       	smpsAlterNote       $0C
00077F30 E701                       	dc.b	smpsNoAttack, $01
00077F32 E108                       	smpsAlterNote       $08
00077F34 E701                       	dc.b	smpsNoAttack, $01
00077F36 E102                       	smpsAlterNote       $02
00077F38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077F3C E108                       	smpsAlterNote       $08
00077F3E E701                       	dc.b	smpsNoAttack, $01
00077F40 E10B                       	smpsAlterNote       $0B
00077F42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077F46 E105                       	smpsAlterNote       $05
00077F48 E701                       	dc.b	smpsNoAttack, $01
00077F4A E101                       	smpsAlterNote       $01
00077F4C E701                       	dc.b	smpsNoAttack, $01
00077F4E E102                       	smpsAlterNote       $02
00077F50 E701                       	dc.b	smpsNoAttack, $01
00077F52 E108                       	smpsAlterNote       $08
00077F54 E701                       	dc.b	smpsNoAttack, $01
00077F56 E10C                       	smpsAlterNote       $0C
00077F58 E701                       	dc.b	smpsNoAttack, $01
00077F5A E108                       	smpsAlterNote       $08
00077F5C E701                       	dc.b	smpsNoAttack, $01
00077F5E E105                       	smpsAlterNote       $05
00077F60 E701                       	dc.b	smpsNoAttack, $01
00077F62 E101                       	smpsAlterNote       $01
00077F64 E701                       	dc.b	smpsNoAttack, $01
00077F66 E105                       	smpsAlterNote       $05
00077F68 E701                       	dc.b	smpsNoAttack, $01
00077F6A E10B                       	smpsAlterNote       $0B
00077F6C E701                       	dc.b	smpsNoAttack, $01
00077F6E E10C                       	smpsAlterNote       $0C
00077F70 E701                       	dc.b	smpsNoAttack, $01
00077F72 E108                       	smpsAlterNote       $08
00077F74 E701                       	dc.b	smpsNoAttack, $01
00077F76 E102                       	smpsAlterNote       $02
00077F78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077F7C E105                       	smpsAlterNote       $05
00077F7E E701                       	dc.b	smpsNoAttack, $01
00077F80 E10B                       	smpsAlterNote       $0B
00077F82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077F86 E105                       	smpsAlterNote       $05
00077F88 E701                       	dc.b	smpsNoAttack, $01
00077F8A E102                       	smpsAlterNote       $02
00077F8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077F90 E108                       	smpsAlterNote       $08
00077F92 E701                       	dc.b	smpsNoAttack, $01
00077F94 E10C                       	smpsAlterNote       $0C
00077F96 E701                       	dc.b	smpsNoAttack, $01
00077F98 E10B                       	smpsAlterNote       $0B
00077F9A E701                       	dc.b	smpsNoAttack, $01
00077F9C E105                       	smpsAlterNote       $05
00077F9E E701                       	dc.b	smpsNoAttack, $01
00077FA0 E101                       	smpsAlterNote       $01
00077FA2 E701                       	dc.b	smpsNoAttack, $01
00077FA4 E105                       	smpsAlterNote       $05
00077FA6 E701                       	dc.b	smpsNoAttack, $01
00077FA8 E108                       	smpsAlterNote       $08
00077FAA E701                       	dc.b	smpsNoAttack, $01
00077FAC E10C                       	smpsAlterNote       $0C
00077FAE E701                       	dc.b	smpsNoAttack, $01
00077FB0 E108                       	smpsAlterNote       $08
00077FB2 E701                       	dc.b	smpsNoAttack, $01
00077FB4 E102                       	smpsAlterNote       $02
00077FB6 E701                       	dc.b	smpsNoAttack, $01
00077FB8 E101                       	smpsAlterNote       $01
00077FBA E701                       	dc.b	smpsNoAttack, $01
00077FBC E105                       	smpsAlterNote       $05
00077FBE E701                       	dc.b	smpsNoAttack, $01
00077FC0 E10B                       	smpsAlterNote       $0B
00077FC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077FC6 E108                       	smpsAlterNote       $08
00077FC8 E701                       	dc.b	smpsNoAttack, $01
00077FCA E102                       	smpsAlterNote       $02
00077FCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077FD0 E108                       	smpsAlterNote       $08
00077FD2 E701                       	dc.b	smpsNoAttack, $01
00077FD4 E10B                       	smpsAlterNote       $0B
00077FD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077FDA E105                       	smpsAlterNote       $05
00077FDC E701                       	dc.b	smpsNoAttack, $01
00077FDE E102                       	smpsAlterNote       $02
00077FE0 8001                       	dc.b	nRst, $01
00077FE2 E107                       	smpsAlterNote       $07
00077FE4 BF01 8001                  	dc.b	nD5, $01, nRst, $01
00077FE8 E108                       	smpsAlterNote       $08
00077FEA C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
00077FEE E102                       	smpsAlterNote       $02
00077FF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077FF4 E108                       	smpsAlterNote       $08
00077FF6 E701                       	dc.b	smpsNoAttack, $01
00077FF8 E10B                       	smpsAlterNote       $0B
00077FFA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00077FFE E105                       	smpsAlterNote       $05
00078000 E701                       	dc.b	smpsNoAttack, $01
00078002 E101                       	smpsAlterNote       $01
00078004 E701                       	dc.b	smpsNoAttack, $01
00078006 E102                       	smpsAlterNote       $02
00078008 E701                       	dc.b	smpsNoAttack, $01
0007800A E108                       	smpsAlterNote       $08
0007800C E701                       	dc.b	smpsNoAttack, $01
0007800E E10C                       	smpsAlterNote       $0C
00078010 E701                       	dc.b	smpsNoAttack, $01
00078012 E108                       	smpsAlterNote       $08
00078014 E701                       	dc.b	smpsNoAttack, $01
00078016 E105                       	smpsAlterNote       $05
00078018 E701                       	dc.b	smpsNoAttack, $01
0007801A E101                       	smpsAlterNote       $01
0007801C E701                       	dc.b	smpsNoAttack, $01
0007801E E105                       	smpsAlterNote       $05
00078020 E701                       	dc.b	smpsNoAttack, $01
00078022 E10B                       	smpsAlterNote       $0B
00078024 E701                       	dc.b	smpsNoAttack, $01
00078026 E10C                       	smpsAlterNote       $0C
00078028 E701                       	dc.b	smpsNoAttack, $01
0007802A E108                       	smpsAlterNote       $08
0007802C E701                       	dc.b	smpsNoAttack, $01
0007802E E102                       	smpsAlterNote       $02
00078030 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078034 E105                       	smpsAlterNote       $05
00078036 E701                       	dc.b	smpsNoAttack, $01
00078038 E10B                       	smpsAlterNote       $0B
0007803A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007803E E105                       	smpsAlterNote       $05
00078040 E701                       	dc.b	smpsNoAttack, $01
00078042 E102                       	smpsAlterNote       $02
00078044 E701                       	dc.b	smpsNoAttack, $01
00078046 E109                       	smpsAlterNote       $09
00078048 C40A C207                  	dc.b	nG5, $0A, nF5, $07
0007804C E108                       	smpsAlterNote       $08
0007804E C10D                       	dc.b	nE5, $0D
00078050 E105                       	smpsAlterNote       $05
00078052 E701                       	dc.b	smpsNoAttack, $01
00078054 E101                       	smpsAlterNote       $01
00078056 E701                       	dc.b	smpsNoAttack, $01
00078058 E102                       	smpsAlterNote       $02
0007805A E701                       	dc.b	smpsNoAttack, $01
0007805C E108                       	smpsAlterNote       $08
0007805E E701                       	dc.b	smpsNoAttack, $01
00078060 E10C                       	smpsAlterNote       $0C
00078062 E701                       	dc.b	smpsNoAttack, $01
00078064 E108                       	smpsAlterNote       $08
00078066 E701                       	dc.b	smpsNoAttack, $01
00078068 E105                       	smpsAlterNote       $05
0007806A E701                       	dc.b	smpsNoAttack, $01
0007806C E101                       	smpsAlterNote       $01
0007806E E701                       	dc.b	smpsNoAttack, $01
00078070 E105                       	smpsAlterNote       $05
00078072 E701                       	dc.b	smpsNoAttack, $01
00078074 E10B                       	smpsAlterNote       $0B
00078076 E701                       	dc.b	smpsNoAttack, $01
00078078 E10C                       	smpsAlterNote       $0C
0007807A E701                       	dc.b	smpsNoAttack, $01
0007807C E108                       	smpsAlterNote       $08
0007807E E701                       	dc.b	smpsNoAttack, $01
00078080 E102                       	smpsAlterNote       $02
00078082 E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
0007808A E10B                       	smpsAlterNote       $0B
0007808C BA01 8001                  	dc.b	nA4, $01, nRst, $01
00078090 E10C                       	smpsAlterNote       $0C
00078092 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00078096 E10B                       	smpsAlterNote       $0B
00078098 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
0007809E E107                       	smpsAlterNote       $07
000780A0 BF03                       	dc.b	nD5, $03
000780A2 E108                       	smpsAlterNote       $08
000780A4 C103 8001                  	dc.b	nE5, $03, nRst, $01
000780A8 E109                       	smpsAlterNote       $09
000780AA C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000780B0 E10B                       	smpsAlterNote       $0B
000780B2 C606 8001                  	dc.b	nA5, $06, nRst, $01
000780B6 E107                       	smpsAlterNote       $07
000780B8 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000780BC E106                       	smpsAlterNote       $06
000780BE C90D                       	dc.b	nC6, $0D
000780C0 E103                       	smpsAlterNote       $03
000780C2 E701                       	dc.b	smpsNoAttack, $01
000780C4 E1FF                       	smpsAlterNote       $FF
000780C6 E701                       	dc.b	smpsNoAttack, $01
000780C8 E103                       	smpsAlterNote       $03
000780CA E701                       	dc.b	smpsNoAttack, $01
000780CC E109                       	smpsAlterNote       $09
000780CE E701                       	dc.b	smpsNoAttack, $01
000780D0 E10A                       	smpsAlterNote       $0A
000780D2 E701                       	dc.b	smpsNoAttack, $01
000780D4 E106                       	smpsAlterNote       $06
000780D6 E701                       	dc.b	smpsNoAttack, $01
000780D8 E100                       	smpsAlterNote       $00
000780DA E701                       	dc.b	smpsNoAttack, $01
000780DC E10C                       	smpsAlterNote       $0C
000780DE C703 8001                  	dc.b	nBb5, $03, nRst, $01
000780E2 E10B                       	smpsAlterNote       $0B
000780E4 C603                       	dc.b	nA5, $03
000780E6 E109                       	smpsAlterNote       $09
000780E8 C403 8001                  	dc.b	nG5, $03, nRst, $01
000780EC E10B                       	smpsAlterNote       $0B
000780EE C60D                       	dc.b	nA5, $0D
000780F0 E105                       	smpsAlterNote       $05
000780F2 E701                       	dc.b	smpsNoAttack, $01
000780F4 E104                       	smpsAlterNote       $04
000780F6 E701                       	dc.b	smpsNoAttack, $01
000780F8 E108                       	smpsAlterNote       $08
000780FA E701                       	dc.b	smpsNoAttack, $01
000780FC E10E                       	smpsAlterNote       $0E
000780FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078102 E10B                       	smpsAlterNote       $0B
00078104 E701                       	dc.b	smpsNoAttack, $01
00078106 E105                       	smpsAlterNote       $05
00078108 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007810C E10B                       	smpsAlterNote       $0B
0007810E E701                       	dc.b	smpsNoAttack, $01
00078110 E10E                       	smpsAlterNote       $0E
00078112 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078116 E108                       	smpsAlterNote       $08
00078118 E701                       	dc.b	smpsNoAttack, $01
0007811A E104                       	smpsAlterNote       $04
0007811C E701                       	dc.b	smpsNoAttack, $01
0007811E E105                       	smpsAlterNote       $05
00078120 E701                       	dc.b	smpsNoAttack, $01
00078122 E10B                       	smpsAlterNote       $0B
00078124 E701                       	dc.b	smpsNoAttack, $01
00078126 E10F                       	smpsAlterNote       $0F
00078128 E701                       	dc.b	smpsNoAttack, $01
0007812A E10B                       	smpsAlterNote       $0B
0007812C E701                       	dc.b	smpsNoAttack, $01
0007812E E108                       	smpsAlterNote       $08
00078130 E701                       	dc.b	smpsNoAttack, $01
00078132 E104                       	smpsAlterNote       $04
00078134 E701                       	dc.b	smpsNoAttack, $01
00078136 E108                       	smpsAlterNote       $08
00078138 E701                       	dc.b	smpsNoAttack, $01
0007813A E10E                       	smpsAlterNote       $0E
0007813C E701                       	dc.b	smpsNoAttack, $01
0007813E E10F                       	smpsAlterNote       $0F
00078140 E701                       	dc.b	smpsNoAttack, $01
00078142 E10B                       	smpsAlterNote       $0B
00078144 E701                       	dc.b	smpsNoAttack, $01
00078146 E105                       	smpsAlterNote       $05
00078148 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007814C E108                       	smpsAlterNote       $08
0007814E E701                       	dc.b	smpsNoAttack, $01
00078150 E10E                       	smpsAlterNote       $0E
00078152 E701                       	dc.b	smpsNoAttack, $01
00078154 E10F                       	smpsAlterNote       $0F
00078156 800F                       	dc.b	nRst, $0F
00078158 E107                       	smpsAlterNote       $07
0007815A BF02 8001                  	dc.b	nD5, $02, nRst, $01
0007815E E108                       	smpsAlterNote       $08
00078160 C103                       	dc.b	nE5, $03
00078162 E109                       	smpsAlterNote       $09
00078164 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
0007816A E10B                       	smpsAlterNote       $0B
0007816C C607                       	dc.b	nA5, $07
0007816E E107                       	smpsAlterNote       $07
00078170 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00078174 E106                       	smpsAlterNote       $06
00078176 C90D                       	dc.b	nC6, $0D
00078178 E107                       	smpsAlterNote       $07
0007817A CB03 8001                  	dc.b	nD6, $03, nRst, $01
0007817E E10C                       	smpsAlterNote       $0C
00078180 C704                       	dc.b	nBb5, $04
00078182 E10B                       	smpsAlterNote       $0B
00078184 C604 8001                  	dc.b	nA5, $04, nRst, $01
00078188 E109                       	smpsAlterNote       $09
0007818A C404                       	dc.b	nG5, $04
0007818C E10B                       	smpsAlterNote       $0B
0007818E C60D                       	dc.b	nA5, $0D
00078190 E108                       	smpsAlterNote       $08
00078192 E701                       	dc.b	smpsNoAttack, $01
00078194 E105                       	smpsAlterNote       $05
00078196 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007819A E10B                       	smpsAlterNote       $0B
0007819C E701                       	dc.b	smpsNoAttack, $01
0007819E E10F                       	smpsAlterNote       $0F
000781A0 E701                       	dc.b	smpsNoAttack, $01
000781A2 E10E                       	smpsAlterNote       $0E
000781A4 E701                       	dc.b	smpsNoAttack, $01
000781A6 E108                       	smpsAlterNote       $08
000781A8 E701                       	dc.b	smpsNoAttack, $01
000781AA E104                       	smpsAlterNote       $04
000781AC E701                       	dc.b	smpsNoAttack, $01
000781AE E108                       	smpsAlterNote       $08
000781B0 E701                       	dc.b	smpsNoAttack, $01
000781B2 E10B                       	smpsAlterNote       $0B
000781B4 E701                       	dc.b	smpsNoAttack, $01
000781B6 E10F                       	smpsAlterNote       $0F
000781B8 E701                       	dc.b	smpsNoAttack, $01
000781BA E10B                       	smpsAlterNote       $0B
000781BC E701                       	dc.b	smpsNoAttack, $01
000781BE E105                       	smpsAlterNote       $05
000781C0 E701                       	dc.b	smpsNoAttack, $01
000781C2 E104                       	smpsAlterNote       $04
000781C4 E701                       	dc.b	smpsNoAttack, $01
000781C6 E108                       	smpsAlterNote       $08
000781C8 E701                       	dc.b	smpsNoAttack, $01
000781CA E10E                       	smpsAlterNote       $0E
000781CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000781D0 E10B                       	smpsAlterNote       $0B
000781D2 E701                       	dc.b	smpsNoAttack, $01
000781D4 E105                       	smpsAlterNote       $05
000781D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000781DA E10B                       	smpsAlterNote       $0B
000781DC E701                       	dc.b	smpsNoAttack, $01
000781DE E10E                       	smpsAlterNote       $0E
000781E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000781E4 E108                       	smpsAlterNote       $08
000781E6 E701                       	dc.b	smpsNoAttack, $01
000781E8 E105                       	smpsAlterNote       $05
000781EA 8001                       	dc.b	nRst, $01
000781EC E109                       	smpsAlterNote       $09
000781EE C401 8001                  	dc.b	nG5, $01, nRst, $01
000781F2 E10B                       	smpsAlterNote       $0B
000781F4 C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000781FC E109                       	smpsAlterNote       $09
000781FE C404                       	dc.b	nG5, $04
00078200 E10B                       	smpsAlterNote       $0B
00078202 C604 8001                  	dc.b	nA5, $04, nRst, $01
00078206 E107                       	smpsAlterNote       $07
00078208 BF0D                       	dc.b	nD5, $0D
0007820A E101                       	smpsAlterNote       $01
0007820C E701                       	dc.b	smpsNoAttack, $01
0007820E E100                       	smpsAlterNote       $00
00078210 E701                       	dc.b	smpsNoAttack, $01
00078212 E104                       	smpsAlterNote       $04
00078214 E701                       	dc.b	smpsNoAttack, $01
00078216 E10A                       	smpsAlterNote       $0A
00078218 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007821C E107                       	smpsAlterNote       $07
0007821E E701                       	dc.b	smpsNoAttack, $01
00078220 E101                       	smpsAlterNote       $01
00078222 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078226 E107                       	smpsAlterNote       $07
00078228 E701                       	dc.b	smpsNoAttack, $01
0007822A E10A                       	smpsAlterNote       $0A
0007822C E701                       	dc.b	smpsNoAttack, $01
0007822E E10B                       	smpsAlterNote       $0B
00078230 8001                       	dc.b	nRst, $01
00078232 E108                       	smpsAlterNote       $08
00078234 8001                       	dc.b	nRst, $01
00078236 E109                       	smpsAlterNote       $09
00078238 8001 C401                  	dc.b	nRst, $01, nG5, $01
0007823C E10B                       	smpsAlterNote       $0B
0007823E C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
00078246 E108                       	smpsAlterNote       $08
00078248 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0007824C E109                       	smpsAlterNote       $09
0007824E CE06 8001                  	dc.b	nF6, $06, nRst, $01
00078252 E108                       	smpsAlterNote       $08
00078254 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00078258 E106                       	smpsAlterNote       $06
0007825A C903                       	dc.b	nC6, $03
0007825C E109                       	smpsAlterNote       $09
0007825E C403 8001                  	dc.b	nG5, $03, nRst, $01
00078262 E10C                       	smpsAlterNote       $0C
00078264 C70D                       	dc.b	nBb5, $0D
00078266 E109                       	smpsAlterNote       $09
00078268 E701                       	dc.b	smpsNoAttack, $01
0007826A E105                       	smpsAlterNote       $05
0007826C E701                       	dc.b	smpsNoAttack, $01
0007826E E109                       	smpsAlterNote       $09
00078270 E701                       	dc.b	smpsNoAttack, $01
00078272 E10F                       	smpsAlterNote       $0F
00078274 E701                       	dc.b	smpsNoAttack, $01
00078276 E110                       	smpsAlterNote       $10
00078278 E701                       	dc.b	smpsNoAttack, $01
0007827A E10C                       	smpsAlterNote       $0C
0007827C E701                       	dc.b	smpsNoAttack, $01
0007827E E106                       	smpsAlterNote       $06
00078280 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078284 E109                       	smpsAlterNote       $09
00078286 E701                       	dc.b	smpsNoAttack, $01
00078288 E10F                       	smpsAlterNote       $0F
0007828A E701                       	dc.b	smpsNoAttack, $01
0007828C E110                       	smpsAlterNote       $10
0007828E 8001                       	dc.b	nRst, $01
00078290 E10B                       	smpsAlterNote       $0B
00078292 C606 8001                  	dc.b	nA5, $06, nRst, $01
00078296 E109                       	smpsAlterNote       $09
00078298 C40D                       	dc.b	nG5, $0D
0007829A E103                       	smpsAlterNote       $03
0007829C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000782A0 E106                       	smpsAlterNote       $06
000782A2 E701                       	dc.b	smpsNoAttack, $01
000782A4 E10C                       	smpsAlterNote       $0C
000782A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000782AA E106                       	smpsAlterNote       $06
000782AC E701                       	dc.b	smpsNoAttack, $01
000782AE E103                       	smpsAlterNote       $03
000782B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000782B4 E109                       	smpsAlterNote       $09
000782B6 E701                       	dc.b	smpsNoAttack, $01
000782B8 E10D                       	smpsAlterNote       $0D
000782BA E701                       	dc.b	smpsNoAttack, $01
000782BC E10C                       	smpsAlterNote       $0C
000782BE E701                       	dc.b	smpsNoAttack, $01
000782C0 E106                       	smpsAlterNote       $06
000782C2 E701                       	dc.b	smpsNoAttack, $01
000782C4 E102                       	smpsAlterNote       $02
000782C6 E701                       	dc.b	smpsNoAttack, $01
000782C8 E103                       	smpsAlterNote       $03
000782CA 8001                       	dc.b	nRst, $01
000782CC E10B                       	smpsAlterNote       $0B
000782CE C60D                       	dc.b	nA5, $0D
000782D0 E108                       	smpsAlterNote       $08
000782D2 E701                       	dc.b	smpsNoAttack, $01
000782D4 E104                       	smpsAlterNote       $04
000782D6 E701                       	dc.b	smpsNoAttack, $01
000782D8 E108                       	smpsAlterNote       $08
000782DA E701                       	dc.b	smpsNoAttack, $01
000782DC E10B                       	smpsAlterNote       $0B
000782DE E701                       	dc.b	smpsNoAttack, $01
000782E0 E10F                       	smpsAlterNote       $0F
000782E2 E701                       	dc.b	smpsNoAttack, $01
000782E4 E10B                       	smpsAlterNote       $0B
000782E6 E701                       	dc.b	smpsNoAttack, $01
000782E8 E105                       	smpsAlterNote       $05
000782EA E701                       	dc.b	smpsNoAttack, $01
000782EC E104                       	smpsAlterNote       $04
000782EE E701                       	dc.b	smpsNoAttack, $01
000782F0 E108                       	smpsAlterNote       $08
000782F2 E701                       	dc.b	smpsNoAttack, $01
000782F4 E10E                       	smpsAlterNote       $0E
000782F6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000782FA E10B                       	smpsAlterNote       $0B
000782FC E701                       	dc.b	smpsNoAttack, $01
000782FE E105                       	smpsAlterNote       $05
00078300 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078304 E10C                       	smpsAlterNote       $0C
00078306 C70E                       	dc.b	nBb5, $0E
00078308 E106                       	smpsAlterNote       $06
0007830A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007830E E10C                       	smpsAlterNote       $0C
00078310 E701                       	dc.b	smpsNoAttack, $01
00078312 E10F                       	smpsAlterNote       $0F
00078314 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078318 E109                       	smpsAlterNote       $09
0007831A E701                       	dc.b	smpsNoAttack, $01
0007831C E105                       	smpsAlterNote       $05
0007831E E701                       	dc.b	smpsNoAttack, $01
00078320 E106                       	smpsAlterNote       $06
00078322 E701                       	dc.b	smpsNoAttack, $01
00078324 E10C                       	smpsAlterNote       $0C
00078326 E701                       	dc.b	smpsNoAttack, $01
00078328 E110                       	smpsAlterNote       $10
0007832A E701                       	dc.b	smpsNoAttack, $01
0007832C E10C                       	smpsAlterNote       $0C
0007832E E701                       	dc.b	smpsNoAttack, $01
00078330 E109                       	smpsAlterNote       $09
00078332 E701                       	dc.b	smpsNoAttack, $01
00078334 E105                       	smpsAlterNote       $05
00078336 E701                       	dc.b	smpsNoAttack, $01
00078338 E106                       	smpsAlterNote       $06
0007833A 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
0007833E E107                       	smpsAlterNote       $07
00078340 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
00078345 E108                       	smpsAlterNote       $08
00078347 CD0D                       	dc.b	nE6, $0D
00078349 E107                       	smpsAlterNote       $07
0007834B CB0D                       	dc.b	nD6, $0D
0007834D E104                       	smpsAlterNote       $04
0007834F E701                       	dc.b	smpsNoAttack, $01
00078351 E100                       	smpsAlterNote       $00
00078353 E701                       	dc.b	smpsNoAttack, $01
00078355 E101                       	smpsAlterNote       $01
00078357 E701                       	dc.b	smpsNoAttack, $01
00078359 E107                       	smpsAlterNote       $07
0007835B E701                       	dc.b	smpsNoAttack, $01
0007835D E10B                       	smpsAlterNote       $0B
0007835F E701                       	dc.b	smpsNoAttack, $01
00078361 E107                       	smpsAlterNote       $07
00078363 E701                       	dc.b	smpsNoAttack, $01
00078365 E104                       	smpsAlterNote       $04
00078367 E701                       	dc.b	smpsNoAttack, $01
00078369 E100                       	smpsAlterNote       $00
0007836B E701                       	dc.b	smpsNoAttack, $01
0007836D E104                       	smpsAlterNote       $04
0007836F E701                       	dc.b	smpsNoAttack, $01
00078371 E10A                       	smpsAlterNote       $0A
00078373 E701                       	dc.b	smpsNoAttack, $01
00078375 E10B                       	smpsAlterNote       $0B
00078377 E701                       	dc.b	smpsNoAttack, $01
00078379 E108                       	smpsAlterNote       $08
0007837B CC0D                       	dc.b	nEb6, $0D
0007837D E105                       	smpsAlterNote       $05
0007837F E701                       	dc.b	smpsNoAttack, $01
00078381 E101                       	smpsAlterNote       $01
00078383 E701                       	dc.b	smpsNoAttack, $01
00078385 E102                       	smpsAlterNote       $02
00078387 E701                       	dc.b	smpsNoAttack, $01
00078389 E108                       	smpsAlterNote       $08
0007838B E701                       	dc.b	smpsNoAttack, $01
0007838D E106                       	smpsAlterNote       $06
0007838F C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
0007839B 8001                       	dc.b	nRst, $01
0007839D E107                       	smpsAlterNote       $07
0007839F CB0D                       	dc.b	nD6, $0D
000783A1 E104                       	smpsAlterNote       $04
000783A3 E701                       	dc.b	smpsNoAttack, $01
000783A5 E100                       	smpsAlterNote       $00
000783A7 E701                       	dc.b	smpsNoAttack, $01
000783A9 E104                       	smpsAlterNote       $04
000783AB E701                       	dc.b	smpsNoAttack, $01
000783AD E107                       	smpsAlterNote       $07
000783AF E701                       	dc.b	smpsNoAttack, $01
000783B1 E10B                       	smpsAlterNote       $0B
000783B3 E701                       	dc.b	smpsNoAttack, $01
000783B5 E107                       	smpsAlterNote       $07
000783B7 E701                       	dc.b	smpsNoAttack, $01
000783B9 E101                       	smpsAlterNote       $01
000783BB E701                       	dc.b	smpsNoAttack, $01
000783BD E100                       	smpsAlterNote       $00
000783BF E701                       	dc.b	smpsNoAttack, $01
000783C1 E104                       	smpsAlterNote       $04
000783C3 E701                       	dc.b	smpsNoAttack, $01
000783C5 E10A                       	smpsAlterNote       $0A
000783C7 E701                       	dc.b	smpsNoAttack, $01
000783C9 E10B                       	smpsAlterNote       $0B
000783CB 8001                       	dc.b	nRst, $01
000783CD E109                       	smpsAlterNote       $09
000783CF CE0A                       	dc.b	nF6, $0A
000783D1 E108                       	smpsAlterNote       $08
000783D3 CC07                       	dc.b	nEb6, $07
000783D5 E106                       	smpsAlterNote       $06
000783D7 C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
000783E3 E107                       	smpsAlterNote       $07
000783E5 CB0D                       	dc.b	nD6, $0D
000783E7 E101                       	smpsAlterNote       $01
000783E9 E701                       	dc.b	smpsNoAttack, $01
000783EB E100                       	smpsAlterNote       $00
000783ED E701                       	dc.b	smpsNoAttack, $01
000783EF E104                       	smpsAlterNote       $04
000783F1 E701                       	dc.b	smpsNoAttack, $01
000783F3 E10A                       	smpsAlterNote       $0A
000783F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000783F9 E107                       	smpsAlterNote       $07
000783FB E701                       	dc.b	smpsNoAttack, $01
000783FD E101                       	smpsAlterNote       $01
000783FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078403 E107                       	smpsAlterNote       $07
00078405 E701                       	dc.b	smpsNoAttack, $01
00078407 E10A                       	smpsAlterNote       $0A
00078409 E701                       	dc.b	smpsNoAttack, $01
0007840B E10B                       	smpsAlterNote       $0B
0007840D 8001                       	dc.b	nRst, $01
0007840F E108                       	smpsAlterNote       $08
00078411 CC0D                       	dc.b	nEb6, $0D
00078413 E102                       	smpsAlterNote       $02
00078415 E701                       	dc.b	smpsNoAttack, $01
00078417 E101                       	smpsAlterNote       $01
00078419 E701                       	dc.b	smpsNoAttack, $01
0007841B E105                       	smpsAlterNote       $05
0007841D E701                       	dc.b	smpsNoAttack, $01
0007841F E108                       	smpsAlterNote       $08
00078421 8001                       	dc.b	nRst, $01
00078423 E106                       	smpsAlterNote       $06
00078425 C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
00078431 8001                       	dc.b	nRst, $01
00078433 E107                       	smpsAlterNote       $07
00078435 CB0D                       	dc.b	nD6, $0D
00078437 E101                       	smpsAlterNote       $01
00078439 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007843D E104                       	smpsAlterNote       $04
0007843F E701                       	dc.b	smpsNoAttack, $01
00078441 E10A                       	smpsAlterNote       $0A
00078443 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078447 E104                       	smpsAlterNote       $04
00078449 E701                       	dc.b	smpsNoAttack, $01
0007844B E101                       	smpsAlterNote       $01
0007844D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078451 E107                       	smpsAlterNote       $07
00078453 E701                       	dc.b	smpsNoAttack, $01
00078455 E10B                       	smpsAlterNote       $0B
00078457 E701                       	dc.b	smpsNoAttack, $01
00078459 E10A                       	smpsAlterNote       $0A
0007845B E701                       	dc.b	smpsNoAttack, $01
0007845D E104                       	smpsAlterNote       $04
0007845F E701                       	dc.b	smpsNoAttack, $01
00078461 E100                       	smpsAlterNote       $00
00078463 E701                       	dc.b	smpsNoAttack, $01
00078465 E101                       	smpsAlterNote       $01
00078467 801C                       	dc.b	nRst, $1C
0007846B E107                       	smpsAlterNote       $07
0007846D BF03 8001                  	dc.b	nD5, $03, nRst, $01
00078471 E603                       	smpsAlterVol        $03
00078473 F6F1 AD                    	smpsJump            music84_Jump03
00078476                            
00078476                            ; FM3 Data
00078476                            music84_FM3:
00078476 E0C0                       	smpsPan             panCenter, $00
0007847A E109                       	smpsAlterNote       $09
0007847C C203 8007                  	dc.b	nF5, $03, nRst, $07
00078480 E108                       	smpsAlterNote       $08
00078482 C103 800B                  	dc.b	nE5, $03, nRst, $0B
00078486 E10B                       	smpsAlterNote       $0B
00078488 BA03 8006                  	dc.b	nA4, $03, nRst, $06
0007848E E040                       	smpsPan             panRight, $00
00078490 E110                       	smpsAlterNote       $10
00078492 E6F9                       	smpsAlterVol        $F9
00078494 C702 8001                  	dc.b	nBb5, $02, nRst, $01
00078498 E10F                       	smpsAlterNote       $0F
0007849A C603                       	dc.b	nA5, $03
0007849C E10D                       	smpsAlterNote       $0D
0007849E C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000784A4 E10C                       	smpsAlterNote       $0C
000784A6 C103 8001                  	dc.b	nE5, $03, nRst, $01
000784AA E10A                       	smpsAlterNote       $0A
000784AC BD02 8001                  	dc.b	nC5, $02, nRst, $01
000784B0 E10F                       	smpsAlterNote       $0F
000784B2 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000784B6 E0C0                       	smpsPan             panCenter, $00
000784BA E109                       	smpsAlterNote       $09
000784BC E609                       	smpsAlterVol        $09
000784BE B603                       	dc.b	nF4, $03
000784C0                            
000784C0                            music84_Jump02:
000784C0 E70A                       	dc.b	smpsNoAttack, $0A
000784C2 E103                       	smpsAlterNote       $03
000784C4 E701                       	dc.b	smpsNoAttack, $01
000784C6 E102                       	smpsAlterNote       $02
000784C8 E701                       	dc.b	smpsNoAttack, $01
000784CA E106                       	smpsAlterNote       $06
000784CC E701                       	dc.b	smpsNoAttack, $01
000784CE E10C                       	smpsAlterNote       $0C
000784D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000784D4 E109                       	smpsAlterNote       $09
000784D6 E701                       	dc.b	smpsNoAttack, $01
000784D8 E103                       	smpsAlterNote       $03
000784DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000784DE E109                       	smpsAlterNote       $09
000784E0 E701                       	dc.b	smpsNoAttack, $01
000784E2 E10C                       	smpsAlterNote       $0C
000784E4 E701                       	dc.b	smpsNoAttack, $01
000784E6 E10D                       	smpsAlterNote       $0D
000784E8 8001                       	dc.b	nRst, $01
000784EA E109                       	smpsAlterNote       $09
000784EC B80D                       	dc.b	nG4, $0D
000784EE E103                       	smpsAlterNote       $03
000784F0 E701                       	dc.b	smpsNoAttack, $01
000784F2 E102                       	smpsAlterNote       $02
000784F4 E701                       	dc.b	smpsNoAttack, $01
000784F6 E106                       	smpsAlterNote       $06
000784F8 E701                       	dc.b	smpsNoAttack, $01
000784FA E10C                       	smpsAlterNote       $0C
000784FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078500 E109                       	smpsAlterNote       $09
00078502 E701                       	dc.b	smpsNoAttack, $01
00078504 E103                       	smpsAlterNote       $03
00078506 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007850A E109                       	smpsAlterNote       $09
0007850C E701                       	dc.b	smpsNoAttack, $01
0007850E E10C                       	smpsAlterNote       $0C
00078510 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078514 E106                       	smpsAlterNote       $06
00078516 E701                       	dc.b	smpsNoAttack, $01
00078518 E102                       	smpsAlterNote       $02
0007851A E701                       	dc.b	smpsNoAttack, $01
0007851C E103                       	smpsAlterNote       $03
0007851E E701                       	dc.b	smpsNoAttack, $01
00078520 E109                       	smpsAlterNote       $09
00078522 E701                       	dc.b	smpsNoAttack, $01
00078524 E10D                       	smpsAlterNote       $0D
00078526 E701                       	dc.b	smpsNoAttack, $01
00078528 E109                       	smpsAlterNote       $09
0007852A E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007852E E10B                       	smpsAlterNote       $0B
00078530 BA0D                       	dc.b	nA4, $0D
00078532 E105                       	smpsAlterNote       $05
00078534 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078538 E108                       	smpsAlterNote       $08
0007853A E701                       	dc.b	smpsNoAttack, $01
0007853C E10E                       	smpsAlterNote       $0E
0007853E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078542 E108                       	smpsAlterNote       $08
00078544 E701                       	dc.b	smpsNoAttack, $01
00078546 E104                       	smpsAlterNote       $04
00078548 E701                       	dc.b	smpsNoAttack, $01
0007854A E105                       	smpsAlterNote       $05
0007854C E701                       	dc.b	smpsNoAttack, $01
0007854E E10B                       	smpsAlterNote       $0B
00078550 E701                       	dc.b	smpsNoAttack, $01
00078552 E10F                       	smpsAlterNote       $0F
00078554 E701                       	dc.b	smpsNoAttack, $01
00078556 E10B                       	smpsAlterNote       $0B
00078558 E701                       	dc.b	smpsNoAttack, $01
0007855A E108                       	smpsAlterNote       $08
0007855C E701                       	dc.b	smpsNoAttack, $01
0007855E E104                       	smpsAlterNote       $04
00078560 E701                       	dc.b	smpsNoAttack, $01
00078562 E108                       	smpsAlterNote       $08
00078564 E701                       	dc.b	smpsNoAttack, $01
00078566 E10E                       	smpsAlterNote       $0E
00078568 E701                       	dc.b	smpsNoAttack, $01
0007856A E10F                       	smpsAlterNote       $0F
0007856C E701                       	dc.b	smpsNoAttack, $01
0007856E E10B                       	smpsAlterNote       $0B
00078570 E701                       	dc.b	smpsNoAttack, $01
00078572 E105                       	smpsAlterNote       $05
00078574 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078578 E108                       	smpsAlterNote       $08
0007857A E701                       	dc.b	smpsNoAttack, $01
0007857C E10E                       	smpsAlterNote       $0E
0007857E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078582 E108                       	smpsAlterNote       $08
00078584 E701                       	dc.b	smpsNoAttack, $01
00078586 E105                       	smpsAlterNote       $05
00078588 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007858C E10B                       	smpsAlterNote       $0B
0007858E E701                       	dc.b	smpsNoAttack, $01
00078590 E10F                       	smpsAlterNote       $0F
00078592 E701                       	dc.b	smpsNoAttack, $01
00078594 E10E                       	smpsAlterNote       $0E
00078596 E701                       	dc.b	smpsNoAttack, $01
00078598 E108                       	smpsAlterNote       $08
0007859A E701                       	dc.b	smpsNoAttack, $01
0007859C E104                       	smpsAlterNote       $04
0007859E E701                       	dc.b	smpsNoAttack, $01
000785A0 E105                       	smpsAlterNote       $05
000785A2 8001                       	dc.b	nRst, $01
000785A4 E108                       	smpsAlterNote       $08
000785A6 B50A                       	dc.b	nE4, $0A
000785A8 E109                       	smpsAlterNote       $09
000785AA B60D                       	dc.b	nF4, $0D
000785AC E106                       	smpsAlterNote       $06
000785AE E701                       	dc.b	smpsNoAttack, $01
000785B0 E103                       	smpsAlterNote       $03
000785B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000785B6 E109                       	smpsAlterNote       $09
000785B8 E701                       	dc.b	smpsNoAttack, $01
000785BA E10D                       	smpsAlterNote       $0D
000785BC E701                       	dc.b	smpsNoAttack, $01
000785BE E10C                       	smpsAlterNote       $0C
000785C0 E701                       	dc.b	smpsNoAttack, $01
000785C2 E106                       	smpsAlterNote       $06
000785C4 E701                       	dc.b	smpsNoAttack, $01
000785C6 E102                       	smpsAlterNote       $02
000785C8 E701                       	dc.b	smpsNoAttack, $01
000785CA E106                       	smpsAlterNote       $06
000785CC E701                       	dc.b	smpsNoAttack, $01
000785CE E109                       	smpsAlterNote       $09
000785D0 E701                       	dc.b	smpsNoAttack, $01
000785D2 E10D                       	smpsAlterNote       $0D
000785D4 E701                       	dc.b	smpsNoAttack, $01
000785D6 E109                       	smpsAlterNote       $09
000785D8 B80D                       	dc.b	nG4, $0D
000785DA E106                       	smpsAlterNote       $06
000785DC E701                       	dc.b	smpsNoAttack, $01
000785DE E103                       	smpsAlterNote       $03
000785E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000785E4 E109                       	smpsAlterNote       $09
000785E6 E701                       	dc.b	smpsNoAttack, $01
000785E8 E10D                       	smpsAlterNote       $0D
000785EA E701                       	dc.b	smpsNoAttack, $01
000785EC E10C                       	smpsAlterNote       $0C
000785EE E701                       	dc.b	smpsNoAttack, $01
000785F0 E106                       	smpsAlterNote       $06
000785F2 E701                       	dc.b	smpsNoAttack, $01
000785F4 E102                       	smpsAlterNote       $02
000785F6 E701                       	dc.b	smpsNoAttack, $01
000785F8 E106                       	smpsAlterNote       $06
000785FA E701                       	dc.b	smpsNoAttack, $01
000785FC E109                       	smpsAlterNote       $09
000785FE E701                       	dc.b	smpsNoAttack, $01
00078600 E10D                       	smpsAlterNote       $0D
00078602 E701                       	dc.b	smpsNoAttack, $01
00078604 E109                       	smpsAlterNote       $09
00078606 E701                       	dc.b	smpsNoAttack, $01
00078608 E103                       	smpsAlterNote       $03
0007860A E701                       	dc.b	smpsNoAttack, $01
0007860C E102                       	smpsAlterNote       $02
0007860E E701                       	dc.b	smpsNoAttack, $01
00078610 E106                       	smpsAlterNote       $06
00078612 E701                       	dc.b	smpsNoAttack, $01
00078614 E10C                       	smpsAlterNote       $0C
00078616 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007861A E109                       	smpsAlterNote       $09
0007861C E701                       	dc.b	smpsNoAttack, $01
0007861E E10B                       	smpsAlterNote       $0B
00078620 BA0D                       	dc.b	nA4, $0D
00078622 E108                       	smpsAlterNote       $08
00078624 E701                       	dc.b	smpsNoAttack, $01
00078626 E104                       	smpsAlterNote       $04
00078628 E701                       	dc.b	smpsNoAttack, $01
0007862A E108                       	smpsAlterNote       $08
0007862C E701                       	dc.b	smpsNoAttack, $01
0007862E E10B                       	smpsAlterNote       $0B
00078630 E701                       	dc.b	smpsNoAttack, $01
00078632 E10F                       	smpsAlterNote       $0F
00078634 E701                       	dc.b	smpsNoAttack, $01
00078636 E10B                       	smpsAlterNote       $0B
00078638 E701                       	dc.b	smpsNoAttack, $01
0007863A E105                       	smpsAlterNote       $05
0007863C E701                       	dc.b	smpsNoAttack, $01
0007863E E104                       	smpsAlterNote       $04
00078640 E701                       	dc.b	smpsNoAttack, $01
00078642 E108                       	smpsAlterNote       $08
00078644 E701                       	dc.b	smpsNoAttack, $01
00078646 E10E                       	smpsAlterNote       $0E
00078648 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007864C E10B                       	smpsAlterNote       $0B
0007864E E701                       	dc.b	smpsNoAttack, $01
00078650 E105                       	smpsAlterNote       $05
00078652 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078656 E10B                       	smpsAlterNote       $0B
00078658 E701                       	dc.b	smpsNoAttack, $01
0007865A E10E                       	smpsAlterNote       $0E
0007865C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078660 E108                       	smpsAlterNote       $08
00078662 E701                       	dc.b	smpsNoAttack, $01
00078664 E104                       	smpsAlterNote       $04
00078666 E701                       	dc.b	smpsNoAttack, $01
00078668 E105                       	smpsAlterNote       $05
0007866A E701                       	dc.b	smpsNoAttack, $01
0007866C E10B                       	smpsAlterNote       $0B
0007866E E701                       	dc.b	smpsNoAttack, $01
00078670 E10F                       	smpsAlterNote       $0F
00078672 E701                       	dc.b	smpsNoAttack, $01
00078674 E10B                       	smpsAlterNote       $0B
00078676 E701                       	dc.b	smpsNoAttack, $01
00078678 E108                       	smpsAlterNote       $08
0007867A E701                       	dc.b	smpsNoAttack, $01
0007867C E105                       	smpsAlterNote       $05
0007867E 8001                       	dc.b	nRst, $01
00078680 E109                       	smpsAlterNote       $09
00078682 B609 8001                  	dc.b	nF4, $09, nRst, $01
00078686 E108                       	smpsAlterNote       $08
00078688 B506 8001                  	dc.b	nE4, $06, nRst, $01
0007868C E107                       	smpsAlterNote       $07
0007868E B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00078692 E108                       	smpsAlterNote       $08
00078694 B502 8001                  	dc.b	nE4, $02, nRst, $01
00078698 E109                       	smpsAlterNote       $09
0007869A B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000786A0 E10B                       	smpsAlterNote       $0B
000786A2 BA0D                       	dc.b	nA4, $0D
000786A4 E108                       	smpsAlterNote       $08
000786A6 E701                       	dc.b	smpsNoAttack, $01
000786A8 E104                       	smpsAlterNote       $04
000786AA E701                       	dc.b	smpsNoAttack, $01
000786AC E108                       	smpsAlterNote       $08
000786AE E701                       	dc.b	smpsNoAttack, $01
000786B0 E10E                       	smpsAlterNote       $0E
000786B2 E701                       	dc.b	smpsNoAttack, $01
000786B4 E10F                       	smpsAlterNote       $0F
000786B6 E701                       	dc.b	smpsNoAttack, $01
000786B8 E10B                       	smpsAlterNote       $0B
000786BA E701                       	dc.b	smpsNoAttack, $01
000786BC E105                       	smpsAlterNote       $05
000786BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000786C2 E108                       	smpsAlterNote       $08
000786C4 E701                       	dc.b	smpsNoAttack, $01
000786C6 E10E                       	smpsAlterNote       $0E
000786C8 E701                       	dc.b	smpsNoAttack, $01
000786CA E10F                       	smpsAlterNote       $0F
000786CC 8001                       	dc.b	nRst, $01
000786CE E109                       	smpsAlterNote       $09
000786D0 C20D                       	dc.b	nF5, $0D
000786D2 E103                       	smpsAlterNote       $03
000786D4 E701                       	dc.b	smpsNoAttack, $01
000786D6 E102                       	smpsAlterNote       $02
000786D8 E701                       	dc.b	smpsNoAttack, $01
000786DA E106                       	smpsAlterNote       $06
000786DC E701                       	dc.b	smpsNoAttack, $01
000786DE E10C                       	smpsAlterNote       $0C
000786E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000786E4 E109                       	smpsAlterNote       $09
000786E6 E701                       	dc.b	smpsNoAttack, $01
000786E8 E103                       	smpsAlterNote       $03
000786EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000786EE E109                       	smpsAlterNote       $09
000786F0 E701                       	dc.b	smpsNoAttack, $01
000786F2 E10C                       	smpsAlterNote       $0C
000786F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000786F8 E106                       	smpsAlterNote       $06
000786FA E701                       	dc.b	smpsNoAttack, $01
000786FC E102                       	smpsAlterNote       $02
000786FE E701                       	dc.b	smpsNoAttack, $01
00078700 E103                       	smpsAlterNote       $03
00078702 E701                       	dc.b	smpsNoAttack, $01
00078704 E109                       	smpsAlterNote       $09
00078706 E701                       	dc.b	smpsNoAttack, $01
00078708 E10D                       	smpsAlterNote       $0D
0007870A E701                       	dc.b	smpsNoAttack, $01
0007870C E109                       	smpsAlterNote       $09
0007870E E701                       	dc.b	smpsNoAttack, $01
00078710 E106                       	smpsAlterNote       $06
00078712 E701                       	dc.b	smpsNoAttack, $01
00078714 E102                       	smpsAlterNote       $02
00078716 E701                       	dc.b	smpsNoAttack, $01
00078718 E106                       	smpsAlterNote       $06
0007871A E701                       	dc.b	smpsNoAttack, $01
0007871C E10C                       	smpsAlterNote       $0C
0007871E E701                       	dc.b	smpsNoAttack, $01
00078720 E10D                       	smpsAlterNote       $0D
00078722 E701                       	dc.b	smpsNoAttack, $01
00078724 E109                       	smpsAlterNote       $09
00078726 E701                       	dc.b	smpsNoAttack, $01
00078728 E103                       	smpsAlterNote       $03
0007872A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007872E E106                       	smpsAlterNote       $06
00078730 E701                       	dc.b	smpsNoAttack, $01
00078732 E10C                       	smpsAlterNote       $0C
00078734 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078738 E106                       	smpsAlterNote       $06
0007873A E701                       	dc.b	smpsNoAttack, $01
0007873C E103                       	smpsAlterNote       $03
0007873E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078742 E109                       	smpsAlterNote       $09
00078744 E701                       	dc.b	smpsNoAttack, $01
00078746 E10D                       	smpsAlterNote       $0D
00078748 E701                       	dc.b	smpsNoAttack, $01
0007874A E10C                       	smpsAlterNote       $0C
0007874C E701                       	dc.b	smpsNoAttack, $01
0007874E E106                       	smpsAlterNote       $06
00078750 E701                       	dc.b	smpsNoAttack, $01
00078752 E102                       	smpsAlterNote       $02
00078754 E701                       	dc.b	smpsNoAttack, $01
00078756 E106                       	smpsAlterNote       $06
00078758 E701                       	dc.b	smpsNoAttack, $01
0007875A E109                       	smpsAlterNote       $09
0007875C E701                       	dc.b	smpsNoAttack, $01
0007875E E10D                       	smpsAlterNote       $0D
00078760 E701                       	dc.b	smpsNoAttack, $01
00078762 E109                       	smpsAlterNote       $09
00078764 E701                       	dc.b	smpsNoAttack, $01
00078766 E103                       	smpsAlterNote       $03
00078768 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007876C E109                       	smpsAlterNote       $09
0007876E C206                       	dc.b	nF5, $06
00078770 E108                       	smpsAlterNote       $08
00078772 C10E                       	dc.b	nE5, $0E
00078774 E102                       	smpsAlterNote       $02
00078776 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007877A E108                       	smpsAlterNote       $08
0007877C E701                       	dc.b	smpsNoAttack, $01
0007877E E10B                       	smpsAlterNote       $0B
00078780 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078784 E105                       	smpsAlterNote       $05
00078786 E701                       	dc.b	smpsNoAttack, $01
00078788 E101                       	smpsAlterNote       $01
0007878A E701                       	dc.b	smpsNoAttack, $01
0007878C E102                       	smpsAlterNote       $02
0007878E E701                       	dc.b	smpsNoAttack, $01
00078790 E108                       	smpsAlterNote       $08
00078792 E701                       	dc.b	smpsNoAttack, $01
00078794 E10C                       	smpsAlterNote       $0C
00078796 E701                       	dc.b	smpsNoAttack, $01
00078798 E107                       	smpsAlterNote       $07
0007879A BF0E                       	dc.b	nD5, $0E
0007879C E101                       	smpsAlterNote       $01
0007879E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000787A2 E107                       	smpsAlterNote       $07
000787A4 E701                       	dc.b	smpsNoAttack, $01
000787A6 E10A                       	smpsAlterNote       $0A
000787A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000787AC E104                       	smpsAlterNote       $04
000787AE E701                       	dc.b	smpsNoAttack, $01
000787B0 E100                       	smpsAlterNote       $00
000787B2 E701                       	dc.b	smpsNoAttack, $01
000787B4 E104                       	smpsAlterNote       $04
000787B6 E701                       	dc.b	smpsNoAttack, $01
000787B8 E107                       	smpsAlterNote       $07
000787BA E701                       	dc.b	smpsNoAttack, $01
000787BC E10B                       	smpsAlterNote       $0B
000787BE E701                       	dc.b	smpsNoAttack, $01
000787C0 E107                       	smpsAlterNote       $07
000787C2 E701                       	dc.b	smpsNoAttack, $01
000787C4 E101                       	smpsAlterNote       $01
000787C6 E701                       	dc.b	smpsNoAttack, $01
000787C8 E100                       	smpsAlterNote       $00
000787CA E701                       	dc.b	smpsNoAttack, $01
000787CC E104                       	smpsAlterNote       $04
000787CE E701                       	dc.b	smpsNoAttack, $01
000787D0 E10A                       	smpsAlterNote       $0A
000787D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000787D6 E107                       	smpsAlterNote       $07
000787D8 E701                       	dc.b	smpsNoAttack, $01
000787DA E101                       	smpsAlterNote       $01
000787DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000787E0 E107                       	smpsAlterNote       $07
000787E2 E701                       	dc.b	smpsNoAttack, $01
000787E4 E10A                       	smpsAlterNote       $0A
000787E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000787EA E104                       	smpsAlterNote       $04
000787EC E701                       	dc.b	smpsNoAttack, $01
000787EE E100                       	smpsAlterNote       $00
000787F0 E701                       	dc.b	smpsNoAttack, $01
000787F2 E101                       	smpsAlterNote       $01
000787F4 E701                       	dc.b	smpsNoAttack, $01
000787F6 E107                       	smpsAlterNote       $07
000787F8 E701                       	dc.b	smpsNoAttack, $01
000787FA E10B                       	smpsAlterNote       $0B
000787FC E701                       	dc.b	smpsNoAttack, $01
000787FE E107                       	smpsAlterNote       $07
00078800 E701                       	dc.b	smpsNoAttack, $01
00078802 E104                       	smpsAlterNote       $04
00078804 E701                       	dc.b	smpsNoAttack, $01
00078806 E100                       	smpsAlterNote       $00
00078808 E701                       	dc.b	smpsNoAttack, $01
0007880A E104                       	smpsAlterNote       $04
0007880C E701                       	dc.b	smpsNoAttack, $01
0007880E E10A                       	smpsAlterNote       $0A
00078810 E701                       	dc.b	smpsNoAttack, $01
00078812 E10B                       	smpsAlterNote       $0B
00078814 E701                       	dc.b	smpsNoAttack, $01
00078816 E107                       	smpsAlterNote       $07
00078818 E701                       	dc.b	smpsNoAttack, $01
0007881A E101                       	smpsAlterNote       $01
0007881C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078820 E104                       	smpsAlterNote       $04
00078822 E701                       	dc.b	smpsNoAttack, $01
00078824 E10A                       	smpsAlterNote       $0A
00078826 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007882A E104                       	smpsAlterNote       $04
0007882C E701                       	dc.b	smpsNoAttack, $01
0007882E E101                       	smpsAlterNote       $01
00078830 E701                       	dc.b	smpsNoAttack, $01
00078834 E107                       	smpsAlterNote       $07
00078836 E6FF                       	smpsAlterVol        $FF
00078838 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
00078844 8004                       	dc.b	nRst, $04
00078848 E109                       	smpsAlterNote       $09
0007884A E602                       	smpsAlterVol        $02
0007884C B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
00078852 E108                       	smpsAlterNote       $08
00078854 B502 8001                  	dc.b	nE4, $02, nRst, $01
00078858 E109                       	smpsAlterNote       $09
0007885A B60D                       	dc.b	nF4, $0D
0007885C E106                       	smpsAlterNote       $06
0007885E E701                       	dc.b	smpsNoAttack, $01
00078860 E102                       	smpsAlterNote       $02
00078862 E701                       	dc.b	smpsNoAttack, $01
00078864 E106                       	smpsAlterNote       $06
00078866 E701                       	dc.b	smpsNoAttack, $01
00078868 E109                       	smpsAlterNote       $09
0007886A E701                       	dc.b	smpsNoAttack, $01
0007886C E10D                       	smpsAlterNote       $0D
0007886E E701                       	dc.b	smpsNoAttack, $01
00078870 E109                       	smpsAlterNote       $09
00078872 E701                       	dc.b	smpsNoAttack, $01
00078874 E103                       	smpsAlterNote       $03
00078876 E701                       	dc.b	smpsNoAttack, $01
00078878 E102                       	smpsAlterNote       $02
0007887A E701                       	dc.b	smpsNoAttack, $01
0007887C E106                       	smpsAlterNote       $06
0007887E E701                       	dc.b	smpsNoAttack, $01
00078880 E10C                       	smpsAlterNote       $0C
00078882 E701                       	dc.b	smpsNoAttack, $01
00078884 E10D                       	smpsAlterNote       $0D
00078886 8001                       	dc.b	nRst, $01
00078888 E109                       	smpsAlterNote       $09
0007888A B80D                       	dc.b	nG4, $0D
0007888C E106                       	smpsAlterNote       $06
0007888E E701                       	dc.b	smpsNoAttack, $01
00078890 E102                       	smpsAlterNote       $02
00078892 E701                       	dc.b	smpsNoAttack, $01
00078894 E106                       	smpsAlterNote       $06
00078896 E701                       	dc.b	smpsNoAttack, $01
00078898 E10C                       	smpsAlterNote       $0C
0007889A E701                       	dc.b	smpsNoAttack, $01
0007889C E10D                       	smpsAlterNote       $0D
0007889E E701                       	dc.b	smpsNoAttack, $01
000788A0 E109                       	smpsAlterNote       $09
000788A2 E701                       	dc.b	smpsNoAttack, $01
000788A4 E103                       	smpsAlterNote       $03
000788A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000788AA E106                       	smpsAlterNote       $06
000788AC E701                       	dc.b	smpsNoAttack, $01
000788AE E10C                       	smpsAlterNote       $0C
000788B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000788B4 E106                       	smpsAlterNote       $06
000788B6 E701                       	dc.b	smpsNoAttack, $01
000788B8 E103                       	smpsAlterNote       $03
000788BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000788BE E109                       	smpsAlterNote       $09
000788C0 E701                       	dc.b	smpsNoAttack, $01
000788C2 E10D                       	smpsAlterNote       $0D
000788C4 E701                       	dc.b	smpsNoAttack, $01
000788C6 E10C                       	smpsAlterNote       $0C
000788C8 E701                       	dc.b	smpsNoAttack, $01
000788CA E109                       	smpsAlterNote       $09
000788CC 8001                       	dc.b	nRst, $01
000788CE E10B                       	smpsAlterNote       $0B
000788D0 BA03                       	dc.b	nA4, $03
000788D2 E10C                       	smpsAlterNote       $0C
000788D4 BB03 8001                  	dc.b	nBb4, $03, nRst, $01
000788D8 E10B                       	smpsAlterNote       $0B
000788DA BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
000788E0 E10C                       	smpsAlterNote       $0C
000788E2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000788E6 E10B                       	smpsAlterNote       $0B
000788E8 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000788EE E10C                       	smpsAlterNote       $0C
000788F0 D303                       	dc.b	nBb6, $03
000788F2 E10B                       	smpsAlterNote       $0B
000788F4 D20D                       	dc.b	nA6, $0D
000788F6 E108                       	smpsAlterNote       $08
000788F8 E701                       	dc.b	smpsNoAttack, $01
000788FA E104                       	smpsAlterNote       $04
000788FC E701                       	dc.b	smpsNoAttack, $01
000788FE E105                       	smpsAlterNote       $05
00078900 E701                       	dc.b	smpsNoAttack, $01
00078902 E10B                       	smpsAlterNote       $0B
00078904 E701                       	dc.b	smpsNoAttack, $01
00078906 E10F                       	smpsAlterNote       $0F
00078908 E701                       	dc.b	smpsNoAttack, $01
0007890A E10B                       	smpsAlterNote       $0B
0007890C E701                       	dc.b	smpsNoAttack, $01
0007890E E108                       	smpsAlterNote       $08
00078910 E701                       	dc.b	smpsNoAttack, $01
00078912 E104                       	smpsAlterNote       $04
00078914 E701                       	dc.b	smpsNoAttack, $01
00078916 E108                       	smpsAlterNote       $08
00078918 E701                       	dc.b	smpsNoAttack, $01
0007891A E10E                       	smpsAlterNote       $0E
0007891C E701                       	dc.b	smpsNoAttack, $01
0007891E E10F                       	smpsAlterNote       $0F
00078920 E701                       	dc.b	smpsNoAttack, $01
00078922 E10B                       	smpsAlterNote       $0B
00078924 E701                       	dc.b	smpsNoAttack, $01
00078926 E105                       	smpsAlterNote       $05
00078928 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0007892E E109                       	smpsAlterNote       $09
00078930 CE07                       	dc.b	nF6, $07
00078932 E108                       	smpsAlterNote       $08
00078934 CD06 8001                  	dc.b	nE6, $06, nRst, $01
00078938 E109                       	smpsAlterNote       $09
0007893A CE03 8001                  	dc.b	nF6, $03, nRst, $01
0007893E E108                       	smpsAlterNote       $08
00078940 CC0D                       	dc.b	nEb6, $0D
00078942 E102                       	smpsAlterNote       $02
00078944 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078948 E108                       	smpsAlterNote       $08
0007894A E701                       	dc.b	smpsNoAttack, $01
0007894C E10B                       	smpsAlterNote       $0B
0007894E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078952 E105                       	smpsAlterNote       $05
00078954 E701                       	dc.b	smpsNoAttack, $01
00078956 E101                       	smpsAlterNote       $01
00078958 E701                       	dc.b	smpsNoAttack, $01
0007895A E102                       	smpsAlterNote       $02
0007895C E701                       	dc.b	smpsNoAttack, $01
0007895E E108                       	smpsAlterNote       $08
00078960 E701                       	dc.b	smpsNoAttack, $01
00078962 E10C                       	smpsAlterNote       $0C
00078964 E701                       	dc.b	smpsNoAttack, $01
00078966 E108                       	smpsAlterNote       $08
00078968 E701                       	dc.b	smpsNoAttack, $01
0007896A E105                       	smpsAlterNote       $05
0007896C E701                       	dc.b	smpsNoAttack, $01
0007896E E101                       	smpsAlterNote       $01
00078970 E701                       	dc.b	smpsNoAttack, $01
00078972 E105                       	smpsAlterNote       $05
00078974 E701                       	dc.b	smpsNoAttack, $01
00078976 E10B                       	smpsAlterNote       $0B
00078978 E701                       	dc.b	smpsNoAttack, $01
0007897A E10C                       	smpsAlterNote       $0C
0007897C E701                       	dc.b	smpsNoAttack, $01
0007897E E108                       	smpsAlterNote       $08
00078980 E701                       	dc.b	smpsNoAttack, $01
00078982 E107                       	smpsAlterNote       $07
00078984 CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
0007898E E10B                       	smpsAlterNote       $0B
00078990 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0007899A E109                       	smpsAlterNote       $09
0007899C C203                       	dc.b	nF5, $03
0007899E E108                       	smpsAlterNote       $08
000789A0 C103 8001                  	dc.b	nE5, $03, nRst, $01
000789A4 E109                       	smpsAlterNote       $09
000789A6 C20D                       	dc.b	nF5, $0D
000789A8 E108                       	smpsAlterNote       $08
000789AA C10E                       	dc.b	nE5, $0E
000789AC E107                       	smpsAlterNote       $07
000789AE BF0D                       	dc.b	nD5, $0D
000789B0 E104                       	smpsAlterNote       $04
000789B2 E701                       	dc.b	smpsNoAttack, $01
000789B4 E100                       	smpsAlterNote       $00
000789B6 E701                       	dc.b	smpsNoAttack, $01
000789B8 E104                       	smpsAlterNote       $04
000789BA E701                       	dc.b	smpsNoAttack, $01
000789BC E107                       	smpsAlterNote       $07
000789BE E701                       	dc.b	smpsNoAttack, $01
000789C0 E10B                       	smpsAlterNote       $0B
000789C2 E701                       	dc.b	smpsNoAttack, $01
000789C4 E107                       	smpsAlterNote       $07
000789C6 E701                       	dc.b	smpsNoAttack, $01
000789C8 E101                       	smpsAlterNote       $01
000789CA E701                       	dc.b	smpsNoAttack, $01
000789CC E100                       	smpsAlterNote       $00
000789CE E701                       	dc.b	smpsNoAttack, $01
000789D0 E104                       	smpsAlterNote       $04
000789D2 E701                       	dc.b	smpsNoAttack, $01
000789D4 E10A                       	smpsAlterNote       $0A
000789D6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000789DA E107                       	smpsAlterNote       $07
000789DC E701                       	dc.b	smpsNoAttack, $01
000789DE E101                       	smpsAlterNote       $01
000789E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000789E4 E107                       	smpsAlterNote       $07
000789E6 E701                       	dc.b	smpsNoAttack, $01
000789E8 E10A                       	smpsAlterNote       $0A
000789EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000789EE E104                       	smpsAlterNote       $04
000789F0 E701                       	dc.b	smpsNoAttack, $01
000789F2 E100                       	smpsAlterNote       $00
000789F4 E701                       	dc.b	smpsNoAttack, $01
000789F6 E101                       	smpsAlterNote       $01
000789F8 E701                       	dc.b	smpsNoAttack, $01
000789FA E107                       	smpsAlterNote       $07
000789FC E701                       	dc.b	smpsNoAttack, $01
000789FE E10B                       	smpsAlterNote       $0B
00078A00 E701                       	dc.b	smpsNoAttack, $01
00078A02 E107                       	smpsAlterNote       $07
00078A04 E701                       	dc.b	smpsNoAttack, $01
00078A06 E104                       	smpsAlterNote       $04
00078A08 E701                       	dc.b	smpsNoAttack, $01
00078A0A E100                       	smpsAlterNote       $00
00078A0C E701                       	dc.b	smpsNoAttack, $01
00078A0E E104                       	smpsAlterNote       $04
00078A10 E701                       	dc.b	smpsNoAttack, $01
00078A12 E10A                       	smpsAlterNote       $0A
00078A14 E701                       	dc.b	smpsNoAttack, $01
00078A16 E10B                       	smpsAlterNote       $0B
00078A18 E701                       	dc.b	smpsNoAttack, $01
00078A1A E107                       	smpsAlterNote       $07
00078A1C E701                       	dc.b	smpsNoAttack, $01
00078A1E E101                       	smpsAlterNote       $01
00078A20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A24 E104                       	smpsAlterNote       $04
00078A26 E701                       	dc.b	smpsNoAttack, $01
00078A28 E10A                       	smpsAlterNote       $0A
00078A2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A2E E104                       	smpsAlterNote       $04
00078A30 E701                       	dc.b	smpsNoAttack, $01
00078A32 E101                       	smpsAlterNote       $01
00078A34 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A38 E107                       	smpsAlterNote       $07
00078A3A E701                       	dc.b	smpsNoAttack, $01
00078A3C E10B                       	smpsAlterNote       $0B
00078A3E E701                       	dc.b	smpsNoAttack, $01
00078A40 E10A                       	smpsAlterNote       $0A
00078A42 E701                       	dc.b	smpsNoAttack, $01
00078A44 E104                       	smpsAlterNote       $04
00078A46 E701                       	dc.b	smpsNoAttack, $01
00078A48 E100                       	smpsAlterNote       $00
00078A4A E701                       	dc.b	smpsNoAttack, $01
00078A4C E104                       	smpsAlterNote       $04
00078A4E E701                       	dc.b	smpsNoAttack, $01
00078A50 E107                       	smpsAlterNote       $07
00078A52 E701                       	dc.b	smpsNoAttack, $01
00078A54 E10B                       	smpsAlterNote       $0B
00078A56 E701                       	dc.b	smpsNoAttack, $01
00078A58 E107                       	smpsAlterNote       $07
00078A5A E701                       	dc.b	smpsNoAttack, $01
00078A5C E101                       	smpsAlterNote       $01
00078A5E E701                       	dc.b	smpsNoAttack, $01
00078A60 E100                       	smpsAlterNote       $00
00078A62 E701                       	dc.b	smpsNoAttack, $01
00078A64 E104                       	smpsAlterNote       $04
00078A66 E701                       	dc.b	smpsNoAttack, $01
00078A68 E10A                       	smpsAlterNote       $0A
00078A6A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A6E E107                       	smpsAlterNote       $07
00078A70 E701                       	dc.b	smpsNoAttack, $01
00078A72 E101                       	smpsAlterNote       $01
00078A74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A78 E107                       	smpsAlterNote       $07
00078A7A E701                       	dc.b	smpsNoAttack, $01
00078A7C E10A                       	smpsAlterNote       $0A
00078A7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078A82 E104                       	smpsAlterNote       $04
00078A84 E701                       	dc.b	smpsNoAttack, $01
00078A86 E100                       	smpsAlterNote       $00
00078A88 E701                       	dc.b	smpsNoAttack, $01
00078A8A E101                       	smpsAlterNote       $01
00078A8C E701                       	dc.b	smpsNoAttack, $01
00078A8E E107                       	smpsAlterNote       $07
00078A90 E701                       	dc.b	smpsNoAttack, $01
00078A92 E10B                       	smpsAlterNote       $0B
00078A94 E701                       	dc.b	smpsNoAttack, $01
00078A96 E107                       	smpsAlterNote       $07
00078A98 E701                       	dc.b	smpsNoAttack, $01
00078A9A E104                       	smpsAlterNote       $04
00078A9C E701                       	dc.b	smpsNoAttack, $01
00078A9E E100                       	smpsAlterNote       $00
00078AA0 E701                       	dc.b	smpsNoAttack, $01
00078AA2 E101                       	smpsAlterNote       $01
00078AA4 8001                       	dc.b	nRst, $01
00078AA6 E109                       	smpsAlterNote       $09
00078AA8 C20D                       	dc.b	nF5, $0D
00078AAA E106                       	smpsAlterNote       $06
00078AAC E701                       	dc.b	smpsNoAttack, $01
00078AAE E102                       	smpsAlterNote       $02
00078AB0 E701                       	dc.b	smpsNoAttack, $01
00078AB2 E106                       	smpsAlterNote       $06
00078AB4 E701                       	dc.b	smpsNoAttack, $01
00078AB6 E10C                       	smpsAlterNote       $0C
00078AB8 E701                       	dc.b	smpsNoAttack, $01
00078ABA E10D                       	smpsAlterNote       $0D
00078ABC E701                       	dc.b	smpsNoAttack, $01
00078ABE E109                       	smpsAlterNote       $09
00078AC0 E701                       	dc.b	smpsNoAttack, $01
00078AC2 E103                       	smpsAlterNote       $03
00078AC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078AC8 E106                       	smpsAlterNote       $06
00078ACA E701                       	dc.b	smpsNoAttack, $01
00078ACC E10C                       	smpsAlterNote       $0C
00078ACE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078AD2 E106                       	smpsAlterNote       $06
00078AD4 E701                       	dc.b	smpsNoAttack, $01
00078AD6 E103                       	smpsAlterNote       $03
00078AD8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078ADC E109                       	smpsAlterNote       $09
00078ADE E701                       	dc.b	smpsNoAttack, $01
00078AE0 E10D                       	smpsAlterNote       $0D
00078AE2 E701                       	dc.b	smpsNoAttack, $01
00078AE4 E10C                       	smpsAlterNote       $0C
00078AE6 E701                       	dc.b	smpsNoAttack, $01
00078AE8 E109                       	smpsAlterNote       $09
00078AEA 8001                       	dc.b	nRst, $01
00078AEC E108                       	smpsAlterNote       $08
00078AEE C10D                       	dc.b	nE5, $0D
00078AF0 E109                       	smpsAlterNote       $09
00078AF2 C20A 8001                  	dc.b	nF5, $0A, nRst, $01
00078AF6 E108                       	smpsAlterNote       $08
00078AF8 C10D                       	dc.b	nE5, $0D
00078AFA E102                       	smpsAlterNote       $02
00078AFC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078B00 E105                       	smpsAlterNote       $05
00078B02 E701                       	dc.b	smpsNoAttack, $01
00078B04 E108                       	smpsAlterNote       $08
00078B06 8001                       	dc.b	nRst, $01
00078B08 E107                       	smpsAlterNote       $07
00078B0A BF0D                       	dc.b	nD5, $0D
00078B0C E108                       	smpsAlterNote       $08
00078B0E C107                       	dc.b	nE5, $07
00078B10 E109                       	smpsAlterNote       $09
00078B12 C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
00078B18 E10B                       	smpsAlterNote       $0B
00078B1A C603                       	dc.b	nA5, $03
00078B1C E10C                       	smpsAlterNote       $0C
00078B1E C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
00078B24 E10B                       	smpsAlterNote       $0B
00078B26 C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
00078B2C E109                       	smpsAlterNote       $09
00078B2E D003                       	dc.b	nG6, $03
00078B30 E108                       	smpsAlterNote       $08
00078B32 CD02 8001                  	dc.b	nE6, $02, nRst, $01
00078B36 E10B                       	smpsAlterNote       $0B
00078B38 C601 8001                  	dc.b	nA5, $01, nRst, $01
00078B3C E108                       	smpsAlterNote       $08
00078B3E C102                       	dc.b	nE5, $02
00078B42 E10C                       	smpsAlterNote       $0C
00078B44 E6FB                       	smpsAlterVol        $FB
00078B46 A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
00078B52 8001                       	dc.b	nRst, $01
00078B54 E10B                       	smpsAlterNote       $0B
00078B56 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00078B5E E107                       	smpsAlterNote       $07
00078B60 A706 8001                  	dc.b	nD3, $06, nRst, $01
00078B64 E10B                       	smpsAlterNote       $0B
00078B66 A203                       	dc.b	nA2, $03
00078B68 E109                       	smpsAlterNote       $09
00078B6A AA03 8001                  	dc.b	nF3, $03, nRst, $01
00078B6E E108                       	smpsAlterNote       $08
00078B70 A906                       	dc.b	nE3, $06
00078B72 E107                       	smpsAlterNote       $07
00078B74 A703 8001                  	dc.b	nD3, $03, nRst, $01
00078B78 E106                       	smpsAlterNote       $06
00078B7A A503                       	dc.b	nC3, $03
00078B7C E10C                       	smpsAlterNote       $0C
00078B7E A303 8001                  	dc.b	nBb2, $03, nRst, $01
00078B82 E10B                       	smpsAlterNote       $0B
00078B84 A203 8004                  	dc.b	nA2, $03, nRst, $04
00078B88 E11B                       	smpsAlterNote       $1B
00078B8A C401                       	dc.b	nG5, $01
00078B8C E1F4                       	smpsAlterNote       $F4
00078B8E E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
00078B91 E106                       	smpsAlterNote       $06
00078B93 E701                       	dc.b	smpsNoAttack, $01
00078B95 E10F                       	smpsAlterNote       $0F
00078B97 E701                       	dc.b	smpsNoAttack, $01
00078B99 E1E4                       	smpsAlterNote       $E4
00078B9B E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
00078B9E E1F6                       	smpsAlterNote       $F6
00078BA0 E701                       	dc.b	smpsNoAttack, $01
00078BA2 E108                       	smpsAlterNote       $08
00078BA4 E701                       	dc.b	smpsNoAttack, $01
00078BA6 E10B                       	smpsAlterNote       $0B
00078BA8 E706                       	dc.b	smpsNoAttack, $06
00078BAA E105                       	smpsAlterNote       $05
00078BAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078BB0 E108                       	smpsAlterNote       $08
00078BB2 E701                       	dc.b	smpsNoAttack, $01
00078BB4 E10E                       	smpsAlterNote       $0E
00078BB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078BBA E108                       	smpsAlterNote       $08
00078BBC E701                       	dc.b	smpsNoAttack, $01
00078BBE E105                       	smpsAlterNote       $05
00078BC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078BC4 E10B                       	smpsAlterNote       $0B
00078BC6 E701                       	dc.b	smpsNoAttack, $01
00078BC8 E10F                       	smpsAlterNote       $0F
00078BCA E701                       	dc.b	smpsNoAttack, $01
00078BCC E10E                       	smpsAlterNote       $0E
00078BCE E701                       	dc.b	smpsNoAttack, $01
00078BD0 E108                       	smpsAlterNote       $08
00078BD2 E701                       	dc.b	smpsNoAttack, $01
00078BD4 E104                       	smpsAlterNote       $04
00078BD6 E701                       	dc.b	smpsNoAttack, $01
00078BD8 E108                       	smpsAlterNote       $08
00078BDA E701                       	dc.b	smpsNoAttack, $01
00078BDC E10B                       	smpsAlterNote       $0B
00078BDE E701                       	dc.b	smpsNoAttack, $01
00078BE0 E10F                       	smpsAlterNote       $0F
00078BE2 E701                       	dc.b	smpsNoAttack, $01
00078BE4 E10B                       	smpsAlterNote       $0B
00078BE6 E701                       	dc.b	smpsNoAttack, $01
00078BE8 E105                       	smpsAlterNote       $05
00078BEA E701                       	dc.b	smpsNoAttack, $01
00078BEC E104                       	smpsAlterNote       $04
00078BEE E701                       	dc.b	smpsNoAttack, $01
00078BF0 E108                       	smpsAlterNote       $08
00078BF2 E701                       	dc.b	smpsNoAttack, $01
00078BF4 E10E                       	smpsAlterNote       $0E
00078BF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078BFA E10B                       	smpsAlterNote       $0B
00078BFC E701                       	dc.b	smpsNoAttack, $01
00078BFE E105                       	smpsAlterNote       $05
00078C00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078C04 E10B                       	smpsAlterNote       $0B
00078C06 E701                       	dc.b	smpsNoAttack, $01
00078C08 E10E                       	smpsAlterNote       $0E
00078C0A E701                       	dc.b	smpsNoAttack, $01
00078C0C E10F                       	smpsAlterNote       $0F
00078C0E 8001                       	dc.b	nRst, $01
00078C10 E109                       	smpsAlterNote       $09
00078C12 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
00078C18 E108                       	smpsAlterNote       $08
00078C1A C101 8001                  	dc.b	nE5, $01, nRst, $01
00078C1E E109                       	smpsAlterNote       $09
00078C20 C202                       	dc.b	nF5, $02
00078C22 E108                       	smpsAlterNote       $08
00078C24 C102                       	dc.b	nE5, $02
00078C26 E107                       	smpsAlterNote       $07
00078C28 BF02 8001                  	dc.b	nD5, $02, nRst, $01
00078C2C E108                       	smpsAlterNote       $08
00078C2E C101 8001                  	dc.b	nE5, $01, nRst, $01
00078C32 E107                       	smpsAlterNote       $07
00078C34 BF02                       	dc.b	nD5, $02
00078C36 E106                       	smpsAlterNote       $06
00078C38 BD02 8001                  	dc.b	nC5, $02, nRst, $01
00078C3C E107                       	smpsAlterNote       $07
00078C3E BF01 8001                  	dc.b	nD5, $01, nRst, $01
00078C42 E106                       	smpsAlterNote       $06
00078C44 BD02                       	dc.b	nC5, $02
00078C46 E10C                       	smpsAlterNote       $0C
00078C48 BB02                       	dc.b	nBb4, $02
00078C4A E106                       	smpsAlterNote       $06
00078C4C BD02 8001                  	dc.b	nC5, $02, nRst, $01
00078C50 E10C                       	smpsAlterNote       $0C
00078C52 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
00078C56 E10B                       	smpsAlterNote       $0B
00078C58 BA02                       	dc.b	nA4, $02
00078C5A E10C                       	smpsAlterNote       $0C
00078C5C BB02                       	dc.b	nBb4, $02
00078C5E E10B                       	smpsAlterNote       $0B
00078C60 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
00078C6A E108                       	smpsAlterNote       $08
00078C6C B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
00078C74 E107                       	smpsAlterNote       $07
00078C76 BE02                       	dc.b	nCs5, $02
00078C78 E10B                       	smpsAlterNote       $0B
00078C7A BA02                       	dc.b	nA4, $02
00078C7C E109                       	smpsAlterNote       $09
00078C7E B802 8001                  	dc.b	nG4, $02, nRst, $01
00078C82 E108                       	smpsAlterNote       $08
00078C84 B501 8001                  	dc.b	nE4, $01, nRst, $01
00078C88 E10B                       	smpsAlterNote       $0B
00078C8A AE02                       	dc.b	nA3, $02
00078C8C E10C                       	smpsAlterNote       $0C
00078C8E A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
00078C9A E10B                       	smpsAlterNote       $0B
00078C9C A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
00078CA4 E107                       	smpsAlterNote       $07
00078CA6 A706 8001                  	dc.b	nD3, $06, nRst, $01
00078CAA E10B                       	smpsAlterNote       $0B
00078CAC A203                       	dc.b	nA2, $03
00078CAE E109                       	smpsAlterNote       $09
00078CB0 AA03 8001                  	dc.b	nF3, $03, nRst, $01
00078CB4 E108                       	smpsAlterNote       $08
00078CB6 A906 8001                  	dc.b	nE3, $06, nRst, $01
00078CBA E107                       	smpsAlterNote       $07
00078CBC A702 8001                  	dc.b	nD3, $02, nRst, $01
00078CC0 E106                       	smpsAlterNote       $06
00078CC2 A503                       	dc.b	nC3, $03
00078CC4 E10C                       	smpsAlterNote       $0C
00078CC6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
00078CCC E107                       	smpsAlterNote       $07
00078CCE B20D                       	dc.b	nCs4, $0D
00078CD0 E104                       	smpsAlterNote       $04
00078CD2 E701                       	dc.b	smpsNoAttack, $01
00078CD4 E100                       	smpsAlterNote       $00
00078CD6 E701                       	dc.b	smpsNoAttack, $01
00078CD8 E104                       	smpsAlterNote       $04
00078CDA E701                       	dc.b	smpsNoAttack, $01
00078CDC E10A                       	smpsAlterNote       $0A
00078CDE E701                       	dc.b	smpsNoAttack, $01
00078CE0 E10B                       	smpsAlterNote       $0B
00078CE2 E701                       	dc.b	smpsNoAttack, $01
00078CE4 E107                       	smpsAlterNote       $07
00078CE6 E701                       	dc.b	smpsNoAttack, $01
00078CE8 E101                       	smpsAlterNote       $01
00078CEA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078CEE E104                       	smpsAlterNote       $04
00078CF0 E701                       	dc.b	smpsNoAttack, $01
00078CF2 E10A                       	smpsAlterNote       $0A
00078CF4 E701                       	dc.b	smpsNoAttack, $01
00078CF6 E10B                       	smpsAlterNote       $0B
00078CF8 8001                       	dc.b	nRst, $01
00078CFA E107                       	smpsAlterNote       $07
00078CFC B30D                       	dc.b	nD4, $0D
00078CFE E104                       	smpsAlterNote       $04
00078D00 E701                       	dc.b	smpsNoAttack, $01
00078D02 E100                       	smpsAlterNote       $00
00078D04 E701                       	dc.b	smpsNoAttack, $01
00078D06 E104                       	smpsAlterNote       $04
00078D08 E701                       	dc.b	smpsNoAttack, $01
00078D0A E10A                       	smpsAlterNote       $0A
00078D0C E701                       	dc.b	smpsNoAttack, $01
00078D0E E10B                       	smpsAlterNote       $0B
00078D10 E701                       	dc.b	smpsNoAttack, $01
00078D12 E107                       	smpsAlterNote       $07
00078D14 E701                       	dc.b	smpsNoAttack, $01
00078D16 E101                       	smpsAlterNote       $01
00078D18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078D1C E104                       	smpsAlterNote       $04
00078D1E E701                       	dc.b	smpsNoAttack, $01
00078D20 E10A                       	smpsAlterNote       $0A
00078D22 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078D26 E104                       	smpsAlterNote       $04
00078D28 E701                       	dc.b	smpsNoAttack, $01
00078D2A E101                       	smpsAlterNote       $01
00078D2C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078D30 E107                       	smpsAlterNote       $07
00078D32 E701                       	dc.b	smpsNoAttack, $01
00078D34 E10B                       	smpsAlterNote       $0B
00078D36 E701                       	dc.b	smpsNoAttack, $01
00078D38 E10A                       	smpsAlterNote       $0A
00078D3A E701                       	dc.b	smpsNoAttack, $01
00078D3C E107                       	smpsAlterNote       $07
00078D3E 8001                       	dc.b	nRst, $01
00078D40 E108                       	smpsAlterNote       $08
00078D42 B50D                       	dc.b	nE4, $0D
00078D44 E102                       	smpsAlterNote       $02
00078D46 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078D4A E105                       	smpsAlterNote       $05
00078D4C E701                       	dc.b	smpsNoAttack, $01
00078D4E E10B                       	smpsAlterNote       $0B
00078D50 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078D54 E105                       	smpsAlterNote       $05
00078D56 E701                       	dc.b	smpsNoAttack, $01
00078D58 E102                       	smpsAlterNote       $02
00078D5A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078D5E E108                       	smpsAlterNote       $08
00078D60 E701                       	dc.b	smpsNoAttack, $01
00078D62 E10C                       	smpsAlterNote       $0C
00078D64 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00078D68 E107                       	smpsAlterNote       $07
00078D6A B30D                       	dc.b	nD4, $0D
00078D6C E101                       	smpsAlterNote       $01
00078D6E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078D72 E104                       	smpsAlterNote       $04
00078D74 E701                       	dc.b	smpsNoAttack, $01
00078D76 E10A                       	smpsAlterNote       $0A
00078D78 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078D7C E104                       	smpsAlterNote       $04
00078D7E E701                       	dc.b	smpsNoAttack, $01
00078D80 E101                       	smpsAlterNote       $01
00078D82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078D86 E107                       	smpsAlterNote       $07
00078D88 E701                       	dc.b	smpsNoAttack, $01
00078D8A E10B                       	smpsAlterNote       $0B
00078D8C E701                       	dc.b	smpsNoAttack, $01
00078D8E E10A                       	smpsAlterNote       $0A
00078D90 E701                       	dc.b	smpsNoAttack, $01
00078D92 E104                       	smpsAlterNote       $04
00078D94 E701                       	dc.b	smpsNoAttack, $01
00078D96 E100                       	smpsAlterNote       $00
00078D98 E701                       	dc.b	smpsNoAttack, $01
00078D9A E104                       	smpsAlterNote       $04
00078D9C E701                       	dc.b	smpsNoAttack, $01
00078D9E E107                       	smpsAlterNote       $07
00078DA0 E701                       	dc.b	smpsNoAttack, $01
00078DA2 E10B                       	smpsAlterNote       $0B
00078DA4 E701                       	dc.b	smpsNoAttack, $01
00078DA6 E107                       	smpsAlterNote       $07
00078DA8 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
00078DAC E101                       	smpsAlterNote       $01
00078DAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078DB2 E107                       	smpsAlterNote       $07
00078DB4 E701                       	dc.b	smpsNoAttack, $01
00078DB6 E10A                       	smpsAlterNote       $0A
00078DB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078DBC E104                       	smpsAlterNote       $04
00078DBE E701                       	dc.b	smpsNoAttack, $01
00078DC0 E100                       	smpsAlterNote       $00
00078DC2 E701                       	dc.b	smpsNoAttack, $01
00078DC4 E101                       	smpsAlterNote       $01
00078DC6 E701                       	dc.b	smpsNoAttack, $01
00078DC8 E107                       	smpsAlterNote       $07
00078DCA E701                       	dc.b	smpsNoAttack, $01
00078DCC E10B                       	smpsAlterNote       $0B
00078DCE E701                       	dc.b	smpsNoAttack, $01
00078DD0 E107                       	smpsAlterNote       $07
00078DD2 B30E                       	dc.b	nD4, $0E
00078DD4 E101                       	smpsAlterNote       $01
00078DD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078DDA E107                       	smpsAlterNote       $07
00078DDC E701                       	dc.b	smpsNoAttack, $01
00078DDE E10A                       	smpsAlterNote       $0A
00078DE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078DE4 E104                       	smpsAlterNote       $04
00078DE6 E701                       	dc.b	smpsNoAttack, $01
00078DE8 E100                       	smpsAlterNote       $00
00078DEA E701                       	dc.b	smpsNoAttack, $01
00078DEC E101                       	smpsAlterNote       $01
00078DEE E701                       	dc.b	smpsNoAttack, $01
00078DF0 E107                       	smpsAlterNote       $07
00078DF2 E701                       	dc.b	smpsNoAttack, $01
00078DF4 E10B                       	smpsAlterNote       $0B
00078DF6 E701                       	dc.b	smpsNoAttack, $01
00078DF8 E107                       	smpsAlterNote       $07
00078DFA E701                       	dc.b	smpsNoAttack, $01
00078DFC E104                       	smpsAlterNote       $04
00078DFE E701                       	dc.b	smpsNoAttack, $01
00078E00 E100                       	smpsAlterNote       $00
00078E02 E701                       	dc.b	smpsNoAttack, $01
00078E04 E104                       	smpsAlterNote       $04
00078E06 E701                       	dc.b	smpsNoAttack, $01
00078E08 E10A                       	smpsAlterNote       $0A
00078E0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078E0E E107                       	smpsAlterNote       $07
00078E10 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
00078E14 E104                       	smpsAlterNote       $04
00078E16 E701                       	dc.b	smpsNoAttack, $01
00078E18 E100                       	smpsAlterNote       $00
00078E1A E701                       	dc.b	smpsNoAttack, $01
00078E1C E101                       	smpsAlterNote       $01
00078E1E E701                       	dc.b	smpsNoAttack, $01
00078E20 E107                       	smpsAlterNote       $07
00078E22 E701                       	dc.b	smpsNoAttack, $01
00078E24 E10B                       	smpsAlterNote       $0B
00078E26 E701                       	dc.b	smpsNoAttack, $01
00078E28 E107                       	smpsAlterNote       $07
00078E2A E701                       	dc.b	smpsNoAttack, $01
00078E2C E104                       	smpsAlterNote       $04
00078E2E E701                       	dc.b	smpsNoAttack, $01
00078E30 E100                       	smpsAlterNote       $00
00078E32 E701                       	dc.b	smpsNoAttack, $01
00078E34 E104                       	smpsAlterNote       $04
00078E36 E701                       	dc.b	smpsNoAttack, $01
00078E38 E10A                       	smpsAlterNote       $0A
00078E3A E701                       	dc.b	smpsNoAttack, $01
00078E3C E10B                       	smpsAlterNote       $0B
00078E3E E701                       	dc.b	smpsNoAttack, $01
00078E42 E6FF                       	smpsAlterVol        $FF
00078E44 A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
00078E50 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
00078E58 E109                       	smpsAlterNote       $09
00078E5A E601                       	smpsAlterVol        $01
00078E5C B60D                       	dc.b	nF4, $0D
00078E5E E106                       	smpsAlterNote       $06
00078E60 E701                       	dc.b	smpsNoAttack, $01
00078E62 E102                       	smpsAlterNote       $02
00078E64 E701                       	dc.b	smpsNoAttack, $01
00078E66 E106                       	smpsAlterNote       $06
00078E68 E701                       	dc.b	smpsNoAttack, $01
00078E6A E109                       	smpsAlterNote       $09
00078E6C E701                       	dc.b	smpsNoAttack, $01
00078E6E E10D                       	smpsAlterNote       $0D
00078E70 E701                       	dc.b	smpsNoAttack, $01
00078E72 E109                       	smpsAlterNote       $09
00078E74 E701                       	dc.b	smpsNoAttack, $01
00078E76 E103                       	smpsAlterNote       $03
00078E78 E701                       	dc.b	smpsNoAttack, $01
00078E7A E102                       	smpsAlterNote       $02
00078E7C E701                       	dc.b	smpsNoAttack, $01
00078E7E E106                       	smpsAlterNote       $06
00078E80 E701                       	dc.b	smpsNoAttack, $01
00078E82 E10C                       	smpsAlterNote       $0C
00078E84 E701                       	dc.b	smpsNoAttack, $01
00078E86 E10D                       	smpsAlterNote       $0D
00078E88 8001                       	dc.b	nRst, $01
00078E8A E109                       	smpsAlterNote       $09
00078E8C B80D                       	dc.b	nG4, $0D
00078E8E E106                       	smpsAlterNote       $06
00078E90 E701                       	dc.b	smpsNoAttack, $01
00078E92 E102                       	smpsAlterNote       $02
00078E94 E701                       	dc.b	smpsNoAttack, $01
00078E96 E106                       	smpsAlterNote       $06
00078E98 E701                       	dc.b	smpsNoAttack, $01
00078E9A E109                       	smpsAlterNote       $09
00078E9C E701                       	dc.b	smpsNoAttack, $01
00078E9E E10D                       	smpsAlterNote       $0D
00078EA0 E701                       	dc.b	smpsNoAttack, $01
00078EA2 E109                       	smpsAlterNote       $09
00078EA4 E701                       	dc.b	smpsNoAttack, $01
00078EA6 E103                       	smpsAlterNote       $03
00078EA8 E701                       	dc.b	smpsNoAttack, $01
00078EAA E102                       	smpsAlterNote       $02
00078EAC E701                       	dc.b	smpsNoAttack, $01
00078EAE E106                       	smpsAlterNote       $06
00078EB0 E701                       	dc.b	smpsNoAttack, $01
00078EB2 E10C                       	smpsAlterNote       $0C
00078EB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078EB8 E106                       	smpsAlterNote       $06
00078EBA E701                       	dc.b	smpsNoAttack, $01
00078EBC E103                       	smpsAlterNote       $03
00078EBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078EC2 E109                       	smpsAlterNote       $09
00078EC4 E701                       	dc.b	smpsNoAttack, $01
00078EC6 E10D                       	smpsAlterNote       $0D
00078EC8 E701                       	dc.b	smpsNoAttack, $01
00078ECA E10C                       	smpsAlterNote       $0C
00078ECC E701                       	dc.b	smpsNoAttack, $01
00078ECE E109                       	smpsAlterNote       $09
00078ED0 8001                       	dc.b	nRst, $01
00078ED2 E10B                       	smpsAlterNote       $0B
00078ED4 BA0D                       	dc.b	nA4, $0D
00078ED6 E105                       	smpsAlterNote       $05
00078ED8 E701                       	dc.b	smpsNoAttack, $01
00078EDA E104                       	smpsAlterNote       $04
00078EDC E701                       	dc.b	smpsNoAttack, $01
00078EDE E108                       	smpsAlterNote       $08
00078EE0 E701                       	dc.b	smpsNoAttack, $01
00078EE2 E10E                       	smpsAlterNote       $0E
00078EE4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078EE8 E10B                       	smpsAlterNote       $0B
00078EEA E701                       	dc.b	smpsNoAttack, $01
00078EEC E105                       	smpsAlterNote       $05
00078EEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078EF2 E10B                       	smpsAlterNote       $0B
00078EF4 E701                       	dc.b	smpsNoAttack, $01
00078EF6 E10E                       	smpsAlterNote       $0E
00078EF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078EFC E108                       	smpsAlterNote       $08
00078EFE E701                       	dc.b	smpsNoAttack, $01
00078F00 E104                       	smpsAlterNote       $04
00078F02 E701                       	dc.b	smpsNoAttack, $01
00078F04 E105                       	smpsAlterNote       $05
00078F06 E701                       	dc.b	smpsNoAttack, $01
00078F08 E10B                       	smpsAlterNote       $0B
00078F0A E701                       	dc.b	smpsNoAttack, $01
00078F0C E10F                       	smpsAlterNote       $0F
00078F0E E701                       	dc.b	smpsNoAttack, $01
00078F10 E10B                       	smpsAlterNote       $0B
00078F12 E701                       	dc.b	smpsNoAttack, $01
00078F14 E108                       	smpsAlterNote       $08
00078F16 E701                       	dc.b	smpsNoAttack, $01
00078F18 E104                       	smpsAlterNote       $04
00078F1A E701                       	dc.b	smpsNoAttack, $01
00078F1C E108                       	smpsAlterNote       $08
00078F1E E701                       	dc.b	smpsNoAttack, $01
00078F20 E10E                       	smpsAlterNote       $0E
00078F22 E701                       	dc.b	smpsNoAttack, $01
00078F24 E10F                       	smpsAlterNote       $0F
00078F26 E701                       	dc.b	smpsNoAttack, $01
00078F28 E10B                       	smpsAlterNote       $0B
00078F2A E701                       	dc.b	smpsNoAttack, $01
00078F2C E105                       	smpsAlterNote       $05
00078F2E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078F32 E108                       	smpsAlterNote       $08
00078F34 E701                       	dc.b	smpsNoAttack, $01
00078F36 E10E                       	smpsAlterNote       $0E
00078F38 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078F3C E108                       	smpsAlterNote       $08
00078F3E E701                       	dc.b	smpsNoAttack, $01
00078F40 E105                       	smpsAlterNote       $05
00078F42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078F46 E108                       	smpsAlterNote       $08
00078F48 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
00078F4C E109                       	smpsAlterNote       $09
00078F4E B60D                       	dc.b	nF4, $0D
00078F50 E103                       	smpsAlterNote       $03
00078F52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078F56 E106                       	smpsAlterNote       $06
00078F58 E701                       	dc.b	smpsNoAttack, $01
00078F5A E10C                       	smpsAlterNote       $0C
00078F5C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078F60 E106                       	smpsAlterNote       $06
00078F62 E701                       	dc.b	smpsNoAttack, $01
00078F64 E103                       	smpsAlterNote       $03
00078F66 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078F6A E109                       	smpsAlterNote       $09
00078F6C E701                       	dc.b	smpsNoAttack, $01
00078F6E E10D                       	smpsAlterNote       $0D
00078F70 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00078F74 E109                       	smpsAlterNote       $09
00078F76 B80D                       	dc.b	nG4, $0D
00078F78 E103                       	smpsAlterNote       $03
00078F7A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078F7E E109                       	smpsAlterNote       $09
00078F80 E701                       	dc.b	smpsNoAttack, $01
00078F82 E10C                       	smpsAlterNote       $0C
00078F84 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078F88 E106                       	smpsAlterNote       $06
00078F8A E701                       	dc.b	smpsNoAttack, $01
00078F8C E102                       	smpsAlterNote       $02
00078F8E E701                       	dc.b	smpsNoAttack, $01
00078F90 E103                       	smpsAlterNote       $03
00078F92 E701                       	dc.b	smpsNoAttack, $01
00078F94 E109                       	smpsAlterNote       $09
00078F96 E701                       	dc.b	smpsNoAttack, $01
00078F98 E10D                       	smpsAlterNote       $0D
00078F9A E701                       	dc.b	smpsNoAttack, $01
00078F9C E109                       	smpsAlterNote       $09
00078F9E E701                       	dc.b	smpsNoAttack, $01
00078FA0 E106                       	smpsAlterNote       $06
00078FA2 E701                       	dc.b	smpsNoAttack, $01
00078FA4 E102                       	smpsAlterNote       $02
00078FA6 E701                       	dc.b	smpsNoAttack, $01
00078FA8 E106                       	smpsAlterNote       $06
00078FAA E701                       	dc.b	smpsNoAttack, $01
00078FAC E10C                       	smpsAlterNote       $0C
00078FAE E701                       	dc.b	smpsNoAttack, $01
00078FB0 E10D                       	smpsAlterNote       $0D
00078FB2 E701                       	dc.b	smpsNoAttack, $01
00078FB4 E109                       	smpsAlterNote       $09
00078FB6 E701                       	dc.b	smpsNoAttack, $01
00078FB8 E10B                       	smpsAlterNote       $0B
00078FBA BA0D                       	dc.b	nA4, $0D
00078FBC E108                       	smpsAlterNote       $08
00078FBE E701                       	dc.b	smpsNoAttack, $01
00078FC0 E105                       	smpsAlterNote       $05
00078FC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078FC6 E10B                       	smpsAlterNote       $0B
00078FC8 E701                       	dc.b	smpsNoAttack, $01
00078FCA E10F                       	smpsAlterNote       $0F
00078FCC E701                       	dc.b	smpsNoAttack, $01
00078FCE E10E                       	smpsAlterNote       $0E
00078FD0 E701                       	dc.b	smpsNoAttack, $01
00078FD2 E108                       	smpsAlterNote       $08
00078FD4 E701                       	dc.b	smpsNoAttack, $01
00078FD6 E104                       	smpsAlterNote       $04
00078FD8 E701                       	dc.b	smpsNoAttack, $01
00078FDA E108                       	smpsAlterNote       $08
00078FDC E701                       	dc.b	smpsNoAttack, $01
00078FDE E10B                       	smpsAlterNote       $0B
00078FE0 E701                       	dc.b	smpsNoAttack, $01
00078FE2 E10F                       	smpsAlterNote       $0F
00078FE4 E701                       	dc.b	smpsNoAttack, $01
00078FE6 E10B                       	smpsAlterNote       $0B
00078FE8 E701                       	dc.b	smpsNoAttack, $01
00078FEA E105                       	smpsAlterNote       $05
00078FEC E701                       	dc.b	smpsNoAttack, $01
00078FEE E104                       	smpsAlterNote       $04
00078FF0 E701                       	dc.b	smpsNoAttack, $01
00078FF2 E108                       	smpsAlterNote       $08
00078FF4 E701                       	dc.b	smpsNoAttack, $01
00078FF6 E10E                       	smpsAlterNote       $0E
00078FF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00078FFC E10B                       	smpsAlterNote       $0B
00078FFE E701                       	dc.b	smpsNoAttack, $01
00079000 E105                       	smpsAlterNote       $05
00079002 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079006 E10B                       	smpsAlterNote       $0B
00079008 E701                       	dc.b	smpsNoAttack, $01
0007900A E10E                       	smpsAlterNote       $0E
0007900C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079010 E108                       	smpsAlterNote       $08
00079012 E701                       	dc.b	smpsNoAttack, $01
00079014 E105                       	smpsAlterNote       $05
00079016 8001                       	dc.b	nRst, $01
00079018 E109                       	smpsAlterNote       $09
0007901A B60A                       	dc.b	nF4, $0A
0007901C E108                       	smpsAlterNote       $08
0007901E B507                       	dc.b	nE4, $07
00079020 E107                       	smpsAlterNote       $07
00079022 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
00079026 E108                       	smpsAlterNote       $08
00079028 B503                       	dc.b	nE4, $03
0007902A E109                       	smpsAlterNote       $09
0007902C B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
00079034 E10B                       	smpsAlterNote       $0B
00079036 BA0D                       	dc.b	nA4, $0D
00079038 E108                       	smpsAlterNote       $08
0007903A E701                       	dc.b	smpsNoAttack, $01
0007903C E104                       	smpsAlterNote       $04
0007903E E701                       	dc.b	smpsNoAttack, $01
00079040 E108                       	smpsAlterNote       $08
00079042 E701                       	dc.b	smpsNoAttack, $01
00079044 E10B                       	smpsAlterNote       $0B
00079046 E701                       	dc.b	smpsNoAttack, $01
00079048 E10F                       	smpsAlterNote       $0F
0007904A E701                       	dc.b	smpsNoAttack, $01
0007904C E10B                       	smpsAlterNote       $0B
0007904E E701                       	dc.b	smpsNoAttack, $01
00079050 E105                       	smpsAlterNote       $05
00079052 E701                       	dc.b	smpsNoAttack, $01
00079054 E104                       	smpsAlterNote       $04
00079056 E701                       	dc.b	smpsNoAttack, $01
00079058 E108                       	smpsAlterNote       $08
0007905A E701                       	dc.b	smpsNoAttack, $01
0007905C E10E                       	smpsAlterNote       $0E
0007905E E701                       	dc.b	smpsNoAttack, $01
00079060 E10F                       	smpsAlterNote       $0F
00079062 8001                       	dc.b	nRst, $01
00079064 E109                       	smpsAlterNote       $09
00079066 C20D                       	dc.b	nF5, $0D
00079068 E106                       	smpsAlterNote       $06
0007906A E701                       	dc.b	smpsNoAttack, $01
0007906C E102                       	smpsAlterNote       $02
0007906E E701                       	dc.b	smpsNoAttack, $01
00079070 E106                       	smpsAlterNote       $06
00079072 E701                       	dc.b	smpsNoAttack, $01
00079074 E109                       	smpsAlterNote       $09
00079076 E701                       	dc.b	smpsNoAttack, $01
00079078 E10D                       	smpsAlterNote       $0D
0007907A E701                       	dc.b	smpsNoAttack, $01
0007907C E109                       	smpsAlterNote       $09
0007907E E701                       	dc.b	smpsNoAttack, $01
00079080 E103                       	smpsAlterNote       $03
00079082 E701                       	dc.b	smpsNoAttack, $01
00079084 E102                       	smpsAlterNote       $02
00079086 E701                       	dc.b	smpsNoAttack, $01
00079088 E106                       	smpsAlterNote       $06
0007908A E701                       	dc.b	smpsNoAttack, $01
0007908C E10C                       	smpsAlterNote       $0C
0007908E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079092 E109                       	smpsAlterNote       $09
00079094 E701                       	dc.b	smpsNoAttack, $01
00079096 E103                       	smpsAlterNote       $03
00079098 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007909C E109                       	smpsAlterNote       $09
0007909E E701                       	dc.b	smpsNoAttack, $01
000790A0 E10C                       	smpsAlterNote       $0C
000790A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000790A6 E106                       	smpsAlterNote       $06
000790A8 E701                       	dc.b	smpsNoAttack, $01
000790AA E102                       	smpsAlterNote       $02
000790AC E701                       	dc.b	smpsNoAttack, $01
000790AE E103                       	smpsAlterNote       $03
000790B0 E701                       	dc.b	smpsNoAttack, $01
000790B2 E109                       	smpsAlterNote       $09
000790B4 E701                       	dc.b	smpsNoAttack, $01
000790B6 E10D                       	smpsAlterNote       $0D
000790B8 E701                       	dc.b	smpsNoAttack, $01
000790BA E109                       	smpsAlterNote       $09
000790BC E701                       	dc.b	smpsNoAttack, $01
000790BE E106                       	smpsAlterNote       $06
000790C0 E701                       	dc.b	smpsNoAttack, $01
000790C2 E102                       	smpsAlterNote       $02
000790C4 E701                       	dc.b	smpsNoAttack, $01
000790C6 E106                       	smpsAlterNote       $06
000790C8 E701                       	dc.b	smpsNoAttack, $01
000790CA E10C                       	smpsAlterNote       $0C
000790CC E701                       	dc.b	smpsNoAttack, $01
000790CE E10D                       	smpsAlterNote       $0D
000790D0 E701                       	dc.b	smpsNoAttack, $01
000790D2 E109                       	smpsAlterNote       $09
000790D4 E701                       	dc.b	smpsNoAttack, $01
000790D6 E103                       	smpsAlterNote       $03
000790D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000790DC E106                       	smpsAlterNote       $06
000790DE E701                       	dc.b	smpsNoAttack, $01
000790E0 E10C                       	smpsAlterNote       $0C
000790E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000790E6 E106                       	smpsAlterNote       $06
000790E8 E701                       	dc.b	smpsNoAttack, $01
000790EA E103                       	smpsAlterNote       $03
000790EC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000790F0 E109                       	smpsAlterNote       $09
000790F2 E701                       	dc.b	smpsNoAttack, $01
000790F4 E10D                       	smpsAlterNote       $0D
000790F6 E701                       	dc.b	smpsNoAttack, $01
000790F8 E10C                       	smpsAlterNote       $0C
000790FA E701                       	dc.b	smpsNoAttack, $01
000790FC E106                       	smpsAlterNote       $06
000790FE E701                       	dc.b	smpsNoAttack, $01
00079100 E103                       	smpsAlterNote       $03
00079102 8001                       	dc.b	nRst, $01
00079104 E109                       	smpsAlterNote       $09
00079106 C206 8001                  	dc.b	nF5, $06, nRst, $01
0007910C E10C                       	smpsAlterNote       $0C
0007910E E601                       	smpsAlterVol        $01
00079110 BB0D                       	dc.b	nBb4, $0D
00079112 E106                       	smpsAlterNote       $06
00079114 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079118 E109                       	smpsAlterNote       $09
0007911A E701                       	dc.b	smpsNoAttack, $01
0007911C E10F                       	smpsAlterNote       $0F
0007911E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079122 E109                       	smpsAlterNote       $09
00079124 E701                       	dc.b	smpsNoAttack, $01
00079126 E106                       	smpsAlterNote       $06
00079128 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007912C E10C                       	smpsAlterNote       $0C
0007912E E701                       	dc.b	smpsNoAttack, $01
00079130 E110                       	smpsAlterNote       $10
00079132 E701                       	dc.b	smpsNoAttack, $01
00079134 E10F                       	smpsAlterNote       $0F
00079136 E701                       	dc.b	smpsNoAttack, $01
00079138 E109                       	smpsAlterNote       $09
0007913A E701                       	dc.b	smpsNoAttack, $01
0007913C E105                       	smpsAlterNote       $05
0007913E E701                       	dc.b	smpsNoAttack, $01
00079140 E106                       	smpsAlterNote       $06
00079142 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
00079146 E103                       	smpsAlterNote       $03
00079148 E701                       	dc.b	smpsNoAttack, $01
0007914A E1FF                       	smpsAlterNote       $FF
0007914C E701                       	dc.b	smpsNoAttack, $01
0007914E E103                       	smpsAlterNote       $03
00079150 E701                       	dc.b	smpsNoAttack, $01
00079152 E106                       	smpsAlterNote       $06
00079154 E701                       	dc.b	smpsNoAttack, $01
00079156 E10A                       	smpsAlterNote       $0A
00079158 E701                       	dc.b	smpsNoAttack, $01
0007915A E106                       	smpsAlterNote       $06
0007915C E701                       	dc.b	smpsNoAttack, $01
0007915E E100                       	smpsAlterNote       $00
00079160 E701                       	dc.b	smpsNoAttack, $01
00079162 E1FF                       	smpsAlterNote       $FF
00079164 E701                       	dc.b	smpsNoAttack, $01
00079166 E103                       	smpsAlterNote       $03
00079168 E701                       	dc.b	smpsNoAttack, $01
0007916A E109                       	smpsAlterNote       $09
0007916C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079170 E106                       	smpsAlterNote       $06
00079172 E701                       	dc.b	smpsNoAttack, $01
00079174 E100                       	smpsAlterNote       $00
00079176 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007917A E107                       	smpsAlterNote       $07
0007917C BF0E                       	dc.b	nD5, $0E
0007917E E101                       	smpsAlterNote       $01
00079180 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079184 E107                       	smpsAlterNote       $07
00079186 E701                       	dc.b	smpsNoAttack, $01
00079188 E10A                       	smpsAlterNote       $0A
0007918A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007918E E104                       	smpsAlterNote       $04
00079190 E701                       	dc.b	smpsNoAttack, $01
00079192 E100                       	smpsAlterNote       $00
00079194 E701                       	dc.b	smpsNoAttack, $01
00079196 E101                       	smpsAlterNote       $01
00079198 E701                       	dc.b	smpsNoAttack, $01
0007919A E107                       	smpsAlterNote       $07
0007919C E701                       	dc.b	smpsNoAttack, $01
0007919E E10B                       	smpsAlterNote       $0B
000791A0 E701                       	dc.b	smpsNoAttack, $01
000791A2 E107                       	smpsAlterNote       $07
000791A4 E701                       	dc.b	smpsNoAttack, $01
000791A6 E104                       	smpsAlterNote       $04
000791A8 E701                       	dc.b	smpsNoAttack, $01
000791AA E100                       	smpsAlterNote       $00
000791AC E701                       	dc.b	smpsNoAttack, $01
000791AE E101                       	smpsAlterNote       $01
000791B0 8001                       	dc.b	nRst, $01
000791B2 E108                       	smpsAlterNote       $08
000791B4 C10C                       	dc.b	nE5, $0C
000791B6 E109                       	smpsAlterNote       $09
000791B8 C201 8001                  	dc.b	nF5, $01, nRst, $01
000791BC E10A                       	smpsAlterNote       $0A
000791BE 8001                       	dc.b	nRst, $01
000791C0 E109                       	smpsAlterNote       $09
000791C2 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000791C6 E106                       	smpsAlterNote       $06
000791C8 E701                       	dc.b	smpsNoAttack, $01
000791CA E102                       	smpsAlterNote       $02
000791CC E701                       	dc.b	smpsNoAttack, $01
000791CE E103                       	smpsAlterNote       $03
000791D0 E701                       	dc.b	smpsNoAttack, $01
000791D2 E109                       	smpsAlterNote       $09
000791D4 E701                       	dc.b	smpsNoAttack, $01
000791D6 E10D                       	smpsAlterNote       $0D
000791D8 E701                       	dc.b	smpsNoAttack, $01
000791DA E109                       	smpsAlterNote       $09
000791DC E701                       	dc.b	smpsNoAttack, $01
000791DE E106                       	smpsAlterNote       $06
000791E0 E701                       	dc.b	smpsNoAttack, $01
000791E2 E102                       	smpsAlterNote       $02
000791E4 E701                       	dc.b	smpsNoAttack, $01
000791E6 E106                       	smpsAlterNote       $06
000791E8 E701                       	dc.b	smpsNoAttack, $01
000791EA E10C                       	smpsAlterNote       $0C
000791EC E701                       	dc.b	smpsNoAttack, $01
000791EE E10D                       	smpsAlterNote       $0D
000791F0 E701                       	dc.b	smpsNoAttack, $01
000791F2 E109                       	smpsAlterNote       $09
000791F4 C40D                       	dc.b	nG5, $0D
000791F6 E106                       	smpsAlterNote       $06
000791F8 E701                       	dc.b	smpsNoAttack, $01
000791FA E102                       	smpsAlterNote       $02
000791FC E701                       	dc.b	smpsNoAttack, $01
000791FE E103                       	smpsAlterNote       $03
00079200 E701                       	dc.b	smpsNoAttack, $01
00079202 E109                       	smpsAlterNote       $09
00079204 E701                       	dc.b	smpsNoAttack, $01
00079206 E108                       	smpsAlterNote       $08
00079208 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
00079214 E109                       	smpsAlterNote       $09
00079216 C20D                       	dc.b	nF5, $0D
00079218 E106                       	smpsAlterNote       $06
0007921A E701                       	dc.b	smpsNoAttack, $01
0007921C E102                       	smpsAlterNote       $02
0007921E E701                       	dc.b	smpsNoAttack, $01
00079220 E106                       	smpsAlterNote       $06
00079222 E701                       	dc.b	smpsNoAttack, $01
00079224 E109                       	smpsAlterNote       $09
00079226 E701                       	dc.b	smpsNoAttack, $01
00079228 E10D                       	smpsAlterNote       $0D
0007922A E701                       	dc.b	smpsNoAttack, $01
0007922C E109                       	smpsAlterNote       $09
0007922E E701                       	dc.b	smpsNoAttack, $01
00079230 E103                       	smpsAlterNote       $03
00079232 E701                       	dc.b	smpsNoAttack, $01
00079234 E102                       	smpsAlterNote       $02
00079236 E701                       	dc.b	smpsNoAttack, $01
00079238 E106                       	smpsAlterNote       $06
0007923A E701                       	dc.b	smpsNoAttack, $01
0007923C E10C                       	smpsAlterNote       $0C
0007923E E701                       	dc.b	smpsNoAttack, $01
00079240 E10D                       	smpsAlterNote       $0D
00079242 8001                       	dc.b	nRst, $01
00079244 E112                       	smpsAlterNote       $12
00079246 C401                       	dc.b	nG5, $01
00079248 E1EB                       	smpsAlterNote       $EB
0007924A E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
0007924D E1FD                       	smpsAlterNote       $FD
0007924F E701                       	dc.b	smpsNoAttack, $01
00079251 E10F                       	smpsAlterNote       $0F
00079253 E701                       	dc.b	smpsNoAttack, $01
00079255 E118                       	smpsAlterNote       $18
00079257 E701                       	dc.b	smpsNoAttack, $01
00079259 E1ED                       	smpsAlterNote       $ED
0007925B E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0007925E E1FF                       	smpsAlterNote       $FF
00079260 E701                       	dc.b	smpsNoAttack, $01
00079262 E10B                       	smpsAlterNote       $0B
00079264 E703                       	dc.b	smpsNoAttack, $03
00079266 E109                       	smpsAlterNote       $09
00079268 C407                       	dc.b	nG5, $07
0007926A E108                       	smpsAlterNote       $08
0007926C C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
00079278 E109                       	smpsAlterNote       $09
0007927A C20D                       	dc.b	nF5, $0D
0007927C E103                       	smpsAlterNote       $03
0007927E E701                       	dc.b	smpsNoAttack, $01
00079280 E102                       	smpsAlterNote       $02
00079282 E701                       	dc.b	smpsNoAttack, $01
00079284 E106                       	smpsAlterNote       $06
00079286 E701                       	dc.b	smpsNoAttack, $01
00079288 E10C                       	smpsAlterNote       $0C
0007928A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007928E E109                       	smpsAlterNote       $09
00079290 E701                       	dc.b	smpsNoAttack, $01
00079292 E103                       	smpsAlterNote       $03
00079294 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079298 E109                       	smpsAlterNote       $09
0007929A E701                       	dc.b	smpsNoAttack, $01
0007929C E10C                       	smpsAlterNote       $0C
0007929E E701                       	dc.b	smpsNoAttack, $01
000792A0 E10D                       	smpsAlterNote       $0D
000792A2 8001                       	dc.b	nRst, $01
000792A4 E10B                       	smpsAlterNote       $0B
000792A6 C609 8001                  	dc.b	nA5, $09, nRst, $01
000792AA E109                       	smpsAlterNote       $09
000792AC B806 8001                  	dc.b	nG4, $06, nRst, $01
000792B0 E108                       	smpsAlterNote       $08
000792B2 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000792BE 8001                       	dc.b	nRst, $01
000792C0 E109                       	smpsAlterNote       $09
000792C2 C20D                       	dc.b	nF5, $0D
000792C4 E103                       	smpsAlterNote       $03
000792C6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000792CA E106                       	smpsAlterNote       $06
000792CC E701                       	dc.b	smpsNoAttack, $01
000792CE E10C                       	smpsAlterNote       $0C
000792D0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000792D4 E106                       	smpsAlterNote       $06
000792D6 E701                       	dc.b	smpsNoAttack, $01
000792D8 E103                       	smpsAlterNote       $03
000792DA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000792DE E109                       	smpsAlterNote       $09
000792E0 E701                       	dc.b	smpsNoAttack, $01
000792E2 E10D                       	smpsAlterNote       $0D
000792E4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000792EA E108                       	smpsAlterNote       $08
000792EC E6FF                       	smpsAlterVol        $FF
000792EE A806                       	dc.b	nEb3, $06
000792F0 E10C                       	smpsAlterNote       $0C
000792F2 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000792F6 E108                       	smpsAlterNote       $08
000792F8 A803                       	dc.b	nEb3, $03
000792FA E109                       	smpsAlterNote       $09
000792FC AC03 8001                  	dc.b	nG3, $03, nRst, $01
00079300 E10C                       	smpsAlterNote       $0C
00079302 AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
0007930C E109                       	smpsAlterNote       $09
0007930E E602                       	smpsAlterVol        $02
00079310 B604                       	dc.b	nF4, $04
00079312 E602                       	smpsAlterVol        $02
00079314 F6F1 AA                    	smpsJump            music84_Jump02
00079317                            
00079317                            ; FM4 Data
00079317                            music84_FM4:
00079319 E040                       	smpsPan             panRight, $00
0007931B 8003                       	dc.b	nRst, $03
0007931D E10F                       	smpsAlterNote       $0F
0007931F C603 8008                  	dc.b	nA5, $03, nRst, $08
00079323 E10D                       	smpsAlterNote       $0D
00079325 C403 800A                  	dc.b	nG5, $03, nRst, $0A
00079329 E10C                       	smpsAlterNote       $0C
0007932B C103 8004                  	dc.b	nE5, $03, nRst, $04
00079331 E6FE                       	smpsAlterVol        $FE
00079333 E110                       	smpsAlterNote       $10
00079335 C703 8001                  	dc.b	nBb5, $03, nRst, $01
00079339 E10F                       	smpsAlterNote       $0F
0007933B C602 8001                  	dc.b	nA5, $02, nRst, $01
0007933F E10D                       	smpsAlterNote       $0D
00079341 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
0007934A E10C                       	smpsAlterNote       $0C
0007934C C103                       	dc.b	nE5, $03
0007934E E10A                       	smpsAlterNote       $0A
00079350 BD03 8001                  	dc.b	nC5, $03, nRst, $01
00079356 03                         	dc.b	$03
00079357                            
00079357                            music84_Jump01:
00079357 E10B                       	smpsAlterNote       $0B
00079359 BF03 8001                  	dc.b	nD5, $03, nRst, $01
0007935D E10C                       	smpsAlterNote       $0C
0007935F C102 8001                  	dc.b	nE5, $02, nRst, $01
00079363 E10D                       	smpsAlterNote       $0D
00079365 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
0007936F E10B                       	smpsAlterNote       $0B
00079371 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
00079375 E107                       	smpsAlterNote       $07
00079377 E701                       	dc.b	smpsNoAttack, $01
00079379 E103                       	smpsAlterNote       $03
0007937B E701                       	dc.b	smpsNoAttack, $01
0007937D E104                       	smpsAlterNote       $04
0007937F E701                       	dc.b	smpsNoAttack, $01
00079381 E10A                       	smpsAlterNote       $0A
00079383 E701                       	dc.b	smpsNoAttack, $01
00079385 E10E                       	smpsAlterNote       $0E
00079387 E701                       	dc.b	smpsNoAttack, $01
00079389 E10A                       	smpsAlterNote       $0A
0007938B E701                       	dc.b	smpsNoAttack, $01
0007938D E107                       	smpsAlterNote       $07
0007938F E701                       	dc.b	smpsNoAttack, $01
00079391 E104                       	smpsAlterNote       $04
00079393 8001                       	dc.b	nRst, $01
00079395 E110                       	smpsAlterNote       $10
00079397 C703                       	dc.b	nBb5, $03
00079399 E10F                       	smpsAlterNote       $0F
0007939B C603 8001                  	dc.b	nA5, $03, nRst, $01
0007939F E10D                       	smpsAlterNote       $0D
000793A1 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
000793A7 E10C                       	smpsAlterNote       $0C
000793A9 E701                       	dc.b	smpsNoAttack, $01
000793AB E108                       	smpsAlterNote       $08
000793AD E701                       	dc.b	smpsNoAttack, $01
000793AF E10C                       	smpsAlterNote       $0C
000793B1 E701                       	dc.b	smpsNoAttack, $01
000793B3 E10F                       	smpsAlterNote       $0F
000793B5 E701                       	dc.b	smpsNoAttack, $01
000793B7 E113                       	smpsAlterNote       $13
000793B9 E701                       	dc.b	smpsNoAttack, $01
000793BB E10F                       	smpsAlterNote       $0F
000793BD E701                       	dc.b	smpsNoAttack, $01
000793BF E109                       	smpsAlterNote       $09
000793C1 E701                       	dc.b	smpsNoAttack, $01
000793C3 E108                       	smpsAlterNote       $08
000793C5 E701                       	dc.b	smpsNoAttack, $01
000793C7 E10C                       	smpsAlterNote       $0C
000793C9 E701                       	dc.b	smpsNoAttack, $01
000793CB E112                       	smpsAlterNote       $12
000793CD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000793D1 E10C                       	smpsAlterNote       $0C
000793D3 E701                       	dc.b	smpsNoAttack, $01
000793D5 E109                       	smpsAlterNote       $09
000793D7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000793DB E10F                       	smpsAlterNote       $0F
000793DD E701                       	dc.b	smpsNoAttack, $01
000793DF E113                       	smpsAlterNote       $13
000793E1 E701                       	dc.b	smpsNoAttack, $01
000793E3 E112                       	smpsAlterNote       $12
000793E5 E701                       	dc.b	smpsNoAttack, $01
000793E7 E10C                       	smpsAlterNote       $0C
000793E9 E701                       	dc.b	smpsNoAttack, $01
000793EB E108                       	smpsAlterNote       $08
000793ED E701                       	dc.b	smpsNoAttack, $01
000793EF E10C                       	smpsAlterNote       $0C
000793F1 E701                       	dc.b	smpsNoAttack, $01
000793F3 E10F                       	smpsAlterNote       $0F
000793F5 E701                       	dc.b	smpsNoAttack, $01
000793F7 E113                       	smpsAlterNote       $13
000793F9 E701                       	dc.b	smpsNoAttack, $01
000793FB E10F                       	smpsAlterNote       $0F
000793FD E701                       	dc.b	smpsNoAttack, $01
000793FF E109                       	smpsAlterNote       $09
00079401 E701                       	dc.b	smpsNoAttack, $01
00079403 E108                       	smpsAlterNote       $08
00079405 E701                       	dc.b	smpsNoAttack, $01
00079407 E10C                       	smpsAlterNote       $0C
00079409 E701                       	dc.b	smpsNoAttack, $01
0007940B E112                       	smpsAlterNote       $12
0007940D E701                       	dc.b	smpsNoAttack, $01
0007940F E113                       	smpsAlterNote       $13
00079411 800F                       	dc.b	nRst, $0F
00079413 E10B                       	smpsAlterNote       $0B
00079415 BF03                       	dc.b	nD5, $03
00079417 E10C                       	smpsAlterNote       $0C
00079419 C103 8001                  	dc.b	nE5, $03, nRst, $01
0007941D E10D                       	smpsAlterNote       $0D
0007941F C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
00079427 E10B                       	smpsAlterNote       $0B
00079429 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
00079433 E110                       	smpsAlterNote       $10
00079435 C704                       	dc.b	nBb5, $04
00079437 E10F                       	smpsAlterNote       $0F
00079439 C604 8001                  	dc.b	nA5, $04, nRst, $01
0007943D E10D                       	smpsAlterNote       $0D
0007943F C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00079445 E109                       	smpsAlterNote       $09
00079447 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007944B E10F                       	smpsAlterNote       $0F
0007944D E701                       	dc.b	smpsNoAttack, $01
0007944F E112                       	smpsAlterNote       $12
00079451 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079455 E10C                       	smpsAlterNote       $0C
00079457 E701                       	dc.b	smpsNoAttack, $01
00079459 E108                       	smpsAlterNote       $08
0007945B E701                       	dc.b	smpsNoAttack, $01
0007945D E109                       	smpsAlterNote       $09
0007945F E701                       	dc.b	smpsNoAttack, $01
00079461 E10F                       	smpsAlterNote       $0F
00079463 E701                       	dc.b	smpsNoAttack, $01
00079465 E113                       	smpsAlterNote       $13
00079467 E701                       	dc.b	smpsNoAttack, $01
00079469 E10F                       	smpsAlterNote       $0F
0007946B E701                       	dc.b	smpsNoAttack, $01
0007946D E10C                       	smpsAlterNote       $0C
0007946F E701                       	dc.b	smpsNoAttack, $01
00079471 E108                       	smpsAlterNote       $08
00079473 E701                       	dc.b	smpsNoAttack, $01
00079475 E10C                       	smpsAlterNote       $0C
00079477 E701                       	dc.b	smpsNoAttack, $01
00079479 E112                       	smpsAlterNote       $12
0007947B E701                       	dc.b	smpsNoAttack, $01
0007947D E113                       	smpsAlterNote       $13
0007947F E701                       	dc.b	smpsNoAttack, $01
00079481 E10F                       	smpsAlterNote       $0F
00079483 E701                       	dc.b	smpsNoAttack, $01
00079485 E109                       	smpsAlterNote       $09
00079487 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007948B E10C                       	smpsAlterNote       $0C
0007948D E701                       	dc.b	smpsNoAttack, $01
0007948F E112                       	smpsAlterNote       $12
00079491 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079495 E10C                       	smpsAlterNote       $0C
00079497 E701                       	dc.b	smpsNoAttack, $01
00079499 E109                       	smpsAlterNote       $09
0007949B E701                       	dc.b	smpsNoAttack, $01
0007949D E10D                       	smpsAlterNote       $0D
0007949F C401 8001                  	dc.b	nG5, $01, nRst, $01
000794A3 E10F                       	smpsAlterNote       $0F
000794A5 C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
000794AF E10D                       	smpsAlterNote       $0D
000794B1 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000794B7 E10B                       	smpsAlterNote       $0B
000794B9 BF0D                       	dc.b	nD5, $0D
000794BB E108                       	smpsAlterNote       $08
000794BD E701                       	dc.b	smpsNoAttack, $01
000794BF E104                       	smpsAlterNote       $04
000794C1 E701                       	dc.b	smpsNoAttack, $01
000794C3 E108                       	smpsAlterNote       $08
000794C5 E701                       	dc.b	smpsNoAttack, $01
000794C7 E10B                       	smpsAlterNote       $0B
000794C9 E701                       	dc.b	smpsNoAttack, $01
000794CB E10F                       	smpsAlterNote       $0F
000794CD E701                       	dc.b	smpsNoAttack, $01
000794CF E10B                       	smpsAlterNote       $0B
000794D1 E701                       	dc.b	smpsNoAttack, $01
000794D3 E105                       	smpsAlterNote       $05
000794D5 E701                       	dc.b	smpsNoAttack, $01
000794D7 E104                       	smpsAlterNote       $04
000794D9 E701                       	dc.b	smpsNoAttack, $01
000794DB E108                       	smpsAlterNote       $08
000794DD E701                       	dc.b	smpsNoAttack, $01
000794DF E10E                       	smpsAlterNote       $0E
000794E1 E701                       	dc.b	smpsNoAttack, $01
000794E3 E10F                       	smpsAlterNote       $0F
000794E5 8001                       	dc.b	nRst, $01
000794E7 E10C                       	smpsAlterNote       $0C
000794E9 C101                       	dc.b	nE5, $01
000794EB E10D                       	smpsAlterNote       $0D
000794ED C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
000794F3 E10F                       	smpsAlterNote       $0F
000794F5 C606 8001                  	dc.b	nA5, $06, nRst, $01
000794F9 E10C                       	smpsAlterNote       $0C
000794FB CD06 8001                  	dc.b	nE6, $06, nRst, $01
000794FF E10D                       	smpsAlterNote       $0D
00079501 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00079505 E10C                       	smpsAlterNote       $0C
00079507 CD03                       	dc.b	nE6, $03
00079509 E10A                       	smpsAlterNote       $0A
0007950B C903 8001                  	dc.b	nC6, $03, nRst, $01
0007950F E10D                       	smpsAlterNote       $0D
00079511 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
00079519 E109                       	smpsAlterNote       $09
0007951B E701                       	dc.b	smpsNoAttack, $01
0007951D E10D                       	smpsAlterNote       $0D
0007951F E701                       	dc.b	smpsNoAttack, $01
00079521 E110                       	smpsAlterNote       $10
00079523 E701                       	dc.b	smpsNoAttack, $01
00079525 E114                       	smpsAlterNote       $14
00079527 E701                       	dc.b	smpsNoAttack, $01
00079529 E110                       	smpsAlterNote       $10
0007952B E701                       	dc.b	smpsNoAttack, $01
0007952D E10A                       	smpsAlterNote       $0A
0007952F E701                       	dc.b	smpsNoAttack, $01
00079531 E109                       	smpsAlterNote       $09
00079533 E701                       	dc.b	smpsNoAttack, $01
00079535 E10D                       	smpsAlterNote       $0D
00079537 E701                       	dc.b	smpsNoAttack, $01
00079539 E113                       	smpsAlterNote       $13
0007953B E701                       	dc.b	smpsNoAttack, $01
0007953D E114                       	smpsAlterNote       $14
0007953F 8001                       	dc.b	nRst, $01
00079541 E10F                       	smpsAlterNote       $0F
00079543 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
00079549 E10C                       	smpsAlterNote       $0C
0007954B E701                       	dc.b	smpsNoAttack, $01
0007954D E108                       	smpsAlterNote       $08
0007954F E701                       	dc.b	smpsNoAttack, $01
00079551 E10C                       	smpsAlterNote       $0C
00079553 E701                       	dc.b	smpsNoAttack, $01
00079555 E112                       	smpsAlterNote       $12
00079557 E701                       	dc.b	smpsNoAttack, $01
00079559 E113                       	smpsAlterNote       $13
0007955B E701                       	dc.b	smpsNoAttack, $01
0007955D E10F                       	smpsAlterNote       $0F
0007955F E701                       	dc.b	smpsNoAttack, $01
00079561 E109                       	smpsAlterNote       $09
00079563 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079567 E10C                       	smpsAlterNote       $0C
00079569 E701                       	dc.b	smpsNoAttack, $01
0007956B E112                       	smpsAlterNote       $12
0007956D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079571 E10C                       	smpsAlterNote       $0C
00079573 E701                       	dc.b	smpsNoAttack, $01
00079575 E109                       	smpsAlterNote       $09
00079577 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007957B E10F                       	smpsAlterNote       $0F
0007957D E701                       	dc.b	smpsNoAttack, $01
0007957F E113                       	smpsAlterNote       $13
00079581 E701                       	dc.b	smpsNoAttack, $01
00079583 E112                       	smpsAlterNote       $12
00079585 E701                       	dc.b	smpsNoAttack, $01
00079587 E10C                       	smpsAlterNote       $0C
00079589 E701                       	dc.b	smpsNoAttack, $01
0007958B E108                       	smpsAlterNote       $08
0007958D E701                       	dc.b	smpsNoAttack, $01
0007958F E10C                       	smpsAlterNote       $0C
00079591 E701                       	dc.b	smpsNoAttack, $01
00079593 E10F                       	smpsAlterNote       $0F
00079595 E701                       	dc.b	smpsNoAttack, $01
00079597 E113                       	smpsAlterNote       $13
00079599 E701                       	dc.b	smpsNoAttack, $01
0007959B E10F                       	smpsAlterNote       $0F
0007959D E701                       	dc.b	smpsNoAttack, $01
0007959F E109                       	smpsAlterNote       $09
000795A1 E701                       	dc.b	smpsNoAttack, $01
000795A3 E108                       	smpsAlterNote       $08
000795A5 E701                       	dc.b	smpsNoAttack, $01
000795A7 E10C                       	smpsAlterNote       $0C
000795A9 E701                       	dc.b	smpsNoAttack, $01
000795AB E112                       	smpsAlterNote       $12
000795AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000795B1 E10F                       	smpsAlterNote       $0F
000795B3 E701                       	dc.b	smpsNoAttack, $01
000795B5 E109                       	smpsAlterNote       $09
000795B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000795BB E10F                       	smpsAlterNote       $0F
000795BD E701                       	dc.b	smpsNoAttack, $01
000795BF E113                       	smpsAlterNote       $13
000795C1 E701                       	dc.b	smpsNoAttack, $01
000795C3 E112                       	smpsAlterNote       $12
000795C5 E701                       	dc.b	smpsNoAttack, $01
000795C7 E10C                       	smpsAlterNote       $0C
000795C9 E701                       	dc.b	smpsNoAttack, $01
000795CB E108                       	smpsAlterNote       $08
000795CD E701                       	dc.b	smpsNoAttack, $01
000795CF E10C                       	smpsAlterNote       $0C
000795D1 E701                       	dc.b	smpsNoAttack, $01
000795D3 E10F                       	smpsAlterNote       $0F
000795D5 E701                       	dc.b	smpsNoAttack, $01
000795D7 E113                       	smpsAlterNote       $13
000795D9 E701                       	dc.b	smpsNoAttack, $01
000795DB E10F                       	smpsAlterNote       $0F
000795DD E701                       	dc.b	smpsNoAttack, $01
000795DF E109                       	smpsAlterNote       $09
000795E1 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000795E5 E10F                       	smpsAlterNote       $0F
000795E7 C60D                       	dc.b	nA5, $0D
000795E9 E109                       	smpsAlterNote       $09
000795EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000795EF E10C                       	smpsAlterNote       $0C
000795F1 E701                       	dc.b	smpsNoAttack, $01
000795F3 E112                       	smpsAlterNote       $12
000795F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000795F9 E10C                       	smpsAlterNote       $0C
000795FB E701                       	dc.b	smpsNoAttack, $01
000795FD E109                       	smpsAlterNote       $09
000795FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079603 E10F                       	smpsAlterNote       $0F
00079605 E701                       	dc.b	smpsNoAttack, $01
00079607 E113                       	smpsAlterNote       $13
00079609 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007960F E10D                       	smpsAlterNote       $0D
00079611 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
00079619 E10C                       	smpsAlterNote       $0C
0007961B C103 800E                  	dc.b	nE5, $03, nRst, $0E
00079621 E6FF                       	smpsAlterVol        $FF
00079623 E10B                       	smpsAlterNote       $0B
00079625 BF03 8001                  	dc.b	nD5, $03, nRst, $01
00079629 E10C                       	smpsAlterNote       $0C
0007962B C103                       	dc.b	nE5, $03
0007962D E10D                       	smpsAlterNote       $0D
0007962F C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00079639 E10B                       	smpsAlterNote       $0B
0007963B BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
0007963F E107                       	smpsAlterNote       $07
00079641 E701                       	dc.b	smpsNoAttack, $01
00079643 E104                       	smpsAlterNote       $04
00079645 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079649 E10A                       	smpsAlterNote       $0A
0007964B E701                       	dc.b	smpsNoAttack, $01
0007964D E10D                       	smpsAlterNote       $0D
0007964F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079653 E107                       	smpsAlterNote       $07
00079655 E701                       	dc.b	smpsNoAttack, $01
00079657 E104                       	smpsAlterNote       $04
00079659 8001                       	dc.b	nRst, $01
0007965B E110                       	smpsAlterNote       $10
0007965D C703                       	dc.b	nBb5, $03
0007965F E10F                       	smpsAlterNote       $0F
00079661 C603 8001                  	dc.b	nA5, $03, nRst, $01
00079665 E10D                       	smpsAlterNote       $0D
00079667 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
0007966B E10C                       	smpsAlterNote       $0C
0007966D E701                       	dc.b	smpsNoAttack, $01
0007966F E108                       	smpsAlterNote       $08
00079671 E701                       	dc.b	smpsNoAttack, $01
00079673 E109                       	smpsAlterNote       $09
00079675 E701                       	dc.b	smpsNoAttack, $01
00079677 E10F                       	smpsAlterNote       $0F
00079679 E701                       	dc.b	smpsNoAttack, $01
0007967B E113                       	smpsAlterNote       $13
0007967D E701                       	dc.b	smpsNoAttack, $01
0007967F E10F                       	smpsAlterNote       $0F
00079681 E701                       	dc.b	smpsNoAttack, $01
00079683 E10C                       	smpsAlterNote       $0C
00079685 E701                       	dc.b	smpsNoAttack, $01
00079687 E108                       	smpsAlterNote       $08
00079689 E701                       	dc.b	smpsNoAttack, $01
0007968B E10C                       	smpsAlterNote       $0C
0007968D E701                       	dc.b	smpsNoAttack, $01
0007968F E112                       	smpsAlterNote       $12
00079691 E701                       	dc.b	smpsNoAttack, $01
00079693 E113                       	smpsAlterNote       $13
00079695 E701                       	dc.b	smpsNoAttack, $01
00079697 E10F                       	smpsAlterNote       $0F
00079699 E701                       	dc.b	smpsNoAttack, $01
0007969B E109                       	smpsAlterNote       $09
0007969D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000796A1 E10C                       	smpsAlterNote       $0C
000796A3 E701                       	dc.b	smpsNoAttack, $01
000796A5 E112                       	smpsAlterNote       $12
000796A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000796AB E10C                       	smpsAlterNote       $0C
000796AD E701                       	dc.b	smpsNoAttack, $01
000796AF E109                       	smpsAlterNote       $09
000796B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000796B5 E10F                       	smpsAlterNote       $0F
000796B7 E701                       	dc.b	smpsNoAttack, $01
000796B9 E113                       	smpsAlterNote       $13
000796BB E701                       	dc.b	smpsNoAttack, $01
000796BD E112                       	smpsAlterNote       $12
000796BF E701                       	dc.b	smpsNoAttack, $01
000796C1 E10C                       	smpsAlterNote       $0C
000796C3 E701                       	dc.b	smpsNoAttack, $01
000796C5 E108                       	smpsAlterNote       $08
000796C7 E701                       	dc.b	smpsNoAttack, $01
000796C9 E10C                       	smpsAlterNote       $0C
000796CB E701                       	dc.b	smpsNoAttack, $01
000796CD E10F                       	smpsAlterNote       $0F
000796CF E701                       	dc.b	smpsNoAttack, $01
000796D1 E113                       	smpsAlterNote       $13
000796D3 E701                       	dc.b	smpsNoAttack, $01
000796D5 E10F                       	smpsAlterNote       $0F
000796D7 BA03 8001                  	dc.b	nA4, $03, nRst, $01
000796DB E110                       	smpsAlterNote       $10
000796DD BB03                       	dc.b	nBb4, $03
000796DF E10F                       	smpsAlterNote       $0F
000796E1 BA06 8001                  	dc.b	nA4, $06, nRst, $01
000796E5 E10B                       	smpsAlterNote       $0B
000796E7 BF03                       	dc.b	nD5, $03
000796E9 E10C                       	smpsAlterNote       $0C
000796EB C103 8001                  	dc.b	nE5, $03, nRst, $01
000796EF E10D                       	smpsAlterNote       $0D
000796F1 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000796FB E10B                       	smpsAlterNote       $0B
000796FD BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00079709 E110                       	smpsAlterNote       $10
0007970B C704 8001                  	dc.b	nBb5, $04, nRst, $01
0007970F E10F                       	smpsAlterNote       $0F
00079711 C604                       	dc.b	nA5, $04
00079713 E10D                       	smpsAlterNote       $0D
00079715 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
0007971B E109                       	smpsAlterNote       $09
0007971D E701                       	dc.b	smpsNoAttack, $01
0007971F E108                       	smpsAlterNote       $08
00079721 E701                       	dc.b	smpsNoAttack, $01
00079723 E10C                       	smpsAlterNote       $0C
00079725 E701                       	dc.b	smpsNoAttack, $01
00079727 E112                       	smpsAlterNote       $12
00079729 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007972D E10F                       	smpsAlterNote       $0F
0007972F E701                       	dc.b	smpsNoAttack, $01
00079731 E109                       	smpsAlterNote       $09
00079733 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079737 E10F                       	smpsAlterNote       $0F
00079739 E701                       	dc.b	smpsNoAttack, $01
0007973B E112                       	smpsAlterNote       $12
0007973D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079741 E10C                       	smpsAlterNote       $0C
00079743 E701                       	dc.b	smpsNoAttack, $01
00079745 E108                       	smpsAlterNote       $08
00079747 E701                       	dc.b	smpsNoAttack, $01
00079749 E109                       	smpsAlterNote       $09
0007974B E701                       	dc.b	smpsNoAttack, $01
0007974D E10F                       	smpsAlterNote       $0F
0007974F E701                       	dc.b	smpsNoAttack, $01
00079751 E113                       	smpsAlterNote       $13
00079753 E701                       	dc.b	smpsNoAttack, $01
00079755 E10F                       	smpsAlterNote       $0F
00079757 E701                       	dc.b	smpsNoAttack, $01
00079759 E10C                       	smpsAlterNote       $0C
0007975B E701                       	dc.b	smpsNoAttack, $01
0007975D E108                       	smpsAlterNote       $08
0007975F E701                       	dc.b	smpsNoAttack, $01
00079761 E10C                       	smpsAlterNote       $0C
00079763 E701                       	dc.b	smpsNoAttack, $01
00079765 E112                       	smpsAlterNote       $12
00079767 E701                       	dc.b	smpsNoAttack, $01
00079769 E113                       	smpsAlterNote       $13
0007976B E701                       	dc.b	smpsNoAttack, $01
0007976D E10F                       	smpsAlterNote       $0F
0007976F E701                       	dc.b	smpsNoAttack, $01
00079771 E109                       	smpsAlterNote       $09
00079773 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079777 E10C                       	smpsAlterNote       $0C
00079779 E701                       	dc.b	smpsNoAttack, $01
0007977B E112                       	smpsAlterNote       $12
0007977D E701                       	dc.b	smpsNoAttack, $01
0007977F E113                       	smpsAlterNote       $13
00079781 8001                       	dc.b	nRst, $01
00079783 E10F                       	smpsAlterNote       $0F
00079785 C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
00079791 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
00079799 E10D                       	smpsAlterNote       $0D
0007979B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000797A1 E10B                       	smpsAlterNote       $0B
000797A3 BF0D                       	dc.b	nD5, $0D
000797A5 E108                       	smpsAlterNote       $08
000797A7 E701                       	dc.b	smpsNoAttack, $01
000797A9 E104                       	smpsAlterNote       $04
000797AB E701                       	dc.b	smpsNoAttack, $01
000797AD E105                       	smpsAlterNote       $05
000797AF E701                       	dc.b	smpsNoAttack, $01
000797B1 E10B                       	smpsAlterNote       $0B
000797B3 E701                       	dc.b	smpsNoAttack, $01
000797B5 E10F                       	smpsAlterNote       $0F
000797B7 E701                       	dc.b	smpsNoAttack, $01
000797B9 E10B                       	smpsAlterNote       $0B
000797BB E701                       	dc.b	smpsNoAttack, $01
000797BD E108                       	smpsAlterNote       $08
000797BF E701                       	dc.b	smpsNoAttack, $01
000797C1 E104                       	smpsAlterNote       $04
000797C3 E701                       	dc.b	smpsNoAttack, $01
000797C5 E108                       	smpsAlterNote       $08
000797C7 E701                       	dc.b	smpsNoAttack, $01
000797C9 E10E                       	smpsAlterNote       $0E
000797CB E701                       	dc.b	smpsNoAttack, $01
000797CD E10F                       	smpsAlterNote       $0F
000797CF E701                       	dc.b	smpsNoAttack, $01
000797D1 E10C                       	smpsAlterNote       $0C
000797D3 C101                       	dc.b	nE5, $01
000797D5 E10D                       	smpsAlterNote       $0D
000797D7 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000797DF E10F                       	smpsAlterNote       $0F
000797E1 C607                       	dc.b	nA5, $07
000797E3 E10C                       	smpsAlterNote       $0C
000797E5 CD07                       	dc.b	nE6, $07
000797E7 E10D                       	smpsAlterNote       $0D
000797E9 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000797ED E10C                       	smpsAlterNote       $0C
000797EF CD03                       	dc.b	nE6, $03
000797F1 E10A                       	smpsAlterNote       $0A
000797F3 C903 8001                  	dc.b	nC6, $03, nRst, $01
000797F7 E10D                       	smpsAlterNote       $0D
000797F9 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000797FF E10A                       	smpsAlterNote       $0A
00079801 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079805 E110                       	smpsAlterNote       $10
00079807 E701                       	dc.b	smpsNoAttack, $01
00079809 E114                       	smpsAlterNote       $14
0007980B E701                       	dc.b	smpsNoAttack, $01
0007980D E113                       	smpsAlterNote       $13
0007980F E701                       	dc.b	smpsNoAttack, $01
00079811 E10D                       	smpsAlterNote       $0D
00079813 E701                       	dc.b	smpsNoAttack, $01
00079815 E109                       	smpsAlterNote       $09
00079817 E701                       	dc.b	smpsNoAttack, $01
00079819 E10D                       	smpsAlterNote       $0D
0007981B E701                       	dc.b	smpsNoAttack, $01
0007981D E110                       	smpsAlterNote       $10
0007981F E701                       	dc.b	smpsNoAttack, $01
00079821 E114                       	smpsAlterNote       $14
00079823 E701                       	dc.b	smpsNoAttack, $01
00079825 E10F                       	smpsAlterNote       $0F
00079827 C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
0007982B E10C                       	smpsAlterNote       $0C
0007982D E701                       	dc.b	smpsNoAttack, $01
0007982F E108                       	smpsAlterNote       $08
00079831 E701                       	dc.b	smpsNoAttack, $01
00079833 E10C                       	smpsAlterNote       $0C
00079835 E701                       	dc.b	smpsNoAttack, $01
00079837 E10F                       	smpsAlterNote       $0F
00079839 E701                       	dc.b	smpsNoAttack, $01
0007983B E113                       	smpsAlterNote       $13
0007983D E701                       	dc.b	smpsNoAttack, $01
0007983F E10F                       	smpsAlterNote       $0F
00079841 E701                       	dc.b	smpsNoAttack, $01
00079843 E109                       	smpsAlterNote       $09
00079845 E701                       	dc.b	smpsNoAttack, $01
00079847 E108                       	smpsAlterNote       $08
00079849 E701                       	dc.b	smpsNoAttack, $01
0007984B E10C                       	smpsAlterNote       $0C
0007984D E701                       	dc.b	smpsNoAttack, $01
0007984F E112                       	smpsAlterNote       $12
00079851 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079855 E10F                       	smpsAlterNote       $0F
00079857 E701                       	dc.b	smpsNoAttack, $01
00079859 E109                       	smpsAlterNote       $09
0007985B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007985F E10F                       	smpsAlterNote       $0F
00079861 E701                       	dc.b	smpsNoAttack, $01
00079863 E112                       	smpsAlterNote       $12
00079865 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079869 E10C                       	smpsAlterNote       $0C
0007986B E701                       	dc.b	smpsNoAttack, $01
0007986D E108                       	smpsAlterNote       $08
0007986F E701                       	dc.b	smpsNoAttack, $01
00079871 E109                       	smpsAlterNote       $09
00079873 E701                       	dc.b	smpsNoAttack, $01
00079875 E10F                       	smpsAlterNote       $0F
00079877 E701                       	dc.b	smpsNoAttack, $01
00079879 E113                       	smpsAlterNote       $13
0007987B E701                       	dc.b	smpsNoAttack, $01
0007987D E10F                       	smpsAlterNote       $0F
0007987F E701                       	dc.b	smpsNoAttack, $01
00079881 E10C                       	smpsAlterNote       $0C
00079883 E701                       	dc.b	smpsNoAttack, $01
00079885 E108                       	smpsAlterNote       $08
00079887 E701                       	dc.b	smpsNoAttack, $01
00079889 E10C                       	smpsAlterNote       $0C
0007988B E701                       	dc.b	smpsNoAttack, $01
0007988D E112                       	smpsAlterNote       $12
0007988F E701                       	dc.b	smpsNoAttack, $01
00079891 E113                       	smpsAlterNote       $13
00079893 E701                       	dc.b	smpsNoAttack, $01
00079895 E10F                       	smpsAlterNote       $0F
00079897 E701                       	dc.b	smpsNoAttack, $01
00079899 E109                       	smpsAlterNote       $09
0007989B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007989F E10C                       	smpsAlterNote       $0C
000798A1 E701                       	dc.b	smpsNoAttack, $01
000798A3 E112                       	smpsAlterNote       $12
000798A5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000798A9 E10C                       	smpsAlterNote       $0C
000798AB E701                       	dc.b	smpsNoAttack, $01
000798AD E109                       	smpsAlterNote       $09
000798AF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000798B3 E10F                       	smpsAlterNote       $0F
000798B5 E701                       	dc.b	smpsNoAttack, $01
000798B7 E113                       	smpsAlterNote       $13
000798B9 E701                       	dc.b	smpsNoAttack, $01
000798BB E112                       	smpsAlterNote       $12
000798BD E701                       	dc.b	smpsNoAttack, $01
000798BF E10C                       	smpsAlterNote       $0C
000798C1 E701                       	dc.b	smpsNoAttack, $01
000798C3 E109                       	smpsAlterNote       $09
000798C5 8001                       	dc.b	nRst, $01
000798C7 E10F                       	smpsAlterNote       $0F
000798C9 C60D                       	dc.b	nA5, $0D
000798CB E10C                       	smpsAlterNote       $0C
000798CD E701                       	dc.b	smpsNoAttack, $01
000798CF E108                       	smpsAlterNote       $08
000798D1 E701                       	dc.b	smpsNoAttack, $01
000798D3 E10C                       	smpsAlterNote       $0C
000798D5 E701                       	dc.b	smpsNoAttack, $01
000798D7 E112                       	smpsAlterNote       $12
000798D9 E701                       	dc.b	smpsNoAttack, $01
000798DB E113                       	smpsAlterNote       $13
000798DD E701                       	dc.b	smpsNoAttack, $01
000798DF E10F                       	smpsAlterNote       $0F
000798E1 E701                       	dc.b	smpsNoAttack, $01
000798E3 E109                       	smpsAlterNote       $09
000798E5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000798E9 E10C                       	smpsAlterNote       $0C
000798EB E701                       	dc.b	smpsNoAttack, $01
000798ED E112                       	smpsAlterNote       $12
000798EF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000798F3 E10C                       	smpsAlterNote       $0C
000798F5 E701                       	dc.b	smpsNoAttack, $01
000798F7 E109                       	smpsAlterNote       $09
000798F9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000798FD E10F                       	smpsAlterNote       $0F
000798FF E701                       	dc.b	smpsNoAttack, $01
00079901 E113                       	smpsAlterNote       $13
00079903 E701                       	dc.b	smpsNoAttack, $01
00079905 E112                       	smpsAlterNote       $12
00079907 E701                       	dc.b	smpsNoAttack, $01
00079909 E10C                       	smpsAlterNote       $0C
0007990B E701                       	dc.b	smpsNoAttack, $01
0007990D E108                       	smpsAlterNote       $08
0007990F E701                       	dc.b	smpsNoAttack, $01
00079911 E10C                       	smpsAlterNote       $0C
00079913 E701                       	dc.b	smpsNoAttack, $01
00079915 E10F                       	smpsAlterNote       $0F
00079917 E701                       	dc.b	smpsNoAttack, $01
00079919 E113                       	smpsAlterNote       $13
0007991B E701                       	dc.b	smpsNoAttack, $01
0007991D E10F                       	smpsAlterNote       $0F
0007991F E701                       	dc.b	smpsNoAttack, $01
00079921 E109                       	smpsAlterNote       $09
00079923 E701                       	dc.b	smpsNoAttack, $01
00079925 E108                       	smpsAlterNote       $08
00079927 E701                       	dc.b	smpsNoAttack, $01
00079929 E10C                       	smpsAlterNote       $0C
0007992B E701                       	dc.b	smpsNoAttack, $01
0007992D E112                       	smpsAlterNote       $12
0007992F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079933 E10F                       	smpsAlterNote       $0F
00079935 E701                       	dc.b	smpsNoAttack, $01
00079937 E109                       	smpsAlterNote       $09
00079939 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007993D E10F                       	smpsAlterNote       $0F
0007993F E701                       	dc.b	smpsNoAttack, $01
00079941 E112                       	smpsAlterNote       $12
00079943 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079947 E10C                       	smpsAlterNote       $0C
00079949 E701                       	dc.b	smpsNoAttack, $01
0007994B E108                       	smpsAlterNote       $08
0007994D E701                       	dc.b	smpsNoAttack, $01
0007994F E10C                       	smpsAlterNote       $0C
00079951 E701                       	dc.b	smpsNoAttack, $01
00079953 E10F                       	smpsAlterNote       $0F
00079955 E701                       	dc.b	smpsNoAttack, $01
00079957 E113                       	smpsAlterNote       $13
00079959 E701                       	dc.b	smpsNoAttack, $01
0007995B E10F                       	smpsAlterNote       $0F
0007995D E701                       	dc.b	smpsNoAttack, $01
0007995F E109                       	smpsAlterNote       $09
00079961 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00079967 E601                       	smpsAlterVol        $01
00079969 E10F                       	smpsAlterNote       $0F
0007996B C604                       	dc.b	nA5, $04
0007996D E10D                       	smpsAlterNote       $0D
0007996F C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00079975 E10B                       	smpsAlterNote       $0B
00079977 BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
0007997F E10F                       	smpsAlterNote       $0F
00079981 C604 8001                  	dc.b	nA5, $04, nRst, $01
00079985 E10D                       	smpsAlterNote       $0D
00079987 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
0007998D E10C                       	smpsAlterNote       $0C
0007998F C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
00079995 E10A                       	smpsAlterNote       $0A
00079997 C904 8001                  	dc.b	nC6, $04, nRst, $01
0007999B E110                       	smpsAlterNote       $10
0007999D C704 8001                  	dc.b	nBb5, $04, nRst, $01
000799A1 E10F                       	smpsAlterNote       $0F
000799A3 C604                       	dc.b	nA5, $04
000799A5 E10D                       	smpsAlterNote       $0D
000799A7 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000799B3 E109                       	smpsAlterNote       $09
000799B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000799B9 E10F                       	smpsAlterNote       $0F
000799BB E701                       	dc.b	smpsNoAttack, $01
000799BD E112                       	smpsAlterNote       $12
000799BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000799C3 E10C                       	smpsAlterNote       $0C
000799C5 E701                       	dc.b	smpsNoAttack, $01
000799C7 E108                       	smpsAlterNote       $08
000799C9 E701                       	dc.b	smpsNoAttack, $01
000799CB E10C                       	smpsAlterNote       $0C
000799CD E701                       	dc.b	smpsNoAttack, $01
000799CF E10F                       	smpsAlterNote       $0F
000799D1 E701                       	dc.b	smpsNoAttack, $01
000799D3 E113                       	smpsAlterNote       $13
000799D5 E701                       	dc.b	smpsNoAttack, $01
000799D7 E10D                       	smpsAlterNote       $0D
000799D9 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000799DF E10C                       	smpsAlterNote       $0C
000799E1 C10D                       	dc.b	nE5, $0D
000799E3 E109                       	smpsAlterNote       $09
000799E5 E701                       	dc.b	smpsNoAttack, $01
000799E7 E105                       	smpsAlterNote       $05
000799E9 E701                       	dc.b	smpsNoAttack, $01
000799EB E106                       	smpsAlterNote       $06
000799ED E701                       	dc.b	smpsNoAttack, $01
000799EF E10C                       	smpsAlterNote       $0C
000799F1 E701                       	dc.b	smpsNoAttack, $01
000799F3 E110                       	smpsAlterNote       $10
000799F5 E701                       	dc.b	smpsNoAttack, $01
000799F7 E10C                       	smpsAlterNote       $0C
000799F9 E701                       	dc.b	smpsNoAttack, $01
000799FB E109                       	smpsAlterNote       $09
000799FD E701                       	dc.b	smpsNoAttack, $01
000799FF E105                       	smpsAlterNote       $05
00079A01 E701                       	dc.b	smpsNoAttack, $01
00079A03 E109                       	smpsAlterNote       $09
00079A05 E701                       	dc.b	smpsNoAttack, $01
00079A07 E10F                       	smpsAlterNote       $0F
00079A09 E701                       	dc.b	smpsNoAttack, $01
00079A0B E110                       	smpsAlterNote       $10
00079A0D E701                       	dc.b	smpsNoAttack, $01
00079A0F E10C                       	smpsAlterNote       $0C
00079A11 E701                       	dc.b	smpsNoAttack, $01
00079A13 E106                       	smpsAlterNote       $06
00079A15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079A19 E109                       	smpsAlterNote       $09
00079A1B E701                       	dc.b	smpsNoAttack, $01
00079A1D E10F                       	smpsAlterNote       $0F
00079A1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079A23 E109                       	smpsAlterNote       $09
00079A25 E701                       	dc.b	smpsNoAttack, $01
00079A27 E106                       	smpsAlterNote       $06
00079A29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079A2D E10C                       	smpsAlterNote       $0C
00079A2F E701                       	dc.b	smpsNoAttack, $01
00079A31 E110                       	smpsAlterNote       $10
00079A33 E701                       	dc.b	smpsNoAttack, $01
00079A35 E10F                       	smpsAlterNote       $0F
00079A37 E701                       	dc.b	smpsNoAttack, $01
00079A39 E109                       	smpsAlterNote       $09
00079A3B E701                       	dc.b	smpsNoAttack, $01
00079A3D E105                       	smpsAlterNote       $05
00079A3F E701                       	dc.b	smpsNoAttack, $01
00079A41 E109                       	smpsAlterNote       $09
00079A43 E701                       	dc.b	smpsNoAttack, $01
00079A45 E10C                       	smpsAlterNote       $0C
00079A47 E701                       	dc.b	smpsNoAttack, $01
00079A49 E110                       	smpsAlterNote       $10
00079A4B E701                       	dc.b	smpsNoAttack, $01
00079A4D E10C                       	smpsAlterNote       $0C
00079A4F E701                       	dc.b	smpsNoAttack, $01
00079A51 E106                       	smpsAlterNote       $06
00079A53 E701                       	dc.b	smpsNoAttack, $01
00079A55 E105                       	smpsAlterNote       $05
00079A57 E701                       	dc.b	smpsNoAttack, $01
00079A59 E109                       	smpsAlterNote       $09
00079A5B E701                       	dc.b	smpsNoAttack, $01
00079A5D E10F                       	smpsAlterNote       $0F
00079A5F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079A63 E10C                       	smpsAlterNote       $0C
00079A65 E701                       	dc.b	smpsNoAttack, $01
00079A67 E106                       	smpsAlterNote       $06
00079A69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079A6D E10C                       	smpsAlterNote       $0C
00079A6F E701                       	dc.b	smpsNoAttack, $01
00079A71 E10F                       	smpsAlterNote       $0F
00079A73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079A77 E109                       	smpsAlterNote       $09
00079A79 E701                       	dc.b	smpsNoAttack, $01
00079A7B E105                       	smpsAlterNote       $05
00079A7D E701                       	dc.b	smpsNoAttack, $01
00079A7F E106                       	smpsAlterNote       $06
00079A81 E701                       	dc.b	smpsNoAttack, $01
00079A83 E10C                       	smpsAlterNote       $0C
00079A85 E701                       	dc.b	smpsNoAttack, $01
00079A87 E110                       	smpsAlterNote       $10
00079A89 E701                       	dc.b	smpsNoAttack, $01
00079A8B E10C                       	smpsAlterNote       $0C
00079A8D E701                       	dc.b	smpsNoAttack, $01
00079A8F E109                       	smpsAlterNote       $09
00079A91 E701                       	dc.b	smpsNoAttack, $01
00079A93 E105                       	smpsAlterNote       $05
00079A95 E701                       	dc.b	smpsNoAttack, $01
00079A97 E109                       	smpsAlterNote       $09
00079A99 E701                       	dc.b	smpsNoAttack, $01
00079A9B E10F                       	smpsAlterNote       $0F
00079A9D E701                       	dc.b	smpsNoAttack, $01
00079A9F E110                       	smpsAlterNote       $10
00079AA1 E701                       	dc.b	smpsNoAttack, $01
00079AA3 E10C                       	smpsAlterNote       $0C
00079AA5 E701                       	dc.b	smpsNoAttack, $01
00079AA7 E106                       	smpsAlterNote       $06
00079AA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079AAD E109                       	smpsAlterNote       $09
00079AAF E701                       	dc.b	smpsNoAttack, $01
00079AB1 E10F                       	smpsAlterNote       $0F
00079AB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079AB7 E109                       	smpsAlterNote       $09
00079AB9 E701                       	dc.b	smpsNoAttack, $01
00079ABB E106                       	smpsAlterNote       $06
00079ABD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079AC1 E10C                       	smpsAlterNote       $0C
00079AC3 E701                       	dc.b	smpsNoAttack, $01
00079AC5 E110                       	smpsAlterNote       $10
00079AC7 E701                       	dc.b	smpsNoAttack, $01
00079AC9 E10F                       	smpsAlterNote       $0F
00079ACB E701                       	dc.b	smpsNoAttack, $01
00079ACD E109                       	smpsAlterNote       $09
00079ACF E701                       	dc.b	smpsNoAttack, $01
00079AD1 E105                       	smpsAlterNote       $05
00079AD3 E701                       	dc.b	smpsNoAttack, $01
00079AD5 E109                       	smpsAlterNote       $09
00079AD7 E701                       	dc.b	smpsNoAttack, $01
00079AD9 E10C                       	smpsAlterNote       $0C
00079ADB E701                       	dc.b	smpsNoAttack, $01
00079ADD E110                       	smpsAlterNote       $10
00079ADF E701                       	dc.b	smpsNoAttack, $01
00079AE1 E10C                       	smpsAlterNote       $0C
00079AE3 E701                       	dc.b	smpsNoAttack, $01
00079AE5 E106                       	smpsAlterNote       $06
00079AE7 E701                       	dc.b	smpsNoAttack, $01
00079AE9 E105                       	smpsAlterNote       $05
00079AEB E701                       	dc.b	smpsNoAttack, $01
00079AED E109                       	smpsAlterNote       $09
00079AEF E701                       	dc.b	smpsNoAttack, $01
00079AF1 E10F                       	smpsAlterNote       $0F
00079AF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079AF7 E109                       	smpsAlterNote       $09
00079AF9 E701                       	dc.b	smpsNoAttack, $01
00079AFB E106                       	smpsAlterNote       $06
00079AFD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079B01 E10C                       	smpsAlterNote       $0C
00079B03 E701                       	dc.b	smpsNoAttack, $01
00079B05 E110                       	smpsAlterNote       $10
00079B07 E701                       	dc.b	smpsNoAttack, $01
00079B09 E10F                       	smpsAlterNote       $0F
00079B0B E701                       	dc.b	smpsNoAttack, $01
00079B0D E109                       	smpsAlterNote       $09
00079B0F E701                       	dc.b	smpsNoAttack, $01
00079B11 E105                       	smpsAlterNote       $05
00079B13 E701                       	dc.b	smpsNoAttack, $01
00079B15 E109                       	smpsAlterNote       $09
00079B17 E701                       	dc.b	smpsNoAttack, $01
00079B19 E10C                       	smpsAlterNote       $0C
00079B1B E701                       	dc.b	smpsNoAttack, $01
00079B1D E110                       	smpsAlterNote       $10
00079B1F E701                       	dc.b	smpsNoAttack, $01
00079B21 E10C                       	smpsAlterNote       $0C
00079B23 E701                       	dc.b	smpsNoAttack, $01
00079B25 E106                       	smpsAlterNote       $06
00079B27 E701                       	dc.b	smpsNoAttack, $01
00079B29 E105                       	smpsAlterNote       $05
00079B2B E701                       	dc.b	smpsNoAttack, $01
00079B2D E109                       	smpsAlterNote       $09
00079B2F E701                       	dc.b	smpsNoAttack, $01
00079B31 E10F                       	smpsAlterNote       $0F
00079B33 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079B37 E10C                       	smpsAlterNote       $0C
00079B39 E701                       	dc.b	smpsNoAttack, $01
00079B3B E106                       	smpsAlterNote       $06
00079B3D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079B41 E10C                       	smpsAlterNote       $0C
00079B43 E701                       	dc.b	smpsNoAttack, $01
00079B45 E10F                       	smpsAlterNote       $0F
00079B47 E701                       	dc.b	smpsNoAttack, $01
00079B49 E110                       	smpsAlterNote       $10
00079B4B 8001                       	dc.b	nRst, $01
00079B4D E10F                       	smpsAlterNote       $0F
00079B4F C604                       	dc.b	nA5, $04
00079B51 E10D                       	smpsAlterNote       $0D
00079B53 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00079B59 E10B                       	smpsAlterNote       $0B
00079B5B BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
00079B61 E10F                       	smpsAlterNote       $0F
00079B63 C604 8001                  	dc.b	nA5, $04, nRst, $01
00079B67 E10D                       	smpsAlterNote       $0D
00079B69 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
00079B6F E10C                       	smpsAlterNote       $0C
00079B71 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
00079B77 E10A                       	smpsAlterNote       $0A
00079B79 C904                       	dc.b	nC6, $04
00079B7B E110                       	smpsAlterNote       $10
00079B7D C704 8001                  	dc.b	nBb5, $04, nRst, $01
00079B81 E10F                       	smpsAlterNote       $0F
00079B83 C604                       	dc.b	nA5, $04
00079B85 E10D                       	smpsAlterNote       $0D
00079B87 C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
00079B93 E109                       	smpsAlterNote       $09
00079B95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079B99 E10F                       	smpsAlterNote       $0F
00079B9B E701                       	dc.b	smpsNoAttack, $01
00079B9D E112                       	smpsAlterNote       $12
00079B9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079BA3 E10C                       	smpsAlterNote       $0C
00079BA5 E701                       	dc.b	smpsNoAttack, $01
00079BA7 E108                       	smpsAlterNote       $08
00079BA9 E701                       	dc.b	smpsNoAttack, $01
00079BAB E109                       	smpsAlterNote       $09
00079BAD E701                       	dc.b	smpsNoAttack, $01
00079BAF E10F                       	smpsAlterNote       $0F
00079BB1 E701                       	dc.b	smpsNoAttack, $01
00079BB3 E113                       	smpsAlterNote       $13
00079BB5 E701                       	dc.b	smpsNoAttack, $01
00079BB7 E10D                       	smpsAlterNote       $0D
00079BB9 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
00079BBF E10C                       	smpsAlterNote       $0C
00079BC1 C10D                       	dc.b	nE5, $0D
00079BC3 E109                       	smpsAlterNote       $09
00079BC5 E701                       	dc.b	smpsNoAttack, $01
00079BC7 E106                       	smpsAlterNote       $06
00079BC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079BCD E10C                       	smpsAlterNote       $0C
00079BCF E701                       	dc.b	smpsNoAttack, $01
00079BD1 E110                       	smpsAlterNote       $10
00079BD3 E701                       	dc.b	smpsNoAttack, $01
00079BD5 E10F                       	smpsAlterNote       $0F
00079BD7 E701                       	dc.b	smpsNoAttack, $01
00079BD9 E109                       	smpsAlterNote       $09
00079BDB E701                       	dc.b	smpsNoAttack, $01
00079BDD E105                       	smpsAlterNote       $05
00079BDF E701                       	dc.b	smpsNoAttack, $01
00079BE1 E109                       	smpsAlterNote       $09
00079BE3 E701                       	dc.b	smpsNoAttack, $01
00079BE5 E10C                       	smpsAlterNote       $0C
00079BE7 E701                       	dc.b	smpsNoAttack, $01
00079BE9 E110                       	smpsAlterNote       $10
00079BEB E701                       	dc.b	smpsNoAttack, $01
00079BED E10C                       	smpsAlterNote       $0C
00079BEF E701                       	dc.b	smpsNoAttack, $01
00079BF1 E106                       	smpsAlterNote       $06
00079BF3 E701                       	dc.b	smpsNoAttack, $01
00079BF5 E105                       	smpsAlterNote       $05
00079BF7 E701                       	dc.b	smpsNoAttack, $01
00079BF9 E109                       	smpsAlterNote       $09
00079BFB E701                       	dc.b	smpsNoAttack, $01
00079BFD E10F                       	smpsAlterNote       $0F
00079BFF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079C03 E10C                       	smpsAlterNote       $0C
00079C05 E701                       	dc.b	smpsNoAttack, $01
00079C07 E106                       	smpsAlterNote       $06
00079C09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079C0D E10C                       	smpsAlterNote       $0C
00079C0F E701                       	dc.b	smpsNoAttack, $01
00079C11 E10F                       	smpsAlterNote       $0F
00079C13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079C17 E109                       	smpsAlterNote       $09
00079C19 E701                       	dc.b	smpsNoAttack, $01
00079C1B E105                       	smpsAlterNote       $05
00079C1D E701                       	dc.b	smpsNoAttack, $01
00079C1F E106                       	smpsAlterNote       $06
00079C21 E701                       	dc.b	smpsNoAttack, $01
00079C23 E10C                       	smpsAlterNote       $0C
00079C25 E701                       	dc.b	smpsNoAttack, $01
00079C27 E110                       	smpsAlterNote       $10
00079C29 E701                       	dc.b	smpsNoAttack, $01
00079C2B E10C                       	smpsAlterNote       $0C
00079C2D E701                       	dc.b	smpsNoAttack, $01
00079C2F E109                       	smpsAlterNote       $09
00079C31 E701                       	dc.b	smpsNoAttack, $01
00079C33 E105                       	smpsAlterNote       $05
00079C35 E701                       	dc.b	smpsNoAttack, $01
00079C37 E109                       	smpsAlterNote       $09
00079C39 E701                       	dc.b	smpsNoAttack, $01
00079C3B E10F                       	smpsAlterNote       $0F
00079C3D E701                       	dc.b	smpsNoAttack, $01
00079C3F E110                       	smpsAlterNote       $10
00079C41 E701                       	dc.b	smpsNoAttack, $01
00079C43 E10C                       	smpsAlterNote       $0C
00079C45 E701                       	dc.b	smpsNoAttack, $01
00079C47 E106                       	smpsAlterNote       $06
00079C49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079C4D E109                       	smpsAlterNote       $09
00079C4F E701                       	dc.b	smpsNoAttack, $01
00079C51 E10F                       	smpsAlterNote       $0F
00079C53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079C57 E109                       	smpsAlterNote       $09
00079C59 E701                       	dc.b	smpsNoAttack, $01
00079C5B E106                       	smpsAlterNote       $06
00079C5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079C61 E10C                       	smpsAlterNote       $0C
00079C63 E701                       	dc.b	smpsNoAttack, $01
00079C65 E110                       	smpsAlterNote       $10
00079C67 E701                       	dc.b	smpsNoAttack, $01
00079C69 E10F                       	smpsAlterNote       $0F
00079C6B E701                       	dc.b	smpsNoAttack, $01
00079C6D E109                       	smpsAlterNote       $09
00079C6F E701                       	dc.b	smpsNoAttack, $01
00079C71 E105                       	smpsAlterNote       $05
00079C73 E701                       	dc.b	smpsNoAttack, $01
00079C75 E109                       	smpsAlterNote       $09
00079C77 E701                       	dc.b	smpsNoAttack, $01
00079C79 E10F                       	smpsAlterNote       $0F
00079C7B E701                       	dc.b	smpsNoAttack, $01
00079C7D E110                       	smpsAlterNote       $10
00079C7F E701                       	dc.b	smpsNoAttack, $01
00079C81 E10C                       	smpsAlterNote       $0C
00079C83 E701                       	dc.b	smpsNoAttack, $01
00079C85 E106                       	smpsAlterNote       $06
00079C87 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079C8B E109                       	smpsAlterNote       $09
00079C8D E701                       	dc.b	smpsNoAttack, $01
00079C8F E10F                       	smpsAlterNote       $0F
00079C91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079C95 E109                       	smpsAlterNote       $09
00079C97 E701                       	dc.b	smpsNoAttack, $01
00079C99 E106                       	smpsAlterNote       $06
00079C9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079C9F E10C                       	smpsAlterNote       $0C
00079CA1 E701                       	dc.b	smpsNoAttack, $01
00079CA3 E110                       	smpsAlterNote       $10
00079CA5 E701                       	dc.b	smpsNoAttack, $01
00079CA7 E10F                       	smpsAlterNote       $0F
00079CA9 E701                       	dc.b	smpsNoAttack, $01
00079CAB E109                       	smpsAlterNote       $09
00079CAD E701                       	dc.b	smpsNoAttack, $01
00079CAF E105                       	smpsAlterNote       $05
00079CB1 E701                       	dc.b	smpsNoAttack, $01
00079CB3 E109                       	smpsAlterNote       $09
00079CB5 E701                       	dc.b	smpsNoAttack, $01
00079CB7 E10C                       	smpsAlterNote       $0C
00079CB9 E701                       	dc.b	smpsNoAttack, $01
00079CBB E110                       	smpsAlterNote       $10
00079CBD E701                       	dc.b	smpsNoAttack, $01
00079CBF E10C                       	smpsAlterNote       $0C
00079CC1 E701                       	dc.b	smpsNoAttack, $01
00079CC3 E106                       	smpsAlterNote       $06
00079CC5 E701                       	dc.b	smpsNoAttack, $01
00079CC7 E105                       	smpsAlterNote       $05
00079CC9 E701                       	dc.b	smpsNoAttack, $01
00079CCB E109                       	smpsAlterNote       $09
00079CCD E701                       	dc.b	smpsNoAttack, $01
00079CCF E10F                       	smpsAlterNote       $0F
00079CD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079CD5 E10C                       	smpsAlterNote       $0C
00079CD7 E701                       	dc.b	smpsNoAttack, $01
00079CD9 E106                       	smpsAlterNote       $06
00079CDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079CDF E10C                       	smpsAlterNote       $0C
00079CE1 E701                       	dc.b	smpsNoAttack, $01
00079CE3 E10F                       	smpsAlterNote       $0F
00079CE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079CE9 E109                       	smpsAlterNote       $09
00079CEB E701                       	dc.b	smpsNoAttack, $01
00079CED E105                       	smpsAlterNote       $05
00079CEF E701                       	dc.b	smpsNoAttack, $01
00079CF1 E106                       	smpsAlterNote       $06
00079CF3 E701                       	dc.b	smpsNoAttack, $01
00079CF5 E10C                       	smpsAlterNote       $0C
00079CF7 E701                       	dc.b	smpsNoAttack, $01
00079CF9 E110                       	smpsAlterNote       $10
00079CFB E701                       	dc.b	smpsNoAttack, $01
00079CFD E10C                       	smpsAlterNote       $0C
00079CFF E701                       	dc.b	smpsNoAttack, $01
00079D01 E109                       	smpsAlterNote       $09
00079D03 E701                       	dc.b	smpsNoAttack, $01
00079D05 E105                       	smpsAlterNote       $05
00079D07 E701                       	dc.b	smpsNoAttack, $01
00079D09 E109                       	smpsAlterNote       $09
00079D0B E701                       	dc.b	smpsNoAttack, $01
00079D0D E10F                       	smpsAlterNote       $0F
00079D0F E701                       	dc.b	smpsNoAttack, $01
00079D11 E110                       	smpsAlterNote       $10
00079D13 E701                       	dc.b	smpsNoAttack, $01
00079D15 E10C                       	smpsAlterNote       $0C
00079D17 E701                       	dc.b	smpsNoAttack, $01
00079D19 E106                       	smpsAlterNote       $06
00079D1B E701                       	dc.b	smpsNoAttack, $01
00079D1D E10B                       	smpsAlterNote       $0B
00079D1F BF02                       	dc.b	nD5, $02
00079D21 E10C                       	smpsAlterNote       $0C
00079D23 C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
00079D29 E109                       	smpsAlterNote       $09
00079D2B E701                       	dc.b	smpsNoAttack, $01
00079D2D E105                       	smpsAlterNote       $05
00079D2F E701                       	dc.b	smpsNoAttack, $01
00079D31 E109                       	smpsAlterNote       $09
00079D33 E701                       	dc.b	smpsNoAttack, $01
00079D35 E10F                       	smpsAlterNote       $0F
00079D37 E701                       	dc.b	smpsNoAttack, $01
00079D39 E110                       	smpsAlterNote       $10
00079D3B E701                       	dc.b	smpsNoAttack, $01
00079D3D E10C                       	smpsAlterNote       $0C
00079D3F E701                       	dc.b	smpsNoAttack, $01
00079D41 E106                       	smpsAlterNote       $06
00079D43 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079D47 E109                       	smpsAlterNote       $09
00079D49 E701                       	dc.b	smpsNoAttack, $01
00079D4B E10F                       	smpsAlterNote       $0F
00079D4D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079D51 E109                       	smpsAlterNote       $09
00079D53 E701                       	dc.b	smpsNoAttack, $01
00079D55 E106                       	smpsAlterNote       $06
00079D57 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079D5B E10C                       	smpsAlterNote       $0C
00079D5D E701                       	dc.b	smpsNoAttack, $01
00079D5F E110                       	smpsAlterNote       $10
00079D61 E701                       	dc.b	smpsNoAttack, $01
00079D63 E10F                       	smpsAlterNote       $0F
00079D65 E701                       	dc.b	smpsNoAttack, $01
00079D67 E109                       	smpsAlterNote       $09
00079D69 E701                       	dc.b	smpsNoAttack, $01
00079D6B E105                       	smpsAlterNote       $05
00079D6D E701                       	dc.b	smpsNoAttack, $01
00079D6F E109                       	smpsAlterNote       $09
00079D71 E701                       	dc.b	smpsNoAttack, $01
00079D73 E10C                       	smpsAlterNote       $0C
00079D75 E701                       	dc.b	smpsNoAttack, $01
00079D77 E110                       	smpsAlterNote       $10
00079D79 E701                       	dc.b	smpsNoAttack, $01
00079D7B E10C                       	smpsAlterNote       $0C
00079D7D E701                       	dc.b	smpsNoAttack, $01
00079D7F E106                       	smpsAlterNote       $06
00079D81 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
00079D85 E10D                       	smpsAlterNote       $0D
00079D87 C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
00079D8F E10C                       	smpsAlterNote       $0C
00079D91 C10D                       	dc.b	nE5, $0D
00079D93 E106                       	smpsAlterNote       $06
00079D95 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079D99 E109                       	smpsAlterNote       $09
00079D9B E701                       	dc.b	smpsNoAttack, $01
00079D9D E10F                       	smpsAlterNote       $0F
00079D9F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079DA3 E109                       	smpsAlterNote       $09
00079DA5 E701                       	dc.b	smpsNoAttack, $01
00079DA7 E106                       	smpsAlterNote       $06
00079DA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079DAD E10C                       	smpsAlterNote       $0C
00079DAF E701                       	dc.b	smpsNoAttack, $01
00079DB1 E110                       	smpsAlterNote       $10
00079DB3 E701                       	dc.b	smpsNoAttack, $01
00079DB5 E10F                       	smpsAlterNote       $0F
00079DB7 E701                       	dc.b	smpsNoAttack, $01
00079DB9 E109                       	smpsAlterNote       $09
00079DBB E701                       	dc.b	smpsNoAttack, $01
00079DBD E105                       	smpsAlterNote       $05
00079DBF E701                       	dc.b	smpsNoAttack, $01
00079DC1 E106                       	smpsAlterNote       $06
00079DC3 800F                       	dc.b	nRst, $0F
00079DC7 E6FF                       	smpsAlterVol        $FF
00079DC9 E10F                       	smpsAlterNote       $0F
00079DCB BA01                       	dc.b	nA4, $01
00079DCD E110                       	smpsAlterNote       $10
00079DCF BB02                       	dc.b	nBb4, $02
00079DD1 E10F                       	smpsAlterNote       $0F
00079DD3 BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
00079DD9 E10B                       	smpsAlterNote       $0B
00079DDB BF03 8001                  	dc.b	nD5, $03, nRst, $01
00079DDF E10C                       	smpsAlterNote       $0C
00079DE1 C103                       	dc.b	nE5, $03
00079DE3 E10D                       	smpsAlterNote       $0D
00079DE5 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
00079DEF E10B                       	smpsAlterNote       $0B
00079DF1 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
00079DF5 E104                       	smpsAlterNote       $04
00079DF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079DFB E10A                       	smpsAlterNote       $0A
00079DFD E701                       	dc.b	smpsNoAttack, $01
00079DFF E10D                       	smpsAlterNote       $0D
00079E01 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079E05 E107                       	smpsAlterNote       $07
00079E07 E701                       	dc.b	smpsNoAttack, $01
00079E09 E104                       	smpsAlterNote       $04
00079E0B 8001                       	dc.b	nRst, $01
00079E0D E110                       	smpsAlterNote       $10
00079E0F C703                       	dc.b	nBb5, $03
00079E11 E10F                       	smpsAlterNote       $0F
00079E13 C603 8001                  	dc.b	nA5, $03, nRst, $01
00079E17 E10D                       	smpsAlterNote       $0D
00079E19 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
00079E1D E10C                       	smpsAlterNote       $0C
00079E1F E701                       	dc.b	smpsNoAttack, $01
00079E21 E108                       	smpsAlterNote       $08
00079E23 E701                       	dc.b	smpsNoAttack, $01
00079E25 E109                       	smpsAlterNote       $09
00079E27 E701                       	dc.b	smpsNoAttack, $01
00079E29 E10F                       	smpsAlterNote       $0F
00079E2B E701                       	dc.b	smpsNoAttack, $01
00079E2D E113                       	smpsAlterNote       $13
00079E2F E701                       	dc.b	smpsNoAttack, $01
00079E31 E10F                       	smpsAlterNote       $0F
00079E33 E701                       	dc.b	smpsNoAttack, $01
00079E35 E10C                       	smpsAlterNote       $0C
00079E37 E701                       	dc.b	smpsNoAttack, $01
00079E39 E108                       	smpsAlterNote       $08
00079E3B E701                       	dc.b	smpsNoAttack, $01
00079E3D E10C                       	smpsAlterNote       $0C
00079E3F E701                       	dc.b	smpsNoAttack, $01
00079E41 E112                       	smpsAlterNote       $12
00079E43 E701                       	dc.b	smpsNoAttack, $01
00079E45 E113                       	smpsAlterNote       $13
00079E47 E701                       	dc.b	smpsNoAttack, $01
00079E49 E10F                       	smpsAlterNote       $0F
00079E4B E701                       	dc.b	smpsNoAttack, $01
00079E4D E109                       	smpsAlterNote       $09
00079E4F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079E53 E10C                       	smpsAlterNote       $0C
00079E55 E701                       	dc.b	smpsNoAttack, $01
00079E57 E112                       	smpsAlterNote       $12
00079E59 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079E5D E10C                       	smpsAlterNote       $0C
00079E5F E701                       	dc.b	smpsNoAttack, $01
00079E61 E109                       	smpsAlterNote       $09
00079E63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079E67 E10F                       	smpsAlterNote       $0F
00079E69 E701                       	dc.b	smpsNoAttack, $01
00079E6B E113                       	smpsAlterNote       $13
00079E6D E701                       	dc.b	smpsNoAttack, $01
00079E6F E112                       	smpsAlterNote       $12
00079E71 E701                       	dc.b	smpsNoAttack, $01
00079E73 E10C                       	smpsAlterNote       $0C
00079E75 E701                       	dc.b	smpsNoAttack, $01
00079E77 E108                       	smpsAlterNote       $08
00079E79 E701                       	dc.b	smpsNoAttack, $01
00079E7B E10C                       	smpsAlterNote       $0C
00079E7D E701                       	dc.b	smpsNoAttack, $01
00079E7F E10F                       	smpsAlterNote       $0F
00079E81 E701                       	dc.b	smpsNoAttack, $01
00079E83 E113                       	smpsAlterNote       $13
00079E85 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
00079E89 E10B                       	smpsAlterNote       $0B
00079E8B BF03                       	dc.b	nD5, $03
00079E8D E10C                       	smpsAlterNote       $0C
00079E8F C103 8001                  	dc.b	nE5, $03, nRst, $01
00079E93 E10D                       	smpsAlterNote       $0D
00079E95 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
00079E9F E10B                       	smpsAlterNote       $0B
00079EA1 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
00079EAD E110                       	smpsAlterNote       $10
00079EAF C704 8001                  	dc.b	nBb5, $04, nRst, $01
00079EB3 E10F                       	smpsAlterNote       $0F
00079EB5 C604                       	dc.b	nA5, $04
00079EB7 E10D                       	smpsAlterNote       $0D
00079EB9 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
00079EBF E109                       	smpsAlterNote       $09
00079EC1 E701                       	dc.b	smpsNoAttack, $01
00079EC3 E108                       	smpsAlterNote       $08
00079EC5 E701                       	dc.b	smpsNoAttack, $01
00079EC7 E10C                       	smpsAlterNote       $0C
00079EC9 E701                       	dc.b	smpsNoAttack, $01
00079ECB E112                       	smpsAlterNote       $12
00079ECD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079ED1 E10F                       	smpsAlterNote       $0F
00079ED3 E701                       	dc.b	smpsNoAttack, $01
00079ED5 E109                       	smpsAlterNote       $09
00079ED7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079EDB E10F                       	smpsAlterNote       $0F
00079EDD E701                       	dc.b	smpsNoAttack, $01
00079EDF E112                       	smpsAlterNote       $12
00079EE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079EE5 E10C                       	smpsAlterNote       $0C
00079EE7 E701                       	dc.b	smpsNoAttack, $01
00079EE9 E108                       	smpsAlterNote       $08
00079EEB E701                       	dc.b	smpsNoAttack, $01
00079EED E109                       	smpsAlterNote       $09
00079EEF E701                       	dc.b	smpsNoAttack, $01
00079EF1 E10F                       	smpsAlterNote       $0F
00079EF3 E701                       	dc.b	smpsNoAttack, $01
00079EF5 E113                       	smpsAlterNote       $13
00079EF7 E701                       	dc.b	smpsNoAttack, $01
00079EF9 E10F                       	smpsAlterNote       $0F
00079EFB E701                       	dc.b	smpsNoAttack, $01
00079EFD E10C                       	smpsAlterNote       $0C
00079EFF E701                       	dc.b	smpsNoAttack, $01
00079F01 E108                       	smpsAlterNote       $08
00079F03 E701                       	dc.b	smpsNoAttack, $01
00079F05 E10C                       	smpsAlterNote       $0C
00079F07 E701                       	dc.b	smpsNoAttack, $01
00079F09 E112                       	smpsAlterNote       $12
00079F0B E701                       	dc.b	smpsNoAttack, $01
00079F0D E113                       	smpsAlterNote       $13
00079F0F E701                       	dc.b	smpsNoAttack, $01
00079F11 E10F                       	smpsAlterNote       $0F
00079F13 E701                       	dc.b	smpsNoAttack, $01
00079F15 E109                       	smpsAlterNote       $09
00079F17 E701                       	dc.b	smpsNoAttack, $01
00079F19 E10D                       	smpsAlterNote       $0D
00079F1B C402                       	dc.b	nG5, $02
00079F1D E10F                       	smpsAlterNote       $0F
00079F1F C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
00079F29 E10D                       	smpsAlterNote       $0D
00079F2B C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
00079F31 E10B                       	smpsAlterNote       $0B
00079F33 BF0D                       	dc.b	nD5, $0D
00079F35 E108                       	smpsAlterNote       $08
00079F37 E701                       	dc.b	smpsNoAttack, $01
00079F39 E104                       	smpsAlterNote       $04
00079F3B E701                       	dc.b	smpsNoAttack, $01
00079F3D E105                       	smpsAlterNote       $05
00079F3F E701                       	dc.b	smpsNoAttack, $01
00079F41 E10B                       	smpsAlterNote       $0B
00079F43 E701                       	dc.b	smpsNoAttack, $01
00079F45 E10F                       	smpsAlterNote       $0F
00079F47 E701                       	dc.b	smpsNoAttack, $01
00079F49 E10B                       	smpsAlterNote       $0B
00079F4B E701                       	dc.b	smpsNoAttack, $01
00079F4D E108                       	smpsAlterNote       $08
00079F4F E701                       	dc.b	smpsNoAttack, $01
00079F51 E104                       	smpsAlterNote       $04
00079F53 E701                       	dc.b	smpsNoAttack, $01
00079F55 E108                       	smpsAlterNote       $08
00079F57 E701                       	dc.b	smpsNoAttack, $01
00079F59 E10E                       	smpsAlterNote       $0E
00079F5B E701                       	dc.b	smpsNoAttack, $01
00079F5D E10F                       	smpsAlterNote       $0F
00079F5F E701                       	dc.b	smpsNoAttack, $01
00079F61 E10C                       	smpsAlterNote       $0C
00079F63 C101                       	dc.b	nE5, $01
00079F65 E10D                       	smpsAlterNote       $0D
00079F67 C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
00079F6F E10F                       	smpsAlterNote       $0F
00079F71 C607                       	dc.b	nA5, $07
00079F73 E10C                       	smpsAlterNote       $0C
00079F75 CD07                       	dc.b	nE6, $07
00079F77 E10D                       	smpsAlterNote       $0D
00079F79 CE06 8001                  	dc.b	nF6, $06, nRst, $01
00079F7D E10C                       	smpsAlterNote       $0C
00079F7F CD03                       	dc.b	nE6, $03
00079F81 E10A                       	smpsAlterNote       $0A
00079F83 C903 8001                  	dc.b	nC6, $03, nRst, $01
00079F87 E10D                       	smpsAlterNote       $0D
00079F89 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
00079F8F E10A                       	smpsAlterNote       $0A
00079F91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079F95 E110                       	smpsAlterNote       $10
00079F97 E701                       	dc.b	smpsNoAttack, $01
00079F99 E114                       	smpsAlterNote       $14
00079F9B E701                       	dc.b	smpsNoAttack, $01
00079F9D E113                       	smpsAlterNote       $13
00079F9F E701                       	dc.b	smpsNoAttack, $01
00079FA1 E10D                       	smpsAlterNote       $0D
00079FA3 E701                       	dc.b	smpsNoAttack, $01
00079FA5 E109                       	smpsAlterNote       $09
00079FA7 E701                       	dc.b	smpsNoAttack, $01
00079FA9 E10D                       	smpsAlterNote       $0D
00079FAB E701                       	dc.b	smpsNoAttack, $01
00079FAD E110                       	smpsAlterNote       $10
00079FAF E701                       	dc.b	smpsNoAttack, $01
00079FB1 E114                       	smpsAlterNote       $14
00079FB3 E701                       	dc.b	smpsNoAttack, $01
00079FB5 E10F                       	smpsAlterNote       $0F
00079FB7 C607                       	dc.b	nA5, $07
00079FB9 E10D                       	smpsAlterNote       $0D
00079FBB C40D                       	dc.b	nG5, $0D
00079FBD E10A                       	smpsAlterNote       $0A
00079FBF E701                       	dc.b	smpsNoAttack, $01
00079FC1 E106                       	smpsAlterNote       $06
00079FC3 E701                       	dc.b	smpsNoAttack, $01
00079FC5 E10A                       	smpsAlterNote       $0A
00079FC7 E701                       	dc.b	smpsNoAttack, $01
00079FC9 E10D                       	smpsAlterNote       $0D
00079FCB E701                       	dc.b	smpsNoAttack, $01
00079FCD E111                       	smpsAlterNote       $11
00079FCF E701                       	dc.b	smpsNoAttack, $01
00079FD1 E10D                       	smpsAlterNote       $0D
00079FD3 E701                       	dc.b	smpsNoAttack, $01
00079FD5 E107                       	smpsAlterNote       $07
00079FD7 E701                       	dc.b	smpsNoAttack, $01
00079FD9 E106                       	smpsAlterNote       $06
00079FDB E701                       	dc.b	smpsNoAttack, $01
00079FDD E10A                       	smpsAlterNote       $0A
00079FDF E701                       	dc.b	smpsNoAttack, $01
00079FE1 E110                       	smpsAlterNote       $10
00079FE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079FE7 E10D                       	smpsAlterNote       $0D
00079FE9 E701                       	dc.b	smpsNoAttack, $01
00079FEB E107                       	smpsAlterNote       $07
00079FED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079FF1 E10F                       	smpsAlterNote       $0F
00079FF3 C60E                       	dc.b	nA5, $0E
00079FF5 E109                       	smpsAlterNote       $09
00079FF7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
00079FFB E10F                       	smpsAlterNote       $0F
00079FFD E701                       	dc.b	smpsNoAttack, $01
00079FFF E112                       	smpsAlterNote       $12
0007A001 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A005 E10C                       	smpsAlterNote       $0C
0007A007 E701                       	dc.b	smpsNoAttack, $01
0007A009 E108                       	smpsAlterNote       $08
0007A00B E701                       	dc.b	smpsNoAttack, $01
0007A00D E109                       	smpsAlterNote       $09
0007A00F E701                       	dc.b	smpsNoAttack, $01
0007A011 E10F                       	smpsAlterNote       $0F
0007A013 E701                       	dc.b	smpsNoAttack, $01
0007A015 E113                       	smpsAlterNote       $13
0007A017 E701                       	dc.b	smpsNoAttack, $01
0007A019 E10F                       	smpsAlterNote       $0F
0007A01B E701                       	dc.b	smpsNoAttack, $01
0007A01D E10C                       	smpsAlterNote       $0C
0007A01F E701                       	dc.b	smpsNoAttack, $01
0007A021 E108                       	smpsAlterNote       $08
0007A023 E701                       	dc.b	smpsNoAttack, $01
0007A025 E109                       	smpsAlterNote       $09
0007A027 8001                       	dc.b	nRst, $01
0007A029 E110                       	smpsAlterNote       $10
0007A02B C70D                       	dc.b	nBb5, $0D
0007A02D E10D                       	smpsAlterNote       $0D
0007A02F E701                       	dc.b	smpsNoAttack, $01
0007A031 E109                       	smpsAlterNote       $09
0007A033 E701                       	dc.b	smpsNoAttack, $01
0007A035 E10D                       	smpsAlterNote       $0D
0007A037 E701                       	dc.b	smpsNoAttack, $01
0007A039 E113                       	smpsAlterNote       $13
0007A03B E701                       	dc.b	smpsNoAttack, $01
0007A03D E114                       	smpsAlterNote       $14
0007A03F E701                       	dc.b	smpsNoAttack, $01
0007A041 E110                       	smpsAlterNote       $10
0007A043 E701                       	dc.b	smpsNoAttack, $01
0007A045 E10A                       	smpsAlterNote       $0A
0007A047 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A04B E10D                       	smpsAlterNote       $0D
0007A04D E701                       	dc.b	smpsNoAttack, $01
0007A04F E113                       	smpsAlterNote       $13
0007A051 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A055 E10D                       	smpsAlterNote       $0D
0007A057 E701                       	dc.b	smpsNoAttack, $01
0007A059 E10A                       	smpsAlterNote       $0A
0007A05B E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
0007A065 E10B                       	smpsAlterNote       $0B
0007A067 8001                       	dc.b	nRst, $01
0007A069 E10C                       	smpsAlterNote       $0C
0007A06B CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
0007A06F E10B                       	smpsAlterNote       $0B
0007A071 CB0D                       	dc.b	nD6, $0D
0007A073 E105                       	smpsAlterNote       $05
0007A075 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A079 E108                       	smpsAlterNote       $08
0007A07B E701                       	dc.b	smpsNoAttack, $01
0007A07D E10E                       	smpsAlterNote       $0E
0007A07F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A083 E108                       	smpsAlterNote       $08
0007A085 E701                       	dc.b	smpsNoAttack, $01
0007A087 E105                       	smpsAlterNote       $05
0007A089 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A08D E10B                       	smpsAlterNote       $0B
0007A08F E701                       	dc.b	smpsNoAttack, $01
0007A091 E10F                       	smpsAlterNote       $0F
0007A093 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A097 E10C                       	smpsAlterNote       $0C
0007A099 CC0D                       	dc.b	nEb6, $0D
0007A09B E106                       	smpsAlterNote       $06
0007A09D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A0A1 E109                       	smpsAlterNote       $09
0007A0A3 E701                       	dc.b	smpsNoAttack, $01
0007A0A5 E10C                       	smpsAlterNote       $0C
0007A0A7 8001                       	dc.b	nRst, $01
0007A0A9 E10A                       	smpsAlterNote       $0A
0007A0AB C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
0007A0B7 CB0E                       	dc.b	nD6, $0E
0007A0B9 E105                       	smpsAlterNote       $05
0007A0BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A0BF E10B                       	smpsAlterNote       $0B
0007A0C1 E701                       	dc.b	smpsNoAttack, $01
0007A0C3 E10E                       	smpsAlterNote       $0E
0007A0C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A0C9 E108                       	smpsAlterNote       $08
0007A0CB E701                       	dc.b	smpsNoAttack, $01
0007A0CD E104                       	smpsAlterNote       $04
0007A0CF E701                       	dc.b	smpsNoAttack, $01
0007A0D1 E105                       	smpsAlterNote       $05
0007A0D3 E701                       	dc.b	smpsNoAttack, $01
0007A0D5 E10B                       	smpsAlterNote       $0B
0007A0D7 E701                       	dc.b	smpsNoAttack, $01
0007A0D9 E10F                       	smpsAlterNote       $0F
0007A0DB E701                       	dc.b	smpsNoAttack, $01
0007A0DD E10D                       	smpsAlterNote       $0D
0007A0DF CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
0007A0E3 E10C                       	smpsAlterNote       $0C
0007A0E5 CC06 8001                  	dc.b	nEb6, $06, nRst, $01
0007A0E9 E10A                       	smpsAlterNote       $0A
0007A0EB C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
0007A0F7 CB0D                       	dc.b	nD6, $0D
0007A0F9 E108                       	smpsAlterNote       $08
0007A0FB E701                       	dc.b	smpsNoAttack, $01
0007A0FD E104                       	smpsAlterNote       $04
0007A0FF E701                       	dc.b	smpsNoAttack, $01
0007A101 E105                       	smpsAlterNote       $05
0007A103 E701                       	dc.b	smpsNoAttack, $01
0007A105 E10B                       	smpsAlterNote       $0B
0007A107 E701                       	dc.b	smpsNoAttack, $01
0007A109 E10F                       	smpsAlterNote       $0F
0007A10B E701                       	dc.b	smpsNoAttack, $01
0007A10D E10B                       	smpsAlterNote       $0B
0007A10F E701                       	dc.b	smpsNoAttack, $01
0007A111 E108                       	smpsAlterNote       $08
0007A113 E701                       	dc.b	smpsNoAttack, $01
0007A115 E104                       	smpsAlterNote       $04
0007A117 E701                       	dc.b	smpsNoAttack, $01
0007A119 E108                       	smpsAlterNote       $08
0007A11B E701                       	dc.b	smpsNoAttack, $01
0007A11D E10E                       	smpsAlterNote       $0E
0007A11F E701                       	dc.b	smpsNoAttack, $01
0007A121 E10F                       	smpsAlterNote       $0F
0007A123 E701                       	dc.b	smpsNoAttack, $01
0007A125 E10C                       	smpsAlterNote       $0C
0007A127 CC0D                       	dc.b	nEb6, $0D
0007A129 E109                       	smpsAlterNote       $09
0007A12B E701                       	dc.b	smpsNoAttack, $01
0007A12D E105                       	smpsAlterNote       $05
0007A12F E701                       	dc.b	smpsNoAttack, $01
0007A131 E106                       	smpsAlterNote       $06
0007A133 E701                       	dc.b	smpsNoAttack, $01
0007A135 E10C                       	smpsAlterNote       $0C
0007A137 E701                       	dc.b	smpsNoAttack, $01
0007A139 E10A                       	smpsAlterNote       $0A
0007A13B C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
0007A147 CB0D                       	dc.b	nD6, $0D
0007A149 E108                       	smpsAlterNote       $08
0007A14B E701                       	dc.b	smpsNoAttack, $01
0007A14D E104                       	smpsAlterNote       $04
0007A14F E701                       	dc.b	smpsNoAttack, $01
0007A151 E108                       	smpsAlterNote       $08
0007A153 E701                       	dc.b	smpsNoAttack, $01
0007A155 E10B                       	smpsAlterNote       $0B
0007A157 E701                       	dc.b	smpsNoAttack, $01
0007A159 E10F                       	smpsAlterNote       $0F
0007A15B E701                       	dc.b	smpsNoAttack, $01
0007A15D E10B                       	smpsAlterNote       $0B
0007A15F E701                       	dc.b	smpsNoAttack, $01
0007A161 E105                       	smpsAlterNote       $05
0007A163 E701                       	dc.b	smpsNoAttack, $01
0007A165 E104                       	smpsAlterNote       $04
0007A167 E701                       	dc.b	smpsNoAttack, $01
0007A169 E108                       	smpsAlterNote       $08
0007A16B E701                       	dc.b	smpsNoAttack, $01
0007A16D E10E                       	smpsAlterNote       $0E
0007A16F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A173 E10B                       	smpsAlterNote       $0B
0007A175 E701                       	dc.b	smpsNoAttack, $01
0007A177 E105                       	smpsAlterNote       $05
0007A179 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
0007A181 03                         	dc.b	$03
0007A182 E601                       	smpsAlterVol        $01
0007A184 F6F1 D1                    	smpsJump            music84_Jump01
0007A187                            
0007A187                            ; FM5 Data
0007A187                            music84_FM5:
0007A189 E080                       	smpsPan             panLeft, $00
0007A18B 8003                       	dc.b	nRst, $03
0007A18D E10D                       	smpsAlterNote       $0D
0007A18F C203 8008                  	dc.b	nF5, $03, nRst, $08
0007A193 E10C                       	smpsAlterNote       $0C
0007A195 C103 800A                  	dc.b	nE5, $03, nRst, $0A
0007A199 E10F                       	smpsAlterNote       $0F
0007A19B BA03 8006                  	dc.b	nA4, $03, nRst, $06
0007A1A1 E6FE                       	smpsAlterVol        $FE
0007A1A3 C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
0007A1A9 E10D                       	smpsAlterNote       $0D
0007A1AB C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
0007A1B1 E10C                       	smpsAlterNote       $0C
0007A1B3 C102 8001                  	dc.b	nE5, $02, nRst, $01
0007A1B7 E10A                       	smpsAlterNote       $0A
0007A1B9 BD01 8001                  	dc.b	nC5, $01, nRst, $01
0007A1BF 03                         	dc.b	$03
0007A1C0                            
0007A1C0                            music84_Jump00:
0007A1C0 8004                       	dc.b	nRst, $04
0007A1C2 E602                       	smpsAlterVol        $02
0007A1C4 E10D                       	smpsAlterNote       $0D
0007A1C6 B60D                       	dc.b	nF4, $0D
0007A1C8 E107                       	smpsAlterNote       $07
0007A1CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A1CE E10A                       	smpsAlterNote       $0A
0007A1D0 E701                       	dc.b	smpsNoAttack, $01
0007A1D2 E110                       	smpsAlterNote       $10
0007A1D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A1D8 E10A                       	smpsAlterNote       $0A
0007A1DA E701                       	dc.b	smpsNoAttack, $01
0007A1DC E107                       	smpsAlterNote       $07
0007A1DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A1E2 E10D                       	smpsAlterNote       $0D
0007A1E4 E701                       	dc.b	smpsNoAttack, $01
0007A1E6 E111                       	smpsAlterNote       $11
0007A1E8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A1EC E10D                       	smpsAlterNote       $0D
0007A1EE B80D                       	dc.b	nG4, $0D
0007A1F0 E107                       	smpsAlterNote       $07
0007A1F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A1F6 E10A                       	smpsAlterNote       $0A
0007A1F8 E701                       	dc.b	smpsNoAttack, $01
0007A1FA E110                       	smpsAlterNote       $10
0007A1FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A200 E10A                       	smpsAlterNote       $0A
0007A202 E701                       	dc.b	smpsNoAttack, $01
0007A204 E107                       	smpsAlterNote       $07
0007A206 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A20A E10D                       	smpsAlterNote       $0D
0007A20C E701                       	dc.b	smpsNoAttack, $01
0007A20E E111                       	smpsAlterNote       $11
0007A210 E701                       	dc.b	smpsNoAttack, $01
0007A212 E110                       	smpsAlterNote       $10
0007A214 E701                       	dc.b	smpsNoAttack, $01
0007A216 E10A                       	smpsAlterNote       $0A
0007A218 E701                       	dc.b	smpsNoAttack, $01
0007A21A E106                       	smpsAlterNote       $06
0007A21C E701                       	dc.b	smpsNoAttack, $01
0007A21E E10A                       	smpsAlterNote       $0A
0007A220 E701                       	dc.b	smpsNoAttack, $01
0007A222 E10D                       	smpsAlterNote       $0D
0007A224 E701                       	dc.b	smpsNoAttack, $01
0007A226 E111                       	smpsAlterNote       $11
0007A228 E701                       	dc.b	smpsNoAttack, $01
0007A22A E10D                       	smpsAlterNote       $0D
0007A22C E701                       	dc.b	smpsNoAttack, $01
0007A22E E10F                       	smpsAlterNote       $0F
0007A230 BA0E                       	dc.b	nA4, $0E
0007A232 E109                       	smpsAlterNote       $09
0007A234 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A238 E10F                       	smpsAlterNote       $0F
0007A23A E701                       	dc.b	smpsNoAttack, $01
0007A23C E112                       	smpsAlterNote       $12
0007A23E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A242 E10C                       	smpsAlterNote       $0C
0007A244 E701                       	dc.b	smpsNoAttack, $01
0007A246 E108                       	smpsAlterNote       $08
0007A248 E701                       	dc.b	smpsNoAttack, $01
0007A24A E109                       	smpsAlterNote       $09
0007A24C E701                       	dc.b	smpsNoAttack, $01
0007A24E E10F                       	smpsAlterNote       $0F
0007A250 E701                       	dc.b	smpsNoAttack, $01
0007A252 E113                       	smpsAlterNote       $13
0007A254 E701                       	dc.b	smpsNoAttack, $01
0007A256 E10F                       	smpsAlterNote       $0F
0007A258 E701                       	dc.b	smpsNoAttack, $01
0007A25A E109                       	smpsAlterNote       $09
0007A25C E701                       	dc.b	smpsNoAttack, $01
0007A25E E108                       	smpsAlterNote       $08
0007A260 E701                       	dc.b	smpsNoAttack, $01
0007A262 E10C                       	smpsAlterNote       $0C
0007A264 E701                       	dc.b	smpsNoAttack, $01
0007A266 E112                       	smpsAlterNote       $12
0007A268 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A26C E10F                       	smpsAlterNote       $0F
0007A26E E701                       	dc.b	smpsNoAttack, $01
0007A270 E109                       	smpsAlterNote       $09
0007A272 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A276 E10F                       	smpsAlterNote       $0F
0007A278 E701                       	dc.b	smpsNoAttack, $01
0007A27A E112                       	smpsAlterNote       $12
0007A27C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A280 E10C                       	smpsAlterNote       $0C
0007A282 E701                       	dc.b	smpsNoAttack, $01
0007A284 E108                       	smpsAlterNote       $08
0007A286 E701                       	dc.b	smpsNoAttack, $01
0007A288 E109                       	smpsAlterNote       $09
0007A28A E701                       	dc.b	smpsNoAttack, $01
0007A28C E10F                       	smpsAlterNote       $0F
0007A28E E701                       	dc.b	smpsNoAttack, $01
0007A290 E113                       	smpsAlterNote       $13
0007A292 E701                       	dc.b	smpsNoAttack, $01
0007A294 E10F                       	smpsAlterNote       $0F
0007A296 E701                       	dc.b	smpsNoAttack, $01
0007A298 E10C                       	smpsAlterNote       $0C
0007A29A E701                       	dc.b	smpsNoAttack, $01
0007A29C E108                       	smpsAlterNote       $08
0007A29E E701                       	dc.b	smpsNoAttack, $01
0007A2A0 E109                       	smpsAlterNote       $09
0007A2A2 8001                       	dc.b	nRst, $01
0007A2A4 E10C                       	smpsAlterNote       $0C
0007A2A6 B50A                       	dc.b	nE4, $0A
0007A2A8 E10D                       	smpsAlterNote       $0D
0007A2AA B60D                       	dc.b	nF4, $0D
0007A2AC E10A                       	smpsAlterNote       $0A
0007A2AE E701                       	dc.b	smpsNoAttack, $01
0007A2B0 E106                       	smpsAlterNote       $06
0007A2B2 E701                       	dc.b	smpsNoAttack, $01
0007A2B4 E107                       	smpsAlterNote       $07
0007A2B6 E701                       	dc.b	smpsNoAttack, $01
0007A2B8 E10D                       	smpsAlterNote       $0D
0007A2BA E701                       	dc.b	smpsNoAttack, $01
0007A2BC E111                       	smpsAlterNote       $11
0007A2BE E701                       	dc.b	smpsNoAttack, $01
0007A2C0 E10D                       	smpsAlterNote       $0D
0007A2C2 E701                       	dc.b	smpsNoAttack, $01
0007A2C4 E10A                       	smpsAlterNote       $0A
0007A2C6 E701                       	dc.b	smpsNoAttack, $01
0007A2C8 E106                       	smpsAlterNote       $06
0007A2CA E701                       	dc.b	smpsNoAttack, $01
0007A2CC E10A                       	smpsAlterNote       $0A
0007A2CE E701                       	dc.b	smpsNoAttack, $01
0007A2D0 E110                       	smpsAlterNote       $10
0007A2D2 E701                       	dc.b	smpsNoAttack, $01
0007A2D4 E111                       	smpsAlterNote       $11
0007A2D6 E701                       	dc.b	smpsNoAttack, $01
0007A2D8 E10D                       	smpsAlterNote       $0D
0007A2DA B80D                       	dc.b	nG4, $0D
0007A2DC E10A                       	smpsAlterNote       $0A
0007A2DE E701                       	dc.b	smpsNoAttack, $01
0007A2E0 E106                       	smpsAlterNote       $06
0007A2E2 E701                       	dc.b	smpsNoAttack, $01
0007A2E4 E107                       	smpsAlterNote       $07
0007A2E6 E701                       	dc.b	smpsNoAttack, $01
0007A2E8 E10D                       	smpsAlterNote       $0D
0007A2EA E701                       	dc.b	smpsNoAttack, $01
0007A2EC E111                       	smpsAlterNote       $11
0007A2EE E701                       	dc.b	smpsNoAttack, $01
0007A2F0 E10D                       	smpsAlterNote       $0D
0007A2F2 E701                       	dc.b	smpsNoAttack, $01
0007A2F4 E10A                       	smpsAlterNote       $0A
0007A2F6 E701                       	dc.b	smpsNoAttack, $01
0007A2F8 E106                       	smpsAlterNote       $06
0007A2FA E701                       	dc.b	smpsNoAttack, $01
0007A2FC E10A                       	smpsAlterNote       $0A
0007A2FE E701                       	dc.b	smpsNoAttack, $01
0007A300 E110                       	smpsAlterNote       $10
0007A302 E701                       	dc.b	smpsNoAttack, $01
0007A304 E111                       	smpsAlterNote       $11
0007A306 E701                       	dc.b	smpsNoAttack, $01
0007A308 E10D                       	smpsAlterNote       $0D
0007A30A E701                       	dc.b	smpsNoAttack, $01
0007A30C E107                       	smpsAlterNote       $07
0007A30E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A312 E10A                       	smpsAlterNote       $0A
0007A314 E701                       	dc.b	smpsNoAttack, $01
0007A316 E110                       	smpsAlterNote       $10
0007A318 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A31C E10D                       	smpsAlterNote       $0D
0007A31E 8001                       	dc.b	nRst, $01
0007A320 E10F                       	smpsAlterNote       $0F
0007A322 BA0D                       	dc.b	nA4, $0D
0007A324 E10C                       	smpsAlterNote       $0C
0007A326 E701                       	dc.b	smpsNoAttack, $01
0007A328 E108                       	smpsAlterNote       $08
0007A32A E701                       	dc.b	smpsNoAttack, $01
0007A32C E10C                       	smpsAlterNote       $0C
0007A32E E701                       	dc.b	smpsNoAttack, $01
0007A330 E112                       	smpsAlterNote       $12
0007A332 E701                       	dc.b	smpsNoAttack, $01
0007A334 E113                       	smpsAlterNote       $13
0007A336 E701                       	dc.b	smpsNoAttack, $01
0007A338 E10F                       	smpsAlterNote       $0F
0007A33A E701                       	dc.b	smpsNoAttack, $01
0007A33C E109                       	smpsAlterNote       $09
0007A33E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A342 E10C                       	smpsAlterNote       $0C
0007A344 E701                       	dc.b	smpsNoAttack, $01
0007A346 E112                       	smpsAlterNote       $12
0007A348 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A34C E10C                       	smpsAlterNote       $0C
0007A34E E701                       	dc.b	smpsNoAttack, $01
0007A350 E109                       	smpsAlterNote       $09
0007A352 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A356 E10F                       	smpsAlterNote       $0F
0007A358 E701                       	dc.b	smpsNoAttack, $01
0007A35A E113                       	smpsAlterNote       $13
0007A35C E701                       	dc.b	smpsNoAttack, $01
0007A35E E112                       	smpsAlterNote       $12
0007A360 E701                       	dc.b	smpsNoAttack, $01
0007A362 E10C                       	smpsAlterNote       $0C
0007A364 E701                       	dc.b	smpsNoAttack, $01
0007A366 E108                       	smpsAlterNote       $08
0007A368 E701                       	dc.b	smpsNoAttack, $01
0007A36A E10C                       	smpsAlterNote       $0C
0007A36C E701                       	dc.b	smpsNoAttack, $01
0007A36E E10F                       	smpsAlterNote       $0F
0007A370 E701                       	dc.b	smpsNoAttack, $01
0007A372 E113                       	smpsAlterNote       $13
0007A374 E701                       	dc.b	smpsNoAttack, $01
0007A376 E10F                       	smpsAlterNote       $0F
0007A378 E701                       	dc.b	smpsNoAttack, $01
0007A37A E109                       	smpsAlterNote       $09
0007A37C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A380 E10D                       	smpsAlterNote       $0D
0007A382 B609 8001                  	dc.b	nF4, $09, nRst, $01
0007A386 E10C                       	smpsAlterNote       $0C
0007A388 B506 8001                  	dc.b	nE4, $06, nRst, $01
0007A38C E10B                       	smpsAlterNote       $0B
0007A38E B30D                       	dc.b	nD4, $0D
0007A390 E10C                       	smpsAlterNote       $0C
0007A392 B503 8001                  	dc.b	nE4, $03, nRst, $01
0007A396 E10D                       	smpsAlterNote       $0D
0007A398 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
0007A3A0 E109                       	smpsAlterNote       $09
0007A3A2 E701                       	dc.b	smpsNoAttack, $01
0007A3A4 E108                       	smpsAlterNote       $08
0007A3A6 E701                       	dc.b	smpsNoAttack, $01
0007A3A8 E10C                       	smpsAlterNote       $0C
0007A3AA E701                       	dc.b	smpsNoAttack, $01
0007A3AC E112                       	smpsAlterNote       $12
0007A3AE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A3B2 E10F                       	smpsAlterNote       $0F
0007A3B4 E701                       	dc.b	smpsNoAttack, $01
0007A3B6 E109                       	smpsAlterNote       $09
0007A3B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A3BC E10F                       	smpsAlterNote       $0F
0007A3BE E701                       	dc.b	smpsNoAttack, $01
0007A3C0 E112                       	smpsAlterNote       $12
0007A3C2 E701                       	dc.b	smpsNoAttack, $01
0007A3C4 E113                       	smpsAlterNote       $13
0007A3C6 8001                       	dc.b	nRst, $01
0007A3C8 E10D                       	smpsAlterNote       $0D
0007A3CA C20D                       	dc.b	nF5, $0D
0007A3CC E107                       	smpsAlterNote       $07
0007A3CE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A3D2 E10A                       	smpsAlterNote       $0A
0007A3D4 E701                       	dc.b	smpsNoAttack, $01
0007A3D6 E110                       	smpsAlterNote       $10
0007A3D8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A3DC E10A                       	smpsAlterNote       $0A
0007A3DE E701                       	dc.b	smpsNoAttack, $01
0007A3E0 E107                       	smpsAlterNote       $07
0007A3E2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A3E6 E10D                       	smpsAlterNote       $0D
0007A3E8 E701                       	dc.b	smpsNoAttack, $01
0007A3EA E111                       	smpsAlterNote       $11
0007A3EC E701                       	dc.b	smpsNoAttack, $01
0007A3EE E110                       	smpsAlterNote       $10
0007A3F0 E701                       	dc.b	smpsNoAttack, $01
0007A3F2 E10A                       	smpsAlterNote       $0A
0007A3F4 E701                       	dc.b	smpsNoAttack, $01
0007A3F6 E106                       	smpsAlterNote       $06
0007A3F8 E701                       	dc.b	smpsNoAttack, $01
0007A3FA E10A                       	smpsAlterNote       $0A
0007A3FC E701                       	dc.b	smpsNoAttack, $01
0007A3FE E10D                       	smpsAlterNote       $0D
0007A400 E701                       	dc.b	smpsNoAttack, $01
0007A402 E111                       	smpsAlterNote       $11
0007A404 E701                       	dc.b	smpsNoAttack, $01
0007A406 E10D                       	smpsAlterNote       $0D
0007A408 E701                       	dc.b	smpsNoAttack, $01
0007A40A E107                       	smpsAlterNote       $07
0007A40C E701                       	dc.b	smpsNoAttack, $01
0007A40E E106                       	smpsAlterNote       $06
0007A410 E701                       	dc.b	smpsNoAttack, $01
0007A412 E10A                       	smpsAlterNote       $0A
0007A414 E701                       	dc.b	smpsNoAttack, $01
0007A416 E110                       	smpsAlterNote       $10
0007A418 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A41C E10D                       	smpsAlterNote       $0D
0007A41E E701                       	dc.b	smpsNoAttack, $01
0007A420 E107                       	smpsAlterNote       $07
0007A422 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A426 E10D                       	smpsAlterNote       $0D
0007A428 E701                       	dc.b	smpsNoAttack, $01
0007A42A E110                       	smpsAlterNote       $10
0007A42C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A430 E10A                       	smpsAlterNote       $0A
0007A432 E701                       	dc.b	smpsNoAttack, $01
0007A434 E106                       	smpsAlterNote       $06
0007A436 E701                       	dc.b	smpsNoAttack, $01
0007A438 E107                       	smpsAlterNote       $07
0007A43A E701                       	dc.b	smpsNoAttack, $01
0007A43C E10D                       	smpsAlterNote       $0D
0007A43E E701                       	dc.b	smpsNoAttack, $01
0007A440 E111                       	smpsAlterNote       $11
0007A442 E701                       	dc.b	smpsNoAttack, $01
0007A444 E10D                       	smpsAlterNote       $0D
0007A446 E701                       	dc.b	smpsNoAttack, $01
0007A448 E10A                       	smpsAlterNote       $0A
0007A44A E701                       	dc.b	smpsNoAttack, $01
0007A44C E106                       	smpsAlterNote       $06
0007A44E E701                       	dc.b	smpsNoAttack, $01
0007A450 E10A                       	smpsAlterNote       $0A
0007A452 E701                       	dc.b	smpsNoAttack, $01
0007A454 E110                       	smpsAlterNote       $10
0007A456 E701                       	dc.b	smpsNoAttack, $01
0007A458 E111                       	smpsAlterNote       $11
0007A45A E701                       	dc.b	smpsNoAttack, $01
0007A45C E10D                       	smpsAlterNote       $0D
0007A45E E701                       	dc.b	smpsNoAttack, $01
0007A460 E107                       	smpsAlterNote       $07
0007A462 E701                       	dc.b	smpsNoAttack, $01
0007A464 E10D                       	smpsAlterNote       $0D
0007A466 C207                       	dc.b	nF5, $07
0007A468 E10C                       	smpsAlterNote       $0C
0007A46A C10D                       	dc.b	nE5, $0D
0007A46C E109                       	smpsAlterNote       $09
0007A46E E701                       	dc.b	smpsNoAttack, $01
0007A470 E106                       	smpsAlterNote       $06
0007A472 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A476 E10C                       	smpsAlterNote       $0C
0007A478 E701                       	dc.b	smpsNoAttack, $01
0007A47A E110                       	smpsAlterNote       $10
0007A47C E701                       	dc.b	smpsNoAttack, $01
0007A47E E10F                       	smpsAlterNote       $0F
0007A480 E701                       	dc.b	smpsNoAttack, $01
0007A482 E109                       	smpsAlterNote       $09
0007A484 E701                       	dc.b	smpsNoAttack, $01
0007A486 E105                       	smpsAlterNote       $05
0007A488 E701                       	dc.b	smpsNoAttack, $01
0007A48A E109                       	smpsAlterNote       $09
0007A48C E701                       	dc.b	smpsNoAttack, $01
0007A48E E10C                       	smpsAlterNote       $0C
0007A490 E701                       	dc.b	smpsNoAttack, $01
0007A492 E110                       	smpsAlterNote       $10
0007A494 E701                       	dc.b	smpsNoAttack, $01
0007A496 E10B                       	smpsAlterNote       $0B
0007A498 BF0D                       	dc.b	nD5, $0D
0007A49A E108                       	smpsAlterNote       $08
0007A49C E701                       	dc.b	smpsNoAttack, $01
0007A49E E105                       	smpsAlterNote       $05
0007A4A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A4A4 E10B                       	smpsAlterNote       $0B
0007A4A6 E701                       	dc.b	smpsNoAttack, $01
0007A4A8 E10F                       	smpsAlterNote       $0F
0007A4AA E701                       	dc.b	smpsNoAttack, $01
0007A4AC E10E                       	smpsAlterNote       $0E
0007A4AE E701                       	dc.b	smpsNoAttack, $01
0007A4B0 E108                       	smpsAlterNote       $08
0007A4B2 E701                       	dc.b	smpsNoAttack, $01
0007A4B4 E104                       	smpsAlterNote       $04
0007A4B6 E701                       	dc.b	smpsNoAttack, $01
0007A4B8 E108                       	smpsAlterNote       $08
0007A4BA E701                       	dc.b	smpsNoAttack, $01
0007A4BC E10E                       	smpsAlterNote       $0E
0007A4BE E701                       	dc.b	smpsNoAttack, $01
0007A4C0 E10F                       	smpsAlterNote       $0F
0007A4C2 E701                       	dc.b	smpsNoAttack, $01
0007A4C4 E10B                       	smpsAlterNote       $0B
0007A4C6 E701                       	dc.b	smpsNoAttack, $01
0007A4C8 E105                       	smpsAlterNote       $05
0007A4CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A4CE E108                       	smpsAlterNote       $08
0007A4D0 E701                       	dc.b	smpsNoAttack, $01
0007A4D2 E10E                       	smpsAlterNote       $0E
0007A4D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A4D8 E108                       	smpsAlterNote       $08
0007A4DA E701                       	dc.b	smpsNoAttack, $01
0007A4DC E105                       	smpsAlterNote       $05
0007A4DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A4E2 E10B                       	smpsAlterNote       $0B
0007A4E4 E701                       	dc.b	smpsNoAttack, $01
0007A4E6 E10F                       	smpsAlterNote       $0F
0007A4E8 E701                       	dc.b	smpsNoAttack, $01
0007A4EA E10E                       	smpsAlterNote       $0E
0007A4EC E701                       	dc.b	smpsNoAttack, $01
0007A4EE E108                       	smpsAlterNote       $08
0007A4F0 E701                       	dc.b	smpsNoAttack, $01
0007A4F2 E104                       	smpsAlterNote       $04
0007A4F4 E701                       	dc.b	smpsNoAttack, $01
0007A4F6 E108                       	smpsAlterNote       $08
0007A4F8 E701                       	dc.b	smpsNoAttack, $01
0007A4FA E10B                       	smpsAlterNote       $0B
0007A4FC E701                       	dc.b	smpsNoAttack, $01
0007A4FE E10F                       	smpsAlterNote       $0F
0007A500 E701                       	dc.b	smpsNoAttack, $01
0007A502 E10B                       	smpsAlterNote       $0B
0007A504 E701                       	dc.b	smpsNoAttack, $01
0007A506 E105                       	smpsAlterNote       $05
0007A508 E701                       	dc.b	smpsNoAttack, $01
0007A50A E104                       	smpsAlterNote       $04
0007A50C E701                       	dc.b	smpsNoAttack, $01
0007A50E E108                       	smpsAlterNote       $08
0007A510 E701                       	dc.b	smpsNoAttack, $01
0007A512 E10E                       	smpsAlterNote       $0E
0007A514 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A518 E10B                       	smpsAlterNote       $0B
0007A51A E701                       	dc.b	smpsNoAttack, $01
0007A51C E105                       	smpsAlterNote       $05
0007A51E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A522 E10B                       	smpsAlterNote       $0B
0007A524 E701                       	dc.b	smpsNoAttack, $01
0007A526 E10E                       	smpsAlterNote       $0E
0007A528 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A52C E108                       	smpsAlterNote       $08
0007A52E E701                       	dc.b	smpsNoAttack, $01
0007A530 E105                       	smpsAlterNote       $05
0007A532 8001                       	dc.b	nRst, $01
0007A536 E601                       	smpsAlterVol        $01
0007A538 E10B                       	smpsAlterNote       $0B
0007A53A BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
0007A546 8004                       	dc.b	nRst, $04
0007A54A E6FF                       	smpsAlterVol        $FF
0007A54C E10D                       	smpsAlterNote       $0D
0007A54E B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
0007A556 E10C                       	smpsAlterNote       $0C
0007A558 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
0007A55D E10D                       	smpsAlterNote       $0D
0007A55F B60D                       	dc.b	nF4, $0D
0007A561 E10A                       	smpsAlterNote       $0A
0007A563 E701                       	dc.b	smpsNoAttack, $01
0007A565 E106                       	smpsAlterNote       $06
0007A567 E701                       	dc.b	smpsNoAttack, $01
0007A569 E10A                       	smpsAlterNote       $0A
0007A56B E701                       	dc.b	smpsNoAttack, $01
0007A56D E110                       	smpsAlterNote       $10
0007A56F E701                       	dc.b	smpsNoAttack, $01
0007A571 E111                       	smpsAlterNote       $11
0007A573 E701                       	dc.b	smpsNoAttack, $01
0007A575 E10D                       	smpsAlterNote       $0D
0007A577 E701                       	dc.b	smpsNoAttack, $01
0007A579 E107                       	smpsAlterNote       $07
0007A57B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A57F E10A                       	smpsAlterNote       $0A
0007A581 E701                       	dc.b	smpsNoAttack, $01
0007A583 E110                       	smpsAlterNote       $10
0007A585 E701                       	dc.b	smpsNoAttack, $01
0007A587 E111                       	smpsAlterNote       $11
0007A589 8001                       	dc.b	nRst, $01
0007A58B E10D                       	smpsAlterNote       $0D
0007A58D B80D                       	dc.b	nG4, $0D
0007A58F E10A                       	smpsAlterNote       $0A
0007A591 E701                       	dc.b	smpsNoAttack, $01
0007A593 E106                       	smpsAlterNote       $06
0007A595 E701                       	dc.b	smpsNoAttack, $01
0007A597 E10A                       	smpsAlterNote       $0A
0007A599 E701                       	dc.b	smpsNoAttack, $01
0007A59B E110                       	smpsAlterNote       $10
0007A59D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A5A1 E10D                       	smpsAlterNote       $0D
0007A5A3 E701                       	dc.b	smpsNoAttack, $01
0007A5A5 E107                       	smpsAlterNote       $07
0007A5A7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A5AB E10D                       	smpsAlterNote       $0D
0007A5AD E701                       	dc.b	smpsNoAttack, $01
0007A5AF E110                       	smpsAlterNote       $10
0007A5B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A5B5 E10A                       	smpsAlterNote       $0A
0007A5B7 E701                       	dc.b	smpsNoAttack, $01
0007A5B9 E106                       	smpsAlterNote       $06
0007A5BB E701                       	dc.b	smpsNoAttack, $01
0007A5BD E107                       	smpsAlterNote       $07
0007A5BF E701                       	dc.b	smpsNoAttack, $01
0007A5C1 E10D                       	smpsAlterNote       $0D
0007A5C3 E701                       	dc.b	smpsNoAttack, $01
0007A5C5 E111                       	smpsAlterNote       $11
0007A5C7 E701                       	dc.b	smpsNoAttack, $01
0007A5C9 E10D                       	smpsAlterNote       $0D
0007A5CB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A5CF E10F                       	smpsAlterNote       $0F
0007A5D1 BA02 8001                  	dc.b	nA4, $02, nRst, $01
0007A5D5 E110                       	smpsAlterNote       $10
0007A5D7 BB03                       	dc.b	nBb4, $03
0007A5D9 E10F                       	smpsAlterNote       $0F
0007A5DB BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
0007A5E1 E110                       	smpsAlterNote       $10
0007A5E3 C703 8001                  	dc.b	nBb5, $03, nRst, $01
0007A5E7 E10F                       	smpsAlterNote       $0F
0007A5E9 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
0007A5EF E110                       	smpsAlterNote       $10
0007A5F1 D302 8001                  	dc.b	nBb6, $02, nRst, $01
0007A5F5 E10F                       	smpsAlterNote       $0F
0007A5F7 D20D                       	dc.b	nA6, $0D
0007A5F9 E10C                       	smpsAlterNote       $0C
0007A5FB E701                       	dc.b	smpsNoAttack, $01
0007A5FD E108                       	smpsAlterNote       $08
0007A5FF E701                       	dc.b	smpsNoAttack, $01
0007A601 E10C                       	smpsAlterNote       $0C
0007A603 E701                       	dc.b	smpsNoAttack, $01
0007A605 E10F                       	smpsAlterNote       $0F
0007A607 E701                       	dc.b	smpsNoAttack, $01
0007A609 E113                       	smpsAlterNote       $13
0007A60B E701                       	dc.b	smpsNoAttack, $01
0007A60D E10F                       	smpsAlterNote       $0F
0007A60F E701                       	dc.b	smpsNoAttack, $01
0007A611 E109                       	smpsAlterNote       $09
0007A613 E701                       	dc.b	smpsNoAttack, $01
0007A615 E108                       	smpsAlterNote       $08
0007A617 E701                       	dc.b	smpsNoAttack, $01
0007A619 E10C                       	smpsAlterNote       $0C
0007A61B E701                       	dc.b	smpsNoAttack, $01
0007A61D E112                       	smpsAlterNote       $12
0007A61F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A623 E10F                       	smpsAlterNote       $0F
0007A625 E701                       	dc.b	smpsNoAttack, $01
0007A627 E109                       	smpsAlterNote       $09
0007A629 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
0007A62F E10D                       	smpsAlterNote       $0D
0007A631 CE07                       	dc.b	nF6, $07
0007A633 E10C                       	smpsAlterNote       $0C
0007A635 CD06 8001                  	dc.b	nE6, $06, nRst, $01
0007A639 E10D                       	smpsAlterNote       $0D
0007A63B CE03                       	dc.b	nF6, $03
0007A63D E10C                       	smpsAlterNote       $0C
0007A63F CC0D                       	dc.b	nEb6, $0D
0007A641 E109                       	smpsAlterNote       $09
0007A643 E701                       	dc.b	smpsNoAttack, $01
0007A645 E106                       	smpsAlterNote       $06
0007A647 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A64B E10C                       	smpsAlterNote       $0C
0007A64D E701                       	dc.b	smpsNoAttack, $01
0007A64F E110                       	smpsAlterNote       $10
0007A651 E701                       	dc.b	smpsNoAttack, $01
0007A653 E10F                       	smpsAlterNote       $0F
0007A655 E701                       	dc.b	smpsNoAttack, $01
0007A657 E109                       	smpsAlterNote       $09
0007A659 E701                       	dc.b	smpsNoAttack, $01
0007A65B E105                       	smpsAlterNote       $05
0007A65D E701                       	dc.b	smpsNoAttack, $01
0007A65F E109                       	smpsAlterNote       $09
0007A661 E701                       	dc.b	smpsNoAttack, $01
0007A663 E10C                       	smpsAlterNote       $0C
0007A665 E701                       	dc.b	smpsNoAttack, $01
0007A667 E110                       	smpsAlterNote       $10
0007A669 E701                       	dc.b	smpsNoAttack, $01
0007A66B E10C                       	smpsAlterNote       $0C
0007A66D E701                       	dc.b	smpsNoAttack, $01
0007A66F E106                       	smpsAlterNote       $06
0007A671 E701                       	dc.b	smpsNoAttack, $01
0007A673 E105                       	smpsAlterNote       $05
0007A675 E701                       	dc.b	smpsNoAttack, $01
0007A677 E109                       	smpsAlterNote       $09
0007A679 E701                       	dc.b	smpsNoAttack, $01
0007A67B E10F                       	smpsAlterNote       $0F
0007A67D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A681 E10C                       	smpsAlterNote       $0C
0007A683 E701                       	dc.b	smpsNoAttack, $01
0007A685 E10B                       	smpsAlterNote       $0B
0007A687 CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
0007A691 E10F                       	smpsAlterNote       $0F
0007A693 C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
0007A69D E10D                       	smpsAlterNote       $0D
0007A69F C203                       	dc.b	nF5, $03
0007A6A1 E10C                       	smpsAlterNote       $0C
0007A6A3 C103 8001                  	dc.b	nE5, $03, nRst, $01
0007A6A7 E10D                       	smpsAlterNote       $0D
0007A6A9 C20D                       	dc.b	nF5, $0D
0007A6AB E10C                       	smpsAlterNote       $0C
0007A6AD C10D 8001                  	dc.b	nE5, $0D, nRst, $01
0007A6B1 E10B                       	smpsAlterNote       $0B
0007A6B3 BF0D                       	dc.b	nD5, $0D
0007A6B5 E108                       	smpsAlterNote       $08
0007A6B7 E701                       	dc.b	smpsNoAttack, $01
0007A6B9 E104                       	smpsAlterNote       $04
0007A6BB E701                       	dc.b	smpsNoAttack, $01
0007A6BD E108                       	smpsAlterNote       $08
0007A6BF E701                       	dc.b	smpsNoAttack, $01
0007A6C1 E10E                       	smpsAlterNote       $0E
0007A6C3 E701                       	dc.b	smpsNoAttack, $01
0007A6C5 E10F                       	smpsAlterNote       $0F
0007A6C7 E701                       	dc.b	smpsNoAttack, $01
0007A6C9 E10B                       	smpsAlterNote       $0B
0007A6CB E701                       	dc.b	smpsNoAttack, $01
0007A6CD E105                       	smpsAlterNote       $05
0007A6CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A6D3 E108                       	smpsAlterNote       $08
0007A6D5 E701                       	dc.b	smpsNoAttack, $01
0007A6D7 E10E                       	smpsAlterNote       $0E
0007A6D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A6DD E108                       	smpsAlterNote       $08
0007A6DF E701                       	dc.b	smpsNoAttack, $01
0007A6E1 E105                       	smpsAlterNote       $05
0007A6E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A6E7 E10B                       	smpsAlterNote       $0B
0007A6E9 E701                       	dc.b	smpsNoAttack, $01
0007A6EB E10F                       	smpsAlterNote       $0F
0007A6ED E701                       	dc.b	smpsNoAttack, $01
0007A6EF E10E                       	smpsAlterNote       $0E
0007A6F1 E701                       	dc.b	smpsNoAttack, $01
0007A6F3 E108                       	smpsAlterNote       $08
0007A6F5 E701                       	dc.b	smpsNoAttack, $01
0007A6F7 E104                       	smpsAlterNote       $04
0007A6F9 E701                       	dc.b	smpsNoAttack, $01
0007A6FB E108                       	smpsAlterNote       $08
0007A6FD E701                       	dc.b	smpsNoAttack, $01
0007A6FF E10B                       	smpsAlterNote       $0B
0007A701 E701                       	dc.b	smpsNoAttack, $01
0007A703 E10F                       	smpsAlterNote       $0F
0007A705 E701                       	dc.b	smpsNoAttack, $01
0007A707 E10B                       	smpsAlterNote       $0B
0007A709 E701                       	dc.b	smpsNoAttack, $01
0007A70B E105                       	smpsAlterNote       $05
0007A70D E701                       	dc.b	smpsNoAttack, $01
0007A70F E104                       	smpsAlterNote       $04
0007A711 E701                       	dc.b	smpsNoAttack, $01
0007A713 E108                       	smpsAlterNote       $08
0007A715 E701                       	dc.b	smpsNoAttack, $01
0007A717 E10E                       	smpsAlterNote       $0E
0007A719 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A71D E10B                       	smpsAlterNote       $0B
0007A71F E701                       	dc.b	smpsNoAttack, $01
0007A721 E105                       	smpsAlterNote       $05
0007A723 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A727 E10B                       	smpsAlterNote       $0B
0007A729 E701                       	dc.b	smpsNoAttack, $01
0007A72B E10E                       	smpsAlterNote       $0E
0007A72D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A731 E108                       	smpsAlterNote       $08
0007A733 E701                       	dc.b	smpsNoAttack, $01
0007A735 E104                       	smpsAlterNote       $04
0007A737 E701                       	dc.b	smpsNoAttack, $01
0007A739 E105                       	smpsAlterNote       $05
0007A73B E701                       	dc.b	smpsNoAttack, $01
0007A73D E10B                       	smpsAlterNote       $0B
0007A73F E701                       	dc.b	smpsNoAttack, $01
0007A741 E10F                       	smpsAlterNote       $0F
0007A743 E701                       	dc.b	smpsNoAttack, $01
0007A745 E10B                       	smpsAlterNote       $0B
0007A747 E701                       	dc.b	smpsNoAttack, $01
0007A749 E108                       	smpsAlterNote       $08
0007A74B E701                       	dc.b	smpsNoAttack, $01
0007A74D E104                       	smpsAlterNote       $04
0007A74F E701                       	dc.b	smpsNoAttack, $01
0007A751 E108                       	smpsAlterNote       $08
0007A753 E701                       	dc.b	smpsNoAttack, $01
0007A755 E10E                       	smpsAlterNote       $0E
0007A757 E701                       	dc.b	smpsNoAttack, $01
0007A759 E10F                       	smpsAlterNote       $0F
0007A75B E701                       	dc.b	smpsNoAttack, $01
0007A75D E10B                       	smpsAlterNote       $0B
0007A75F E701                       	dc.b	smpsNoAttack, $01
0007A761 E105                       	smpsAlterNote       $05
0007A763 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A767 E108                       	smpsAlterNote       $08
0007A769 E701                       	dc.b	smpsNoAttack, $01
0007A76B E10E                       	smpsAlterNote       $0E
0007A76D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A771 E108                       	smpsAlterNote       $08
0007A773 E701                       	dc.b	smpsNoAttack, $01
0007A775 E105                       	smpsAlterNote       $05
0007A777 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A77B E10B                       	smpsAlterNote       $0B
0007A77D E701                       	dc.b	smpsNoAttack, $01
0007A77F E10F                       	smpsAlterNote       $0F
0007A781 E701                       	dc.b	smpsNoAttack, $01
0007A783 E10E                       	smpsAlterNote       $0E
0007A785 E701                       	dc.b	smpsNoAttack, $01
0007A787 E108                       	smpsAlterNote       $08
0007A789 E701                       	dc.b	smpsNoAttack, $01
0007A78B E104                       	smpsAlterNote       $04
0007A78D E701                       	dc.b	smpsNoAttack, $01
0007A78F E108                       	smpsAlterNote       $08
0007A791 E701                       	dc.b	smpsNoAttack, $01
0007A793 E10B                       	smpsAlterNote       $0B
0007A795 E701                       	dc.b	smpsNoAttack, $01
0007A797 E10F                       	smpsAlterNote       $0F
0007A799 E701                       	dc.b	smpsNoAttack, $01
0007A79B E10B                       	smpsAlterNote       $0B
0007A79D E701                       	dc.b	smpsNoAttack, $01
0007A79F E105                       	smpsAlterNote       $05
0007A7A1 E701                       	dc.b	smpsNoAttack, $01
0007A7A3 E104                       	smpsAlterNote       $04
0007A7A5 E701                       	dc.b	smpsNoAttack, $01
0007A7A7 E105                       	smpsAlterNote       $05
0007A7A9 8001                       	dc.b	nRst, $01
0007A7AB E10D                       	smpsAlterNote       $0D
0007A7AD C20D                       	dc.b	nF5, $0D
0007A7AF E107                       	smpsAlterNote       $07
0007A7B1 E701                       	dc.b	smpsNoAttack, $01
0007A7B3 E106                       	smpsAlterNote       $06
0007A7B5 E701                       	dc.b	smpsNoAttack, $01
0007A7B7 E10A                       	smpsAlterNote       $0A
0007A7B9 E701                       	dc.b	smpsNoAttack, $01
0007A7BB E110                       	smpsAlterNote       $10
0007A7BD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A7C1 E10D                       	smpsAlterNote       $0D
0007A7C3 E701                       	dc.b	smpsNoAttack, $01
0007A7C5 E107                       	smpsAlterNote       $07
0007A7C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A7CB E10D                       	smpsAlterNote       $0D
0007A7CD E701                       	dc.b	smpsNoAttack, $01
0007A7CF E110                       	smpsAlterNote       $10
0007A7D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A7D5 E10A                       	smpsAlterNote       $0A
0007A7D7 E701                       	dc.b	smpsNoAttack, $01
0007A7D9 E106                       	smpsAlterNote       $06
0007A7DB E701                       	dc.b	smpsNoAttack, $01
0007A7DD E107                       	smpsAlterNote       $07
0007A7DF E701                       	dc.b	smpsNoAttack, $01
0007A7E1 E10D                       	smpsAlterNote       $0D
0007A7E3 E701                       	dc.b	smpsNoAttack, $01
0007A7E5 E111                       	smpsAlterNote       $11
0007A7E7 E701                       	dc.b	smpsNoAttack, $01
0007A7E9 E10D                       	smpsAlterNote       $0D
0007A7EB E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A7EF E10C                       	smpsAlterNote       $0C
0007A7F1 C10D                       	dc.b	nE5, $0D
0007A7F3 E10D                       	smpsAlterNote       $0D
0007A7F5 C20A                       	dc.b	nF5, $0A
0007A7F7 E10C                       	smpsAlterNote       $0C
0007A7F9 C10E                       	dc.b	nE5, $0E
0007A7FB E106                       	smpsAlterNote       $06
0007A7FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A801 E10C                       	smpsAlterNote       $0C
0007A803 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A807 E10B                       	smpsAlterNote       $0B
0007A809 BF0D                       	dc.b	nD5, $0D
0007A80B E10C                       	smpsAlterNote       $0C
0007A80D C107                       	dc.b	nE5, $07
0007A80F E10D                       	smpsAlterNote       $0D
0007A811 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
0007A81B E110                       	smpsAlterNote       $10
0007A81D C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
0007A823 E10F                       	smpsAlterNote       $0F
0007A825 C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
0007A82D E10D                       	smpsAlterNote       $0D
0007A82F D003                       	dc.b	nG6, $03
0007A833 E0C0                       	smpsPan             panCenter, $00
0007A835 E6FF                       	smpsAlterVol        $FF
0007A837 AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
0007A843 8001                       	dc.b	nRst, $01
0007A845 E10C                       	smpsAlterNote       $0C
0007A847 A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
0007A851 E604                       	smpsAlterVol        $04
0007A853 E10B                       	smpsAlterNote       $0B
0007A855 B306 8001                  	dc.b	nD4, $06, nRst, $01
0007A859 E10F                       	smpsAlterNote       $0F
0007A85B AE03                       	dc.b	nA3, $03
0007A85D E10D                       	smpsAlterNote       $0D
0007A85F B603 8001                  	dc.b	nF4, $03, nRst, $01
0007A863 E10C                       	smpsAlterNote       $0C
0007A865 B506 8001                  	dc.b	nE4, $06, nRst, $01
0007A869 E10B                       	smpsAlterNote       $0B
0007A86B B302 8001                  	dc.b	nD4, $02, nRst, $01
0007A86F E10A                       	smpsAlterNote       $0A
0007A871 B103                       	dc.b	nC4, $03
0007A873 E110                       	smpsAlterNote       $10
0007A875 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0007A879 E10F                       	smpsAlterNote       $0F
0007A87B AE03 800A                  	dc.b	nA3, $03, nRst, $0A
0007A87F E080                       	smpsPan             panLeft, $00
0007A881 01                         	dc.b	$01
0007A884 E6FB                       	smpsAlterVol        $FB
0007A886 E1E4                       	smpsAlterNote       $E4
0007A888 C501                       	dc.b	nAb5, $01
0007A88A E1F4                       	smpsAlterNote       $F4
0007A88C E701                       	dc.b	smpsNoAttack, $01
0007A88E E104                       	smpsAlterNote       $04
0007A890 E701                       	dc.b	smpsNoAttack, $01
0007A892 E114                       	smpsAlterNote       $14
0007A894 E701                       	dc.b	smpsNoAttack, $01
0007A896 E11C                       	smpsAlterNote       $1C
0007A898 E701                       	dc.b	smpsNoAttack, $01
0007A89A E1EF                       	smpsAlterNote       $EF
0007A89C E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
0007A89F E1FF                       	smpsAlterNote       $FF
0007A8A1 E701                       	dc.b	smpsNoAttack, $01
0007A8A3 E10F                       	smpsAlterNote       $0F
0007A8A5 C606                       	dc.b	nA5, $06
0007A8A7 E109                       	smpsAlterNote       $09
0007A8A9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A8AD E10F                       	smpsAlterNote       $0F
0007A8AF E701                       	dc.b	smpsNoAttack, $01
0007A8B1 E112                       	smpsAlterNote       $12
0007A8B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A8B7 E10C                       	smpsAlterNote       $0C
0007A8B9 E701                       	dc.b	smpsNoAttack, $01
0007A8BB E108                       	smpsAlterNote       $08
0007A8BD E701                       	dc.b	smpsNoAttack, $01
0007A8BF E109                       	smpsAlterNote       $09
0007A8C1 E701                       	dc.b	smpsNoAttack, $01
0007A8C3 E10F                       	smpsAlterNote       $0F
0007A8C5 E701                       	dc.b	smpsNoAttack, $01
0007A8C7 E113                       	smpsAlterNote       $13
0007A8C9 E701                       	dc.b	smpsNoAttack, $01
0007A8CB E10F                       	smpsAlterNote       $0F
0007A8CD E701                       	dc.b	smpsNoAttack, $01
0007A8CF E10C                       	smpsAlterNote       $0C
0007A8D1 E701                       	dc.b	smpsNoAttack, $01
0007A8D3 E108                       	smpsAlterNote       $08
0007A8D5 E701                       	dc.b	smpsNoAttack, $01
0007A8D7 E10C                       	smpsAlterNote       $0C
0007A8D9 E701                       	dc.b	smpsNoAttack, $01
0007A8DB E112                       	smpsAlterNote       $12
0007A8DD E701                       	dc.b	smpsNoAttack, $01
0007A8DF E113                       	smpsAlterNote       $13
0007A8E1 E701                       	dc.b	smpsNoAttack, $01
0007A8E3 E10F                       	smpsAlterNote       $0F
0007A8E5 E701                       	dc.b	smpsNoAttack, $01
0007A8E7 E109                       	smpsAlterNote       $09
0007A8E9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A8ED E10C                       	smpsAlterNote       $0C
0007A8EF E701                       	dc.b	smpsNoAttack, $01
0007A8F1 E112                       	smpsAlterNote       $12
0007A8F3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A8F7 E10C                       	smpsAlterNote       $0C
0007A8F9 E701                       	dc.b	smpsNoAttack, $01
0007A8FB E109                       	smpsAlterNote       $09
0007A8FD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A901 E10F                       	smpsAlterNote       $0F
0007A903 E701                       	dc.b	smpsNoAttack, $01
0007A905 E113                       	smpsAlterNote       $13
0007A907 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007A90B E10D                       	smpsAlterNote       $0D
0007A90D C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
0007A913 E10C                       	smpsAlterNote       $0C
0007A915 C102 8001                  	dc.b	nE5, $02, nRst, $01
0007A919 E10D                       	smpsAlterNote       $0D
0007A91B C201 8001                  	dc.b	nF5, $01, nRst, $01
0007A91F E10C                       	smpsAlterNote       $0C
0007A921 C102                       	dc.b	nE5, $02
0007A923 E10B                       	smpsAlterNote       $0B
0007A925 BF02 8001                  	dc.b	nD5, $02, nRst, $01
0007A929 E10C                       	smpsAlterNote       $0C
0007A92B C101 8001                  	dc.b	nE5, $01, nRst, $01
0007A92F E10B                       	smpsAlterNote       $0B
0007A931 BF02                       	dc.b	nD5, $02
0007A933 E10A                       	smpsAlterNote       $0A
0007A935 BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
0007A93F E110                       	smpsAlterNote       $10
0007A941 BB02                       	dc.b	nBb4, $02
0007A943 E10A                       	smpsAlterNote       $0A
0007A945 BD02 8001                  	dc.b	nC5, $02, nRst, $01
0007A949 E110                       	smpsAlterNote       $10
0007A94B BB01 8001                  	dc.b	nBb4, $01, nRst, $01
0007A94F E10F                       	smpsAlterNote       $0F
0007A951 BA01 8001                  	dc.b	nA4, $01, nRst, $01
0007A955 E110                       	smpsAlterNote       $10
0007A957 BB02                       	dc.b	nBb4, $02
0007A959 E10F                       	smpsAlterNote       $0F
0007A95B BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
0007A965 E10C                       	smpsAlterNote       $0C
0007A967 B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
0007A96F E10B                       	smpsAlterNote       $0B
0007A971 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
0007A975 E10F                       	smpsAlterNote       $0F
0007A977 BA02                       	dc.b	nA4, $02
0007A97B E0C0                       	smpsPan             panCenter, $00
0007A97D E601                       	smpsAlterVol        $01
0007A97F E109                       	smpsAlterNote       $09
0007A981 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
0007A98D E108                       	smpsAlterNote       $08
0007A98F A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
0007A995 E107                       	smpsAlterNote       $07
0007A997 B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
0007A99D E109                       	smpsAlterNote       $09
0007A99F B603 8001                  	dc.b	nF4, $03, nRst, $01
0007A9A3 E108                       	smpsAlterNote       $08
0007A9A5 B506 8001                  	dc.b	nE4, $06, nRst, $01
0007A9A9 E107                       	smpsAlterNote       $07
0007A9AB B302 8001                  	dc.b	nD4, $02, nRst, $01
0007A9AF E106                       	smpsAlterNote       $06
0007A9B1 B103                       	dc.b	nC4, $03
0007A9B3 E10C                       	smpsAlterNote       $0C
0007A9B5 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0007A9BB E080                       	smpsPan             panLeft, $00
0007A9BD 07                         	dc.b	$07
0007A9BE E6FE                       	smpsAlterVol        $FE
0007A9C0 E10B                       	smpsAlterNote       $0B
0007A9C2 B20D                       	dc.b	nCs4, $0D
0007A9C4 E105                       	smpsAlterNote       $05
0007A9C6 E701                       	dc.b	smpsNoAttack, $01
0007A9C8 E104                       	smpsAlterNote       $04
0007A9CA E701                       	dc.b	smpsNoAttack, $01
0007A9CC E108                       	smpsAlterNote       $08
0007A9CE E701                       	dc.b	smpsNoAttack, $01
0007A9D0 E10E                       	smpsAlterNote       $0E
0007A9D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A9D6 E10B                       	smpsAlterNote       $0B
0007A9D8 E701                       	dc.b	smpsNoAttack, $01
0007A9DA E105                       	smpsAlterNote       $05
0007A9DC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007A9E0 E10B                       	smpsAlterNote       $0B
0007A9E2 E701                       	dc.b	smpsNoAttack, $01
0007A9E4 E10E                       	smpsAlterNote       $0E
0007A9E6 E701                       	dc.b	smpsNoAttack, $01
0007A9E8 E10F                       	smpsAlterNote       $0F
0007A9EA 8001                       	dc.b	nRst, $01
0007A9EC E10B                       	smpsAlterNote       $0B
0007A9EE B30D                       	dc.b	nD4, $0D
0007A9F0 E105                       	smpsAlterNote       $05
0007A9F2 E701                       	dc.b	smpsNoAttack, $01
0007A9F4 E104                       	smpsAlterNote       $04
0007A9F6 E701                       	dc.b	smpsNoAttack, $01
0007A9F8 E108                       	smpsAlterNote       $08
0007A9FA E701                       	dc.b	smpsNoAttack, $01
0007A9FC E10E                       	smpsAlterNote       $0E
0007A9FE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AA02 E10B                       	smpsAlterNote       $0B
0007AA04 E701                       	dc.b	smpsNoAttack, $01
0007AA06 E105                       	smpsAlterNote       $05
0007AA08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AA0C E10B                       	smpsAlterNote       $0B
0007AA0E E701                       	dc.b	smpsNoAttack, $01
0007AA10 E10E                       	smpsAlterNote       $0E
0007AA12 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AA16 E108                       	smpsAlterNote       $08
0007AA18 E701                       	dc.b	smpsNoAttack, $01
0007AA1A E104                       	smpsAlterNote       $04
0007AA1C E701                       	dc.b	smpsNoAttack, $01
0007AA1E E105                       	smpsAlterNote       $05
0007AA20 E701                       	dc.b	smpsNoAttack, $01
0007AA22 E10B                       	smpsAlterNote       $0B
0007AA24 E701                       	dc.b	smpsNoAttack, $01
0007AA26 E10F                       	smpsAlterNote       $0F
0007AA28 E701                       	dc.b	smpsNoAttack, $01
0007AA2A E10B                       	smpsAlterNote       $0B
0007AA2C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007AA30 E10C                       	smpsAlterNote       $0C
0007AA32 B50D                       	dc.b	nE4, $0D
0007AA34 E106                       	smpsAlterNote       $06
0007AA36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AA3A E10C                       	smpsAlterNote       $0C
0007AA3C E701                       	dc.b	smpsNoAttack, $01
0007AA3E E10F                       	smpsAlterNote       $0F
0007AA40 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AA44 E109                       	smpsAlterNote       $09
0007AA46 E701                       	dc.b	smpsNoAttack, $01
0007AA48 E105                       	smpsAlterNote       $05
0007AA4A E701                       	dc.b	smpsNoAttack, $01
0007AA4C E106                       	smpsAlterNote       $06
0007AA4E E701                       	dc.b	smpsNoAttack, $01
0007AA50 E10C                       	smpsAlterNote       $0C
0007AA52 E701                       	dc.b	smpsNoAttack, $01
0007AA54 E110                       	smpsAlterNote       $10
0007AA56 E701                       	dc.b	smpsNoAttack, $01
0007AA58 E10B                       	smpsAlterNote       $0B
0007AA5A B30E                       	dc.b	nD4, $0E
0007AA5C E105                       	smpsAlterNote       $05
0007AA5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AA62 E10B                       	smpsAlterNote       $0B
0007AA64 E701                       	dc.b	smpsNoAttack, $01
0007AA66 E10E                       	smpsAlterNote       $0E
0007AA68 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AA6C E108                       	smpsAlterNote       $08
0007AA6E E701                       	dc.b	smpsNoAttack, $01
0007AA70 E104                       	smpsAlterNote       $04
0007AA72 E701                       	dc.b	smpsNoAttack, $01
0007AA74 E105                       	smpsAlterNote       $05
0007AA76 E701                       	dc.b	smpsNoAttack, $01
0007AA78 E10B                       	smpsAlterNote       $0B
0007AA7A E701                       	dc.b	smpsNoAttack, $01
0007AA7C E10F                       	smpsAlterNote       $0F
0007AA7E E701                       	dc.b	smpsNoAttack, $01
0007AA80 E10B                       	smpsAlterNote       $0B
0007AA82 E701                       	dc.b	smpsNoAttack, $01
0007AA84 E108                       	smpsAlterNote       $08
0007AA86 E701                       	dc.b	smpsNoAttack, $01
0007AA88 E104                       	smpsAlterNote       $04
0007AA8A E701                       	dc.b	smpsNoAttack, $01
0007AA8C E108                       	smpsAlterNote       $08
0007AA8E E701                       	dc.b	smpsNoAttack, $01
0007AA90 E10E                       	smpsAlterNote       $0E
0007AA92 E701                       	dc.b	smpsNoAttack, $01
0007AA94 E10F                       	smpsAlterNote       $0F
0007AA96 E701                       	dc.b	smpsNoAttack, $01
0007AA98 E10B                       	smpsAlterNote       $0B
0007AA9A E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
0007AA9E E108                       	smpsAlterNote       $08
0007AAA0 E701                       	dc.b	smpsNoAttack, $01
0007AAA2 E105                       	smpsAlterNote       $05
0007AAA4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AAA8 E10B                       	smpsAlterNote       $0B
0007AAAA E701                       	dc.b	smpsNoAttack, $01
0007AAAC E10F                       	smpsAlterNote       $0F
0007AAAE E701                       	dc.b	smpsNoAttack, $01
0007AAB0 E10E                       	smpsAlterNote       $0E
0007AAB2 E701                       	dc.b	smpsNoAttack, $01
0007AAB4 E108                       	smpsAlterNote       $08
0007AAB6 E701                       	dc.b	smpsNoAttack, $01
0007AAB8 E104                       	smpsAlterNote       $04
0007AABA E701                       	dc.b	smpsNoAttack, $01
0007AABC E108                       	smpsAlterNote       $08
0007AABE E701                       	dc.b	smpsNoAttack, $01
0007AAC0 E10B                       	smpsAlterNote       $0B
0007AAC2 E701                       	dc.b	smpsNoAttack, $01
0007AAC4 E10F                       	smpsAlterNote       $0F
0007AAC6 E701                       	dc.b	smpsNoAttack, $01
0007AAC8 E10B                       	smpsAlterNote       $0B
0007AACA B30D                       	dc.b	nD4, $0D
0007AACC E108                       	smpsAlterNote       $08
0007AACE E701                       	dc.b	smpsNoAttack, $01
0007AAD0 E105                       	smpsAlterNote       $05
0007AAD2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AAD6 E10B                       	smpsAlterNote       $0B
0007AAD8 E701                       	dc.b	smpsNoAttack, $01
0007AADA E10F                       	smpsAlterNote       $0F
0007AADC E701                       	dc.b	smpsNoAttack, $01
0007AADE E10E                       	smpsAlterNote       $0E
0007AAE0 E701                       	dc.b	smpsNoAttack, $01
0007AAE2 E108                       	smpsAlterNote       $08
0007AAE4 E701                       	dc.b	smpsNoAttack, $01
0007AAE6 E104                       	smpsAlterNote       $04
0007AAE8 E701                       	dc.b	smpsNoAttack, $01
0007AAEA E108                       	smpsAlterNote       $08
0007AAEC E701                       	dc.b	smpsNoAttack, $01
0007AAEE E10B                       	smpsAlterNote       $0B
0007AAF0 E701                       	dc.b	smpsNoAttack, $01
0007AAF2 E10F                       	smpsAlterNote       $0F
0007AAF4 E701                       	dc.b	smpsNoAttack, $01
0007AAF6 E10B                       	smpsAlterNote       $0B
0007AAF8 E701                       	dc.b	smpsNoAttack, $01
0007AAFA E105                       	smpsAlterNote       $05
0007AAFC E701                       	dc.b	smpsNoAttack, $01
0007AAFE E104                       	smpsAlterNote       $04
0007AB00 E701                       	dc.b	smpsNoAttack, $01
0007AB02 E108                       	smpsAlterNote       $08
0007AB04 E701                       	dc.b	smpsNoAttack, $01
0007AB06 E10E                       	smpsAlterNote       $0E
0007AB08 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AB0C E10B                       	smpsAlterNote       $0B
0007AB0E 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
0007AB12 E108                       	smpsAlterNote       $08
0007AB14 E701                       	dc.b	smpsNoAttack, $01
0007AB16 E104                       	smpsAlterNote       $04
0007AB18 E701                       	dc.b	smpsNoAttack, $01
0007AB1A E108                       	smpsAlterNote       $08
0007AB1C E701                       	dc.b	smpsNoAttack, $01
0007AB1E E10B                       	smpsAlterNote       $0B
0007AB20 E701                       	dc.b	smpsNoAttack, $01
0007AB24 E0C0                       	smpsPan             panCenter, $00
0007AB26 E601                       	smpsAlterVol        $01
0007AB28 E108                       	smpsAlterNote       $08
0007AB2A A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
0007AB36 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
0007AB3E E080                       	smpsPan             panLeft, $00
0007AB40 07                         	dc.b	$07
0007AB41 E6FF                       	smpsAlterVol        $FF
0007AB43 E10D                       	smpsAlterNote       $0D
0007AB45 B60D                       	dc.b	nF4, $0D
0007AB47 E10A                       	smpsAlterNote       $0A
0007AB49 E701                       	dc.b	smpsNoAttack, $01
0007AB4B E106                       	smpsAlterNote       $06
0007AB4D E701                       	dc.b	smpsNoAttack, $01
0007AB4F E10A                       	smpsAlterNote       $0A
0007AB51 E701                       	dc.b	smpsNoAttack, $01
0007AB53 E110                       	smpsAlterNote       $10
0007AB55 E701                       	dc.b	smpsNoAttack, $01
0007AB57 E111                       	smpsAlterNote       $11
0007AB59 E701                       	dc.b	smpsNoAttack, $01
0007AB5B E10D                       	smpsAlterNote       $0D
0007AB5D E701                       	dc.b	smpsNoAttack, $01
0007AB5F E107                       	smpsAlterNote       $07
0007AB61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AB65 E10A                       	smpsAlterNote       $0A
0007AB67 E701                       	dc.b	smpsNoAttack, $01
0007AB69 E110                       	smpsAlterNote       $10
0007AB6B E701                       	dc.b	smpsNoAttack, $01
0007AB6D E111                       	smpsAlterNote       $11
0007AB6F 8001                       	dc.b	nRst, $01
0007AB71 E10D                       	smpsAlterNote       $0D
0007AB73 B80D                       	dc.b	nG4, $0D
0007AB75 E10A                       	smpsAlterNote       $0A
0007AB77 E701                       	dc.b	smpsNoAttack, $01
0007AB79 E106                       	smpsAlterNote       $06
0007AB7B E701                       	dc.b	smpsNoAttack, $01
0007AB7D E10A                       	smpsAlterNote       $0A
0007AB7F E701                       	dc.b	smpsNoAttack, $01
0007AB81 E110                       	smpsAlterNote       $10
0007AB83 E701                       	dc.b	smpsNoAttack, $01
0007AB85 E111                       	smpsAlterNote       $11
0007AB87 E701                       	dc.b	smpsNoAttack, $01
0007AB89 E10D                       	smpsAlterNote       $0D
0007AB8B E701                       	dc.b	smpsNoAttack, $01
0007AB8D E107                       	smpsAlterNote       $07
0007AB8F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AB93 E10D                       	smpsAlterNote       $0D
0007AB95 E701                       	dc.b	smpsNoAttack, $01
0007AB97 E110                       	smpsAlterNote       $10
0007AB99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AB9D E10A                       	smpsAlterNote       $0A
0007AB9F E701                       	dc.b	smpsNoAttack, $01
0007ABA1 E106                       	smpsAlterNote       $06
0007ABA3 E701                       	dc.b	smpsNoAttack, $01
0007ABA5 E107                       	smpsAlterNote       $07
0007ABA7 E701                       	dc.b	smpsNoAttack, $01
0007ABA9 E10D                       	smpsAlterNote       $0D
0007ABAB E701                       	dc.b	smpsNoAttack, $01
0007ABAD E111                       	smpsAlterNote       $11
0007ABAF E701                       	dc.b	smpsNoAttack, $01
0007ABB1 E10D                       	smpsAlterNote       $0D
0007ABB3 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007ABB7 E10F                       	smpsAlterNote       $0F
0007ABB9 BA0D                       	dc.b	nA4, $0D
0007ABBB E109                       	smpsAlterNote       $09
0007ABBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007ABC1 E10C                       	smpsAlterNote       $0C
0007ABC3 E701                       	dc.b	smpsNoAttack, $01
0007ABC5 E112                       	smpsAlterNote       $12
0007ABC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007ABCB E10C                       	smpsAlterNote       $0C
0007ABCD E701                       	dc.b	smpsNoAttack, $01
0007ABCF E109                       	smpsAlterNote       $09
0007ABD1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007ABD5 E10F                       	smpsAlterNote       $0F
0007ABD7 E701                       	dc.b	smpsNoAttack, $01
0007ABD9 E113                       	smpsAlterNote       $13
0007ABDB E701                       	dc.b	smpsNoAttack, $01
0007ABDD E112                       	smpsAlterNote       $12
0007ABDF E701                       	dc.b	smpsNoAttack, $01
0007ABE1 E10C                       	smpsAlterNote       $0C
0007ABE3 E701                       	dc.b	smpsNoAttack, $01
0007ABE5 E108                       	smpsAlterNote       $08
0007ABE7 E701                       	dc.b	smpsNoAttack, $01
0007ABE9 E10C                       	smpsAlterNote       $0C
0007ABEB E701                       	dc.b	smpsNoAttack, $01
0007ABED E10F                       	smpsAlterNote       $0F
0007ABEF E701                       	dc.b	smpsNoAttack, $01
0007ABF1 E113                       	smpsAlterNote       $13
0007ABF3 E701                       	dc.b	smpsNoAttack, $01
0007ABF5 E10F                       	smpsAlterNote       $0F
0007ABF7 E701                       	dc.b	smpsNoAttack, $01
0007ABF9 E109                       	smpsAlterNote       $09
0007ABFB E701                       	dc.b	smpsNoAttack, $01
0007ABFD E108                       	smpsAlterNote       $08
0007ABFF E701                       	dc.b	smpsNoAttack, $01
0007AC01 E10C                       	smpsAlterNote       $0C
0007AC03 E701                       	dc.b	smpsNoAttack, $01
0007AC05 E112                       	smpsAlterNote       $12
0007AC07 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AC0B E10F                       	smpsAlterNote       $0F
0007AC0D E701                       	dc.b	smpsNoAttack, $01
0007AC0F E109                       	smpsAlterNote       $09
0007AC11 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AC15 E10F                       	smpsAlterNote       $0F
0007AC17 E701                       	dc.b	smpsNoAttack, $01
0007AC19 E112                       	smpsAlterNote       $12
0007AC1B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AC1F E10C                       	smpsAlterNote       $0C
0007AC21 E701                       	dc.b	smpsNoAttack, $01
0007AC23 E108                       	smpsAlterNote       $08
0007AC25 E701                       	dc.b	smpsNoAttack, $01
0007AC27 E109                       	smpsAlterNote       $09
0007AC29 E701                       	dc.b	smpsNoAttack, $01
0007AC2B E10C                       	smpsAlterNote       $0C
0007AC2D B50A                       	dc.b	nE4, $0A
0007AC2F E10D                       	smpsAlterNote       $0D
0007AC31 B60E                       	dc.b	nF4, $0E
0007AC33 E107                       	smpsAlterNote       $07
0007AC35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AC39 E10D                       	smpsAlterNote       $0D
0007AC3B E701                       	dc.b	smpsNoAttack, $01
0007AC3D E110                       	smpsAlterNote       $10
0007AC3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AC43 E10A                       	smpsAlterNote       $0A
0007AC45 E701                       	dc.b	smpsNoAttack, $01
0007AC47 E106                       	smpsAlterNote       $06
0007AC49 E701                       	dc.b	smpsNoAttack, $01
0007AC4B E107                       	smpsAlterNote       $07
0007AC4D E701                       	dc.b	smpsNoAttack, $01
0007AC4F E10D                       	smpsAlterNote       $0D
0007AC51 E701                       	dc.b	smpsNoAttack, $01
0007AC53 E111                       	smpsAlterNote       $11
0007AC55 E701                       	dc.b	smpsNoAttack, $01
0007AC57 E10D                       	smpsAlterNote       $0D
0007AC59 B80D                       	dc.b	nG4, $0D
0007AC5B E10A                       	smpsAlterNote       $0A
0007AC5D E701                       	dc.b	smpsNoAttack, $01
0007AC5F E107                       	smpsAlterNote       $07
0007AC61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AC65 E10D                       	smpsAlterNote       $0D
0007AC67 E701                       	dc.b	smpsNoAttack, $01
0007AC69 E111                       	smpsAlterNote       $11
0007AC6B E701                       	dc.b	smpsNoAttack, $01
0007AC6D E110                       	smpsAlterNote       $10
0007AC6F E701                       	dc.b	smpsNoAttack, $01
0007AC71 E10A                       	smpsAlterNote       $0A
0007AC73 E701                       	dc.b	smpsNoAttack, $01
0007AC75 E106                       	smpsAlterNote       $06
0007AC77 E701                       	dc.b	smpsNoAttack, $01
0007AC79 E10A                       	smpsAlterNote       $0A
0007AC7B E701                       	dc.b	smpsNoAttack, $01
0007AC7D E10D                       	smpsAlterNote       $0D
0007AC7F E701                       	dc.b	smpsNoAttack, $01
0007AC81 E111                       	smpsAlterNote       $11
0007AC83 E701                       	dc.b	smpsNoAttack, $01
0007AC85 E10D                       	smpsAlterNote       $0D
0007AC87 E701                       	dc.b	smpsNoAttack, $01
0007AC89 E107                       	smpsAlterNote       $07
0007AC8B E701                       	dc.b	smpsNoAttack, $01
0007AC8D E106                       	smpsAlterNote       $06
0007AC8F E701                       	dc.b	smpsNoAttack, $01
0007AC91 E10A                       	smpsAlterNote       $0A
0007AC93 E701                       	dc.b	smpsNoAttack, $01
0007AC95 E110                       	smpsAlterNote       $10
0007AC97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AC9B E10D                       	smpsAlterNote       $0D
0007AC9D E701                       	dc.b	smpsNoAttack, $01
0007AC9F E10F                       	smpsAlterNote       $0F
0007ACA1 BA0D                       	dc.b	nA4, $0D
0007ACA3 E10C                       	smpsAlterNote       $0C
0007ACA5 E701                       	dc.b	smpsNoAttack, $01
0007ACA7 E108                       	smpsAlterNote       $08
0007ACA9 E701                       	dc.b	smpsNoAttack, $01
0007ACAB E109                       	smpsAlterNote       $09
0007ACAD E701                       	dc.b	smpsNoAttack, $01
0007ACAF E10F                       	smpsAlterNote       $0F
0007ACB1 E701                       	dc.b	smpsNoAttack, $01
0007ACB3 E113                       	smpsAlterNote       $13
0007ACB5 E701                       	dc.b	smpsNoAttack, $01
0007ACB7 E10F                       	smpsAlterNote       $0F
0007ACB9 E701                       	dc.b	smpsNoAttack, $01
0007ACBB E10C                       	smpsAlterNote       $0C
0007ACBD E701                       	dc.b	smpsNoAttack, $01
0007ACBF E108                       	smpsAlterNote       $08
0007ACC1 E701                       	dc.b	smpsNoAttack, $01
0007ACC3 E10C                       	smpsAlterNote       $0C
0007ACC5 E701                       	dc.b	smpsNoAttack, $01
0007ACC7 E112                       	smpsAlterNote       $12
0007ACC9 E701                       	dc.b	smpsNoAttack, $01
0007ACCB E113                       	smpsAlterNote       $13
0007ACCD E701                       	dc.b	smpsNoAttack, $01
0007ACCF E10F                       	smpsAlterNote       $0F
0007ACD1 E701                       	dc.b	smpsNoAttack, $01
0007ACD3 E109                       	smpsAlterNote       $09
0007ACD5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007ACD9 E10C                       	smpsAlterNote       $0C
0007ACDB E701                       	dc.b	smpsNoAttack, $01
0007ACDD E112                       	smpsAlterNote       $12
0007ACDF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007ACE3 E10C                       	smpsAlterNote       $0C
0007ACE5 E701                       	dc.b	smpsNoAttack, $01
0007ACE7 E109                       	smpsAlterNote       $09
0007ACE9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007ACED E10F                       	smpsAlterNote       $0F
0007ACEF E701                       	dc.b	smpsNoAttack, $01
0007ACF1 E113                       	smpsAlterNote       $13
0007ACF3 E701                       	dc.b	smpsNoAttack, $01
0007ACF5 E112                       	smpsAlterNote       $12
0007ACF7 E701                       	dc.b	smpsNoAttack, $01
0007ACF9 E10C                       	smpsAlterNote       $0C
0007ACFB E701                       	dc.b	smpsNoAttack, $01
0007ACFD E109                       	smpsAlterNote       $09
0007ACFF 8001                       	dc.b	nRst, $01
0007AD01 E10D                       	smpsAlterNote       $0D
0007AD03 B60A                       	dc.b	nF4, $0A
0007AD05 E10C                       	smpsAlterNote       $0C
0007AD07 B506 8001                  	dc.b	nE4, $06, nRst, $01
0007AD0B E10B                       	smpsAlterNote       $0B
0007AD0D B30D 8001                  	dc.b	nD4, $0D, nRst, $01
0007AD11 E10C                       	smpsAlterNote       $0C
0007AD13 B503                       	dc.b	nE4, $03
0007AD15 E10D                       	smpsAlterNote       $0D
0007AD17 B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
0007AD21 E10C                       	smpsAlterNote       $0C
0007AD23 E701                       	dc.b	smpsNoAttack, $01
0007AD25 E108                       	smpsAlterNote       $08
0007AD27 E701                       	dc.b	smpsNoAttack, $01
0007AD29 E10C                       	smpsAlterNote       $0C
0007AD2B E701                       	dc.b	smpsNoAttack, $01
0007AD2D E112                       	smpsAlterNote       $12
0007AD2F E701                       	dc.b	smpsNoAttack, $01
0007AD31 E113                       	smpsAlterNote       $13
0007AD33 E701                       	dc.b	smpsNoAttack, $01
0007AD35 E10F                       	smpsAlterNote       $0F
0007AD37 E701                       	dc.b	smpsNoAttack, $01
0007AD39 E109                       	smpsAlterNote       $09
0007AD3B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AD3F E10C                       	smpsAlterNote       $0C
0007AD41 E701                       	dc.b	smpsNoAttack, $01
0007AD43 E112                       	smpsAlterNote       $12
0007AD45 E701                       	dc.b	smpsNoAttack, $01
0007AD47 E113                       	smpsAlterNote       $13
0007AD49 8001                       	dc.b	nRst, $01
0007AD4B E10D                       	smpsAlterNote       $0D
0007AD4D C20D                       	dc.b	nF5, $0D
0007AD4F E10A                       	smpsAlterNote       $0A
0007AD51 E701                       	dc.b	smpsNoAttack, $01
0007AD53 E106                       	smpsAlterNote       $06
0007AD55 E701                       	dc.b	smpsNoAttack, $01
0007AD57 E10A                       	smpsAlterNote       $0A
0007AD59 E701                       	dc.b	smpsNoAttack, $01
0007AD5B E110                       	smpsAlterNote       $10
0007AD5D E701                       	dc.b	smpsNoAttack, $01
0007AD5F E111                       	smpsAlterNote       $11
0007AD61 E701                       	dc.b	smpsNoAttack, $01
0007AD63 E10D                       	smpsAlterNote       $0D
0007AD65 E701                       	dc.b	smpsNoAttack, $01
0007AD67 E107                       	smpsAlterNote       $07
0007AD69 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AD6D E10A                       	smpsAlterNote       $0A
0007AD6F E701                       	dc.b	smpsNoAttack, $01
0007AD71 E110                       	smpsAlterNote       $10
0007AD73 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AD77 E10A                       	smpsAlterNote       $0A
0007AD79 E701                       	dc.b	smpsNoAttack, $01
0007AD7B E107                       	smpsAlterNote       $07
0007AD7D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AD81 E10D                       	smpsAlterNote       $0D
0007AD83 E701                       	dc.b	smpsNoAttack, $01
0007AD85 E111                       	smpsAlterNote       $11
0007AD87 E701                       	dc.b	smpsNoAttack, $01
0007AD89 E110                       	smpsAlterNote       $10
0007AD8B E701                       	dc.b	smpsNoAttack, $01
0007AD8D E10A                       	smpsAlterNote       $0A
0007AD8F E701                       	dc.b	smpsNoAttack, $01
0007AD91 E106                       	smpsAlterNote       $06
0007AD93 E701                       	dc.b	smpsNoAttack, $01
0007AD95 E10A                       	smpsAlterNote       $0A
0007AD97 E701                       	dc.b	smpsNoAttack, $01
0007AD99 E10D                       	smpsAlterNote       $0D
0007AD9B E701                       	dc.b	smpsNoAttack, $01
0007AD9D E111                       	smpsAlterNote       $11
0007AD9F E701                       	dc.b	smpsNoAttack, $01
0007ADA1 E10D                       	smpsAlterNote       $0D
0007ADA3 E701                       	dc.b	smpsNoAttack, $01
0007ADA5 E107                       	smpsAlterNote       $07
0007ADA7 E701                       	dc.b	smpsNoAttack, $01
0007ADA9 E106                       	smpsAlterNote       $06
0007ADAB E701                       	dc.b	smpsNoAttack, $01
0007ADAD E10A                       	smpsAlterNote       $0A
0007ADAF E701                       	dc.b	smpsNoAttack, $01
0007ADB1 E110                       	smpsAlterNote       $10
0007ADB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007ADB7 E10D                       	smpsAlterNote       $0D
0007ADB9 E701                       	dc.b	smpsNoAttack, $01
0007ADBB E107                       	smpsAlterNote       $07
0007ADBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007ADC1 E10D                       	smpsAlterNote       $0D
0007ADC3 E701                       	dc.b	smpsNoAttack, $01
0007ADC5 E110                       	smpsAlterNote       $10
0007ADC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007ADCB E10A                       	smpsAlterNote       $0A
0007ADCD E701                       	dc.b	smpsNoAttack, $01
0007ADCF E106                       	smpsAlterNote       $06
0007ADD1 E701                       	dc.b	smpsNoAttack, $01
0007ADD3 E107                       	smpsAlterNote       $07
0007ADD5 E701                       	dc.b	smpsNoAttack, $01
0007ADD7 E10D                       	smpsAlterNote       $0D
0007ADD9 E701                       	dc.b	smpsNoAttack, $01
0007ADDB E111                       	smpsAlterNote       $11
0007ADDD E701                       	dc.b	smpsNoAttack, $01
0007ADDF E10D                       	smpsAlterNote       $0D
0007ADE1 E701                       	dc.b	smpsNoAttack, $01
0007ADE3 E10A                       	smpsAlterNote       $0A
0007ADE5 E701                       	dc.b	smpsNoAttack, $01
0007ADE7 E107                       	smpsAlterNote       $07
0007ADE9 8001                       	dc.b	nRst, $01
0007ADEB E10D                       	smpsAlterNote       $0D
0007ADED C206 8001                  	dc.b	nF5, $06, nRst, $01
0007ADF3 E601                       	smpsAlterVol        $01
0007ADF5 E110                       	smpsAlterNote       $10
0007ADF7 BB0D                       	dc.b	nBb4, $0D
0007ADF9 E10A                       	smpsAlterNote       $0A
0007ADFB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007ADFF E110                       	smpsAlterNote       $10
0007AE01 E701                       	dc.b	smpsNoAttack, $01
0007AE03 E113                       	smpsAlterNote       $13
0007AE05 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AE09 E10D                       	smpsAlterNote       $0D
0007AE0B E701                       	dc.b	smpsNoAttack, $01
0007AE0D E109                       	smpsAlterNote       $09
0007AE0F E701                       	dc.b	smpsNoAttack, $01
0007AE11 E10A                       	smpsAlterNote       $0A
0007AE13 E701                       	dc.b	smpsNoAttack, $01
0007AE15 E110                       	smpsAlterNote       $10
0007AE17 E701                       	dc.b	smpsNoAttack, $01
0007AE19 E114                       	smpsAlterNote       $14
0007AE1B E701                       	dc.b	smpsNoAttack, $01
0007AE1D E110                       	smpsAlterNote       $10
0007AE1F E701                       	dc.b	smpsNoAttack, $01
0007AE21 E10D                       	smpsAlterNote       $0D
0007AE23 E701                       	dc.b	smpsNoAttack, $01
0007AE25 E109                       	smpsAlterNote       $09
0007AE27 E701                       	dc.b	smpsNoAttack, $01
0007AE29 E10A                       	smpsAlterNote       $0A
0007AE2B 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
0007AE2F E107                       	smpsAlterNote       $07
0007AE31 E701                       	dc.b	smpsNoAttack, $01
0007AE33 E103                       	smpsAlterNote       $03
0007AE35 E701                       	dc.b	smpsNoAttack, $01
0007AE37 E107                       	smpsAlterNote       $07
0007AE39 E701                       	dc.b	smpsNoAttack, $01
0007AE3B E10D                       	smpsAlterNote       $0D
0007AE3D E701                       	dc.b	smpsNoAttack, $01
0007AE3F E10E                       	smpsAlterNote       $0E
0007AE41 E701                       	dc.b	smpsNoAttack, $01
0007AE43 E10A                       	smpsAlterNote       $0A
0007AE45 E701                       	dc.b	smpsNoAttack, $01
0007AE47 E104                       	smpsAlterNote       $04
0007AE49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AE4D E107                       	smpsAlterNote       $07
0007AE4F E701                       	dc.b	smpsNoAttack, $01
0007AE51 E10D                       	smpsAlterNote       $0D
0007AE53 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AE57 E107                       	smpsAlterNote       $07
0007AE59 E701                       	dc.b	smpsNoAttack, $01
0007AE5B E104                       	smpsAlterNote       $04
0007AE5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AE61 E10B                       	smpsAlterNote       $0B
0007AE63 BF0D                       	dc.b	nD5, $0D
0007AE65 E108                       	smpsAlterNote       $08
0007AE67 E701                       	dc.b	smpsNoAttack, $01
0007AE69 E105                       	smpsAlterNote       $05
0007AE6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AE6F E10B                       	smpsAlterNote       $0B
0007AE71 E701                       	dc.b	smpsNoAttack, $01
0007AE73 E10F                       	smpsAlterNote       $0F
0007AE75 E701                       	dc.b	smpsNoAttack, $01
0007AE77 E10E                       	smpsAlterNote       $0E
0007AE79 E701                       	dc.b	smpsNoAttack, $01
0007AE7B E108                       	smpsAlterNote       $08
0007AE7D E701                       	dc.b	smpsNoAttack, $01
0007AE7F E104                       	smpsAlterNote       $04
0007AE81 E701                       	dc.b	smpsNoAttack, $01
0007AE83 E108                       	smpsAlterNote       $08
0007AE85 E701                       	dc.b	smpsNoAttack, $01
0007AE87 E10B                       	smpsAlterNote       $0B
0007AE89 E701                       	dc.b	smpsNoAttack, $01
0007AE8B E10F                       	smpsAlterNote       $0F
0007AE8D E701                       	dc.b	smpsNoAttack, $01
0007AE8F E10B                       	smpsAlterNote       $0B
0007AE91 E701                       	dc.b	smpsNoAttack, $01
0007AE93 E105                       	smpsAlterNote       $05
0007AE95 E701                       	dc.b	smpsNoAttack, $01
0007AE97 E104                       	smpsAlterNote       $04
0007AE99 E701                       	dc.b	smpsNoAttack, $01
0007AE9B E105                       	smpsAlterNote       $05
0007AE9D 8001                       	dc.b	nRst, $01
0007AE9F E10C                       	smpsAlterNote       $0C
0007AEA1 C10C                       	dc.b	nE5, $0C
0007AEA3 E10D                       	smpsAlterNote       $0D
0007AEA5 C201                       	dc.b	nF5, $01
0007AEA7 E10E                       	smpsAlterNote       $0E
0007AEA9 C301 8001                  	dc.b	nFs5, $01, nRst, $01
0007AEAD E10D                       	smpsAlterNote       $0D
0007AEAF C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
0007AEB3 E10A                       	smpsAlterNote       $0A
0007AEB5 E701                       	dc.b	smpsNoAttack, $01
0007AEB7 E106                       	smpsAlterNote       $06
0007AEB9 E701                       	dc.b	smpsNoAttack, $01
0007AEBB E10A                       	smpsAlterNote       $0A
0007AEBD E701                       	dc.b	smpsNoAttack, $01
0007AEBF E10D                       	smpsAlterNote       $0D
0007AEC1 E701                       	dc.b	smpsNoAttack, $01
0007AEC3 E111                       	smpsAlterNote       $11
0007AEC5 E701                       	dc.b	smpsNoAttack, $01
0007AEC7 E10D                       	smpsAlterNote       $0D
0007AEC9 E701                       	dc.b	smpsNoAttack, $01
0007AECB E107                       	smpsAlterNote       $07
0007AECD E701                       	dc.b	smpsNoAttack, $01
0007AECF E106                       	smpsAlterNote       $06
0007AED1 E701                       	dc.b	smpsNoAttack, $01
0007AED3 E10A                       	smpsAlterNote       $0A
0007AED5 E701                       	dc.b	smpsNoAttack, $01
0007AED7 E110                       	smpsAlterNote       $10
0007AED9 E701                       	dc.b	smpsNoAttack, $01
0007AEDB E111                       	smpsAlterNote       $11
0007AEDD 8001                       	dc.b	nRst, $01
0007AEDF E10D                       	smpsAlterNote       $0D
0007AEE1 C40D                       	dc.b	nG5, $0D
0007AEE3 E10A                       	smpsAlterNote       $0A
0007AEE5 E701                       	dc.b	smpsNoAttack, $01
0007AEE7 E106                       	smpsAlterNote       $06
0007AEE9 E701                       	dc.b	smpsNoAttack, $01
0007AEEB E10A                       	smpsAlterNote       $0A
0007AEED E701                       	dc.b	smpsNoAttack, $01
0007AEEF E10D                       	smpsAlterNote       $0D
0007AEF1 E701                       	dc.b	smpsNoAttack, $01
0007AEF3 E10C                       	smpsAlterNote       $0C
0007AEF5 C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
0007AF01 8001                       	dc.b	nRst, $01
0007AF03 E10D                       	smpsAlterNote       $0D
0007AF05 C20D                       	dc.b	nF5, $0D
0007AF07 E10A                       	smpsAlterNote       $0A
0007AF09 E701                       	dc.b	smpsNoAttack, $01
0007AF0B E106                       	smpsAlterNote       $06
0007AF0D E701                       	dc.b	smpsNoAttack, $01
0007AF0F E10A                       	smpsAlterNote       $0A
0007AF11 E701                       	dc.b	smpsNoAttack, $01
0007AF13 E110                       	smpsAlterNote       $10
0007AF15 E701                       	dc.b	smpsNoAttack, $01
0007AF17 E111                       	smpsAlterNote       $11
0007AF19 E701                       	dc.b	smpsNoAttack, $01
0007AF1B E10D                       	smpsAlterNote       $0D
0007AF1D E701                       	dc.b	smpsNoAttack, $01
0007AF1F E107                       	smpsAlterNote       $07
0007AF21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AF25 E10A                       	smpsAlterNote       $0A
0007AF27 E701                       	dc.b	smpsNoAttack, $01
0007AF29 E110                       	smpsAlterNote       $10
0007AF2B E701                       	dc.b	smpsNoAttack, $01
0007AF2D E111                       	smpsAlterNote       $11
0007AF2F 8001                       	dc.b	nRst, $01
0007AF31 E10F                       	smpsAlterNote       $0F
0007AF33 C60A                       	dc.b	nA5, $0A
0007AF35 E10D                       	smpsAlterNote       $0D
0007AF37 C406 8001                  	dc.b	nG5, $06, nRst, $01
0007AF3B E10C                       	smpsAlterNote       $0C
0007AF3D C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0007AF49 8001                       	dc.b	nRst, $01
0007AF4B E10D                       	smpsAlterNote       $0D
0007AF4D C20D                       	dc.b	nF5, $0D
0007AF4F E107                       	smpsAlterNote       $07
0007AF51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AF55 E10A                       	smpsAlterNote       $0A
0007AF57 E701                       	dc.b	smpsNoAttack, $01
0007AF59 E110                       	smpsAlterNote       $10
0007AF5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AF5F E10A                       	smpsAlterNote       $0A
0007AF61 E701                       	dc.b	smpsNoAttack, $01
0007AF63 E107                       	smpsAlterNote       $07
0007AF65 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AF69 E10D                       	smpsAlterNote       $0D
0007AF6B E701                       	dc.b	smpsNoAttack, $01
0007AF6D E111                       	smpsAlterNote       $11
0007AF6F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007AF73 E10D                       	smpsAlterNote       $0D
0007AF75 C40D                       	dc.b	nG5, $0D
0007AF77 E107                       	smpsAlterNote       $07
0007AF79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AF7D E10A                       	smpsAlterNote       $0A
0007AF7F E701                       	dc.b	smpsNoAttack, $01
0007AF81 E10D                       	smpsAlterNote       $0D
0007AF83 8001                       	dc.b	nRst, $01
0007AF85 E10C                       	smpsAlterNote       $0C
0007AF87 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
0007AF93 E10D                       	smpsAlterNote       $0D
0007AF95 C20E                       	dc.b	nF5, $0E
0007AF97 E107                       	smpsAlterNote       $07
0007AF99 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007AF9D E10D                       	smpsAlterNote       $0D
0007AF9F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
0007AFA5 E0C0                       	smpsPan             panCenter, $00
0007AFA7 E603                       	smpsAlterVol        $03
0007AFA9 E108                       	smpsAlterNote       $08
0007AFAB B406                       	dc.b	nEb4, $06
0007AFAD E10C                       	smpsAlterNote       $0C
0007AFAF AF03 8001                  	dc.b	nBb3, $03, nRst, $01
0007AFB3 E108                       	smpsAlterNote       $08
0007AFB5 B403                       	dc.b	nEb4, $03
0007AFB7 E109                       	smpsAlterNote       $09
0007AFB9 B803 8001                  	dc.b	nG4, $03, nRst, $01
0007AFBD E10C                       	smpsAlterNote       $0C
0007AFBF BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
0007AFC7 03                         	dc.b	$03
0007AFC8 E6FD                       	smpsAlterVol        $FD
0007AFCA F6F1 F4                    	smpsJump            music84_Jump00
0007AFCD                            
0007AFCD                            ; PSG1 Data
0007AFCD                            music84_PSG1:
0007AFCD E1FD                       	smpsAlterNote       $FD
0007AFCF EC04                       	smpsPSGAlterVol     $04
0007AFD1 9203                       	dc.b	nF1, $03
0007AFD3 E1FE                       	smpsAlterNote       $FE
0007AFD5 9603                       	dc.b	nA1, $03
0007AFD7 EC04                       	smpsPSGAlterVol     $04
0007AFD9 E701                       	dc.b	smpsNoAttack, $01
0007AFDB E1FF                       	smpsAlterNote       $FF
0007AFDD ECFC                       	smpsPSGAlterVol     $FC
0007AFDF 9B03                       	dc.b	nD2, $03
0007AFE1 E1FD                       	smpsAlterNote       $FD
0007AFE3 9403                       	dc.b	nG1, $03
0007AFE5 EC04                       	smpsPSGAlterVol     $04
0007AFE7 E701                       	dc.b	smpsNoAttack, $01
0007AFE9 E1FE                       	smpsAlterNote       $FE
0007AFEB ECFC                       	smpsPSGAlterVol     $FC
0007AFED 9703                       	dc.b	nBb1, $03
0007AFEF E1FF                       	smpsAlterNote       $FF
0007AFF1 9B03                       	dc.b	nD2, $03
0007AFF3 EC04                       	smpsPSGAlterVol     $04
0007AFF5 E701                       	dc.b	smpsNoAttack, $01
0007AFF7 E1FE                       	smpsAlterNote       $FE
0007AFF9 ECFC                       	smpsPSGAlterVol     $FC
0007AFFB A002                       	dc.b	nG2, $02
0007AFFD EC04                       	smpsPSGAlterVol     $04
0007AFFF E701                       	dc.b	smpsNoAttack, $01
0007B001 E1FF                       	smpsAlterNote       $FF
0007B003 ECFC                       	smpsPSGAlterVol     $FC
0007B005 A203                       	dc.b	nA2, $03
0007B007 EC0B                       	smpsPSGAlterVol     $0B
0007B009 800A                       	dc.b	nRst, $0A
0007B00B E105                       	smpsAlterNote       $05
0007B00D 01                         	dc.b	$01
0007B00E E1FC                       	smpsAlterNote       $FC
0007B010 01                         	dc.b	$01
0007B011 E105                       	smpsAlterNote       $05
0007B013 01                         	dc.b	$01
0007B014 E1FD                       	smpsAlterNote       $FD
0007B016 01                         	dc.b	$01
0007B017 E105                       	smpsAlterNote       $05
0007B019 01                         	dc.b	$01
0007B01A E1FD                       	smpsAlterNote       $FD
0007B01C 01                         	dc.b	$01
0007B01D E1FA                       	smpsAlterNote       $FA
0007B01F 01                         	dc.b	$01
0007B020 E1FC                       	smpsAlterNote       $FC
0007B022 01                         	dc.b	$01
0007B023 E105                       	smpsAlterNote       $05
0007B025 01                         	dc.b	$01
0007B026 E108                       	smpsAlterNote       $08
0007B028 0101                       	dc.b	$01, $01
0007B02A E105                       	smpsAlterNote       $05
0007B02C 01                         	dc.b	$01
0007B02D E1FA                       	smpsAlterNote       $FA
0007B02F 0101                       	dc.b	$01, $01
0007B031 E1FD                       	smpsAlterNote       $FD
0007B033 01                         	dc.b	$01
0007B034 E105                       	smpsAlterNote       $05
0007B036 01                         	dc.b	$01
0007B037 E108                       	smpsAlterNote       $08
0007B039 01                         	dc.b	$01
0007B03A E105                       	smpsAlterNote       $05
0007B03C 01                         	dc.b	$01
0007B03D E1FC                       	smpsAlterNote       $FC
0007B03F 01                         	dc.b	$01
0007B040 E105                       	smpsAlterNote       $05
0007B042 01                         	dc.b	$01
0007B043 E1FD                       	smpsAlterNote       $FD
0007B045 01                         	dc.b	$01
0007B046                            
0007B046                            music84_Jump07:
0007B046 E105                       	smpsAlterNote       $05
0007B048 8001                       	dc.b	nRst, $01
0007B04A E1FD                       	smpsAlterNote       $FD
0007B04C 01                         	dc.b	$01
0007B04D E1FA                       	smpsAlterNote       $FA
0007B04F 01                         	dc.b	$01
0007B050 E1FC                       	smpsAlterNote       $FC
0007B052 01                         	dc.b	$01
0007B053 E1FD                       	smpsAlterNote       $FD
0007B055 ECF5                       	smpsPSGAlterVol     $F5
0007B057 9206                       	dc.b	nF1, $06
0007B059 EC04                       	smpsPSGAlterVol     $04
0007B05B E701                       	dc.b	smpsNoAttack, $01
0007B05D EC07                       	smpsPSGAlterVol     $07
0007B05F 8003                       	dc.b	nRst, $03
0007B061 ECF5                       	smpsPSGAlterVol     $F5
0007B063 9206                       	dc.b	nF1, $06
0007B065 EC04                       	smpsPSGAlterVol     $04
0007B067 E701                       	dc.b	smpsNoAttack, $01
0007B069 EC07                       	smpsPSGAlterVol     $07
0007B06B 8006                       	dc.b	nRst, $06
0007B06D E100                       	smpsAlterNote       $00
0007B06F 01                         	dc.b	$01
0007B070 E104                       	smpsAlterNote       $04
0007B072 01                         	dc.b	$01
0007B073 E100                       	smpsAlterNote       $00
0007B075 01                         	dc.b	$01
0007B076 E1FB                       	smpsAlterNote       $FB
0007B078 01                         	dc.b	$01
0007B079 E1FD                       	smpsAlterNote       $FD
0007B07B ECF5                       	smpsPSGAlterVol     $F5
0007B07D 9406                       	dc.b	nG1, $06
0007B07F EC04                       	smpsPSGAlterVol     $04
0007B081 E701                       	dc.b	smpsNoAttack, $01
0007B083 EC07                       	smpsPSGAlterVol     $07
0007B085 8003                       	dc.b	nRst, $03
0007B087 ECF5                       	smpsPSGAlterVol     $F5
0007B089 9407                       	dc.b	nG1, $07
0007B08B EC0B                       	smpsPSGAlterVol     $0B
0007B08D 8006                       	dc.b	nRst, $06
0007B08F E100                       	smpsAlterNote       $00
0007B091 01                         	dc.b	$01
0007B092 E103                       	smpsAlterNote       $03
0007B094 0101                       	dc.b	$01, $01
0007B096 E1FD                       	smpsAlterNote       $FD
0007B098 01                         	dc.b	$01
0007B099 ECF5                       	smpsPSGAlterVol     $F5
0007B09B 9207                       	dc.b	nF1, $07
0007B09D EC0B                       	smpsPSGAlterVol     $0B
0007B09F 8004                       	dc.b	nRst, $04
0007B0A1 ECF5                       	smpsPSGAlterVol     $F5
0007B0A3 9206                       	dc.b	nF1, $06
0007B0A5 EC04                       	smpsPSGAlterVol     $04
0007B0A7 E701                       	dc.b	smpsNoAttack, $01
0007B0A9 EC07                       	smpsPSGAlterVol     $07
0007B0AB 8006                       	dc.b	nRst, $06
0007B0AD E103                       	smpsAlterNote       $03
0007B0AF 01                         	dc.b	$01
0007B0B0 E104                       	smpsAlterNote       $04
0007B0B2 01                         	dc.b	$01
0007B0B3 E100                       	smpsAlterNote       $00
0007B0B5 01                         	dc.b	$01
0007B0B6 E1FA                       	smpsAlterNote       $FA
0007B0B8 01                         	dc.b	$01
0007B0B9 E1FD                       	smpsAlterNote       $FD
0007B0BB ECF5                       	smpsPSGAlterVol     $F5
0007B0BD 9206                       	dc.b	nF1, $06
0007B0BF EC04                       	smpsPSGAlterVol     $04
0007B0C1 E701                       	dc.b	smpsNoAttack, $01
0007B0C3 EC07                       	smpsPSGAlterVol     $07
0007B0C5 8003                       	dc.b	nRst, $03
0007B0C7 ECF5                       	smpsPSGAlterVol     $F5
0007B0C9 9106                       	dc.b	nE1, $06
0007B0CB EC04                       	smpsPSGAlterVol     $04
0007B0CD E701                       	dc.b	smpsNoAttack, $01
0007B0CF EC07                       	smpsPSGAlterVol     $07
0007B0D1 8006                       	dc.b	nRst, $06
0007B0D3 E100                       	smpsAlterNote       $00
0007B0D5 01                         	dc.b	$01
0007B0D6 E104                       	smpsAlterNote       $04
0007B0D8 01                         	dc.b	$01
0007B0D9 E100                       	smpsAlterNote       $00
0007B0DB 01                         	dc.b	$01
0007B0DC E1FD                       	smpsAlterNote       $FD
0007B0DE 01                         	dc.b	$01
0007B0DF ECF5                       	smpsPSGAlterVol     $F5
0007B0E1 9206                       	dc.b	nF1, $06
0007B0E3 EC04                       	smpsPSGAlterVol     $04
0007B0E5 E701                       	dc.b	smpsNoAttack, $01
0007B0E7 EC07                       	smpsPSGAlterVol     $07
0007B0E9 8003                       	dc.b	nRst, $03
0007B0EB ECF5                       	smpsPSGAlterVol     $F5
0007B0ED 9207                       	dc.b	nF1, $07
0007B0EF EC0B                       	smpsPSGAlterVol     $0B
0007B0F1 8007                       	dc.b	nRst, $07
0007B0F3 E103                       	smpsAlterNote       $03
0007B0F5 0101                       	dc.b	$01, $01
0007B0F7 E1FD                       	smpsAlterNote       $FD
0007B0F9 01                         	dc.b	$01
0007B0FA E1FB                       	smpsAlterNote       $FB
0007B0FC 01                         	dc.b	$01
0007B0FD E1FD                       	smpsAlterNote       $FD
0007B0FF ECF5                       	smpsPSGAlterVol     $F5
0007B101 9406                       	dc.b	nG1, $06
0007B103 EC0B                       	smpsPSGAlterVol     $0B
0007B105 8004                       	dc.b	nRst, $04
0007B107 ECF5                       	smpsPSGAlterVol     $F5
0007B109 9406                       	dc.b	nG1, $06
0007B10B EC04                       	smpsPSGAlterVol     $04
0007B10D E701                       	dc.b	smpsNoAttack, $01
0007B10F EC07                       	smpsPSGAlterVol     $07
0007B111 8006                       	dc.b	nRst, $06
0007B113 E100                       	smpsAlterNote       $00
0007B115 01                         	dc.b	$01
0007B116 E104                       	smpsAlterNote       $04
0007B118 01                         	dc.b	$01
0007B119 E100                       	smpsAlterNote       $00
0007B11B 01                         	dc.b	$01
0007B11C E1F9                       	smpsAlterNote       $F9
0007B11E 01                         	dc.b	$01
0007B11F E1FD                       	smpsAlterNote       $FD
0007B121 ECF5                       	smpsPSGAlterVol     $F5
0007B123 9206                       	dc.b	nF1, $06
0007B125 EC04                       	smpsPSGAlterVol     $04
0007B127 E701                       	dc.b	smpsNoAttack, $01
0007B129 EC07                       	smpsPSGAlterVol     $07
0007B12B 8003                       	dc.b	nRst, $03
0007B12D ECF5                       	smpsPSGAlterVol     $F5
0007B12F 9207                       	dc.b	nF1, $07
0007B131 EC0B                       	smpsPSGAlterVol     $0B
0007B133 8006                       	dc.b	nRst, $06
0007B135 E100                       	smpsAlterNote       $00
0007B137 01                         	dc.b	$01
0007B138 E104                       	smpsAlterNote       $04
0007B13A 01                         	dc.b	$01
0007B13B E103                       	smpsAlterNote       $03
0007B13D 01                         	dc.b	$01
0007B13E E1FD                       	smpsAlterNote       $FD
0007B140 01                         	dc.b	$01
0007B141 ECF5                       	smpsPSGAlterVol     $F5
0007B143 9207                       	dc.b	nF1, $07
0007B145 EC0B                       	smpsPSGAlterVol     $0B
0007B147 8004                       	dc.b	nRst, $04
0007B149 ECF5                       	smpsPSGAlterVol     $F5
0007B14B 9206                       	dc.b	nF1, $06
0007B14D EC0B                       	smpsPSGAlterVol     $0B
0007B14F 8007                       	dc.b	nRst, $07
0007B151 E103                       	smpsAlterNote       $03
0007B153 0101                       	dc.b	$01, $01
0007B155 E100                       	smpsAlterNote       $00
0007B157 01                         	dc.b	$01
0007B158 E1FA                       	smpsAlterNote       $FA
0007B15A 01                         	dc.b	$01
0007B15B E1FD                       	smpsAlterNote       $FD
0007B15D ECF5                       	smpsPSGAlterVol     $F5
0007B15F 9206                       	dc.b	nF1, $06
0007B161 EC04                       	smpsPSGAlterVol     $04
0007B163 E701                       	dc.b	smpsNoAttack, $01
0007B165 EC07                       	smpsPSGAlterVol     $07
0007B167 8003                       	dc.b	nRst, $03
0007B169 ECF5                       	smpsPSGAlterVol     $F5
0007B16B 9206                       	dc.b	nF1, $06
0007B16D EC04                       	smpsPSGAlterVol     $04
0007B16F E701                       	dc.b	smpsNoAttack, $01
0007B171 EC07                       	smpsPSGAlterVol     $07
0007B173 8006                       	dc.b	nRst, $06
0007B175 E100                       	smpsAlterNote       $00
0007B177 01                         	dc.b	$01
0007B178 E104                       	smpsAlterNote       $04
0007B17A 01                         	dc.b	$01
0007B17B E100                       	smpsAlterNote       $00
0007B17D 01                         	dc.b	$01
0007B17E E1FD                       	smpsAlterNote       $FD
0007B180 01                         	dc.b	$01
0007B181 ECF5                       	smpsPSGAlterVol     $F5
0007B183 9206                       	dc.b	nF1, $06
0007B185 EC04                       	smpsPSGAlterVol     $04
0007B187 E701                       	dc.b	smpsNoAttack, $01
0007B189 EC07                       	smpsPSGAlterVol     $07
0007B18B 8003                       	dc.b	nRst, $03
0007B18D ECF5                       	smpsPSGAlterVol     $F5
0007B18F 9207                       	dc.b	nF1, $07
0007B191 EC0B                       	smpsPSGAlterVol     $0B
0007B193 8007                       	dc.b	nRst, $07
0007B195 E103                       	smpsAlterNote       $03
0007B197 0101                       	dc.b	$01, $01
0007B199 E1FD                       	smpsAlterNote       $FD
0007B19B 01                         	dc.b	$01
0007B19C E1FA                       	smpsAlterNote       $FA
0007B19E 01                         	dc.b	$01
0007B19F E1FD                       	smpsAlterNote       $FD
0007B1A1 ECF5                       	smpsPSGAlterVol     $F5
0007B1A3 9206                       	dc.b	nF1, $06
0007B1A5 EC0B                       	smpsPSGAlterVol     $0B
0007B1A7 8004                       	dc.b	nRst, $04
0007B1A9 ECF5                       	smpsPSGAlterVol     $F5
0007B1AB 9206                       	dc.b	nF1, $06
0007B1AD EC04                       	smpsPSGAlterVol     $04
0007B1AF E701                       	dc.b	smpsNoAttack, $01
0007B1B1 EC07                       	smpsPSGAlterVol     $07
0007B1B3 8006                       	dc.b	nRst, $06
0007B1B5 E103                       	smpsAlterNote       $03
0007B1B7 01                         	dc.b	$01
0007B1B8 E104                       	smpsAlterNote       $04
0007B1BA 01                         	dc.b	$01
0007B1BB E100                       	smpsAlterNote       $00
0007B1BD 01                         	dc.b	$01
0007B1BE E1FA                       	smpsAlterNote       $FA
0007B1C0 01                         	dc.b	$01
0007B1C1 E1FD                       	smpsAlterNote       $FD
0007B1C3 ECF5                       	smpsPSGAlterVol     $F5
0007B1C5 9206                       	dc.b	nF1, $06
0007B1C7 EC04                       	smpsPSGAlterVol     $04
0007B1C9 E701                       	dc.b	smpsNoAttack, $01
0007B1CB EC07                       	smpsPSGAlterVol     $07
0007B1CD 8003                       	dc.b	nRst, $03
0007B1CF ECF5                       	smpsPSGAlterVol     $F5
0007B1D1 9206                       	dc.b	nF1, $06
0007B1D3 EC04                       	smpsPSGAlterVol     $04
0007B1D5 E701                       	dc.b	smpsNoAttack, $01
0007B1D7 EC07                       	smpsPSGAlterVol     $07
0007B1D9 8006                       	dc.b	nRst, $06
0007B1DB E100                       	smpsAlterNote       $00
0007B1DD 01                         	dc.b	$01
0007B1DE E104                       	smpsAlterNote       $04
0007B1E0 01                         	dc.b	$01
0007B1E1 E103                       	smpsAlterNote       $03
0007B1E3 01                         	dc.b	$01
0007B1E4 E1FD                       	smpsAlterNote       $FD
0007B1E6 01                         	dc.b	$01
0007B1E7 ECF5                       	smpsPSGAlterVol     $F5
0007B1E9 9107                       	dc.b	nE1, $07
0007B1EB EC0B                       	smpsPSGAlterVol     $0B
0007B1ED 8004                       	dc.b	nRst, $04
0007B1EF ECF5                       	smpsPSGAlterVol     $F5
0007B1F1 9106                       	dc.b	nE1, $06
0007B1F3 EC0B                       	smpsPSGAlterVol     $0B
0007B1F5 8007                       	dc.b	nRst, $07
0007B1F7 E103                       	smpsAlterNote       $03
0007B1F9 0101                       	dc.b	$01, $01
0007B1FB E100                       	smpsAlterNote       $00
0007B1FD 01                         	dc.b	$01
0007B1FE E1FA                       	smpsAlterNote       $FA
0007B200 01                         	dc.b	$01
0007B201 E1FD                       	smpsAlterNote       $FD
0007B203 ECF5                       	smpsPSGAlterVol     $F5
0007B205 9106                       	dc.b	nE1, $06
0007B207 EC04                       	smpsPSGAlterVol     $04
0007B209 E701                       	dc.b	smpsNoAttack, $01
0007B20B EC07                       	smpsPSGAlterVol     $07
0007B20D 8003                       	dc.b	nRst, $03
0007B20F ECF5                       	smpsPSGAlterVol     $F5
0007B211 9106                       	dc.b	nE1, $06
0007B213 EC04                       	smpsPSGAlterVol     $04
0007B215 E701                       	dc.b	smpsNoAttack, $01
0007B217 EC07                       	smpsPSGAlterVol     $07
0007B219 8006                       	dc.b	nRst, $06
0007B21B E100                       	smpsAlterNote       $00
0007B21D 01                         	dc.b	$01
0007B21E E104                       	smpsAlterNote       $04
0007B220 01                         	dc.b	$01
0007B221 E100                       	smpsAlterNote       $00
0007B223 01                         	dc.b	$01
0007B224 E1FA                       	smpsAlterNote       $FA
0007B226 01                         	dc.b	$01
0007B227 E1FD                       	smpsAlterNote       $FD
0007B229 ECF5                       	smpsPSGAlterVol     $F5
0007B22B 9106                       	dc.b	nE1, $06
0007B22D EC04                       	smpsPSGAlterVol     $04
0007B22F E701                       	dc.b	smpsNoAttack, $01
0007B231 EC07                       	smpsPSGAlterVol     $07
0007B233 8003                       	dc.b	nRst, $03
0007B235 ECF5                       	smpsPSGAlterVol     $F5
0007B237 9107 9106                  	dc.b	nE1, $07, nE1, $06
0007B23B EC04                       	smpsPSGAlterVol     $04
0007B23D E701                       	dc.b	smpsNoAttack, $01
0007B23F ECFC                       	smpsPSGAlterVol     $FC
0007B241 9103 9103                  	dc.b	nE1, $03, nE1, $03
0007B245 EC04                       	smpsPSGAlterVol     $04
0007B247 E701                       	dc.b	smpsNoAttack, $01
0007B249 ECFC                       	smpsPSGAlterVol     $FC
0007B24B 9106                       	dc.b	nE1, $06
0007B24D EC04                       	smpsPSGAlterVol     $04
0007B24F E701                       	dc.b	smpsNoAttack, $01
0007B251 EC07                       	smpsPSGAlterVol     $07
0007B253 8006                       	dc.b	nRst, $06
0007B255 E100                       	smpsAlterNote       $00
0007B257 01                         	dc.b	$01
0007B258 E104                       	smpsAlterNote       $04
0007B25A 01                         	dc.b	$01
0007B25B E100                       	smpsAlterNote       $00
0007B25D 01                         	dc.b	$01
0007B25E E1FA                       	smpsAlterNote       $FA
0007B260 01                         	dc.b	$01
0007B261 E1F9                       	smpsAlterNote       $F9
0007B263 01                         	dc.b	$01
0007B264 E1FD                       	smpsAlterNote       $FD
0007B266 01                         	dc.b	$01
0007B267 E103                       	smpsAlterNote       $03
0007B269 01                         	dc.b	$01
0007B26A E104                       	smpsAlterNote       $04
0007B26C 01                         	dc.b	$01
0007B26D E100                       	smpsAlterNote       $00
0007B26F 01                         	dc.b	$01
0007B270 E1FA                       	smpsAlterNote       $FA
0007B272 0101                       	dc.b	$01, $01
0007B274 E1FD                       	smpsAlterNote       $FD
0007B276 ECF5                       	smpsPSGAlterVol     $F5
0007B278 9206                       	dc.b	nF1, $06
0007B27A EC04                       	smpsPSGAlterVol     $04
0007B27C E701                       	dc.b	smpsNoAttack, $01
0007B27E EC07                       	smpsPSGAlterVol     $07
0007B280 8003                       	dc.b	nRst, $03
0007B282 ECF5                       	smpsPSGAlterVol     $F5
0007B284 9206                       	dc.b	nF1, $06
0007B286 EC04                       	smpsPSGAlterVol     $04
0007B288 E701                       	dc.b	smpsNoAttack, $01
0007B28A EC07                       	smpsPSGAlterVol     $07
0007B28C 8006                       	dc.b	nRst, $06
0007B28E E100                       	smpsAlterNote       $00
0007B290 01                         	dc.b	$01
0007B291 E104                       	smpsAlterNote       $04
0007B293 01                         	dc.b	$01
0007B294 E103                       	smpsAlterNote       $03
0007B296 01                         	dc.b	$01
0007B297 E1FD                       	smpsAlterNote       $FD
0007B299 01                         	dc.b	$01
0007B29A ECF5                       	smpsPSGAlterVol     $F5
0007B29C 9407                       	dc.b	nG1, $07
0007B29E EC0B                       	smpsPSGAlterVol     $0B
0007B2A0 8004                       	dc.b	nRst, $04
0007B2A2 ECF5                       	smpsPSGAlterVol     $F5
0007B2A4 9406                       	dc.b	nG1, $06
0007B2A6 EC0B                       	smpsPSGAlterVol     $0B
0007B2A8 8007                       	dc.b	nRst, $07
0007B2AA E103                       	smpsAlterNote       $03
0007B2AC 0101                       	dc.b	$01, $01
0007B2AE E1FD                       	smpsAlterNote       $FD
0007B2B0 01                         	dc.b	$01
0007B2B1 E1F9                       	smpsAlterNote       $F9
0007B2B3 01                         	dc.b	$01
0007B2B4 E1FD                       	smpsAlterNote       $FD
0007B2B6 ECF5                       	smpsPSGAlterVol     $F5
0007B2B8 9206                       	dc.b	nF1, $06
0007B2BA EC04                       	smpsPSGAlterVol     $04
0007B2BC E701                       	dc.b	smpsNoAttack, $01
0007B2BE EC07                       	smpsPSGAlterVol     $07
0007B2C0 8003                       	dc.b	nRst, $03
0007B2C2 ECF5                       	smpsPSGAlterVol     $F5
0007B2C4 9206                       	dc.b	nF1, $06
0007B2C6 EC04                       	smpsPSGAlterVol     $04
0007B2C8 E701                       	dc.b	smpsNoAttack, $01
0007B2CA EC07                       	smpsPSGAlterVol     $07
0007B2CC 8006                       	dc.b	nRst, $06
0007B2CE E100                       	smpsAlterNote       $00
0007B2D0 01                         	dc.b	$01
0007B2D1 E104                       	smpsAlterNote       $04
0007B2D3 01                         	dc.b	$01
0007B2D4 E100                       	smpsAlterNote       $00
0007B2D6 01                         	dc.b	$01
0007B2D7 E1FA                       	smpsAlterNote       $FA
0007B2D9 01                         	dc.b	$01
0007B2DA E1FD                       	smpsAlterNote       $FD
0007B2DC ECF5                       	smpsPSGAlterVol     $F5
0007B2DE 9206                       	dc.b	nF1, $06
0007B2E0 EC04                       	smpsPSGAlterVol     $04
0007B2E2 E701                       	dc.b	smpsNoAttack, $01
0007B2E4 EC07                       	smpsPSGAlterVol     $07
0007B2E6 8003                       	dc.b	nRst, $03
0007B2E8 ECF5                       	smpsPSGAlterVol     $F5
0007B2EA 9107                       	dc.b	nE1, $07
0007B2EC EC0B                       	smpsPSGAlterVol     $0B
0007B2EE 8006                       	dc.b	nRst, $06
0007B2F0 E100                       	smpsAlterNote       $00
0007B2F2 01                         	dc.b	$01
0007B2F3 E103                       	smpsAlterNote       $03
0007B2F5 0101                       	dc.b	$01, $01
0007B2F7 E1FD                       	smpsAlterNote       $FD
0007B2F9 01                         	dc.b	$01
0007B2FA ECF5                       	smpsPSGAlterVol     $F5
0007B2FC 9207                       	dc.b	nF1, $07
0007B2FE EC0B                       	smpsPSGAlterVol     $0B
0007B300 8004                       	dc.b	nRst, $04
0007B302 ECF5                       	smpsPSGAlterVol     $F5
0007B304 9206                       	dc.b	nF1, $06
0007B306 EC04                       	smpsPSGAlterVol     $04
0007B308 E701                       	dc.b	smpsNoAttack, $01
0007B30A EC07                       	smpsPSGAlterVol     $07
0007B30C 8006                       	dc.b	nRst, $06
0007B30E E103                       	smpsAlterNote       $03
0007B310 01                         	dc.b	$01
0007B311 E104                       	smpsAlterNote       $04
0007B313 01                         	dc.b	$01
0007B314 E100                       	smpsAlterNote       $00
0007B316 01                         	dc.b	$01
0007B317 E1FB                       	smpsAlterNote       $FB
0007B319 01                         	dc.b	$01
0007B31A E1FD                       	smpsAlterNote       $FD
0007B31C ECF5                       	smpsPSGAlterVol     $F5
0007B31E 9406                       	dc.b	nG1, $06
0007B320 EC04                       	smpsPSGAlterVol     $04
0007B322 E701                       	dc.b	smpsNoAttack, $01
0007B324 EC07                       	smpsPSGAlterVol     $07
0007B326 8003                       	dc.b	nRst, $03
0007B328 ECF5                       	smpsPSGAlterVol     $F5
0007B32A 9406                       	dc.b	nG1, $06
0007B32C EC04                       	smpsPSGAlterVol     $04
0007B32E E701                       	dc.b	smpsNoAttack, $01
0007B330 EC07                       	smpsPSGAlterVol     $07
0007B332 8006                       	dc.b	nRst, $06
0007B334 E100                       	smpsAlterNote       $00
0007B336 01                         	dc.b	$01
0007B337 E104                       	smpsAlterNote       $04
0007B339 01                         	dc.b	$01
0007B33A E100                       	smpsAlterNote       $00
0007B33C 01                         	dc.b	$01
0007B33D E1FD                       	smpsAlterNote       $FD
0007B33F 01                         	dc.b	$01
0007B340 ECF5                       	smpsPSGAlterVol     $F5
0007B342 9206                       	dc.b	nF1, $06
0007B344 EC04                       	smpsPSGAlterVol     $04
0007B346 E701                       	dc.b	smpsNoAttack, $01
0007B348 EC07                       	smpsPSGAlterVol     $07
0007B34A 8003                       	dc.b	nRst, $03
0007B34C ECF5                       	smpsPSGAlterVol     $F5
0007B34E 9207                       	dc.b	nF1, $07
0007B350 EC0B                       	smpsPSGAlterVol     $0B
0007B352 8007                       	dc.b	nRst, $07
0007B354 E103                       	smpsAlterNote       $03
0007B356 0101                       	dc.b	$01, $01
0007B358 E1FD                       	smpsAlterNote       $FD
0007B35A 01                         	dc.b	$01
0007B35B E1FA                       	smpsAlterNote       $FA
0007B35D 01                         	dc.b	$01
0007B35E E1FD                       	smpsAlterNote       $FD
0007B360 ECF5                       	smpsPSGAlterVol     $F5
0007B362 9206                       	dc.b	nF1, $06
0007B364 EC0B                       	smpsPSGAlterVol     $0B
0007B366 8004                       	dc.b	nRst, $04
0007B368 ECF5                       	smpsPSGAlterVol     $F5
0007B36A 9206                       	dc.b	nF1, $06
0007B36C EC04                       	smpsPSGAlterVol     $04
0007B36E E701                       	dc.b	smpsNoAttack, $01
0007B370 EC07                       	smpsPSGAlterVol     $07
0007B372 8006                       	dc.b	nRst, $06
0007B374 E100                       	smpsAlterNote       $00
0007B376 01                         	dc.b	$01
0007B377 E104                       	smpsAlterNote       $04
0007B379 01                         	dc.b	$01
0007B37A E100                       	smpsAlterNote       $00
0007B37C 01                         	dc.b	$01
0007B37D E1FA                       	smpsAlterNote       $FA
0007B37F 01                         	dc.b	$01
0007B380 E1FD                       	smpsAlterNote       $FD
0007B382 ECF5                       	smpsPSGAlterVol     $F5
0007B384 9206                       	dc.b	nF1, $06
0007B386 EC04                       	smpsPSGAlterVol     $04
0007B388 E704                       	dc.b	smpsNoAttack, $04
0007B38A ECFC                       	smpsPSGAlterVol     $FC
0007B38C 9207                       	dc.b	nF1, $07
0007B38E EC0B                       	smpsPSGAlterVol     $0B
0007B390 8006                       	dc.b	nRst, $06
0007B392 E100                       	smpsAlterNote       $00
0007B394 01                         	dc.b	$01
0007B395 E104                       	smpsAlterNote       $04
0007B397 01                         	dc.b	$01
0007B398 E103                       	smpsAlterNote       $03
0007B39A 01                         	dc.b	$01
0007B39B E1FD                       	smpsAlterNote       $FD
0007B39D 01                         	dc.b	$01
0007B39E ECF5                       	smpsPSGAlterVol     $F5
0007B3A0 9207                       	dc.b	nF1, $07
0007B3A2 EC0B                       	smpsPSGAlterVol     $0B
0007B3A4 8004                       	dc.b	nRst, $04
0007B3A6 ECF5                       	smpsPSGAlterVol     $F5
0007B3A8 9206                       	dc.b	nF1, $06
0007B3AA EC0B                       	smpsPSGAlterVol     $0B
0007B3AC 8007                       	dc.b	nRst, $07
0007B3AE E103                       	smpsAlterNote       $03
0007B3B0 0101                       	dc.b	$01, $01
0007B3B2 E100                       	smpsAlterNote       $00
0007B3B4 01                         	dc.b	$01
0007B3B5 E1FA                       	smpsAlterNote       $FA
0007B3B7 01                         	dc.b	$01
0007B3B8 E1FD                       	smpsAlterNote       $FD
0007B3BA ECF5                       	smpsPSGAlterVol     $F5
0007B3BC 9206                       	dc.b	nF1, $06
0007B3BE EC04                       	smpsPSGAlterVol     $04
0007B3C0 E704                       	dc.b	smpsNoAttack, $04
0007B3C2 ECFC                       	smpsPSGAlterVol     $FC
0007B3C4 9206                       	dc.b	nF1, $06
0007B3C6 EC04                       	smpsPSGAlterVol     $04
0007B3C8 E701                       	dc.b	smpsNoAttack, $01
0007B3CA EC07                       	smpsPSGAlterVol     $07
0007B3CC 8006                       	dc.b	nRst, $06
0007B3CE E100                       	smpsAlterNote       $00
0007B3D0 01                         	dc.b	$01
0007B3D1 E104                       	smpsAlterNote       $04
0007B3D3 01                         	dc.b	$01
0007B3D4 E100                       	smpsAlterNote       $00
0007B3D6 01                         	dc.b	$01
0007B3D7 E1FD                       	smpsAlterNote       $FD
0007B3D9 01                         	dc.b	$01
0007B3DA ECF5                       	smpsPSGAlterVol     $F5
0007B3DC 9206                       	dc.b	nF1, $06
0007B3DE EC04                       	smpsPSGAlterVol     $04
0007B3E0 E701                       	dc.b	smpsNoAttack, $01
0007B3E2 EC07                       	smpsPSGAlterVol     $07
0007B3E4 8003                       	dc.b	nRst, $03
0007B3E6 ECF5                       	smpsPSGAlterVol     $F5
0007B3E8 9207                       	dc.b	nF1, $07
0007B3EA EC0B                       	smpsPSGAlterVol     $0B
0007B3EC 8007                       	dc.b	nRst, $07
0007B3EE E103                       	smpsAlterNote       $03
0007B3F0 0101                       	dc.b	$01, $01
0007B3F2 E1FD                       	smpsAlterNote       $FD
0007B3F4 01                         	dc.b	$01
0007B3F5 E1FA                       	smpsAlterNote       $FA
0007B3F7 01                         	dc.b	$01
0007B3F8 E1FD                       	smpsAlterNote       $FD
0007B3FA ECF5                       	smpsPSGAlterVol     $F5
0007B3FC 9106                       	dc.b	nE1, $06
0007B3FE EC0B                       	smpsPSGAlterVol     $0B
0007B400 8004                       	dc.b	nRst, $04
0007B402 ECF5                       	smpsPSGAlterVol     $F5
0007B404 9106                       	dc.b	nE1, $06
0007B406 EC04                       	smpsPSGAlterVol     $04
0007B408 E701                       	dc.b	smpsNoAttack, $01
0007B40A EC07                       	smpsPSGAlterVol     $07
0007B40C 8006                       	dc.b	nRst, $06
0007B40E E100                       	smpsAlterNote       $00
0007B410 01                         	dc.b	$01
0007B411 E104                       	smpsAlterNote       $04
0007B413 01                         	dc.b	$01
0007B414 E100                       	smpsAlterNote       $00
0007B416 01                         	dc.b	$01
0007B417 E1FA                       	smpsAlterNote       $FA
0007B419 01                         	dc.b	$01
0007B41A E1FD                       	smpsAlterNote       $FD
0007B41C ECF5                       	smpsPSGAlterVol     $F5
0007B41E 9106                       	dc.b	nE1, $06
0007B420 EC04                       	smpsPSGAlterVol     $04
0007B422 E701                       	dc.b	smpsNoAttack, $01
0007B424 EC07                       	smpsPSGAlterVol     $07
0007B426 8003                       	dc.b	nRst, $03
0007B428 ECF5                       	smpsPSGAlterVol     $F5
0007B42A 9106                       	dc.b	nE1, $06
0007B42C EC04                       	smpsPSGAlterVol     $04
0007B42E E701                       	dc.b	smpsNoAttack, $01
0007B430 EC07                       	smpsPSGAlterVol     $07
0007B432 8006                       	dc.b	nRst, $06
0007B434 E100                       	smpsAlterNote       $00
0007B436 01                         	dc.b	$01
0007B437 E104                       	smpsAlterNote       $04
0007B439 01                         	dc.b	$01
0007B43A E103                       	smpsAlterNote       $03
0007B43C 01                         	dc.b	$01
0007B43D E1FD                       	smpsAlterNote       $FD
0007B43F 01                         	dc.b	$01
0007B440 ECF5                       	smpsPSGAlterVol     $F5
0007B442 9107                       	dc.b	nE1, $07
0007B444 EC0B                       	smpsPSGAlterVol     $0B
0007B446 8004                       	dc.b	nRst, $04
0007B448 ECF5                       	smpsPSGAlterVol     $F5
0007B44A 9106                       	dc.b	nE1, $06
0007B44C EC0B                       	smpsPSGAlterVol     $0B
0007B44E 8007                       	dc.b	nRst, $07
0007B450 E103                       	smpsAlterNote       $03
0007B452 0101                       	dc.b	$01, $01
0007B454 E100                       	smpsAlterNote       $00
0007B456 01                         	dc.b	$01
0007B457 E1FA                       	smpsAlterNote       $FA
0007B459 01                         	dc.b	$01
0007B45A E1FD                       	smpsAlterNote       $FD
0007B45C ECF5                       	smpsPSGAlterVol     $F5
0007B45E 9106                       	dc.b	nE1, $06
0007B460 EC04                       	smpsPSGAlterVol     $04
0007B462 E701                       	dc.b	smpsNoAttack, $01
0007B464 EC07                       	smpsPSGAlterVol     $07
0007B466 8003                       	dc.b	nRst, $03
0007B468 ECF5                       	smpsPSGAlterVol     $F5
0007B46A 9106                       	dc.b	nE1, $06
0007B46C EC04                       	smpsPSGAlterVol     $04
0007B46E E701                       	dc.b	smpsNoAttack, $01
0007B470 EC07                       	smpsPSGAlterVol     $07
0007B472 8003                       	dc.b	nRst, $03
0007B474 ECF5                       	smpsPSGAlterVol     $F5
0007B476 9207                       	dc.b	nF1, $07
0007B478 EC0B                       	smpsPSGAlterVol     $0B
0007B47A 8006                       	dc.b	nRst, $06
0007B47C E100                       	smpsAlterNote       $00
0007B47E 01                         	dc.b	$01
0007B47F E104                       	smpsAlterNote       $04
0007B481 01                         	dc.b	$01
0007B482 E103                       	smpsAlterNote       $03
0007B484 01                         	dc.b	$01
0007B485 E1FD                       	smpsAlterNote       $FD
0007B487 01                         	dc.b	$01
0007B488 E1F9                       	smpsAlterNote       $F9
0007B48A 01                         	dc.b	$01
0007B48B E1FD                       	smpsAlterNote       $FD
0007B48D 01                         	dc.b	$01
0007B48E E100                       	smpsAlterNote       $00
0007B490 01                         	dc.b	$01
0007B491 E104                       	smpsAlterNote       $04
0007B493 01                         	dc.b	$01
0007B494 E1FD                       	smpsAlterNote       $FD
0007B496 ECF5                       	smpsPSGAlterVol     $F5
0007B498 9203 9203                  	dc.b	nF1, $03, nF1, $03
0007B49C EC04                       	smpsPSGAlterVol     $04
0007B49E E701                       	dc.b	smpsNoAttack, $01
0007B4A0 EC07                       	smpsPSGAlterVol     $07
0007B4A2 8009                       	dc.b	nRst, $09
0007B4A4 E100                       	smpsAlterNote       $00
0007B4A6 01                         	dc.b	$01
0007B4A7 E104                       	smpsAlterNote       $04
0007B4A9 01                         	dc.b	$01
0007B4AA E103                       	smpsAlterNote       $03
0007B4AC 01                         	dc.b	$01
0007B4AD E1FD                       	smpsAlterNote       $FD
0007B4AF 01                         	dc.b	$01
0007B4B0 E1F9                       	smpsAlterNote       $F9
0007B4B2 01                         	dc.b	$01
0007B4B3 E1FD                       	smpsAlterNote       $FD
0007B4B5 01                         	dc.b	$01
0007B4B6 E100                       	smpsAlterNote       $00
0007B4B8 01                         	dc.b	$01
0007B4B9 E104                       	smpsAlterNote       $04
0007B4BB 01                         	dc.b	$01
0007B4BC E100                       	smpsAlterNote       $00
0007B4BE 01                         	dc.b	$01
0007B4BF E1FA                       	smpsAlterNote       $FA
0007B4C1 01                         	dc.b	$01
0007B4C2 E1F9                       	smpsAlterNote       $F9
0007B4C4 01                         	dc.b	$01
0007B4C5 E1FD                       	smpsAlterNote       $FD
0007B4C7 01                         	dc.b	$01
0007B4C8 E103                       	smpsAlterNote       $03
0007B4CA 0101                       	dc.b	$01, $01
0007B4CC E100                       	smpsAlterNote       $00
0007B4CE 01                         	dc.b	$01
0007B4CF E1FD                       	smpsAlterNote       $FD
0007B4D1 ECF5                       	smpsPSGAlterVol     $F5
0007B4D3 9202                       	dc.b	nF1, $02
0007B4D5 EC04                       	smpsPSGAlterVol     $04
0007B4D7 E701                       	dc.b	smpsNoAttack, $01
0007B4D9 ECFC                       	smpsPSGAlterVol     $FC
0007B4DB 9106                       	dc.b	nE1, $06
0007B4DD EC04                       	smpsPSGAlterVol     $04
0007B4DF E701                       	dc.b	smpsNoAttack, $01
0007B4E1 EC07                       	smpsPSGAlterVol     $07
0007B4E3 8006                       	dc.b	nRst, $06
0007B4E5 E100                       	smpsAlterNote       $00
0007B4E7 01                         	dc.b	$01
0007B4E8 E104                       	smpsAlterNote       $04
0007B4EA 01                         	dc.b	$01
0007B4EB E100                       	smpsAlterNote       $00
0007B4ED 01                         	dc.b	$01
0007B4EE E1FD                       	smpsAlterNote       $FD
0007B4F0 01                         	dc.b	$01
0007B4F1 E1F9                       	smpsAlterNote       $F9
0007B4F3 01                         	dc.b	$01
0007B4F4 E1FD                       	smpsAlterNote       $FD
0007B4F6 01                         	dc.b	$01
0007B4F7 E103                       	smpsAlterNote       $03
0007B4F9 01                         	dc.b	$01
0007B4FA E104                       	smpsAlterNote       $04
0007B4FC 01                         	dc.b	$01
0007B4FD E1FD                       	smpsAlterNote       $FD
0007B4FF ECF5                       	smpsPSGAlterVol     $F5
0007B501 9102                       	dc.b	nE1, $02
0007B503 EC04                       	smpsPSGAlterVol     $04
0007B505 E701                       	dc.b	smpsNoAttack, $01
0007B507 ECFC                       	smpsPSGAlterVol     $FC
0007B509 920D                       	dc.b	nF1, $0D
0007B50B E100                       	smpsAlterNote       $00
0007B50D E701                       	dc.b	smpsNoAttack, $01
0007B50F E104                       	smpsAlterNote       $04
0007B511 E701                       	dc.b	smpsNoAttack, $01
0007B513 E100                       	smpsAlterNote       $00
0007B515 E701                       	dc.b	smpsNoAttack, $01
0007B517 E1FD                       	smpsAlterNote       $FD
0007B519 E701                       	dc.b	smpsNoAttack, $01
0007B51B E1F9                       	smpsAlterNote       $F9
0007B51D E701                       	dc.b	smpsNoAttack, $01
0007B51F E1FD                       	smpsAlterNote       $FD
0007B521 E701                       	dc.b	smpsNoAttack, $01
0007B523 E103                       	smpsAlterNote       $03
0007B525 E701                       	dc.b	smpsNoAttack, $01
0007B527 E104                       	smpsAlterNote       $04
0007B529 E701                       	dc.b	smpsNoAttack, $01
0007B52B E100                       	smpsAlterNote       $00
0007B52D E701                       	dc.b	smpsNoAttack, $01
0007B52F E1FA                       	smpsAlterNote       $FA
0007B531 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007B535 E1FD                       	smpsAlterNote       $FD
0007B537 E701                       	dc.b	smpsNoAttack, $01
0007B539 E103                       	smpsAlterNote       $03
0007B53B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007B53F E1FD                       	smpsAlterNote       $FD
0007B541 E701                       	dc.b	smpsNoAttack, $01
0007B543 E1F9                       	smpsAlterNote       $F9
0007B545 E701                       	dc.b	smpsNoAttack, $01
0007B547 E1FA                       	smpsAlterNote       $FA
0007B549 E701                       	dc.b	smpsNoAttack, $01
0007B54B E100                       	smpsAlterNote       $00
0007B54D EC04                       	smpsPSGAlterVol     $04
0007B54F E701                       	dc.b	smpsNoAttack, $01
0007B551 EC07                       	smpsPSGAlterVol     $07
0007B553 E104                       	smpsAlterNote       $04
0007B555 8001                       	dc.b	nRst, $01
0007B557 E100                       	smpsAlterNote       $00
0007B559 01                         	dc.b	$01
0007B55A E1FD                       	smpsAlterNote       $FD
0007B55C 01                         	dc.b	$01
0007B55D E1F9                       	smpsAlterNote       $F9
0007B55F 01                         	dc.b	$01
0007B560 E1FD                       	smpsAlterNote       $FD
0007B562 01                         	dc.b	$01
0007B563 E103                       	smpsAlterNote       $03
0007B565 01                         	dc.b	$01
0007B566 E104                       	smpsAlterNote       $04
0007B568 01                         	dc.b	$01
0007B569 E1FD                       	smpsAlterNote       $FD
0007B56B ECF5                       	smpsPSGAlterVol     $F5
0007B56D 9106                       	dc.b	nE1, $06
0007B56F EC04                       	smpsPSGAlterVol     $04
0007B571 E701                       	dc.b	smpsNoAttack, $01
0007B573 EC07                       	smpsPSGAlterVol     $07
0007B575 8003                       	dc.b	nRst, $03
0007B577 ECF5                       	smpsPSGAlterVol     $F5
0007B579 9106                       	dc.b	nE1, $06
0007B57B EC04                       	smpsPSGAlterVol     $04
0007B57D E701                       	dc.b	smpsNoAttack, $01
0007B57F EC07                       	smpsPSGAlterVol     $07
0007B581 8006                       	dc.b	nRst, $06
0007B583 E100                       	smpsAlterNote       $00
0007B585 01                         	dc.b	$01
0007B586 E104                       	smpsAlterNote       $04
0007B588 01                         	dc.b	$01
0007B589 E100                       	smpsAlterNote       $00
0007B58B 01                         	dc.b	$01
0007B58C E1FA                       	smpsAlterNote       $FA
0007B58E 01                         	dc.b	$01
0007B58F E1FD                       	smpsAlterNote       $FD
0007B591 ECF5                       	smpsPSGAlterVol     $F5
0007B593 9206                       	dc.b	nF1, $06
0007B595 EC04                       	smpsPSGAlterVol     $04
0007B597 E701                       	dc.b	smpsNoAttack, $01
0007B599 EC07                       	smpsPSGAlterVol     $07
0007B59B 8003                       	dc.b	nRst, $03
0007B59D ECF5                       	smpsPSGAlterVol     $F5
0007B59F 9207                       	dc.b	nF1, $07
0007B5A1 EC0B                       	smpsPSGAlterVol     $0B
0007B5A3 8006                       	dc.b	nRst, $06
0007B5A5 E100                       	smpsAlterNote       $00
0007B5A7 01                         	dc.b	$01
0007B5A8 E103                       	smpsAlterNote       $03
0007B5AA 0101                       	dc.b	$01, $01
0007B5AC E1FD                       	smpsAlterNote       $FD
0007B5AE 01                         	dc.b	$01
0007B5AF ECF5                       	smpsPSGAlterVol     $F5
0007B5B1 9107                       	dc.b	nE1, $07
0007B5B3 EC0B                       	smpsPSGAlterVol     $0B
0007B5B5 8004                       	dc.b	nRst, $04
0007B5B7 ECF5                       	smpsPSGAlterVol     $F5
0007B5B9 9106                       	dc.b	nE1, $06
0007B5BB EC04                       	smpsPSGAlterVol     $04
0007B5BD E701                       	dc.b	smpsNoAttack, $01
0007B5BF EC07                       	smpsPSGAlterVol     $07
0007B5C1 8006                       	dc.b	nRst, $06
0007B5C3 E103                       	smpsAlterNote       $03
0007B5C5 01                         	dc.b	$01
0007B5C6 E104                       	smpsAlterNote       $04
0007B5C8 01                         	dc.b	$01
0007B5C9 E100                       	smpsAlterNote       $00
0007B5CB 01                         	dc.b	$01
0007B5CC E1FA                       	smpsAlterNote       $FA
0007B5CE 01                         	dc.b	$01
0007B5CF E1FD                       	smpsAlterNote       $FD
0007B5D1 ECF5                       	smpsPSGAlterVol     $F5
0007B5D3 9106                       	dc.b	nE1, $06
0007B5D5 EC04                       	smpsPSGAlterVol     $04
0007B5D7 E701                       	dc.b	smpsNoAttack, $01
0007B5D9 EC07                       	smpsPSGAlterVol     $07
0007B5DB 8003                       	dc.b	nRst, $03
0007B5DD ECF5                       	smpsPSGAlterVol     $F5
0007B5DF 9106                       	dc.b	nE1, $06
0007B5E1 EC04                       	smpsPSGAlterVol     $04
0007B5E3 E701                       	dc.b	smpsNoAttack, $01
0007B5E5 EC07                       	smpsPSGAlterVol     $07
0007B5E7 8003                       	dc.b	nRst, $03
0007B5E9 ECF5                       	smpsPSGAlterVol     $F5
0007B5EB 9207                       	dc.b	nF1, $07
0007B5ED EC0B                       	smpsPSGAlterVol     $0B
0007B5EF 8006                       	dc.b	nRst, $06
0007B5F1 E100                       	smpsAlterNote       $00
0007B5F3 01                         	dc.b	$01
0007B5F4 E103                       	smpsAlterNote       $03
0007B5F6 0101                       	dc.b	$01, $01
0007B5F8 E1FD                       	smpsAlterNote       $FD
0007B5FA 01                         	dc.b	$01
0007B5FB E1F9                       	smpsAlterNote       $F9
0007B5FD 01                         	dc.b	$01
0007B5FE E1FA                       	smpsAlterNote       $FA
0007B600 01                         	dc.b	$01
0007B601 E100                       	smpsAlterNote       $00
0007B603 01                         	dc.b	$01
0007B604 E104                       	smpsAlterNote       $04
0007B606 01                         	dc.b	$01
0007B607 E1FD                       	smpsAlterNote       $FD
0007B609 ECF5                       	smpsPSGAlterVol     $F5
0007B60B 9203 9203                  	dc.b	nF1, $03, nF1, $03
0007B60F EC04                       	smpsPSGAlterVol     $04
0007B611 E701                       	dc.b	smpsNoAttack, $01
0007B613 EC07                       	smpsPSGAlterVol     $07
0007B615 8009                       	dc.b	nRst, $09
0007B617 E100                       	smpsAlterNote       $00
0007B619 01                         	dc.b	$01
0007B61A E103                       	smpsAlterNote       $03
0007B61C 0101                       	dc.b	$01, $01
0007B61E E1FD                       	smpsAlterNote       $FD
0007B620 01                         	dc.b	$01
0007B621 E1F9                       	smpsAlterNote       $F9
0007B623 01                         	dc.b	$01
0007B624 E1FA                       	smpsAlterNote       $FA
0007B626 01                         	dc.b	$01
0007B627 E100                       	smpsAlterNote       $00
0007B629 01                         	dc.b	$01
0007B62A E104                       	smpsAlterNote       $04
0007B62C 01                         	dc.b	$01
0007B62D E100                       	smpsAlterNote       $00
0007B62F 01                         	dc.b	$01
0007B630 E1FD                       	smpsAlterNote       $FD
0007B632 01                         	dc.b	$01
0007B633 E1F9                       	smpsAlterNote       $F9
0007B635 01                         	dc.b	$01
0007B636 E1FD                       	smpsAlterNote       $FD
0007B638 01                         	dc.b	$01
0007B639 E103                       	smpsAlterNote       $03
0007B63B 01                         	dc.b	$01
0007B63C E104                       	smpsAlterNote       $04
0007B63E 01                         	dc.b	$01
0007B63F E100                       	smpsAlterNote       $00
0007B641 01                         	dc.b	$01
0007B642 E1FD                       	smpsAlterNote       $FD
0007B644 ECF5                       	smpsPSGAlterVol     $F5
0007B646 9203 9106                  	dc.b	nF1, $03, nE1, $06
0007B64A EC04                       	smpsPSGAlterVol     $04
0007B64C E701                       	dc.b	smpsNoAttack, $01
0007B64E EC07                       	smpsPSGAlterVol     $07
0007B650 8006                       	dc.b	nRst, $06
0007B652 E100                       	smpsAlterNote       $00
0007B654 01                         	dc.b	$01
0007B655 E104                       	smpsAlterNote       $04
0007B657 01                         	dc.b	$01
0007B658 E103                       	smpsAlterNote       $03
0007B65A 01                         	dc.b	$01
0007B65B E1FD                       	smpsAlterNote       $FD
0007B65D 01                         	dc.b	$01
0007B65E E1F9                       	smpsAlterNote       $F9
0007B660 01                         	dc.b	$01
0007B661 E1FD                       	smpsAlterNote       $FD
0007B663 01                         	dc.b	$01
0007B664 E100                       	smpsAlterNote       $00
0007B666 01                         	dc.b	$01
0007B667 E104                       	smpsAlterNote       $04
0007B669 01                         	dc.b	$01
0007B66A E1FD                       	smpsAlterNote       $FD
0007B66C ECF5                       	smpsPSGAlterVol     $F5
0007B66E 9103 920D                  	dc.b	nE1, $03, nF1, $0D
0007B672 E100                       	smpsAlterNote       $00
0007B674 E701                       	dc.b	smpsNoAttack, $01
0007B676 E104                       	smpsAlterNote       $04
0007B678 E701                       	dc.b	smpsNoAttack, $01
0007B67A E100                       	smpsAlterNote       $00
0007B67C E701                       	dc.b	smpsNoAttack, $01
0007B67E E1FD                       	smpsAlterNote       $FD
0007B680 E701                       	dc.b	smpsNoAttack, $01
0007B682 E1F9                       	smpsAlterNote       $F9
0007B684 E701                       	dc.b	smpsNoAttack, $01
0007B686 E1FD                       	smpsAlterNote       $FD
0007B688 E701                       	dc.b	smpsNoAttack, $01
0007B68A E103                       	smpsAlterNote       $03
0007B68C E701                       	dc.b	smpsNoAttack, $01
0007B68E E104                       	smpsAlterNote       $04
0007B690 E701                       	dc.b	smpsNoAttack, $01
0007B692 E100                       	smpsAlterNote       $00
0007B694 E701                       	dc.b	smpsNoAttack, $01
0007B696 E1FA                       	smpsAlterNote       $FA
0007B698 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007B69C E1FD                       	smpsAlterNote       $FD
0007B69E E701                       	dc.b	smpsNoAttack, $01
0007B6A0 E103                       	smpsAlterNote       $03
0007B6A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007B6A6 E100                       	smpsAlterNote       $00
0007B6A8 E701                       	dc.b	smpsNoAttack, $01
0007B6AA E1FA                       	smpsAlterNote       $FA
0007B6AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007B6B0 E100                       	smpsAlterNote       $00
0007B6B2 EC04                       	smpsPSGAlterVol     $04
0007B6B4 E701                       	dc.b	smpsNoAttack, $01
0007B6B6 EC07                       	smpsPSGAlterVol     $07
0007B6B8 E104                       	smpsAlterNote       $04
0007B6BA 8001                       	dc.b	nRst, $01
0007B6BC E103                       	smpsAlterNote       $03
0007B6BE 01                         	dc.b	$01
0007B6BF E1FD                       	smpsAlterNote       $FD
0007B6C1 01                         	dc.b	$01
0007B6C2 E1F9                       	smpsAlterNote       $F9
0007B6C4 01                         	dc.b	$01
0007B6C5 E1FD                       	smpsAlterNote       $FD
0007B6C7 01                         	dc.b	$01
0007B6C8 E100                       	smpsAlterNote       $00
0007B6CA 01                         	dc.b	$01
0007B6CB E104                       	smpsAlterNote       $04
0007B6CD 01                         	dc.b	$01
0007B6CE E1FD                       	smpsAlterNote       $FD
0007B6D0 ECF5                       	smpsPSGAlterVol     $F5
0007B6D2 9106                       	dc.b	nE1, $06
0007B6D4 EC04                       	smpsPSGAlterVol     $04
0007B6D6 E701                       	dc.b	smpsNoAttack, $01
0007B6D8 EC07                       	smpsPSGAlterVol     $07
0007B6DA 8003                       	dc.b	nRst, $03
0007B6DC ECF5                       	smpsPSGAlterVol     $F5
0007B6DE 9106                       	dc.b	nE1, $06
0007B6E0 EC04                       	smpsPSGAlterVol     $04
0007B6E2 E701                       	dc.b	smpsNoAttack, $01
0007B6E4 EC07                       	smpsPSGAlterVol     $07
0007B6E6 8006                       	dc.b	nRst, $06
0007B6E8 E100                       	smpsAlterNote       $00
0007B6EA 01                         	dc.b	$01
0007B6EB E104                       	smpsAlterNote       $04
0007B6ED 01                         	dc.b	$01
0007B6EE E100                       	smpsAlterNote       $00
0007B6F0 01                         	dc.b	$01
0007B6F1 E1FD                       	smpsAlterNote       $FD
0007B6F3 01                         	dc.b	$01
0007B6F4 ECF5                       	smpsPSGAlterVol     $F5
0007B6F6 9206                       	dc.b	nF1, $06
0007B6F8 EC04                       	smpsPSGAlterVol     $04
0007B6FA E701                       	dc.b	smpsNoAttack, $01
0007B6FC EC07                       	smpsPSGAlterVol     $07
0007B6FE 8003                       	dc.b	nRst, $03
0007B700 ECF5                       	smpsPSGAlterVol     $F5
0007B702 9207                       	dc.b	nF1, $07
0007B704 EC0B                       	smpsPSGAlterVol     $0B
0007B706 8007                       	dc.b	nRst, $07
0007B708 E103                       	smpsAlterNote       $03
0007B70A 0101                       	dc.b	$01, $01
0007B70C E1FD                       	smpsAlterNote       $FD
0007B70E 01                         	dc.b	$01
0007B70F E1FA                       	smpsAlterNote       $FA
0007B711 01                         	dc.b	$01
0007B712 E1FD                       	smpsAlterNote       $FD
0007B714 ECF5                       	smpsPSGAlterVol     $F5
0007B716 9106                       	dc.b	nE1, $06
0007B718 EC0B                       	smpsPSGAlterVol     $0B
0007B71A 8004                       	dc.b	nRst, $04
0007B71C ECF5                       	smpsPSGAlterVol     $F5
0007B71E 9106                       	dc.b	nE1, $06
0007B720 EC04                       	smpsPSGAlterVol     $04
0007B722 E701                       	dc.b	smpsNoAttack, $01
0007B724 EC07                       	smpsPSGAlterVol     $07
0007B726 8006                       	dc.b	nRst, $06
0007B728 E100                       	smpsAlterNote       $00
0007B72A 01                         	dc.b	$01
0007B72B E104                       	smpsAlterNote       $04
0007B72D 01                         	dc.b	$01
0007B72E E100                       	smpsAlterNote       $00
0007B730 01                         	dc.b	$01
0007B731 E1FA                       	smpsAlterNote       $FA
0007B733 01                         	dc.b	$01
0007B734 E1FD                       	smpsAlterNote       $FD
0007B736 ECF5                       	smpsPSGAlterVol     $F5
0007B738 9206                       	dc.b	nF1, $06
0007B73A EC04                       	smpsPSGAlterVol     $04
0007B73C E701                       	dc.b	smpsNoAttack, $01
0007B73E EC07                       	smpsPSGAlterVol     $07
0007B740 8003                       	dc.b	nRst, $03
0007B742 ECF5                       	smpsPSGAlterVol     $F5
0007B744 9206                       	dc.b	nF1, $06
0007B746 EC04                       	smpsPSGAlterVol     $04
0007B748 E701                       	dc.b	smpsNoAttack, $01
0007B74A EC07                       	smpsPSGAlterVol     $07
0007B74C 8006                       	dc.b	nRst, $06
0007B74E E100                       	smpsAlterNote       $00
0007B750 01                         	dc.b	$01
0007B751 E104                       	smpsAlterNote       $04
0007B753 01                         	dc.b	$01
0007B754 E103                       	smpsAlterNote       $03
0007B756 01                         	dc.b	$01
0007B757 E1FD                       	smpsAlterNote       $FD
0007B759 01                         	dc.b	$01
0007B75A ECF5                       	smpsPSGAlterVol     $F5
0007B75C 9107                       	dc.b	nE1, $07
0007B75E EC0B                       	smpsPSGAlterVol     $0B
0007B760 8004                       	dc.b	nRst, $04
0007B762 ECF5                       	smpsPSGAlterVol     $F5
0007B764 9106                       	dc.b	nE1, $06
0007B766 EC0B                       	smpsPSGAlterVol     $0B
0007B768 8007                       	dc.b	nRst, $07
0007B76A E103                       	smpsAlterNote       $03
0007B76C 0101                       	dc.b	$01, $01
0007B76E E100                       	smpsAlterNote       $00
0007B770 01                         	dc.b	$01
0007B771 E1FA                       	smpsAlterNote       $FA
0007B773 01                         	dc.b	$01
0007B774 E1FD                       	smpsAlterNote       $FD
0007B776 ECF5                       	smpsPSGAlterVol     $F5
0007B778 9206                       	dc.b	nF1, $06
0007B77A EC04                       	smpsPSGAlterVol     $04
0007B77C E701                       	dc.b	smpsNoAttack, $01
0007B77E EC07                       	smpsPSGAlterVol     $07
0007B780 8003                       	dc.b	nRst, $03
0007B782 ECF5                       	smpsPSGAlterVol     $F5
0007B784 9206                       	dc.b	nF1, $06
0007B786 EC04                       	smpsPSGAlterVol     $04
0007B788 E701                       	dc.b	smpsNoAttack, $01
0007B78A EC07                       	smpsPSGAlterVol     $07
0007B78C 8006                       	dc.b	nRst, $06
0007B78E E100                       	smpsAlterNote       $00
0007B790 01                         	dc.b	$01
0007B791 E104                       	smpsAlterNote       $04
0007B793 01                         	dc.b	$01
0007B794 E100                       	smpsAlterNote       $00
0007B796 01                         	dc.b	$01
0007B797 E1FD                       	smpsAlterNote       $FD
0007B799 01                         	dc.b	$01
0007B79A ECF5                       	smpsPSGAlterVol     $F5
0007B79C 9106                       	dc.b	nE1, $06
0007B79E EC04                       	smpsPSGAlterVol     $04
0007B7A0 E701                       	dc.b	smpsNoAttack, $01
0007B7A2 EC07                       	smpsPSGAlterVol     $07
0007B7A4 8003                       	dc.b	nRst, $03
0007B7A6 ECF5                       	smpsPSGAlterVol     $F5
0007B7A8 9107 9106                  	dc.b	nE1, $07, nE1, $06
0007B7AC EC04                       	smpsPSGAlterVol     $04
0007B7AE E701                       	dc.b	smpsNoAttack, $01
0007B7B0 ECFC                       	smpsPSGAlterVol     $FC
0007B7B2 9103                       	dc.b	nE1, $03
0007B7B4 EC04                       	smpsPSGAlterVol     $04
0007B7B6 E701                       	dc.b	smpsNoAttack, $01
0007B7B8 ECFC                       	smpsPSGAlterVol     $FC
0007B7BA 9102                       	dc.b	nE1, $02
0007B7BC EC04                       	smpsPSGAlterVol     $04
0007B7BE E701                       	dc.b	smpsNoAttack, $01
0007B7C0 ECFC                       	smpsPSGAlterVol     $FC
0007B7C2 9103                       	dc.b	nE1, $03
0007B7C4 EC0B                       	smpsPSGAlterVol     $0B
0007B7C6 800A                       	dc.b	nRst, $0A
0007B7C8 E100                       	smpsAlterNote       $00
0007B7CA 01                         	dc.b	$01
0007B7CB E104                       	smpsAlterNote       $04
0007B7CD 01                         	dc.b	$01
0007B7CE E100                       	smpsAlterNote       $00
0007B7D0 01                         	dc.b	$01
0007B7D1 E1FA                       	smpsAlterNote       $FA
0007B7D3 01                         	dc.b	$01
0007B7D4 E1F9                       	smpsAlterNote       $F9
0007B7D6 01                         	dc.b	$01
0007B7D7 E1FD                       	smpsAlterNote       $FD
0007B7D9 01                         	dc.b	$01
0007B7DA E103                       	smpsAlterNote       $03
0007B7DC 0101                       	dc.b	$01, $01
0007B7DE E100                       	smpsAlterNote       $00
0007B7E0 01                         	dc.b	$01
0007B7E1 E1FA                       	smpsAlterNote       $FA
0007B7E3 0101                       	dc.b	$01, $01
0007B7E5 E1FD                       	smpsAlterNote       $FD
0007B7E7 ECF5                       	smpsPSGAlterVol     $F5
0007B7E9 9206                       	dc.b	nF1, $06
0007B7EB EC04                       	smpsPSGAlterVol     $04
0007B7ED E704                       	dc.b	smpsNoAttack, $04
0007B7EF ECFC                       	smpsPSGAlterVol     $FC
0007B7F1 9206                       	dc.b	nF1, $06
0007B7F3 EC04                       	smpsPSGAlterVol     $04
0007B7F5 E701                       	dc.b	smpsNoAttack, $01
0007B7F7 EC07                       	smpsPSGAlterVol     $07
0007B7F9 8006                       	dc.b	nRst, $06
0007B7FB E100                       	smpsAlterNote       $00
0007B7FD 01                         	dc.b	$01
0007B7FE E104                       	smpsAlterNote       $04
0007B800 01                         	dc.b	$01
0007B801 E103                       	smpsAlterNote       $03
0007B803 01                         	dc.b	$01
0007B804 E1FD                       	smpsAlterNote       $FD
0007B806 01                         	dc.b	$01
0007B807 ECF5                       	smpsPSGAlterVol     $F5
0007B809 9407                       	dc.b	nG1, $07
0007B80B EC0B                       	smpsPSGAlterVol     $0B
0007B80D 8004                       	dc.b	nRst, $04
0007B80F ECF5                       	smpsPSGAlterVol     $F5
0007B811 9406                       	dc.b	nG1, $06
0007B813 EC0B                       	smpsPSGAlterVol     $0B
0007B815 8007                       	dc.b	nRst, $07
0007B817 E103                       	smpsAlterNote       $03
0007B819 0101                       	dc.b	$01, $01
0007B81B E1FD                       	smpsAlterNote       $FD
0007B81D 01                         	dc.b	$01
0007B81E E1F9                       	smpsAlterNote       $F9
0007B820 01                         	dc.b	$01
0007B821 E1FD                       	smpsAlterNote       $FD
0007B823 ECF5                       	smpsPSGAlterVol     $F5
0007B825 9206                       	dc.b	nF1, $06
0007B827 EC04                       	smpsPSGAlterVol     $04
0007B829 E701                       	dc.b	smpsNoAttack, $01
0007B82B EC07                       	smpsPSGAlterVol     $07
0007B82D 8003                       	dc.b	nRst, $03
0007B82F ECF5                       	smpsPSGAlterVol     $F5
0007B831 9206                       	dc.b	nF1, $06
0007B833 EC04                       	smpsPSGAlterVol     $04
0007B835 E701                       	dc.b	smpsNoAttack, $01
0007B837 EC07                       	smpsPSGAlterVol     $07
0007B839 8006                       	dc.b	nRst, $06
0007B83B E100                       	smpsAlterNote       $00
0007B83D 01                         	dc.b	$01
0007B83E E104                       	smpsAlterNote       $04
0007B840 01                         	dc.b	$01
0007B841 E100                       	smpsAlterNote       $00
0007B843 01                         	dc.b	$01
0007B844 E1FA                       	smpsAlterNote       $FA
0007B846 01                         	dc.b	$01
0007B847 E1FD                       	smpsAlterNote       $FD
0007B849 ECF5                       	smpsPSGAlterVol     $F5
0007B84B 9206                       	dc.b	nF1, $06
0007B84D EC04                       	smpsPSGAlterVol     $04
0007B84F E701                       	dc.b	smpsNoAttack, $01
0007B851 EC07                       	smpsPSGAlterVol     $07
0007B853 8003                       	dc.b	nRst, $03
0007B855 ECF5                       	smpsPSGAlterVol     $F5
0007B857 9107                       	dc.b	nE1, $07
0007B859 EC0B                       	smpsPSGAlterVol     $0B
0007B85B 8006                       	dc.b	nRst, $06
0007B85D E100                       	smpsAlterNote       $00
0007B85F 01                         	dc.b	$01
0007B860 E103                       	smpsAlterNote       $03
0007B862 0101                       	dc.b	$01, $01
0007B864 E1FD                       	smpsAlterNote       $FD
0007B866 01                         	dc.b	$01
0007B867 ECF5                       	smpsPSGAlterVol     $F5
0007B869 9207                       	dc.b	nF1, $07
0007B86B EC0B                       	smpsPSGAlterVol     $0B
0007B86D 8004                       	dc.b	nRst, $04
0007B86F ECF5                       	smpsPSGAlterVol     $F5
0007B871 9206                       	dc.b	nF1, $06
0007B873 EC04                       	smpsPSGAlterVol     $04
0007B875 E701                       	dc.b	smpsNoAttack, $01
0007B877 EC07                       	smpsPSGAlterVol     $07
0007B879 8006                       	dc.b	nRst, $06
0007B87B E103                       	smpsAlterNote       $03
0007B87D 01                         	dc.b	$01
0007B87E E104                       	smpsAlterNote       $04
0007B880 01                         	dc.b	$01
0007B881 E100                       	smpsAlterNote       $00
0007B883 01                         	dc.b	$01
0007B884 E1FB                       	smpsAlterNote       $FB
0007B886 01                         	dc.b	$01
0007B887 E1FD                       	smpsAlterNote       $FD
0007B889 ECF5                       	smpsPSGAlterVol     $F5
0007B88B 9406                       	dc.b	nG1, $06
0007B88D EC04                       	smpsPSGAlterVol     $04
0007B88F E701                       	dc.b	smpsNoAttack, $01
0007B891 EC07                       	smpsPSGAlterVol     $07
0007B893 8003                       	dc.b	nRst, $03
0007B895 ECF5                       	smpsPSGAlterVol     $F5
0007B897 9406                       	dc.b	nG1, $06
0007B899 EC04                       	smpsPSGAlterVol     $04
0007B89B E701                       	dc.b	smpsNoAttack, $01
0007B89D EC07                       	smpsPSGAlterVol     $07
0007B89F 8006                       	dc.b	nRst, $06
0007B8A1 E100                       	smpsAlterNote       $00
0007B8A3 01                         	dc.b	$01
0007B8A4 E104                       	smpsAlterNote       $04
0007B8A6 01                         	dc.b	$01
0007B8A7 E100                       	smpsAlterNote       $00
0007B8A9 01                         	dc.b	$01
0007B8AA E1FD                       	smpsAlterNote       $FD
0007B8AC 01                         	dc.b	$01
0007B8AD ECF5                       	smpsPSGAlterVol     $F5
0007B8AF 9206                       	dc.b	nF1, $06
0007B8B1 EC04                       	smpsPSGAlterVol     $04
0007B8B3 E701                       	dc.b	smpsNoAttack, $01
0007B8B5 EC07                       	smpsPSGAlterVol     $07
0007B8B7 8003                       	dc.b	nRst, $03
0007B8B9 ECF5                       	smpsPSGAlterVol     $F5
0007B8BB 9207                       	dc.b	nF1, $07
0007B8BD EC0B                       	smpsPSGAlterVol     $0B
0007B8BF 8007                       	dc.b	nRst, $07
0007B8C1 E103                       	smpsAlterNote       $03
0007B8C3 0101                       	dc.b	$01, $01
0007B8C5 E1FD                       	smpsAlterNote       $FD
0007B8C7 01                         	dc.b	$01
0007B8C8 E1FA                       	smpsAlterNote       $FA
0007B8CA 01                         	dc.b	$01
0007B8CB E1FD                       	smpsAlterNote       $FD
0007B8CD ECF5                       	smpsPSGAlterVol     $F5
0007B8CF 9206                       	dc.b	nF1, $06
0007B8D1 EC0B                       	smpsPSGAlterVol     $0B
0007B8D3 8004                       	dc.b	nRst, $04
0007B8D5 ECF5                       	smpsPSGAlterVol     $F5
0007B8D7 9206                       	dc.b	nF1, $06
0007B8D9 EC04                       	smpsPSGAlterVol     $04
0007B8DB E701                       	dc.b	smpsNoAttack, $01
0007B8DD EC07                       	smpsPSGAlterVol     $07
0007B8DF 8006                       	dc.b	nRst, $06
0007B8E1 E100                       	smpsAlterNote       $00
0007B8E3 01                         	dc.b	$01
0007B8E4 E104                       	smpsAlterNote       $04
0007B8E6 01                         	dc.b	$01
0007B8E7 E100                       	smpsAlterNote       $00
0007B8E9 01                         	dc.b	$01
0007B8EA E1FA                       	smpsAlterNote       $FA
0007B8EC 01                         	dc.b	$01
0007B8ED E1FD                       	smpsAlterNote       $FD
0007B8EF ECF5                       	smpsPSGAlterVol     $F5
0007B8F1 9206                       	dc.b	nF1, $06
0007B8F3 EC04                       	smpsPSGAlterVol     $04
0007B8F5 E701                       	dc.b	smpsNoAttack, $01
0007B8F7 EC07                       	smpsPSGAlterVol     $07
0007B8F9 8003                       	dc.b	nRst, $03
0007B8FB ECF5                       	smpsPSGAlterVol     $F5
0007B8FD 9207                       	dc.b	nF1, $07
0007B8FF EC0B                       	smpsPSGAlterVol     $0B
0007B901 8006                       	dc.b	nRst, $06
0007B903 E100                       	smpsAlterNote       $00
0007B905 01                         	dc.b	$01
0007B906 E103                       	smpsAlterNote       $03
0007B908 0101                       	dc.b	$01, $01
0007B90A E1FD                       	smpsAlterNote       $FD
0007B90C 01                         	dc.b	$01
0007B90D ECF5                       	smpsPSGAlterVol     $F5
0007B90F 9207                       	dc.b	nF1, $07
0007B911 EC0B                       	smpsPSGAlterVol     $0B
0007B913 8004                       	dc.b	nRst, $04
0007B915 ECF5                       	smpsPSGAlterVol     $F5
0007B917 9206                       	dc.b	nF1, $06
0007B919 EC0B                       	smpsPSGAlterVol     $0B
0007B91B 8007                       	dc.b	nRst, $07
0007B91D E103                       	smpsAlterNote       $03
0007B91F 0101                       	dc.b	$01, $01
0007B921 E100                       	smpsAlterNote       $00
0007B923 01                         	dc.b	$01
0007B924 E1FA                       	smpsAlterNote       $FA
0007B926 01                         	dc.b	$01
0007B927 E1FD                       	smpsAlterNote       $FD
0007B929 ECF5                       	smpsPSGAlterVol     $F5
0007B92B 9206                       	dc.b	nF1, $06
0007B92D EC04                       	smpsPSGAlterVol     $04
0007B92F E701                       	dc.b	smpsNoAttack, $01
0007B931 EC07                       	smpsPSGAlterVol     $07
0007B933 8003                       	dc.b	nRst, $03
0007B935 ECF5                       	smpsPSGAlterVol     $F5
0007B937 9206                       	dc.b	nF1, $06
0007B939 EC04                       	smpsPSGAlterVol     $04
0007B93B E701                       	dc.b	smpsNoAttack, $01
0007B93D EC07                       	smpsPSGAlterVol     $07
0007B93F 8006                       	dc.b	nRst, $06
0007B941 E100                       	smpsAlterNote       $00
0007B943 01                         	dc.b	$01
0007B944 E104                       	smpsAlterNote       $04
0007B946 01                         	dc.b	$01
0007B947 E100                       	smpsAlterNote       $00
0007B949 01                         	dc.b	$01
0007B94A E1FD                       	smpsAlterNote       $FD
0007B94C 01                         	dc.b	$01
0007B94D ECF5                       	smpsPSGAlterVol     $F5
0007B94F 9206                       	dc.b	nF1, $06
0007B951 EC04                       	smpsPSGAlterVol     $04
0007B953 E701                       	dc.b	smpsNoAttack, $01
0007B955 EC07                       	smpsPSGAlterVol     $07
0007B957 8003                       	dc.b	nRst, $03
0007B959 ECF5                       	smpsPSGAlterVol     $F5
0007B95B 9207                       	dc.b	nF1, $07
0007B95D EC0B                       	smpsPSGAlterVol     $0B
0007B95F 8007                       	dc.b	nRst, $07
0007B961 E104                       	smpsAlterNote       $04
0007B963 0101                       	dc.b	$01, $01
0007B965 E1FB                       	smpsAlterNote       $FB
0007B967 01                         	dc.b	$01
0007B968 E1F6                       	smpsAlterNote       $F6
0007B96A 0101                       	dc.b	$01, $01
0007B96C E1FF                       	smpsAlterNote       $FF
0007B96E 01                         	dc.b	$01
0007B96F E105                       	smpsAlterNote       $05
0007B971 01                         	dc.b	$01
0007B972 E104                       	smpsAlterNote       $04
0007B974 01                         	dc.b	$01
0007B975 E1FB                       	smpsAlterNote       $FB
0007B977 01                         	dc.b	$01
0007B978 E1F5                       	smpsAlterNote       $F5
0007B97A 01                         	dc.b	$01
0007B97B E1FC                       	smpsAlterNote       $FC
0007B97D ECF5                       	smpsPSGAlterVol     $F5
0007B97F 8B0E                       	dc.b	nBb0, $0E
0007B981 E102                       	smpsAlterNote       $02
0007B983 EC0B                       	smpsPSGAlterVol     $0B
0007B985 8001                       	dc.b	nRst, $01
0007B987 E101                       	smpsAlterNote       $01
0007B989 01                         	dc.b	$01
0007B98A E1FC                       	smpsAlterNote       $FC
0007B98C 01                         	dc.b	$01
0007B98D E1F9                       	smpsAlterNote       $F9
0007B98F 0101                       	dc.b	$01, $01
0007B991 E1FF                       	smpsAlterNote       $FF
0007B993 01                         	dc.b	$01
0007B994 E102                       	smpsAlterNote       $02
0007B996 01                         	dc.b	$01
0007B997 E1FF                       	smpsAlterNote       $FF
0007B999 01                         	dc.b	$01
0007B99A E1FC                       	smpsAlterNote       $FC
0007B99C 01                         	dc.b	$01
0007B99D E1F8                       	smpsAlterNote       $F8
0007B99F 01                         	dc.b	$01
0007B9A0 E1FC                       	smpsAlterNote       $FC
0007B9A2 01                         	dc.b	$01
0007B9A3 E101                       	smpsAlterNote       $01
0007B9A5 01                         	dc.b	$01
0007B9A6 E102                       	smpsAlterNote       $02
0007B9A8 01                         	dc.b	$01
0007B9A9 E1FF                       	smpsAlterNote       $FF
0007B9AB 01                         	dc.b	$01
0007B9AC E1FB                       	smpsAlterNote       $FB
0007B9AE ECF5                       	smpsPSGAlterVol     $F5
0007B9B0 8D0D                       	dc.b	nC1, $0D
0007B9B2 E101                       	smpsAlterNote       $01
0007B9B4 EC0B                       	smpsPSGAlterVol     $0B
0007B9B6 8001                       	dc.b	nRst, $01
0007B9B8 E102                       	smpsAlterNote       $02
0007B9BA 01                         	dc.b	$01
0007B9BB E1FF                       	smpsAlterNote       $FF
0007B9BD 01                         	dc.b	$01
0007B9BE E1F9                       	smpsAlterNote       $F9
0007B9C0 0101                       	dc.b	$01, $01
0007B9C2 E1FC                       	smpsAlterNote       $FC
0007B9C4 01                         	dc.b	$01
0007B9C5 E101                       	smpsAlterNote       $01
0007B9C7 0101                       	dc.b	$01, $01
0007B9C9 E1FC                       	smpsAlterNote       $FC
0007B9CB 01                         	dc.b	$01
0007B9CC E1F9                       	smpsAlterNote       $F9
0007B9CE 0101                       	dc.b	$01, $01
0007B9D0 E1FF                       	smpsAlterNote       $FF
0007B9D2 01                         	dc.b	$01
0007B9D3 E102                       	smpsAlterNote       $02
0007B9D5 01                         	dc.b	$01
0007B9D6 E101                       	smpsAlterNote       $01
0007B9D8 01                         	dc.b	$01
0007B9D9 E1FC                       	smpsAlterNote       $FC
0007B9DB ECF5                       	smpsPSGAlterVol     $F5
0007B9DD 8F0D                       	dc.b	nD1, $0D
0007B9DF E1FF                       	smpsAlterNote       $FF
0007B9E1 EC04                       	smpsPSGAlterVol     $04
0007B9E3 E701                       	dc.b	smpsNoAttack, $01
0007B9E5 EC07                       	smpsPSGAlterVol     $07
0007B9E7 E103                       	smpsAlterNote       $03
0007B9E9 8001                       	dc.b	nRst, $01
0007B9EB E102                       	smpsAlterNote       $02
0007B9ED 01                         	dc.b	$01
0007B9EE E1FD                       	smpsAlterNote       $FD
0007B9F0 01                         	dc.b	$01
0007B9F1 E1F9                       	smpsAlterNote       $F9
0007B9F3 01                         	dc.b	$01
0007B9F4 E1FD                       	smpsAlterNote       $FD
0007B9F6 01                         	dc.b	$01
0007B9F7 E100                       	smpsAlterNote       $00
0007B9F9 01                         	dc.b	$01
0007B9FA E103                       	smpsAlterNote       $03
0007B9FC 01                         	dc.b	$01
0007B9FD E100                       	smpsAlterNote       $00
0007B9FF 01                         	dc.b	$01
0007BA00 E1FA                       	smpsAlterNote       $FA
0007BA02 01                         	dc.b	$01
0007BA03 E1F9                       	smpsAlterNote       $F9
0007BA05 01                         	dc.b	$01
0007BA06 E1FD                       	smpsAlterNote       $FD
0007BA08 01                         	dc.b	$01
0007BA09 E102                       	smpsAlterNote       $02
0007BA0B 0101                       	dc.b	$01, $01
0007BA0D E100                       	smpsAlterNote       $00
0007BA0F 01                         	dc.b	$01
0007BA10 E1FD                       	smpsAlterNote       $FD
0007BA12 ECF5                       	smpsPSGAlterVol     $F5
0007BA14 910D                       	dc.b	nE1, $0D
0007BA16 E103                       	smpsAlterNote       $03
0007BA18 EC0B                       	smpsPSGAlterVol     $0B
0007BA1A 8001 01                    	dc.b	nRst, $01, $01
0007BA1D E100                       	smpsAlterNote       $00
0007BA1F 01                         	dc.b	$01
0007BA20 E1FA                       	smpsAlterNote       $FA
0007BA22 0101                       	dc.b	$01, $01
0007BA24 E100                       	smpsAlterNote       $00
0007BA26 01                         	dc.b	$01
0007BA27 E103                       	smpsAlterNote       $03
0007BA29 01                         	dc.b	$01
0007BA2A E1FD                       	smpsAlterNote       $FD
0007BA2C ECF5                       	smpsPSGAlterVol     $F5
0007BA2E 9206                       	dc.b	nF1, $06
0007BA30 EC04                       	smpsPSGAlterVol     $04
0007BA32 E701                       	dc.b	smpsNoAttack, $01
0007BA34 EC07                       	smpsPSGAlterVol     $07
0007BA36 8003                       	dc.b	nRst, $03
0007BA38 ECF5                       	smpsPSGAlterVol     $F5
0007BA3A 9207                       	dc.b	nF1, $07
0007BA3C EC0B                       	smpsPSGAlterVol     $0B
0007BA3E 8006                       	dc.b	nRst, $06
0007BA40 E100                       	smpsAlterNote       $00
0007BA42 01                         	dc.b	$01
0007BA43 E103                       	smpsAlterNote       $03
0007BA45 0101                       	dc.b	$01, $01
0007BA47 E1FD                       	smpsAlterNote       $FD
0007BA49 01                         	dc.b	$01
0007BA4A ECF5                       	smpsPSGAlterVol     $F5
0007BA4C 9407                       	dc.b	nG1, $07
0007BA4E EC0B                       	smpsPSGAlterVol     $0B
0007BA50 8004                       	dc.b	nRst, $04
0007BA52 ECF5                       	smpsPSGAlterVol     $F5
0007BA54 9406                       	dc.b	nG1, $06
0007BA56 EC04                       	smpsPSGAlterVol     $04
0007BA58 E701                       	dc.b	smpsNoAttack, $01
0007BA5A EC07                       	smpsPSGAlterVol     $07
0007BA5C 8006                       	dc.b	nRst, $06
0007BA5E E103                       	smpsAlterNote       $03
0007BA60 01                         	dc.b	$01
0007BA61 E104                       	smpsAlterNote       $04
0007BA63 01                         	dc.b	$01
0007BA64 E100                       	smpsAlterNote       $00
0007BA66 01                         	dc.b	$01
0007BA67 E1F9                       	smpsAlterNote       $F9
0007BA69 01                         	dc.b	$01
0007BA6A E1FD                       	smpsAlterNote       $FD
0007BA6C ECF5                       	smpsPSGAlterVol     $F5
0007BA6E 9206                       	dc.b	nF1, $06
0007BA70 EC04                       	smpsPSGAlterVol     $04
0007BA72 E701                       	dc.b	smpsNoAttack, $01
0007BA74 EC07                       	smpsPSGAlterVol     $07
0007BA76 8003                       	dc.b	nRst, $03
0007BA78 ECF5                       	smpsPSGAlterVol     $F5
0007BA7A 9206                       	dc.b	nF1, $06
0007BA7C EC04                       	smpsPSGAlterVol     $04
0007BA7E E701                       	dc.b	smpsNoAttack, $01
0007BA80 EC07                       	smpsPSGAlterVol     $07
0007BA82 8006                       	dc.b	nRst, $06
0007BA84 E100                       	smpsAlterNote       $00
0007BA86 01                         	dc.b	$01
0007BA87 E104                       	smpsAlterNote       $04
0007BA89 01                         	dc.b	$01
0007BA8A E103                       	smpsAlterNote       $03
0007BA8C 01                         	dc.b	$01
0007BA8D E1FD                       	smpsAlterNote       $FD
0007BA8F 01                         	dc.b	$01
0007BA90 ECF5                       	smpsPSGAlterVol     $F5
0007BA92 9407                       	dc.b	nG1, $07
0007BA94 EC0B                       	smpsPSGAlterVol     $0B
0007BA96 8004                       	dc.b	nRst, $04
0007BA98 ECF5                       	smpsPSGAlterVol     $F5
0007BA9A 9406                       	dc.b	nG1, $06
0007BA9C EC0B                       	smpsPSGAlterVol     $0B
0007BA9E 8007                       	dc.b	nRst, $07
0007BAA0 E103                       	smpsAlterNote       $03
0007BAA2 0101                       	dc.b	$01, $01
0007BAA4 E100                       	smpsAlterNote       $00
0007BAA6 01                         	dc.b	$01
0007BAA7 E1F9                       	smpsAlterNote       $F9
0007BAA9 01                         	dc.b	$01
0007BAAA E1FD                       	smpsAlterNote       $FD
0007BAAC ECF5                       	smpsPSGAlterVol     $F5
0007BAAE 9206                       	dc.b	nF1, $06
0007BAB0 EC04                       	smpsPSGAlterVol     $04
0007BAB2 E701                       	dc.b	smpsNoAttack, $01
0007BAB4 EC07                       	smpsPSGAlterVol     $07
0007BAB6 8003                       	dc.b	nRst, $03
0007BAB8 ECF5                       	smpsPSGAlterVol     $F5
0007BABA 9206                       	dc.b	nF1, $06
0007BABC EC04                       	smpsPSGAlterVol     $04
0007BABE E701                       	dc.b	smpsNoAttack, $01
0007BAC0 EC07                       	smpsPSGAlterVol     $07
0007BAC2 8006                       	dc.b	nRst, $06
0007BAC4 E100                       	smpsAlterNote       $00
0007BAC6 01                         	dc.b	$01
0007BAC7 E104                       	smpsAlterNote       $04
0007BAC9 01                         	dc.b	$01
0007BACA E100                       	smpsAlterNote       $00
0007BACC 01                         	dc.b	$01
0007BACD E1FB                       	smpsAlterNote       $FB
0007BACF 01                         	dc.b	$01
0007BAD0 E1FD                       	smpsAlterNote       $FD
0007BAD2 ECF5                       	smpsPSGAlterVol     $F5
0007BAD4 9406                       	dc.b	nG1, $06
0007BAD6 EC04                       	smpsPSGAlterVol     $04
0007BAD8 E701                       	dc.b	smpsNoAttack, $01
0007BADA EC07                       	smpsPSGAlterVol     $07
0007BADC 8003                       	dc.b	nRst, $03
0007BADE ECF5                       	smpsPSGAlterVol     $F5
0007BAE0 9407                       	dc.b	nG1, $07
0007BAE2 EC0B                       	smpsPSGAlterVol     $0B
0007BAE4 8006                       	dc.b	nRst, $06
0007BAE6 E100                       	smpsAlterNote       $00
0007BAE8 01                         	dc.b	$01
0007BAE9 E103                       	smpsAlterNote       $03
0007BAEB 0101                       	dc.b	$01, $01
0007BAED E1FD                       	smpsAlterNote       $FD
0007BAEF 01                         	dc.b	$01
0007BAF0 ECF5                       	smpsPSGAlterVol     $F5
0007BAF2 9207                       	dc.b	nF1, $07
0007BAF4 EC0B                       	smpsPSGAlterVol     $0B
0007BAF6 8004                       	dc.b	nRst, $04
0007BAF8 ECF5                       	smpsPSGAlterVol     $F5
0007BAFA 9206                       	dc.b	nF1, $06
0007BAFC EC04                       	smpsPSGAlterVol     $04
0007BAFE E701                       	dc.b	smpsNoAttack, $01
0007BB00 ECFC                       	smpsPSGAlterVol     $FC
0007BB02 E1FC                       	smpsAlterNote       $FC
0007BB04 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
0007BB08 EC04                       	smpsPSGAlterVol     $04
0007BB0A E701                       	dc.b	smpsNoAttack, $01
0007BB0C ECFC                       	smpsPSGAlterVol     $FC
0007BB0E 9003                       	dc.b	nEb1, $03
0007BB10 E1FD                       	smpsAlterNote       $FD
0007BB12 9403                       	dc.b	nG1, $03
0007BB14 EC04                       	smpsPSGAlterVol     $04
0007BB16 E701                       	dc.b	smpsNoAttack, $01
0007BB18 E1FE                       	smpsAlterNote       $FE
0007BB1A ECFC                       	smpsPSGAlterVol     $FC
0007BB1C 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0007BB20 EC04                       	smpsPSGAlterVol     $04
0007BB22 E701                       	dc.b	smpsNoAttack, $01
0007BB24 EC07                       	smpsPSGAlterVol     $07
0007BB26 8009                       	dc.b	nRst, $09
0007BB28 E100                       	smpsAlterNote       $00
0007BB2A 01                         	dc.b	$01
0007BB2B F6F5 19                    	smpsJump            music84_Jump07
0007BB2E                            
0007BB2E                            ; PSG2 Data
0007BB2E                            music84_PSG2:
0007BB2E E1FC                       	smpsAlterNote       $FC
0007BB30 EC04                       	smpsPSGAlterVol     $04
0007BB32 8F03                       	dc.b	nD1, $03
0007BB34 E1FD                       	smpsAlterNote       $FD
0007BB36 9203                       	dc.b	nF1, $03
0007BB38 EC04                       	smpsPSGAlterVol     $04
0007BB3A E701                       	dc.b	smpsNoAttack, $01
0007BB3C E1FE                       	smpsAlterNote       $FE
0007BB3E ECFC                       	smpsPSGAlterVol     $FC
0007BB40 9603                       	dc.b	nA1, $03
0007BB42 E1FD                       	smpsAlterNote       $FD
0007BB44 9103                       	dc.b	nE1, $03
0007BB46 EC04                       	smpsPSGAlterVol     $04
0007BB48 E701                       	dc.b	smpsNoAttack, $01
0007BB4A ECFC                       	smpsPSGAlterVol     $FC
0007BB4C 9403                       	dc.b	nG1, $03
0007BB4E E1FE                       	smpsAlterNote       $FE
0007BB50 9703                       	dc.b	nBb1, $03
0007BB52 EC04                       	smpsPSGAlterVol     $04
0007BB54 E701                       	dc.b	smpsNoAttack, $01
0007BB56 E1FF                       	smpsAlterNote       $FF
0007BB58 ECFC                       	smpsPSGAlterVol     $FC
0007BB5A 9B02                       	dc.b	nD2, $02
0007BB5C EC04                       	smpsPSGAlterVol     $04
0007BB5E E701                       	dc.b	smpsNoAttack, $01
0007BB60 ECFC                       	smpsPSGAlterVol     $FC
0007BB62 E1FE                       	smpsAlterNote       $FE
0007BB64 9A03                       	dc.b	nCs2, $03
0007BB66 EC0B                       	smpsPSGAlterVol     $0B
0007BB68 800A                       	dc.b	nRst, $0A
0007BB6A E102                       	smpsAlterNote       $02
0007BB6C 01                         	dc.b	$01
0007BB6D E10A                       	smpsAlterNote       $0A
0007BB6F 01                         	dc.b	$01
0007BB70 E102                       	smpsAlterNote       $02
0007BB72 01                         	dc.b	$01
0007BB73 E1FC                       	smpsAlterNote       $FC
0007BB75 01                         	dc.b	$01
0007BB76 E10A                       	smpsAlterNote       $0A
0007BB78 01                         	dc.b	$01
0007BB79 E1FC                       	smpsAlterNote       $FC
0007BB7B 01                         	dc.b	$01
0007BB7C E108                       	smpsAlterNote       $08
0007BB7E 01                         	dc.b	$01
0007BB7F E10A                       	smpsAlterNote       $0A
0007BB81 01                         	dc.b	$01
0007BB82 E102                       	smpsAlterNote       $02
0007BB84 01                         	dc.b	$01
0007BB85 E1F7                       	smpsAlterNote       $F7
0007BB87 0101                       	dc.b	$01, $01
0007BB89 E102                       	smpsAlterNote       $02
0007BB8B 01                         	dc.b	$01
0007BB8C E108                       	smpsAlterNote       $08
0007BB8E 0101                       	dc.b	$01, $01
0007BB90 E1FC                       	smpsAlterNote       $FC
0007BB92 01                         	dc.b	$01
0007BB93 E10A                       	smpsAlterNote       $0A
0007BB95 01                         	dc.b	$01
0007BB96 E1F7                       	smpsAlterNote       $F7
0007BB98 01                         	dc.b	$01
0007BB99 E102                       	smpsAlterNote       $02
0007BB9B 01                         	dc.b	$01
0007BB9C E10A                       	smpsAlterNote       $0A
0007BB9E 01                         	dc.b	$01
0007BB9F E102                       	smpsAlterNote       $02
0007BBA1 01                         	dc.b	$01
0007BBA2 E1FC                       	smpsAlterNote       $FC
0007BBA4 01                         	dc.b	$01
0007BBA5                            
0007BBA5                            music84_Jump06:
0007BBA5 E10A                       	smpsAlterNote       $0A
0007BBA7 8001                       	dc.b	nRst, $01
0007BBA9 E1FC                       	smpsAlterNote       $FC
0007BBAB 01                         	dc.b	$01
0007BBAC E108                       	smpsAlterNote       $08
0007BBAE 01                         	dc.b	$01
0007BBAF E10A                       	smpsAlterNote       $0A
0007BBB1 01                         	dc.b	$01
0007BBB2 E1FC                       	smpsAlterNote       $FC
0007BBB4 ECF5                       	smpsPSGAlterVol     $F5
0007BBB6 8F06                       	dc.b	nD1, $06
0007BBB8 EC04                       	smpsPSGAlterVol     $04
0007BBBA E701                       	dc.b	smpsNoAttack, $01
0007BBBC EC07                       	smpsPSGAlterVol     $07
0007BBBE 8003                       	dc.b	nRst, $03
0007BBC0 ECF5                       	smpsPSGAlterVol     $F5
0007BBC2 8F06                       	dc.b	nD1, $06
0007BBC4 EC04                       	smpsPSGAlterVol     $04
0007BBC6 E701                       	dc.b	smpsNoAttack, $01
0007BBC8 EC07                       	smpsPSGAlterVol     $07
0007BBCA 8006                       	dc.b	nRst, $06
0007BBCC E1FF                       	smpsAlterNote       $FF
0007BBCE 01                         	dc.b	$01
0007BBCF E102                       	smpsAlterNote       $02
0007BBD1 01                         	dc.b	$01
0007BBD2 E1FF                       	smpsAlterNote       $FF
0007BBD4 01                         	dc.b	$01
0007BBD5 E1F9                       	smpsAlterNote       $F9
0007BBD7 01                         	dc.b	$01
0007BBD8 E1FC                       	smpsAlterNote       $FC
0007BBDA ECF5                       	smpsPSGAlterVol     $F5
0007BBDC 9006                       	dc.b	nEb1, $06
0007BBDE EC04                       	smpsPSGAlterVol     $04
0007BBE0 E701                       	dc.b	smpsNoAttack, $01
0007BBE2 EC07                       	smpsPSGAlterVol     $07
0007BBE4 8003                       	dc.b	nRst, $03
0007BBE6 ECF5                       	smpsPSGAlterVol     $F5
0007BBE8 9007                       	dc.b	nEb1, $07
0007BBEA EC0B                       	smpsPSGAlterVol     $0B
0007BBEC 8006                       	dc.b	nRst, $06
0007BBEE E1FF                       	smpsAlterNote       $FF
0007BBF0 01                         	dc.b	$01
0007BBF1 E103                       	smpsAlterNote       $03
0007BBF3 0101                       	dc.b	$01, $01
0007BBF5 E1FC                       	smpsAlterNote       $FC
0007BBF7 01                         	dc.b	$01
0007BBF8 ECF5                       	smpsPSGAlterVol     $F5
0007BBFA 8F07                       	dc.b	nD1, $07
0007BBFC EC0B                       	smpsPSGAlterVol     $0B
0007BBFE 8004                       	dc.b	nRst, $04
0007BC00 ECF5                       	smpsPSGAlterVol     $F5
0007BC02 8F06                       	dc.b	nD1, $06
0007BC04 EC04                       	smpsPSGAlterVol     $04
0007BC06 E701                       	dc.b	smpsNoAttack, $01
0007BC08 EC07                       	smpsPSGAlterVol     $07
0007BC0A 8006                       	dc.b	nRst, $06
0007BC0C E102                       	smpsAlterNote       $02
0007BC0E 01                         	dc.b	$01
0007BC0F E103                       	smpsAlterNote       $03
0007BC11 01                         	dc.b	$01
0007BC12 E1FF                       	smpsAlterNote       $FF
0007BC14 01                         	dc.b	$01
0007BC15 E1F9                       	smpsAlterNote       $F9
0007BC17 01                         	dc.b	$01
0007BC18 E1FC                       	smpsAlterNote       $FC
0007BC1A ECF5                       	smpsPSGAlterVol     $F5
0007BC1C 8F06                       	dc.b	nD1, $06
0007BC1E EC04                       	smpsPSGAlterVol     $04
0007BC20 E701                       	dc.b	smpsNoAttack, $01
0007BC22 EC07                       	smpsPSGAlterVol     $07
0007BC24 8003                       	dc.b	nRst, $03
0007BC26 ECF5                       	smpsPSGAlterVol     $F5
0007BC28 8F06                       	dc.b	nD1, $06
0007BC2A EC04                       	smpsPSGAlterVol     $04
0007BC2C E701                       	dc.b	smpsNoAttack, $01
0007BC2E EC07                       	smpsPSGAlterVol     $07
0007BC30 8006                       	dc.b	nRst, $06
0007BC32 E1FF                       	smpsAlterNote       $FF
0007BC34 01                         	dc.b	$01
0007BC35 E103                       	smpsAlterNote       $03
0007BC37 01                         	dc.b	$01
0007BC38 E1FF                       	smpsAlterNote       $FF
0007BC3A 01                         	dc.b	$01
0007BC3B E1FC                       	smpsAlterNote       $FC
0007BC3D 01                         	dc.b	$01
0007BC3E ECF5                       	smpsPSGAlterVol     $F5
0007BC40 8F06                       	dc.b	nD1, $06
0007BC42 EC04                       	smpsPSGAlterVol     $04
0007BC44 E701                       	dc.b	smpsNoAttack, $01
0007BC46 EC07                       	smpsPSGAlterVol     $07
0007BC48 8003                       	dc.b	nRst, $03
0007BC4A ECF5                       	smpsPSGAlterVol     $F5
0007BC4C 8F07                       	dc.b	nD1, $07
0007BC4E EC0B                       	smpsPSGAlterVol     $0B
0007BC50 8007                       	dc.b	nRst, $07
0007BC52 E101                       	smpsAlterNote       $01
0007BC54 0101                       	dc.b	$01, $01
0007BC56 E1FC                       	smpsAlterNote       $FC
0007BC58 01                         	dc.b	$01
0007BC59 E1F9                       	smpsAlterNote       $F9
0007BC5B 01                         	dc.b	$01
0007BC5C E1FC                       	smpsAlterNote       $FC
0007BC5E ECF5                       	smpsPSGAlterVol     $F5
0007BC60 9006                       	dc.b	nEb1, $06
0007BC62 EC0B                       	smpsPSGAlterVol     $0B
0007BC64 8004                       	dc.b	nRst, $04
0007BC66 ECF5                       	smpsPSGAlterVol     $F5
0007BC68 9006                       	dc.b	nEb1, $06
0007BC6A EC04                       	smpsPSGAlterVol     $04
0007BC6C E701                       	dc.b	smpsNoAttack, $01
0007BC6E EC07                       	smpsPSGAlterVol     $07
0007BC70 8006                       	dc.b	nRst, $06
0007BC72 E100                       	smpsAlterNote       $00
0007BC74 01                         	dc.b	$01
0007BC75 E102                       	smpsAlterNote       $02
0007BC77 01                         	dc.b	$01
0007BC78 E100                       	smpsAlterNote       $00
0007BC7A 01                         	dc.b	$01
0007BC7B E1FD                       	smpsAlterNote       $FD
0007BC7D 01                         	dc.b	$01
0007BC7E E1FF                       	smpsAlterNote       $FF
0007BC80 ECF5                       	smpsPSGAlterVol     $F5
0007BC82 9B06                       	dc.b	nD2, $06
0007BC84 EC04                       	smpsPSGAlterVol     $04
0007BC86 E701                       	dc.b	smpsNoAttack, $01
0007BC88 EC07                       	smpsPSGAlterVol     $07
0007BC8A 8003                       	dc.b	nRst, $03
0007BC8C ECF5                       	smpsPSGAlterVol     $F5
0007BC8E 9B07                       	dc.b	nD2, $07
0007BC90 EC0B                       	smpsPSGAlterVol     $0B
0007BC92 8006                       	dc.b	nRst, $06
0007BC94 E102                       	smpsAlterNote       $02
0007BC96 01                         	dc.b	$01
0007BC97 E106                       	smpsAlterNote       $06
0007BC99 01                         	dc.b	$01
0007BC9A E105                       	smpsAlterNote       $05
0007BC9C 01                         	dc.b	$01
0007BC9D E1FF                       	smpsAlterNote       $FF
0007BC9F 01                         	dc.b	$01
0007BCA0 ECF5                       	smpsPSGAlterVol     $F5
0007BCA2 9B07                       	dc.b	nD2, $07
0007BCA4 EC0B                       	smpsPSGAlterVol     $0B
0007BCA6 8004                       	dc.b	nRst, $04
0007BCA8 ECF5                       	smpsPSGAlterVol     $F5
0007BCAA 9B06                       	dc.b	nD2, $06
0007BCAC EC0B                       	smpsPSGAlterVol     $0B
0007BCAE 8007                       	dc.b	nRst, $07
0007BCB0 E105                       	smpsAlterNote       $05
0007BCB2 0101                       	dc.b	$01, $01
0007BCB4 E102                       	smpsAlterNote       $02
0007BCB6 01                         	dc.b	$01
0007BCB7 E1FC                       	smpsAlterNote       $FC
0007BCB9 01                         	dc.b	$01
0007BCBA E1FF                       	smpsAlterNote       $FF
0007BCBC ECF5                       	smpsPSGAlterVol     $F5
0007BCBE 9B06                       	dc.b	nD2, $06
0007BCC0 EC04                       	smpsPSGAlterVol     $04
0007BCC2 E701                       	dc.b	smpsNoAttack, $01
0007BCC4 EC07                       	smpsPSGAlterVol     $07
0007BCC6 8003                       	dc.b	nRst, $03
0007BCC8 ECF5                       	smpsPSGAlterVol     $F5
0007BCCA 9B06                       	dc.b	nD2, $06
0007BCCC EC04                       	smpsPSGAlterVol     $04
0007BCCE E701                       	dc.b	smpsNoAttack, $01
0007BCD0 EC07                       	smpsPSGAlterVol     $07
0007BCD2 8006                       	dc.b	nRst, $06
0007BCD4 E102                       	smpsAlterNote       $02
0007BCD6 01                         	dc.b	$01
0007BCD7 E106                       	smpsAlterNote       $06
0007BCD9 01                         	dc.b	$01
0007BCDA E102                       	smpsAlterNote       $02
0007BCDC 01                         	dc.b	$01
0007BCDD E1FF                       	smpsAlterNote       $FF
0007BCDF 01                         	dc.b	$01
0007BCE0 ECF5                       	smpsPSGAlterVol     $F5
0007BCE2 9B06                       	dc.b	nD2, $06
0007BCE4 EC04                       	smpsPSGAlterVol     $04
0007BCE6 E701                       	dc.b	smpsNoAttack, $01
0007BCE8 EC07                       	smpsPSGAlterVol     $07
0007BCEA 8003                       	dc.b	nRst, $03
0007BCEC ECF5                       	smpsPSGAlterVol     $F5
0007BCEE 9B07                       	dc.b	nD2, $07
0007BCF0 EC0B                       	smpsPSGAlterVol     $0B
0007BCF2 8007                       	dc.b	nRst, $07
0007BCF4 E105                       	smpsAlterNote       $05
0007BCF6 0101                       	dc.b	$01, $01
0007BCF8 E1FF                       	smpsAlterNote       $FF
0007BCFA 01                         	dc.b	$01
0007BCFB E1FC                       	smpsAlterNote       $FC
0007BCFD 01                         	dc.b	$01
0007BCFE E1FF                       	smpsAlterNote       $FF
0007BD00 ECF5                       	smpsPSGAlterVol     $F5
0007BD02 9B06                       	dc.b	nD2, $06
0007BD04 EC0B                       	smpsPSGAlterVol     $0B
0007BD06 8004                       	dc.b	nRst, $04
0007BD08 ECF5                       	smpsPSGAlterVol     $F5
0007BD0A 9B06                       	dc.b	nD2, $06
0007BD0C EC04                       	smpsPSGAlterVol     $04
0007BD0E E701                       	dc.b	smpsNoAttack, $01
0007BD10 EC07                       	smpsPSGAlterVol     $07
0007BD12 8006                       	dc.b	nRst, $06
0007BD14 E105                       	smpsAlterNote       $05
0007BD16 01                         	dc.b	$01
0007BD17 E106                       	smpsAlterNote       $06
0007BD19 01                         	dc.b	$01
0007BD1A E102                       	smpsAlterNote       $02
0007BD1C 01                         	dc.b	$01
0007BD1D E1FC                       	smpsAlterNote       $FC
0007BD1F 01                         	dc.b	$01
0007BD20 E1FF                       	smpsAlterNote       $FF
0007BD22 ECF5                       	smpsPSGAlterVol     $F5
0007BD24 9B06                       	dc.b	nD2, $06
0007BD26 EC04                       	smpsPSGAlterVol     $04
0007BD28 E701                       	dc.b	smpsNoAttack, $01
0007BD2A EC07                       	smpsPSGAlterVol     $07
0007BD2C 8003                       	dc.b	nRst, $03
0007BD2E ECF5                       	smpsPSGAlterVol     $F5
0007BD30 9B06                       	dc.b	nD2, $06
0007BD32 EC04                       	smpsPSGAlterVol     $04
0007BD34 E701                       	dc.b	smpsNoAttack, $01
0007BD36 EC07                       	smpsPSGAlterVol     $07
0007BD38 8006                       	dc.b	nRst, $06
0007BD3A E102                       	smpsAlterNote       $02
0007BD3C 01                         	dc.b	$01
0007BD3D E106                       	smpsAlterNote       $06
0007BD3F 01                         	dc.b	$01
0007BD40 E105                       	smpsAlterNote       $05
0007BD42 01                         	dc.b	$01
0007BD43 E1FF                       	smpsAlterNote       $FF
0007BD45 01                         	dc.b	$01
0007BD46 ECF5                       	smpsPSGAlterVol     $F5
0007BD48 9B07                       	dc.b	nD2, $07
0007BD4A EC0B                       	smpsPSGAlterVol     $0B
0007BD4C 8004                       	dc.b	nRst, $04
0007BD4E ECF5                       	smpsPSGAlterVol     $F5
0007BD50 9B06                       	dc.b	nD2, $06
0007BD52 EC0B                       	smpsPSGAlterVol     $0B
0007BD54 8007                       	dc.b	nRst, $07
0007BD56 E105                       	smpsAlterNote       $05
0007BD58 0101                       	dc.b	$01, $01
0007BD5A E102                       	smpsAlterNote       $02
0007BD5C 01                         	dc.b	$01
0007BD5D E1FC                       	smpsAlterNote       $FC
0007BD5F 01                         	dc.b	$01
0007BD60 E1FF                       	smpsAlterNote       $FF
0007BD62 ECF5                       	smpsPSGAlterVol     $F5
0007BD64 9B06                       	dc.b	nD2, $06
0007BD66 EC04                       	smpsPSGAlterVol     $04
0007BD68 E701                       	dc.b	smpsNoAttack, $01
0007BD6A EC07                       	smpsPSGAlterVol     $07
0007BD6C 8003                       	dc.b	nRst, $03
0007BD6E ECF5                       	smpsPSGAlterVol     $F5
0007BD70 9B06                       	dc.b	nD2, $06
0007BD72 EC04                       	smpsPSGAlterVol     $04
0007BD74 E701                       	dc.b	smpsNoAttack, $01
0007BD76 EC07                       	smpsPSGAlterVol     $07
0007BD78 8006                       	dc.b	nRst, $06
0007BD7A E102                       	smpsAlterNote       $02
0007BD7C 01                         	dc.b	$01
0007BD7D E106                       	smpsAlterNote       $06
0007BD7F 01                         	dc.b	$01
0007BD80 E102                       	smpsAlterNote       $02
0007BD82 01                         	dc.b	$01
0007BD83 E1FF                       	smpsAlterNote       $FF
0007BD85 01                         	dc.b	$01
0007BD86 ECF5                       	smpsPSGAlterVol     $F5
0007BD88 9B06                       	dc.b	nD2, $06
0007BD8A EC04                       	smpsPSGAlterVol     $04
0007BD8C E701                       	dc.b	smpsNoAttack, $01
0007BD8E EC07                       	smpsPSGAlterVol     $07
0007BD90 8003                       	dc.b	nRst, $03
0007BD92 ECF5                       	smpsPSGAlterVol     $F5
0007BD94 9B07                       	dc.b	nD2, $07
0007BD96 E1FE                       	smpsAlterNote       $FE
0007BD98 9706                       	dc.b	nBb1, $06
0007BD9A EC04                       	smpsPSGAlterVol     $04
0007BD9C E701                       	dc.b	smpsNoAttack, $01
0007BD9E ECFC                       	smpsPSGAlterVol     $FC
0007BDA0 9703                       	dc.b	nBb1, $03
0007BDA2 EC04                       	smpsPSGAlterVol     $04
0007BDA4 E701                       	dc.b	smpsNoAttack, $01
0007BDA6 ECFC                       	smpsPSGAlterVol     $FC
0007BDA8 9702                       	dc.b	nBb1, $02
0007BDAA EC04                       	smpsPSGAlterVol     $04
0007BDAC E701                       	dc.b	smpsNoAttack, $01
0007BDAE ECFC                       	smpsPSGAlterVol     $FC
0007BDB0 9606                       	dc.b	nA1, $06
0007BDB2 EC04                       	smpsPSGAlterVol     $04
0007BDB4 E701                       	dc.b	smpsNoAttack, $01
0007BDB6 EC07                       	smpsPSGAlterVol     $07
0007BDB8 8006                       	dc.b	nRst, $06
0007BDBA E101                       	smpsAlterNote       $01
0007BDBC 01                         	dc.b	$01
0007BDBD E107                       	smpsAlterNote       $07
0007BDBF 01                         	dc.b	$01
0007BDC0 E101                       	smpsAlterNote       $01
0007BDC2 01                         	dc.b	$01
0007BDC3 E1F8                       	smpsAlterNote       $F8
0007BDC5 01                         	dc.b	$01
0007BDC6 E1F7                       	smpsAlterNote       $F7
0007BDC8 01                         	dc.b	$01
0007BDC9 E1FC                       	smpsAlterNote       $FC
0007BDCB 01                         	dc.b	$01
0007BDCC E106                       	smpsAlterNote       $06
0007BDCE 01                         	dc.b	$01
0007BDCF E107                       	smpsAlterNote       $07
0007BDD1 01                         	dc.b	$01
0007BDD2 E101                       	smpsAlterNote       $01
0007BDD4 01                         	dc.b	$01
0007BDD5 E1F8                       	smpsAlterNote       $F8
0007BDD7 0101                       	dc.b	$01, $01
0007BDD9 E1FC                       	smpsAlterNote       $FC
0007BDDB ECF5                       	smpsPSGAlterVol     $F5
0007BDDD 8F06                       	dc.b	nD1, $06
0007BDDF EC04                       	smpsPSGAlterVol     $04
0007BDE1 E701                       	dc.b	smpsNoAttack, $01
0007BDE3 EC07                       	smpsPSGAlterVol     $07
0007BDE5 8003                       	dc.b	nRst, $03
0007BDE7 ECF5                       	smpsPSGAlterVol     $F5
0007BDE9 8F06                       	dc.b	nD1, $06
0007BDEB EC04                       	smpsPSGAlterVol     $04
0007BDED E701                       	dc.b	smpsNoAttack, $01
0007BDEF EC07                       	smpsPSGAlterVol     $07
0007BDF1 8006                       	dc.b	nRst, $06
0007BDF3 E1FF                       	smpsAlterNote       $FF
0007BDF5 01                         	dc.b	$01
0007BDF6 E102                       	smpsAlterNote       $02
0007BDF8 01                         	dc.b	$01
0007BDF9 E101                       	smpsAlterNote       $01
0007BDFB 01                         	dc.b	$01
0007BDFC E1FC                       	smpsAlterNote       $FC
0007BDFE 01                         	dc.b	$01
0007BDFF ECF5                       	smpsPSGAlterVol     $F5
0007BE01 9007                       	dc.b	nEb1, $07
0007BE03 EC0B                       	smpsPSGAlterVol     $0B
0007BE05 8004                       	dc.b	nRst, $04
0007BE07 ECF5                       	smpsPSGAlterVol     $F5
0007BE09 9006                       	dc.b	nEb1, $06
0007BE0B EC0B                       	smpsPSGAlterVol     $0B
0007BE0D 8007                       	dc.b	nRst, $07
0007BE0F E103                       	smpsAlterNote       $03
0007BE11 0101                       	dc.b	$01, $01
0007BE13 E1FC                       	smpsAlterNote       $FC
0007BE15 01                         	dc.b	$01
0007BE16 E1F9                       	smpsAlterNote       $F9
0007BE18 01                         	dc.b	$01
0007BE19 E1FC                       	smpsAlterNote       $FC
0007BE1B ECF5                       	smpsPSGAlterVol     $F5
0007BE1D 8F06                       	dc.b	nD1, $06
0007BE1F EC04                       	smpsPSGAlterVol     $04
0007BE21 E701                       	dc.b	smpsNoAttack, $01
0007BE23 EC07                       	smpsPSGAlterVol     $07
0007BE25 8003                       	dc.b	nRst, $03
0007BE27 ECF5                       	smpsPSGAlterVol     $F5
0007BE29 8F06                       	dc.b	nD1, $06
0007BE2B EC04                       	smpsPSGAlterVol     $04
0007BE2D E701                       	dc.b	smpsNoAttack, $01
0007BE2F EC07                       	smpsPSGAlterVol     $07
0007BE31 8006                       	dc.b	nRst, $06
0007BE33 E1FF                       	smpsAlterNote       $FF
0007BE35 01                         	dc.b	$01
0007BE36 E103                       	smpsAlterNote       $03
0007BE38 01                         	dc.b	$01
0007BE39 E1FF                       	smpsAlterNote       $FF
0007BE3B 01                         	dc.b	$01
0007BE3C E1F9                       	smpsAlterNote       $F9
0007BE3E 01                         	dc.b	$01
0007BE3F E1FC                       	smpsAlterNote       $FC
0007BE41 ECF5                       	smpsPSGAlterVol     $F5
0007BE43 8F06                       	dc.b	nD1, $06
0007BE45 EC04                       	smpsPSGAlterVol     $04
0007BE47 E701                       	dc.b	smpsNoAttack, $01
0007BE49 EC07                       	smpsPSGAlterVol     $07
0007BE4B 8003                       	dc.b	nRst, $03
0007BE4D ECF5                       	smpsPSGAlterVol     $F5
0007BE4F 8F07                       	dc.b	nD1, $07
0007BE51 EC0B                       	smpsPSGAlterVol     $0B
0007BE53 8006                       	dc.b	nRst, $06
0007BE55 E1FF                       	smpsAlterNote       $FF
0007BE57 01                         	dc.b	$01
0007BE58 E102                       	smpsAlterNote       $02
0007BE5A 0101                       	dc.b	$01, $01
0007BE5C E1FC                       	smpsAlterNote       $FC
0007BE5E 01                         	dc.b	$01
0007BE5F ECF5                       	smpsPSGAlterVol     $F5
0007BE61 8F07                       	dc.b	nD1, $07
0007BE63 EC0B                       	smpsPSGAlterVol     $0B
0007BE65 8004                       	dc.b	nRst, $04
0007BE67 ECF5                       	smpsPSGAlterVol     $F5
0007BE69 8F06                       	dc.b	nD1, $06
0007BE6B EC04                       	smpsPSGAlterVol     $04
0007BE6D E701                       	dc.b	smpsNoAttack, $01
0007BE6F EC07                       	smpsPSGAlterVol     $07
0007BE71 8006                       	dc.b	nRst, $06
0007BE73 E101                       	smpsAlterNote       $01
0007BE75 01                         	dc.b	$01
0007BE76 E102                       	smpsAlterNote       $02
0007BE78 01                         	dc.b	$01
0007BE79 E1FF                       	smpsAlterNote       $FF
0007BE7B 01                         	dc.b	$01
0007BE7C E1F9                       	smpsAlterNote       $F9
0007BE7E 01                         	dc.b	$01
0007BE7F E1FC                       	smpsAlterNote       $FC
0007BE81 ECF5                       	smpsPSGAlterVol     $F5
0007BE83 9006                       	dc.b	nEb1, $06
0007BE85 EC04                       	smpsPSGAlterVol     $04
0007BE87 E701                       	dc.b	smpsNoAttack, $01
0007BE89 EC07                       	smpsPSGAlterVol     $07
0007BE8B 8003                       	dc.b	nRst, $03
0007BE8D ECF5                       	smpsPSGAlterVol     $F5
0007BE8F 9006                       	dc.b	nEb1, $06
0007BE91 EC04                       	smpsPSGAlterVol     $04
0007BE93 E701                       	dc.b	smpsNoAttack, $01
0007BE95 EC07                       	smpsPSGAlterVol     $07
0007BE97 8006                       	dc.b	nRst, $06
0007BE99 E100                       	smpsAlterNote       $00
0007BE9B 01                         	dc.b	$01
0007BE9C E102                       	smpsAlterNote       $02
0007BE9E 01                         	dc.b	$01
0007BE9F E100                       	smpsAlterNote       $00
0007BEA1 01                         	dc.b	$01
0007BEA2 E1FF                       	smpsAlterNote       $FF
0007BEA4 01                         	dc.b	$01
0007BEA5 ECF5                       	smpsPSGAlterVol     $F5
0007BEA7 9B06                       	dc.b	nD2, $06
0007BEA9 EC04                       	smpsPSGAlterVol     $04
0007BEAB E701                       	dc.b	smpsNoAttack, $01
0007BEAD EC07                       	smpsPSGAlterVol     $07
0007BEAF 8003                       	dc.b	nRst, $03
0007BEB1 ECF5                       	smpsPSGAlterVol     $F5
0007BEB3 9B07                       	dc.b	nD2, $07
0007BEB5 EC0B                       	smpsPSGAlterVol     $0B
0007BEB7 8007                       	dc.b	nRst, $07
0007BEB9 E105                       	smpsAlterNote       $05
0007BEBB 0101                       	dc.b	$01, $01
0007BEBD E1FF                       	smpsAlterNote       $FF
0007BEBF 01                         	dc.b	$01
0007BEC0 E1FC                       	smpsAlterNote       $FC
0007BEC2 01                         	dc.b	$01
0007BEC3 E1FF                       	smpsAlterNote       $FF
0007BEC5 ECF5                       	smpsPSGAlterVol     $F5
0007BEC7 9B06                       	dc.b	nD2, $06
0007BEC9 EC0B                       	smpsPSGAlterVol     $0B
0007BECB 8004                       	dc.b	nRst, $04
0007BECD ECF5                       	smpsPSGAlterVol     $F5
0007BECF 9B06                       	dc.b	nD2, $06
0007BED1 EC04                       	smpsPSGAlterVol     $04
0007BED3 E701                       	dc.b	smpsNoAttack, $01
0007BED5 EC07                       	smpsPSGAlterVol     $07
0007BED7 8006                       	dc.b	nRst, $06
0007BED9 E102                       	smpsAlterNote       $02
0007BEDB 01                         	dc.b	$01
0007BEDC E106                       	smpsAlterNote       $06
0007BEDE 01                         	dc.b	$01
0007BEDF E102                       	smpsAlterNote       $02
0007BEE1 01                         	dc.b	$01
0007BEE2 E1FC                       	smpsAlterNote       $FC
0007BEE4 01                         	dc.b	$01
0007BEE5 E1FF                       	smpsAlterNote       $FF
0007BEE7 ECF5                       	smpsPSGAlterVol     $F5
0007BEE9 9B06                       	dc.b	nD2, $06
0007BEEB EC04                       	smpsPSGAlterVol     $04
0007BEED E701                       	dc.b	smpsNoAttack, $01
0007BEEF EC07                       	smpsPSGAlterVol     $07
0007BEF1 8003                       	dc.b	nRst, $03
0007BEF3 ECF5                       	smpsPSGAlterVol     $F5
0007BEF5 9B07                       	dc.b	nD2, $07
0007BEF7 EC0B                       	smpsPSGAlterVol     $0B
0007BEF9 8006                       	dc.b	nRst, $06
0007BEFB E102                       	smpsAlterNote       $02
0007BEFD 01                         	dc.b	$01
0007BEFE E105                       	smpsAlterNote       $05
0007BF00 0101                       	dc.b	$01, $01
0007BF02 E1FF                       	smpsAlterNote       $FF
0007BF04 01                         	dc.b	$01
0007BF05 ECF5                       	smpsPSGAlterVol     $F5
0007BF07 9B07                       	dc.b	nD2, $07
0007BF09 EC0B                       	smpsPSGAlterVol     $0B
0007BF0B 8004                       	dc.b	nRst, $04
0007BF0D ECF5                       	smpsPSGAlterVol     $F5
0007BF0F 9B06                       	dc.b	nD2, $06
0007BF11 EC0B                       	smpsPSGAlterVol     $0B
0007BF13 8007                       	dc.b	nRst, $07
0007BF15 E105                       	smpsAlterNote       $05
0007BF17 0101                       	dc.b	$01, $01
0007BF19 E102                       	smpsAlterNote       $02
0007BF1B 01                         	dc.b	$01
0007BF1C E1FC                       	smpsAlterNote       $FC
0007BF1E 01                         	dc.b	$01
0007BF1F E1FF                       	smpsAlterNote       $FF
0007BF21 ECF5                       	smpsPSGAlterVol     $F5
0007BF23 9B06                       	dc.b	nD2, $06
0007BF25 EC04                       	smpsPSGAlterVol     $04
0007BF27 E701                       	dc.b	smpsNoAttack, $01
0007BF29 EC07                       	smpsPSGAlterVol     $07
0007BF2B 8003                       	dc.b	nRst, $03
0007BF2D ECF5                       	smpsPSGAlterVol     $F5
0007BF2F 9B06                       	dc.b	nD2, $06
0007BF31 EC04                       	smpsPSGAlterVol     $04
0007BF33 E701                       	dc.b	smpsNoAttack, $01
0007BF35 EC07                       	smpsPSGAlterVol     $07
0007BF37 8006                       	dc.b	nRst, $06
0007BF39 E102                       	smpsAlterNote       $02
0007BF3B 01                         	dc.b	$01
0007BF3C E106                       	smpsAlterNote       $06
0007BF3E 01                         	dc.b	$01
0007BF3F E102                       	smpsAlterNote       $02
0007BF41 01                         	dc.b	$01
0007BF42 E1FF                       	smpsAlterNote       $FF
0007BF44 01                         	dc.b	$01
0007BF45 ECF5                       	smpsPSGAlterVol     $F5
0007BF47 9B06                       	dc.b	nD2, $06
0007BF49 EC04                       	smpsPSGAlterVol     $04
0007BF4B E701                       	dc.b	smpsNoAttack, $01
0007BF4D EC07                       	smpsPSGAlterVol     $07
0007BF4F 8003                       	dc.b	nRst, $03
0007BF51 ECF5                       	smpsPSGAlterVol     $F5
0007BF53 9B07                       	dc.b	nD2, $07
0007BF55 EC0B                       	smpsPSGAlterVol     $0B
0007BF57 8007                       	dc.b	nRst, $07
0007BF59 E105                       	smpsAlterNote       $05
0007BF5B 0101                       	dc.b	$01, $01
0007BF5D E1FF                       	smpsAlterNote       $FF
0007BF5F 01                         	dc.b	$01
0007BF60 E1FC                       	smpsAlterNote       $FC
0007BF62 01                         	dc.b	$01
0007BF63 E1FF                       	smpsAlterNote       $FF
0007BF65 ECF5                       	smpsPSGAlterVol     $F5
0007BF67 9B06                       	dc.b	nD2, $06
0007BF69 EC0B                       	smpsPSGAlterVol     $0B
0007BF6B 8004                       	dc.b	nRst, $04
0007BF6D ECF5                       	smpsPSGAlterVol     $F5
0007BF6F 9B06                       	dc.b	nD2, $06
0007BF71 EC04                       	smpsPSGAlterVol     $04
0007BF73 E701                       	dc.b	smpsNoAttack, $01
0007BF75 EC07                       	smpsPSGAlterVol     $07
0007BF77 8006                       	dc.b	nRst, $06
0007BF79 E102                       	smpsAlterNote       $02
0007BF7B 01                         	dc.b	$01
0007BF7C E106                       	smpsAlterNote       $06
0007BF7E 01                         	dc.b	$01
0007BF7F E102                       	smpsAlterNote       $02
0007BF81 01                         	dc.b	$01
0007BF82 E1FC                       	smpsAlterNote       $FC
0007BF84 01                         	dc.b	$01
0007BF85 E1FF                       	smpsAlterNote       $FF
0007BF87 ECF5                       	smpsPSGAlterVol     $F5
0007BF89 9B06                       	dc.b	nD2, $06
0007BF8B EC04                       	smpsPSGAlterVol     $04
0007BF8D E701                       	dc.b	smpsNoAttack, $01
0007BF8F EC07                       	smpsPSGAlterVol     $07
0007BF91 8003                       	dc.b	nRst, $03
0007BF93 ECF5                       	smpsPSGAlterVol     $F5
0007BF95 9B06                       	dc.b	nD2, $06
0007BF97 EC04                       	smpsPSGAlterVol     $04
0007BF99 E701                       	dc.b	smpsNoAttack, $01
0007BF9B EC07                       	smpsPSGAlterVol     $07
0007BF9D 8006                       	dc.b	nRst, $06
0007BF9F E102                       	smpsAlterNote       $02
0007BFA1 01                         	dc.b	$01
0007BFA2 E106                       	smpsAlterNote       $06
0007BFA4 01                         	dc.b	$01
0007BFA5 E105                       	smpsAlterNote       $05
0007BFA7 01                         	dc.b	$01
0007BFA8 E1FF                       	smpsAlterNote       $FF
0007BFAA 01                         	dc.b	$01
0007BFAB ECF5                       	smpsPSGAlterVol     $F5
0007BFAD 9B07                       	dc.b	nD2, $07
0007BFAF EC0B                       	smpsPSGAlterVol     $0B
0007BFB1 8004                       	dc.b	nRst, $04
0007BFB3 ECF5                       	smpsPSGAlterVol     $F5
0007BFB5 9B06                       	dc.b	nD2, $06
0007BFB7 EC0B                       	smpsPSGAlterVol     $0B
0007BFB9 8007                       	dc.b	nRst, $07
0007BFBB E105                       	smpsAlterNote       $05
0007BFBD 0101                       	dc.b	$01, $01
0007BFBF E101                       	smpsAlterNote       $01
0007BFC1 01                         	dc.b	$01
0007BFC2 E1FB                       	smpsAlterNote       $FB
0007BFC4 01                         	dc.b	$01
0007BFC5 E1FE                       	smpsAlterNote       $FE
0007BFC7 ECF5                       	smpsPSGAlterVol     $F5
0007BFC9 9A06                       	dc.b	nCs2, $06
0007BFCB EC04                       	smpsPSGAlterVol     $04
0007BFCD E701                       	dc.b	smpsNoAttack, $01
0007BFCF EC07                       	smpsPSGAlterVol     $07
0007BFD1 8003                       	dc.b	nRst, $03
0007BFD3 ECF5                       	smpsPSGAlterVol     $F5
0007BFD5 9A06                       	dc.b	nCs2, $06
0007BFD7 EC04                       	smpsPSGAlterVol     $04
0007BFD9 E701                       	dc.b	smpsNoAttack, $01
0007BFDB EC07                       	smpsPSGAlterVol     $07
0007BFDD 8003                       	dc.b	nRst, $03
0007BFDF E1FC                       	smpsAlterNote       $FC
0007BFE1 ECF5                       	smpsPSGAlterVol     $F5
0007BFE3 8F07                       	dc.b	nD1, $07
0007BFE5 EC0B                       	smpsPSGAlterVol     $0B
0007BFE7 8006                       	dc.b	nRst, $06
0007BFE9 E1FF                       	smpsAlterNote       $FF
0007BFEB 01                         	dc.b	$01
0007BFEC E103                       	smpsAlterNote       $03
0007BFEE 01                         	dc.b	$01
0007BFEF E102                       	smpsAlterNote       $02
0007BFF1 01                         	dc.b	$01
0007BFF2 E1FC                       	smpsAlterNote       $FC
0007BFF4 01                         	dc.b	$01
0007BFF5 E1F8                       	smpsAlterNote       $F8
0007BFF7 01                         	dc.b	$01
0007BFF8 E1FC                       	smpsAlterNote       $FC
0007BFFA 01                         	dc.b	$01
0007BFFB E1FF                       	smpsAlterNote       $FF
0007BFFD 01                         	dc.b	$01
0007BFFE E103                       	smpsAlterNote       $03
0007C000 01                         	dc.b	$01
0007C001 E1FC                       	smpsAlterNote       $FC
0007C003 ECF5                       	smpsPSGAlterVol     $F5
0007C005 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0007C009 EC04                       	smpsPSGAlterVol     $04
0007C00B E701                       	dc.b	smpsNoAttack, $01
0007C00D EC07                       	smpsPSGAlterVol     $07
0007C00F 8009                       	dc.b	nRst, $09
0007C011 E1FF                       	smpsAlterNote       $FF
0007C013 01                         	dc.b	$01
0007C014 E103                       	smpsAlterNote       $03
0007C016 01                         	dc.b	$01
0007C017 E102                       	smpsAlterNote       $02
0007C019 01                         	dc.b	$01
0007C01A E1FC                       	smpsAlterNote       $FC
0007C01C 01                         	dc.b	$01
0007C01D E1F8                       	smpsAlterNote       $F8
0007C01F 01                         	dc.b	$01
0007C020 E1FC                       	smpsAlterNote       $FC
0007C022 01                         	dc.b	$01
0007C023 E1FF                       	smpsAlterNote       $FF
0007C025 01                         	dc.b	$01
0007C026 E103                       	smpsAlterNote       $03
0007C028 01                         	dc.b	$01
0007C029 E1FF                       	smpsAlterNote       $FF
0007C02B 01                         	dc.b	$01
0007C02C E1F9                       	smpsAlterNote       $F9
0007C02E 01                         	dc.b	$01
0007C02F E1F8                       	smpsAlterNote       $F8
0007C031 01                         	dc.b	$01
0007C032 E1FC                       	smpsAlterNote       $FC
0007C034 01                         	dc.b	$01
0007C035 E102                       	smpsAlterNote       $02
0007C037 0101                       	dc.b	$01, $01
0007C039 E1FF                       	smpsAlterNote       $FF
0007C03B 01                         	dc.b	$01
0007C03C E1FC                       	smpsAlterNote       $FC
0007C03E ECF5                       	smpsPSGAlterVol     $F5
0007C040 8F02                       	dc.b	nD1, $02
0007C042 EC04                       	smpsPSGAlterVol     $04
0007C044 E701                       	dc.b	smpsNoAttack, $01
0007C046 ECFC                       	smpsPSGAlterVol     $FC
0007C048 E1FB                       	smpsAlterNote       $FB
0007C04A 8D06                       	dc.b	nC1, $06
0007C04C EC04                       	smpsPSGAlterVol     $04
0007C04E E701                       	dc.b	smpsNoAttack, $01
0007C050 EC07                       	smpsPSGAlterVol     $07
0007C052 8006                       	dc.b	nRst, $06
0007C054 E1FE                       	smpsAlterNote       $FE
0007C056 01                         	dc.b	$01
0007C057 E102                       	smpsAlterNote       $02
0007C059 01                         	dc.b	$01
0007C05A E1FE                       	smpsAlterNote       $FE
0007C05C 01                         	dc.b	$01
0007C05D E1FB                       	smpsAlterNote       $FB
0007C05F 01                         	dc.b	$01
0007C060 E1F7                       	smpsAlterNote       $F7
0007C062 01                         	dc.b	$01
0007C063 E1FB                       	smpsAlterNote       $FB
0007C065 01                         	dc.b	$01
0007C066 E101                       	smpsAlterNote       $01
0007C068 01                         	dc.b	$01
0007C069 E102                       	smpsAlterNote       $02
0007C06B 01                         	dc.b	$01
0007C06C E1FB                       	smpsAlterNote       $FB
0007C06E ECF5                       	smpsPSGAlterVol     $F5
0007C070 8D02                       	dc.b	nC1, $02
0007C072 EC04                       	smpsPSGAlterVol     $04
0007C074 E701                       	dc.b	smpsNoAttack, $01
0007C076 E1FC                       	smpsAlterNote       $FC
0007C078 ECFC                       	smpsPSGAlterVol     $FC
0007C07A 8F0D                       	dc.b	nD1, $0D
0007C07C E1FF                       	smpsAlterNote       $FF
0007C07E E701                       	dc.b	smpsNoAttack, $01
0007C080 E103                       	smpsAlterNote       $03
0007C082 E701                       	dc.b	smpsNoAttack, $01
0007C084 E1FF                       	smpsAlterNote       $FF
0007C086 E701                       	dc.b	smpsNoAttack, $01
0007C088 E1FC                       	smpsAlterNote       $FC
0007C08A E701                       	dc.b	smpsNoAttack, $01
0007C08C E1F8                       	smpsAlterNote       $F8
0007C08E E701                       	dc.b	smpsNoAttack, $01
0007C090 E1FC                       	smpsAlterNote       $FC
0007C092 E701                       	dc.b	smpsNoAttack, $01
0007C094 E102                       	smpsAlterNote       $02
0007C096 E701                       	dc.b	smpsNoAttack, $01
0007C098 E103                       	smpsAlterNote       $03
0007C09A E701                       	dc.b	smpsNoAttack, $01
0007C09C E1FF                       	smpsAlterNote       $FF
0007C09E E701                       	dc.b	smpsNoAttack, $01
0007C0A0 E1F9                       	smpsAlterNote       $F9
0007C0A2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007C0A6 E1FC                       	smpsAlterNote       $FC
0007C0A8 E701                       	dc.b	smpsNoAttack, $01
0007C0AA E102                       	smpsAlterNote       $02
0007C0AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007C0B0 E1FC                       	smpsAlterNote       $FC
0007C0B2 E701                       	dc.b	smpsNoAttack, $01
0007C0B4 E1F9                       	smpsAlterNote       $F9
0007C0B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007C0BA E1FF                       	smpsAlterNote       $FF
0007C0BC EC04                       	smpsPSGAlterVol     $04
0007C0BE E701                       	dc.b	smpsNoAttack, $01
0007C0C0 EC07                       	smpsPSGAlterVol     $07
0007C0C2 E103                       	smpsAlterNote       $03
0007C0C4 8001                       	dc.b	nRst, $01
0007C0C6 E102                       	smpsAlterNote       $02
0007C0C8 01                         	dc.b	$01
0007C0C9 E1FB                       	smpsAlterNote       $FB
0007C0CB 01                         	dc.b	$01
0007C0CC E1F7                       	smpsAlterNote       $F7
0007C0CE 01                         	dc.b	$01
0007C0CF E1FB                       	smpsAlterNote       $FB
0007C0D1 01                         	dc.b	$01
0007C0D2 E102                       	smpsAlterNote       $02
0007C0D4 01                         	dc.b	$01
0007C0D5 E103                       	smpsAlterNote       $03
0007C0D7 01                         	dc.b	$01
0007C0D8 E1FB                       	smpsAlterNote       $FB
0007C0DA ECF5                       	smpsPSGAlterVol     $F5
0007C0DC 8E06                       	dc.b	nCs1, $06
0007C0DE EC04                       	smpsPSGAlterVol     $04
0007C0E0 E701                       	dc.b	smpsNoAttack, $01
0007C0E2 EC07                       	smpsPSGAlterVol     $07
0007C0E4 8003                       	dc.b	nRst, $03
0007C0E6 ECF5                       	smpsPSGAlterVol     $F5
0007C0E8 8E06                       	dc.b	nCs1, $06
0007C0EA EC04                       	smpsPSGAlterVol     $04
0007C0EC E701                       	dc.b	smpsNoAttack, $01
0007C0EE EC07                       	smpsPSGAlterVol     $07
0007C0F0 8006                       	dc.b	nRst, $06
0007C0F2 E1FE                       	smpsAlterNote       $FE
0007C0F4 01                         	dc.b	$01
0007C0F5 E102                       	smpsAlterNote       $02
0007C0F7 01                         	dc.b	$01
0007C0F8 E1FE                       	smpsAlterNote       $FE
0007C0FA 01                         	dc.b	$01
0007C0FB E1F9                       	smpsAlterNote       $F9
0007C0FD 01                         	dc.b	$01
0007C0FE E1FC                       	smpsAlterNote       $FC
0007C100 ECF5                       	smpsPSGAlterVol     $F5
0007C102 8F06                       	dc.b	nD1, $06
0007C104 EC04                       	smpsPSGAlterVol     $04
0007C106 E701                       	dc.b	smpsNoAttack, $01
0007C108 EC07                       	smpsPSGAlterVol     $07
0007C10A 8003                       	dc.b	nRst, $03
0007C10C ECF5                       	smpsPSGAlterVol     $F5
0007C10E 8F07                       	dc.b	nD1, $07
0007C110 EC0B                       	smpsPSGAlterVol     $0B
0007C112 8006                       	dc.b	nRst, $06
0007C114 E1FF                       	smpsAlterNote       $FF
0007C116 01                         	dc.b	$01
0007C117 E102                       	smpsAlterNote       $02
0007C119 0101                       	dc.b	$01, $01
0007C11B E1FB                       	smpsAlterNote       $FB
0007C11D 01                         	dc.b	$01
0007C11E ECF5                       	smpsPSGAlterVol     $F5
0007C120 8E07                       	dc.b	nCs1, $07
0007C122 EC0B                       	smpsPSGAlterVol     $0B
0007C124 8004                       	dc.b	nRst, $04
0007C126 ECF5                       	smpsPSGAlterVol     $F5
0007C128 8E06                       	dc.b	nCs1, $06
0007C12A EC04                       	smpsPSGAlterVol     $04
0007C12C E701                       	dc.b	smpsNoAttack, $01
0007C12E EC07                       	smpsPSGAlterVol     $07
0007C130 8006                       	dc.b	nRst, $06
0007C132 E101                       	smpsAlterNote       $01
0007C134 01                         	dc.b	$01
0007C135 E102                       	smpsAlterNote       $02
0007C137 01                         	dc.b	$01
0007C138 E1FE                       	smpsAlterNote       $FE
0007C13A 01                         	dc.b	$01
0007C13B E1F8                       	smpsAlterNote       $F8
0007C13D 01                         	dc.b	$01
0007C13E E1FB                       	smpsAlterNote       $FB
0007C140 ECF5                       	smpsPSGAlterVol     $F5
0007C142 8E06                       	dc.b	nCs1, $06
0007C144 EC04                       	smpsPSGAlterVol     $04
0007C146 E701                       	dc.b	smpsNoAttack, $01
0007C148 EC07                       	smpsPSGAlterVol     $07
0007C14A 8003                       	dc.b	nRst, $03
0007C14C ECF5                       	smpsPSGAlterVol     $F5
0007C14E 8E06                       	dc.b	nCs1, $06
0007C150 EC04                       	smpsPSGAlterVol     $04
0007C152 E701                       	dc.b	smpsNoAttack, $01
0007C154 EC07                       	smpsPSGAlterVol     $07
0007C156 8004                       	dc.b	nRst, $04
0007C158 E1FC                       	smpsAlterNote       $FC
0007C15A ECF5                       	smpsPSGAlterVol     $F5
0007C15C 8F06                       	dc.b	nD1, $06
0007C15E EC0B                       	smpsPSGAlterVol     $0B
0007C160 8006                       	dc.b	nRst, $06
0007C162 E1FF                       	smpsAlterNote       $FF
0007C164 01                         	dc.b	$01
0007C165 E102                       	smpsAlterNote       $02
0007C167 0101                       	dc.b	$01, $01
0007C169 E1FC                       	smpsAlterNote       $FC
0007C16B 01                         	dc.b	$01
0007C16C E1F8                       	smpsAlterNote       $F8
0007C16E 01                         	dc.b	$01
0007C16F E1F9                       	smpsAlterNote       $F9
0007C171 01                         	dc.b	$01
0007C172 E1FF                       	smpsAlterNote       $FF
0007C174 01                         	dc.b	$01
0007C175 E103                       	smpsAlterNote       $03
0007C177 01                         	dc.b	$01
0007C178 E1FC                       	smpsAlterNote       $FC
0007C17A ECF5                       	smpsPSGAlterVol     $F5
0007C17C 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
0007C180 EC04                       	smpsPSGAlterVol     $04
0007C182 E701                       	dc.b	smpsNoAttack, $01
0007C184 EC07                       	smpsPSGAlterVol     $07
0007C186 8009                       	dc.b	nRst, $09
0007C188 E1FF                       	smpsAlterNote       $FF
0007C18A 01                         	dc.b	$01
0007C18B E102                       	smpsAlterNote       $02
0007C18D 0101                       	dc.b	$01, $01
0007C18F E1FC                       	smpsAlterNote       $FC
0007C191 01                         	dc.b	$01
0007C192 E1F8                       	smpsAlterNote       $F8
0007C194 01                         	dc.b	$01
0007C195 E1F9                       	smpsAlterNote       $F9
0007C197 01                         	dc.b	$01
0007C198 E1FF                       	smpsAlterNote       $FF
0007C19A 01                         	dc.b	$01
0007C19B E103                       	smpsAlterNote       $03
0007C19D 01                         	dc.b	$01
0007C19E E1FF                       	smpsAlterNote       $FF
0007C1A0 01                         	dc.b	$01
0007C1A1 E1FC                       	smpsAlterNote       $FC
0007C1A3 01                         	dc.b	$01
0007C1A4 E1F8                       	smpsAlterNote       $F8
0007C1A6 01                         	dc.b	$01
0007C1A7 E1FC                       	smpsAlterNote       $FC
0007C1A9 01                         	dc.b	$01
0007C1AA E102                       	smpsAlterNote       $02
0007C1AC 01                         	dc.b	$01
0007C1AD E103                       	smpsAlterNote       $03
0007C1AF 01                         	dc.b	$01
0007C1B0 E1FF                       	smpsAlterNote       $FF
0007C1B2 01                         	dc.b	$01
0007C1B3 E1FC                       	smpsAlterNote       $FC
0007C1B5 ECF5                       	smpsPSGAlterVol     $F5
0007C1B7 8F03                       	dc.b	nD1, $03
0007C1B9 E1FB                       	smpsAlterNote       $FB
0007C1BB 8D06                       	dc.b	nC1, $06
0007C1BD EC04                       	smpsPSGAlterVol     $04
0007C1BF E701                       	dc.b	smpsNoAttack, $01
0007C1C1 EC07                       	smpsPSGAlterVol     $07
0007C1C3 8006                       	dc.b	nRst, $06
0007C1C5 E1FE                       	smpsAlterNote       $FE
0007C1C7 01                         	dc.b	$01
0007C1C8 E102                       	smpsAlterNote       $02
0007C1CA 01                         	dc.b	$01
0007C1CB E101                       	smpsAlterNote       $01
0007C1CD 01                         	dc.b	$01
0007C1CE E1FB                       	smpsAlterNote       $FB
0007C1D0 01                         	dc.b	$01
0007C1D1 E1F7                       	smpsAlterNote       $F7
0007C1D3 01                         	dc.b	$01
0007C1D4 E1FB                       	smpsAlterNote       $FB
0007C1D6 01                         	dc.b	$01
0007C1D7 E1FE                       	smpsAlterNote       $FE
0007C1D9 01                         	dc.b	$01
0007C1DA E102                       	smpsAlterNote       $02
0007C1DC 01                         	dc.b	$01
0007C1DD E1FB                       	smpsAlterNote       $FB
0007C1DF ECF5                       	smpsPSGAlterVol     $F5
0007C1E1 8D03                       	dc.b	nC1, $03
0007C1E3 E1FC                       	smpsAlterNote       $FC
0007C1E5 8F0D                       	dc.b	nD1, $0D
0007C1E7 E1FF                       	smpsAlterNote       $FF
0007C1E9 E701                       	dc.b	smpsNoAttack, $01
0007C1EB E103                       	smpsAlterNote       $03
0007C1ED E701                       	dc.b	smpsNoAttack, $01
0007C1EF E1FF                       	smpsAlterNote       $FF
0007C1F1 E701                       	dc.b	smpsNoAttack, $01
0007C1F3 E1FC                       	smpsAlterNote       $FC
0007C1F5 E701                       	dc.b	smpsNoAttack, $01
0007C1F7 E1F8                       	smpsAlterNote       $F8
0007C1F9 E701                       	dc.b	smpsNoAttack, $01
0007C1FB E1FC                       	smpsAlterNote       $FC
0007C1FD E701                       	dc.b	smpsNoAttack, $01
0007C1FF E102                       	smpsAlterNote       $02
0007C201 E701                       	dc.b	smpsNoAttack, $01
0007C203 E103                       	smpsAlterNote       $03
0007C205 E701                       	dc.b	smpsNoAttack, $01
0007C207 E1FF                       	smpsAlterNote       $FF
0007C209 E701                       	dc.b	smpsNoAttack, $01
0007C20B E1F9                       	smpsAlterNote       $F9
0007C20D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007C211 E1FC                       	smpsAlterNote       $FC
0007C213 E701                       	dc.b	smpsNoAttack, $01
0007C215 E102                       	smpsAlterNote       $02
0007C217 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007C21B E1FF                       	smpsAlterNote       $FF
0007C21D E701                       	dc.b	smpsNoAttack, $01
0007C21F E1F9                       	smpsAlterNote       $F9
0007C221 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
0007C225 E1FF                       	smpsAlterNote       $FF
0007C227 EC04                       	smpsPSGAlterVol     $04
0007C229 E701                       	dc.b	smpsNoAttack, $01
0007C22B EC07                       	smpsPSGAlterVol     $07
0007C22D E103                       	smpsAlterNote       $03
0007C22F 8001                       	dc.b	nRst, $01
0007C231 E102                       	smpsAlterNote       $02
0007C233 01                         	dc.b	$01
0007C234 E1FB                       	smpsAlterNote       $FB
0007C236 01                         	dc.b	$01
0007C237 E1F7                       	smpsAlterNote       $F7
0007C239 01                         	dc.b	$01
0007C23A E1FB                       	smpsAlterNote       $FB
0007C23C 01                         	dc.b	$01
0007C23D E1FF                       	smpsAlterNote       $FF
0007C23F 01                         	dc.b	$01
0007C240 E103                       	smpsAlterNote       $03
0007C242 01                         	dc.b	$01
0007C243 E1FB                       	smpsAlterNote       $FB
0007C245 ECF5                       	smpsPSGAlterVol     $F5
0007C247 8E06                       	dc.b	nCs1, $06
0007C249 EC04                       	smpsPSGAlterVol     $04
0007C24B E701                       	dc.b	smpsNoAttack, $01
0007C24D EC07                       	smpsPSGAlterVol     $07
0007C24F 8003                       	dc.b	nRst, $03
0007C251 ECF5                       	smpsPSGAlterVol     $F5
0007C253 8E06                       	dc.b	nCs1, $06
0007C255 EC04                       	smpsPSGAlterVol     $04
0007C257 E701                       	dc.b	smpsNoAttack, $01
0007C259 EC07                       	smpsPSGAlterVol     $07
0007C25B 8006                       	dc.b	nRst, $06
0007C25D E1FE                       	smpsAlterNote       $FE
0007C25F 01                         	dc.b	$01
0007C260 E102                       	smpsAlterNote       $02
0007C262 01                         	dc.b	$01
0007C263 E1FE                       	smpsAlterNote       $FE
0007C265 01                         	dc.b	$01
0007C266 E1FC                       	smpsAlterNote       $FC
0007C268 01                         	dc.b	$01
0007C269 ECF5                       	smpsPSGAlterVol     $F5
0007C26B 8F06                       	dc.b	nD1, $06
0007C26D EC04                       	smpsPSGAlterVol     $04
0007C26F E701                       	dc.b	smpsNoAttack, $01
0007C271 EC07                       	smpsPSGAlterVol     $07
0007C273 8003                       	dc.b	nRst, $03
0007C275 ECF5                       	smpsPSGAlterVol     $F5
0007C277 8F07                       	dc.b	nD1, $07
0007C279 EC0B                       	smpsPSGAlterVol     $0B
0007C27B 8007                       	dc.b	nRst, $07
0007C27D E102                       	smpsAlterNote       $02
0007C27F 0101                       	dc.b	$01, $01
0007C281 E1FB                       	smpsAlterNote       $FB
0007C283 01                         	dc.b	$01
0007C284 E1F8                       	smpsAlterNote       $F8
0007C286 01                         	dc.b	$01
0007C287 E1FB                       	smpsAlterNote       $FB
0007C289 ECF5                       	smpsPSGAlterVol     $F5
0007C28B 8E06                       	dc.b	nCs1, $06
0007C28D EC0B                       	smpsPSGAlterVol     $0B
0007C28F 8004                       	dc.b	nRst, $04
0007C291 ECF5                       	smpsPSGAlterVol     $F5
0007C293 8E06                       	dc.b	nCs1, $06
0007C295 EC04                       	smpsPSGAlterVol     $04
0007C297 E701                       	dc.b	smpsNoAttack, $01
0007C299 EC07                       	smpsPSGAlterVol     $07
0007C29B 8006                       	dc.b	nRst, $06
0007C29D E1FE                       	smpsAlterNote       $FE
0007C29F 01                         	dc.b	$01
0007C2A0 E102                       	smpsAlterNote       $02
0007C2A2 01                         	dc.b	$01
0007C2A3 E1FE                       	smpsAlterNote       $FE
0007C2A5 01                         	dc.b	$01
0007C2A6 E1F9                       	smpsAlterNote       $F9
0007C2A8 01                         	dc.b	$01
0007C2A9 E1FC                       	smpsAlterNote       $FC
0007C2AB ECF5                       	smpsPSGAlterVol     $F5
0007C2AD 8F06                       	dc.b	nD1, $06
0007C2AF EC04                       	smpsPSGAlterVol     $04
0007C2B1 E701                       	dc.b	smpsNoAttack, $01
0007C2B3 EC07                       	smpsPSGAlterVol     $07
0007C2B5 8003                       	dc.b	nRst, $03
0007C2B7 ECF5                       	smpsPSGAlterVol     $F5
0007C2B9 8F06                       	dc.b	nD1, $06
0007C2BB EC04                       	smpsPSGAlterVol     $04
0007C2BD E701                       	dc.b	smpsNoAttack, $01
0007C2BF EC07                       	smpsPSGAlterVol     $07
0007C2C1 8006                       	dc.b	nRst, $06
0007C2C3 E1FF                       	smpsAlterNote       $FF
0007C2C5 01                         	dc.b	$01
0007C2C6 E103                       	smpsAlterNote       $03
0007C2C8 01                         	dc.b	$01
0007C2C9 E102                       	smpsAlterNote       $02
0007C2CB 01                         	dc.b	$01
0007C2CC E1FB                       	smpsAlterNote       $FB
0007C2CE 01                         	dc.b	$01
0007C2CF ECF5                       	smpsPSGAlterVol     $F5
0007C2D1 8E07                       	dc.b	nCs1, $07
0007C2D3 EC0B                       	smpsPSGAlterVol     $0B
0007C2D5 8004                       	dc.b	nRst, $04
0007C2D7 ECF5                       	smpsPSGAlterVol     $F5
0007C2D9 8E06                       	dc.b	nCs1, $06
0007C2DB EC0B                       	smpsPSGAlterVol     $0B
0007C2DD 8007                       	dc.b	nRst, $07
0007C2DF E101                       	smpsAlterNote       $01
0007C2E1 0101                       	dc.b	$01, $01
0007C2E3 E1FE                       	smpsAlterNote       $FE
0007C2E5 01                         	dc.b	$01
0007C2E6 E1F9                       	smpsAlterNote       $F9
0007C2E8 01                         	dc.b	$01
0007C2E9 E1FC                       	smpsAlterNote       $FC
0007C2EB ECF5                       	smpsPSGAlterVol     $F5
0007C2ED 8F06                       	dc.b	nD1, $06
0007C2EF EC04                       	smpsPSGAlterVol     $04
0007C2F1 E701                       	dc.b	smpsNoAttack, $01
0007C2F3 EC07                       	smpsPSGAlterVol     $07
0007C2F5 8003                       	dc.b	nRst, $03
0007C2F7 ECF5                       	smpsPSGAlterVol     $F5
0007C2F9 8F06                       	dc.b	nD1, $06
0007C2FB EC04                       	smpsPSGAlterVol     $04
0007C2FD E701                       	dc.b	smpsNoAttack, $01
0007C2FF EC07                       	smpsPSGAlterVol     $07
0007C301 8006                       	dc.b	nRst, $06
0007C303 E1FF                       	smpsAlterNote       $FF
0007C305 01                         	dc.b	$01
0007C306 E103                       	smpsAlterNote       $03
0007C308 01                         	dc.b	$01
0007C309 E1FF                       	smpsAlterNote       $FF
0007C30B 01                         	dc.b	$01
0007C30C E1FB                       	smpsAlterNote       $FB
0007C30E 01                         	dc.b	$01
0007C30F ECF5                       	smpsPSGAlterVol     $F5
0007C311 8E06                       	dc.b	nCs1, $06
0007C313 EC04                       	smpsPSGAlterVol     $04
0007C315 E701                       	dc.b	smpsNoAttack, $01
0007C317 EC07                       	smpsPSGAlterVol     $07
0007C319 8003                       	dc.b	nRst, $03
0007C31B ECF5                       	smpsPSGAlterVol     $F5
0007C31D 8E07                       	dc.b	nCs1, $07
0007C31F E1FF                       	smpsAlterNote       $FF
0007C321 9B06                       	dc.b	nD2, $06
0007C323 EC04                       	smpsPSGAlterVol     $04
0007C325 E701                       	dc.b	smpsNoAttack, $01
0007C327 ECFC                       	smpsPSGAlterVol     $FC
0007C329 9B03                       	dc.b	nD2, $03
0007C32B EC04                       	smpsPSGAlterVol     $04
0007C32D E701                       	dc.b	smpsNoAttack, $01
0007C32F ECFC                       	smpsPSGAlterVol     $FC
0007C331 9B02                       	dc.b	nD2, $02
0007C333 EC04                       	smpsPSGAlterVol     $04
0007C335 E701                       	dc.b	smpsNoAttack, $01
0007C337 ECFC                       	smpsPSGAlterVol     $FC
0007C339 E1FE                       	smpsAlterNote       $FE
0007C33B 9A03                       	dc.b	nCs2, $03
0007C33D EC0B                       	smpsPSGAlterVol     $0B
0007C33F 800A                       	dc.b	nRst, $0A
0007C341 E102                       	smpsAlterNote       $02
0007C343 01                         	dc.b	$01
0007C344 E10A                       	smpsAlterNote       $0A
0007C346 01                         	dc.b	$01
0007C347 E102                       	smpsAlterNote       $02
0007C349 01                         	dc.b	$01
0007C34A E1F7                       	smpsAlterNote       $F7
0007C34C 01                         	dc.b	$01
0007C34D E10A                       	smpsAlterNote       $0A
0007C34F 01                         	dc.b	$01
0007C350 E1FC                       	smpsAlterNote       $FC
0007C352 01                         	dc.b	$01
0007C353 E108                       	smpsAlterNote       $08
0007C355 0101                       	dc.b	$01, $01
0007C357 E102                       	smpsAlterNote       $02
0007C359 01                         	dc.b	$01
0007C35A E1F7                       	smpsAlterNote       $F7
0007C35C 0101                       	dc.b	$01, $01
0007C35E E1FC                       	smpsAlterNote       $FC
0007C360 ECF5                       	smpsPSGAlterVol     $F5
0007C362 8F06                       	dc.b	nD1, $06
0007C364 EC04                       	smpsPSGAlterVol     $04
0007C366 E701                       	dc.b	smpsNoAttack, $01
0007C368 EC07                       	smpsPSGAlterVol     $07
0007C36A 8003                       	dc.b	nRst, $03
0007C36C ECF5                       	smpsPSGAlterVol     $F5
0007C36E 8F06                       	dc.b	nD1, $06
0007C370 EC04                       	smpsPSGAlterVol     $04
0007C372 E701                       	dc.b	smpsNoAttack, $01
0007C374 EC07                       	smpsPSGAlterVol     $07
0007C376 8006                       	dc.b	nRst, $06
0007C378 E1FF                       	smpsAlterNote       $FF
0007C37A 01                         	dc.b	$01
0007C37B E102                       	smpsAlterNote       $02
0007C37D 01                         	dc.b	$01
0007C37E E101                       	smpsAlterNote       $01
0007C380 01                         	dc.b	$01
0007C381 E1FC                       	smpsAlterNote       $FC
0007C383 01                         	dc.b	$01
0007C384 ECF5                       	smpsPSGAlterVol     $F5
0007C386 9007                       	dc.b	nEb1, $07
0007C388 EC0B                       	smpsPSGAlterVol     $0B
0007C38A 8004                       	dc.b	nRst, $04
0007C38C ECF5                       	smpsPSGAlterVol     $F5
0007C38E 9006                       	dc.b	nEb1, $06
0007C390 EC0B                       	smpsPSGAlterVol     $0B
0007C392 8007                       	dc.b	nRst, $07
0007C394 E103                       	smpsAlterNote       $03
0007C396 0101                       	dc.b	$01, $01
0007C398 E1FF                       	smpsAlterNote       $FF
0007C39A 01                         	dc.b	$01
0007C39B E1F9                       	smpsAlterNote       $F9
0007C39D 01                         	dc.b	$01
0007C39E E1FC                       	smpsAlterNote       $FC
0007C3A0 ECF5                       	smpsPSGAlterVol     $F5
0007C3A2 8F06                       	dc.b	nD1, $06
0007C3A4 EC04                       	smpsPSGAlterVol     $04
0007C3A6 E701                       	dc.b	smpsNoAttack, $01
0007C3A8 EC07                       	smpsPSGAlterVol     $07
0007C3AA 8003                       	dc.b	nRst, $03
0007C3AC ECF5                       	smpsPSGAlterVol     $F5
0007C3AE 8F06                       	dc.b	nD1, $06
0007C3B0 EC04                       	smpsPSGAlterVol     $04
0007C3B2 E701                       	dc.b	smpsNoAttack, $01
0007C3B4 EC07                       	smpsPSGAlterVol     $07
0007C3B6 8006                       	dc.b	nRst, $06
0007C3B8 E1FF                       	smpsAlterNote       $FF
0007C3BA 01                         	dc.b	$01
0007C3BB E103                       	smpsAlterNote       $03
0007C3BD 01                         	dc.b	$01
0007C3BE E1FF                       	smpsAlterNote       $FF
0007C3C0 01                         	dc.b	$01
0007C3C1 E1F9                       	smpsAlterNote       $F9
0007C3C3 01                         	dc.b	$01
0007C3C4 E1FC                       	smpsAlterNote       $FC
0007C3C6 ECF5                       	smpsPSGAlterVol     $F5
0007C3C8 8F06                       	dc.b	nD1, $06
0007C3CA EC04                       	smpsPSGAlterVol     $04
0007C3CC E701                       	dc.b	smpsNoAttack, $01
0007C3CE EC07                       	smpsPSGAlterVol     $07
0007C3D0 8003                       	dc.b	nRst, $03
0007C3D2 ECF5                       	smpsPSGAlterVol     $F5
0007C3D4 8F07                       	dc.b	nD1, $07
0007C3D6 EC0B                       	smpsPSGAlterVol     $0B
0007C3D8 8006                       	dc.b	nRst, $06
0007C3DA E1FF                       	smpsAlterNote       $FF
0007C3DC 01                         	dc.b	$01
0007C3DD E102                       	smpsAlterNote       $02
0007C3DF 0101                       	dc.b	$01, $01
0007C3E1 E1FC                       	smpsAlterNote       $FC
0007C3E3 01                         	dc.b	$01
0007C3E4 ECF5                       	smpsPSGAlterVol     $F5
0007C3E6 8F07                       	dc.b	nD1, $07
0007C3E8 EC0B                       	smpsPSGAlterVol     $0B
0007C3EA 8004                       	dc.b	nRst, $04
0007C3EC ECF5                       	smpsPSGAlterVol     $F5
0007C3EE 8F06                       	dc.b	nD1, $06
0007C3F0 EC04                       	smpsPSGAlterVol     $04
0007C3F2 E701                       	dc.b	smpsNoAttack, $01
0007C3F4 EC07                       	smpsPSGAlterVol     $07
0007C3F6 8006                       	dc.b	nRst, $06
0007C3F8 E101                       	smpsAlterNote       $01
0007C3FA 01                         	dc.b	$01
0007C3FB E102                       	smpsAlterNote       $02
0007C3FD 01                         	dc.b	$01
0007C3FE E1FF                       	smpsAlterNote       $FF
0007C400 01                         	dc.b	$01
0007C401 E1F9                       	smpsAlterNote       $F9
0007C403 01                         	dc.b	$01
0007C404 E1FC                       	smpsAlterNote       $FC
0007C406 ECF5                       	smpsPSGAlterVol     $F5
0007C408 9006                       	dc.b	nEb1, $06
0007C40A EC04                       	smpsPSGAlterVol     $04
0007C40C E701                       	dc.b	smpsNoAttack, $01
0007C40E EC07                       	smpsPSGAlterVol     $07
0007C410 8003                       	dc.b	nRst, $03
0007C412 ECF5                       	smpsPSGAlterVol     $F5
0007C414 9006                       	dc.b	nEb1, $06
0007C416 EC04                       	smpsPSGAlterVol     $04
0007C418 E701                       	dc.b	smpsNoAttack, $01
0007C41A EC07                       	smpsPSGAlterVol     $07
0007C41C 8006                       	dc.b	nRst, $06
0007C41E E100                       	smpsAlterNote       $00
0007C420 01                         	dc.b	$01
0007C421 E102                       	smpsAlterNote       $02
0007C423 01                         	dc.b	$01
0007C424 E100                       	smpsAlterNote       $00
0007C426 01                         	dc.b	$01
0007C427 E1FF                       	smpsAlterNote       $FF
0007C429 01                         	dc.b	$01
0007C42A ECF5                       	smpsPSGAlterVol     $F5
0007C42C 9B06                       	dc.b	nD2, $06
0007C42E EC04                       	smpsPSGAlterVol     $04
0007C430 E701                       	dc.b	smpsNoAttack, $01
0007C432 EC07                       	smpsPSGAlterVol     $07
0007C434 8003                       	dc.b	nRst, $03
0007C436 ECF5                       	smpsPSGAlterVol     $F5
0007C438 9B07                       	dc.b	nD2, $07
0007C43A EC0B                       	smpsPSGAlterVol     $0B
0007C43C 8007                       	dc.b	nRst, $07
0007C43E E105                       	smpsAlterNote       $05
0007C440 0101                       	dc.b	$01, $01
0007C442 E1FF                       	smpsAlterNote       $FF
0007C444 01                         	dc.b	$01
0007C445 E1FC                       	smpsAlterNote       $FC
0007C447 01                         	dc.b	$01
0007C448 E1FF                       	smpsAlterNote       $FF
0007C44A ECF5                       	smpsPSGAlterVol     $F5
0007C44C 9B06                       	dc.b	nD2, $06
0007C44E EC0B                       	smpsPSGAlterVol     $0B
0007C450 8004                       	dc.b	nRst, $04
0007C452 ECF5                       	smpsPSGAlterVol     $F5
0007C454 9B06                       	dc.b	nD2, $06
0007C456 EC04                       	smpsPSGAlterVol     $04
0007C458 E701                       	dc.b	smpsNoAttack, $01
0007C45A EC07                       	smpsPSGAlterVol     $07
0007C45C 8006                       	dc.b	nRst, $06
0007C45E E102                       	smpsAlterNote       $02
0007C460 01                         	dc.b	$01
0007C461 E106                       	smpsAlterNote       $06
0007C463 01                         	dc.b	$01
0007C464 E102                       	smpsAlterNote       $02
0007C466 01                         	dc.b	$01
0007C467 E1FC                       	smpsAlterNote       $FC
0007C469 01                         	dc.b	$01
0007C46A E1FF                       	smpsAlterNote       $FF
0007C46C ECF5                       	smpsPSGAlterVol     $F5
0007C46E 9B06                       	dc.b	nD2, $06
0007C470 EC04                       	smpsPSGAlterVol     $04
0007C472 E701                       	dc.b	smpsNoAttack, $01
0007C474 EC07                       	smpsPSGAlterVol     $07
0007C476 8003                       	dc.b	nRst, $03
0007C478 ECF5                       	smpsPSGAlterVol     $F5
0007C47A 9B07                       	dc.b	nD2, $07
0007C47C EC0B                       	smpsPSGAlterVol     $0B
0007C47E 8006                       	dc.b	nRst, $06
0007C480 E102                       	smpsAlterNote       $02
0007C482 01                         	dc.b	$01
0007C483 E105                       	smpsAlterNote       $05
0007C485 0101                       	dc.b	$01, $01
0007C487 E1FF                       	smpsAlterNote       $FF
0007C489 01                         	dc.b	$01
0007C48A ECF5                       	smpsPSGAlterVol     $F5
0007C48C 9B07                       	dc.b	nD2, $07
0007C48E EC0B                       	smpsPSGAlterVol     $0B
0007C490 8004                       	dc.b	nRst, $04
0007C492 ECF5                       	smpsPSGAlterVol     $F5
0007C494 9B06                       	dc.b	nD2, $06
0007C496 EC04                       	smpsPSGAlterVol     $04
0007C498 E701                       	dc.b	smpsNoAttack, $01
0007C49A EC07                       	smpsPSGAlterVol     $07
0007C49C 8006                       	dc.b	nRst, $06
0007C49E E105                       	smpsAlterNote       $05
0007C4A0 0101                       	dc.b	$01, $01
0007C4A2 E102                       	smpsAlterNote       $02
0007C4A4 01                         	dc.b	$01
0007C4A5 E1FC                       	smpsAlterNote       $FC
0007C4A7 01                         	dc.b	$01
0007C4A8 E1FF                       	smpsAlterNote       $FF
0007C4AA ECF5                       	smpsPSGAlterVol     $F5
0007C4AC 9B06                       	dc.b	nD2, $06
0007C4AE EC04                       	smpsPSGAlterVol     $04
0007C4B0 E701                       	dc.b	smpsNoAttack, $01
0007C4B2 EC07                       	smpsPSGAlterVol     $07
0007C4B4 8003                       	dc.b	nRst, $03
0007C4B6 ECF5                       	smpsPSGAlterVol     $F5
0007C4B8 9B06                       	dc.b	nD2, $06
0007C4BA EC04                       	smpsPSGAlterVol     $04
0007C4BC E701                       	dc.b	smpsNoAttack, $01
0007C4BE EC07                       	smpsPSGAlterVol     $07
0007C4C0 8006                       	dc.b	nRst, $06
0007C4C2 E102                       	smpsAlterNote       $02
0007C4C4 01                         	dc.b	$01
0007C4C5 E106                       	smpsAlterNote       $06
0007C4C7 01                         	dc.b	$01
0007C4C8 E102                       	smpsAlterNote       $02
0007C4CA 01                         	dc.b	$01
0007C4CB E1FF                       	smpsAlterNote       $FF
0007C4CD 01                         	dc.b	$01
0007C4CE ECF5                       	smpsPSGAlterVol     $F5
0007C4D0 9B06                       	dc.b	nD2, $06
0007C4D2 EC04                       	smpsPSGAlterVol     $04
0007C4D4 E701                       	dc.b	smpsNoAttack, $01
0007C4D6 EC07                       	smpsPSGAlterVol     $07
0007C4D8 8003                       	dc.b	nRst, $03
0007C4DA ECF5                       	smpsPSGAlterVol     $F5
0007C4DC 9B07                       	dc.b	nD2, $07
0007C4DE EC0B                       	smpsPSGAlterVol     $0B
0007C4E0 8007                       	dc.b	nRst, $07
0007C4E2 E107                       	smpsAlterNote       $07
0007C4E4 0101                       	dc.b	$01, $01
0007C4E6 E1FE                       	smpsAlterNote       $FE
0007C4E8 01                         	dc.b	$01
0007C4E9 E1FA                       	smpsAlterNote       $FA
0007C4EB 0101                       	dc.b	$01, $01
0007C4ED E103                       	smpsAlterNote       $03
0007C4EF 01                         	dc.b	$01
0007C4F0 E109                       	smpsAlterNote       $09
0007C4F2 01                         	dc.b	$01
0007C4F3 E107                       	smpsAlterNote       $07
0007C4F5 01                         	dc.b	$01
0007C4F6 E1FE                       	smpsAlterNote       $FE
0007C4F8 01                         	dc.b	$01
0007C4F9 E108                       	smpsAlterNote       $08
0007C4FB 01                         	dc.b	$01
0007C4FC E1FD                       	smpsAlterNote       $FD
0007C4FE ECF5                       	smpsPSGAlterVol     $F5
0007C500 940E                       	dc.b	nG1, $0E
0007C502 E103                       	smpsAlterNote       $03
0007C504 EC0B                       	smpsPSGAlterVol     $0B
0007C506 8001 01                    	dc.b	nRst, $01, $01
0007C509 E1FD                       	smpsAlterNote       $FD
0007C50B 01                         	dc.b	$01
0007C50C E1FB                       	smpsAlterNote       $FB
0007C50E 0101                       	dc.b	$01, $01
0007C510 E100                       	smpsAlterNote       $00
0007C512 01                         	dc.b	$01
0007C513 E103                       	smpsAlterNote       $03
0007C515 01                         	dc.b	$01
0007C516 E100                       	smpsAlterNote       $00
0007C518 01                         	dc.b	$01
0007C519 E1FD                       	smpsAlterNote       $FD
0007C51B 01                         	dc.b	$01
0007C51C E1FA                       	smpsAlterNote       $FA
0007C51E 01                         	dc.b	$01
0007C51F E1FD                       	smpsAlterNote       $FD
0007C521 01                         	dc.b	$01
0007C522 E103                       	smpsAlterNote       $03
0007C524 0101                       	dc.b	$01, $01
0007C526 E100                       	smpsAlterNote       $00
0007C528 01                         	dc.b	$01
0007C529 E1FE                       	smpsAlterNote       $FE
0007C52B ECF5                       	smpsPSGAlterVol     $F5
0007C52D 960D                       	dc.b	nA1, $0D
0007C52F E104                       	smpsAlterNote       $04
0007C531 EC0B                       	smpsPSGAlterVol     $0B
0007C533 8001 01                    	dc.b	nRst, $01, $01
0007C536 E101                       	smpsAlterNote       $01
0007C538 01                         	dc.b	$01
0007C539 E1FB                       	smpsAlterNote       $FB
0007C53B 0101                       	dc.b	$01, $01
0007C53D E1FE                       	smpsAlterNote       $FE
0007C53F 01                         	dc.b	$01
0007C540 E104                       	smpsAlterNote       $04
0007C542 0101                       	dc.b	$01, $01
0007C544 E1FE                       	smpsAlterNote       $FE
0007C546 01                         	dc.b	$01
0007C547 E1FB                       	smpsAlterNote       $FB
0007C549 0101                       	dc.b	$01, $01
0007C54B E101                       	smpsAlterNote       $01
0007C54D 01                         	dc.b	$01
0007C54E E104                       	smpsAlterNote       $04
0007C550 0101                       	dc.b	$01, $01
0007C552 E1FE                       	smpsAlterNote       $FE
0007C554 ECF5                       	smpsPSGAlterVol     $F5
0007C556 970D                       	dc.b	nBb1, $0D
0007C558 E101                       	smpsAlterNote       $01
0007C55A EC04                       	smpsPSGAlterVol     $04
0007C55C E701                       	dc.b	smpsNoAttack, $01
0007C55E EC07                       	smpsPSGAlterVol     $07
0007C560 E104                       	smpsAlterNote       $04
0007C562 8001                       	dc.b	nRst, $01
0007C564 E103                       	smpsAlterNote       $03
0007C566 01                         	dc.b	$01
0007C567 E1FE                       	smpsAlterNote       $FE
0007C569 01                         	dc.b	$01
0007C56A E1FA                       	smpsAlterNote       $FA
0007C56C 01                         	dc.b	$01
0007C56D E1FE                       	smpsAlterNote       $FE
0007C56F 01                         	dc.b	$01
0007C570 E101                       	smpsAlterNote       $01
0007C572 01                         	dc.b	$01
0007C573 E104                       	smpsAlterNote       $04
0007C575 01                         	dc.b	$01
0007C576 E101                       	smpsAlterNote       $01
0007C578 01                         	dc.b	$01
0007C579 E1FB                       	smpsAlterNote       $FB
0007C57B 01                         	dc.b	$01
0007C57C E1FA                       	smpsAlterNote       $FA
0007C57E 01                         	dc.b	$01
0007C57F E1FE                       	smpsAlterNote       $FE
0007C581 01                         	dc.b	$01
0007C582 E103                       	smpsAlterNote       $03
0007C584 0101                       	dc.b	$01, $01
0007C586 E101                       	smpsAlterNote       $01
0007C588 01                         	dc.b	$01
0007C589 E1FE                       	smpsAlterNote       $FE
0007C58B ECF5                       	smpsPSGAlterVol     $F5
0007C58D 990D                       	dc.b	nC2, $0D
0007C58F E104                       	smpsAlterNote       $04
0007C591 EC0B                       	smpsPSGAlterVol     $0B
0007C593 8001 01                    	dc.b	nRst, $01, $01
0007C596 E102                       	smpsAlterNote       $02
0007C598 01                         	dc.b	$01
0007C599 E1FC                       	smpsAlterNote       $FC
0007C59B 0101                       	dc.b	$01, $01
0007C59D E102                       	smpsAlterNote       $02
0007C59F 01                         	dc.b	$01
0007C5A0 E104                       	smpsAlterNote       $04
0007C5A2 01                         	dc.b	$01
0007C5A3 E1FF                       	smpsAlterNote       $FF
0007C5A5 ECF5                       	smpsPSGAlterVol     $F5
0007C5A7 9B06                       	dc.b	nD2, $06
0007C5A9 EC04                       	smpsPSGAlterVol     $04
0007C5AB E701                       	dc.b	smpsNoAttack, $01
0007C5AD EC07                       	smpsPSGAlterVol     $07
0007C5AF 8003                       	dc.b	nRst, $03
0007C5B1 ECF5                       	smpsPSGAlterVol     $F5
0007C5B3 9B07                       	dc.b	nD2, $07
0007C5B5 EC0B                       	smpsPSGAlterVol     $0B
0007C5B7 8006                       	dc.b	nRst, $06
0007C5B9 E101                       	smpsAlterNote       $01
0007C5BB 01                         	dc.b	$01
0007C5BC E104                       	smpsAlterNote       $04
0007C5BE 0101                       	dc.b	$01, $01
0007C5C0 E1FE                       	smpsAlterNote       $FE
0007C5C2 01                         	dc.b	$01
0007C5C3 E1FC                       	smpsAlterNote       $FC
0007C5C5 01                         	dc.b	$01
0007C5C6 E1FE                       	smpsAlterNote       $FE
0007C5C8 ECF5                       	smpsPSGAlterVol     $F5
0007C5CA 9C06                       	dc.b	nEb2, $06
0007C5CC EC0B                       	smpsPSGAlterVol     $0B
0007C5CE 8004                       	dc.b	nRst, $04
0007C5D0 ECF5                       	smpsPSGAlterVol     $F5
0007C5D2 9C06                       	dc.b	nEb2, $06
0007C5D4 EC04                       	smpsPSGAlterVol     $04
0007C5D6 E701                       	dc.b	smpsNoAttack, $01
0007C5D8 EC07                       	smpsPSGAlterVol     $07
0007C5DA 8006                       	dc.b	nRst, $06
0007C5DC E105                       	smpsAlterNote       $05
0007C5DE 01                         	dc.b	$01
0007C5DF E106                       	smpsAlterNote       $06
0007C5E1 01                         	dc.b	$01
0007C5E2 E102                       	smpsAlterNote       $02
0007C5E4 01                         	dc.b	$01
0007C5E5 E1FB                       	smpsAlterNote       $FB
0007C5E7 01                         	dc.b	$01
0007C5E8 E1FF                       	smpsAlterNote       $FF
0007C5EA ECF5                       	smpsPSGAlterVol     $F5
0007C5EC 9B06                       	dc.b	nD2, $06
0007C5EE EC04                       	smpsPSGAlterVol     $04
0007C5F0 E701                       	dc.b	smpsNoAttack, $01
0007C5F2 EC07                       	smpsPSGAlterVol     $07
0007C5F4 8003                       	dc.b	nRst, $03
0007C5F6 ECF5                       	smpsPSGAlterVol     $F5
0007C5F8 9B06                       	dc.b	nD2, $06
0007C5FA EC04                       	smpsPSGAlterVol     $04
0007C5FC E701                       	dc.b	smpsNoAttack, $01
0007C5FE EC07                       	smpsPSGAlterVol     $07
0007C600 8006                       	dc.b	nRst, $06
0007C602 E101                       	smpsAlterNote       $01
0007C604 01                         	dc.b	$01
0007C605 E105                       	smpsAlterNote       $05
0007C607 01                         	dc.b	$01
0007C608 E104                       	smpsAlterNote       $04
0007C60A 01                         	dc.b	$01
0007C60B E1FE                       	smpsAlterNote       $FE
0007C60D 01                         	dc.b	$01
0007C60E ECF5                       	smpsPSGAlterVol     $F5
0007C610 9C07                       	dc.b	nEb2, $07
0007C612 EC0B                       	smpsPSGAlterVol     $0B
0007C614 8004                       	dc.b	nRst, $04
0007C616 ECF5                       	smpsPSGAlterVol     $F5
0007C618 9C06                       	dc.b	nEb2, $06
0007C61A EC0B                       	smpsPSGAlterVol     $0B
0007C61C 8007                       	dc.b	nRst, $07
0007C61E E105                       	smpsAlterNote       $05
0007C620 0101                       	dc.b	$01, $01
0007C622 E102                       	smpsAlterNote       $02
0007C624 01                         	dc.b	$01
0007C625 E1FB                       	smpsAlterNote       $FB
0007C627 01                         	dc.b	$01
0007C628 E1FF                       	smpsAlterNote       $FF
0007C62A ECF5                       	smpsPSGAlterVol     $F5
0007C62C 9B06                       	dc.b	nD2, $06
0007C62E EC04                       	smpsPSGAlterVol     $04
0007C630 E701                       	dc.b	smpsNoAttack, $01
0007C632 EC07                       	smpsPSGAlterVol     $07
0007C634 8003                       	dc.b	nRst, $03
0007C636 ECF5                       	smpsPSGAlterVol     $F5
0007C638 9B06                       	dc.b	nD2, $06
0007C63A EC04                       	smpsPSGAlterVol     $04
0007C63C E701                       	dc.b	smpsNoAttack, $01
0007C63E EC07                       	smpsPSGAlterVol     $07
0007C640 8006                       	dc.b	nRst, $06
0007C642 E101                       	smpsAlterNote       $01
0007C644 01                         	dc.b	$01
0007C645 E105                       	smpsAlterNote       $05
0007C647 01                         	dc.b	$01
0007C648 E101                       	smpsAlterNote       $01
0007C64A 01                         	dc.b	$01
0007C64B E1FC                       	smpsAlterNote       $FC
0007C64D 01                         	dc.b	$01
0007C64E E1FE                       	smpsAlterNote       $FE
0007C650 ECF5                       	smpsPSGAlterVol     $F5
0007C652 9C06                       	dc.b	nEb2, $06
0007C654 EC04                       	smpsPSGAlterVol     $04
0007C656 E701                       	dc.b	smpsNoAttack, $01
0007C658 EC07                       	smpsPSGAlterVol     $07
0007C65A 8003                       	dc.b	nRst, $03
0007C65C ECF5                       	smpsPSGAlterVol     $F5
0007C65E 9C07                       	dc.b	nEb2, $07
0007C660 EC0B                       	smpsPSGAlterVol     $0B
0007C662 8006                       	dc.b	nRst, $06
0007C664 E102                       	smpsAlterNote       $02
0007C666 01                         	dc.b	$01
0007C667 E105                       	smpsAlterNote       $05
0007C669 0101                       	dc.b	$01, $01
0007C66B E1FF                       	smpsAlterNote       $FF
0007C66D 01                         	dc.b	$01
0007C66E ECF5                       	smpsPSGAlterVol     $F5
0007C670 9B07                       	dc.b	nD2, $07
0007C672 EC0B                       	smpsPSGAlterVol     $0B
0007C674 8004                       	dc.b	nRst, $04
0007C676 ECF5                       	smpsPSGAlterVol     $F5
0007C678 9B06                       	dc.b	nD2, $06
0007C67A EC04                       	smpsPSGAlterVol     $04
0007C67C E701                       	dc.b	smpsNoAttack, $01
0007C67E EC07                       	smpsPSGAlterVol     $07
0007C680 8002                       	dc.b	nRst, $02
0007C682 E1FC                       	smpsAlterNote       $FC
0007C684 ECF5                       	smpsPSGAlterVol     $F5
0007C686 9006                       	dc.b	nEb1, $06
0007C688 EC04                       	smpsPSGAlterVol     $04
0007C68A E701                       	dc.b	smpsNoAttack, $01
0007C68C ECFC                       	smpsPSGAlterVol     $FC
0007C68E 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
0007C692 EC04                       	smpsPSGAlterVol     $04
0007C694 E701                       	dc.b	smpsNoAttack, $01
0007C696 E1FD                       	smpsAlterNote       $FD
0007C698 ECFC                       	smpsPSGAlterVol     $FC
0007C69A 9402                       	dc.b	nG1, $02
0007C69C EC04                       	smpsPSGAlterVol     $04
0007C69E E701                       	dc.b	smpsNoAttack, $01
0007C6A0 E1FE                       	smpsAlterNote       $FE
0007C6A2 ECFC                       	smpsPSGAlterVol     $FC
0007C6A4 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
0007C6A8 EC04                       	smpsPSGAlterVol     $04
0007C6AA E701                       	dc.b	smpsNoAttack, $01
0007C6AC EC07                       	smpsPSGAlterVol     $07
0007C6AE 8008                       	dc.b	nRst, $08
0007C6B0 F6F4 F3                    	smpsJump            music84_Jump06
0007C6B3                            
0007C6B3                            ; PSG3 Data
0007C6B3                            music84_PSG3:
0007C6B3 F500                       	smpsPSGvoice        $00
0007C6B5 E1FF                       	smpsAlterNote       $FF
0007C6B7 EC0F                       	smpsPSGAlterVol     $0F
0007C6B9 803A                       	dc.b	nRst, $3A
0007C6BB                            
0007C6BB                            music84_Jump05:
0007C6BB 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
0007C6C7 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
0007C6D1 F6FF E8                    	smpsJump            music84_Jump05
0007C6D4                            
0007C6D4                            ; DAC Data
0007C6D4                            music84_DAC:
0007C6D4 E0C0                       	smpsPan             panCenter, $00
0007C6D6 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
0007C6E2 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
0007C6EE 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
0007C6FA 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0007C706 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0007C712 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
0007C71E 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0007C72A 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
0007C736 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0007C742 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
0007C74E 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0007C75A 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
0007C766 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
0007C772 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
0007C77E 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
0007C78A 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
0007C796 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
0007C7A2 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
0007C7AE 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
0007C7BA 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0007C7C6 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0007C7D2 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0007C7DE 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
0007C7EA 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
0007C7F6 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
0007C802 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
0007C80E 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
0007C81A 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0007C826 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0007C832 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0007C83E 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0007C84A 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0007C856 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
0007C862 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
0007C86E 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
0007C87A 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0007C886 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
0007C892 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
0007C89E 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
0007C8AA 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
0007C8B6 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
0007C8C2 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
0007C8CE 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0007C8DA 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
0007C8E6 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
0007C8F2 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0007C8FE 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
0007C90A 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
0007C916 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
0007C922 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
0007C92E 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
0007C93A 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
0007C946 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
0007C952 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
0007C95E 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
0007C96A 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
0007C976 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
0007C982 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
0007C98E 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
0007C99A 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
0007C9A6 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
0007C9B2 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
0007C9BE 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
0007C9CA 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
0007C9D6 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
0007C9E2 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
0007C9EE 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
0007C9FA 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
0007CA06 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
0007CA12 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
0007CA1E 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
0007CA2A 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
0007CA36 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
0007CA42 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
0007CA4E 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
0007CA5A E0C0                       	smpsPan             panCenter, $00
0007CA5C F2                         	smpsStop
0007CA5D                            
0007CA5D                            music84_Voices:
0007CA5D                            ;	Voice $00
0007CA5D                            ;	$3D
0007CA5D                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
0007CA5D                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
0007CA5D                            	smpsVcAlgorithm     $05
0007CA5D                            	smpsVcFeedback      $07
0007CA5D                            	smpsVcUnusedBits    $00
0007CA5D                            	smpsVcDetune        $05, $04, $03, $04
0007CA5D                            	smpsVcCoarseFreq    $01, $01, $01, $01
0007CA5D                            	smpsVcRateScale     $00, $00, $00, $00
0007CA5D                            	smpsVcAttackRate    $11, $11, $11, $11
0007CA5D                            	smpsVcAmpMod        $00, $00, $00, $00
0007CA5D                            	smpsVcDecayRate1    $00, $00, $00, $0A
0007CA5D                            	smpsVcDecayRate2    $00, $00, $00, $0B
0007CA5D                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0007CA5D                            	smpsVcReleaseRate   $08, $08, $08, $07
0007CA5D 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
0007CA76                            
0007CA76                            ;	Voice $01
0007CA76                            ;	$04
0007CA76                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
0007CA76                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
0007CA76                            	smpsVcAlgorithm     $04
0007CA76                            	smpsVcFeedback      $00
0007CA76                            	smpsVcUnusedBits    $00
0007CA76                            	smpsVcDetune        $04, $03, $04, $05
0007CA76                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
0007CA76                            	smpsVcRateScale     $00, $01, $00, $01
0007CA76                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
0007CA76                            	smpsVcAmpMod        $00, $00, $00, $00
0007CA76                            	smpsVcDecayRate1    $0E, $00, $0E, $00
0007CA76                            	smpsVcDecayRate2    $05, $00, $05, $00
0007CA76                            	smpsVcDecayLevel    $08, $0E, $08, $0E
0007CA76                            	smpsVcReleaseRate   $06, $06, $06, $06
0007CA76 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
0007CA8F                            
0007CA8F                            ;	Voice $02
0007CA8F                            ;	$30
0007CA8F                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
0007CA8F                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
0007CA8F                            	smpsVcAlgorithm     $00
0007CA8F                            	smpsVcFeedback      $06
0007CA8F                            	smpsVcUnusedBits    $00
0007CA8F                            	smpsVcDetune        $04, $02, $00, $06
0007CA8F                            	smpsVcCoarseFreq    $01, $01, $03, $0C
0007CA8F                            	smpsVcRateScale     $00, $00, $00, $00
0007CA8F                            	smpsVcAttackRate    $1F, $1F, $1F, $14
0007CA8F                            	smpsVcAmpMod        $00, $00, $00, $00
0007CA8F                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
0007CA8F                            	smpsVcDecayRate2    $01, $01, $01, $01
0007CA8F                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
0007CA8F                            	smpsVcReleaseRate   $09, $0B, $08, $0F
0007CA8F 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
0007CAA8                            
0007CAA8                            ;	Voice $03
0007CAA8                            ;	$3A
0007CAA8                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
0007CAA8                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
0007CAA8                            	smpsVcAlgorithm     $02
0007CAA8                            	smpsVcFeedback      $07
0007CAA8                            	smpsVcUnusedBits    $00
0007CAA8                            	smpsVcDetune        $04, $06, $02, $00
0007CAA8                            	smpsVcCoarseFreq    $01, $01, $01, $01
0007CAA8                            	smpsVcRateScale     $00, $00, $00, $00
0007CAA8                            	smpsVcAttackRate    $18, $19, $14, $14
0007CAA8                            	smpsVcAmpMod        $00, $00, $00, $00
0007CAA8                            	smpsVcDecayRate1    $09, $0D, $09, $09
0007CAA8                            	smpsVcDecayRate2    $00, $00, $00, $00
0007CAA8                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
0007CAA8                            	smpsVcReleaseRate   $08, $0F, $0F, $07
0007CAA8 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
0007CAC1                            
0007CAC1                            ;	Voice $04
0007CAC1                            ;	$3C
0007CAC1                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
0007CAC1                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
0007CAC1                            	smpsVcAlgorithm     $04
0007CAC1                            	smpsVcFeedback      $07
0007CAC1                            	smpsVcUnusedBits    $00
0007CAC1                            	smpsVcDetune        $07, $00, $00, $03
0007CAC1                            	smpsVcCoarseFreq    $00, $00, $02, $0A
0007CAC1                            	smpsVcRateScale     $00, $00, $00, $00
0007CAC1                            	smpsVcAttackRate    $10, $1F, $10, $1F
0007CAC1                            	smpsVcAmpMod        $00, $00, $00, $00
0007CAC1                            	smpsVcDecayRate1    $00, $00, $00, $00
0007CAC1                            	smpsVcDecayRate2    $00, $00, $00, $00
0007CAC1                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
0007CAC1                            	smpsVcReleaseRate   $0A, $02, $0A, $02
0007CAC1 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
0007CADA                            
0007CADA                            ;	Voice $05
0007CADA                            ;	$38
0007CADA                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
0007CADA                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
0007CADA                            	smpsVcAlgorithm     $00
0007CADA                            	smpsVcFeedback      $07
0007CADA                            	smpsVcUnusedBits    $00
0007CADA                            	smpsVcDetune        $04, $06, $02, $00
0007CADA                            	smpsVcCoarseFreq    $01, $01, $01, $00
0007CADA                            	smpsVcRateScale     $00, $00, $00, $00
0007CADA                            	smpsVcAttackRate    $1F, $1F, $1F, $10
0007CADA                            	smpsVcAmpMod        $00, $00, $00, $00
0007CADA                            	smpsVcDecayRate1    $00, $03, $00, $17
0007CADA                            	smpsVcDecayRate2    $00, $08, $08, $0B
0007CADA                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
0007CADA                            	smpsVcReleaseRate   $08, $05, $05, $05
0007CADA 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
0007CAF3                            
0007CAF3                            
0007CAF4 00                         		even
0007CAF4                            Music85:	incbin	sound\glass2.bin
00080D04                            		even
00080D04                            Music86:	incbin	sound\music86.bin
00081254                            		even
00081254                            Music87:	include	sound\music87.asm
00081254                            triple_Header:
00081254 =00000001                  smpsHeaderStartSong = 1
00081254 0000                       	smpsHeaderVoice     triple_Voices
00081256 0501                       	smpsHeaderChan      $05, $01
00081258 0200                       	smpsHeaderTempo     $02, $00
0008125A                            
0008125E 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
00081262 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
00081266 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
0008126A 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
0008126E 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
00081274                            
00081274                            ; DAC Data
00081274                            triple_DAC:
00081274 E0C0                       	smpsPan             panCenter, $00
00081276 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
0008127C                            
0008127C                            triple_Loop01:
0008127C 8282 82                    	dc.b	dSnare, dSnare, dSnare
0008127F                            
0008127F                            triple_Loop00:
0008127F 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
0008128B 06                         	dc.b	$06
0008128C F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
00081291 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
0008129D 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000812A4 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000812A9 0303 1B                    	dc.b	$03, $03, $1B
000812AC E0C0                       	smpsPan             panCenter, $00
000812AE F6FF C4                    	smpsJump triple_DAC
000812B1                            
000812B1                            ; FM1 Data
000812B1                            triple_FM1:
000812B1 E0C0                       	smpsPan             panCenter, $00
000812B5 8018                       	dc.b	nRst, $18
000812B7                            
000812B7                            triple_Loop0B:
000812B7 AC06 B8                    	dc.b	nG3, $06, nG4
000812BA F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000812BF                            
000812BF                            triple_Loop0C:
000812BF A7B3                       	dc.b	nD3, nD4
000812C1 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000812C6                            
000812C6                            triple_Loop0D:
000812C6 A9B5                       	dc.b	nE3, nE4
000812C8 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000812CD A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000812D5 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000812DA A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000812E6 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000812F2 AD                         	dc.b	nAb3
000812F3 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000812F8 8018                       	dc.b	nRst, $18
000812FA E0C0                       	smpsPan             panCenter, $00
000812FE F6FF B1                    	smpsJump triple_FM1
00081301                            
00081301                            ; FM2 Data
00081301                            triple_FM2:
00081301 E0C0                       	smpsPan             panCenter, $00
00081305 8018                       	dc.b	nRst, $18
00081307                            
00081307                            triple_Loop07:
00081307 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00081313 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008131F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
00081324 8003                       	dc.b	nRst, $03
00081326                            
00081326                            triple_Loop08:
00081326 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008132C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
00081331 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
00081337                            
00081337                            triple_Loop09:
00081337 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
00081343 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
0008134F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
00081354 8003                       	dc.b	nRst, $03
00081356                            
00081356                            triple_Loop0A:
00081356 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
0008135C F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
00081361 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00081367 E0C0                       	smpsPan             panCenter, $00
0008136B F6FF 94                    	smpsJump triple_FM2
0008136E                            
0008136E                            ; FM3 Data
0008136E                            triple_FM3:
0008136E E0C0                       	smpsPan             panCenter, $00
00081372 8018                       	dc.b	nRst, $18
00081374                            
00081374                            triple_Loop06:
00081374 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
0008137B F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
00081380 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
0008138C BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
00081398 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
0008139B F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000813A0 8018                       	dc.b	nRst, $18
000813A2 E0C0                       	smpsPan             panCenter, $00
000813A6 F6FF C6                    	smpsJump triple_FM3
000813A9                            
000813A9                            ; FM4 Data
000813A9                            triple_FM4:
000813A9 E103                       	smpsAlterNote       $03
000813AD E0C0                       	smpsPan             panCenter, $00
000813AF 8018                       	dc.b	nRst, $18
000813B1                            
000813B1                            triple_Loop02:
000813B1 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000813BD C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000813C9 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000813CE 8003                       	dc.b	nRst, $03
000813D0                            
000813D0                            triple_Loop03:
000813D0 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000813D6 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000813DB B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000813E1                            
000813E1                            triple_Loop04:
000813E1 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000813ED C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000813F9 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000813FE 8003                       	dc.b	nRst, $03
00081400                            
00081400                            triple_Loop05:
00081400 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
00081406 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
0008140B B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
00081411 E0C0                       	smpsPan             panCenter, $00
00081413 F6FF 94                    	smpsJump triple_FM4
00081416                            
00081416                            ; PSG1 Data
00081416                            triple_PSG1:
00081416 8018                       	dc.b	nRst, $18
00081418                            
00081418                            triple_Loop0E:
00081418 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00081424 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00081430 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
0008143C 9402 8004                  	dc.b	nG1, $02, nRst, $04
00081440 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
00081445 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
00081451 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
0008145D 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
00081469 9402 8007                  	dc.b	nG1, $02, nRst, $07
0008146D                            
0008146D                            triple_Loop0F:
0008146D 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
00081473 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
00081478 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
0008147E                            
0008147E                            triple_Loop10:
0008147E A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
0008148A 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
00081496 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000814A2 9402 8004                  	dc.b	nG1, $02, nRst, $04
000814A6 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000814AB A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000814B7 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000814C3 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000814CF 9402 8007                  	dc.b	nG1, $02, nRst, $07
000814D3                            
000814D3                            triple_Loop11:
000814D3 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000814D9 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000814DE 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000814E4 F500                       	smpsPSGvoice        $00
000814E6 F6FF 2E                    	smpsJump triple_PSG1
000814E9                            
000814E9                            triple_Voices:
000814E9                            ;	Voice $00
000814E9                            ;	$3A
000814E9                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000814E9                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000814E9                            	smpsVcAlgorithm     $02
000814E9                            	smpsVcFeedback      $07
000814E9                            	smpsVcUnusedBits    $00
000814E9                            	smpsVcDetune        $00, $00, $00, $00
000814E9                            	smpsVcCoarseFreq    $01, $01, $07, $01
000814E9                            	smpsVcRateScale     $01, $02, $02, $02
000814E9                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000814E9                            	smpsVcAmpMod        $00, $00, $00, $00
000814E9                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000814E9                            	smpsVcDecayRate2    $00, $00, $00, $00
000814E9                            	smpsVcDecayLevel    $00, $01, $0F, $01
000814E9                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000814E9 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
00081502                            
00081502                            ;	Voice $01
00081502                            ;	$20
00081502                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
00081502                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
00081502                            	smpsVcAlgorithm     $00
00081502                            	smpsVcFeedback      $04
00081502                            	smpsVcUnusedBits    $00
00081502                            	smpsVcDetune        $00, $00, $03, $07
00081502                            	smpsVcCoarseFreq    $00, $00, $01, $0A
00081502                            	smpsVcRateScale     $03, $03, $03, $02
00081502                            	smpsVcAttackRate    $1F, $1C, $18, $1F
00081502                            	smpsVcAmpMod        $00, $00, $00, $00
00081502                            	smpsVcDecayRate1    $04, $04, $0A, $10
00081502                            	smpsVcDecayRate2    $08, $08, $08, $0F
00081502                            	smpsVcDecayLevel    $0B, $0B, $05, $05
00081502                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
00081502 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
00081502 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
0008151C 00                         		even
0008151C                            Music88:	incbin	sound\music88.bin
0008160A                            		even
0008160A                            Music89:	incbin	sound\music89.bin
000854D2 00                         		even
000854D2                            Music8A:	incbin	sound\music8A.bin
0008569C                            		even
0008569C                            Music8B:	incbin	sound\music8B.bin
00085936                            		even
00085936                            Music8C:	incbin	sound\music8C.bin
00085B52                            		even
00085B52                            Music8D:	incbin	sound\music8D.bin
00085D6E                            		even
00085D6E                            Music8E:	incbin	sound\fle.bin
000861DC 00                         		even
000861DC                            Music8F:	incbin	sound\music8F.bin
0008681C 00                         		even
0008681C                            Music90:	incbin	sound\music90.bin
0008697A                            		even
0008697A                            Music91:	incbin	sound\music91.bin
00087C48                            		even
00087C48                            Music92:	incbin	sound\music92.bin
00087D72                            		even
00087D72                            Music93:	incbin	sound\music93.bin
00087E40                            		even
00087E40                            ; ---------------------------------------------------------------------------
00087E40                            ; Sound	effect pointers
00087E40                            ; ---------------------------------------------------------------------------
00087E40 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00087E4C 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00087E58 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00087E64 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00087E70 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00087E7C 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00087E88 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00087E94 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00087EA0 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00087EAC 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
00087EB8 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00087EC4 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00087ED0 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
00087EDC 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
00087EE8 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00087EF4 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00087F00 0000 0000                  SoundD0Index:	dc.l SoundD0
00087F04                            SoundA0:	incbin	sound\soundA0.bin
00087F1A                            		even
00087F1A                            SoundA1:	incbin	sound\soundA1.bin
00087F44                            		even
00087F44                            SoundA2:	incbin	sound\soundA2.bin
00087F64                            		even
00087F64                            SoundA3:	incbin	sound\soundA3.bin
00087F96                            		even
00087F96                            SoundA4:	incbin	sound\soundA4.bin
00087FCC                            		even
00087FCC                            SoundA5:	incbin	sound\soundA5.bin
00087FF8                            		even
00087FF8                            SoundA6:	incbin	sound\soundA6.bin
00088028                            		even
00088028                            SoundA7:	incbin	sound\soundA7.bin
00088058                            		even
00088058                            SoundA8:	incbin	sound\soundA8.bin
0008808C                            		even
0008808C                            SoundA9:	incbin	sound\soundA9.bin
0008809E                            		even
0008809E                            SoundAA:	incbin	sound\soundAA.bin
000880E0                            		even
000880E0                            SoundAB:	incbin	sound\soundAB.bin
00088100                            		even
00088100                            SoundAC:	incbin	sound\soundAC.bin
00088134                            		even
00088134                            SoundAD:	incbin	sound\soundAD.bin
0008816A                            		even
0008816A                            SoundAE:	incbin	sound\soundAE.bin
000881B4                            		even
000881B4                            SoundAF:	incbin	sound\soundAF.bin
000881E2                            		even
000881E2                            SoundB0:	incbin	sound\soundB0.bin
00088214                            		even
00088214                            SoundB1:	incbin	sound\soundB1.bin
00088240                            		even
00088240                            SoundB2:	incbin	sound\soundB2.bin
00088290                            		even
00088290                            SoundB3:	incbin	sound\soundB3.bin
000882DA                            		even
000882DA                            SoundB4:	include	sound\soundB4.asm
000882DA                            SndB4_Bumper_Header:
000882DA =00000001                  smpsHeaderStartSong = 1
000882DA 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000882DC 01                         	smpsHeaderTempoSFX  $01
000882DD 03                         	smpsHeaderChanSFX   $03
000882DE                            
000882F0                            
000882F0                            ; FM5 Data
000882F0                            SndB4_Bumper_FM5:
000882F2 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000882F5                            
000882F5                            ; FM4 Data
000882F5                            SndB4_Bumper_FM4:
000882F5 F2                         	smpsStop
000882F6                            
000882F6                            SndB4_Bumper_Jump00:
000882F6 A020                       	dc.b	nG2, $20
000882F8 F2                         	smpsStop
000882F9                            
000882F9                            ; FM3 Data
000882F9                            SndB4_Bumper_FM3:
000882F9 F2                         	smpsStop
000882FA                            
000882FA                            SndB4_Bumper_Voices:
000882FA                            ;	Voice $00
000882FA                            ;	$32
000882FA                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000882FA                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000882FA                            	smpsVcAlgorithm     $02
000882FA                            	smpsVcFeedback      $06
000882FA                            	smpsVcUnusedBits    $00
000882FA                            	smpsVcDetune        $07, $07, $02, $00
000882FA                            	smpsVcCoarseFreq    $00, $00, $00, $04
000882FA                            	smpsVcRateScale     $00, $00, $00, $00
000882FA                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000882FA                            	smpsVcAmpMod        $00, $00, $00, $00
000882FA                            	smpsVcDecayRate1    $08, $00, $00, $09
000882FA                            	smpsVcDecayRate2    $0B, $00, $00, $09
000882FA                            	smpsVcDecayLevel    $00, $00, $00, $00
000882FA                            	smpsVcReleaseRate   $0F, $00, $00, $00
000882FA 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000882FA 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
00088314 00                         		even
00088314                            SoundB5:	incbin	sound\soundB5.bin
00088342                            		even
00088342                            SoundB6:	incbin	sound\soundB6.bin
00088360                            		even
00088360                            SoundB7:	incbin	sound\soundB7.bin
0008839C                            		even
0008839C                            SoundB8:	incbin	sound\soundB8.bin
000883BA                            		even
000883BA                            SoundB9:	incbin	sound\soundB9.bin
0008841E                            		even
0008841E                            SoundBA:	incbin	sound\soundBA.bin
00088446                            		even
00088446                            SoundBB:	incbin	sound\soundBB.bin
00088472                            		even
00088472                            SoundBC:	incbin	sound\soundBC.bin
000884B4                            		even
000884B4                            SoundBD:	incbin	sound\soundBD.bin
00088508                            		even
00088508                            SoundBE:	incbin	sound\soundBE.bin
00088542                            		even
00088542                            SoundBF:	incbin	sound\soundBF.bin
000885B4                            		even
000885B4                            SoundC0:	incbin	sound\soundC0.bin
000885E2                            		even
000885E2                            SoundC1:	incbin	sound\soundC1.bin
0008861C                            		even
0008861C                            SoundC2:	incbin	sound\soundC2.bin
00088646                            		even
00088646                            SoundC3:	incbin	sound\soundC3.bin
000886C0                            		even
000886C0                            SoundC4:	incbin	sound\soundC4.bin
000886E8                            		even
000886E8                            SoundC5:	incbin	sound\soundC5.bin
00088750                            		even
00088750                            SoundC6:	incbin	sound\soundC6.bin
00088792                            		even
00088792                            SoundC7:	incbin	sound\soundC7.bin
000887C0                            		even
000887C0                            SoundC8:	incbin	sound\soundC8.bin
000887D2                            		even
000887D2                            SoundC9:	incbin	sound\soundC9.bin
00088800                            		even
00088800                            SoundCA:	incbin	sound\soundCA.bin
0008882E                            		even
0008882E                            SoundCB:	incbin	sound\soundCB.bin
0008887A                            		even
0008887A                            SoundCC:	incbin	sound\soundCC.bin
000888B4                            		even
000888B4                            SoundCD:	incbin	sound\soundCD.bin
000888C2                            		even
000888C2                            SoundCE:	incbin	sound\soundCE.bin
000888F0                            		even
000888F0                            SoundCF:	incbin	sound\soundCF.bin
00088928                            		even
00088928                            SoundD0:	incbin	sound\soundD0.bin
00088962                            		even
00088962                            SegaPCM:	incbin	sound\segapcm.bin
0008C59C                            SegaPCM_end:	even
0008C59C                            
0008C59C                            ; end of 'ROM'
0008C59C                            EndOfRom:
0008C59C                            
0008C59C                            
